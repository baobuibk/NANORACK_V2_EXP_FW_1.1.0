
EXP_V110_TEST_MIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009688  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08009818  08009818  0000a818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ca4  08009ca4  0000f174  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009ca4  08009ca4  0000aca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cac  08009cac  0000f174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cac  08009cac  0000acac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cb0  08009cb0  0000acb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00004174  20000000  08009cb4  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f174  2**0
                  CONTENTS
 10 .bss          00002084  20004174  20004174  0000f174  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200061f8  200061f8  0000f174  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f174  2**0
                  CONTENTS, READONLY
 13 .debug_info   000195d3  00000000  00000000  0000f1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e69  00000000  00000000  00028777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d90  00000000  00000000  0002d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000163e  00000000  00000000  0002f370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000b26c  00000000  00000000  000309ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa77  00000000  00000000  0003bc1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3c56  00000000  00000000  0005b691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014f2e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000086dc  00000000  00000000  0014f32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  00157a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20004174 	.word	0x20004174
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009800 	.word	0x08009800

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20004178 	.word	0x20004178
 80001cc:	08009800 	.word	0x08009800

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295
 800028e:	f000 b9d3 	b.w	8000638 <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f84d 	bl	8000340 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f840 	bl	8000340 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f82f 	bl	8000340 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f821 	bl	8000340 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f043 0201 	orr.w	r2, r3, #1
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	601a      	str	r2, [r3, #0]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f023 0201 	bic.w	r2, r3, #1
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	601a      	str	r2, [r3, #0]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	601a      	str	r2, [r3, #0]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	f023 0201 	bic.w	r2, r3, #1
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	60da      	str	r2, [r3, #12]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <LL_I2C_EnableIT_EVT>:
  * @rmtoll CR2          ITEVTEN       LL_I2C_EnableIT_EVT
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_EVT(I2C_TypeDef *I2Cx)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	605a      	str	r2, [r3, #4]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <LL_I2C_EnableIT_BUF>:
  * @rmtoll CR2          ITBUFEN       LL_I2C_EnableIT_BUF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_BUF(I2C_TypeDef *I2Cx)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	605a      	str	r2, [r3, #4]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <LL_I2C_DisableIT_BUF>:
  * @rmtoll CR2          ITBUFEN       LL_I2C_DisableIT_BUF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_BUF(I2C_TypeDef *I2Cx)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	605a      	str	r2, [r3, #4]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <LL_I2C_EnableIT_ERR>:
  * @rmtoll CR2          ITERREN       LL_I2C_EnableIT_ERR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_ERR(I2C_TypeDef *I2Cx)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	605a      	str	r2, [r3, #4]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076c:	2b80      	cmp	r3, #128	@ 0x80
 800076e:	bf0c      	ite	eq
 8000770:	2301      	moveq	r3, #1
 8000772:	2300      	movne	r3, #0
 8000774:	b2db      	uxtb	r3, r3
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000792:	2b40      	cmp	r3, #64	@ 0x40
 8000794:	bf0c      	ite	eq
 8000796:	2301      	moveq	r3, #1
 8000798:	2300      	movne	r3, #0
 800079a:	b2db      	uxtb	r3, r3
}
 800079c:	4618      	mov	r0, r3
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	f003 0302 	and.w	r3, r3, #2
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	bf0c      	ite	eq
 80007bc:	2301      	moveq	r3, #1
 80007be:	2300      	movne	r3, #0
 80007c0:	b2db      	uxtb	r3, r3
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <LL_I2C_IsActiveFlag_AF>:
  * @rmtoll SR1          AF            LL_I2C_IsActiveFlag_AF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_AF(I2C_TypeDef *I2Cx)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_AF) == (I2C_SR1_AF));
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80007de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80007e2:	bf0c      	ite	eq
 80007e4:	2301      	moveq	r3, #1
 80007e6:	2300      	movne	r3, #0
 80007e8:	b2db      	uxtb	r3, r3
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll SR1          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_STOPF) == (I2C_SR1_STOPF));
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f003 0310 	and.w	r3, r3, #16
 8000806:	2b10      	cmp	r3, #16
 8000808:	bf0c      	ite	eq
 800080a:	2301      	moveq	r3, #1
 800080c:	2300      	movne	r3, #0
 800080e:	b2db      	uxtb	r3, r3
}
 8000810:	4618      	mov	r0, r3
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <LL_I2C_IsActiveFlag_BERR>:
  * @rmtoll SR1          BERR          LL_I2C_IsActiveFlag_BERR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BERR(I2C_TypeDef *I2Cx)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BERR) == (I2C_SR1_BERR));
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800082c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000830:	bf0c      	ite	eq
 8000832:	2301      	moveq	r3, #1
 8000834:	2300      	movne	r3, #0
 8000836:	b2db      	uxtb	r3, r3
}
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <LL_I2C_IsActiveFlag_ARLO>:
  * @rmtoll SR1          ARLO          LL_I2C_IsActiveFlag_ARLO
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ARLO(I2C_TypeDef *I2Cx)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ARLO) == (I2C_SR1_ARLO));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000858:	bf0c      	ite	eq
 800085a:	2301      	moveq	r3, #1
 800085c:	2300      	movne	r3, #0
 800085e:	b2db      	uxtb	r3, r3
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <LL_I2C_IsActiveFlag_OVR>:
  * @rmtoll SR1          OVR           LL_I2C_IsActiveFlag_OVR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_OVR(I2C_TypeDef *I2Cx)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_OVR) == (I2C_SR1_OVR));
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	695b      	ldr	r3, [r3, #20]
 8000878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800087c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000880:	bf0c      	ite	eq
 8000882:	2301      	moveq	r3, #1
 8000884:	2300      	movne	r3, #0
 8000886:	b2db      	uxtb	r3, r3
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80008a2:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <LL_I2C_ClearFlag_AF>:
  * @rmtoll SR1          AF            LL_I2C_ClearFlag_AF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_AF(I2C_TypeDef *I2Cx)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_AF);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	615a      	str	r2, [r3, #20]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <LL_I2C_ClearFlag_STOP>:
  *         CR1          PE            LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80008e6:	68fb      	ldr	r3, [r7, #12]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f043 0201 	orr.w	r2, r3, #1
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	601a      	str	r2, [r3, #0]
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <LL_I2C_ClearFlag_BERR>:
  * @rmtoll SR1          BERR          LL_I2C_ClearFlag_BERR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_BERR(I2C_TypeDef *I2Cx)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_BERR);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	615a      	str	r2, [r3, #20]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <LL_I2C_ClearFlag_ARLO>:
  * @rmtoll SR1          ARLO          LL_I2C_ClearFlag_ARLO
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ARLO(I2C_TypeDef *I2Cx)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_ARLO);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	615a      	str	r2, [r3, #20]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <LL_I2C_ClearFlag_OVR>:
  * @rmtoll SR1          OVR           LL_I2C_ClearFlag_OVR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_OVR(I2C_TypeDef *I2Cx)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_OVR);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	615a      	str	r2, [r3, #20]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <LL_I2C_GetTransferDirection>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_I2C_DIRECTION_WRITE
  *         @arg @ref LL_I2C_DIRECTION_READ
  */
__STATIC_INLINE uint32_t LL_I2C_GetTransferDirection(I2C_TypeDef *I2Cx)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I2Cx->SR2, I2C_SR2_TRA));
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0304 	and.w	r3, r3, #4
}
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	691b      	ldr	r3, [r3, #16]
 8000988:	b2db      	uxtb	r3, r3
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	460b      	mov	r3, r1
 80009a0:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	431a      	orrs	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	611a      	str	r2, [r3, #16]
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <I2C_ReInit>:

    while ((SysTick->VAL - start_tick) < ticks);
}

void I2C_ReInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
    LL_I2C_Disable(I2C_slave_obj.I2Cx);
 80009c6:	4b24      	ldr	r3, [pc, #144]	@ (8000a58 <I2C_ReInit+0x98>)
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe46 	bl	800065c <LL_I2C_Disable>
    LL_I2C_DeInit(I2C_slave_obj.I2Cx);
 80009d0:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <I2C_ReInit+0x98>)
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f006 fbe5 	bl	80071a4 <LL_I2C_DeInit>

    LL_I2C_EnableClockStretching(I2C_slave_obj.I2Cx);
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <I2C_ReInit+0x98>)
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fe4c 	bl	800067c <LL_I2C_EnableClockStretching>
    LL_I2C_DisableGeneralCall(I2C_slave_obj.I2Cx);
 80009e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <I2C_ReInit+0x98>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fe57 	bl	800069c <LL_I2C_DisableGeneralCall>
    LL_I2C_DisableOwnAddress2(I2C_slave_obj.I2Cx);
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <I2C_ReInit+0x98>)
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fe62 	bl	80006bc <LL_I2C_DisableOwnAddress2>

    LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80009f8:	463b      	mov	r3, r7
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
 8000a06:	615a      	str	r2, [r3, #20]
    I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	603b      	str	r3, [r7, #0]
    I2C_InitStruct.ClockSpeed = 100000;
 8000a0c:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <I2C_ReInit+0x9c>)
 8000a0e:	607b      	str	r3, [r7, #4]
    I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
    I2C_InitStruct.OwnAddress1 = 36;  // 0x12
 8000a14:	2324      	movs	r3, #36	@ 0x24
 8000a16:	60fb      	str	r3, [r7, #12]
    I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000a18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a1c:	613b      	str	r3, [r7, #16]
    I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000a1e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a22:	617b      	str	r3, [r7, #20]
    LL_I2C_Init(I2C_slave_obj.I2Cx, &I2C_InitStruct);
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <I2C_ReInit+0x98>)
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	463a      	mov	r2, r7
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f006 fbf3 	bl	8007218 <LL_I2C_Init>

    LL_I2C_EnableIT_EVT(I2C_slave_obj.I2Cx);
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <I2C_ReInit+0x98>)
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fe50 	bl	80006dc <LL_I2C_EnableIT_EVT>
    LL_I2C_EnableIT_ERR(I2C_slave_obj.I2Cx);
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <I2C_ReInit+0x98>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fe7b 	bl	800073c <LL_I2C_EnableIT_ERR>
    LL_I2C_Enable(I2C_slave_obj.I2Cx);
 8000a46:	4b04      	ldr	r3, [pc, #16]	@ (8000a58 <I2C_ReInit+0x98>)
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fdf6 	bl	800063c <LL_I2C_Enable>
}
 8000a50:	bf00      	nop
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20004290 	.word	0x20004290
 8000a5c:	000186a0 	.word	0x000186a0

08000a60 <i2c_slave_clear>:

        rx_busy_counter = 0;
    }
}

void i2c_slave_clear(void) {
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
    I2C_slave_obj.reg_address = 0;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <i2c_slave_clear+0x30>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	715a      	strb	r2, [r3, #5]
    I2C_slave_obj.curr_idx = NONE;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <i2c_slave_clear+0x30>)
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	601a      	str	r2, [r3, #0]
    I2C_slave_obj.reg_addr_rcvd = 0;
 8000a72:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <i2c_slave_clear+0x30>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	711a      	strb	r2, [r3, #4]
    I2C_slave_obj.ready_to_answer = 0;
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <i2c_slave_clear+0x30>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	719a      	strb	r2, [r3, #6]
    I2C_slave_obj.ready_to_write = 0;
 8000a7e:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <i2c_slave_clear+0x30>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	71da      	strb	r2, [r3, #7]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20004290 	.word	0x20004290

08000a94 <i2c_slave_init>:

int i2c_slave_init(I2C_TypeDef *I2Cx) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
    I2C_slave_obj.I2Cx = I2Cx;
 8000a9c:	4a09      	ldr	r2, [pc, #36]	@ (8000ac4 <i2c_slave_init+0x30>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6093      	str	r3, [r2, #8]
    I2C_Slave_Status = I2C_Status_OK;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <i2c_slave_init+0x34>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
    i2c_slave_clear();
 8000aa8:	f7ff ffda 	bl	8000a60 <i2c_slave_clear>
    memset(external_memory, 0, sizeof(external_memory));
 8000aac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4806      	ldr	r0, [pc, #24]	@ (8000acc <i2c_slave_init+0x38>)
 8000ab4:	f007 feaa 	bl	800880c <memset>

    return 0;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20004290 	.word	0x20004290
 8000ac8:	2000429c 	.word	0x2000429c
 8000acc:	20004190 	.word	0x20004190

08000ad0 <I2C_event_IRQ>:

//static uint8_t data_index = 0;

void I2C_event_IRQ(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b096      	sub	sp, #88	@ 0x58
 8000ad4:	af00      	add	r7, sp, #0
	I2C_Slave_Status = I2C_Status_BUSY;
 8000ad6:	4b78      	ldr	r3, [pc, #480]	@ (8000cb8 <I2C_event_IRQ+0x1e8>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	701a      	strb	r2, [r3, #0]
    if (LL_I2C_IsActiveFlag_ADDR(I2C_slave_obj.I2Cx))
 8000adc:	4b77      	ldr	r3, [pc, #476]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fe61 	bl	80007a8 <LL_I2C_IsActiveFlag_ADDR>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d01a      	beq.n	8000b22 <I2C_event_IRQ+0x52>
    {
        LL_I2C_ClearFlag_ADDR(I2C_slave_obj.I2Cx);
 8000aec:	4b73      	ldr	r3, [pc, #460]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fecf 	bl	8000894 <LL_I2C_ClearFlag_ADDR>
        if (LL_I2C_GetTransferDirection(I2C_slave_obj.I2Cx) == LL_I2C_DIRECTION_WRITE)
 8000af6:	4b71      	ldr	r3, [pc, #452]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff30 	bl	8000960 <LL_I2C_GetTransferDirection>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	d108      	bne.n	8000b18 <I2C_event_IRQ+0x48>
        {
            I2C_slave_obj.reg_addr_rcvd = 0;
 8000b06:	4b6d      	ldr	r3, [pc, #436]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	711a      	strb	r2, [r3, #4]
            LL_I2C_EnableIT_BUF(I2C_slave_obj.I2Cx);
 8000b0c:	4b6b      	ldr	r3, [pc, #428]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fdf3 	bl	80006fc <LL_I2C_EnableIT_BUF>
 8000b16:	e004      	b.n	8000b22 <I2C_event_IRQ+0x52>
        else
        {
//            I2C_slave_obj.curr_idx = reg_get_index(I2C_slave_obj.reg_address);
//            data_index = 0;
//	          UART_SendStringRing(UART_CMDLINE, "FREAL\r\n");
            LL_I2C_EnableIT_BUF(I2C_slave_obj.I2Cx);
 8000b18:	4b68      	ldr	r3, [pc, #416]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fded 	bl	80006fc <LL_I2C_EnableIT_BUF>
        }
    }

    // Data Register Empty (Trans)
    if (LL_I2C_IsActiveFlag_TXE(I2C_slave_obj.I2Cx))
 8000b22:	4b66      	ldr	r3, [pc, #408]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fe18 	bl	800075c <LL_I2C_IsActiveFlag_TXE>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d052      	beq.n	8000bd8 <I2C_event_IRQ+0x108>
    {
        char buffer[30];
        uint8_t data_to_send = 0x00;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        snprintf(buffer, sizeof(buffer), "\r\nI2C Before Index:[%d]\r\n", I2C_slave_obj.curr_idx);
 8000b38:	4b60      	ldr	r3, [pc, #384]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000b40:	4a5f      	ldr	r2, [pc, #380]	@ (8000cc0 <I2C_event_IRQ+0x1f0>)
 8000b42:	211e      	movs	r1, #30
 8000b44:	f007 fdc4 	bl	80086d0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8000b48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	485d      	ldr	r0, [pc, #372]	@ (8000cc4 <I2C_event_IRQ+0x1f4>)
 8000b50:	f000 fc93 	bl	800147a <UART_SendStringRing>
		snprintf(buffer, sizeof(buffer), "\r\nI2C Index:[%d]\r\n", I2C_slave_obj.curr_idx);
 8000b54:	4b59      	ldr	r3, [pc, #356]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000b5c:	4a5a      	ldr	r2, [pc, #360]	@ (8000cc8 <I2C_event_IRQ+0x1f8>)
 8000b5e:	211e      	movs	r1, #30
 8000b60:	f007 fdb6 	bl	80086d0 <sniprintf>
		UART_SendStringRing(UART_CMDLINE,buffer);
 8000b64:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4856      	ldr	r0, [pc, #344]	@ (8000cc4 <I2C_event_IRQ+0x1f4>)
 8000b6c:	f000 fc85 	bl	800147a <UART_SendStringRing>
		data_to_send = g_registers[I2C_slave_obj.curr_idx].value;
 8000b70:	4b52      	ldr	r3, [pc, #328]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4955      	ldr	r1, [pc, #340]	@ (8000ccc <I2C_event_IRQ+0x1fc>)
 8000b76:	4613      	mov	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	4413      	add	r3, r2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	3302      	adds	r3, #2
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		snprintf(buffer, sizeof(buffer), "\r\nI2C GetDataIndex:[%d]\r\n", data_to_send);
 8000b86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000b8a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000b8e:	4a50      	ldr	r2, [pc, #320]	@ (8000cd0 <I2C_event_IRQ+0x200>)
 8000b90:	211e      	movs	r1, #30
 8000b92:	f007 fd9d 	bl	80086d0 <sniprintf>
		UART_SendStringRing(UART_CMDLINE,buffer);
 8000b96:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4849      	ldr	r0, [pc, #292]	@ (8000cc4 <I2C_event_IRQ+0x1f4>)
 8000b9e:	f000 fc6c 	bl	800147a <UART_SendStringRing>
        snprintf(buffer, sizeof(buffer), "\r\nI2C Response:[%d]\r\n", data_to_send);
 8000ba2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000ba6:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000baa:	4a4a      	ldr	r2, [pc, #296]	@ (8000cd4 <I2C_event_IRQ+0x204>)
 8000bac:	211e      	movs	r1, #30
 8000bae:	f007 fd8f 	bl	80086d0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE,buffer);
 8000bb2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4842      	ldr	r0, [pc, #264]	@ (8000cc4 <I2C_event_IRQ+0x1f4>)
 8000bba:	f000 fc5e 	bl	800147a <UART_SendStringRing>
        LL_I2C_TransmitData8(I2C_slave_obj.I2Cx, data_to_send);
 8000bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fee4 	bl	8000996 <LL_I2C_TransmitData8>
        LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8000bce:	4b3b      	ldr	r3, [pc, #236]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fda2 	bl	800071c <LL_I2C_DisableIT_BUF>
    }
    // Data Register Not Empty (Recv)
    if (LL_I2C_IsActiveFlag_RXNE(I2C_slave_obj.I2Cx)) {
 8000bd8:	4b38      	ldr	r3, [pc, #224]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fdd0 	bl	8000782 <LL_I2C_IsActiveFlag_RXNE>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d04a      	beq.n	8000c7e <I2C_event_IRQ+0x1ae>
        uint8_t received = LL_I2C_ReceiveData8(I2C_slave_obj.I2Cx);
 8000be8:	4b34      	ldr	r3, [pc, #208]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fec5 	bl	800097c <LL_I2C_ReceiveData8>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        if (!I2C_slave_obj.reg_addr_rcvd)
 8000bf8:	4b30      	ldr	r3, [pc, #192]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000bfa:	791b      	ldrb	r3, [r3, #4]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d11f      	bne.n	8000c42 <I2C_event_IRQ+0x172>
        {
            I2C_slave_obj.reg_address = received;
 8000c02:	4a2e      	ldr	r2, [pc, #184]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000c04:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000c08:	7153      	strb	r3, [r2, #5]
            char buffer[50];
            snprintf(buffer, sizeof(buffer), "Address:[%d]\r\n", received);
 8000c0a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000c0e:	1d38      	adds	r0, r7, #4
 8000c10:	4a31      	ldr	r2, [pc, #196]	@ (8000cd8 <I2C_event_IRQ+0x208>)
 8000c12:	2132      	movs	r1, #50	@ 0x32
 8000c14:	f007 fd5c 	bl	80086d0 <sniprintf>
            UART_SendStringRing(UART_CMDLINE, buffer);
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4829      	ldr	r0, [pc, #164]	@ (8000cc4 <I2C_event_IRQ+0x1f4>)
 8000c1e:	f000 fc2c 	bl	800147a <UART_SendStringRing>
            I2C_slave_obj.reg_addr_rcvd = 1;
 8000c22:	4b26      	ldr	r3, [pc, #152]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	711a      	strb	r2, [r3, #4]
            snprintf(buffer, sizeof(buffer), "GET INDEX:[%d]\r\n", I2C_slave_obj.curr_idx);
 8000c28:	4b24      	ldr	r3, [pc, #144]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	1d38      	adds	r0, r7, #4
 8000c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8000cdc <I2C_event_IRQ+0x20c>)
 8000c30:	2132      	movs	r1, #50	@ 0x32
 8000c32:	f007 fd4d 	bl	80086d0 <sniprintf>
            UART_SendStringRing(UART_CMDLINE, buffer);
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4822      	ldr	r0, [pc, #136]	@ (8000cc4 <I2C_event_IRQ+0x1f4>)
 8000c3c:	f000 fc1d 	bl	800147a <UART_SendStringRing>
 8000c40:	e01d      	b.n	8000c7e <I2C_event_IRQ+0x1ae>
        }
        else
        {
            if (g_registers[I2C_slave_obj.curr_idx].access == FULL_ACCESS)
 8000c42:	4b1e      	ldr	r3, [pc, #120]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4921      	ldr	r1, [pc, #132]	@ (8000ccc <I2C_event_IRQ+0x1fc>)
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	440b      	add	r3, r1
 8000c50:	3301      	adds	r3, #1
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	d10a      	bne.n	8000c6e <I2C_event_IRQ+0x19e>
            {
                 g_registers[I2C_slave_obj.curr_idx].value = received;
 8000c58:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	491b      	ldr	r1, [pc, #108]	@ (8000ccc <I2C_event_IRQ+0x1fc>)
 8000c5e:	4613      	mov	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	3302      	adds	r3, #2
 8000c68:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8000c6c:	701a      	strb	r2, [r3, #0]
            }
            I2C_slave_obj.reg_addr_rcvd = 0;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	711a      	strb	r2, [r3, #4]
            LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8000c74:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fd4f 	bl	800071c <LL_I2C_DisableIT_BUF>
        }
    }

    // STOP condition detected
    if (LL_I2C_IsActiveFlag_STOP(I2C_slave_obj.I2Cx)) {
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fdb7 	bl	80007f6 <LL_I2C_IsActiveFlag_STOP>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00f      	beq.n	8000cae <I2C_event_IRQ+0x1de>
        LL_I2C_ClearFlag_STOP(I2C_slave_obj.I2Cx);
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fe20 	bl	80008d8 <LL_I2C_ClearFlag_STOP>
        I2C_slave_obj.reg_addr_rcvd = 0;
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	711a      	strb	r2, [r3, #4]
//        I2C_slave_obj.curr_idx = NONE;
//        data_index = 0;
        LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <I2C_event_IRQ+0x1ec>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fd3a 	bl	800071c <LL_I2C_DisableIT_BUF>
        I2C_Slave_Status = I2C_Status_OK;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <I2C_event_IRQ+0x1e8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
    }
}
 8000cae:	bf00      	nop
 8000cb0:	3758      	adds	r7, #88	@ 0x58
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000429c 	.word	0x2000429c
 8000cbc:	20004290 	.word	0x20004290
 8000cc0:	08009818 	.word	0x08009818
 8000cc4:	40011000 	.word	0x40011000
 8000cc8:	08009834 	.word	0x08009834
 8000ccc:	200042a0 	.word	0x200042a0
 8000cd0:	08009848 	.word	0x08009848
 8000cd4:	08009864 	.word	0x08009864
 8000cd8:	0800987c 	.word	0x0800987c
 8000cdc:	0800988c 	.word	0x0800988c

08000ce0 <I2C_error_IRQ>:

void I2C_error_IRQ(void) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
    // Handle errors
	UART_SendStringRing(UART_CMDLINE,"I2C ERROR!!!\r\n");
 8000ce4:	4921      	ldr	r1, [pc, #132]	@ (8000d6c <I2C_error_IRQ+0x8c>)
 8000ce6:	4822      	ldr	r0, [pc, #136]	@ (8000d70 <I2C_error_IRQ+0x90>)
 8000ce8:	f000 fbc7 	bl	800147a <UART_SendStringRing>
	I2C_Slave_Status = I2C_Status_OK;
 8000cec:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <I2C_error_IRQ+0x94>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
    if (LL_I2C_IsActiveFlag_BERR(I2C_slave_obj.I2Cx)) {
 8000cf2:	4b21      	ldr	r3, [pc, #132]	@ (8000d78 <I2C_error_IRQ+0x98>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fd90 	bl	800081c <LL_I2C_IsActiveFlag_BERR>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d004      	beq.n	8000d0c <I2C_error_IRQ+0x2c>

        LL_I2C_ClearFlag_BERR(I2C_slave_obj.I2Cx);
 8000d02:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <I2C_error_IRQ+0x98>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fdfa 	bl	8000900 <LL_I2C_ClearFlag_BERR>
    }

    if (LL_I2C_IsActiveFlag_ARLO(I2C_slave_obj.I2Cx)) {
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <I2C_error_IRQ+0x98>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fd97 	bl	8000844 <LL_I2C_IsActiveFlag_ARLO>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d004      	beq.n	8000d26 <I2C_error_IRQ+0x46>
        LL_I2C_ClearFlag_ARLO(I2C_slave_obj.I2Cx);
 8000d1c:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <I2C_error_IRQ+0x98>)
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fdfd 	bl	8000920 <LL_I2C_ClearFlag_ARLO>
    }

    if (LL_I2C_IsActiveFlag_AF(I2C_slave_obj.I2Cx)) {
 8000d26:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <I2C_error_IRQ+0x98>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fd4f 	bl	80007ce <LL_I2C_IsActiveFlag_AF>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <I2C_error_IRQ+0x60>
        LL_I2C_ClearFlag_AF(I2C_slave_obj.I2Cx);
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <I2C_error_IRQ+0x98>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fdbc 	bl	80008b8 <LL_I2C_ClearFlag_AF>
    }

    if (LL_I2C_IsActiveFlag_OVR(I2C_slave_obj.I2Cx)) {
 8000d40:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <I2C_error_IRQ+0x98>)
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fd91 	bl	800086c <LL_I2C_IsActiveFlag_OVR>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d004      	beq.n	8000d5a <I2C_error_IRQ+0x7a>
        LL_I2C_ClearFlag_OVR(I2C_slave_obj.I2Cx);
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <I2C_error_IRQ+0x98>)
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fdf3 	bl	8000940 <LL_I2C_ClearFlag_OVR>
    }
    I2C_ReInit();
 8000d5a:	f7ff fe31 	bl	80009c0 <I2C_ReInit>
    i2c_slave_init(I2C_slave_obj.I2Cx);
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <I2C_error_IRQ+0x98>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fe96 	bl	8000a94 <i2c_slave_init>
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	080098a0 	.word	0x080098a0
 8000d70:	40011000 	.word	0x40011000
 8000d74:	2000429c 	.word	0x2000429c
 8000d78:	20004290 	.word	0x20004290

08000d7c <RingBuffer_Create>:

#include "ring_buffer.h"

void RingBuffer_Create(s_RingBufferType *rb, uint32_t id, const char *name,
                         RingBufElement *buffer, RingBufCtr max_size)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	603b      	str	r3, [r7, #0]
    rb->id = id;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	601a      	str	r2, [r3, #0]

    strncpy(rb->name, name, RINGBUFFER_NAME_MAX_LEN - 1);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3304      	adds	r3, #4
 8000d94:	221f      	movs	r2, #31
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f007 fd3f 	bl	800881c <strncpy>
    rb->name[RINGBUFFER_NAME_MAX_LEN - 1] = '\0';
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

    rb->buffer = buffer;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	625a      	str	r2, [r3, #36]	@ 0x24
    rb->max_size = max_size;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000db0:	851a      	strh	r2, [r3, #40]	@ 0x28

    atomic_store_explicit(&rb->head, 0U, memory_order_release);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	332a      	adds	r3, #42	@ 0x2a
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	2300      	movs	r3, #0
 8000dba:	82fb      	strh	r3, [r7, #22]
 8000dbc:	8afa      	ldrh	r2, [r7, #22]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	f3bf 8f5b 	dmb	ish
 8000dc4:	801a      	strh	r2, [r3, #0]
    atomic_store_explicit(&rb->tail, 0U, memory_order_release);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	332c      	adds	r3, #44	@ 0x2c
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	82bb      	strh	r3, [r7, #20]
 8000dd0:	8aba      	ldrh	r2, [r7, #20]
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	f3bf 8f5b 	dmb	ish
 8000dd8:	801a      	strh	r2, [r3, #0]
}
 8000dda:	bf00      	nop
 8000ddc:	3720      	adds	r7, #32
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <RingBuffer_Put>:

_Bool RingBuffer_Put(s_RingBufferType * const rb, RingBufElement const el)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b08b      	sub	sp, #44	@ 0x2c
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	460b      	mov	r3, r1
 8000dec:	70fb      	strb	r3, [r7, #3]
//	__disable_irq();
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_relaxed) + 1U;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	332a      	adds	r3, #42	@ 0x2a
 8000df2:	623b      	str	r3, [r7, #32]
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	81fb      	strh	r3, [r7, #14]
 8000dfc:	89fb      	ldrh	r3, [r7, #14]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (head == rb->max_size)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e06:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d101      	bne.n	8000e10 <RingBuffer_Put+0x2e>
    {
        head = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_acquire);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	332c      	adds	r3, #44	@ 0x2c
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	f3bf 8f5b 	dmb	ish
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	81bb      	strh	r3, [r7, #12]
 8000e22:	89bb      	ldrh	r3, [r7, #12]
 8000e24:	837b      	strh	r3, [r7, #26]
    if (head != tail) // buffer NOT full?
 8000e26:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000e28:	8b7b      	ldrh	r3, [r7, #26]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d018      	beq.n	8000e60 <RingBuffer_Put+0x7e>
    {
        rb->buffer[atomic_load_explicit(&rb->head, memory_order_relaxed)] = el;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	322a      	adds	r2, #42	@ 0x2a
 8000e36:	617a      	str	r2, [r7, #20]
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	8812      	ldrh	r2, [r2, #0]
 8000e3c:	b292      	uxth	r2, r2
 8000e3e:	817a      	strh	r2, [r7, #10]
 8000e40:	897a      	ldrh	r2, [r7, #10]
 8000e42:	4413      	add	r3, r2
 8000e44:	78fa      	ldrb	r2, [r7, #3]
 8000e46:	701a      	strb	r2, [r3, #0]
        atomic_store_explicit(&rb->head, head, memory_order_release);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	332a      	adds	r3, #42	@ 0x2a
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e50:	813b      	strh	r3, [r7, #8]
 8000e52:	893a      	ldrh	r2, [r7, #8]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	f3bf 8f5b 	dmb	ish
 8000e5a:	801a      	strh	r2, [r3, #0]
//        __enable_irq();
        return true;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <RingBuffer_Put+0x80>
    }
    else
    {
//    	__enable_irq();
        return false;
 8000e60:	2300      	movs	r3, #0
    }
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	372c      	adds	r7, #44	@ 0x2c
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <RingBuffer_Get>:

_Bool RingBuffer_Get(s_RingBufferType * const rb, RingBufElement *pel)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b08b      	sub	sp, #44	@ 0x2c
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	6039      	str	r1, [r7, #0]
//	__disable_irq();
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	332c      	adds	r3, #44	@ 0x2c
 8000e7c:	623b      	str	r3, [r7, #32]
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	827b      	strh	r3, [r7, #18]
 8000e86:	8a7b      	ldrh	r3, [r7, #18]
 8000e88:	84fb      	strh	r3, [r7, #38]	@ 0x26
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	332a      	adds	r3, #42	@ 0x2a
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	f3bf 8f5b 	dmb	ish
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	823b      	strh	r3, [r7, #16]
 8000e9c:	8a3b      	ldrh	r3, [r7, #16]
 8000e9e:	837b      	strh	r3, [r7, #26]
    if (head != tail)  // buffer NOT empty?
 8000ea0:	8b7a      	ldrh	r2, [r7, #26]
 8000ea2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d01c      	beq.n	8000ee2 <RingBuffer_Get+0x74>
    {
        *pel = rb->buffer[tail];
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000eac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000eae:	4413      	add	r3, r2
 8000eb0:	781a      	ldrb	r2, [r3, #0]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	701a      	strb	r2, [r3, #0]
        ++tail;
 8000eb6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000eb8:	3301      	adds	r3, #1
 8000eba:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (tail == rb->max_size)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ec0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d101      	bne.n	8000eca <RingBuffer_Get+0x5c>
        {
            tail = 0U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        atomic_store_explicit(&rb->tail, tail, memory_order_release);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	332c      	adds	r3, #44	@ 0x2c
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ed2:	81fb      	strh	r3, [r7, #14]
 8000ed4:	89fa      	ldrh	r2, [r7, #14]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f3bf 8f5b 	dmb	ish
 8000edc:	801a      	strh	r2, [r3, #0]
//    	__enable_irq();
        return true;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <RingBuffer_Get+0x76>
    }
    else
    {
//    	__enable_irq();
        return false;
 8000ee2:	2300      	movs	r3, #0
    }
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	372c      	adds	r7, #44	@ 0x2c
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <RingBuffer_NumFreeSlots>:

// Function to calculate the number of free slots in the ring buffer.
// Note: We always leave one empty slot to distinguish between an empty and a full buffer.
RingBufCtr RingBuffer_NumFreeSlots(s_RingBufferType * const rb)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	@ 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	332a      	adds	r3, #42	@ 0x2a
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	f3bf 8f5b 	dmb	ish
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	823b      	strh	r3, [r7, #16]
 8000f0a:	8a3b      	ldrh	r3, [r7, #16]
 8000f0c:	837b      	strh	r3, [r7, #26]
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	332c      	adds	r3, #44	@ 0x2c
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	81fb      	strh	r3, [r7, #14]
 8000f1c:	89fb      	ldrh	r3, [r7, #14]
 8000f1e:	827b      	strh	r3, [r7, #18]

    if (head == tail)
 8000f20:	8b7a      	ldrh	r2, [r7, #26]
 8000f22:	8a7b      	ldrh	r3, [r7, #18]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d104      	bne.n	8000f32 <RingBuffer_NumFreeSlots+0x42>
    {
        return (RingBufCtr)(rb->max_size - 1U);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	e014      	b.n	8000f5c <RingBuffer_NumFreeSlots+0x6c>
    }
    else if (head < tail)
 8000f32:	8b7a      	ldrh	r2, [r7, #26]
 8000f34:	8a7b      	ldrh	r3, [r7, #18]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d206      	bcs.n	8000f48 <RingBuffer_NumFreeSlots+0x58>
    {
        return (RingBufCtr)(tail - head - 1U);
 8000f3a:	8a7a      	ldrh	r2, [r7, #18]
 8000f3c:	8b7b      	ldrh	r3, [r7, #26]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	e009      	b.n	8000f5c <RingBuffer_NumFreeSlots+0x6c>
    }
    else
    {
        return (RingBufCtr)(rb->max_size + tail - head - 1U);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8000f4c:	8a7b      	ldrh	r3, [r7, #18]
 8000f4e:	4413      	add	r3, r2
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	8b7b      	ldrh	r3, [r7, #26]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	b29b      	uxth	r3, r3
    }
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3724      	adds	r7, #36	@ 0x24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <RingBuffer_IsDataAvailable>:
    }
    return rb->buffer[tail];
}

_Bool RingBuffer_IsDataAvailable(s_RingBufferType * const rb)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	@ 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	332a      	adds	r3, #42	@ 0x2a
 8000f74:	61fb      	str	r3, [r7, #28]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	f3bf 8f5b 	dmb	ish
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	823b      	strh	r3, [r7, #16]
 8000f82:	8a3b      	ldrh	r3, [r7, #16]
 8000f84:	837b      	strh	r3, [r7, #26]
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	332c      	adds	r3, #44	@ 0x2c
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	81fb      	strh	r3, [r7, #14]
 8000f94:	89fb      	ldrh	r3, [r7, #14]
 8000f96:	827b      	strh	r3, [r7, #18]
    return (head != tail);
 8000f98:	8b7a      	ldrh	r2, [r7, #26]
 8000f9a:	8a7b      	ldrh	r3, [r7, #18]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	bf14      	ite	ne
 8000fa0:	2301      	movne	r3, #1
 8000fa2:	2300      	moveq	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	@ 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	@ (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	@ (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001018:	d301      	bcc.n	800101e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101a:	2301      	movs	r3, #1
 800101c:	e00f      	b.n	800103e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101e:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <SysTick_Config+0x40>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001026:	210f      	movs	r1, #15
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f7ff ffc2 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <SysTick_Config+0x40>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <SysTick_Config+0x40>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010

0800104c <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <systick_timer_start+0x1c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <systick_timer_start+0x1c>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010

0800106c <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <systick_timer_init+0x1c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a05      	ldr	r2, [pc, #20]	@ (800108c <systick_timer_init+0x20>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	099b      	lsrs	r3, r3, #6
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ffc3 	bl	8001008 <SysTick_Config>
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200040c0 	.word	0x200040c0
 800108c:	10624dd3 	.word	0x10624dd3

08001090 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	bf0c      	ite	eq
 80010a4:	2301      	moveq	r3, #1
 80010a6:	2300      	movne	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf0c      	ite	eq
 80010ca:	2301      	moveq	r3, #1
 80010cc:	2300      	movne	r3, #0
 80010ce:	b2db      	uxtb	r3, r3
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	2b08      	cmp	r3, #8
 80010ee:	bf0c      	ite	eq
 80010f0:	2301      	moveq	r3, #1
 80010f2:	2300      	movne	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0320 	and.w	r3, r3, #32
 8001112:	2b20      	cmp	r3, #32
 8001114:	bf0c      	ite	eq
 8001116:	2301      	moveq	r3, #1
 8001118:	2300      	movne	r3, #0
 800111a:	b2db      	uxtb	r3, r3
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001138:	2b80      	cmp	r3, #128	@ 0x80
 800113a:	bf0c      	ite	eq
 800113c:	2301      	moveq	r3, #1
 800113e:	2300      	movne	r3, #0
 8001140:	b2db      	uxtb	r3, r3
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 800114e:	b480      	push	{r7}
 8001150:	b085      	sub	sp, #20
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800115c:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001164:	68fb      	ldr	r3, [r7, #12]
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8001172:	b480      	push	{r7}
 8001174:	b085      	sub	sp, #20
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001180:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001188:	68fb      	ldr	r3, [r7, #12]
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8001196:	b480      	push	{r7}
 8001198:	b085      	sub	sp, #20
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80011a4:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80011ac:	68fb      	ldr	r3, [r7, #12]
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b089      	sub	sp, #36	@ 0x24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	330c      	adds	r3, #12
 80011c6:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	e853 3f00 	ldrex	r3, [r3]
 80011ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	f043 0320 	orr.w	r3, r3, #32
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	330c      	adds	r3, #12
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	61ba      	str	r2, [r7, #24]
 80011e0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011e2:	6979      	ldr	r1, [r7, #20]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	e841 2300 	strex	r3, r2, [r1]
 80011ea:	613b      	str	r3, [r7, #16]
   return(result);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1e7      	bne.n	80011c2 <LL_USART_EnableIT_RXNE+0x8>
}
 80011f2:	bf00      	nop
 80011f4:	bf00      	nop
 80011f6:	3724      	adds	r7, #36	@ 0x24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	@ 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	330c      	adds	r3, #12
 800120c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	e853 3f00 	ldrex	r3, [r3]
 8001214:	60bb      	str	r3, [r7, #8]
   return(result);
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	330c      	adds	r3, #12
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	61ba      	str	r2, [r7, #24]
 8001226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001228:	6979      	ldr	r1, [r7, #20]
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	e841 2300 	strex	r3, r2, [r1]
 8001230:	613b      	str	r3, [r7, #16]
   return(result);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1e7      	bne.n	8001208 <LL_USART_EnableIT_TXE+0x8>
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3724      	adds	r7, #36	@ 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 8001246:	b480      	push	{r7}
 8001248:	b089      	sub	sp, #36	@ 0x24
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	330c      	adds	r3, #12
 8001252:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	e853 3f00 	ldrex	r3, [r3]
 800125a:	60bb      	str	r3, [r7, #8]
   return(result);
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	f023 0320 	bic.w	r3, r3, #32
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	330c      	adds	r3, #12
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	61ba      	str	r2, [r7, #24]
 800126c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800126e:	6979      	ldr	r1, [r7, #20]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	e841 2300 	strex	r3, r2, [r1]
 8001276:	613b      	str	r3, [r7, #16]
   return(result);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1e7      	bne.n	800124e <LL_USART_DisableIT_RXNE+0x8>
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	3724      	adds	r7, #36	@ 0x24
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	@ 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	330c      	adds	r3, #12
 8001298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	e853 3f00 	ldrex	r3, [r3]
 80012a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	330c      	adds	r3, #12
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	61ba      	str	r2, [r7, #24]
 80012b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012b4:	6979      	ldr	r1, [r7, #20]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	e841 2300 	strex	r3, r2, [r1]
 80012bc:	613b      	str	r3, [r7, #16]
   return(result);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1e7      	bne.n	8001294 <LL_USART_DisableIT_TXE+0x8>
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3724      	adds	r7, #36	@ 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	f003 0320 	and.w	r3, r3, #32
 80012e2:	2b20      	cmp	r3, #32
 80012e4:	bf0c      	ite	eq
 80012e6:	2301      	moveq	r3, #1
 80012e8:	2300      	movne	r3, #0
 80012ea:	b2db      	uxtb	r3, r3
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001308:	2b80      	cmp	r3, #128	@ 0x80
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	b2db      	uxtb	r3, r3
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	b2db      	uxtb	r3, r3
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001344:	78fa      	ldrb	r2, [r7, #3]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	605a      	str	r2, [r3, #4]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <get_usart_buffer>:
    }
};

void store_char(unsigned char c, ring_buffer *buffer, USART_TypeDef *uart);

USART_Buffer* get_usart_buffer(USART_TypeDef *uart) {
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < USART_COUNT; i++) {
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	e015      	b.n	8001392 <get_usart_buffer+0x3a>
        if (usart_buffers[i].uart == uart) {
 8001366:	4910      	ldr	r1, [pc, #64]	@ (80013a8 <get_usart_buffer+0x50>)
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	4613      	mov	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	429a      	cmp	r2, r3
 800137a:	d107      	bne.n	800138c <get_usart_buffer+0x34>
            return &usart_buffers[i];
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4a08      	ldr	r2, [pc, #32]	@ (80013a8 <get_usart_buffer+0x50>)
 8001388:	4413      	add	r3, r2
 800138a:	e006      	b.n	800139a <get_usart_buffer+0x42>
    for (int i = 0; i < USART_COUNT; i++) {
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3301      	adds	r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b01      	cmp	r3, #1
 8001396:	dde6      	ble.n	8001366 <get_usart_buffer+0xe>
        }
    }
    return NULL;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000000 	.word	0x20000000

080013ac <store_char>:
        LL_USART_EnableIT_ERROR(buffer->uart);
        LL_USART_EnableIT_RXNE(buffer->uart);
    }
}

void store_char(unsigned char c, ring_buffer *buffer, USART_TypeDef *uart) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	73fb      	strb	r3, [r7, #15]
    int i = (buffer->head + 1) % buffer->size;
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	3301      	adds	r3, #1
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	68d2      	ldr	r2, [r2, #12]
 80013c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80013c8:	fb01 f202 	mul.w	r2, r1, r2
 80013cc:	1a9b      	subs	r3, r3, r2
 80013ce:	617b      	str	r3, [r7, #20]

    if (i != buffer->tail) {
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d00f      	beq.n	80013fa <store_char+0x4e>
        ATOMIC_BLOCK_START(uart);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ff33 	bl	8001246 <LL_USART_DisableIT_RXNE>
        buffer->buffer[buffer->head] = c;
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	701a      	strb	r2, [r3, #0]
        buffer->head = i;
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	605a      	str	r2, [r3, #4]
        ATOMIC_BLOCK_END(uart);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fee0 	bl	80011ba <LL_USART_EnableIT_RXNE>
    }
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <UART_WriteRing>:
        ATOMIC_BLOCK_END(uart);
        return c;
    }
}

void UART_WriteRing(USART_TypeDef *uart, int c) {
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
    USART_Buffer *buffer = get_usart_buffer(uart);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ffa3 	bl	8001358 <get_usart_buffer>
 8001412:	6178      	str	r0, [r7, #20]
    if (!buffer || c < 0) return;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d02b      	beq.n	8001472 <UART_WriteRing+0x70>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db28      	blt.n	8001472 <UART_WriteRing+0x70>

    ring_buffer *tx_buffer = &buffer->tx_buffer;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3314      	adds	r3, #20
 8001424:	613b      	str	r3, [r7, #16]
    int i = (tx_buffer->head + 1) % tx_buffer->size;
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	3301      	adds	r3, #1
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	68d2      	ldr	r2, [r2, #12]
 8001430:	fbb3 f1f2 	udiv	r1, r3, r2
 8001434:	fb01 f202 	mul.w	r2, r1, r2
 8001438:	1a9b      	subs	r3, r3, r2
 800143a:	60fb      	str	r3, [r7, #12]

    ATOMIC_BLOCK_START(uart);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff02 	bl	8001246 <LL_USART_DisableIT_RXNE>
    while (i == tx_buffer->tail);
 8001442:	bf00      	nop
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	429a      	cmp	r2, r3
 800144c:	d0fa      	beq.n	8001444 <UART_WriteRing+0x42>

    tx_buffer->buffer[tx_buffer->head] = (uint8_t)c;
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4413      	add	r3, r2
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]
    tx_buffer->head = i;
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	605a      	str	r2, [r3, #4]
    ATOMIC_BLOCK_END(uart);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fea8 	bl	80011ba <LL_USART_EnableIT_RXNE>

    LL_USART_EnableIT_TXE(uart);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fec8 	bl	8001200 <LL_USART_EnableIT_TXE>
 8001470:	e000      	b.n	8001474 <UART_WriteRing+0x72>
    if (!buffer || c < 0) return;
 8001472:	bf00      	nop
}
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <UART_SendStringRing>:
}

/* sends the string to the uart
 */
void UART_SendStringRing (USART_TypeDef *uart, const char *s)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
	while(*s) UART_WriteRing(uart, *s++);
 8001484:	e007      	b.n	8001496 <UART_SendStringRing+0x1c>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	603a      	str	r2, [r7, #0]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	4619      	mov	r1, r3
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ffb6 	bl	8001402 <UART_WriteRing>
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f3      	bne.n	8001486 <UART_SendStringRing+0xc>
}
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <UART_Ring_ISR>:
    memset(tx_buffer->buffer, '\0', tx_buffer->size);
    tx_buffer->head = 0;
    tx_buffer->tail = 0;
}

void UART_Ring_ISR(USART_TypeDef *uart) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
    USART_Buffer *buffer = get_usart_buffer(uart);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff51 	bl	8001358 <get_usart_buffer>
 80014b6:	6178      	str	r0, [r7, #20]
    if (!buffer) return;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d068      	beq.n	8001590 <UART_Ring_ISR+0xe8>

    ring_buffer *rx_buffer = &buffer->rx_buffer;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3304      	adds	r3, #4
 80014c2:	613b      	str	r3, [r7, #16]
    ring_buffer *tx_buffer = &buffer->tx_buffer;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3314      	adds	r3, #20
 80014c8:	60fb      	str	r3, [r7, #12]

    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) && (LL_USART_IsEnabledIT_RXNE(uart) != RESET)) {
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fe19 	bl	8001102 <LL_USART_IsActiveFlag_RXNE>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d02d      	beq.n	8001532 <UART_Ring_ISR+0x8a>
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fefb 	bl	80012d2 <LL_USART_IsEnabledIT_RXNE>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d027      	beq.n	8001532 <UART_Ring_ISR+0x8a>
        unsigned char data = LL_USART_ReceiveData8(uart);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ff1b 	bl	800131e <LL_USART_ReceiveData8>
 80014e8:	4603      	mov	r3, r0
 80014ea:	72fb      	strb	r3, [r7, #11]

        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fdf5 	bl	80010dc <LL_USART_IsActiveFlag_ORE>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d10b      	bne.n	8001510 <UART_Ring_ISR+0x68>
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fdc9 	bl	8001090 <LL_USART_IsActiveFlag_FE>
 80014fe:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8001500:	2b00      	cmp	r3, #0
 8001502:	d105      	bne.n	8001510 <UART_Ring_ISR+0x68>
            (LL_USART_IsActiveFlag_NE(uart) != RESET)) {
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fdd6 	bl	80010b6 <LL_USART_IsActiveFlag_NE>
 800150a:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 800150c:	2b00      	cmp	r3, #0
 800150e:	d009      	beq.n	8001524 <UART_Ring_ISR+0x7c>
            LL_USART_ClearFlag_ORE(uart);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fe40 	bl	8001196 <LL_USART_ClearFlag_ORE>
            LL_USART_ClearFlag_FE(uart);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fe19 	bl	800114e <LL_USART_ClearFlag_FE>
            LL_USART_ClearFlag_NE(uart);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fe28 	bl	8001172 <LL_USART_ClearFlag_NE>
        } else {
        	store_char(data, rx_buffer, uart);
        }
        return;
 8001522:	e036      	b.n	8001592 <UART_Ring_ISR+0xea>
        	store_char(data, rx_buffer, uart);
 8001524:	7afb      	ldrb	r3, [r7, #11]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6939      	ldr	r1, [r7, #16]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff3e 	bl	80013ac <store_char>
        return;
 8001530:	e02f      	b.n	8001592 <UART_Ring_ISR+0xea>
    }

    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) && (LL_USART_IsEnabledIT_TXE(uart) != RESET)) {
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff fdf8 	bl	8001128 <LL_USART_IsActiveFlag_TXE>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d029      	beq.n	8001592 <UART_Ring_ISR+0xea>
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff feda 	bl	80012f8 <LL_USART_IsEnabledIT_TXE>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d023      	beq.n	8001592 <UART_Ring_ISR+0xea>
        if (tx_buffer->head == tx_buffer->tail) {
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	429a      	cmp	r2, r3
 8001554:	d103      	bne.n	800155e <UART_Ring_ISR+0xb6>
            LL_USART_DisableIT_TXE(uart);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fe98 	bl	800128c <LL_USART_DisableIT_TXE>
 800155c:	e019      	b.n	8001592 <UART_Ring_ISR+0xea>
        } else {
            unsigned char c = tx_buffer->buffer[tx_buffer->tail];
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	4413      	add	r3, r2
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	72bb      	strb	r3, [r7, #10]
            tx_buffer->tail = (tx_buffer->tail + 1) % tx_buffer->size;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	3301      	adds	r3, #1
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	68d2      	ldr	r2, [r2, #12]
 8001576:	fbb3 f1f2 	udiv	r1, r3, r2
 800157a:	fb01 f202 	mul.w	r2, r1, r2
 800157e:	1a9a      	subs	r2, r3, r2
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	609a      	str	r2, [r3, #8]
            LL_USART_TransmitData8(uart, c);
 8001584:	7abb      	ldrb	r3, [r7, #10]
 8001586:	4619      	mov	r1, r3
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff fed5 	bl	8001338 <LL_USART_TransmitData8>
 800158e:	e000      	b.n	8001592 <UART_Ring_ISR+0xea>
    if (!buffer) return;
 8001590:	bf00      	nop
        }
    }
}
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <LL_USART_IsActiveFlag_FE>:
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	bf0c      	ite	eq
 80015ac:	2301      	moveq	r3, #1
 80015ae:	2300      	movne	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <LL_USART_IsActiveFlag_NE>:
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf0c      	ite	eq
 80015d2:	2301      	moveq	r3, #1
 80015d4:	2300      	movne	r3, #0
 80015d6:	b2db      	uxtb	r3, r3
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_USART_IsActiveFlag_ORE>:
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	bf0c      	ite	eq
 80015f8:	2301      	moveq	r3, #1
 80015fa:	2300      	movne	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <LL_USART_IsActiveFlag_RXNE>:
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0320 	and.w	r3, r3, #32
 800161a:	2b20      	cmp	r3, #32
 800161c:	bf0c      	ite	eq
 800161e:	2301      	moveq	r3, #1
 8001620:	2300      	movne	r3, #0
 8001622:	b2db      	uxtb	r3, r3
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_USART_IsActiveFlag_TXE>:
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001640:	2b80      	cmp	r3, #128	@ 0x80
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LL_USART_ClearFlag_FE>:
{
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001664:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800166c:	68fb      	ldr	r3, [r7, #12]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <LL_USART_ClearFlag_NE>:
{
 800167a:	b480      	push	{r7}
 800167c:	b085      	sub	sp, #20
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001688:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001690:	68fb      	ldr	r3, [r7, #12]
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_USART_ClearFlag_ORE>:
{
 800169e:	b480      	push	{r7}
 80016a0:	b085      	sub	sp, #20
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80016ac:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80016b4:	68fb      	ldr	r3, [r7, #12]
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <LL_USART_EnableIT_RXNE>:
{
 80016c2:	b480      	push	{r7}
 80016c4:	b089      	sub	sp, #36	@ 0x24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	330c      	adds	r3, #12
 80016ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	e853 3f00 	ldrex	r3, [r3]
 80016d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f043 0320 	orr.w	r3, r3, #32
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	330c      	adds	r3, #12
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	61ba      	str	r2, [r7, #24]
 80016e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016ea:	6979      	ldr	r1, [r7, #20]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	e841 2300 	strex	r3, r2, [r1]
 80016f2:	613b      	str	r3, [r7, #16]
   return(result);
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1e7      	bne.n	80016ca <LL_USART_EnableIT_RXNE+0x8>
}
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
 80016fe:	3724      	adds	r7, #36	@ 0x24
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_USART_EnableIT_TXE>:
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	@ 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	330c      	adds	r3, #12
 8001714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	e853 3f00 	ldrex	r3, [r3]
 800171c:	60bb      	str	r3, [r7, #8]
   return(result);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	330c      	adds	r3, #12
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	61ba      	str	r2, [r7, #24]
 800172e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001730:	6979      	ldr	r1, [r7, #20]
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	e841 2300 	strex	r3, r2, [r1]
 8001738:	613b      	str	r3, [r7, #16]
   return(result);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1e7      	bne.n	8001710 <LL_USART_EnableIT_TXE+0x8>
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3724      	adds	r7, #36	@ 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_USART_DisableIT_TXE>:
{
 800174e:	b480      	push	{r7}
 8001750:	b089      	sub	sp, #36	@ 0x24
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	330c      	adds	r3, #12
 800175a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	e853 3f00 	ldrex	r3, [r3]
 8001762:	60bb      	str	r3, [r7, #8]
   return(result);
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	330c      	adds	r3, #12
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	61ba      	str	r2, [r7, #24]
 8001774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001776:	6979      	ldr	r1, [r7, #20]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	e841 2300 	strex	r3, r2, [r1]
 800177e:	613b      	str	r3, [r7, #16]
   return(result);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1e7      	bne.n	8001756 <LL_USART_DisableIT_TXE+0x8>
}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	3724      	adds	r7, #36	@ 0x24
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_USART_IsEnabledIT_RXNE>:
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	2b20      	cmp	r3, #32
 80017a6:	bf0c      	ite	eq
 80017a8:	2301      	moveq	r3, #1
 80017aa:	2300      	movne	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <LL_USART_IsEnabledIT_TXE>:
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ca:	2b80      	cmp	r3, #128	@ 0x80
 80017cc:	bf0c      	ite	eq
 80017ce:	2301      	moveq	r3, #1
 80017d0:	2300      	movne	r3, #0
 80017d2:	b2db      	uxtb	r3, r3
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_USART_ReceiveData8>:
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	b2db      	uxtb	r3, r3
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_USART_TransmitData8>:
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	605a      	str	r2, [r3, #4]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <UART_Driver_Get>:
/*************************************************
 *                  HELPER                       *
 *************************************************/

static UART_Driver_t *UART_Driver_Get(USART_TypeDef *uart)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_DRIVER_COUNT; i++)
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	e013      	b.n	800184e <UART_Driver_Get+0x36>
    {
        if (uart_drivers[i].uart == uart)
 8001826:	4a0f      	ldr	r2, [pc, #60]	@ (8001864 <UART_Driver_Get+0x4c>)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2164      	movs	r1, #100	@ 0x64
 800182c:	fb01 f303 	mul.w	r3, r1, r3
 8001830:	4413      	add	r3, r2
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	429a      	cmp	r2, r3
 8001838:	d106      	bne.n	8001848 <UART_Driver_Get+0x30>
        {
            return &uart_drivers[i];
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2264      	movs	r2, #100	@ 0x64
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	4a08      	ldr	r2, [pc, #32]	@ (8001864 <UART_Driver_Get+0x4c>)
 8001844:	4413      	add	r3, r2
 8001846:	e006      	b.n	8001856 <UART_Driver_Get+0x3e>
    for (int i = 0; i < UART_DRIVER_COUNT; i++)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3301      	adds	r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	dde8      	ble.n	8001826 <UART_Driver_Get+0xe>
        }
    }
    return NULL;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000048 	.word	0x20000048

08001868 <UART_Driver_Init>:
/*************************************************
 *                    Init                       *
 *************************************************/

Std_ReturnType UART_Driver_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af02      	add	r7, sp, #8
    RingBuffer_Create(&uart_drivers[0].rx_buffer, 1, "UART6_RX", uart6_rx_data, UART6_BUFFER_SIZE);
 800186e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <UART_Driver_Init+0x38>)
 8001876:	4a0b      	ldr	r2, [pc, #44]	@ (80018a4 <UART_Driver_Init+0x3c>)
 8001878:	2101      	movs	r1, #1
 800187a:	480b      	ldr	r0, [pc, #44]	@ (80018a8 <UART_Driver_Init+0x40>)
 800187c:	f7ff fa7e 	bl	8000d7c <RingBuffer_Create>
    RingBuffer_Create(&uart_drivers[0].tx_buffer, 2, "UART6_TX", uart6_tx_data, UART6_BUFFER_SIZE);
 8001880:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <UART_Driver_Init+0x44>)
 8001888:	4a09      	ldr	r2, [pc, #36]	@ (80018b0 <UART_Driver_Init+0x48>)
 800188a:	2102      	movs	r1, #2
 800188c:	4809      	ldr	r0, [pc, #36]	@ (80018b4 <UART_Driver_Init+0x4c>)
 800188e:	f7ff fa75 	bl	8000d7c <RingBuffer_Create>

//    LL_USART_EnableIT_ERROR(USART6);
    LL_USART_EnableIT_RXNE(USART6);
 8001892:	4809      	ldr	r0, [pc, #36]	@ (80018b8 <UART_Driver_Init+0x50>)
 8001894:	f7ff ff15 	bl	80016c2 <LL_USART_EnableIT_RXNE>

    return E_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20004fa0 	.word	0x20004fa0
 80018a4:	080098b0 	.word	0x080098b0
 80018a8:	2000004c 	.word	0x2000004c
 80018ac:	200053a0 	.word	0x200053a0
 80018b0:	080098bc 	.word	0x080098bc
 80018b4:	2000007c 	.word	0x2000007c
 80018b8:	40011400 	.word	0x40011400

080018bc <UART_Driver_Read>:
/*************************************************
 *                     API                       *
 *************************************************/

int UART_Driver_Read(USART_TypeDef *uart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ffa7 	bl	8001818 <UART_Driver_Get>
 80018ca:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d102      	bne.n	80018d8 <UART_Driver_Read+0x1c>
        return -1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	e00e      	b.n	80018f6 <UART_Driver_Read+0x3a>

    RingBufElement data;
    if (RingBuffer_Get(&driver->rx_buffer, &data))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3304      	adds	r3, #4
 80018dc:	f107 020b 	add.w	r2, r7, #11
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fac3 	bl	8000e6e <RingBuffer_Get>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <UART_Driver_Read+0x36>
    {
        return data;
 80018ee:	7afb      	ldrb	r3, [r7, #11]
 80018f0:	e001      	b.n	80018f6 <UART_Driver_Read+0x3a>
    }
    return -1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <UART_Driver_Write>:

void UART_Driver_Write(USART_TypeDef *uart, uint8_t data)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	460b      	mov	r3, r1
 8001908:	70fb      	strb	r3, [r7, #3]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ff84 	bl	8001818 <UART_Driver_Get>
 8001910:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d011      	beq.n	800193c <UART_Driver_Write+0x3e>
        return;

    while (!RingBuffer_Put(&driver->tx_buffer, data))
 8001918:	bf00      	nop
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3334      	adds	r3, #52	@ 0x34
 800191e:	78fa      	ldrb	r2, [r7, #3]
 8001920:	4611      	mov	r1, r2
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fa5d 	bl	8000de2 <RingBuffer_Put>
 8001928:	4603      	mov	r3, r0
 800192a:	f083 0301 	eor.w	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f2      	bne.n	800191a <UART_Driver_Write+0x1c>
    {
        // vTaskDelay(pdMS_TO_TICKS(1));
    }
    LL_USART_EnableIT_TXE(uart);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff fee7 	bl	8001708 <LL_USART_EnableIT_TXE>
 800193a:	e000      	b.n	800193e <UART_Driver_Write+0x40>
        return;
 800193c:	bf00      	nop
}
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <UART_Driver_IsDataAvailable>:
        str++;
    }
}

_Bool UART_Driver_IsDataAvailable(USART_TypeDef *uart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff63 	bl	8001818 <UART_Driver_Get>
 8001952:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <UART_Driver_IsDataAvailable+0x1a>
        return false;
 800195a:	2300      	movs	r3, #0
 800195c:	e005      	b.n	800196a <UART_Driver_IsDataAvailable+0x26>

    return RingBuffer_IsDataAvailable(&driver->rx_buffer);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3304      	adds	r3, #4
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fb00 	bl	8000f68 <RingBuffer_IsDataAvailable>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <UART_Driver_TXNumFreeSlots>:

uint16_t UART_Driver_TXNumFreeSlots(USART_TypeDef *uart)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ff4c 	bl	8001818 <UART_Driver_Get>
 8001980:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <UART_Driver_TXNumFreeSlots+0x1a>
        return 0;
 8001988:	2300      	movs	r3, #0
 800198a:	e006      	b.n	800199a <UART_Driver_TXNumFreeSlots+0x28>

    return (uint16_t)RingBuffer_NumFreeSlots(&driver->tx_buffer);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3334      	adds	r3, #52	@ 0x34
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff faad 	bl	8000ef0 <RingBuffer_NumFreeSlots>
 8001996:	4603      	mov	r3, r0
 8001998:	bf00      	nop
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <UART_Driver_ISR>:
    UART_Driver_FlushRx(uart);
    UART_Driver_FlushTx(uart);
}

void UART_Driver_ISR(USART_TypeDef *uart)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ff34 	bl	8001818 <UART_Driver_Get>
 80019b0:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d053      	beq.n	8001a60 <UART_Driver_ISR+0xbe>
        return;

    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) &&
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff fe26 	bl	800160a <LL_USART_IsActiveFlag_RXNE>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d02c      	beq.n	8001a1e <UART_Driver_ISR+0x7c>
        (LL_USART_IsEnabledIT_RXNE(uart) != RESET))
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff fee5 	bl	8001794 <LL_USART_IsEnabledIT_RXNE>
 80019ca:	4603      	mov	r3, r0
    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) &&
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d026      	beq.n	8001a1e <UART_Driver_ISR+0x7c>
    {
        uint8_t data = LL_USART_ReceiveData8(uart);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff05 	bl	80017e0 <LL_USART_ReceiveData8>
 80019d6:	4603      	mov	r3, r0
 80019d8:	72fb      	strb	r3, [r7, #11]

        if (LL_USART_IsActiveFlag_ORE(uart))
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff fe02 	bl	80015e4 <LL_USART_IsActiveFlag_ORE>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <UART_Driver_ISR+0x4a>
        {
            LL_USART_ClearFlag_ORE(uart);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fe59 	bl	800169e <LL_USART_ClearFlag_ORE>
        }
        if (LL_USART_IsActiveFlag_FE(uart))
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff fdd3 	bl	8001598 <LL_USART_IsActiveFlag_FE>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <UART_Driver_ISR+0x5c>
        {
            LL_USART_ClearFlag_FE(uart);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff fe2c 	bl	8001656 <LL_USART_ClearFlag_FE>
        }
        if (LL_USART_IsActiveFlag_NE(uart))
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fddd 	bl	80015be <LL_USART_IsActiveFlag_NE>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <UART_Driver_ISR+0x6e>
        {
            LL_USART_ClearFlag_NE(uart);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fe35 	bl	800167a <LL_USART_ClearFlag_NE>
        }
        RingBuffer_Put(&driver->rx_buffer, data);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3304      	adds	r3, #4
 8001a14:	7afa      	ldrb	r2, [r7, #11]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f9e2 	bl	8000de2 <RingBuffer_Put>
    }

    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fe06 	bl	8001630 <LL_USART_IsActiveFlag_TXE>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d01b      	beq.n	8001a62 <UART_Driver_ISR+0xc0>
        (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fec5 	bl	80017ba <LL_USART_IsEnabledIT_TXE>
 8001a30:	4603      	mov	r3, r0
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d015      	beq.n	8001a62 <UART_Driver_ISR+0xc0>
    {
        uint8_t tx_data;
        if (RingBuffer_Get(&driver->tx_buffer, &tx_data))
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3334      	adds	r3, #52	@ 0x34
 8001a3a:	f107 020a 	add.w	r2, r7, #10
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fa14 	bl	8000e6e <RingBuffer_Get>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <UART_Driver_ISR+0xb6>
        {
            LL_USART_TransmitData8(uart, tx_data);
 8001a4c:	7abb      	ldrb	r3, [r7, #10]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff fed2 	bl	80017fa <LL_USART_TransmitData8>
 8001a56:	e004      	b.n	8001a62 <UART_Driver_ISR+0xc0>
        }
        else
        {
            LL_USART_DisableIT_TXE(uart);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff fe78 	bl	800174e <LL_USART_DisableIT_TXE>
 8001a5e:	e000      	b.n	8001a62 <UART_Driver_ISR+0xc0>
        return;
 8001a60:	bf00      	nop
        }
    }
}
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <NTC_get_temperature>:
    // Bắt đầu chuyển đổi ADC
    LL_ADC_REG_StartConversionSWStart(ADC1);
}

void NTC_get_temperature(int16_t* temp)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 8; i++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e029      	b.n	8001aca <NTC_get_temperature+0x62>
	{
		temp[i] = NTC_table[NTC_ADC_value[i]];
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	4a19      	ldr	r2, [pc, #100]	@ (8001ae0 <NTC_get_temperature+0x78>)
 8001a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b18      	ldr	r3, [pc, #96]	@ (8001ae4 <NTC_get_temperature+0x7c>)
 8001a82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b20a      	sxth	r2, r1
 8001a90:	801a      	strh	r2, [r3, #0]
		if (temp[i] < -500 || temp[i] > 2000)  temp[i] = 0x7FFF;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9e:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 8001aa2:	db08      	blt.n	8001ab6 <NTC_get_temperature+0x4e>
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001ab4:	dd06      	ble.n	8001ac4 <NTC_get_temperature+0x5c>
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001ac2:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++)
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	2b07      	cmp	r3, #7
 8001ace:	d9d2      	bls.n	8001a76 <NTC_get_temperature+0xe>
	}
};
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	200057a4 	.word	0x200057a4
 8001ae4:	200000ac 	.word	0x200000ac

08001ae8 <crc32_init_context>:
static uint32_t now;
static void send_reset(struct min_context *self);
#endif

static void crc32_init_context(struct crc32_context *context)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    context->crc = 0xffffffffU;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f04f 32ff 	mov.w	r2, #4294967295
 8001af6:	601a      	str	r2, [r3, #0]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <crc32_step>:

static void crc32_step(struct crc32_context *context, uint8_t byte)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
    uint32_t j;
    context->crc ^= byte;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	405a      	eors	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	601a      	str	r2, [r3, #0]
    for (j = 0; j < 8; j++) {
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	e011      	b.n	8001b46 <crc32_step+0x42>
        uint32_t mask = (uint32_t) - (context->crc & 1U);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	425b      	negs	r3, r3
 8001b2c:	60bb      	str	r3, [r7, #8]
        context->crc = (context->crc >> 1) ^ (0xedb88320U & mask);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	085a      	lsrs	r2, r3, #1
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <crc32_step+0x58>)
 8001b38:	400b      	ands	r3, r1
 8001b3a:	405a      	eors	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	601a      	str	r2, [r3, #0]
    for (j = 0; j < 8; j++) {
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3301      	adds	r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b07      	cmp	r3, #7
 8001b4a:	d9ea      	bls.n	8001b22 <crc32_step+0x1e>
    }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	edb88320 	.word	0xedb88320

08001b60 <crc32_finalize>:

static uint32_t crc32_finalize(struct crc32_context *context)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
    return ~context->crc;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	43db      	mvns	r3, r3
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <stuffed_tx_byte>:

static void stuffed_tx_byte(struct min_context *self, uint8_t byte, bool crc)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	70fb      	strb	r3, [r7, #3]
 8001b86:	4613      	mov	r3, r2
 8001b88:	70bb      	strb	r3, [r7, #2]
    // Transmit the byte
    min_tx_byte(self->port, byte);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 fe95 	bl	80028c4 <min_tx_byte>
    if (crc) {
 8001b9a:	78bb      	ldrb	r3, [r7, #2]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <stuffed_tx_byte+0x36>
        crc32_step(&self->tx_checksum, byte);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001ba6:	78fa      	ldrb	r2, [r7, #3]
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ffaa 	bl	8001b04 <crc32_step>
    }

    // See if an additional stuff byte is needed
    if (byte == HEADER_BYTE) {
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	2baa      	cmp	r3, #170	@ 0xaa
 8001bb4:	d118      	bne.n	8001be8 <stuffed_tx_byte+0x6e>
        if (--self->tx_header_byte_countdown == 0) {
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10f      	bne.n	8001bf0 <stuffed_tx_byte+0x76>
            min_tx_byte(self->port, STUFF_BYTE); // Stuff byte
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8001bd6:	2155      	movs	r1, #85	@ 0x55
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fe73 	bl	80028c4 <min_tx_byte>
            self->tx_header_byte_countdown = 2U;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2202      	movs	r2, #2
 8001be2:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
        }
    } else {
        self->tx_header_byte_countdown = 2U;
    }
}
 8001be6:	e003      	b.n	8001bf0 <stuffed_tx_byte+0x76>
        self->tx_header_byte_countdown = 2U;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <on_wire_bytes>:

static void on_wire_bytes(struct min_context *self, uint8_t id_control, uint8_t seq, uint8_t const *payload_base, uint16_t payload_offset, uint16_t payload_mask, uint8_t payload_len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	72fb      	strb	r3, [r7, #11]
 8001c06:	4613      	mov	r3, r2
 8001c08:	72bb      	strb	r3, [r7, #10]
    uint8_t n, i;
    uint32_t checksum;

    self->tx_header_byte_countdown = 2U;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    crc32_init_context(&self->tx_checksum);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff65 	bl	8001ae8 <crc32_init_context>

    min_tx_start(self->port);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 fe63 	bl	80028f0 <min_tx_start>

    // Header is 3 bytes; because unstuffed will reset receiver immediately
    min_tx_byte(self->port, HEADER_BYTE);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8001c30:	21aa      	movs	r1, #170	@ 0xaa
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fe46 	bl	80028c4 <min_tx_byte>
    min_tx_byte(self->port, HEADER_BYTE);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8001c3e:	21aa      	movs	r1, #170	@ 0xaa
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 fe3f 	bl	80028c4 <min_tx_byte>
    min_tx_byte(self->port, HEADER_BYTE);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8001c4c:	21aa      	movs	r1, #170	@ 0xaa
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 fe38 	bl	80028c4 <min_tx_byte>

    stuffed_tx_byte(self, id_control, true);
 8001c54:	7afb      	ldrb	r3, [r7, #11]
 8001c56:	2201      	movs	r2, #1
 8001c58:	4619      	mov	r1, r3
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7ff ff8d 	bl	8001b7a <stuffed_tx_byte>
    if (id_control & 0x80U) {
 8001c60:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	da05      	bge.n	8001c74 <on_wire_bytes+0x7c>
        // Send the sequence number if it is a transport frame
        stuffed_tx_byte(self, seq, true);
 8001c68:	7abb      	ldrb	r3, [r7, #10]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f7ff ff83 	bl	8001b7a <stuffed_tx_byte>
    }

    stuffed_tx_byte(self, payload_len, true);
 8001c74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f7ff ff7c 	bl	8001b7a <stuffed_tx_byte>

    for (i = 0, n = payload_len; n > 0; n--, i++) {
 8001c82:	2300      	movs	r3, #0
 8001c84:	75bb      	strb	r3, [r7, #22]
 8001c86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c8a:	75fb      	strb	r3, [r7, #23]
 8001c8c:	e015      	b.n	8001cba <on_wire_bytes+0xc2>
        stuffed_tx_byte(self, payload_base[payload_offset], true);
 8001c8e:	8c3b      	ldrh	r3, [r7, #32]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4619      	mov	r1, r3
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f7ff ff6d 	bl	8001b7a <stuffed_tx_byte>
        payload_offset++;
 8001ca0:	8c3b      	ldrh	r3, [r7, #32]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	843b      	strh	r3, [r7, #32]
        payload_offset &= payload_mask;
 8001ca6:	8c3a      	ldrh	r2, [r7, #32]
 8001ca8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001caa:	4013      	ands	r3, r2
 8001cac:	843b      	strh	r3, [r7, #32]
    for (i = 0, n = payload_len; n > 0; n--, i++) {
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	75fb      	strb	r3, [r7, #23]
 8001cb4:	7dbb      	ldrb	r3, [r7, #22]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	75bb      	strb	r3, [r7, #22]
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e6      	bne.n	8001c8e <on_wire_bytes+0x96>
    }

    checksum = crc32_finalize(&self->tx_checksum);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff4a 	bl	8001b60 <crc32_finalize>
 8001ccc:	6138      	str	r0, [r7, #16]

    // Network order is big-endian. A decent C compiler will spot that this
    // is extracting bytes and will use efficient instructions.
    stuffed_tx_byte(self, (uint8_t)((checksum >> 24) & 0xffU), false);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	0e1b      	lsrs	r3, r3, #24
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f7ff ff4e 	bl	8001b7a <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 16) & 0xffU), false);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7ff ff46 	bl	8001b7a <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 8) & 0xffU), false);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f7ff ff3e 	bl	8001b7a <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 0) & 0xffU), false);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2200      	movs	r2, #0
 8001d04:	4619      	mov	r1, r3
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f7ff ff37 	bl	8001b7a <stuffed_tx_byte>

    // Ensure end-of-frame doesn't contain 0xaa and confuse search for start-of-frame
    min_tx_byte(self->port, EOF_BYTE);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8001d12:	2155      	movs	r1, #85	@ 0x55
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 fdd5 	bl	80028c4 <min_tx_byte>

    min_tx_finished(self->port);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 fdf0 	bl	8002906 <min_tx_finished>
}
 8001d26:	bf00      	nop
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <transport_fifo_pop>:

#ifdef TRANSPORT_PROTOCOL

// Pops frame from front of queue, reclaims its ring buffer space
static void transport_fifo_pop(struct min_context *self)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
#ifdef ASSERTION_CHECKING
    assert(self->transport_fifo.n_frames != 0);
#endif
    struct transport_frame *frame = &self->transport_fifo.frames[self->transport_fifo.head_idx];
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
    min_debug_print("Popping frame id=%d seq=%d\n", frame->min_id, frame->seq);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	79db      	ldrb	r3, [r3, #7]
 8001d52:	4619      	mov	r1, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	7a1b      	ldrb	r3, [r3, #8]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4815      	ldr	r0, [pc, #84]	@ (8001db0 <transport_fifo_pop+0x80>)
 8001d5c:	f000 fd8c 	bl	8002878 <min_debug_print>

#ifdef ASSERTION_CHECKING
    assert(self->transport_fifo.n_ring_buffer_bytes >= frame->payload_len);
#endif

    self->transport_fifo.n_frames--;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    self->transport_fifo.head_idx++;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001d76:	3301      	adds	r3, #1
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    self->transport_fifo.head_idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    self->transport_fifo.n_ring_buffer_bytes -= frame->payload_len;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	7992      	ldrb	r2, [r2, #6]
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	080098c8 	.word	0x080098c8

08001db4 <transport_fifo_push>:

// Claim a buffer slot from the FIFO. Returns 0 if there is no space.
static struct transport_frame *transport_fifo_push(struct min_context *self, uint16_t data_size)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
    // A frame is only queued if there aren't too many frames in the FIFO and there is space in the
    // data ring buffer.
    struct transport_frame *ret = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
    if (self->transport_fifo.n_frames < TRANSPORT_FIFO_MAX_FRAMES) {
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8001dca:	2b0f      	cmp	r3, #15
 8001dcc:	d872      	bhi.n	8001eb4 <transport_fifo_push+0x100>
        // Is there space in the ring buffer for the frame payload?
        if (self->transport_fifo.n_ring_buffer_bytes <= TRANSPORT_FIFO_MAX_FRAME_DATA - data_size) {
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	887b      	ldrh	r3, [r7, #2]
 8001dd8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d860      	bhi.n	8001ea2 <transport_fifo_push+0xee>
            self->transport_fifo.n_frames++;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8001de6:	3301      	adds	r3, #1
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            if (self->transport_fifo.n_frames > self->transport_fifo.n_frames_max) {
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 20e2 	ldrb.w	r2, [r3, #226]	@ 0xe2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d905      	bls.n	8001e0c <transport_fifo_push+0x58>
                // High-water mark of FIFO (for diagnostic purposes)
                self->transport_fifo.n_frames_max = self->transport_fifo.n_frames;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 20e2 	ldrb.w	r2, [r3, #226]	@ 0xe2
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            }
            // Create FIFO entry
            ret = &(self->transport_fifo.frames[self->transport_fifo.tail_idx]);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8001e12:	461a      	mov	r2, r3
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
            ret->payload_offset = self->transport_fifo.ring_buffer_tail_offset;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	@ 0xe0
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	809a      	strh	r2, [r3, #4]

            // Claim ring buffer space
            self->transport_fifo.n_ring_buffer_bytes += data_size;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	@ 0xdc
 8001e32:	887b      	ldrh	r3, [r7, #2]
 8001e34:	4413      	add	r3, r2
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
            if (self->transport_fifo.n_ring_buffer_bytes > self->transport_fifo.n_ring_buffer_bytes_max) {
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	@ 0xdc
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f8b3 30de 	ldrh.w	r3, [r3, #222]	@ 0xde
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d905      	bls.n	8001e5a <transport_fifo_push+0xa6>
                // High-water mark of ring buffer usage (for diagnostic purposes)
                self->transport_fifo.n_ring_buffer_bytes_max = self->transport_fifo.n_ring_buffer_bytes;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	@ 0xdc
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
            }
            self->transport_fifo.ring_buffer_tail_offset += data_size;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	@ 0xe0
 8001e60:	887b      	ldrh	r3, [r7, #2]
 8001e62:	4413      	add	r3, r2
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
            self->transport_fifo.ring_buffer_tail_offset &= TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 8001e72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0

            // Claim FIFO space
            self->transport_fifo.tail_idx++;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8001e84:	3301      	adds	r3, #1
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            self->transport_fifo.tail_idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
 8001ea0:	e00b      	b.n	8001eba <transport_fifo_push+0x106>
        } else {
            min_debug_print("No FIFO payload space: data_size=%d, n_ring_buffer_bytes=%d\n", data_size, self->transport_fifo.n_ring_buffer_bytes);
 8001ea2:	8879      	ldrh	r1, [r7, #2]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <transport_fifo_push+0x110>)
 8001eae:	f000 fce3 	bl	8002878 <min_debug_print>
 8001eb2:	e002      	b.n	8001eba <transport_fifo_push+0x106>
        }
    } else {
        min_debug_print("No FIFO frame slots\n");
 8001eb4:	4804      	ldr	r0, [pc, #16]	@ (8001ec8 <transport_fifo_push+0x114>)
 8001eb6:	f000 fcdf 	bl	8002878 <min_debug_print>
    }
    return ret;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	080098e4 	.word	0x080098e4
 8001ec8:	08009924 	.word	0x08009924

08001ecc <transport_fifo_get>:

// Return the nth frame in the FIFO
static struct transport_frame *transport_fifo_get(struct min_context *self, uint8_t n)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
    uint8_t idx = self->transport_fifo.head_idx;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001ede:	73fb      	strb	r3, [r7, #15]
    return &self->transport_fifo.frames[(idx + n) & TRANSPORT_FIFO_SIZE_FRAMES_MASK];
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	f003 020f 	and.w	r2, r3, #15
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <transport_fifo_send>:

// Sends the given frame to the serial line
static void transport_fifo_send(struct min_context *self, struct transport_frame *frame)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af04      	add	r7, sp, #16
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
    min_debug_print("transport_fifo_send: min_id=%d, seq=%d, payload_len=%d\n", frame->min_id, frame->seq, frame->payload_len);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	79db      	ldrb	r3, [r3, #7]
 8001f12:	4619      	mov	r1, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	7a1b      	ldrb	r3, [r3, #8]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	799b      	ldrb	r3, [r3, #6]
 8001f1e:	4810      	ldr	r0, [pc, #64]	@ (8001f60 <transport_fifo_send+0x5c>)
 8001f20:	f000 fcaa 	bl	8002878 <min_debug_print>
    on_wire_bytes(self, frame->min_id | (uint8_t)0x80U, frame->seq, payloads_ring_buffer, frame->payload_offset, TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK, frame->payload_len);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	79db      	ldrb	r3, [r3, #7]
 8001f28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f2c:	b2d9      	uxtb	r1, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	7a18      	ldrb	r0, [r3, #8]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	889b      	ldrh	r3, [r3, #4]
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	7992      	ldrb	r2, [r2, #6]
 8001f3a:	9202      	str	r2, [sp, #8]
 8001f3c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001f40:	9201      	str	r2, [sp, #4]
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <transport_fifo_send+0x60>)
 8001f46:	4602      	mov	r2, r0
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff fe55 	bl	8001bf8 <on_wire_bytes>
    frame->last_sent_time_ms = now;
 8001f4e:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <transport_fifo_send+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	601a      	str	r2, [r3, #0]
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	0800993c 	.word	0x0800993c
 8001f64:	200057c8 	.word	0x200057c8
 8001f68:	20005bc8 	.word	0x20005bc8

08001f6c <send_ack>:

// We don't queue an ACK frame - we send it straight away (if there's space to do so)
static void send_ack(struct min_context *self)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af04      	add	r7, sp, #16
 8001f72:	6078      	str	r0, [r7, #4]
    // In the embedded end we don't reassemble out-of-order frames and so never ask for retransmits. Payload is
    // always the same as the sequence number.
    min_debug_print("send ACK: seq=%d\n", self->transport_fifo.rn);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4811      	ldr	r0, [pc, #68]	@ (8001fc4 <send_ack+0x58>)
 8001f7e:	f000 fc7b 	bl	8002878 <min_debug_print>
    if (ON_WIRE_SIZE(0) <= min_tx_space(self->port)) {
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 fc8b 	bl	80028a4 <min_tx_space>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b0a      	cmp	r3, #10
 8001f92:	d913      	bls.n	8001fbc <send_ack+0x50>
        on_wire_bytes(self, ACK, self->transport_fifo.rn, &self->transport_fifo.rn, 0, 0xffU, 1U);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 20e8 	ldrb.w	r2, [r3, #232]	@ 0xe8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	33e8      	adds	r3, #232	@ 0xe8
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	9102      	str	r1, [sp, #8]
 8001fa2:	21ff      	movs	r1, #255	@ 0xff
 8001fa4:	9101      	str	r1, [sp, #4]
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	9100      	str	r1, [sp, #0]
 8001faa:	21ff      	movs	r1, #255	@ 0xff
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff fe23 	bl	8001bf8 <on_wire_bytes>
        self->transport_fifo.last_sent_ack_time_ms = now;
 8001fb2:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <send_ack+0x5c>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    }
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	08009974 	.word	0x08009974
 8001fc8:	20005bc8 	.word	0x20005bc8

08001fcc <send_reset>:

// We don't queue an RESET frame - we send it straight away (if there's space to do so)
static void send_reset(struct min_context *self)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af04      	add	r7, sp, #16
 8001fd2:	6078      	str	r0, [r7, #4]
    min_debug_print("send RESET\n");
 8001fd4:	480d      	ldr	r0, [pc, #52]	@ (800200c <send_reset+0x40>)
 8001fd6:	f000 fc4f 	bl	8002878 <min_debug_print>
    if (ON_WIRE_SIZE(0) <= min_tx_space(self->port)) {
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fc5f 	bl	80028a4 <min_tx_space>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b0a      	cmp	r3, #10
 8001fea:	d90b      	bls.n	8002004 <send_reset+0x38>
        on_wire_bytes(self, RESET, 0, 0, 0, 0, 0);
 8001fec:	2300      	movs	r3, #0
 8001fee:	9302      	str	r3, [sp, #8]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	21fe      	movs	r1, #254	@ 0xfe
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fdfa 	bl	8001bf8 <on_wire_bytes>
    }
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	08009988 	.word	0x08009988

08002010 <transport_fifo_reset>:

static void transport_fifo_reset(struct min_context *self)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    // Clear down the transmission FIFO queue
    self->transport_fifo.n_frames = 0;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    self->transport_fifo.head_idx = 0;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    self->transport_fifo.tail_idx = 0;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
    self->transport_fifo.n_ring_buffer_bytes = 0;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
    self->transport_fifo.ring_buffer_tail_offset = 0;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
    self->transport_fifo.sn_max = 0;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    self->transport_fifo.sn_min = 0;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
    self->transport_fifo.rn = 0;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

    // Reset the timers
    self->transport_fifo.last_received_anything_ms = now;
 8002058:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <transport_fifo_reset+0x70>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    self->transport_fifo.last_sent_ack_time_ms = now;
 8002062:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <transport_fifo_reset+0x70>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    self->transport_fifo.last_received_frame_ms = 0;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	20005bc8 	.word	0x20005bc8

08002084 <min_transport_reset>:

void min_transport_reset(struct min_context *self, bool inform_other_side)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	70fb      	strb	r3, [r7, #3]
    min_debug_print("Resetting %s other side\n", inform_other_side ? "and informing" : "without informing");
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <min_transport_reset+0x16>
 8002096:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <min_transport_reset+0x3c>)
 8002098:	e000      	b.n	800209c <min_transport_reset+0x18>
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <min_transport_reset+0x40>)
 800209c:	4619      	mov	r1, r3
 800209e:	480a      	ldr	r0, [pc, #40]	@ (80020c8 <min_transport_reset+0x44>)
 80020a0:	f000 fbea 	bl	8002878 <min_debug_print>
    if (inform_other_side) {
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <min_transport_reset+0x2c>
        // Tell the other end we have gone away
        send_reset(self);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ff8e 	bl	8001fcc <send_reset>
    }

    // Throw our frames away
    transport_fifo_reset(self);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ffad 	bl	8002010 <transport_fifo_reset>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	08009994 	.word	0x08009994
 80020c4:	080099a4 	.word	0x080099a4
 80020c8:	080099b8 	.word	0x080099b8

080020cc <min_queue_frame>:

// Queues a MIN ID / payload frame into the outgoing FIFO
// API call.
// Returns true if the frame was queued OK.
bool min_queue_frame(struct min_context *self, uint8_t min_id, uint8_t const *payload, uint8_t payload_len)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	461a      	mov	r2, r3
 80020d8:	460b      	mov	r3, r1
 80020da:	72fb      	strb	r3, [r7, #11]
 80020dc:	4613      	mov	r3, r2
 80020de:	72bb      	strb	r3, [r7, #10]
    struct transport_frame *frame = transport_fifo_push(self, payload_len); // Claim a FIFO slot, reserve space for payload
 80020e0:	7abb      	ldrb	r3, [r7, #10]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	4619      	mov	r1, r3
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7ff fe64 	bl	8001db4 <transport_fifo_push>
 80020ec:	6178      	str	r0, [r7, #20]

    // We are just queueing here: the poll() function puts the frame into the window and on to the wire
    if (frame != 0) {
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d02b      	beq.n	800214c <min_queue_frame+0x80>
        uint32_t i;
        // Copy frame details into frame slot, copy payload into ring buffer
        frame->min_id = min_id & (uint8_t)0x3FU;
 80020f4:	7afb      	ldrb	r3, [r7, #11]
 80020f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	71da      	strb	r2, [r3, #7]
        frame->payload_len = payload_len;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	7aba      	ldrb	r2, [r7, #10]
 8002104:	719a      	strb	r2, [r3, #6]

        uint16_t payload_offset = frame->payload_offset;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	889b      	ldrh	r3, [r3, #4]
 800210a:	837b      	strh	r3, [r7, #26]
        for (i = 0; i < payload_len; i++) {
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	e010      	b.n	8002134 <min_queue_frame+0x68>
            payloads_ring_buffer[payload_offset] = payload[i];
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	441a      	add	r2, r3
 8002118:	8b7b      	ldrh	r3, [r7, #26]
 800211a:	7811      	ldrb	r1, [r2, #0]
 800211c:	4a11      	ldr	r2, [pc, #68]	@ (8002164 <min_queue_frame+0x98>)
 800211e:	54d1      	strb	r1, [r2, r3]
            payload_offset++;
 8002120:	8b7b      	ldrh	r3, [r7, #26]
 8002122:	3301      	adds	r3, #1
 8002124:	837b      	strh	r3, [r7, #26]
            payload_offset &= TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK;
 8002126:	8b7b      	ldrh	r3, [r7, #26]
 8002128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800212c:	837b      	strh	r3, [r7, #26]
        for (i = 0; i < payload_len; i++) {
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3301      	adds	r3, #1
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	7abb      	ldrb	r3, [r7, #10]
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	429a      	cmp	r2, r3
 800213a:	d3ea      	bcc.n	8002112 <min_queue_frame+0x46>
        }
        min_debug_print("Queued ID=%d, len=%d\n", min_id, payload_len);
 800213c:	7afb      	ldrb	r3, [r7, #11]
 800213e:	7aba      	ldrb	r2, [r7, #10]
 8002140:	4619      	mov	r1, r3
 8002142:	4809      	ldr	r0, [pc, #36]	@ (8002168 <min_queue_frame+0x9c>)
 8002144:	f000 fb98 	bl	8002878 <min_debug_print>
        return true;
 8002148:	2301      	movs	r3, #1
 800214a:	e007      	b.n	800215c <min_queue_frame+0x90>
    } else {
        self->transport_fifo.dropped_frames++;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        return false;
 800215a:	2300      	movs	r3, #0
    }
}
 800215c:	4618      	mov	r0, r3
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	200057c8 	.word	0x200057c8
 8002168:	080099d4 	.word	0x080099d4

0800216c <min_queue_has_space_for_frame>:

bool min_queue_has_space_for_frame(struct min_context *self, uint8_t payload_len)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
    return self->transport_fifo.n_frames < TRANSPORT_FIFO_MAX_FRAMES &&
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 800217e:	2b0f      	cmp	r3, #15
 8002180:	d80a      	bhi.n	8002198 <min_queue_has_space_for_frame+0x2c>
           self->transport_fifo.n_ring_buffer_bytes <= TRANSPORT_FIFO_MAX_FRAME_DATA - payload_len;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8002188:	461a      	mov	r2, r3
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
    return self->transport_fifo.n_frames < TRANSPORT_FIFO_MAX_FRAMES &&
 8002190:	429a      	cmp	r2, r3
 8002192:	d801      	bhi.n	8002198 <min_queue_has_space_for_frame+0x2c>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <min_queue_has_space_for_frame+0x2e>
 8002198:	2300      	movs	r3, #0
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	b2db      	uxtb	r3, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <find_retransmit_frame>:

// Finds the frame in the window that was sent least recently
static struct transport_frame *find_retransmit_frame(struct min_context *self)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	@ 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    uint8_t idx;
    uint8_t i;
    uint8_t window_size = self->transport_fifo.sn_max - self->transport_fifo.sn_min;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	74fb      	strb	r3, [r7, #19]
    assert(window_size > 0);
    assert(window_size <= self->transport_fifo.n_frames);
#endif

    // Start with the head of the queue and call this the oldest
    struct transport_frame *oldest_frame = &self->transport_fifo.frames[self->transport_fifo.head_idx];
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80021ca:	461a      	mov	r2, r3
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
    uint32_t oldest_elapsed_time = now - oldest_frame->last_sent_time_ms;
 80021da:	4b1e      	ldr	r3, [pc, #120]	@ (8002254 <find_retransmit_frame+0xa8>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	617b      	str	r3, [r7, #20]

    idx = self->transport_fifo.head_idx;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80021ec:	77fb      	strb	r3, [r7, #31]
    for (i = 0; i < window_size; i++) {
 80021ee:	2300      	movs	r3, #0
 80021f0:	77bb      	strb	r3, [r7, #30]
 80021f2:	e023      	b.n	800223c <find_retransmit_frame+0x90>
        uint32_t elapsed = now - self->transport_fifo.frames[idx].last_sent_time_ms;
 80021f4:	4b17      	ldr	r3, [pc, #92]	@ (8002254 <find_retransmit_frame+0xa8>)
 80021f6:	6819      	ldr	r1, [r3, #0]
 80021f8:	7ffa      	ldrb	r2, [r7, #31]
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4403      	add	r3, r0
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	1acb      	subs	r3, r1, r3
 800220a:	60fb      	str	r3, [r7, #12]
        if (elapsed > oldest_elapsed_time) { // Strictly older only; otherwise the earlier frame is deemed the older
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	429a      	cmp	r2, r3
 8002212:	d909      	bls.n	8002228 <find_retransmit_frame+0x7c>
            oldest_elapsed_time = elapsed;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	617b      	str	r3, [r7, #20]
            oldest_frame = &self->transport_fifo.frames[idx];
 8002218:	7ffa      	ldrb	r2, [r7, #31]
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        }
        idx++;
 8002228:	7ffb      	ldrb	r3, [r7, #31]
 800222a:	3301      	adds	r3, #1
 800222c:	77fb      	strb	r3, [r7, #31]
        idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 800222e:	7ffb      	ldrb	r3, [r7, #31]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	77fb      	strb	r3, [r7, #31]
    for (i = 0; i < window_size; i++) {
 8002236:	7fbb      	ldrb	r3, [r7, #30]
 8002238:	3301      	adds	r3, #1
 800223a:	77bb      	strb	r3, [r7, #30]
 800223c:	7fba      	ldrb	r2, [r7, #30]
 800223e:	7cfb      	ldrb	r3, [r7, #19]
 8002240:	429a      	cmp	r2, r3
 8002242:	d3d7      	bcc.n	80021f4 <find_retransmit_frame+0x48>
    }

    return oldest_frame;
 8002244:	69bb      	ldr	r3, [r7, #24]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3724      	adds	r7, #36	@ 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20005bc8 	.word	0x20005bc8

08002258 <valid_frame_received>:
#endif // TRANSPORT_PROTOCOL

// This runs the receiving half of the transport protocol, acknowledging frames received, discarding
// duplicates received, and handling RESET requests.
static void valid_frame_received(struct min_context *self)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
    uint8_t id_control = self->rx_frame_id_control;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 31fb 	ldrb.w	r3, [r3, #507]	@ 0x1fb
 8002266:	777b      	strb	r3, [r7, #29]
    uint8_t *payload = self->rx_frame_payload_buf;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	33ec      	adds	r3, #236	@ 0xec
 800226c:	61bb      	str	r3, [r7, #24]
    uint8_t payload_len = self->rx_control;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8002274:	75fb      	strb	r3, [r7, #23]

#ifdef TRANSPORT_PROTOCOL
    uint8_t seq = self->rx_frame_seq;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 800227c:	75bb      	strb	r3, [r7, #22]
    uint8_t num_acked;
    uint8_t num_nacked;
    uint8_t num_in_window;

    // When we receive anything we know the other end is still active and won't shut down
    self->transport_fifo.last_received_anything_ms = now;
 800227e:	4b65      	ldr	r3, [pc, #404]	@ (8002414 <valid_frame_received+0x1bc>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    switch (id_control) {
 8002288:	7f7b      	ldrb	r3, [r7, #29]
 800228a:	2bfe      	cmp	r3, #254	@ 0xfe
 800228c:	d05e      	beq.n	800234c <valid_frame_received+0xf4>
 800228e:	2bff      	cmp	r3, #255	@ 0xff
 8002290:	d16a      	bne.n	8002368 <valid_frame_received+0x110>
    case ACK:
        // If we get an ACK then we remove all the acknowledged frames with seq < rn
        // The payload byte specifies the number of NACKed frames: how many we want retransmitted because
        // they have gone missing.
        // But we need to make sure we don't accidentally ACK too many because of a stale ACK from an old session
        num_acked = seq - self->transport_fifo.sn_min;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8002298:	7dba      	ldrb	r2, [r7, #22]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	757b      	strb	r3, [r7, #21]
        num_nacked = payload[0] - seq;
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	781a      	ldrb	r2, [r3, #0]
 80022a2:	7dbb      	ldrb	r3, [r7, #22]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	753b      	strb	r3, [r7, #20]
        num_in_window = self->transport_fifo.sn_max - self->transport_fifo.sn_min;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	74fb      	strb	r3, [r7, #19]

        if (num_acked <= num_in_window) {
 80022b8:	7d7a      	ldrb	r2, [r7, #21]
 80022ba:	7cfb      	ldrb	r3, [r7, #19]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d838      	bhi.n	8002332 <valid_frame_received+0xda>
            uint8_t i;

            self->transport_fifo.sn_min = seq;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7dba      	ldrb	r2, [r7, #22]
 80022c4:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
            assert(num_in_window <= TRANSPORT_MAX_WINDOW_SIZE);
            assert(num_nacked <= TRANSPORT_MAX_WINDOW_SIZE);
#endif
            // Now pop off all the frames up to (but not including) rn
            // The ACK contains Rn; all frames before Rn are ACKed and can be removed from the window
            min_debug_print("Received ACK seq=%d, num_acked=%d, num_nacked=%d\n", seq, num_acked, num_nacked);
 80022c8:	7db9      	ldrb	r1, [r7, #22]
 80022ca:	7d7a      	ldrb	r2, [r7, #21]
 80022cc:	7d3b      	ldrb	r3, [r7, #20]
 80022ce:	4852      	ldr	r0, [pc, #328]	@ (8002418 <valid_frame_received+0x1c0>)
 80022d0:	f000 fad2 	bl	8002878 <min_debug_print>
            for (i = 0; i < num_acked; i++) {
 80022d4:	2300      	movs	r3, #0
 80022d6:	77fb      	strb	r3, [r7, #31]
 80022d8:	e005      	b.n	80022e6 <valid_frame_received+0x8e>
                transport_fifo_pop(self);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff fd28 	bl	8001d30 <transport_fifo_pop>
            for (i = 0; i < num_acked; i++) {
 80022e0:	7ffb      	ldrb	r3, [r7, #31]
 80022e2:	3301      	adds	r3, #1
 80022e4:	77fb      	strb	r3, [r7, #31]
 80022e6:	7ffa      	ldrb	r2, [r7, #31]
 80022e8:	7d7b      	ldrb	r3, [r7, #21]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d3f5      	bcc.n	80022da <valid_frame_received+0x82>
            }
            uint8_t idx = self->transport_fifo.head_idx;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80022f4:	77bb      	strb	r3, [r7, #30]
            // Now retransmit the number of frames that were requested
            for (i = 0; i < num_nacked; i++) {
 80022f6:	2300      	movs	r3, #0
 80022f8:	77fb      	strb	r3, [r7, #31]
 80022fa:	e015      	b.n	8002328 <valid_frame_received+0xd0>
                struct transport_frame *retransmit_frame = &self->transport_fifo.frames[idx];
 80022fc:	7fba      	ldrb	r2, [r7, #30]
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
                transport_fifo_send(self, retransmit_frame);
 800230c:	68f9      	ldr	r1, [r7, #12]
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fdf8 	bl	8001f04 <transport_fifo_send>
                idx++;
 8002314:	7fbb      	ldrb	r3, [r7, #30]
 8002316:	3301      	adds	r3, #1
 8002318:	77bb      	strb	r3, [r7, #30]
                idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 800231a:	7fbb      	ldrb	r3, [r7, #30]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	77bb      	strb	r3, [r7, #30]
            for (i = 0; i < num_nacked; i++) {
 8002322:	7ffb      	ldrb	r3, [r7, #31]
 8002324:	3301      	adds	r3, #1
 8002326:	77fb      	strb	r3, [r7, #31]
 8002328:	7ffa      	ldrb	r2, [r7, #31]
 800232a:	7d3b      	ldrb	r3, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	d3e5      	bcc.n	80022fc <valid_frame_received+0xa4>
            }
        } else {
            min_debug_print("Received spurious ACK seq=%d\n", seq);
            self->transport_fifo.spurious_acks++;
        }
        break;
 8002330:	e06c      	b.n	800240c <valid_frame_received+0x1b4>
            min_debug_print("Received spurious ACK seq=%d\n", seq);
 8002332:	7dbb      	ldrb	r3, [r7, #22]
 8002334:	4619      	mov	r1, r3
 8002336:	4839      	ldr	r0, [pc, #228]	@ (800241c <valid_frame_received+0x1c4>)
 8002338:	f000 fa9e 	bl	8002878 <min_debug_print>
            self->transport_fifo.spurious_acks++;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        break;
 800234a:	e05f      	b.n	800240c <valid_frame_received+0x1b4>
    case RESET:
        // If we get a RESET demand then we reset the transport protocol (empty the FIFO, reset the
        // sequence numbers, etc.)
        // We don't send anything, we just do it. The other end can send frames to see if this end is
        // alive (pings, etc.) or just wait to get application frames.
        min_debug_print("Received reset\n");
 800234c:	4834      	ldr	r0, [pc, #208]	@ (8002420 <valid_frame_received+0x1c8>)
 800234e:	f000 fa93 	bl	8002878 <min_debug_print>
        self->transport_fifo.resets_received++;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        transport_fifo_reset(self);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff fe55 	bl	8002010 <transport_fifo_reset>
        break;
 8002366:	e051      	b.n	800240c <valid_frame_received+0x1b4>
    default:
        if (id_control & 0x80U) {
 8002368:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800236c:	2b00      	cmp	r3, #0
 800236e:	da39      	bge.n	80023e4 <valid_frame_received+0x18c>
            // Incoming application frames

            // Reset the activity time (an idle connection will be stalled)
            self->transport_fifo.last_received_frame_ms = now;
 8002370:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <valid_frame_received+0x1bc>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

            if (seq == self->transport_fifo.rn) {
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002380:	7dba      	ldrb	r2, [r7, #22]
 8002382:	429a      	cmp	r2, r3
 8002384:	d11e      	bne.n	80023c4 <valid_frame_received+0x16c>
                // Accept this frame as matching the sequence number we were looking for

                // Now looking for the next one in the sequence
                self->transport_fifo.rn++;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800238c:	3301      	adds	r3, #1
 800238e:	b2da      	uxtb	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                // Always send an ACK back for the frame we received
                // ACKs are short (should be about 9 microseconds to send on the wire) and
                // this will cut the latency down.
                // We also periodically send an ACK in case the ACK was lost, and in any case
                // frames are re-sent.
                send_ack(self);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff fde8 	bl	8001f6c <send_ack>

                // Now ready to pass this up to the application handlers

                // Pass frame up to application handler to deal with
                min_debug_print("Incoming app transport frame seq=%d, id=%d, payload len=%d\n", seq, id_control & (uint8_t)0x3fU, payload_len);
 800239c:	7db9      	ldrb	r1, [r7, #22]
 800239e:	7f7b      	ldrb	r3, [r7, #29]
 80023a0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	481f      	ldr	r0, [pc, #124]	@ (8002424 <valid_frame_received+0x1cc>)
 80023a8:	f000 fa66 	bl	8002878 <min_debug_print>
                min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
 80023ac:	7f7b      	ldrb	r3, [r7, #29]
 80023ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023b2:	b2d8      	uxtb	r0, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80023ba:	7dfa      	ldrb	r2, [r7, #23]
 80023bc:	69b9      	ldr	r1, [r7, #24]
 80023be:	f000 fb81 	bl	8002ac4 <min_application_handler>
        } else {
            // Not a transport frame
            min_debug_print("Incoming app frame id=%d, payload len=%d\n", id_control & (uint8_t)0x3fU, payload_len);
            min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
        }
        break;
 80023c2:	e022      	b.n	800240a <valid_frame_received+0x1b2>
                self->transport_fifo.sequence_mismatch_drop++;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
                min_debug_print("Received mismatched frame seq=%d, looking for seq=%d\n", seq, self->transport_fifo.rn);
 80023d2:	7db9      	ldrb	r1, [r7, #22]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80023da:	461a      	mov	r2, r3
 80023dc:	4812      	ldr	r0, [pc, #72]	@ (8002428 <valid_frame_received+0x1d0>)
 80023de:	f000 fa4b 	bl	8002878 <min_debug_print>
        break;
 80023e2:	e012      	b.n	800240a <valid_frame_received+0x1b2>
            min_debug_print("Incoming app frame id=%d, payload len=%d\n", id_control & (uint8_t)0x3fU, payload_len);
 80023e4:	7f7b      	ldrb	r3, [r7, #29]
 80023e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023ea:	7dfa      	ldrb	r2, [r7, #23]
 80023ec:	4619      	mov	r1, r3
 80023ee:	480f      	ldr	r0, [pc, #60]	@ (800242c <valid_frame_received+0x1d4>)
 80023f0:	f000 fa42 	bl	8002878 <min_debug_print>
            min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
 80023f4:	7f7b      	ldrb	r3, [r7, #29]
 80023f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023fa:	b2d8      	uxtb	r0, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8002402:	7dfa      	ldrb	r2, [r7, #23]
 8002404:	69b9      	ldr	r1, [r7, #24]
 8002406:	f000 fb5d 	bl	8002ac4 <min_application_handler>
        break;
 800240a:	bf00      	nop
    }
#else  // TRANSPORT_PROTOCOL
    min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
#endif // TRANSPORT_PROTOCOL
}
 800240c:	bf00      	nop
 800240e:	3720      	adds	r7, #32
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20005bc8 	.word	0x20005bc8
 8002418:	080099ec 	.word	0x080099ec
 800241c:	08009a20 	.word	0x08009a20
 8002420:	08009a40 	.word	0x08009a40
 8002424:	08009a50 	.word	0x08009a50
 8002428:	08009a8c 	.word	0x08009a8c
 800242c:	08009ac4 	.word	0x08009ac4

08002430 <rx_byte>:

static void rx_byte(struct min_context *self, uint8_t byte)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	70fb      	strb	r3, [r7, #3]
    // should reset the frame buffer and be ready to receive frame data
    //
    // Two in a row in over the frame means to expect a stuff byte.
    uint32_t crc;

    if (self->rx_header_bytes_seen == 2) {
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 8002442:	2b02      	cmp	r3, #2
 8002444:	d114      	bne.n	8002470 <rx_byte+0x40>
        self->rx_header_bytes_seen = 0;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
        if (byte == HEADER_BYTE) {
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	2baa      	cmp	r3, #170	@ 0xaa
 8002452:	d104      	bne.n	800245e <rx_byte+0x2e>
            self->rx_frame_state = RECEIVING_ID_CONTROL;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
            return;
 800245c:	e126      	b.n	80026ac <rx_byte+0x27c>
        }
        if (byte == STUFF_BYTE) {
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	2b55      	cmp	r3, #85	@ 0x55
 8002462:	f000 811e 	beq.w	80026a2 <rx_byte+0x272>
            /* Discard this byte; carry on receiving on the next character */
            return;
        } else {
            /* Something has gone wrong, give up on this frame and look for header again */
            self->rx_frame_state = SEARCHING_FOR_SOF;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
            return;
 800246e:	e11d      	b.n	80026ac <rx_byte+0x27c>
        }
    }

    if (byte == HEADER_BYTE) {
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	2baa      	cmp	r3, #170	@ 0xaa
 8002474:	d108      	bne.n	8002488 <rx_byte+0x58>
        self->rx_header_bytes_seen++;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 800247c:	3301      	adds	r3, #1
 800247e:	b2da      	uxtb	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
 8002486:	e003      	b.n	8002490 <rx_byte+0x60>
    } else {
        self->rx_header_bytes_seen = 0;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
    }

    switch (self->rx_frame_state) {
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 8002496:	2b09      	cmp	r3, #9
 8002498:	f200 80f6 	bhi.w	8002688 <rx_byte+0x258>
 800249c:	a201      	add	r2, pc, #4	@ (adr r2, 80024a4 <rx_byte+0x74>)
 800249e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a2:	bf00      	nop
 80024a4:	080026a7 	.word	0x080026a7
 80024a8:	080024cd 	.word	0x080024cd
 80024ac:	0800251d 	.word	0x0800251d
 80024b0:	0800253f 	.word	0x0800253f
 80024b4:	0800257d 	.word	0x0800257d
 80024b8:	080025cd 	.word	0x080025cd
 80024bc:	080025e1 	.word	0x080025e1
 80024c0:	080025fd 	.word	0x080025fd
 80024c4:	08002619 	.word	0x08002619
 80024c8:	08002667 	.word	0x08002667
    case SEARCHING_FOR_SOF:
        break;
    case RECEIVING_ID_CONTROL:
        self->rx_frame_id_control = byte;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	f883 21fb 	strb.w	r2, [r3, #507]	@ 0x1fb
        self->rx_frame_payload_bytes = 0;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 21fa 	strb.w	r2, [r3, #506]	@ 0x1fa
        crc32_init_context(&self->rx_checksum);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fb00 	bl	8001ae8 <crc32_init_context>
        crc32_step(&self->rx_checksum, byte);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80024ee:	78fa      	ldrb	r2, [r7, #3]
 80024f0:	4611      	mov	r1, r2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fb06 	bl	8001b04 <crc32_step>
        if (byte & 0x80U) {
 80024f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	da04      	bge.n	800250a <rx_byte+0xda>
#ifdef TRANSPORT_PROTOCOL
            self->rx_frame_state = RECEIVING_SEQ;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
#endif // TRANSPORT_PROTOCOL
        } else {
            self->rx_frame_seq = 0;
            self->rx_frame_state = RECEIVING_LENGTH;
        }
        break;
 8002508:	e0d0      	b.n	80026ac <rx_byte+0x27c>
            self->rx_frame_seq = 0;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
            self->rx_frame_state = RECEIVING_LENGTH;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2203      	movs	r2, #3
 8002516:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 800251a:	e0c7      	b.n	80026ac <rx_byte+0x27c>
    case RECEIVING_SEQ:
        self->rx_frame_seq = byte;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
        crc32_step(&self->rx_checksum, byte);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fae8 	bl	8001b04 <crc32_step>
        self->rx_frame_state = RECEIVING_LENGTH;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2203      	movs	r2, #3
 8002538:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 800253c:	e0b6      	b.n	80026ac <rx_byte+0x27c>
    case RECEIVING_LENGTH:
        self->rx_frame_length = byte;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
        self->rx_control = byte;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
        crc32_step(&self->rx_checksum, byte);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fad3 	bl	8001b04 <crc32_step>
        if (self->rx_frame_length > 0) {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <rx_byte+0x142>
            // Can reduce the RAM size by compiling limits to frame sizes
            if (self->rx_frame_length <= MAX_PAYLOAD) {
                self->rx_frame_state = RECEIVING_PAYLOAD;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2204      	movs	r2, #4
 800256c:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
                self->rx_frame_state = SEARCHING_FOR_SOF;
            }
        } else {
            self->rx_frame_state = RECEIVING_CHECKSUM_3;
        }
        break;
 8002570:	e09c      	b.n	80026ac <rx_byte+0x27c>
            self->rx_frame_state = RECEIVING_CHECKSUM_3;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2205      	movs	r2, #5
 8002576:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 800257a:	e097      	b.n	80026ac <rx_byte+0x27c>
    case RECEIVING_PAYLOAD:
        self->rx_frame_payload_buf[self->rx_frame_payload_bytes++] = byte;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 31fa 	ldrb.w	r3, [r3, #506]	@ 0x1fa
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	b2d1      	uxtb	r1, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	f882 11fa 	strb.w	r1, [r2, #506]	@ 0x1fa
 800258c:	461a      	mov	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        crc32_step(&self->rx_checksum, byte);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff faae 	bl	8001b04 <crc32_step>
        if (--self->rx_frame_length == 0) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d173      	bne.n	80026aa <rx_byte+0x27a>
            self->rx_frame_state = RECEIVING_CHECKSUM_3;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2205      	movs	r2, #5
 80025c6:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        }
        break;
 80025ca:	e06e      	b.n	80026aa <rx_byte+0x27a>
    case RECEIVING_CHECKSUM_3:
        self->rx_frame_checksum = ((uint32_t)byte) << 24;
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	061a      	lsls	r2, r3, #24
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        self->rx_frame_state = RECEIVING_CHECKSUM_2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2206      	movs	r2, #6
 80025da:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 80025de:	e065      	b.n	80026ac <rx_byte+0x27c>
    case RECEIVING_CHECKSUM_2:
        self->rx_frame_checksum |= ((uint32_t)byte) << 16;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 21ec 	ldr.w	r2, [r3, #492]	@ 0x1ec
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        self->rx_frame_state = RECEIVING_CHECKSUM_1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2207      	movs	r2, #7
 80025f6:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 80025fa:	e057      	b.n	80026ac <rx_byte+0x27c>
    case RECEIVING_CHECKSUM_1:
        self->rx_frame_checksum |= ((uint32_t)byte) << 8;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8d3 21ec 	ldr.w	r2, [r3, #492]	@ 0x1ec
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        self->rx_frame_state = RECEIVING_CHECKSUM_0;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2208      	movs	r2, #8
 8002612:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 8002616:	e049      	b.n	80026ac <rx_byte+0x27c>
    case RECEIVING_CHECKSUM_0:
        self->rx_frame_checksum |= byte;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f8d3 21ec 	ldr.w	r2, [r3, #492]	@ 0x1ec
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        crc = crc32_finalize(&self->rx_checksum);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fa96 	bl	8001b60 <crc32_finalize>
 8002634:	60f8      	str	r0, [r7, #12]
        if (self->rx_frame_checksum != crc) {
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f8d3 31ec 	ldr.w	r3, [r3, #492]	@ 0x1ec
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	429a      	cmp	r2, r3
 8002640:	d00c      	beq.n	800265c <rx_byte+0x22c>
            min_debug_print("Checksum failed, received 0x%08X, computed 0x%08X", self->rx_frame_checksum, crc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8d3 31ec 	ldr.w	r3, [r3, #492]	@ 0x1ec
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4619      	mov	r1, r3
 800264c:	4819      	ldr	r0, [pc, #100]	@ (80026b4 <rx_byte+0x284>)
 800264e:	f000 f913 	bl	8002878 <min_debug_print>
            // Frame fails the checksum and so is dropped
            self->rx_frame_state = SEARCHING_FOR_SOF;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        } else {
            // Checksum passes, go on to check for the end-of-frame marker
            self->rx_frame_state = RECEIVING_EOF;
        }
        break;
 800265a:	e027      	b.n	80026ac <rx_byte+0x27c>
            self->rx_frame_state = RECEIVING_EOF;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2209      	movs	r2, #9
 8002660:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 8002664:	e022      	b.n	80026ac <rx_byte+0x27c>
    case RECEIVING_EOF:
        if (byte == 0x55u) {
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	2b55      	cmp	r3, #85	@ 0x55
 800266a:	d103      	bne.n	8002674 <rx_byte+0x244>
            // Frame received OK, pass up data to handler
            valid_frame_received(self);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff fdf3 	bl	8002258 <valid_frame_received>
 8002672:	e004      	b.n	800267e <rx_byte+0x24e>
        } else {
            // else discard
            min_debug_print("Received invalid EOF 0x%02X", byte);
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	4619      	mov	r1, r3
 8002678:	480f      	ldr	r0, [pc, #60]	@ (80026b8 <rx_byte+0x288>)
 800267a:	f000 f8fd 	bl	8002878 <min_debug_print>
        }
        // Look for next frame */
        self->rx_frame_state = SEARCHING_FOR_SOF;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 8002686:	e011      	b.n	80026ac <rx_byte+0x27c>
    default:
        // Should never get here but in case we do then reset to a safe state
        min_debug_print("Received byte 0x%02X in invalid state %d", byte, self->rx_frame_state);
 8002688:	78f9      	ldrb	r1, [r7, #3]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 8002690:	461a      	mov	r2, r3
 8002692:	480a      	ldr	r0, [pc, #40]	@ (80026bc <rx_byte+0x28c>)
 8002694:	f000 f8f0 	bl	8002878 <min_debug_print>
        self->rx_frame_state = SEARCHING_FOR_SOF;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 80026a0:	e004      	b.n	80026ac <rx_byte+0x27c>
            return;
 80026a2:	bf00      	nop
 80026a4:	e002      	b.n	80026ac <rx_byte+0x27c>
        break;
 80026a6:	bf00      	nop
 80026a8:	e000      	b.n	80026ac <rx_byte+0x27c>
        break;
 80026aa:	bf00      	nop
    }
}
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	08009af0 	.word	0x08009af0
 80026b8:	08009b24 	.word	0x08009b24
 80026bc:	08009b40 	.word	0x08009b40

080026c0 <min_poll>:

// API call: sends received bytes into a MIN context and runs the transport timeouts
void min_poll(struct min_context *self, uint8_t const *buf, uint32_t buf_len)
{
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b089      	sub	sp, #36	@ 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for (i = 0; i < buf_len; i++) {
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	e00a      	b.n	80026e8 <min_poll+0x28>
        rx_byte(self, buf[i]);
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	4413      	add	r3, r2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	4619      	mov	r1, r3
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f7ff fea7 	bl	8002430 <rx_byte>
    for (i = 0; i < buf_len; i++) {
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3301      	adds	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d3f0      	bcc.n	80026d2 <min_poll+0x12>
    }

#ifdef TRANSPORT_PROTOCOL
    uint8_t window_size;

    now = min_time_ms();
 80026f0:	f000 f914 	bl	800291c <min_time_ms>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4a44      	ldr	r2, [pc, #272]	@ (8002808 <min_poll+0x148>)
 80026f8:	6013      	str	r3, [r2, #0]

    bool remote_connected = (now - self->transport_fifo.last_received_anything_ms < TRANSPORT_IDLE_TIMEOUT_MS);
 80026fa:	4b43      	ldr	r3, [pc, #268]	@ (8002808 <min_poll+0x148>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800270a:	4293      	cmp	r3, r2
 800270c:	bf94      	ite	ls
 800270e:	2301      	movls	r3, #1
 8002710:	2300      	movhi	r3, #0
 8002712:	76fb      	strb	r3, [r7, #27]
    bool remote_active = (now - self->transport_fifo.last_received_frame_ms < TRANSPORT_IDLE_TIMEOUT_MS);
 8002714:	4b3c      	ldr	r3, [pc, #240]	@ (8002808 <min_poll+0x148>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002724:	4293      	cmp	r3, r2
 8002726:	bf94      	ite	ls
 8002728:	2301      	movls	r3, #1
 800272a:	2300      	movhi	r3, #0
 800272c:	76bb      	strb	r3, [r7, #26]

    // This sends one new frame or resends one old frame
    window_size = self->transport_fifo.sn_max - self->transport_fifo.sn_min; // Window size
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	767b      	strb	r3, [r7, #25]
    if ((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 800273e:	7e7b      	ldrb	r3, [r7, #25]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d82a      	bhi.n	800279a <min_poll+0xda>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 800274a:	7e7a      	ldrb	r2, [r7, #25]
 800274c:	429a      	cmp	r2, r3
 800274e:	d224      	bcs.n	800279a <min_poll+0xda>
        // There are new frames we can send; but don't even bother if there's no buffer space for them
        struct transport_frame *frame = transport_fifo_get(self, window_size);
 8002750:	7e7b      	ldrb	r3, [r7, #25]
 8002752:	4619      	mov	r1, r3
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f7ff fbb9 	bl	8001ecc <transport_fifo_get>
 800275a:	6178      	str	r0, [r7, #20]
        if (ON_WIRE_SIZE(frame->payload_len) <= min_tx_space(self->port)) {
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	799b      	ldrb	r3, [r3, #6]
 8002760:	f103 040b 	add.w	r4, r3, #11
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f89a 	bl	80028a4 <min_tx_space>
 8002770:	4603      	mov	r3, r0
 8002772:	429c      	cmp	r4, r3
 8002774:	d834      	bhi.n	80027e0 <min_poll+0x120>
            frame->seq = self->transport_fifo.sn_max;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	721a      	strb	r2, [r3, #8]
            transport_fifo_send(self, frame);
 8002780:	6979      	ldr	r1, [r7, #20]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f7ff fbbe 	bl	8001f04 <transport_fifo_send>

            // Move window on
            self->transport_fifo.sn_max++;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 800278e:	3301      	adds	r3, #1
 8002790:	b2da      	uxtb	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    if ((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 8002798:	e022      	b.n	80027e0 <min_poll+0x120>
        }
    } else {
        // Sender cannot send new frames so resend old ones (if there's anyone there)
        if ((window_size > 0) && remote_connected) {
 800279a:	7e7b      	ldrb	r3, [r7, #25]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d020      	beq.n	80027e2 <min_poll+0x122>
 80027a0:	7efb      	ldrb	r3, [r7, #27]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d01d      	beq.n	80027e2 <min_poll+0x122>
            // There are unacknowledged frames. Can re-send an old frame. Pick the least recently sent one.
            struct transport_frame *oldest_frame = find_retransmit_frame(self);
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f7ff fd00 	bl	80021ac <find_retransmit_frame>
 80027ac:	6138      	str	r0, [r7, #16]
            if (now - oldest_frame->last_sent_time_ms >= TRANSPORT_FRAME_RETRANSMIT_TIMEOUT_MS) {
 80027ae:	4b16      	ldr	r3, [pc, #88]	@ (8002808 <min_poll+0x148>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2bf9      	cmp	r3, #249	@ 0xf9
 80027ba:	d912      	bls.n	80027e2 <min_poll+0x122>
                // Resending oldest frame if there's a chance there's enough space to send it
                if (ON_WIRE_SIZE(oldest_frame->payload_len) <= min_tx_space(self->port)) {
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	799b      	ldrb	r3, [r3, #6]
 80027c0:	f103 040b 	add.w	r4, r3, #11
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f86a 	bl	80028a4 <min_tx_space>
 80027d0:	4603      	mov	r3, r0
 80027d2:	429c      	cmp	r4, r3
 80027d4:	d805      	bhi.n	80027e2 <min_poll+0x122>
                    transport_fifo_send(self, oldest_frame);
 80027d6:	6939      	ldr	r1, [r7, #16]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f7ff fb93 	bl	8001f04 <transport_fifo_send>
 80027de:	e000      	b.n	80027e2 <min_poll+0x122>
    if ((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 80027e0:	bf00      	nop
        }
    }

#ifndef DISABLE_TRANSPORT_ACK_RETRANSMIT
    // Periodically transmit the ACK with the rn value, unless the line has gone idle
    if (now - self->transport_fifo.last_sent_ack_time_ms > TRANSPORT_ACK_RETRANSMIT_TIMEOUT_MS) {
 80027e2:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <min_poll+0x148>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2bfa      	cmp	r3, #250	@ 0xfa
 80027f0:	d905      	bls.n	80027fe <min_poll+0x13e>
        if (remote_active) {
 80027f2:	7ebb      	ldrb	r3, [r7, #26]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <min_poll+0x13e>
            send_ack(self);
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f7ff fbb7 	bl	8001f6c <send_ack>
        }
    }
#endif // DISABLE_TRANSPORT_ACK_RETRANSMIT
#endif // TRANSPORT_PROTOCOL
}
 80027fe:	bf00      	nop
 8002800:	3724      	adds	r7, #36	@ 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd90      	pop	{r4, r7, pc}
 8002806:	bf00      	nop
 8002808:	20005bc8 	.word	0x20005bc8

0800280c <min_init_context>:
#ifdef VALIDATE_MAX_PAYLOAD
void min_init_context_validate(struct min_context *self, uint8_t port, void *p_rx_frame_checksum)
#else
void min_init_context(struct min_context *self, uint8_t port)
#endif
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	70fb      	strb	r3, [r7, #3]
    // compiling calling code and this code.
    assert((void *)(self->rx_frame_payload_buf + MAX_PAYLOAD) <= p_rx_frame_checksum);
#endif
#endif
    // Initialize context
    self->rx_header_bytes_seen = 0;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
    self->rx_frame_state = SEARCHING_FOR_SOF;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
    self->port = port;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

#ifdef TRANSPORT_PROTOCOL
    // Counters for diagnosis purposes
    self->transport_fifo.spurious_acks = 0;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    self->transport_fifo.sequence_mismatch_drop = 0;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    self->transport_fifo.dropped_frames = 0;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    self->transport_fifo.resets_received = 0;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    self->transport_fifo.n_ring_buffer_bytes_max = 0;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
    self->transport_fifo.n_frames_max = 0;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
    transport_fifo_reset(self);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff fbd5 	bl	8002010 <transport_fifo_reset>
#endif // TRANSPORT_PROTOCOL
    min_debug_print("MIN init complete\n");
 8002866:	4803      	ldr	r0, [pc, #12]	@ (8002874 <min_init_context+0x68>)
 8002868:	f000 f806 	bl	8002878 <min_debug_print>
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	08009b6c 	.word	0x08009b6c

08002878 <min_debug_print>:
#include "uart_driver.h"

#ifdef MIN_DEBUG_PRINTING
#include "stdio.h"
#include "stdarg.h"
void min_debug_print(const char *msg, ...) {
 8002878:	b40f      	push	{r0, r1, r2, r3}
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, msg);
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	607b      	str	r3, [r7, #4]
    vprintf(msg, args);
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	6938      	ldr	r0, [r7, #16]
 800288a:	f005 ff9b 	bl	80087c4 <viprintf>
    printf("\r");
 800288e:	200d      	movs	r0, #13
 8002890:	f005 ff16 	bl	80086c0 <putchar>
    va_end(args);
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800289e:	b004      	add	sp, #16
 80028a0:	4770      	bx	lr
	...

080028a4 <min_tx_space>:
#endif

static MIN_Context_t *registered_contexts[MAX_MIN_CONTEXTS] = {0};

uint16_t min_tx_space(uint8_t port)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
    return UART_Driver_TXNumFreeSlots(USART6);
 80028ae:	4804      	ldr	r0, [pc, #16]	@ (80028c0 <min_tx_space+0x1c>)
 80028b0:	f7ff f85f 	bl	8001972 <UART_Driver_TXNumFreeSlots>
 80028b4:	4603      	mov	r3, r0
/*
 * Since the implementation uses UART TX in Blocking/IRQ mode, we assume that
 * the buffer always has enough space, so this function returns a constant value.
 */
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40011400 	.word	0x40011400

080028c4 <min_tx_byte>:

void min_tx_byte(uint8_t port, uint8_t byte)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	460a      	mov	r2, r1
 80028ce:	71fb      	strb	r3, [r7, #7]
 80028d0:	4613      	mov	r3, r2
 80028d2:	71bb      	strb	r3, [r7, #6]
    if (port == OBC_EXP_PORT)
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d104      	bne.n	80028e4 <min_tx_byte+0x20>
    {
//    	UART_WriteRing(USART6, byte);
    	UART_Driver_Write(USART6, byte);
 80028da:	79bb      	ldrb	r3, [r7, #6]
 80028dc:	4619      	mov	r1, r3
 80028de:	4803      	ldr	r0, [pc, #12]	@ (80028ec <min_tx_byte+0x28>)
 80028e0:	f7ff f80d 	bl	80018fe <UART_Driver_Write>
#ifdef TEST_DEMO_MIN
        HAL_UART_Transmit(&huart6, &byte, 1, 10);
#endif
    }
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40011400 	.word	0x40011400

080028f0 <min_tx_start>:
 * This function is called before sending data. It can be used to
 * perform actions such as disabling TX interrupts or preparing
 * the hardware for transmission.
 */
void min_tx_start(uint8_t port)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
    (void)port;
    // Example: Disable TX interrupt if needed (not required in this case)
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <min_tx_finished>:
 * This function is called when data transmission is finished.
 * It can be used to restore the previous state if any changes
 * were made in `min_tx_start()`.
 */
void min_tx_finished(uint8_t port)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	71fb      	strb	r3, [r7, #7]
    (void)port;
    // Example: Restore TX interrupt state if modified earlier
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <min_time_ms>:
 * a timestamp for timeout handling and scheduling.
 *
 * @return uint32_t The current system time in milliseconds.
 */
uint32_t min_time_ms(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
    return HAL_GetTick(); // Uses HAL function to get system uptime
 8002920:	f003 f808 	bl	8005934 <HAL_GetTick>
 8002924:	4603      	mov	r3, r0
}
 8002926:	4618      	mov	r0, r3
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <MIN_Context_Init>:

void MIN_Context_Init(MIN_Context_t *ctx, uint8_t port) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]
    min_init_context(&ctx->min_ctx, port);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff64 	bl	800280c <min_init_context>
    min_transport_reset(&ctx->min_ctx, true);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2101      	movs	r1, #1
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fb9b 	bl	8002084 <min_transport_reset>
    ctx->last_poll_time = min_time_ms();
 800294e:	f7ff ffe5 	bl	800291c <min_time_ms>
 8002952:	4602      	mov	r2, r0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    ctx->timeout_triggered = false;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
#ifdef AUTO_REINIT_ON_TIMEOUT
    ctx->auto_reinit = true;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 220d 	strb.w	r2, [r3, #525]	@ 0x20d
#endif
    if (port < MAX_MIN_CONTEXTS) {
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d804      	bhi.n	800297a <MIN_Context_Init+0x4e>
        registered_contexts[port] = ctx;
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	4904      	ldr	r1, [pc, #16]	@ (8002984 <MIN_Context_Init+0x58>)
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20005bcc 	.word	0x20005bcc

08002988 <MIN_ReInit>:

void MIN_ReInit(MIN_Context_t *ctx) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
    min_init_context(&ctx->min_ctx, ctx->min_ctx.port);
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f7ff ff36 	bl	800280c <min_init_context>
    min_transport_reset(&ctx->min_ctx, true);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2101      	movs	r1, #1
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fb6d 	bl	8002084 <min_transport_reset>
    ctx->last_poll_time = min_time_ms();
 80029aa:	f7ff ffb7 	bl	800291c <min_time_ms>
 80029ae:	4602      	mov	r2, r0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    ctx->timeout_triggered = false;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <MIN_RegisterTimeoutCallback>:

void MIN_RegisterTimeoutCallback(MIN_Context_t *ctx, void (*callback)(MIN_Context_t *ctx)) {
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	6039      	str	r1, [r7, #0]
    ctx->timeout_callback = callback;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <MIN_App_Poll>:

void MIN_App_Poll(MIN_Context_t *ctx, const uint8_t *rx_data, uint32_t rx_len) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
    min_poll(&ctx->min_ctx, rx_data, rx_len);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fe62 	bl	80026c0 <min_poll>
    uint32_t now = min_time_ms();
 80029fc:	f7ff ff8e 	bl	800291c <min_time_ms>
 8002a00:	6178      	str	r0, [r7, #20]
    if (ctx->min_ctx.transport_fifo.n_frames > 0) {
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d035      	beq.n	8002a78 <MIN_App_Poll+0x94>
        struct transport_frame *oldest = &ctx->min_ctx.transport_fifo.frames[ctx->min_ctx.transport_fifo.head_idx];
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002a12:	461a      	mov	r2, r3
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4413      	add	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        if ((now - oldest->last_sent_time_ms) > MIN_FRAME_TIMEOUT_MS) {
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d91e      	bls.n	8002a70 <MIN_App_Poll+0x8c>
            if (!ctx->timeout_triggered) {
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 320c 	ldrb.w	r3, [r3, #524]	@ 0x20c
 8002a38:	f083 0301 	eor.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01a      	beq.n	8002a78 <MIN_App_Poll+0x94>
                if (ctx->timeout_callback) {
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <MIN_App_Poll+0x72>
                    ctx->timeout_callback(ctx);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	4798      	blx	r3
                }
                ctx->timeout_triggered = true;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
#ifdef AUTO_REINIT_ON_TIMEOUT
                if (ctx->auto_reinit) {
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 320d 	ldrb.w	r3, [r3, #525]	@ 0x20d
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <MIN_App_Poll+0x94>
                    MIN_ReInit(ctx);
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7ff ff8d 	bl	8002988 <MIN_ReInit>
 8002a6e:	e003      	b.n	8002a78 <MIN_App_Poll+0x94>
                }
#endif
            }
        } else {
            ctx->timeout_triggered = false;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
        }
    }
    ctx->last_poll_time = now;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
}
 8002a80:	bf00      	nop
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <MIN_Send>:
void MIN_Send(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *payload, uint8_t len) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	461a      	mov	r2, r3
 8002a94:	460b      	mov	r3, r1
 8002a96:	72fb      	strb	r3, [r7, #11]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	72bb      	strb	r3, [r7, #10]
    if (min_queue_has_space_for_frame(&ctx->min_ctx, len)) {
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	7aba      	ldrb	r2, [r7, #10]
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fb62 	bl	800216c <min_queue_has_space_for_frame>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <MIN_Send+0x32>
        min_queue_frame(&ctx->min_ctx, min_id, payload, len);
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	7abb      	ldrb	r3, [r7, #10]
 8002ab2:	7af9      	ldrb	r1, [r7, #11]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	f7ff fb09 	bl	80020cc <min_queue_frame>
    }
}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <min_application_handler>:
 *
 * @note This function is responsible for dispatching commands
 *       to the appropriate handlers based on `min_id`.
 */

void min_application_handler(uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload, uint8_t port) {
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b089      	sub	sp, #36	@ 0x24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6039      	str	r1, [r7, #0]
 8002acc:	4611      	mov	r1, r2
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	71fb      	strb	r3, [r7, #7]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	71bb      	strb	r3, [r7, #6]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	717b      	strb	r3, [r7, #5]
    if (port >= MAX_MIN_CONTEXTS) {
 8002adc:	797b      	ldrb	r3, [r7, #5]
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d82e      	bhi.n	8002b40 <min_application_handler+0x7c>
        return;
    }
    MIN_Context_t *ctx = registered_contexts[port];
 8002ae2:	797b      	ldrb	r3, [r7, #5]
 8002ae4:	4a19      	ldr	r2, [pc, #100]	@ (8002b4c <min_application_handler+0x88>)
 8002ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aea:	61bb      	str	r3, [r7, #24]
    if (ctx == NULL) {
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d028      	beq.n	8002b44 <min_application_handler+0x80>
        return;
    }

    const MIN_Command_t *command_table = MIN_GetCommandTable();
 8002af2:	f000 fddd 	bl	80036b0 <MIN_GetCommandTable>
 8002af6:	6178      	str	r0, [r7, #20]
    int table_size = MIN_GetCommandTableSize();
 8002af8:	f000 fde4 	bl	80036c4 <MIN_GetCommandTableSize>
 8002afc:	6138      	str	r0, [r7, #16]
    uint8_t cmd = *min_payload;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < table_size; i++) {
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	e015      	b.n	8002b36 <min_application_handler+0x72>
		if (command_table[i].CMD == cmd) {
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4413      	add	r3, r2
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d10a      	bne.n	8002b30 <min_application_handler+0x6c>
			command_table[i].handler(ctx, min_id, min_payload, len_payload);
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4413      	add	r3, r2
 8002b22:	685c      	ldr	r4, [r3, #4]
 8002b24:	79bb      	ldrb	r3, [r7, #6]
 8002b26:	79f9      	ldrb	r1, [r7, #7]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	69b8      	ldr	r0, [r7, #24]
 8002b2c:	47a0      	blx	r4
			return;
 8002b2e:	e00a      	b.n	8002b46 <min_application_handler+0x82>
	for (int i = 0; i < table_size; i++) {
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	3301      	adds	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	dbe5      	blt.n	8002b0a <min_application_handler+0x46>
 8002b3e:	e002      	b.n	8002b46 <min_application_handler+0x82>
        return;
 8002b40:	bf00      	nop
 8002b42:	e000      	b.n	8002b46 <min_application_handler+0x82>
        return;
 8002b44:	bf00      	nop
		}
	}
    // Optional: Add default handler for unmatched commands
}
 8002b46:	3724      	adds	r7, #36	@ 0x24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd90      	pop	{r4, r7, pc}
 8002b4c:	20005bcc 	.word	0x20005bcc

08002b50 <LL_GPIO_IsOutputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsOutputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	4013      	ands	r3, r2
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	619a      	str	r2, [r3, #24]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	041a      	lsls	r2, r3, #16
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	619a      	str	r2, [r3, #24]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <MIN_Handler_NTC_TEMP_GET_CMD>:

void MIN_Handler_DEV_STATUS_GET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
	return;
}

void MIN_Handler_NTC_TEMP_GET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	@ 0x30
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	72fb      	strb	r3, [r7, #11]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	72bb      	strb	r3, [r7, #10]
//    response[2] = '5';
//    response[3] = '.';
//    response[4] = '3';


	uint8_t option = *(min_payload + 1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	NTC_get_temperature(NTC_Temperature);
 8002bd2:	4859      	ldr	r0, [pc, #356]	@ (8002d38 <MIN_Handler_NTC_TEMP_GET_CMD+0x184>)
 8002bd4:	f7fe ff48 	bl	8001a68 <NTC_get_temperature>
	if (option == 0x0F) {
 8002bd8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002bdc:	2b0f      	cmp	r3, #15
 8002bde:	d13d      	bne.n	8002c5c <MIN_Handler_NTC_TEMP_GET_CMD+0xa8>
	    uint8_t response[17] = {*(min_payload)};
 8002be0:	f107 0318 	add.w	r3, r7, #24
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	741a      	strb	r2, [r3, #16]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	763b      	strb	r3, [r7, #24]
		for (uint8_t i = 0; i < 8; i++) {
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002bfc:	e022      	b.n	8002c44 <MIN_Handler_NTC_TEMP_GET_CMD+0x90>
			response[2*i + 1] = (uint8_t)((NTC_Temperature[i] >> 8) & 0xFF);
 8002bfe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c02:	4a4d      	ldr	r2, [pc, #308]	@ (8002d38 <MIN_Handler_NTC_TEMP_GET_CMD+0x184>)
 8002c04:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002c08:	121b      	asrs	r3, r3, #8
 8002c0a:	b21a      	sxth	r2, r3
 8002c0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	3301      	adds	r3, #1
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	3330      	adds	r3, #48	@ 0x30
 8002c18:	443b      	add	r3, r7
 8002c1a:	f803 2c18 	strb.w	r2, [r3, #-24]
			response[2*i + 2] = (uint8_t)(NTC_Temperature[i] & 0xFF);
 8002c1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c22:	4a45      	ldr	r2, [pc, #276]	@ (8002d38 <MIN_Handler_NTC_TEMP_GET_CMD+0x184>)
 8002c24:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002c28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	3330      	adds	r3, #48	@ 0x30
 8002c34:	443b      	add	r3, r7
 8002c36:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (uint8_t i = 0; i < 8; i++) {
 8002c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c3e:	3301      	adds	r3, #1
 8002c40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002c44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c48:	2b07      	cmp	r3, #7
 8002c4a:	d9d8      	bls.n	8002bfe <MIN_Handler_NTC_TEMP_GET_CMD+0x4a>
		}
	    MIN_Send(ctx, min_id, (const uint8_t *)response, 17);
 8002c4c:	f107 0218 	add.w	r2, r7, #24
 8002c50:	7af9      	ldrb	r1, [r7, #11]
 8002c52:	2311      	movs	r3, #17
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f7ff ff17 	bl	8002a88 <MIN_Send>
 8002c5a:	e06a      	b.n	8002d32 <MIN_Handler_NTC_TEMP_GET_CMD+0x17e>
	    return;
	}
	else if (option == 0x01 || option == 0x02 || option == 0x04 || option == 0x08 ||
 8002c5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d01b      	beq.n	8002c9c <MIN_Handler_NTC_TEMP_GET_CMD+0xe8>
 8002c64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d017      	beq.n	8002c9c <MIN_Handler_NTC_TEMP_GET_CMD+0xe8>
 8002c6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d013      	beq.n	8002c9c <MIN_Handler_NTC_TEMP_GET_CMD+0xe8>
 8002c74:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d00f      	beq.n	8002c9c <MIN_Handler_NTC_TEMP_GET_CMD+0xe8>
 8002c7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c80:	2b10      	cmp	r3, #16
 8002c82:	d00b      	beq.n	8002c9c <MIN_Handler_NTC_TEMP_GET_CMD+0xe8>
			 option == 0x10 || option == 0x20 || option == 0x40 || option == 0x80) {
 8002c84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d007      	beq.n	8002c9c <MIN_Handler_NTC_TEMP_GET_CMD+0xe8>
 8002c8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c90:	2b40      	cmp	r3, #64	@ 0x40
 8002c92:	d003      	beq.n	8002c9c <MIN_Handler_NTC_TEMP_GET_CMD+0xe8>
 8002c94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c98:	2b80      	cmp	r3, #128	@ 0x80
 8002c9a:	d13e      	bne.n	8002d1a <MIN_Handler_NTC_TEMP_GET_CMD+0x166>
		uint8_t ntc_temp_H = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		uint8_t ntc_temp_L = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		for (uint8_t i = 0; i < 8; i++) {
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8002cae:	e01f      	b.n	8002cf0 <MIN_Handler_NTC_TEMP_GET_CMD+0x13c>
			if ((option >> i) & 0x01) {
 8002cb0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002cb4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002cb8:	fa42 f303 	asr.w	r3, r2, r3
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <MIN_Handler_NTC_TEMP_GET_CMD+0x132>
				ntc_temp_H = (uint8_t)((NTC_Temperature[i] >> 8) & 0xFF);
 8002cc4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8002d38 <MIN_Handler_NTC_TEMP_GET_CMD+0x184>)
 8002cca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002cce:	121b      	asrs	r3, r3, #8
 8002cd0:	b21b      	sxth	r3, r3
 8002cd2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				ntc_temp_L = (uint8_t)(NTC_Temperature[i] & 0xFF);
 8002cd6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002cda:	4a17      	ldr	r2, [pc, #92]	@ (8002d38 <MIN_Handler_NTC_TEMP_GET_CMD+0x184>)
 8002cdc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ce0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
				break;
 8002ce4:	e008      	b.n	8002cf8 <MIN_Handler_NTC_TEMP_GET_CMD+0x144>
		for (uint8_t i = 0; i < 8; i++) {
 8002ce6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002cea:	3301      	adds	r3, #1
 8002cec:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8002cf0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002cf4:	2b07      	cmp	r3, #7
 8002cf6:	d9db      	bls.n	8002cb0 <MIN_Handler_NTC_TEMP_GET_CMD+0xfc>
			}
		}
		uint8_t response[3] = {*(min_payload), ntc_temp_H, ntc_temp_L};
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	753b      	strb	r3, [r7, #20]
 8002cfe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002d02:	757b      	strb	r3, [r7, #21]
 8002d04:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002d08:	75bb      	strb	r3, [r7, #22]
		MIN_Send(ctx, min_id, (const uint8_t *)response, 3);
 8002d0a:	f107 0214 	add.w	r2, r7, #20
 8002d0e:	7af9      	ldrb	r1, [r7, #11]
 8002d10:	2303      	movs	r3, #3
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f7ff feb8 	bl	8002a88 <MIN_Send>
 8002d18:	e00b      	b.n	8002d32 <MIN_Handler_NTC_TEMP_GET_CMD+0x17e>
		return;
	}
	else {
		uint8_t response[2] = {*(min_payload), MIN_NAK};
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	743b      	strb	r3, [r7, #16]
 8002d20:	2315      	movs	r3, #21
 8002d22:	747b      	strb	r3, [r7, #17]
		MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 8002d24:	f107 0210 	add.w	r2, r7, #16
 8002d28:	7af9      	ldrb	r1, [r7, #11]
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f7ff feab 	bl	8002a88 <MIN_Send>
		return;
	}
}
 8002d32:	3730      	adds	r7, #48	@ 0x30
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	200057b4 	.word	0x200057b4

08002d3c <MIN_Handler_PWR_5V_SET_CMD>:

void MIN_Handler_PWR_5V_SET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	461a      	mov	r2, r3
 8002d48:	460b      	mov	r3, r1
 8002d4a:	72fb      	strb	r3, [r7, #11]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	72bb      	strb	r3, [r7, #10]
	if (*(min_payload + 1))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3301      	adds	r3, #1
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d004      	beq.n	8002d64 <MIN_Handler_PWR_5V_SET_CMD+0x28>
		LL_GPIO_SetOutputPin(EF_5_EN_GPIO_Port, EF_5_EN_Pin);
 8002d5a:	2110      	movs	r1, #16
 8002d5c:	480b      	ldr	r0, [pc, #44]	@ (8002d8c <MIN_Handler_PWR_5V_SET_CMD+0x50>)
 8002d5e:	f7ff ff0c 	bl	8002b7a <LL_GPIO_SetOutputPin>
 8002d62:	e003      	b.n	8002d6c <MIN_Handler_PWR_5V_SET_CMD+0x30>
	else
		LL_GPIO_ResetOutputPin(EF_5_EN_GPIO_Port, EF_5_EN_Pin);
 8002d64:	2110      	movs	r1, #16
 8002d66:	4809      	ldr	r0, [pc, #36]	@ (8002d8c <MIN_Handler_PWR_5V_SET_CMD+0x50>)
 8002d68:	f7ff ff15 	bl	8002b96 <LL_GPIO_ResetOutputPin>

	uint8_t response[2]= {*(min_payload), MIN_ACK};
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	753b      	strb	r3, [r7, #20]
 8002d72:	2306      	movs	r3, #6
 8002d74:	757b      	strb	r3, [r7, #21]
    MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 8002d76:	f107 0214 	add.w	r2, r7, #20
 8002d7a:	7af9      	ldrb	r1, [r7, #11]
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f7ff fe82 	bl	8002a88 <MIN_Send>
}
 8002d84:	bf00      	nop
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40020c00 	.word	0x40020c00

08002d90 <MIN_Handler_PWR_5V_GET_CMD>:

void MIN_Handler_PWR_5V_GET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	72fb      	strb	r3, [r7, #11]
 8002da0:	4613      	mov	r3, r2
 8002da2:	72bb      	strb	r3, [r7, #10]
    uint8_t pwr_status = LL_GPIO_IsOutputPinSet(EF_5_EN_GPIO_Port, EF_5_EN_Pin) & 0x01;
 8002da4:	2110      	movs	r1, #16
 8002da6:	480c      	ldr	r0, [pc, #48]	@ (8002dd8 <MIN_Handler_PWR_5V_GET_CMD+0x48>)
 8002da8:	f7ff fed2 	bl	8002b50 <LL_GPIO_IsOutputPinSet>
 8002dac:	4603      	mov	r3, r0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	75fb      	strb	r3, [r7, #23]
    uint8_t response[2] = {*(min_payload), pwr_status};
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	753b      	strb	r3, [r7, #20]
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	757b      	strb	r3, [r7, #21]
    MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 8002dc0:	f107 0214 	add.w	r2, r7, #20
 8002dc4:	7af9      	ldrb	r1, [r7, #11]
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f7ff fe5d 	bl	8002a88 <MIN_Send>
}
 8002dce:	bf00      	nop
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40020c00 	.word	0x40020c00

08002ddc <MIN_Handler_TEC_INIT_CMD>:

void MIN_Handler_TEC_INIT_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	461a      	mov	r2, r3
 8002de8:	460b      	mov	r3, r1
 8002dea:	72fb      	strb	r3, [r7, #11]
 8002dec:	4613      	mov	r3, r2
 8002dee:	72bb      	strb	r3, [r7, #10]
	uint8_t response[2] = {*(min_payload), MIN_ACK};
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	753b      	strb	r3, [r7, #20]
 8002df6:	2306      	movs	r3, #6
 8002df8:	757b      	strb	r3, [r7, #21]
	uint8_t option = *(min_payload + 1);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	75fb      	strb	r3, [r7, #23]
	if (option == 0x0F || option == 0x01 || option == 0x02 || option == 0x04 || option == 0x08)
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
 8002e04:	2b0f      	cmp	r3, #15
 8002e06:	d00b      	beq.n	8002e20 <MIN_Handler_TEC_INIT_CMD+0x44>
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d008      	beq.n	8002e20 <MIN_Handler_TEC_INIT_CMD+0x44>
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d005      	beq.n	8002e20 <MIN_Handler_TEC_INIT_CMD+0x44>
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d002      	beq.n	8002e20 <MIN_Handler_TEC_INIT_CMD+0x44>
 8002e1a:	7dfb      	ldrb	r3, [r7, #23]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d10d      	bne.n	8002e3c <MIN_Handler_TEC_INIT_CMD+0x60>
		LT8722_Status = (LT8722_Status & 0xF0) | option;
 8002e20:	4b0d      	ldr	r3, [pc, #52]	@ (8002e58 <MIN_Handler_TEC_INIT_CMD+0x7c>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	b25b      	sxtb	r3, r3
 8002e26:	f023 030f 	bic.w	r3, r3, #15
 8002e2a:	b25a      	sxtb	r2, r3
 8002e2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	b25b      	sxtb	r3, r3
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4b08      	ldr	r3, [pc, #32]	@ (8002e58 <MIN_Handler_TEC_INIT_CMD+0x7c>)
 8002e38:	701a      	strb	r2, [r3, #0]
 8002e3a:	e001      	b.n	8002e40 <MIN_Handler_TEC_INIT_CMD+0x64>
	else
		response[1] = MIN_NAK;
 8002e3c:	2315      	movs	r3, #21
 8002e3e:	757b      	strb	r3, [r7, #21]
    MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 8002e40:	f107 0214 	add.w	r2, r7, #20
 8002e44:	7af9      	ldrb	r1, [r7, #11]
 8002e46:	2302      	movs	r3, #2
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7ff fe1d 	bl	8002a88 <MIN_Send>
}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	200057a1 	.word	0x200057a1

08002e5c <MIN_Handler_TEC_STATUS_GET_CMD>:

void MIN_Handler_TEC_STATUS_GET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	461a      	mov	r2, r3
 8002e68:	460b      	mov	r3, r1
 8002e6a:	72fb      	strb	r3, [r7, #11]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	72bb      	strb	r3, [r7, #10]
    uint8_t status = (LT8722_Status >> 4) & 0x0F;
 8002e70:	4b09      	ldr	r3, [pc, #36]	@ (8002e98 <MIN_Handler_TEC_STATUS_GET_CMD+0x3c>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	75fb      	strb	r3, [r7, #23]
    uint8_t response[2] = {*(min_payload), status};
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	753b      	strb	r3, [r7, #20]
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
 8002e80:	757b      	strb	r3, [r7, #21]
    MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 8002e82:	f107 0214 	add.w	r2, r7, #20
 8002e86:	7af9      	ldrb	r1, [r7, #11]
 8002e88:	2302      	movs	r3, #2
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7ff fdfc 	bl	8002a88 <MIN_Send>
}
 8002e90:	bf00      	nop
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	200057a1 	.word	0x200057a1

08002e9c <MIN_Handler_TEC_VOLT_SET_CMD>:

void MIN_Handler_TEC_VOLT_SET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	72fb      	strb	r3, [r7, #11]
 8002eac:	4613      	mov	r3, r2
 8002eae:	72bb      	strb	r3, [r7, #10]
	uint8_t response[2] = {*(min_payload), MIN_ACK};
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	773b      	strb	r3, [r7, #28]
 8002eb6:	2306      	movs	r3, #6
 8002eb8:	777b      	strb	r3, [r7, #29]
	uint16_t volt[4];
	volt[0] = ((uint16_t)*(min_payload + 1) << 8) | (*(min_payload + 2));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	b21b      	sxth	r3, r3
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	b21a      	sxth	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3302      	adds	r3, #2
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b21b      	sxth	r3, r3
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	b21b      	sxth	r3, r3
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	82bb      	strh	r3, [r7, #20]
	volt[1] = ((uint16_t)*(min_payload + 3) << 8) | (*(min_payload + 4));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3303      	adds	r3, #3
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	b21b      	sxth	r3, r3
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	b21a      	sxth	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	b21b      	sxth	r3, r3
 8002eea:	4313      	orrs	r3, r2
 8002eec:	b21b      	sxth	r3, r3
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	82fb      	strh	r3, [r7, #22]
	volt[2] = ((uint16_t)*(min_payload + 5) << 8) | (*(min_payload + 6));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3305      	adds	r3, #5
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b21b      	sxth	r3, r3
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	b21a      	sxth	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3306      	adds	r3, #6
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b21b      	sxth	r3, r3
 8002f06:	4313      	orrs	r3, r2
 8002f08:	b21b      	sxth	r3, r3
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	833b      	strh	r3, [r7, #24]
	volt[3] = ((uint16_t)*(min_payload + 7) << 8) | (*(min_payload + 8));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3307      	adds	r3, #7
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	b21b      	sxth	r3, r3
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	b21a      	sxth	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	b21b      	sxth	r3, r3
 8002f22:	4313      	orrs	r3, r2
 8002f24:	b21b      	sxth	r3, r3
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	837b      	strh	r3, [r7, #26]
	for (uint8_t i = 0; i < 4; i++) {
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	77fb      	strb	r3, [r7, #31]
 8002f2e:	e00d      	b.n	8002f4c <MIN_Handler_TEC_VOLT_SET_CMD+0xb0>
		temperature_set_tec_vol(i, volt[i]);
 8002f30:	7ffb      	ldrb	r3, [r7, #31]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	3320      	adds	r3, #32
 8002f36:	443b      	add	r3, r7
 8002f38:	f833 2c0c 	ldrh.w	r2, [r3, #-12]
 8002f3c:	7ffb      	ldrb	r3, [r7, #31]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f002 fad9 	bl	80054f8 <temperature_set_tec_vol>
	for (uint8_t i = 0; i < 4; i++) {
 8002f46:	7ffb      	ldrb	r3, [r7, #31]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	7ffb      	ldrb	r3, [r7, #31]
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d9ee      	bls.n	8002f30 <MIN_Handler_TEC_VOLT_SET_CMD+0x94>
	}
    MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 8002f52:	f107 021c 	add.w	r2, r7, #28
 8002f56:	7af9      	ldrb	r1, [r7, #11]
 8002f58:	2302      	movs	r3, #2
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f7ff fd94 	bl	8002a88 <MIN_Send>
}
 8002f60:	bf00      	nop
 8002f62:	3720      	adds	r7, #32
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <MIN_Handler_TEC_VOLT_GET_CMD>:

void MIN_Handler_TEC_VOLT_GET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08c      	sub	sp, #48	@ 0x30
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	461a      	mov	r2, r3
 8002f74:	460b      	mov	r3, r1
 8002f76:	72fb      	strb	r3, [r7, #11]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	72bb      	strb	r3, [r7, #10]
	uint8_t option = *(min_payload + 1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	if (option == 0x0F) {
 8002f86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	d13f      	bne.n	800300e <MIN_Handler_TEC_VOLT_GET_CMD+0xa6>
	    uint16_t volt_0 = temperature_get_tec_vol_set(0);
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f002 fb16 	bl	80055c0 <temperature_get_tec_vol_set>
 8002f94:	4603      	mov	r3, r0
 8002f96:	857b      	strh	r3, [r7, #42]	@ 0x2a
	    uint16_t volt_1 = temperature_get_tec_vol_set(1);
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f002 fb11 	bl	80055c0 <temperature_get_tec_vol_set>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	853b      	strh	r3, [r7, #40]	@ 0x28
	    uint16_t volt_2 = temperature_get_tec_vol_set(2);
 8002fa2:	2002      	movs	r0, #2
 8002fa4:	f002 fb0c 	bl	80055c0 <temperature_get_tec_vol_set>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    uint16_t volt_3 = temperature_get_tec_vol_set(3);
 8002fac:	2003      	movs	r0, #3
 8002fae:	f002 fb07 	bl	80055c0 <temperature_get_tec_vol_set>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	84bb      	strh	r3, [r7, #36]	@ 0x24
	    uint8_t response[9] = {*(min_payload), (volt_0 >> 8) & 0xFF, volt_0 & 0xFF, (volt_1 >> 8) & 0xFF, volt_1 & 0xFF, (volt_2 >> 8) & 0xFF, volt_2 & 0xFF, (volt_3 >> 8) & 0xFF, volt_3 & 0xFF};
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	763b      	strb	r3, [r7, #24]
 8002fbc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	767b      	strb	r3, [r7, #25]
 8002fc6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	76bb      	strb	r3, [r7, #26]
 8002fcc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	76fb      	strb	r3, [r7, #27]
 8002fd6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	773b      	strb	r3, [r7, #28]
 8002fdc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002fde:	0a1b      	lsrs	r3, r3, #8
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	777b      	strb	r3, [r7, #29]
 8002fe6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	77bb      	strb	r3, [r7, #30]
 8002fec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	77fb      	strb	r3, [r7, #31]
 8002ff6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f887 3020 	strb.w	r3, [r7, #32]
	    MIN_Send(ctx, min_id, (const uint8_t *)response, 9);
 8002ffe:	f107 0218 	add.w	r2, r7, #24
 8003002:	7af9      	ldrb	r1, [r7, #11]
 8003004:	2309      	movs	r3, #9
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f7ff fd3e 	bl	8002a88 <MIN_Send>
 800300c:	e04f      	b.n	80030ae <MIN_Handler_TEC_VOLT_GET_CMD+0x146>
	}
	else if (option == 0x01 || option == 0x02 || option == 0x04 || option == 0x08) {
 800300e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003012:	2b01      	cmp	r3, #1
 8003014:	d00b      	beq.n	800302e <MIN_Handler_TEC_VOLT_GET_CMD+0xc6>
 8003016:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800301a:	2b02      	cmp	r3, #2
 800301c:	d007      	beq.n	800302e <MIN_Handler_TEC_VOLT_GET_CMD+0xc6>
 800301e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003022:	2b04      	cmp	r3, #4
 8003024:	d003      	beq.n	800302e <MIN_Handler_TEC_VOLT_GET_CMD+0xc6>
 8003026:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800302a:	2b08      	cmp	r3, #8
 800302c:	d133      	bne.n	8003096 <MIN_Handler_TEC_VOLT_GET_CMD+0x12e>
		uint16_t volt = 0;
 800302e:	2300      	movs	r3, #0
 8003030:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		for (uint8_t i = 0; i < 4; i++) {
 8003032:	2300      	movs	r3, #0
 8003034:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8003038:	e016      	b.n	8003068 <MIN_Handler_TEC_VOLT_GET_CMD+0x100>
			if ((option >> i) & 0x01) {
 800303a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800303e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003042:	fa42 f303 	asr.w	r3, r2, r3
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <MIN_Handler_TEC_VOLT_GET_CMD+0xf6>
				volt = temperature_get_tec_vol_set(i);
 800304e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003052:	4618      	mov	r0, r3
 8003054:	f002 fab4 	bl	80055c0 <temperature_get_tec_vol_set>
 8003058:	4603      	mov	r3, r0
 800305a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
				break;
 800305c:	e008      	b.n	8003070 <MIN_Handler_TEC_VOLT_GET_CMD+0x108>
		for (uint8_t i = 0; i < 4; i++) {
 800305e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003062:	3301      	adds	r3, #1
 8003064:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8003068:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800306c:	2b03      	cmp	r3, #3
 800306e:	d9e4      	bls.n	800303a <MIN_Handler_TEC_VOLT_GET_CMD+0xd2>
			}
		}
		uint8_t response[3] = {*(min_payload), (volt >> 8) & 0xFF, volt & 0xFF};
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	753b      	strb	r3, [r7, #20]
 8003076:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003078:	0a1b      	lsrs	r3, r3, #8
 800307a:	b29b      	uxth	r3, r3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	757b      	strb	r3, [r7, #21]
 8003080:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003082:	b2db      	uxtb	r3, r3
 8003084:	75bb      	strb	r3, [r7, #22]
		MIN_Send(ctx, min_id, (const uint8_t *)response, 3);
 8003086:	f107 0214 	add.w	r2, r7, #20
 800308a:	7af9      	ldrb	r1, [r7, #11]
 800308c:	2303      	movs	r3, #3
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f7ff fcfa 	bl	8002a88 <MIN_Send>
	else if (option == 0x01 || option == 0x02 || option == 0x04 || option == 0x08) {
 8003094:	e00b      	b.n	80030ae <MIN_Handler_TEC_VOLT_GET_CMD+0x146>
	}
	else {
		uint8_t response[2] = {*(min_payload), MIN_NAK};
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	743b      	strb	r3, [r7, #16]
 800309c:	2315      	movs	r3, #21
 800309e:	747b      	strb	r3, [r7, #17]
		MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 80030a0:	f107 0210 	add.w	r2, r7, #16
 80030a4:	7af9      	ldrb	r1, [r7, #11]
 80030a6:	2302      	movs	r3, #2
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f7ff fced 	bl	8002a88 <MIN_Send>
		return;
	}
}
 80030ae:	3730      	adds	r7, #48	@ 0x30
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <MIN_Handler_TEC_DIR_SET_CMD>:

void MIN_Handler_TEC_DIR_SET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	461a      	mov	r2, r3
 80030c0:	460b      	mov	r3, r1
 80030c2:	72fb      	strb	r3, [r7, #11]
 80030c4:	4613      	mov	r3, r2
 80030c6:	72bb      	strb	r3, [r7, #10]
	uint8_t dir = (uint8_t)*(min_payload + 1);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3301      	adds	r3, #1
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	75fb      	strb	r3, [r7, #23]
	temperature_set_tec_dir((tec_dir_t)(dir & 0x01), (tec_dir_t)((dir >> 1) & 0x01), (tec_dir_t)((dir >> 2) & 0x01), (tec_dir_t)((dir >> 3) & 0x01));
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	b2d8      	uxtb	r0, r3
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	b2d9      	uxtb	r1, r3
 80030e4:	7dfb      	ldrb	r3, [r7, #23]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	08db      	lsrs	r3, r3, #3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f002 fac2 	bl	8005684 <temperature_set_tec_dir>
	uint8_t response[2] = {*(min_payload), MIN_ACK};
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	753b      	strb	r3, [r7, #20]
 8003106:	2306      	movs	r3, #6
 8003108:	757b      	strb	r3, [r7, #21]
    MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 800310a:	f107 0214 	add.w	r2, r7, #20
 800310e:	7af9      	ldrb	r1, [r7, #11]
 8003110:	2302      	movs	r3, #2
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f7ff fcb8 	bl	8002a88 <MIN_Send>
}
 8003118:	bf00      	nop
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <MIN_Handler_TEC_DIR_GET_CMD>:

void MIN_Handler_TEC_DIR_GET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	607a      	str	r2, [r7, #4]
 800312a:	461a      	mov	r2, r3
 800312c:	460b      	mov	r3, r1
 800312e:	72fb      	strb	r3, [r7, #11]
 8003130:	4613      	mov	r3, r2
 8003132:	72bb      	strb	r3, [r7, #10]
    uint8_t tec_dir = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	75fb      	strb	r3, [r7, #23]
    temperature_get_tec_dir(&tec_dir);
 8003138:	f107 0317 	add.w	r3, r7, #23
 800313c:	4618      	mov	r0, r3
 800313e:	f002 fad3 	bl	80056e8 <temperature_get_tec_dir>
    uint8_t response[2] = {*(min_payload), tec_dir};
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	753b      	strb	r3, [r7, #20]
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	757b      	strb	r3, [r7, #21]
    MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 800314c:	f107 0214 	add.w	r2, r7, #20
 8003150:	7af9      	ldrb	r1, [r7, #11]
 8003152:	2302      	movs	r3, #2
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f7ff fc97 	bl	8002a88 <MIN_Send>
}
 800315a:	bf00      	nop
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <MIN_Handler_HTR_DUTY_SET_CMD>:

void MIN_Handler_HTR_DUTY_SET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 8003162:	b580      	push	{r7, lr}
 8003164:	b088      	sub	sp, #32
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	461a      	mov	r2, r3
 800316e:	460b      	mov	r3, r1
 8003170:	72fb      	strb	r3, [r7, #11]
 8003172:	4613      	mov	r3, r2
 8003174:	72bb      	strb	r3, [r7, #10]
	uint8_t duty[4];
	duty[0] = (uint8_t)*(min_payload + 1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3301      	adds	r3, #1
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	763b      	strb	r3, [r7, #24]
	duty[1] = (uint8_t)*(min_payload + 2);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3302      	adds	r3, #2
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	767b      	strb	r3, [r7, #25]
	duty[2] = (uint8_t)*(min_payload + 3);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3303      	adds	r3, #3
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	76bb      	strb	r3, [r7, #26]
	duty[3] = (uint8_t)*(min_payload + 4);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3304      	adds	r3, #4
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	76fb      	strb	r3, [r7, #27]
	for (uint8_t i = 0; i < 4; i++) {
 8003196:	2300      	movs	r3, #0
 8003198:	77fb      	strb	r3, [r7, #31]
 800319a:	e00c      	b.n	80031b6 <MIN_Handler_HTR_DUTY_SET_CMD+0x54>
		temperature_set_heater_duty(i, duty[i]);
 800319c:	7ffb      	ldrb	r3, [r7, #31]
 800319e:	3320      	adds	r3, #32
 80031a0:	443b      	add	r3, r7
 80031a2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80031a6:	7ffb      	ldrb	r3, [r7, #31]
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f002 fa24 	bl	80055f8 <temperature_set_heater_duty>
	for (uint8_t i = 0; i < 4; i++) {
 80031b0:	7ffb      	ldrb	r3, [r7, #31]
 80031b2:	3301      	adds	r3, #1
 80031b4:	77fb      	strb	r3, [r7, #31]
 80031b6:	7ffb      	ldrb	r3, [r7, #31]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d9ef      	bls.n	800319c <MIN_Handler_HTR_DUTY_SET_CMD+0x3a>
	}

	uint8_t response[2] = {*(min_payload), MIN_ACK};
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	753b      	strb	r3, [r7, #20]
 80031c2:	2306      	movs	r3, #6
 80031c4:	757b      	strb	r3, [r7, #21]
    MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 80031c6:	f107 0214 	add.w	r2, r7, #20
 80031ca:	7af9      	ldrb	r1, [r7, #11]
 80031cc:	2302      	movs	r3, #2
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f7ff fc5a 	bl	8002a88 <MIN_Send>
}
 80031d4:	bf00      	nop
 80031d6:	3720      	adds	r7, #32
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <MIN_Handler_HTR_DUTY_GET_CMD>:

void MIN_Handler_HTR_DUTY_GET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	@ 0x28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	461a      	mov	r2, r3
 80031e8:	460b      	mov	r3, r1
 80031ea:	72fb      	strb	r3, [r7, #11]
 80031ec:	4613      	mov	r3, r2
 80031ee:	72bb      	strb	r3, [r7, #10]
	uint8_t option = *(min_payload + 1);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3301      	adds	r3, #1
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	if (option == 0x0F) {
 80031fa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80031fe:	2b0f      	cmp	r3, #15
 8003200:	d12f      	bne.n	8003262 <MIN_Handler_HTR_DUTY_GET_CMD+0x86>
		uint8_t duty_0 = temperature_get_heater_duty(0);
 8003202:	2000      	movs	r0, #0
 8003204:	f002 fa20 	bl	8005648 <temperature_get_heater_duty>
 8003208:	4603      	mov	r3, r0
 800320a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		uint8_t duty_1 = temperature_get_heater_duty(1);
 800320e:	2001      	movs	r0, #1
 8003210:	f002 fa1a 	bl	8005648 <temperature_get_heater_duty>
 8003214:	4603      	mov	r3, r0
 8003216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		uint8_t duty_2 = temperature_get_heater_duty(2);
 800321a:	2002      	movs	r0, #2
 800321c:	f002 fa14 	bl	8005648 <temperature_get_heater_duty>
 8003220:	4603      	mov	r3, r0
 8003222:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		uint8_t duty_3 = temperature_get_heater_duty(3);
 8003226:	2003      	movs	r0, #3
 8003228:	f002 fa0e 	bl	8005648 <temperature_get_heater_duty>
 800322c:	4603      	mov	r3, r0
 800322e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	    uint8_t response[5] = {*(min_payload), duty_0, duty_1, duty_2, duty_3};
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	773b      	strb	r3, [r7, #28]
 8003238:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800323c:	777b      	strb	r3, [r7, #29]
 800323e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003242:	77bb      	strb	r3, [r7, #30]
 8003244:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003248:	77fb      	strb	r3, [r7, #31]
 800324a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800324e:	f887 3020 	strb.w	r3, [r7, #32]
	    MIN_Send(ctx, min_id, (const uint8_t *)response, 5);
 8003252:	f107 021c 	add.w	r2, r7, #28
 8003256:	7af9      	ldrb	r1, [r7, #11]
 8003258:	2305      	movs	r3, #5
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f7ff fc14 	bl	8002a88 <MIN_Send>
 8003260:	e04c      	b.n	80032fc <MIN_Handler_HTR_DUTY_GET_CMD+0x120>
	}
	else if (option == 0x01 || option == 0x02 || option == 0x04 || option == 0x08) {
 8003262:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003266:	2b01      	cmp	r3, #1
 8003268:	d00b      	beq.n	8003282 <MIN_Handler_HTR_DUTY_GET_CMD+0xa6>
 800326a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800326e:	2b02      	cmp	r3, #2
 8003270:	d007      	beq.n	8003282 <MIN_Handler_HTR_DUTY_GET_CMD+0xa6>
 8003272:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003276:	2b04      	cmp	r3, #4
 8003278:	d003      	beq.n	8003282 <MIN_Handler_HTR_DUTY_GET_CMD+0xa6>
 800327a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800327e:	2b08      	cmp	r3, #8
 8003280:	d130      	bne.n	80032e4 <MIN_Handler_HTR_DUTY_GET_CMD+0x108>
		uint8_t duty = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		for (uint8_t i = 0; i < 4; i++) {
 8003288:	2300      	movs	r3, #0
 800328a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800328e:	e017      	b.n	80032c0 <MIN_Handler_HTR_DUTY_GET_CMD+0xe4>
			if ((option >> i) & 0x01) {
 8003290:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8003294:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003298:	fa42 f303 	asr.w	r3, r2, r3
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <MIN_Handler_HTR_DUTY_GET_CMD+0xda>
				duty = temperature_get_heater_duty(i);
 80032a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 f9cd 	bl	8005648 <temperature_get_heater_duty>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 80032b4:	e008      	b.n	80032c8 <MIN_Handler_HTR_DUTY_GET_CMD+0xec>
		for (uint8_t i = 0; i < 4; i++) {
 80032b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80032ba:	3301      	adds	r3, #1
 80032bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80032c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d9e3      	bls.n	8003290 <MIN_Handler_HTR_DUTY_GET_CMD+0xb4>
			}
		}
		uint8_t response[2] = {*(min_payload), duty};
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	763b      	strb	r3, [r7, #24]
 80032ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032d2:	767b      	strb	r3, [r7, #25]
		MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 80032d4:	f107 0218 	add.w	r2, r7, #24
 80032d8:	7af9      	ldrb	r1, [r7, #11]
 80032da:	2302      	movs	r3, #2
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f7ff fbd3 	bl	8002a88 <MIN_Send>
	else if (option == 0x01 || option == 0x02 || option == 0x04 || option == 0x08) {
 80032e2:	e00b      	b.n	80032fc <MIN_Handler_HTR_DUTY_GET_CMD+0x120>
	}
	else {
		uint8_t response[2] = {*(min_payload), MIN_NAK};
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	753b      	strb	r3, [r7, #20]
 80032ea:	2315      	movs	r3, #21
 80032ec:	757b      	strb	r3, [r7, #21]
		MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 80032ee:	f107 0214 	add.w	r2, r7, #20
 80032f2:	7af9      	ldrb	r1, [r7, #11]
 80032f4:	2302      	movs	r3, #2
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f7ff fbc6 	bl	8002a88 <MIN_Send>
		return;
	}
}
 80032fc:	3728      	adds	r7, #40	@ 0x28
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <MIN_Handler_REF_TEMP_SET_CMD>:

void MIN_Handler_REF_TEMP_SET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 8003302:	b580      	push	{r7, lr}
 8003304:	b086      	sub	sp, #24
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	461a      	mov	r2, r3
 800330e:	460b      	mov	r3, r1
 8003310:	72fb      	strb	r3, [r7, #11]
 8003312:	4613      	mov	r3, r2
 8003314:	72bb      	strb	r3, [r7, #10]
	uint16_t temp_setpoint = ((uint16_t)*(min_payload + 1) << 8) | (*(min_payload + 2));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3301      	adds	r3, #1
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b21b      	sxth	r3, r3
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	b21a      	sxth	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3302      	adds	r3, #2
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	b21b      	sxth	r3, r3
 800332a:	4313      	orrs	r3, r2
 800332c:	b21b      	sxth	r3, r3
 800332e:	82fb      	strh	r3, [r7, #22]
	temperature_set_setpoint(temp_setpoint);
 8003330:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003334:	4618      	mov	r0, r3
 8003336:	f002 f8c3 	bl	80054c0 <temperature_set_setpoint>
	uint8_t response[2] = {*(min_payload), MIN_ACK};
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	753b      	strb	r3, [r7, #20]
 8003340:	2306      	movs	r3, #6
 8003342:	757b      	strb	r3, [r7, #21]
    MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 8003344:	f107 0214 	add.w	r2, r7, #20
 8003348:	7af9      	ldrb	r1, [r7, #11]
 800334a:	2302      	movs	r3, #2
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f7ff fb9b 	bl	8002a88 <MIN_Send>
}
 8003352:	bf00      	nop
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <MIN_Handler_REF_TEMP_GET_CMD>:

void MIN_Handler_REF_TEMP_GET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	461a      	mov	r2, r3
 8003366:	460b      	mov	r3, r1
 8003368:	72fb      	strb	r3, [r7, #11]
 800336a:	4613      	mov	r3, r2
 800336c:	72bb      	strb	r3, [r7, #10]
	uint16_t temp_setpoint = temperature_get_setpoint();
 800336e:	f002 f8b7 	bl	80054e0 <temperature_get_setpoint>
 8003372:	4603      	mov	r3, r0
 8003374:	82fb      	strh	r3, [r7, #22]
	uint8_t response[3] = {*(min_payload), (uint8_t)((temp_setpoint >> 8) & 0xFF), (uint8_t)(temp_setpoint & 0xFF)};
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	743b      	strb	r3, [r7, #16]
 800337c:	8afb      	ldrh	r3, [r7, #22]
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	b29b      	uxth	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	747b      	strb	r3, [r7, #17]
 8003386:	8afb      	ldrh	r3, [r7, #22]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	74bb      	strb	r3, [r7, #18]
    MIN_Send(ctx, min_id, (const uint8_t *)response, 3);
 800338c:	f107 0210 	add.w	r2, r7, #16
 8003390:	7af9      	ldrb	r1, [r7, #11]
 8003392:	2303      	movs	r3, #3
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f7ff fb77 	bl	8002a88 <MIN_Send>
}
 800339a:	bf00      	nop
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <MIN_Handler_REF_NTC_SET_CMD>:

void MIN_Handler_REF_NTC_SET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b088      	sub	sp, #32
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	461a      	mov	r2, r3
 80033ae:	460b      	mov	r3, r1
 80033b0:	72fb      	strb	r3, [r7, #11]
 80033b2:	4613      	mov	r3, r2
 80033b4:	72bb      	strb	r3, [r7, #10]
	uint8_t tempo = *(min_payload + 1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3301      	adds	r3, #1
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	777b      	strb	r3, [r7, #29]
	uint8_t ntc_ref = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	77fb      	strb	r3, [r7, #31]
	if (tempo == 0x01 || tempo == 0x02 || tempo == 0x04 || tempo == 0x08 ||
 80033c2:	7f7b      	ldrb	r3, [r7, #29]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d014      	beq.n	80033f2 <MIN_Handler_REF_NTC_SET_CMD+0x50>
 80033c8:	7f7b      	ldrb	r3, [r7, #29]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d011      	beq.n	80033f2 <MIN_Handler_REF_NTC_SET_CMD+0x50>
 80033ce:	7f7b      	ldrb	r3, [r7, #29]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d00e      	beq.n	80033f2 <MIN_Handler_REF_NTC_SET_CMD+0x50>
 80033d4:	7f7b      	ldrb	r3, [r7, #29]
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d00b      	beq.n	80033f2 <MIN_Handler_REF_NTC_SET_CMD+0x50>
 80033da:	7f7b      	ldrb	r3, [r7, #29]
 80033dc:	2b10      	cmp	r3, #16
 80033de:	d008      	beq.n	80033f2 <MIN_Handler_REF_NTC_SET_CMD+0x50>
		tempo == 0x10 || tempo == 0x20 || tempo == 0x40 || tempo == 0x80) {
 80033e0:	7f7b      	ldrb	r3, [r7, #29]
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d005      	beq.n	80033f2 <MIN_Handler_REF_NTC_SET_CMD+0x50>
 80033e6:	7f7b      	ldrb	r3, [r7, #29]
 80033e8:	2b40      	cmp	r3, #64	@ 0x40
 80033ea:	d002      	beq.n	80033f2 <MIN_Handler_REF_NTC_SET_CMD+0x50>
 80033ec:	7f7b      	ldrb	r3, [r7, #29]
 80033ee:	2b80      	cmp	r3, #128	@ 0x80
 80033f0:	d124      	bne.n	800343c <MIN_Handler_REF_NTC_SET_CMD+0x9a>
		for (uint8_t i = 0; i < 8; i++) {
 80033f2:	2300      	movs	r3, #0
 80033f4:	77bb      	strb	r3, [r7, #30]
 80033f6:	e00d      	b.n	8003414 <MIN_Handler_REF_NTC_SET_CMD+0x72>
			if ((tempo >> i) & 0x01) {
 80033f8:	7f7a      	ldrb	r2, [r7, #29]
 80033fa:	7fbb      	ldrb	r3, [r7, #30]
 80033fc:	fa42 f303 	asr.w	r3, r2, r3
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <MIN_Handler_REF_NTC_SET_CMD+0x6c>
				ntc_ref = i;
 8003408:	7fbb      	ldrb	r3, [r7, #30]
 800340a:	77fb      	strb	r3, [r7, #31]
				break;
 800340c:	e005      	b.n	800341a <MIN_Handler_REF_NTC_SET_CMD+0x78>
		for (uint8_t i = 0; i < 8; i++) {
 800340e:	7fbb      	ldrb	r3, [r7, #30]
 8003410:	3301      	adds	r3, #1
 8003412:	77bb      	strb	r3, [r7, #30]
 8003414:	7fbb      	ldrb	r3, [r7, #30]
 8003416:	2b07      	cmp	r3, #7
 8003418:	d9ee      	bls.n	80033f8 <MIN_Handler_REF_NTC_SET_CMD+0x56>
			}
		}
		temperature_set_ntc_ref(ntc_ref);
 800341a:	7ffb      	ldrb	r3, [r7, #31]
 800341c:	4618      	mov	r0, r3
 800341e:	f002 f9db 	bl	80057d8 <temperature_set_ntc_ref>
		uint8_t response[2] = {*(min_payload), MIN_NAK};
		MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
		return;
	}

	uint8_t response[2] = {*(min_payload), MIN_ACK};
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	763b      	strb	r3, [r7, #24]
 8003428:	2306      	movs	r3, #6
 800342a:	767b      	strb	r3, [r7, #25]
	MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 800342c:	f107 0218 	add.w	r2, r7, #24
 8003430:	7af9      	ldrb	r1, [r7, #11]
 8003432:	2302      	movs	r3, #2
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7ff fb27 	bl	8002a88 <MIN_Send>
 800343a:	e00b      	b.n	8003454 <MIN_Handler_REF_NTC_SET_CMD+0xb2>
		uint8_t response[2] = {*(min_payload), MIN_NAK};
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	753b      	strb	r3, [r7, #20]
 8003442:	2315      	movs	r3, #21
 8003444:	757b      	strb	r3, [r7, #21]
		MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 8003446:	f107 0214 	add.w	r2, r7, #20
 800344a:	7af9      	ldrb	r1, [r7, #11]
 800344c:	2302      	movs	r3, #2
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f7ff fb1a 	bl	8002a88 <MIN_Send>
}
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <MIN_Handler_REF_NTC_GET_CMD>:

void MIN_Handler_REF_NTC_GET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 800345a:	b580      	push	{r7, lr}
 800345c:	b086      	sub	sp, #24
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	461a      	mov	r2, r3
 8003466:	460b      	mov	r3, r1
 8003468:	72fb      	strb	r3, [r7, #11]
 800346a:	4613      	mov	r3, r2
 800346c:	72bb      	strb	r3, [r7, #10]
	uint8_t ntc_ref = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	75fb      	strb	r3, [r7, #23]
	temperature_get_ntc_ref(&ntc_ref);
 8003472:	f107 0317 	add.w	r3, r7, #23
 8003476:	4618      	mov	r0, r3
 8003478:	f002 f9c0 	bl	80057fc <temperature_get_ntc_ref>
	ntc_ref = 0x01 << ntc_ref;
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	461a      	mov	r2, r3
 8003480:	2301      	movs	r3, #1
 8003482:	4093      	lsls	r3, r2
 8003484:	b2db      	uxtb	r3, r3
 8003486:	75fb      	strb	r3, [r7, #23]
	uint8_t response[2] = {*(min_payload), ntc_ref};
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	753b      	strb	r3, [r7, #20]
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	757b      	strb	r3, [r7, #21]
	MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 8003492:	f107 0214 	add.w	r2, r7, #20
 8003496:	7af9      	ldrb	r1, [r7, #11]
 8003498:	2302      	movs	r3, #2
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f7ff faf4 	bl	8002a88 <MIN_Send>
}
 80034a0:	bf00      	nop
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <MIN_Handler_AUTO_TEC_SET_CMD>:

void MIN_Handler_AUTO_TEC_SET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	461a      	mov	r2, r3
 80034b4:	460b      	mov	r3, r1
 80034b6:	72fb      	strb	r3, [r7, #11]
 80034b8:	4613      	mov	r3, r2
 80034ba:	72bb      	strb	r3, [r7, #10]
	uint8_t tec_ena = (uint8_t)*(min_payload + 1);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3301      	adds	r3, #1
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	75fb      	strb	r3, [r7, #23]
	temperature_set_tec_auto(tec_ena & 0x0F);
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	4618      	mov	r0, r3
 80034ce:	f002 f91d 	bl	800570c <temperature_set_tec_auto>

	uint8_t response[2] = {*(min_payload), MIN_ACK};
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	753b      	strb	r3, [r7, #20]
 80034d8:	2306      	movs	r3, #6
 80034da:	757b      	strb	r3, [r7, #21]
    MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 80034dc:	f107 0214 	add.w	r2, r7, #20
 80034e0:	7af9      	ldrb	r1, [r7, #11]
 80034e2:	2302      	movs	r3, #2
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f7ff facf 	bl	8002a88 <MIN_Send>
}
 80034ea:	bf00      	nop
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <MIN_Handler_AUTO_TEC_GET_CMD>:

void MIN_Handler_AUTO_TEC_GET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	461a      	mov	r2, r3
 80034fe:	460b      	mov	r3, r1
 8003500:	72fb      	strb	r3, [r7, #11]
 8003502:	4613      	mov	r3, r2
 8003504:	72bb      	strb	r3, [r7, #10]
	uint8_t tec_ena = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	75fb      	strb	r3, [r7, #23]
	temperature_get_tec_auto(&tec_ena);
 800350a:	f107 0317 	add.w	r3, r7, #23
 800350e:	4618      	mov	r0, r3
 8003510:	f002 f91c 	bl	800574c <temperature_get_tec_auto>

	uint8_t response[2] = {*(min_payload), tec_ena};
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	753b      	strb	r3, [r7, #20]
 800351a:	7dfb      	ldrb	r3, [r7, #23]
 800351c:	757b      	strb	r3, [r7, #21]
	MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 800351e:	f107 0214 	add.w	r2, r7, #20
 8003522:	7af9      	ldrb	r1, [r7, #11]
 8003524:	2302      	movs	r3, #2
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f7ff faae 	bl	8002a88 <MIN_Send>
}
 800352c:	bf00      	nop
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <MIN_Handler_AUTO_HTR_SET_CMD>:

void MIN_Handler_AUTO_HTR_SET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	607a      	str	r2, [r7, #4]
 800353e:	461a      	mov	r2, r3
 8003540:	460b      	mov	r3, r1
 8003542:	72fb      	strb	r3, [r7, #11]
 8003544:	4613      	mov	r3, r2
 8003546:	72bb      	strb	r3, [r7, #10]
	uint8_t heater_ena = (uint8_t)*(min_payload + 1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3301      	adds	r3, #1
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	75fb      	strb	r3, [r7, #23]
	temperature_set_heater_auto(heater_ena & 0x0F);
 8003550:	7dfb      	ldrb	r3, [r7, #23]
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	b2db      	uxtb	r3, r3
 8003558:	4618      	mov	r0, r3
 800355a:	f002 f90b 	bl	8005774 <temperature_set_heater_auto>

	uint8_t response[2] = {*(min_payload), MIN_ACK};
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	753b      	strb	r3, [r7, #20]
 8003564:	2306      	movs	r3, #6
 8003566:	757b      	strb	r3, [r7, #21]
    MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 8003568:	f107 0214 	add.w	r2, r7, #20
 800356c:	7af9      	ldrb	r1, [r7, #11]
 800356e:	2302      	movs	r3, #2
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7ff fa89 	bl	8002a88 <MIN_Send>
}
 8003576:	bf00      	nop
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <MIN_Handler_AUTO_HTR_GET_CMD>:

void MIN_Handler_AUTO_HTR_GET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 800357e:	b580      	push	{r7, lr}
 8003580:	b086      	sub	sp, #24
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	461a      	mov	r2, r3
 800358a:	460b      	mov	r3, r1
 800358c:	72fb      	strb	r3, [r7, #11]
 800358e:	4613      	mov	r3, r2
 8003590:	72bb      	strb	r3, [r7, #10]
	uint8_t heater_ena = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	75fb      	strb	r3, [r7, #23]
	temperature_get_heater_auto(&heater_ena);
 8003596:	f107 0317 	add.w	r3, r7, #23
 800359a:	4618      	mov	r0, r3
 800359c:	f002 f908 	bl	80057b0 <temperature_get_heater_auto>

	uint8_t response[2] = {*(min_payload), heater_ena};
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	753b      	strb	r3, [r7, #20]
 80035a6:	7dfb      	ldrb	r3, [r7, #23]
 80035a8:	757b      	strb	r3, [r7, #21]
	MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 80035aa:	f107 0214 	add.w	r2, r7, #20
 80035ae:	7af9      	ldrb	r1, [r7, #11]
 80035b0:	2302      	movs	r3, #2
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f7ff fa68 	bl	8002a88 <MIN_Send>
}
 80035b8:	bf00      	nop
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <MIN_Handler_AUTO_TEMP_SET_CMD>:

void MIN_Handler_AUTO_TEMP_SET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	461a      	mov	r2, r3
 80035cc:	460b      	mov	r3, r1
 80035ce:	72fb      	strb	r3, [r7, #11]
 80035d0:	4613      	mov	r3, r2
 80035d2:	72bb      	strb	r3, [r7, #10]
	uint8_t Temp_auto = *(min_payload + 1) ? 1 : 0;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3301      	adds	r3, #1
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bf14      	ite	ne
 80035de:	2301      	movne	r3, #1
 80035e0:	2300      	moveq	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	75fb      	strb	r3, [r7, #23]
	temperature_set_auto_ctrl(Temp_auto);
 80035e6:	7dfb      	ldrb	r3, [r7, #23]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f002 f919 	bl	8005820 <temperature_set_auto_ctrl>

	uint8_t response[2] = {*(min_payload), MIN_ACK};
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	753b      	strb	r3, [r7, #20]
 80035f4:	2306      	movs	r3, #6
 80035f6:	757b      	strb	r3, [r7, #21]
    MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 80035f8:	f107 0214 	add.w	r2, r7, #20
 80035fc:	7af9      	ldrb	r1, [r7, #11]
 80035fe:	2302      	movs	r3, #2
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff fa41 	bl	8002a88 <MIN_Send>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <MIN_Handler_AUTO_TEMP_GET_CMD>:

void MIN_Handler_AUTO_TEMP_GET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 800360e:	b580      	push	{r7, lr}
 8003610:	b086      	sub	sp, #24
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	461a      	mov	r2, r3
 800361a:	460b      	mov	r3, r1
 800361c:	72fb      	strb	r3, [r7, #11]
 800361e:	4613      	mov	r3, r2
 8003620:	72bb      	strb	r3, [r7, #10]
	uint8_t Temp_auto = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	75fb      	strb	r3, [r7, #23]
	temperature_get_auto_ctrl(&Temp_auto);
 8003626:	f107 0317 	add.w	r3, r7, #23
 800362a:	4618      	mov	r0, r3
 800362c:	f002 f90a 	bl	8005844 <temperature_get_auto_ctrl>

	uint8_t response[2] = {*(min_payload), Temp_auto};
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	753b      	strb	r3, [r7, #20]
 8003636:	7dfb      	ldrb	r3, [r7, #23]
 8003638:	757b      	strb	r3, [r7, #21]
	MIN_Send(ctx, min_id, (const uint8_t *)response, 2);
 800363a:	f107 0214 	add.w	r2, r7, #20
 800363e:	7af9      	ldrb	r1, [r7, #11]
 8003640:	2302      	movs	r3, #2
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f7ff fa20 	bl	8002a88 <MIN_Send>
}
 8003648:	bf00      	nop
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <MIN_Handler_LSM_SENS_GET_CMD>:

void MIN_Handler_LSM_SENS_GET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	461a      	mov	r2, r3
 800365c:	460b      	mov	r3, r1
 800365e:	72fb      	strb	r3, [r7, #11]
 8003660:	4613      	mov	r3, r2
 8003662:	72bb      	strb	r3, [r7, #10]
	return;
 8003664:	bf00      	nop
}
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <MIN_Handler_H3L_SENS_GET_CMD>:

void MIN_Handler_H3L_SENS_GET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	461a      	mov	r2, r3
 800367c:	460b      	mov	r3, r1
 800367e:	72fb      	strb	r3, [r7, #11]
 8003680:	4613      	mov	r3, r2
 8003682:	72bb      	strb	r3, [r7, #10]
	return;
 8003684:	bf00      	nop
}
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <MIN_Handler_BME_SENS_GET_CMD>:

void MIN_Handler_BME_SENS_GET_CMD(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload) {
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	461a      	mov	r2, r3
 800369c:	460b      	mov	r3, r1
 800369e:	72fb      	strb	r3, [r7, #11]
 80036a0:	4613      	mov	r3, r2
 80036a2:	72bb      	strb	r3, [r7, #10]
	return;
 80036a4:	bf00      	nop
}
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <MIN_GetCommandTable>:

// =================================================================
// Helper Functions
// =================================================================

const MIN_Command_t *MIN_GetCommandTable(void) {
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
	return command_table;
 80036b4:	4b02      	ldr	r3, [pc, #8]	@ (80036c0 <MIN_GetCommandTable+0x10>)
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	08009b80 	.word	0x08009b80

080036c4 <MIN_GetCommandTableSize>:

int MIN_GetCommandTableSize(void) {
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
	return command_table_size;
 80036c8:	2318      	movs	r3, #24
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <MIN_Timeout_Handler>:
} MIN_TaskContextTypedef;

/* Private function ----------------------------------------------------------*/
static void MIN_Processing(void);

void MIN_Timeout_Handler(MIN_Context_t *ctx) {
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
//    LOG("MIN-Timeout!");
	return;
 80036dc:	bf00      	nop
}
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <MIN_Process_Init>:
		10,                      	// taskPeriodInMS;
		MIN_Processing, 			// taskFunction;
		9 }
};

void MIN_Process_Init(void){
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
	MIN_Context_Init(&EXP_MinCtx, OBC_EXP_PORT);
 80036ec:	2100      	movs	r1, #0
 80036ee:	4804      	ldr	r0, [pc, #16]	@ (8003700 <MIN_Process_Init+0x18>)
 80036f0:	f7ff f91c 	bl	800292c <MIN_Context_Init>
	MIN_RegisterTimeoutCallback(&EXP_MinCtx, MIN_Timeout_Handler);
 80036f4:	4903      	ldr	r1, [pc, #12]	@ (8003704 <MIN_Process_Init+0x1c>)
 80036f6:	4802      	ldr	r0, [pc, #8]	@ (8003700 <MIN_Process_Init+0x18>)
 80036f8:	f7ff f965 	bl	80029c6 <MIN_RegisterTimeoutCallback>
}
 80036fc:	bf00      	nop
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20005bdc 	.word	0x20005bdc
 8003704:	080036d5 	.word	0x080036d5

08003708 <MIN_Processing>:

void MIN_Processing(void){
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
	while (UART_Driver_IsDataAvailable(USART6)) {
 800370e:	e00f      	b.n	8003730 <MIN_Processing+0x28>
        int data = UART_Driver_Read(USART6);
 8003710:	480f      	ldr	r0, [pc, #60]	@ (8003750 <MIN_Processing+0x48>)
 8003712:	f7fe f8d3 	bl	80018bc <UART_Driver_Read>
 8003716:	6078      	str	r0, [r7, #4]
        if (data >= 0) {
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	db08      	blt.n	8003730 <MIN_Processing+0x28>
            uint8_t byte = (uint8_t)data;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	70fb      	strb	r3, [r7, #3]
            MIN_App_Poll(&EXP_MinCtx, &byte, 1);
 8003724:	1cfb      	adds	r3, r7, #3
 8003726:	2201      	movs	r2, #1
 8003728:	4619      	mov	r1, r3
 800372a:	480a      	ldr	r0, [pc, #40]	@ (8003754 <MIN_Processing+0x4c>)
 800372c:	f7ff f95a 	bl	80029e4 <MIN_App_Poll>
	while (UART_Driver_IsDataAvailable(USART6)) {
 8003730:	4807      	ldr	r0, [pc, #28]	@ (8003750 <MIN_Processing+0x48>)
 8003732:	f7fe f907 	bl	8001944 <UART_Driver_IsDataAvailable>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e9      	bne.n	8003710 <MIN_Processing+0x8>
        }
	}
	MIN_App_Poll(&EXP_MinCtx, NULL, 0);
 800373c:	2200      	movs	r2, #0
 800373e:	2100      	movs	r1, #0
 8003740:	4804      	ldr	r0, [pc, #16]	@ (8003754 <MIN_Processing+0x4c>)
 8003742:	f7ff f94f 	bl	80029e4 <MIN_App_Poll>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40011400 	.word	0x40011400
 8003754:	20005bdc 	.word	0x20005bdc

08003758 <MIN_CreateTask>:

void MIN_CreateTask(void) {
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_MINTaskContext.taskHandle, &s_MINTaskContext.taskProperty);
 800375c:	4902      	ldr	r1, [pc, #8]	@ (8003768 <MIN_CreateTask+0x10>)
 800375e:	4803      	ldr	r0, [pc, #12]	@ (800376c <MIN_CreateTask+0x14>)
 8003760:	f004 fdb8 	bl	80082d4 <SCH_TASK_CreateTask>
}
 8003764:	bf00      	nop
 8003766:	bd80      	pop	{r7, pc}
 8003768:	200040b0 	.word	0x200040b0
 800376c:	200040ac 	.word	0x200040ac

08003770 <__NVIC_GetPriorityGrouping>:
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003774:	4b04      	ldr	r3, [pc, #16]	@ (8003788 <__NVIC_GetPriorityGrouping+0x18>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	0a1b      	lsrs	r3, r3, #8
 800377a:	f003 0307 	and.w	r3, r3, #7
}
 800377e:	4618      	mov	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <__NVIC_EnableIRQ>:
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	2b00      	cmp	r3, #0
 800379c:	db0b      	blt.n	80037b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	f003 021f 	and.w	r2, r3, #31
 80037a4:	4907      	ldr	r1, [pc, #28]	@ (80037c4 <__NVIC_EnableIRQ+0x38>)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	2001      	movs	r0, #1
 80037ae:	fa00 f202 	lsl.w	r2, r0, r2
 80037b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	e000e100 	.word	0xe000e100

080037c8 <__NVIC_SetPriority>:
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	6039      	str	r1, [r7, #0]
 80037d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	db0a      	blt.n	80037f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	490c      	ldr	r1, [pc, #48]	@ (8003814 <__NVIC_SetPriority+0x4c>)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	0112      	lsls	r2, r2, #4
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	440b      	add	r3, r1
 80037ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80037f0:	e00a      	b.n	8003808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	4908      	ldr	r1, [pc, #32]	@ (8003818 <__NVIC_SetPriority+0x50>)
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	3b04      	subs	r3, #4
 8003800:	0112      	lsls	r2, r2, #4
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	440b      	add	r3, r1
 8003806:	761a      	strb	r2, [r3, #24]
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	e000e100 	.word	0xe000e100
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <NVIC_EncodePriority>:
{
 800381c:	b480      	push	{r7}
 800381e:	b089      	sub	sp, #36	@ 0x24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f1c3 0307 	rsb	r3, r3, #7
 8003836:	2b04      	cmp	r3, #4
 8003838:	bf28      	it	cs
 800383a:	2304      	movcs	r3, #4
 800383c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3304      	adds	r3, #4
 8003842:	2b06      	cmp	r3, #6
 8003844:	d902      	bls.n	800384c <NVIC_EncodePriority+0x30>
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	3b03      	subs	r3, #3
 800384a:	e000      	b.n	800384e <NVIC_EncodePriority+0x32>
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003850:	f04f 32ff 	mov.w	r2, #4294967295
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43da      	mvns	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	401a      	ands	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003864:	f04f 31ff 	mov.w	r1, #4294967295
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	fa01 f303 	lsl.w	r3, r1, r3
 800386e:	43d9      	mvns	r1, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003874:	4313      	orrs	r3, r2
}
 8003876:	4618      	mov	r0, r3
 8003878:	3724      	adds	r7, #36	@ 0x24
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003882:	b480      	push	{r7}
 8003884:	b089      	sub	sp, #36	@ 0x24
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	332c      	adds	r3, #44	@ 0x2c
 8003892:	4619      	mov	r1, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800389a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800389e:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	fa92 f2a2 	rbit	r2, r2
 80038a6:	613a      	str	r2, [r7, #16]
  return result;
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	2a00      	cmp	r2, #0
 80038b0:	d101      	bne.n	80038b6 <LL_ADC_REG_SetSequencerRanks+0x34>
    return 32U;
 80038b2:	2220      	movs	r2, #32
 80038b4:	e003      	b.n	80038be <LL_ADC_REG_SetSequencerRanks+0x3c>
  return __builtin_clz(value);
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	fab2 f282 	clz	r2, r2
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	40d3      	lsrs	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	211f      	movs	r1, #31
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	401a      	ands	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f003 011f 	and.w	r1, r3, #31
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f003 031f 	and.w	r3, r3, #31
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	431a      	orrs	r2, r3
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80038f0:	bf00      	nop
 80038f2:	3724      	adds	r7, #36	@ 0x24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	609a      	str	r2, [r3, #8]
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003922:	b480      	push	{r7}
 8003924:	b08f      	sub	sp, #60	@ 0x3c
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	330c      	adds	r3, #12
 8003932:	4619      	mov	r1, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800393e:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	fa92 f2a2 	rbit	r2, r2
 8003946:	613a      	str	r2, [r7, #16]
  return result;
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	2a00      	cmp	r2, #0
 8003950:	d101      	bne.n	8003956 <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 8003952:	2220      	movs	r2, #32
 8003954:	e003      	b.n	800395e <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	fab2 f282 	clz	r2, r2
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	40d3      	lsrs	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 8003966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8003970:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8003974:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	6a39      	ldr	r1, [r7, #32]
 8003978:	fa91 f1a1 	rbit	r1, r1
 800397c:	61f9      	str	r1, [r7, #28]
  return result;
 800397e:	69f9      	ldr	r1, [r7, #28]
 8003980:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 8003982:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003984:	2900      	cmp	r1, #0
 8003986:	d101      	bne.n	800398c <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 8003988:	2120      	movs	r1, #32
 800398a:	e003      	b.n	8003994 <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 800398c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800398e:	fab1 f181 	clz	r1, r1
 8003992:	b2c9      	uxtb	r1, r1
 8003994:	40cb      	lsrs	r3, r1
 8003996:	2107      	movs	r1, #7
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	401a      	ands	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80039a6:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80039aa:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039ae:	fa91 f1a1 	rbit	r1, r1
 80039b2:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 80039b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039b6:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 80039b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039ba:	2900      	cmp	r1, #0
 80039bc:	d101      	bne.n	80039c2 <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 80039be:	2120      	movs	r1, #32
 80039c0:	e003      	b.n	80039ca <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 80039c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039c4:	fab1 f181 	clz	r1, r1
 80039c8:	b2c9      	uxtb	r1, r1
 80039ca:	40cb      	lsrs	r3, r1
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	431a      	orrs	r2, r3
 80039d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80039d8:	bf00      	nop
 80039da:	373c      	adds	r7, #60	@ 0x3c
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80039f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003a28 <LL_DMA_SetDataTransferDirection+0x44>)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	4413      	add	r3, r2
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4413      	add	r3, r2
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a04:	4908      	ldr	r1, [pc, #32]	@ (8003a28 <LL_DMA_SetDataTransferDirection+0x44>)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	440b      	add	r3, r1
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	440b      	add	r3, r1
 8003a12:	4619      	mov	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
}
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	08009c40 	.word	0x08009c40

08003a2c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8003a38:	4a0d      	ldr	r2, [pc, #52]	@ (8003a70 <LL_DMA_SetMode+0x44>)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4413      	add	r3, r2
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8003a4c:	4908      	ldr	r1, [pc, #32]	@ (8003a70 <LL_DMA_SetMode+0x44>)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	440b      	add	r3, r1
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	4619      	mov	r1, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	440b      	add	r3, r1
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]
}
 8003a62:	bf00      	nop
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	08009c40 	.word	0x08009c40

08003a74 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8003a80:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab8 <LL_DMA_SetPeriphIncMode+0x44>)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4413      	add	r3, r2
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003a94:	4908      	ldr	r1, [pc, #32]	@ (8003ab8 <LL_DMA_SetPeriphIncMode+0x44>)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	440b      	add	r3, r1
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	440b      	add	r3, r1
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
}
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	08009c40 	.word	0x08009c40

08003abc <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8003ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8003b00 <LL_DMA_SetMemoryIncMode+0x44>)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4413      	add	r3, r2
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003adc:	4908      	ldr	r1, [pc, #32]	@ (8003b00 <LL_DMA_SetMemoryIncMode+0x44>)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	440b      	add	r3, r1
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	440b      	add	r3, r1
 8003aea:	4619      	mov	r1, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]
}
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	08009c40 	.word	0x08009c40

08003b04 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8003b10:	4a0d      	ldr	r2, [pc, #52]	@ (8003b48 <LL_DMA_SetPeriphSize+0x44>)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	4413      	add	r3, r2
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8003b24:	4908      	ldr	r1, [pc, #32]	@ (8003b48 <LL_DMA_SetPeriphSize+0x44>)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	440b      	add	r3, r1
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	440b      	add	r3, r1
 8003b32:	4619      	mov	r1, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]
}
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	08009c40 	.word	0x08009c40

08003b4c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8003b58:	4a0d      	ldr	r2, [pc, #52]	@ (8003b90 <LL_DMA_SetMemorySize+0x44>)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8003b6c:	4908      	ldr	r1, [pc, #32]	@ (8003b90 <LL_DMA_SetMemorySize+0x44>)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	440b      	add	r3, r1
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	4619      	mov	r1, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	440b      	add	r3, r1
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	08009c40 	.word	0x08009c40

08003b94 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8003ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4413      	add	r3, r2
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bb4:	4908      	ldr	r1, [pc, #32]	@ (8003bd8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	440b      	add	r3, r1
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	440b      	add	r3, r1
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	08009c40 	.word	0x08009c40

08003bdc <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8003be8:	4a0d      	ldr	r2, [pc, #52]	@ (8003c20 <LL_DMA_SetChannelSelection+0x44>)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	4413      	add	r3, r2
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003bfc:	4908      	ldr	r1, [pc, #32]	@ (8003c20 <LL_DMA_SetChannelSelection+0x44>)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	440b      	add	r3, r1
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	4619      	mov	r1, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	440b      	add	r3, r1
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]
}
 8003c12:	bf00      	nop
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	08009c40 	.word	0x08009c40

08003c24 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8003c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8003c60 <LL_DMA_DisableFifoMode+0x3c>)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	4413      	add	r3, r2
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	4908      	ldr	r1, [pc, #32]	@ (8003c60 <LL_DMA_DisableFifoMode+0x3c>)
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	440a      	add	r2, r1
 8003c44:	7812      	ldrb	r2, [r2, #0]
 8003c46:	4611      	mov	r1, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	440a      	add	r2, r1
 8003c4c:	f023 0304 	bic.w	r3, r3, #4
 8003c50:	6153      	str	r3, [r2, #20]
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	08009c40 	.word	0x08009c40

08003c64 <LL_I2C_Enable>:
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f043 0201 	orr.w	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	601a      	str	r2, [r3, #0]
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <LL_I2C_EnableClockStretching>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	601a      	str	r2, [r3, #0]
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_I2C_DisableGeneralCall>:
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	601a      	str	r2, [r3, #0]
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <LL_I2C_SetOwnAddress2>:
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	60da      	str	r2, [r3, #12]
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <LL_I2C_DisableOwnAddress2>:
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	60da      	str	r2, [r3, #12]
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_I2C_EnableIT_EVT>:
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	605a      	str	r2, [r3, #4]
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
	...

08003d2c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003d30:	4b05      	ldr	r3, [pc, #20]	@ (8003d48 <LL_RCC_HSE_Enable+0x1c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a04      	ldr	r2, [pc, #16]	@ (8003d48 <LL_RCC_HSE_Enable+0x1c>)
 8003d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d3a:	6013      	str	r3, [r2, #0]
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800

08003d4c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8003d50:	4b07      	ldr	r3, [pc, #28]	@ (8003d70 <LL_RCC_HSE_IsReady+0x24>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d5c:	bf0c      	ite	eq
 8003d5e:	2301      	moveq	r3, #1
 8003d60:	2300      	movne	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800

08003d74 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003d7c:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <LL_RCC_SetSysClkSource+0x24>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 0203 	bic.w	r2, r3, #3
 8003d84:	4904      	ldr	r1, [pc, #16]	@ (8003d98 <LL_RCC_SetSysClkSource+0x24>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	40023800 	.word	0x40023800

08003d9c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003da0:	4b04      	ldr	r3, [pc, #16]	@ (8003db4 <LL_RCC_GetSysClkSource+0x18>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 030c 	and.w	r3, r3, #12
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800

08003db8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003dc0:	4b06      	ldr	r3, [pc, #24]	@ (8003ddc <LL_RCC_SetAHBPrescaler+0x24>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dc8:	4904      	ldr	r1, [pc, #16]	@ (8003ddc <LL_RCC_SetAHBPrescaler+0x24>)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	608b      	str	r3, [r1, #8]
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40023800 	.word	0x40023800

08003de0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003df0:	4904      	ldr	r1, [pc, #16]	@ (8003e04 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	608b      	str	r3, [r1, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	40023800 	.word	0x40023800

08003e08 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003e10:	4b06      	ldr	r3, [pc, #24]	@ (8003e2c <LL_RCC_SetAPB2Prescaler+0x24>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e18:	4904      	ldr	r1, [pc, #16]	@ (8003e2c <LL_RCC_SetAPB2Prescaler+0x24>)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40023800 	.word	0x40023800

08003e30 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003e34:	4b05      	ldr	r3, [pc, #20]	@ (8003e4c <LL_RCC_PLL_Enable+0x1c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a04      	ldr	r2, [pc, #16]	@ (8003e4c <LL_RCC_PLL_Enable+0x1c>)
 8003e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e3e:	6013      	str	r3, [r2, #0]
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800

08003e50 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8003e54:	4b07      	ldr	r3, [pc, #28]	@ (8003e74 <LL_RCC_PLL_IsReady+0x24>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e60:	bf0c      	ite	eq
 8003e62:	2301      	moveq	r3, #1
 8003e64:	2300      	movne	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800

08003e78 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8003e86:	4b0d      	ldr	r3, [pc, #52]	@ (8003ebc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	68f9      	ldr	r1, [r7, #12]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	4311      	orrs	r1, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	0192      	lsls	r2, r2, #6
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	4908      	ldr	r1, [pc, #32]	@ (8003ebc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8003ea0:	4b06      	ldr	r3, [pc, #24]	@ (8003ebc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ea8:	4904      	ldr	r1, [pc, #16]	@ (8003ebc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	ffbf8000 	.word	0xffbf8000

08003ec4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003ecc:	4b08      	ldr	r3, [pc, #32]	@ (8003ef0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003ece:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ed0:	4907      	ldr	r1, [pc, #28]	@ (8003ef0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003ed8:	4b05      	ldr	r3, [pc, #20]	@ (8003ef0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
}
 8003ee4:	bf00      	nop
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	40023800 	.word	0x40023800

08003ef4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8003efc:	4b08      	ldr	r3, [pc, #32]	@ (8003f20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003efe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f00:	4907      	ldr	r1, [pc, #28]	@ (8003f20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003f08:	4b05      	ldr	r3, [pc, #20]	@ (8003f20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003f0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f12:	68fb      	ldr	r3, [r7, #12]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	40023800 	.word	0x40023800

08003f24 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003f2c:	4b08      	ldr	r3, [pc, #32]	@ (8003f50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003f2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f30:	4907      	ldr	r1, [pc, #28]	@ (8003f50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003f38:	4b05      	ldr	r3, [pc, #20]	@ (8003f50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003f3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f42:	68fb      	ldr	r3, [r7, #12]
}
 8003f44:	bf00      	nop
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40023800 	.word	0x40023800

08003f54 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003f5c:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <LL_FLASH_SetLatency+0x24>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 0207 	bic.w	r2, r3, #7
 8003f64:	4904      	ldr	r1, [pc, #16]	@ (8003f78 <LL_FLASH_SetLatency+0x24>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	600b      	str	r3, [r1, #0]
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	40023c00 	.word	0x40023c00

08003f7c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003f80:	4b04      	ldr	r3, [pc, #16]	@ (8003f94 <LL_FLASH_GetLatency+0x18>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0307 	and.w	r3, r3, #7
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40023c00 	.word	0x40023c00

08003f98 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8003fa0:	4b06      	ldr	r3, [pc, #24]	@ (8003fbc <LL_PWR_SetRegulVoltageScaling+0x24>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003fa8:	4904      	ldr	r1, [pc, #16]	@ (8003fbc <LL_PWR_SetRegulVoltageScaling+0x24>)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	40007000 	.word	0x40007000

08003fc0 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8003fc4:	4b07      	ldr	r3, [pc, #28]	@ (8003fe4 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fd0:	bf0c      	ite	eq
 8003fd2:	2301      	moveq	r3, #1
 8003fd4:	2300      	movne	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40007000 	.word	0x40007000

08003fe8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	601a      	str	r2, [r3, #0]
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f023 0210 	bic.w	r2, r3, #16
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	605a      	str	r2, [r3, #4]
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	601a      	str	r2, [r3, #0]
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d01c      	beq.n	800409a <LL_TIM_OC_DisableFast+0x4a>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b04      	cmp	r3, #4
 8004064:	d017      	beq.n	8004096 <LL_TIM_OC_DisableFast+0x46>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b10      	cmp	r3, #16
 800406a:	d012      	beq.n	8004092 <LL_TIM_OC_DisableFast+0x42>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b40      	cmp	r3, #64	@ 0x40
 8004070:	d00d      	beq.n	800408e <LL_TIM_OC_DisableFast+0x3e>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004078:	d007      	beq.n	800408a <LL_TIM_OC_DisableFast+0x3a>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004080:	d101      	bne.n	8004086 <LL_TIM_OC_DisableFast+0x36>
 8004082:	2305      	movs	r3, #5
 8004084:	e00a      	b.n	800409c <LL_TIM_OC_DisableFast+0x4c>
 8004086:	2306      	movs	r3, #6
 8004088:	e008      	b.n	800409c <LL_TIM_OC_DisableFast+0x4c>
 800408a:	2304      	movs	r3, #4
 800408c:	e006      	b.n	800409c <LL_TIM_OC_DisableFast+0x4c>
 800408e:	2303      	movs	r3, #3
 8004090:	e004      	b.n	800409c <LL_TIM_OC_DisableFast+0x4c>
 8004092:	2302      	movs	r3, #2
 8004094:	e002      	b.n	800409c <LL_TIM_OC_DisableFast+0x4c>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <LL_TIM_OC_DisableFast+0x4c>
 800409a:	2300      	movs	r3, #0
 800409c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3318      	adds	r3, #24
 80040a2:	4619      	mov	r1, r3
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	4a0b      	ldr	r2, [pc, #44]	@ (80040d4 <LL_TIM_OC_DisableFast+0x84>)
 80040a8:	5cd3      	ldrb	r3, [r2, r3]
 80040aa:	440b      	add	r3, r1
 80040ac:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	4908      	ldr	r1, [pc, #32]	@ (80040d8 <LL_TIM_OC_DisableFast+0x88>)
 80040b6:	5ccb      	ldrb	r3, [r1, r3]
 80040b8:	4619      	mov	r1, r3
 80040ba:	2304      	movs	r3, #4
 80040bc:	408b      	lsls	r3, r1
 80040be:	43db      	mvns	r3, r3
 80040c0:	401a      	ands	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	601a      	str	r2, [r3, #0]

}
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	08009c48 	.word	0x08009c48
 80040d8:	08009c50 	.word	0x08009c50

080040dc <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d01c      	beq.n	8004126 <LL_TIM_OC_EnablePreload+0x4a>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d017      	beq.n	8004122 <LL_TIM_OC_EnablePreload+0x46>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d012      	beq.n	800411e <LL_TIM_OC_EnablePreload+0x42>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b40      	cmp	r3, #64	@ 0x40
 80040fc:	d00d      	beq.n	800411a <LL_TIM_OC_EnablePreload+0x3e>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004104:	d007      	beq.n	8004116 <LL_TIM_OC_EnablePreload+0x3a>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800410c:	d101      	bne.n	8004112 <LL_TIM_OC_EnablePreload+0x36>
 800410e:	2305      	movs	r3, #5
 8004110:	e00a      	b.n	8004128 <LL_TIM_OC_EnablePreload+0x4c>
 8004112:	2306      	movs	r3, #6
 8004114:	e008      	b.n	8004128 <LL_TIM_OC_EnablePreload+0x4c>
 8004116:	2304      	movs	r3, #4
 8004118:	e006      	b.n	8004128 <LL_TIM_OC_EnablePreload+0x4c>
 800411a:	2303      	movs	r3, #3
 800411c:	e004      	b.n	8004128 <LL_TIM_OC_EnablePreload+0x4c>
 800411e:	2302      	movs	r3, #2
 8004120:	e002      	b.n	8004128 <LL_TIM_OC_EnablePreload+0x4c>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <LL_TIM_OC_EnablePreload+0x4c>
 8004126:	2300      	movs	r3, #0
 8004128:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3318      	adds	r3, #24
 800412e:	4619      	mov	r1, r3
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	4a0a      	ldr	r2, [pc, #40]	@ (800415c <LL_TIM_OC_EnablePreload+0x80>)
 8004134:	5cd3      	ldrb	r3, [r2, r3]
 8004136:	440b      	add	r3, r1
 8004138:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	4907      	ldr	r1, [pc, #28]	@ (8004160 <LL_TIM_OC_EnablePreload+0x84>)
 8004142:	5ccb      	ldrb	r3, [r1, r3]
 8004144:	4619      	mov	r1, r3
 8004146:	2308      	movs	r3, #8
 8004148:	408b      	lsls	r3, r1
 800414a:	431a      	orrs	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	601a      	str	r2, [r3, #0]
}
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	08009c48 	.word	0x08009c48
 8004160:	08009c50 	.word	0x08009c50

08004164 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004176:	f023 0307 	bic.w	r3, r3, #7
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	609a      	str	r2, [r3, #8]
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	605a      	str	r2, [r3, #4]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	609a      	str	r2, [r3, #8]
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <LL_USART_Enable>:
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	60da      	str	r2, [r3, #12]
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <LL_USART_ConfigAsyncMode>:
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	615a      	str	r2, [r3, #20]
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <LL_USART_IsActiveFlag_TXE>:
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004230:	2b80      	cmp	r3, #128	@ 0x80
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
}
 800423a:	4618      	mov	r0, r3
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <LL_USART_TransmitData8>:
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	460b      	mov	r3, r1
 8004250:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8004252:	78fa      	ldrb	r2, [r7, #3]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	605a      	str	r2, [r3, #4]
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_GPIO_SetOutputPin>:
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	619a      	str	r2, [r3, #24]
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <LL_GPIO_ResetOutputPin>:
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	041a      	lsls	r2, r3, #16
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	619a      	str	r2, [r3, #24]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042a2:	f001 fae1 	bl	8005868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042a6:	f000 f829 	bl	80042fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042aa:	f000 fddb 	bl	8004e64 <MX_GPIO_Init>
  MX_DMA_Init();
 80042ae:	f000 fdc1 	bl	8004e34 <MX_DMA_Init>
  MX_SPI1_Init();
 80042b2:	f000 fabb 	bl	800482c <MX_SPI1_Init>
  MX_ADC1_Init();
 80042b6:	f000 f86f 	bl	8004398 <MX_ADC1_Init>
  MX_TIM1_Init();
 80042ba:	f000 fbb9 	bl	8004a30 <MX_TIM1_Init>
  MX_TIM3_Init();
 80042be:	f000 fc4f 	bl	8004b60 <MX_TIM3_Init>
  MX_I2C2_Init();
 80042c2:	f000 fa35 	bl	8004730 <MX_I2C2_Init>
  MX_SPI3_Init();
 80042c6:	f000 fb5d 	bl	8004984 <MX_SPI3_Init>
  MX_SPI2_Init();
 80042ca:	f000 fb05 	bl	80048d8 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 80042ce:	f000 fd51 	bl	8004d74 <MX_USART6_UART_Init>
  MX_ADC3_Init();
 80042d2:	f000 f983 	bl	80045dc <MX_ADC3_Init>
  MX_TIM4_Init();
 80042d6:	f000 fc73 	bl	8004bc0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80042da:	f000 fceb 	bl	8004cb4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80042de:	f000 f9cf 	bl	8004680 <MX_I2C1_Init>
//  NTC_DMA_ADC_Init();
//  Laser_board_init();
//  Photo_board_init();


  UART_Driver_Init();
 80042e2:	f7fd fac1 	bl	8001868 <UART_Driver_Init>
  MIN_Process_Init();
 80042e6:	f7ff f9ff 	bl	80036e8 <MIN_Process_Init>


  SCH_Initialize();
 80042ea:	f003 ffc9 	bl	8008280 <SCH_Initialize>
//  CLI_Command_CreateTask();
//  Temperature_GetSet_CreateTask();
  // sensor_i2c_create_task();
//  AutoRun_CreateTask();
//  SoftTime_CreateTask();
  MIN_CreateTask();
 80042ee:	f7ff fa33 	bl	8003758 <MIN_CreateTask>

  SCH_StartSchedular();
 80042f2:	f004 f8c3 	bl	800847c <SCH_StartSchedular>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_HandleScheduledTask();
 80042f6:	f004 f8c7 	bl	8008488 <SCH_HandleScheduledTask>
 80042fa:	e7fc      	b.n	80042f6 <main+0x58>

080042fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8004300:	2000      	movs	r0, #0
 8004302:	f7ff fe27 	bl	8003f54 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8004306:	bf00      	nop
 8004308:	f7ff fe38 	bl	8003f7c <LL_FLASH_GetLatency>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1fa      	bne.n	8004308 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8004312:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004316:	f7ff fe3f 	bl	8003f98 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800431a:	f7ff fd07 	bl	8003d2c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800431e:	bf00      	nop
 8004320:	f7ff fd14 	bl	8003d4c <LL_RCC_HSE_IsReady>
 8004324:	4603      	mov	r3, r0
 8004326:	2b01      	cmp	r3, #1
 8004328:	d1fa      	bne.n	8004320 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 72, LL_RCC_PLLP_DIV_6);
 800432a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800432e:	2248      	movs	r2, #72	@ 0x48
 8004330:	2104      	movs	r1, #4
 8004332:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8004336:	f7ff fd9f 	bl	8003e78 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800433a:	f7ff fd79 	bl	8003e30 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800433e:	bf00      	nop
 8004340:	f7ff fd86 	bl	8003e50 <LL_RCC_PLL_IsReady>
 8004344:	4603      	mov	r3, r0
 8004346:	2b01      	cmp	r3, #1
 8004348:	d1fa      	bne.n	8004340 <SystemClock_Config+0x44>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 800434a:	bf00      	nop
 800434c:	f7ff fe38 	bl	8003fc0 <LL_PWR_IsActiveFlag_VOS>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0fa      	beq.n	800434c <SystemClock_Config+0x50>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8004356:	2000      	movs	r0, #0
 8004358:	f7ff fd2e 	bl	8003db8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800435c:	2000      	movs	r0, #0
 800435e:	f7ff fd3f 	bl	8003de0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8004362:	2000      	movs	r0, #0
 8004364:	f7ff fd50 	bl	8003e08 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8004368:	2002      	movs	r0, #2
 800436a:	f7ff fd03 	bl	8003d74 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800436e:	bf00      	nop
 8004370:	f7ff fd14 	bl	8003d9c <LL_RCC_GetSysClkSource>
 8004374:	4603      	mov	r3, r0
 8004376:	2b08      	cmp	r3, #8
 8004378:	d1fa      	bne.n	8004370 <SystemClock_Config+0x74>
  {

  }
  LL_SetSystemCoreClock(24000000);
 800437a:	4806      	ldr	r0, [pc, #24]	@ (8004394 <SystemClock_Config+0x98>)
 800437c:	f003 ff70 	bl	8008260 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8004380:	200f      	movs	r0, #15
 8004382:	f001 fa93 	bl	80058ac <HAL_InitTick>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800438c:	f000 fe6c 	bl	8005068 <Error_Handler>
  }
}
 8004390:	bf00      	nop
 8004392:	bd80      	pop	{r7, pc}
 8004394:	016e3600 	.word	0x016e3600

08004398 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b092      	sub	sp, #72	@ 0x48
 800439c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800439e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80043aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	605a      	str	r2, [r3, #4]
 80043b4:	609a      	str	r2, [r3, #8]
 80043b6:	60da      	str	r2, [r3, #12]
 80043b8:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80043ba:	f107 0318 	add.w	r3, r7, #24
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	605a      	str	r2, [r3, #4]
 80043c4:	609a      	str	r2, [r3, #8]
 80043c6:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c8:	463b      	mov	r3, r7
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	605a      	str	r2, [r3, #4]
 80043d0:	609a      	str	r2, [r3, #8]
 80043d2:	60da      	str	r2, [r3, #12]
 80043d4:	611a      	str	r2, [r3, #16]
 80043d6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80043d8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80043dc:	f7ff fda2 	bl	8003f24 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80043e0:	2004      	movs	r0, #4
 80043e2:	f7ff fd6f 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80043e6:	2001      	movs	r0, #1
 80043e8:	f7ff fd6c 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80043ec:	2002      	movs	r0, #2
 80043ee:	f7ff fd69 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>
  PC4   ------> ADC1_IN14
  PC5   ------> ADC1_IN15
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = ADC_TEMP1_Pin|ADC_TEMP2_Pin|ADC_TEMP3_Pin|ADC_TEMP4_Pin
 80043f2:	233f      	movs	r3, #63	@ 0x3f
 80043f4:	603b      	str	r3, [r7, #0]
                          |ADC_TEMP5_Pin|ADC_TEMP6_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80043f6:	2303      	movs	r3, #3
 80043f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80043fa:	2300      	movs	r3, #0
 80043fc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043fe:	463b      	mov	r3, r7
 8004400:	4619      	mov	r1, r3
 8004402:	4869      	ldr	r0, [pc, #420]	@ (80045a8 <MX_ADC1_Init+0x210>)
 8004404:	f002 fd31 	bl	8006e6a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_TEC_Pin;
 8004408:	2310      	movs	r3, #16
 800440a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800440c:	2303      	movs	r3, #3
 800440e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004410:	2300      	movs	r3, #0
 8004412:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ADC_TEC_GPIO_Port, &GPIO_InitStruct);
 8004414:	463b      	mov	r3, r7
 8004416:	4619      	mov	r1, r3
 8004418:	4864      	ldr	r0, [pc, #400]	@ (80045ac <MX_ADC1_Init+0x214>)
 800441a:	f002 fd26 	bl	8006e6a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_TEMP7_Pin|ADC_TEMP8_Pin;
 800441e:	2303      	movs	r3, #3
 8004420:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004422:	2303      	movs	r3, #3
 8004424:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004426:	2300      	movs	r3, #0
 8004428:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800442a:	463b      	mov	r3, r7
 800442c:	4619      	mov	r1, r3
 800442e:	4860      	ldr	r0, [pc, #384]	@ (80045b0 <MX_ADC1_Init+0x218>)
 8004430:	f002 fd1b 	bl	8006e6a <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8004434:	2200      	movs	r2, #0
 8004436:	2100      	movs	r1, #0
 8004438:	485e      	ldr	r0, [pc, #376]	@ (80045b4 <MX_ADC1_Init+0x21c>)
 800443a:	f7ff fbcf 	bl	8003bdc <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800443e:	2200      	movs	r2, #0
 8004440:	2100      	movs	r1, #0
 8004442:	485c      	ldr	r0, [pc, #368]	@ (80045b4 <MX_ADC1_Init+0x21c>)
 8004444:	f7ff face 	bl	80039e4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_MEDIUM);
 8004448:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800444c:	2100      	movs	r1, #0
 800444e:	4859      	ldr	r0, [pc, #356]	@ (80045b4 <MX_ADC1_Init+0x21c>)
 8004450:	f7ff fba0 	bl	8003b94 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8004454:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004458:	2100      	movs	r1, #0
 800445a:	4856      	ldr	r0, [pc, #344]	@ (80045b4 <MX_ADC1_Init+0x21c>)
 800445c:	f7ff fae6 	bl	8003a2c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8004460:	2200      	movs	r2, #0
 8004462:	2100      	movs	r1, #0
 8004464:	4853      	ldr	r0, [pc, #332]	@ (80045b4 <MX_ADC1_Init+0x21c>)
 8004466:	f7ff fb05 	bl	8003a74 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 800446a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800446e:	2100      	movs	r1, #0
 8004470:	4850      	ldr	r0, [pc, #320]	@ (80045b4 <MX_ADC1_Init+0x21c>)
 8004472:	f7ff fb23 	bl	8003abc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 8004476:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800447a:	2100      	movs	r1, #0
 800447c:	484d      	ldr	r0, [pc, #308]	@ (80045b4 <MX_ADC1_Init+0x21c>)
 800447e:	f7ff fb41 	bl	8003b04 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 8004482:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004486:	2100      	movs	r1, #0
 8004488:	484a      	ldr	r0, [pc, #296]	@ (80045b4 <MX_ADC1_Init+0x21c>)
 800448a:	f7ff fb5f 	bl	8003b4c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 800448e:	2100      	movs	r1, #0
 8004490:	4848      	ldr	r0, [pc, #288]	@ (80045b4 <MX_ADC1_Init+0x21c>)
 8004492:	f7ff fbc7 	bl	8003c24 <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8004496:	2300      	movs	r3, #0
 8004498:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800449a:	2300      	movs	r3, #0
 800449c:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800449e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044a2:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80044a4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80044a8:	4619      	mov	r1, r3
 80044aa:	4843      	ldr	r0, [pc, #268]	@ (80045b8 <MX_ADC1_Init+0x220>)
 80044ac:	f002 fb24 	bl	8006af8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80044b0:	2300      	movs	r3, #0
 80044b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 80044b4:	f44f 03e0 	mov.w	r3, #7340032	@ 0x700000
 80044b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80044be:	2302      	movs	r3, #2
 80044c0:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80044c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80044c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80044c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044cc:	4619      	mov	r1, r3
 80044ce:	483a      	ldr	r0, [pc, #232]	@ (80045b8 <MX_ADC1_Init+0x220>)
 80044d0:	f002 fb3e 	bl	8006b50 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 80044d4:	2100      	movs	r1, #0
 80044d6:	4838      	ldr	r0, [pc, #224]	@ (80045b8 <MX_ADC1_Init+0x220>)
 80044d8:	f7ff fa10 	bl	80038fc <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80044dc:	2300      	movs	r3, #0
 80044de:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80044e4:	f107 0318 	add.w	r3, r7, #24
 80044e8:	4619      	mov	r1, r3
 80044ea:	4834      	ldr	r0, [pc, #208]	@ (80045bc <MX_ADC1_Init+0x224>)
 80044ec:	f002 fabc 	bl	8006a68 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_10);
 80044f0:	220a      	movs	r2, #10
 80044f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044f6:	4830      	ldr	r0, [pc, #192]	@ (80045b8 <MX_ADC1_Init+0x220>)
 80044f8:	f7ff f9c3 	bl	8003882 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_15CYCLES);
 80044fc:	2201      	movs	r2, #1
 80044fe:	210a      	movs	r1, #10
 8004500:	482d      	ldr	r0, [pc, #180]	@ (80045b8 <MX_ADC1_Init+0x220>)
 8004502:	f7ff fa0e 	bl	8003922 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_11);
 8004506:	4a2e      	ldr	r2, [pc, #184]	@ (80045c0 <MX_ADC1_Init+0x228>)
 8004508:	f240 2105 	movw	r1, #517	@ 0x205
 800450c:	482a      	ldr	r0, [pc, #168]	@ (80045b8 <MX_ADC1_Init+0x220>)
 800450e:	f7ff f9b8 	bl	8003882 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_15CYCLES);
 8004512:	2201      	movs	r2, #1
 8004514:	492a      	ldr	r1, [pc, #168]	@ (80045c0 <MX_ADC1_Init+0x228>)
 8004516:	4828      	ldr	r0, [pc, #160]	@ (80045b8 <MX_ADC1_Init+0x220>)
 8004518:	f7ff fa03 	bl	8003922 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_12);
 800451c:	4a29      	ldr	r2, [pc, #164]	@ (80045c4 <MX_ADC1_Init+0x22c>)
 800451e:	f240 210a 	movw	r1, #522	@ 0x20a
 8004522:	4825      	ldr	r0, [pc, #148]	@ (80045b8 <MX_ADC1_Init+0x220>)
 8004524:	f7ff f9ad 	bl	8003882 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_15CYCLES);
 8004528:	2201      	movs	r2, #1
 800452a:	4926      	ldr	r1, [pc, #152]	@ (80045c4 <MX_ADC1_Init+0x22c>)
 800452c:	4822      	ldr	r0, [pc, #136]	@ (80045b8 <MX_ADC1_Init+0x220>)
 800452e:	f7ff f9f8 	bl	8003922 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_13);
 8004532:	4a25      	ldr	r2, [pc, #148]	@ (80045c8 <MX_ADC1_Init+0x230>)
 8004534:	f240 210f 	movw	r1, #527	@ 0x20f
 8004538:	481f      	ldr	r0, [pc, #124]	@ (80045b8 <MX_ADC1_Init+0x220>)
 800453a:	f7ff f9a2 	bl	8003882 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SAMPLINGTIME_15CYCLES);
 800453e:	2201      	movs	r2, #1
 8004540:	4921      	ldr	r1, [pc, #132]	@ (80045c8 <MX_ADC1_Init+0x230>)
 8004542:	481d      	ldr	r0, [pc, #116]	@ (80045b8 <MX_ADC1_Init+0x220>)
 8004544:	f7ff f9ed 	bl	8003922 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_14);
 8004548:	4a20      	ldr	r2, [pc, #128]	@ (80045cc <MX_ADC1_Init+0x234>)
 800454a:	f44f 7105 	mov.w	r1, #532	@ 0x214
 800454e:	481a      	ldr	r0, [pc, #104]	@ (80045b8 <MX_ADC1_Init+0x220>)
 8004550:	f7ff f997 	bl	8003882 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_15CYCLES);
 8004554:	2201      	movs	r2, #1
 8004556:	491d      	ldr	r1, [pc, #116]	@ (80045cc <MX_ADC1_Init+0x234>)
 8004558:	4817      	ldr	r0, [pc, #92]	@ (80045b8 <MX_ADC1_Init+0x220>)
 800455a:	f7ff f9e2 	bl	8003922 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_15);
 800455e:	4a1c      	ldr	r2, [pc, #112]	@ (80045d0 <MX_ADC1_Init+0x238>)
 8004560:	f240 2119 	movw	r1, #537	@ 0x219
 8004564:	4814      	ldr	r0, [pc, #80]	@ (80045b8 <MX_ADC1_Init+0x220>)
 8004566:	f7ff f98c 	bl	8003882 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_15CYCLES);
 800456a:	2201      	movs	r2, #1
 800456c:	4918      	ldr	r1, [pc, #96]	@ (80045d0 <MX_ADC1_Init+0x238>)
 800456e:	4812      	ldr	r0, [pc, #72]	@ (80045b8 <MX_ADC1_Init+0x220>)
 8004570:	f7ff f9d7 	bl	8003922 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_8);
 8004574:	4a17      	ldr	r2, [pc, #92]	@ (80045d4 <MX_ADC1_Init+0x23c>)
 8004576:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800457a:	480f      	ldr	r0, [pc, #60]	@ (80045b8 <MX_ADC1_Init+0x220>)
 800457c:	f7ff f981 	bl	8003882 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_15CYCLES);
 8004580:	2201      	movs	r2, #1
 8004582:	4914      	ldr	r1, [pc, #80]	@ (80045d4 <MX_ADC1_Init+0x23c>)
 8004584:	480c      	ldr	r0, [pc, #48]	@ (80045b8 <MX_ADC1_Init+0x220>)
 8004586:	f7ff f9cc 	bl	8003922 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_9);
 800458a:	4a13      	ldr	r2, [pc, #76]	@ (80045d8 <MX_ADC1_Init+0x240>)
 800458c:	f240 1105 	movw	r1, #261	@ 0x105
 8004590:	4809      	ldr	r0, [pc, #36]	@ (80045b8 <MX_ADC1_Init+0x220>)
 8004592:	f7ff f976 	bl	8003882 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_15CYCLES);
 8004596:	2201      	movs	r2, #1
 8004598:	490f      	ldr	r1, [pc, #60]	@ (80045d8 <MX_ADC1_Init+0x240>)
 800459a:	4807      	ldr	r0, [pc, #28]	@ (80045b8 <MX_ADC1_Init+0x220>)
 800459c:	f7ff f9c1 	bl	8003922 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80045a0:	bf00      	nop
 80045a2:	3748      	adds	r7, #72	@ 0x48
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40020800 	.word	0x40020800
 80045ac:	40020000 	.word	0x40020000
 80045b0:	40020400 	.word	0x40020400
 80045b4:	40026400 	.word	0x40026400
 80045b8:	40012000 	.word	0x40012000
 80045bc:	40012300 	.word	0x40012300
 80045c0:	0030000b 	.word	0x0030000b
 80045c4:	0060000c 	.word	0x0060000c
 80045c8:	0090000d 	.word	0x0090000d
 80045cc:	00c0000e 	.word	0x00c0000e
 80045d0:	00f0000f 	.word	0x00f0000f
 80045d4:	03800008 	.word	0x03800008
 80045d8:	03b00009 	.word	0x03b00009

080045dc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80045e2:	463b      	mov	r3, r7
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	609a      	str	r2, [r3, #8]
 80045ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80045ee:	4b21      	ldr	r3, [pc, #132]	@ (8004674 <MX_ADC3_Init+0x98>)
 80045f0:	4a21      	ldr	r2, [pc, #132]	@ (8004678 <MX_ADC3_Init+0x9c>)
 80045f2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80045f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004674 <MX_ADC3_Init+0x98>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80045fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004674 <MX_ADC3_Init+0x98>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8004600:	4b1c      	ldr	r3, [pc, #112]	@ (8004674 <MX_ADC3_Init+0x98>)
 8004602:	2200      	movs	r2, #0
 8004604:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8004606:	4b1b      	ldr	r3, [pc, #108]	@ (8004674 <MX_ADC3_Init+0x98>)
 8004608:	2200      	movs	r2, #0
 800460a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800460c:	4b19      	ldr	r3, [pc, #100]	@ (8004674 <MX_ADC3_Init+0x98>)
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004614:	4b17      	ldr	r3, [pc, #92]	@ (8004674 <MX_ADC3_Init+0x98>)
 8004616:	2200      	movs	r2, #0
 8004618:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800461a:	4b16      	ldr	r3, [pc, #88]	@ (8004674 <MX_ADC3_Init+0x98>)
 800461c:	4a17      	ldr	r2, [pc, #92]	@ (800467c <MX_ADC3_Init+0xa0>)
 800461e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004620:	4b14      	ldr	r3, [pc, #80]	@ (8004674 <MX_ADC3_Init+0x98>)
 8004622:	2200      	movs	r2, #0
 8004624:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8004626:	4b13      	ldr	r3, [pc, #76]	@ (8004674 <MX_ADC3_Init+0x98>)
 8004628:	2201      	movs	r2, #1
 800462a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800462c:	4b11      	ldr	r3, [pc, #68]	@ (8004674 <MX_ADC3_Init+0x98>)
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004634:	4b0f      	ldr	r3, [pc, #60]	@ (8004674 <MX_ADC3_Init+0x98>)
 8004636:	2201      	movs	r2, #1
 8004638:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800463a:	480e      	ldr	r0, [pc, #56]	@ (8004674 <MX_ADC3_Init+0x98>)
 800463c:	f001 f986 	bl	800594c <HAL_ADC_Init>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8004646:	f000 fd0f 	bl	8005068 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800464a:	2302      	movs	r3, #2
 800464c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800464e:	2301      	movs	r3, #1
 8004650:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004652:	2300      	movs	r3, #0
 8004654:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004656:	463b      	mov	r3, r7
 8004658:	4619      	mov	r1, r3
 800465a:	4806      	ldr	r0, [pc, #24]	@ (8004674 <MX_ADC3_Init+0x98>)
 800465c:	f001 f9ba 	bl	80059d4 <HAL_ADC_ConfigChannel>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8004666:	f000 fcff 	bl	8005068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800466a:	bf00      	nop
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20005dec 	.word	0x20005dec
 8004678:	40012200 	.word	0x40012200
 800467c:	0f000001 	.word	0x0f000001

08004680 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08c      	sub	sp, #48	@ 0x30
 8004684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8004686:	f107 0318 	add.w	r3, r7, #24
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	605a      	str	r2, [r3, #4]
 8004690:	609a      	str	r2, [r3, #8]
 8004692:	60da      	str	r2, [r3, #12]
 8004694:	611a      	str	r2, [r3, #16]
 8004696:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004698:	463b      	mov	r3, r7
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	605a      	str	r2, [r3, #4]
 80046a0:	609a      	str	r2, [r3, #8]
 80046a2:	60da      	str	r2, [r3, #12]
 80046a4:	611a      	str	r2, [r3, #16]
 80046a6:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80046a8:	2002      	movs	r0, #2
 80046aa:	f7ff fc0b 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = SENSOR_SCL_Pin|SENSOR_SDA_Pin;
 80046ae:	23c0      	movs	r3, #192	@ 0xc0
 80046b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80046b2:	2302      	movs	r3, #2
 80046b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80046b6:	2303      	movs	r3, #3
 80046b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80046ba:	2301      	movs	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80046c2:	2304      	movs	r3, #4
 80046c4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046c6:	463b      	mov	r3, r7
 80046c8:	4619      	mov	r1, r3
 80046ca:	4816      	ldr	r0, [pc, #88]	@ (8004724 <MX_I2C1_Init+0xa4>)
 80046cc:	f002 fbcd 	bl	8006e6a <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80046d0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80046d4:	f7ff fc0e 	bl	8003ef4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 80046d8:	4813      	ldr	r0, [pc, #76]	@ (8004728 <MX_I2C1_Init+0xa8>)
 80046da:	f7ff fb06 	bl	8003cea <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80046de:	4812      	ldr	r0, [pc, #72]	@ (8004728 <MX_I2C1_Init+0xa8>)
 80046e0:	f7ff fae0 	bl	8003ca4 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80046e4:	4810      	ldr	r0, [pc, #64]	@ (8004728 <MX_I2C1_Init+0xa8>)
 80046e6:	f7ff facd 	bl	8003c84 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80046ee:	4b0f      	ldr	r3, [pc, #60]	@ (800472c <MX_I2C1_Init+0xac>)
 80046f0:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80046f2:	2300      	movs	r3, #0
 80046f4:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80046fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8004700:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004704:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8004706:	f107 0318 	add.w	r3, r7, #24
 800470a:	4619      	mov	r1, r3
 800470c:	4806      	ldr	r0, [pc, #24]	@ (8004728 <MX_I2C1_Init+0xa8>)
 800470e:	f002 fd83 	bl	8007218 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8004712:	2100      	movs	r1, #0
 8004714:	4804      	ldr	r0, [pc, #16]	@ (8004728 <MX_I2C1_Init+0xa8>)
 8004716:	f7ff fad5 	bl	8003cc4 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800471a:	bf00      	nop
 800471c:	3730      	adds	r7, #48	@ 0x30
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40020400 	.word	0x40020400
 8004728:	40005400 	.word	0x40005400
 800472c:	000186a0 	.word	0x000186a0

08004730 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08c      	sub	sp, #48	@ 0x30
 8004734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8004736:	f107 0318 	add.w	r3, r7, #24
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	605a      	str	r2, [r3, #4]
 8004740:	609a      	str	r2, [r3, #8]
 8004742:	60da      	str	r2, [r3, #12]
 8004744:	611a      	str	r2, [r3, #16]
 8004746:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004748:	463b      	mov	r3, r7
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	605a      	str	r2, [r3, #4]
 8004750:	609a      	str	r2, [r3, #8]
 8004752:	60da      	str	r2, [r3, #12]
 8004754:	611a      	str	r2, [r3, #16]
 8004756:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004758:	2002      	movs	r0, #2
 800475a:	f7ff fbb3 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = EXP_SCL_Pin|EXP_SDA_Pin;
 800475e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004762:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004764:	2302      	movs	r3, #2
 8004766:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004768:	2303      	movs	r3, #3
 800476a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800476c:	2301      	movs	r3, #1
 800476e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004770:	2300      	movs	r3, #0
 8004772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8004774:	2304      	movs	r3, #4
 8004776:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004778:	463b      	mov	r3, r7
 800477a:	4619      	mov	r1, r3
 800477c:	4828      	ldr	r0, [pc, #160]	@ (8004820 <MX_I2C2_Init+0xf0>)
 800477e:	f002 fb74 	bl	8006e6a <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8004782:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8004786:	f7ff fbb5 	bl	8003ef4 <LL_APB1_GRP1_EnableClock>

  /* I2C2 interrupt Init */
  NVIC_SetPriority(I2C2_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800478a:	f7fe fff1 	bl	8003770 <__NVIC_GetPriorityGrouping>
 800478e:	4603      	mov	r3, r0
 8004790:	2200      	movs	r2, #0
 8004792:	2100      	movs	r1, #0
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff f841 	bl	800381c <NVIC_EncodePriority>
 800479a:	4603      	mov	r3, r0
 800479c:	4619      	mov	r1, r3
 800479e:	2021      	movs	r0, #33	@ 0x21
 80047a0:	f7ff f812 	bl	80037c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C2_EV_IRQn);
 80047a4:	2021      	movs	r0, #33	@ 0x21
 80047a6:	f7fe fff1 	bl	800378c <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C2_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80047aa:	f7fe ffe1 	bl	8003770 <__NVIC_GetPriorityGrouping>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2200      	movs	r2, #0
 80047b2:	2100      	movs	r1, #0
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff f831 	bl	800381c <NVIC_EncodePriority>
 80047ba:	4603      	mov	r3, r0
 80047bc:	4619      	mov	r1, r3
 80047be:	2022      	movs	r0, #34	@ 0x22
 80047c0:	f7ff f802 	bl	80037c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C2_ER_IRQn);
 80047c4:	2022      	movs	r0, #34	@ 0x22
 80047c6:	f7fe ffe1 	bl	800378c <__NVIC_EnableIRQ>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 80047ca:	4816      	ldr	r0, [pc, #88]	@ (8004824 <MX_I2C2_Init+0xf4>)
 80047cc:	f7ff fa8d 	bl	8003cea <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 80047d0:	4814      	ldr	r0, [pc, #80]	@ (8004824 <MX_I2C2_Init+0xf4>)
 80047d2:	f7ff fa67 	bl	8003ca4 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 80047d6:	4813      	ldr	r0, [pc, #76]	@ (8004824 <MX_I2C2_Init+0xf4>)
 80047d8:	f7ff fa54 	bl	8003c84 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80047dc:	2300      	movs	r3, #0
 80047de:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80047e0:	4b11      	ldr	r3, [pc, #68]	@ (8004828 <MX_I2C2_Init+0xf8>)
 80047e2:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80047e4:	2300      	movs	r3, #0
 80047e6:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 36;
 80047e8:	2324      	movs	r3, #36	@ 0x24
 80047ea:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80047ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80047f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80047f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 80047f8:	f107 0318 	add.w	r3, r7, #24
 80047fc:	4619      	mov	r1, r3
 80047fe:	4809      	ldr	r0, [pc, #36]	@ (8004824 <MX_I2C2_Init+0xf4>)
 8004800:	f002 fd0a 	bl	8007218 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 8004804:	2100      	movs	r1, #0
 8004806:	4807      	ldr	r0, [pc, #28]	@ (8004824 <MX_I2C2_Init+0xf4>)
 8004808:	f7ff fa5c 	bl	8003cc4 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */
  LL_I2C_EnableIT_EVT(I2C2);
 800480c:	4805      	ldr	r0, [pc, #20]	@ (8004824 <MX_I2C2_Init+0xf4>)
 800480e:	f7ff fa7c 	bl	8003d0a <LL_I2C_EnableIT_EVT>
  //  LL_I2C_EnableIT_ERR(I2C2);
  LL_I2C_Enable(I2C2);
 8004812:	4804      	ldr	r0, [pc, #16]	@ (8004824 <MX_I2C2_Init+0xf4>)
 8004814:	f7ff fa26 	bl	8003c64 <LL_I2C_Enable>
  /* USER CODE END I2C2_Init 2 */

}
 8004818:	bf00      	nop
 800481a:	3730      	adds	r7, #48	@ 0x30
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40020400 	.word	0x40020400
 8004824:	40005800 	.word	0x40005800
 8004828:	000186a0 	.word	0x000186a0

0800482c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b090      	sub	sp, #64	@ 0x40
 8004830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004832:	f107 0318 	add.w	r3, r7, #24
 8004836:	2228      	movs	r2, #40	@ 0x28
 8004838:	2100      	movs	r1, #0
 800483a:	4618      	mov	r0, r3
 800483c:	f003 ffe6 	bl	800880c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004840:	463b      	mov	r3, r7
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	605a      	str	r2, [r3, #4]
 8004848:	609a      	str	r2, [r3, #8]
 800484a:	60da      	str	r2, [r3, #12]
 800484c:	611a      	str	r2, [r3, #16]
 800484e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8004850:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004854:	f7ff fb66 	bl	8003f24 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004858:	2001      	movs	r0, #1
 800485a:	f7ff fb33 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LASRR_SCK_Pin|LASER_MISO_Pin|LASER_MOSI_Pin;
 800485e:	23e0      	movs	r3, #224	@ 0xe0
 8004860:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004862:	2302      	movs	r3, #2
 8004864:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004866:	2303      	movs	r3, #3
 8004868:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800486e:	2300      	movs	r3, #0
 8004870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004872:	2305      	movs	r3, #5
 8004874:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004876:	463b      	mov	r3, r7
 8004878:	4619      	mov	r1, r3
 800487a:	4815      	ldr	r0, [pc, #84]	@ (80048d0 <MX_SPI1_Init+0xa4>)
 800487c:	f002 faf5 	bl	8006e6a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004880:	2300      	movs	r3, #0
 8004882:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004884:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8004888:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800488a:	2300      	movs	r3, #0
 800488c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800488e:	2300      	movs	r3, #0
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004892:	2301      	movs	r3, #1
 8004894:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004896:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800489a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 800489c:	2320      	movs	r3, #32
 800489e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80048a0:	2300      	movs	r3, #0
 80048a2:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80048a4:	2300      	movs	r3, #0
 80048a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80048a8:	230a      	movs	r3, #10
 80048aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80048ac:	f107 0318 	add.w	r3, r7, #24
 80048b0:	4619      	mov	r1, r3
 80048b2:	4808      	ldr	r0, [pc, #32]	@ (80048d4 <MX_SPI1_Init+0xa8>)
 80048b4:	f002 fe3f 	bl	8007536 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80048b8:	2100      	movs	r1, #0
 80048ba:	4806      	ldr	r0, [pc, #24]	@ (80048d4 <MX_SPI1_Init+0xa8>)
 80048bc:	f7ff fba4 	bl	8004008 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 80048c0:	4804      	ldr	r0, [pc, #16]	@ (80048d4 <MX_SPI1_Init+0xa8>)
 80048c2:	f7ff fb91 	bl	8003fe8 <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 80048c6:	bf00      	nop
 80048c8:	3740      	adds	r7, #64	@ 0x40
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40020000 	.word	0x40020000
 80048d4:	40013000 	.word	0x40013000

080048d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b090      	sub	sp, #64	@ 0x40
 80048dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80048de:	f107 0318 	add.w	r3, r7, #24
 80048e2:	2228      	movs	r2, #40	@ 0x28
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f003 ff90 	bl	800880c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ec:	463b      	mov	r3, r7
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	605a      	str	r2, [r3, #4]
 80048f4:	609a      	str	r2, [r3, #8]
 80048f6:	60da      	str	r2, [r3, #12]
 80048f8:	611a      	str	r2, [r3, #16]
 80048fa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80048fc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004900:	f7ff faf8 	bl	8003ef4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004904:	2002      	movs	r0, #2
 8004906:	f7ff fadd 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = PHOTO_SCK_Pin|PHOTO_MISO_Pin|PHOTO_MOSI_Pin;
 800490a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800490e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004910:	2302      	movs	r3, #2
 8004912:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004914:	2303      	movs	r3, #3
 8004916:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004920:	2305      	movs	r3, #5
 8004922:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004924:	463b      	mov	r3, r7
 8004926:	4619      	mov	r1, r3
 8004928:	4814      	ldr	r0, [pc, #80]	@ (800497c <MX_SPI2_Init+0xa4>)
 800492a:	f002 fa9e 	bl	8006e6a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004932:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8004936:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004938:	2300      	movs	r3, #0
 800493a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800493c:	2300      	movs	r3, #0
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004940:	2301      	movs	r3, #1
 8004942:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004944:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800494a:	2318      	movs	r3, #24
 800494c:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800494e:	2300      	movs	r3, #0
 8004950:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004952:	2300      	movs	r3, #0
 8004954:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8004956:	230a      	movs	r3, #10
 8004958:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800495a:	f107 0318 	add.w	r3, r7, #24
 800495e:	4619      	mov	r1, r3
 8004960:	4807      	ldr	r0, [pc, #28]	@ (8004980 <MX_SPI2_Init+0xa8>)
 8004962:	f002 fde8 	bl	8007536 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8004966:	2100      	movs	r1, #0
 8004968:	4805      	ldr	r0, [pc, #20]	@ (8004980 <MX_SPI2_Init+0xa8>)
 800496a:	f7ff fb4d 	bl	8004008 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */
  LL_SPI_Enable(SPI2);
 800496e:	4804      	ldr	r0, [pc, #16]	@ (8004980 <MX_SPI2_Init+0xa8>)
 8004970:	f7ff fb3a 	bl	8003fe8 <LL_SPI_Enable>
  /* USER CODE END SPI2_Init 2 */

}
 8004974:	bf00      	nop
 8004976:	3740      	adds	r7, #64	@ 0x40
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40020400 	.word	0x40020400
 8004980:	40003800 	.word	0x40003800

08004984 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b090      	sub	sp, #64	@ 0x40
 8004988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800498a:	f107 0318 	add.w	r3, r7, #24
 800498e:	2228      	movs	r2, #40	@ 0x28
 8004990:	2100      	movs	r1, #0
 8004992:	4618      	mov	r0, r3
 8004994:	f003 ff3a 	bl	800880c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004998:	463b      	mov	r3, r7
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	605a      	str	r2, [r3, #4]
 80049a0:	609a      	str	r2, [r3, #8]
 80049a2:	60da      	str	r2, [r3, #12]
 80049a4:	611a      	str	r2, [r3, #16]
 80049a6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80049a8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80049ac:	f7ff faa2 	bl	8003ef4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80049b0:	2004      	movs	r0, #4
 80049b2:	f7ff fa87 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = TEC_SCK_Pin|TEC_MISO_Pin|TEC_MOSI_Pin;
 80049b6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80049ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80049bc:	2302      	movs	r3, #2
 80049be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80049c0:	2303      	movs	r3, #3
 80049c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049c8:	2300      	movs	r3, #0
 80049ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80049cc:	2306      	movs	r3, #6
 80049ce:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049d0:	463b      	mov	r3, r7
 80049d2:	4619      	mov	r1, r3
 80049d4:	4814      	ldr	r0, [pc, #80]	@ (8004a28 <MX_SPI3_Init+0xa4>)
 80049d6:	f002 fa48 	bl	8006e6a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80049da:	2300      	movs	r3, #0
 80049dc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80049de:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80049e2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80049e4:	2300      	movs	r3, #0
 80049e6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80049e8:	2300      	movs	r3, #0
 80049ea:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80049f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80049f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80049f6:	2318      	movs	r3, #24
 80049f8:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80049fa:	2300      	movs	r3, #0
 80049fc:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80049fe:	2300      	movs	r3, #0
 8004a00:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8004a02:	230a      	movs	r3, #10
 8004a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8004a06:	f107 0318 	add.w	r3, r7, #24
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4807      	ldr	r0, [pc, #28]	@ (8004a2c <MX_SPI3_Init+0xa8>)
 8004a0e:	f002 fd92 	bl	8007536 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8004a12:	2100      	movs	r1, #0
 8004a14:	4805      	ldr	r0, [pc, #20]	@ (8004a2c <MX_SPI3_Init+0xa8>)
 8004a16:	f7ff faf7 	bl	8004008 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */
  LL_SPI_Enable(SPI3);
 8004a1a:	4804      	ldr	r0, [pc, #16]	@ (8004a2c <MX_SPI3_Init+0xa8>)
 8004a1c:	f7ff fae4 	bl	8003fe8 <LL_SPI_Enable>
  /* USER CODE END SPI3_Init 2 */

}
 8004a20:	bf00      	nop
 8004a22:	3740      	adds	r7, #64	@ 0x40
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40020800 	.word	0x40020800
 8004a2c:	40003c00 	.word	0x40003c00

08004a30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b09a      	sub	sp, #104	@ 0x68
 8004a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004a36:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	605a      	str	r2, [r3, #4]
 8004a40:	609a      	str	r2, [r3, #8]
 8004a42:	60da      	str	r2, [r3, #12]
 8004a44:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004a46:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f003 fedc 	bl	800880c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8004a54:	f107 031c 	add.w	r3, r7, #28
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	605a      	str	r2, [r3, #4]
 8004a5e:	609a      	str	r2, [r3, #8]
 8004a60:	60da      	str	r2, [r3, #12]
 8004a62:	611a      	str	r2, [r3, #16]
 8004a64:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a66:	1d3b      	adds	r3, r7, #4
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	60da      	str	r2, [r3, #12]
 8004a72:	611a      	str	r2, [r3, #16]
 8004a74:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8004a76:	2001      	movs	r0, #1
 8004a78:	f7ff fa54 	bl	8003f24 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8004a7c:	2353      	movs	r3, #83	@ 0x53
 8004a7e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004a82:	2300      	movs	r3, #0
 8004a84:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.Autoreload = 9999;
 8004a86:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	663b      	str	r3, [r7, #96]	@ 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	667b      	str	r3, [r7, #100]	@ 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8004a94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004a98:	4619      	mov	r1, r3
 8004a9a:	482f      	ldr	r0, [pc, #188]	@ (8004b58 <MX_TIM1_Init+0x128>)
 8004a9c:	f002 fe10 	bl	80076c0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8004aa0:	482d      	ldr	r0, [pc, #180]	@ (8004b58 <MX_TIM1_Init+0x128>)
 8004aa2:	f7ff fac4 	bl	800402e <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	482b      	ldr	r0, [pc, #172]	@ (8004b58 <MX_TIM1_Init+0x128>)
 8004aaa:	f7ff fb5b 	bl	8004164 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8004aae:	2101      	movs	r1, #1
 8004ab0:	4829      	ldr	r0, [pc, #164]	@ (8004b58 <MX_TIM1_Init+0x128>)
 8004ab2:	f7ff fb13 	bl	80040dc <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004ab6:	2360      	movs	r3, #96	@ 0x60
 8004ab8:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004aca:	2300      	movs	r3, #0
 8004acc:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	653b      	str	r3, [r7, #80]	@ 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004ad6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004ada:	461a      	mov	r2, r3
 8004adc:	2101      	movs	r1, #1
 8004ade:	481e      	ldr	r0, [pc, #120]	@ (8004b58 <MX_TIM1_Init+0x128>)
 8004ae0:	f002 fe88 	bl	80077f4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	481c      	ldr	r0, [pc, #112]	@ (8004b58 <MX_TIM1_Init+0x128>)
 8004ae8:	f7ff fab2 	bl	8004050 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8004aec:	2100      	movs	r1, #0
 8004aee:	481a      	ldr	r0, [pc, #104]	@ (8004b58 <MX_TIM1_Init+0x128>)
 8004af0:	f7ff fb4d 	bl	800418e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8004af4:	4818      	ldr	r0, [pc, #96]	@ (8004b58 <MX_TIM1_Init+0x128>)
 8004af6:	f7ff fb5d 	bl	80041b4 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8004afe:	2300      	movs	r3, #0
 8004b00:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8004b02:	2300      	movs	r3, #0
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8004b06:	2300      	movs	r3, #0
 8004b08:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8004b10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8004b16:	2300      	movs	r3, #0
 8004b18:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8004b1a:	f107 031c 	add.w	r3, r7, #28
 8004b1e:	4619      	mov	r1, r3
 8004b20:	480d      	ldr	r0, [pc, #52]	@ (8004b58 <MX_TIM1_Init+0x128>)
 8004b22:	f002 fea8 	bl	8007876 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8004b26:	2010      	movs	r0, #16
 8004b28:	f7ff f9cc 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PE9   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = IR_LED_PWM_Pin;
 8004b2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004b32:	2302      	movs	r3, #2
 8004b34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8004b42:	2301      	movs	r3, #1
 8004b44:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(IR_LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8004b46:	1d3b      	adds	r3, r7, #4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4804      	ldr	r0, [pc, #16]	@ (8004b5c <MX_TIM1_Init+0x12c>)
 8004b4c:	f002 f98d 	bl	8006e6a <LL_GPIO_Init>

}
 8004b50:	bf00      	nop
 8004b52:	3768      	adds	r7, #104	@ 0x68
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	40021000 	.word	0x40021000

08004b60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004b66:	1d3b      	adds	r3, r7, #4
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	605a      	str	r2, [r3, #4]
 8004b6e:	609a      	str	r2, [r3, #8]
 8004b70:	60da      	str	r2, [r3, #12]
 8004b72:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8004b74:	2002      	movs	r0, #2
 8004b76:	f7ff f9bd 	bl	8003ef4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8004b7a:	2353      	movs	r3, #83	@ 0x53
 8004b7c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9999;
 8004b82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004b86:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8004b8c:	1d3b      	adds	r3, r7, #4
 8004b8e:	4619      	mov	r1, r3
 8004b90:	480a      	ldr	r0, [pc, #40]	@ (8004bbc <MX_TIM3_Init+0x5c>)
 8004b92:	f002 fd95 	bl	80076c0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8004b96:	4809      	ldr	r0, [pc, #36]	@ (8004bbc <MX_TIM3_Init+0x5c>)
 8004b98:	f7ff fa49 	bl	800402e <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4807      	ldr	r0, [pc, #28]	@ (8004bbc <MX_TIM3_Init+0x5c>)
 8004ba0:	f7ff fae0 	bl	8004164 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	4805      	ldr	r0, [pc, #20]	@ (8004bbc <MX_TIM3_Init+0x5c>)
 8004ba8:	f7ff faf1 	bl	800418e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8004bac:	4803      	ldr	r0, [pc, #12]	@ (8004bbc <MX_TIM3_Init+0x5c>)
 8004bae:	f7ff fb01 	bl	80041b4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004bb2:	bf00      	nop
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40000400 	.word	0x40000400

08004bc0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08a      	sub	sp, #40	@ 0x28
 8004bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bc6:	f107 0320 	add.w	r3, r7, #32
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bd0:	1d3b      	adds	r3, r7, #4
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	605a      	str	r2, [r3, #4]
 8004bd8:	609a      	str	r2, [r3, #8]
 8004bda:	60da      	str	r2, [r3, #12]
 8004bdc:	611a      	str	r2, [r3, #16]
 8004bde:	615a      	str	r2, [r3, #20]
 8004be0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004be2:	4b32      	ldr	r3, [pc, #200]	@ (8004cac <MX_TIM4_Init+0xec>)
 8004be4:	4a32      	ldr	r2, [pc, #200]	@ (8004cb0 <MX_TIM4_Init+0xf0>)
 8004be6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004be8:	4b30      	ldr	r3, [pc, #192]	@ (8004cac <MX_TIM4_Init+0xec>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bee:	4b2f      	ldr	r3, [pc, #188]	@ (8004cac <MX_TIM4_Init+0xec>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8004cac <MX_TIM4_Init+0xec>)
 8004bf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bfa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8004cac <MX_TIM4_Init+0xec>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c02:	4b2a      	ldr	r3, [pc, #168]	@ (8004cac <MX_TIM4_Init+0xec>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8004c08:	4828      	ldr	r0, [pc, #160]	@ (8004cac <MX_TIM4_Init+0xec>)
 8004c0a:	f001 fb83 	bl	8006314 <HAL_TIM_OC_Init>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004c14:	f000 fa28 	bl	8005068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004c20:	f107 0320 	add.w	r3, r7, #32
 8004c24:	4619      	mov	r1, r3
 8004c26:	4821      	ldr	r0, [pc, #132]	@ (8004cac <MX_TIM4_Init+0xec>)
 8004c28:	f001 fe7c 	bl	8006924 <HAL_TIMEx_MasterConfigSynchronization>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004c32:	f000 fa19 	bl	8005068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004c36:	2300      	movs	r3, #0
 8004c38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c46:	1d3b      	adds	r3, r7, #4
 8004c48:	2200      	movs	r2, #0
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4817      	ldr	r0, [pc, #92]	@ (8004cac <MX_TIM4_Init+0xec>)
 8004c4e:	f001 fbb1 	bl	80063b4 <HAL_TIM_OC_ConfigChannel>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004c58:	f000 fa06 	bl	8005068 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c5c:	1d3b      	adds	r3, r7, #4
 8004c5e:	2204      	movs	r2, #4
 8004c60:	4619      	mov	r1, r3
 8004c62:	4812      	ldr	r0, [pc, #72]	@ (8004cac <MX_TIM4_Init+0xec>)
 8004c64:	f001 fba6 	bl	80063b4 <HAL_TIM_OC_ConfigChannel>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004c6e:	f000 f9fb 	bl	8005068 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c72:	1d3b      	adds	r3, r7, #4
 8004c74:	2208      	movs	r2, #8
 8004c76:	4619      	mov	r1, r3
 8004c78:	480c      	ldr	r0, [pc, #48]	@ (8004cac <MX_TIM4_Init+0xec>)
 8004c7a:	f001 fb9b 	bl	80063b4 <HAL_TIM_OC_ConfigChannel>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8004c84:	f000 f9f0 	bl	8005068 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c88:	1d3b      	adds	r3, r7, #4
 8004c8a:	220c      	movs	r2, #12
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4807      	ldr	r0, [pc, #28]	@ (8004cac <MX_TIM4_Init+0xec>)
 8004c90:	f001 fb90 	bl	80063b4 <HAL_TIM_OC_ConfigChannel>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8004c9a:	f000 f9e5 	bl	8005068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004c9e:	4803      	ldr	r0, [pc, #12]	@ (8004cac <MX_TIM4_Init+0xec>)
 8004ca0:	f000 fa76 	bl	8005190 <HAL_TIM_MspPostInit>

}
 8004ca4:	bf00      	nop
 8004ca6:	3728      	adds	r7, #40	@ 0x28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	20005e34 	.word	0x20005e34
 8004cb0:	40000800 	.word	0x40000800

08004cb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08e      	sub	sp, #56	@ 0x38
 8004cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004cba:	f107 031c 	add.w	r3, r7, #28
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	605a      	str	r2, [r3, #4]
 8004cc4:	609a      	str	r2, [r3, #8]
 8004cc6:	60da      	str	r2, [r3, #12]
 8004cc8:	611a      	str	r2, [r3, #16]
 8004cca:	615a      	str	r2, [r3, #20]
 8004ccc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cce:	1d3b      	adds	r3, r7, #4
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	605a      	str	r2, [r3, #4]
 8004cd6:	609a      	str	r2, [r3, #8]
 8004cd8:	60da      	str	r2, [r3, #12]
 8004cda:	611a      	str	r2, [r3, #16]
 8004cdc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8004cde:	2010      	movs	r0, #16
 8004ce0:	f7ff f920 	bl	8003f24 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	f7ff f8ed 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = EXP_RS485_TX_Pin|EXP_RS485_RX_Pin;
 8004cea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004cee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004d00:	2307      	movs	r3, #7
 8004d02:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d04:	1d3b      	adds	r3, r7, #4
 8004d06:	4619      	mov	r1, r3
 8004d08:	4818      	ldr	r0, [pc, #96]	@ (8004d6c <MX_USART1_UART_Init+0xb8>)
 8004d0a:	f002 f8ae 	bl	8006e6a <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004d0e:	f7fe fd2f 	bl	8003770 <__NVIC_GetPriorityGrouping>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2200      	movs	r2, #0
 8004d16:	2100      	movs	r1, #0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fe fd7f 	bl	800381c <NVIC_EncodePriority>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4619      	mov	r1, r3
 8004d22:	2025      	movs	r0, #37	@ 0x25
 8004d24:	f7fe fd50 	bl	80037c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8004d28:	2025      	movs	r0, #37	@ 0x25
 8004d2a:	f7fe fd2f 	bl	800378c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004d2e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004d32:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004d34:	2300      	movs	r3, #0
 8004d36:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004d40:	230c      	movs	r3, #12
 8004d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004d44:	2300      	movs	r3, #0
 8004d46:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8004d4c:	f107 031c 	add.w	r3, r7, #28
 8004d50:	4619      	mov	r1, r3
 8004d52:	4807      	ldr	r0, [pc, #28]	@ (8004d70 <MX_USART1_UART_Init+0xbc>)
 8004d54:	f003 f9de 	bl	8008114 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8004d58:	4805      	ldr	r0, [pc, #20]	@ (8004d70 <MX_USART1_UART_Init+0xbc>)
 8004d5a:	f7ff fa4b 	bl	80041f4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8004d5e:	4804      	ldr	r0, [pc, #16]	@ (8004d70 <MX_USART1_UART_Init+0xbc>)
 8004d60:	f7ff fa38 	bl	80041d4 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d64:	bf00      	nop
 8004d66:	3738      	adds	r7, #56	@ 0x38
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40020000 	.word	0x40020000
 8004d70:	40011000 	.word	0x40011000

08004d74 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08e      	sub	sp, #56	@ 0x38
 8004d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004d7a:	f107 031c 	add.w	r3, r7, #28
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	605a      	str	r2, [r3, #4]
 8004d84:	609a      	str	r2, [r3, #8]
 8004d86:	60da      	str	r2, [r3, #12]
 8004d88:	611a      	str	r2, [r3, #16]
 8004d8a:	615a      	str	r2, [r3, #20]
 8004d8c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d8e:	1d3b      	adds	r3, r7, #4
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	605a      	str	r2, [r3, #4]
 8004d96:	609a      	str	r2, [r3, #8]
 8004d98:	60da      	str	r2, [r3, #12]
 8004d9a:	611a      	str	r2, [r3, #16]
 8004d9c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8004d9e:	2020      	movs	r0, #32
 8004da0:	f7ff f8c0 	bl	8003f24 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004da4:	2004      	movs	r0, #4
 8004da6:	f7ff f88d 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = EXP_UART_TX_Pin|EXP_UART_RX_Pin;
 8004daa:	23c0      	movs	r3, #192	@ 0xc0
 8004dac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004dae:	2302      	movs	r3, #2
 8004db0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004db2:	2303      	movs	r3, #3
 8004db4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dc2:	1d3b      	adds	r3, r7, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4819      	ldr	r0, [pc, #100]	@ (8004e2c <MX_USART6_UART_Init+0xb8>)
 8004dc8:	f002 f84f 	bl	8006e6a <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004dcc:	f7fe fcd0 	bl	8003770 <__NVIC_GetPriorityGrouping>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe fd20 	bl	800381c <NVIC_EncodePriority>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4619      	mov	r1, r3
 8004de0:	2047      	movs	r0, #71	@ 0x47
 8004de2:	f7fe fcf1 	bl	80037c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8004de6:	2047      	movs	r0, #71	@ 0x47
 8004de8:	f7fe fcd0 	bl	800378c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004dec:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004df0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004df2:	2300      	movs	r3, #0
 8004df4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004df6:	2300      	movs	r3, #0
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004dfe:	230c      	movs	r3, #12
 8004e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004e06:	2300      	movs	r3, #0
 8004e08:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8004e0a:	f107 031c 	add.w	r3, r7, #28
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4807      	ldr	r0, [pc, #28]	@ (8004e30 <MX_USART6_UART_Init+0xbc>)
 8004e12:	f003 f97f 	bl	8008114 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8004e16:	4806      	ldr	r0, [pc, #24]	@ (8004e30 <MX_USART6_UART_Init+0xbc>)
 8004e18:	f7ff f9ec 	bl	80041f4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8004e1c:	4804      	ldr	r0, [pc, #16]	@ (8004e30 <MX_USART6_UART_Init+0xbc>)
 8004e1e:	f7ff f9d9 	bl	80041d4 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004e22:	bf00      	nop
 8004e24:	3738      	adds	r7, #56	@ 0x38
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40020800 	.word	0x40020800
 8004e30:	40011400 	.word	0x40011400

08004e34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8004e38:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8004e3c:	f7ff f842 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004e40:	f7fe fc96 	bl	8003770 <__NVIC_GetPriorityGrouping>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2200      	movs	r2, #0
 8004e48:	2100      	movs	r1, #0
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fe fce6 	bl	800381c <NVIC_EncodePriority>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4619      	mov	r1, r3
 8004e54:	2038      	movs	r0, #56	@ 0x38
 8004e56:	f7fe fcb7 	bl	80037c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004e5a:	2038      	movs	r0, #56	@ 0x38
 8004e5c:	f7fe fc96 	bl	800378c <__NVIC_EnableIRQ>

}
 8004e60:	bf00      	nop
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e6a:	463b      	mov	r3, r7
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	605a      	str	r2, [r3, #4]
 8004e72:	609a      	str	r2, [r3, #8]
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	611a      	str	r2, [r3, #16]
 8004e78:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8004e7a:	2010      	movs	r0, #16
 8004e7c:	f7ff f822 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004e80:	2004      	movs	r0, #4
 8004e82:	f7ff f81f 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8004e86:	2080      	movs	r0, #128	@ 0x80
 8004e88:	f7ff f81c 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004e8c:	2001      	movs	r0, #1
 8004e8e:	f7ff f819 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004e92:	2002      	movs	r0, #2
 8004e94:	f7ff f816 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8004e98:	2008      	movs	r0, #8
 8004e9a:	f7ff f813 	bl	8003ec4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, TEC_3_SWEN_Pin|TEC_4_SWEN_Pin|TEC_2_SWEN_Pin|TEC_1_SWEN_Pin
 8004e9e:	f640 417c 	movw	r1, #3196	@ 0xc7c
 8004ea2:	4860      	ldr	r0, [pc, #384]	@ (8005024 <MX_GPIO_Init+0x1c0>)
 8004ea4:	f7ff f9ec 	bl	8004280 <LL_GPIO_ResetOutputPin>
                          |TEC_1_EN_Pin|LED_G_Pin|LED_B_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, TEC_2_EN_Pin|TEC_3_EN_Pin|TEC_4_EN_Pin);
 8004ea8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8004eac:	485e      	ldr	r0, [pc, #376]	@ (8005028 <MX_GPIO_Init+0x1c4>)
 8004eae:	f7ff f9e7 	bl	8004280 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8004eb2:	2102      	movs	r1, #2
 8004eb4:	485d      	ldr	r0, [pc, #372]	@ (800502c <MX_GPIO_Init+0x1c8>)
 8004eb6:	f7ff f9e3 	bl	8004280 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, EXP_RS485_NRE_Pin|FRAM_CS_Pin|EF_5_EN_Pin|TEC_ADC_CS_Pin);
 8004eba:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8004ebe:	485c      	ldr	r0, [pc, #368]	@ (8005030 <MX_GPIO_Init+0x1cc>)
 8004ec0:	f7ff f9de 	bl	8004280 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, SENSOR2_EN_Pin|SENSOR1_EN_Pin);
 8004ec4:	2130      	movs	r1, #48	@ 0x30
 8004ec6:	485b      	ldr	r0, [pc, #364]	@ (8005034 <MX_GPIO_Init+0x1d0>)
 8004ec8:	f7ff f9da 	bl	8004280 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, LASER_DAC_CS_Pin|LASER_SW_EXT_CS_Pin|LASER_SW_INT_CS_Pin|LASER_DAC_LATCH_Pin
 8004ecc:	f24f 0103 	movw	r1, #61443	@ 0xf003
 8004ed0:	4854      	ldr	r0, [pc, #336]	@ (8005024 <MX_GPIO_Init+0x1c0>)
 8004ed2:	f7ff f9c7 	bl	8004264 <LL_GPIO_SetOutputPin>
                          |TEC_2_CS_Pin|TEC_1_CS_Pin);

  /**/
  LL_GPIO_SetOutputPin(GPIOB, EXP_RS485_DE_Pin|TEC_4_CS_Pin|TEC_3_CS_Pin);
 8004ed6:	f44f 5198 	mov.w	r1, #4864	@ 0x1300
 8004eda:	4856      	ldr	r0, [pc, #344]	@ (8005034 <MX_GPIO_Init+0x1d0>)
 8004edc:	f7ff f9c2 	bl	8004264 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOD, PHOTO_PD_CS_Pin|PHOTO_ADC_CS_Pin|PHOTO_ADC_CONV_Pin);
 8004ee0:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8004ee4:	4852      	ldr	r0, [pc, #328]	@ (8005030 <MX_GPIO_Init+0x1cc>)
 8004ee6:	f7ff f9bd 	bl	8004264 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = TEC_3_SWEN_Pin|TEC_1_SWEN_Pin;
 8004eea:	2324      	movs	r3, #36	@ 0x24
 8004eec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8004efa:	2302      	movs	r3, #2
 8004efc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004efe:	463b      	mov	r3, r7
 8004f00:	4619      	mov	r1, r3
 8004f02:	4848      	ldr	r0, [pc, #288]	@ (8005024 <MX_GPIO_Init+0x1c0>)
 8004f04:	f001 ffb1 	bl	8006e6a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_4_SWEN_Pin|TEC_2_SWEN_Pin|TEC_1_EN_Pin|LED_G_Pin
 8004f08:	f64f 435b 	movw	r3, #64603	@ 0xfc5b
 8004f0c:	603b      	str	r3, [r7, #0]
                          |LED_B_Pin|LASER_DAC_CS_Pin|LASER_SW_EXT_CS_Pin|LASER_SW_INT_CS_Pin
                          |LASER_DAC_LATCH_Pin|TEC_2_CS_Pin|TEC_1_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f1e:	463b      	mov	r3, r7
 8004f20:	4619      	mov	r1, r3
 8004f22:	4840      	ldr	r0, [pc, #256]	@ (8005024 <MX_GPIO_Init+0x1c0>)
 8004f24:	f001 ffa1 	bl	8006e6a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_2_EN_Pin|TEC_3_EN_Pin|TEC_4_EN_Pin;
 8004f28:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004f2c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f3e:	463b      	mov	r3, r7
 8004f40:	4619      	mov	r1, r3
 8004f42:	4839      	ldr	r0, [pc, #228]	@ (8005028 <MX_GPIO_Init+0x1c4>)
 8004f44:	f001 ff91 	bl	8006e6a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004f54:	2300      	movs	r3, #0
 8004f56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(WD_DONE_GPIO_Port, &GPIO_InitStruct);
 8004f5c:	463b      	mov	r3, r7
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4832      	ldr	r0, [pc, #200]	@ (800502c <MX_GPIO_Init+0x1c8>)
 8004f62:	f001 ff82 	bl	8006e6a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_12_AUX_Pin;
 8004f66:	2380      	movs	r3, #128	@ 0x80
 8004f68:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_12_AUX_GPIO_Port, &GPIO_InitStruct);
 8004f72:	463b      	mov	r3, r7
 8004f74:	4619      	mov	r1, r3
 8004f76:	482b      	ldr	r0, [pc, #172]	@ (8005024 <MX_GPIO_Init+0x1c0>)
 8004f78:	f001 ff77 	bl	8006e6a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EXP_RS485_DE_Pin|SENSOR2_EN_Pin|SENSOR1_EN_Pin|TEC_4_CS_Pin
 8004f7c:	f241 3330 	movw	r3, #4912	@ 0x1330
 8004f80:	603b      	str	r3, [r7, #0]
                          |TEC_3_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004f82:	2301      	movs	r3, #1
 8004f84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f92:	463b      	mov	r3, r7
 8004f94:	4619      	mov	r1, r3
 8004f96:	4827      	ldr	r0, [pc, #156]	@ (8005034 <MX_GPIO_Init+0x1d0>)
 8004f98:	f001 ff67 	bl	8006e6a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EXP_RS485_NRE_Pin|PHOTO_PD_CS_Pin|PHOTO_ADC_CS_Pin|PHOTO_ADC_CONV_Pin
 8004f9c:	f640 7334 	movw	r3, #3892	@ 0xf34
 8004fa0:	603b      	str	r3, [r7, #0]
                          |FRAM_CS_Pin|EF_5_EN_Pin|TEC_ADC_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fb2:	463b      	mov	r3, r7
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	481e      	ldr	r0, [pc, #120]	@ (8005030 <MX_GPIO_Init+0x1cc>)
 8004fb8:	f001 ff57 	bl	8006e6a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PHOTO_ADC_EOC_Pin;
 8004fbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fc0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(PHOTO_ADC_EOC_GPIO_Port, &GPIO_InitStruct);
 8004fca:	463b      	mov	r3, r7
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4816      	ldr	r0, [pc, #88]	@ (8005028 <MX_GPIO_Init+0x1c4>)
 8004fd0:	f001 ff4b 	bl	8006e6a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IRQ1_Pin;
 8004fd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fd8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IRQ1_GPIO_Port, &GPIO_InitStruct);
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4810      	ldr	r0, [pc, #64]	@ (8005028 <MX_GPIO_Init+0x1c4>)
 8004fe8:	f001 ff3f 	bl	8006e6a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IRQ0_Pin;
 8004fec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ff0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IRQ0_GPIO_Port, &GPIO_InitStruct);
 8004ffa:	463b      	mov	r3, r7
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	480b      	ldr	r0, [pc, #44]	@ (800502c <MX_GPIO_Init+0x1c8>)
 8005000:	f001 ff33 	bl	8006e6a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FF_5_AUX_Pin;
 8005004:	2308      	movs	r3, #8
 8005006:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8005008:	2300      	movs	r3, #0
 800500a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800500c:	2300      	movs	r3, #0
 800500e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FF_5_AUX_GPIO_Port, &GPIO_InitStruct);
 8005010:	463b      	mov	r3, r7
 8005012:	4619      	mov	r1, r3
 8005014:	4806      	ldr	r0, [pc, #24]	@ (8005030 <MX_GPIO_Init+0x1cc>)
 8005016:	f001 ff28 	bl	8006e6a <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800501a:	bf00      	nop
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40021000 	.word	0x40021000
 8005028:	40020800 	.word	0x40020800
 800502c:	40020000 	.word	0x40020000
 8005030:	40020c00 	.word	0x40020c00
 8005034:	40020400 	.word	0x40020400

08005038 <__io_putchar>:

/* USER CODE BEGIN 4 */
PRINTF_USART6 {
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
    while (!LL_USART_IsActiveFlag_TXE(USART6));
 8005040:	bf00      	nop
 8005042:	4808      	ldr	r0, [pc, #32]	@ (8005064 <__io_putchar+0x2c>)
 8005044:	f7ff f8ec 	bl	8004220 <LL_USART_IsActiveFlag_TXE>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f9      	beq.n	8005042 <__io_putchar+0xa>
    LL_USART_TransmitData8(USART6, data);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	4619      	mov	r1, r3
 8005054:	4803      	ldr	r0, [pc, #12]	@ (8005064 <__io_putchar+0x2c>)
 8005056:	f7ff f8f6 	bl	8004246 <LL_USART_TransmitData8>
    return data;
 800505a:	687b      	ldr	r3, [r7, #4]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40011400 	.word	0x40011400

08005068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800506c:	b672      	cpsid	i
}
 800506e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005070:	bf00      	nop
 8005072:	e7fd      	b.n	8005070 <Error_Handler+0x8>

08005074 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800507a:	2300      	movs	r3, #0
 800507c:	607b      	str	r3, [r7, #4]
 800507e:	4b10      	ldr	r3, [pc, #64]	@ (80050c0 <HAL_MspInit+0x4c>)
 8005080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005082:	4a0f      	ldr	r2, [pc, #60]	@ (80050c0 <HAL_MspInit+0x4c>)
 8005084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005088:	6453      	str	r3, [r2, #68]	@ 0x44
 800508a:	4b0d      	ldr	r3, [pc, #52]	@ (80050c0 <HAL_MspInit+0x4c>)
 800508c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005092:	607b      	str	r3, [r7, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	603b      	str	r3, [r7, #0]
 800509a:	4b09      	ldr	r3, [pc, #36]	@ (80050c0 <HAL_MspInit+0x4c>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509e:	4a08      	ldr	r2, [pc, #32]	@ (80050c0 <HAL_MspInit+0x4c>)
 80050a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80050a6:	4b06      	ldr	r3, [pc, #24]	@ (80050c0 <HAL_MspInit+0x4c>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40023800 	.word	0x40023800

080050c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08a      	sub	sp, #40	@ 0x28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050cc:	f107 0314 	add.w	r3, r7, #20
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	605a      	str	r2, [r3, #4]
 80050d6:	609a      	str	r2, [r3, #8]
 80050d8:	60da      	str	r2, [r3, #12]
 80050da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a17      	ldr	r2, [pc, #92]	@ (8005140 <HAL_ADC_MspInit+0x7c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d127      	bne.n	8005136 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80050e6:	2300      	movs	r3, #0
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	4b16      	ldr	r3, [pc, #88]	@ (8005144 <HAL_ADC_MspInit+0x80>)
 80050ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ee:	4a15      	ldr	r2, [pc, #84]	@ (8005144 <HAL_ADC_MspInit+0x80>)
 80050f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80050f6:	4b13      	ldr	r3, [pc, #76]	@ (8005144 <HAL_ADC_MspInit+0x80>)
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	4b0f      	ldr	r3, [pc, #60]	@ (8005144 <HAL_ADC_MspInit+0x80>)
 8005108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510a:	4a0e      	ldr	r2, [pc, #56]	@ (8005144 <HAL_ADC_MspInit+0x80>)
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	6313      	str	r3, [r2, #48]	@ 0x30
 8005112:	4b0c      	ldr	r3, [pc, #48]	@ (8005144 <HAL_ADC_MspInit+0x80>)
 8005114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA2     ------> ADC3_IN2
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800511e:	230c      	movs	r3, #12
 8005120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005122:	2303      	movs	r3, #3
 8005124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800512a:	f107 0314 	add.w	r3, r7, #20
 800512e:	4619      	mov	r1, r3
 8005130:	4805      	ldr	r0, [pc, #20]	@ (8005148 <HAL_ADC_MspInit+0x84>)
 8005132:	f000 ff53 	bl	8005fdc <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8005136:	bf00      	nop
 8005138:	3728      	adds	r7, #40	@ 0x28
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	40012200 	.word	0x40012200
 8005144:	40023800 	.word	0x40023800
 8005148:	40020000 	.word	0x40020000

0800514c <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a0b      	ldr	r2, [pc, #44]	@ (8005188 <HAL_TIM_OC_MspInit+0x3c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d10d      	bne.n	800517a <HAL_TIM_OC_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	4b0a      	ldr	r3, [pc, #40]	@ (800518c <HAL_TIM_OC_MspInit+0x40>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005166:	4a09      	ldr	r2, [pc, #36]	@ (800518c <HAL_TIM_OC_MspInit+0x40>)
 8005168:	f043 0304 	orr.w	r3, r3, #4
 800516c:	6413      	str	r3, [r2, #64]	@ 0x40
 800516e:	4b07      	ldr	r3, [pc, #28]	@ (800518c <HAL_TIM_OC_MspInit+0x40>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40000800 	.word	0x40000800
 800518c:	40023800 	.word	0x40023800

08005190 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005198:	f107 030c 	add.w	r3, r7, #12
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	605a      	str	r2, [r3, #4]
 80051a2:	609a      	str	r2, [r3, #8]
 80051a4:	60da      	str	r2, [r3, #12]
 80051a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a12      	ldr	r2, [pc, #72]	@ (80051f8 <HAL_TIM_MspPostInit+0x68>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d11e      	bne.n	80051f0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	4b11      	ldr	r3, [pc, #68]	@ (80051fc <HAL_TIM_MspPostInit+0x6c>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ba:	4a10      	ldr	r2, [pc, #64]	@ (80051fc <HAL_TIM_MspPostInit+0x6c>)
 80051bc:	f043 0308 	orr.w	r3, r3, #8
 80051c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80051c2:	4b0e      	ldr	r3, [pc, #56]	@ (80051fc <HAL_TIM_MspPostInit+0x6c>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	60bb      	str	r3, [r7, #8]
 80051cc:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80051ce:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80051d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d4:	2302      	movs	r3, #2
 80051d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051dc:	2300      	movs	r3, #0
 80051de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80051e0:	2302      	movs	r3, #2
 80051e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051e4:	f107 030c 	add.w	r3, r7, #12
 80051e8:	4619      	mov	r1, r3
 80051ea:	4805      	ldr	r0, [pc, #20]	@ (8005200 <HAL_TIM_MspPostInit+0x70>)
 80051ec:	f000 fef6 	bl	8005fdc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80051f0:	bf00      	nop
 80051f2:	3720      	adds	r7, #32
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40000800 	.word	0x40000800
 80051fc:	40023800 	.word	0x40023800
 8005200:	40020c00 	.word	0x40020c00

08005204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005208:	bf00      	nop
 800520a:	e7fd      	b.n	8005208 <NMI_Handler+0x4>

0800520c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005210:	bf00      	nop
 8005212:	e7fd      	b.n	8005210 <HardFault_Handler+0x4>

08005214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005218:	bf00      	nop
 800521a:	e7fd      	b.n	8005218 <MemManage_Handler+0x4>

0800521c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005220:	bf00      	nop
 8005222:	e7fd      	b.n	8005220 <BusFault_Handler+0x4>

08005224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005228:	bf00      	nop
 800522a:	e7fd      	b.n	8005228 <UsageFault_Handler+0x4>

0800522c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005230:	bf00      	nop
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800523a:	b480      	push	{r7}
 800523c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800523e:	bf00      	nop
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800524c:	bf00      	nop
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	g_systick_count++;
 800525c:	4b11      	ldr	r3, [pc, #68]	@ (80052a4 <SysTick_Handler+0x4c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3301      	adds	r3, #1
 8005262:	4a10      	ldr	r2, [pc, #64]	@ (80052a4 <SysTick_Handler+0x4c>)
 8005264:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 8005266:	f003 f875 	bl	8008354 <SCH_RunSystemTickTimer>
	if (ads8327_timeout > 0) ads8327_timeout--;
 800526a:	4b0f      	ldr	r3, [pc, #60]	@ (80052a8 <SysTick_Handler+0x50>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d006      	beq.n	8005282 <SysTick_Handler+0x2a>
 8005274:	4b0c      	ldr	r3, [pc, #48]	@ (80052a8 <SysTick_Handler+0x50>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	b2db      	uxtb	r3, r3
 800527a:	3b01      	subs	r3, #1
 800527c:	b2da      	uxtb	r2, r3
 800527e:	4b0a      	ldr	r3, [pc, #40]	@ (80052a8 <SysTick_Handler+0x50>)
 8005280:	701a      	strb	r2, [r3, #0]
	if (ads8327_timeout > 0) adg1414_timeout--;
 8005282:	4b09      	ldr	r3, [pc, #36]	@ (80052a8 <SysTick_Handler+0x50>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d006      	beq.n	800529a <SysTick_Handler+0x42>
 800528c:	4b07      	ldr	r3, [pc, #28]	@ (80052ac <SysTick_Handler+0x54>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b2da      	uxtb	r2, r3
 8005296:	4b05      	ldr	r3, [pc, #20]	@ (80052ac <SysTick_Handler+0x54>)
 8005298:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800529a:	f000 fb37 	bl	800590c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800529e:	bf00      	nop
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20005e7c 	.word	0x20005e7c
 80052a8:	200057c4 	.word	0x200057c4
 80052ac:	200057a0 	.word	0x200057a0

080052b0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
	I2C_event_IRQ();
 80052b4:	f7fb fc0c 	bl	8000ad0 <I2C_event_IRQ>
  /* USER CODE END I2C2_EV_IRQn 0 */
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80052b8:	bf00      	nop
 80052ba:	bd80      	pop	{r7, pc}

080052bc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */
	I2C_error_IRQ();
 80052c0:	f7fb fd0e 	bl	8000ce0 <I2C_error_IRQ>
  /* USER CODE END I2C2_ER_IRQn 0 */
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80052c4:	bf00      	nop
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	UART_Ring_ISR(USART1);
 80052cc:	4802      	ldr	r0, [pc, #8]	@ (80052d8 <USART1_IRQHandler+0x10>)
 80052ce:	f7fc f8eb 	bl	80014a8 <UART_Ring_ISR>
  /* USER CODE END USART1_IRQn 1 */
}
 80052d2:	bf00      	nop
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40011000 	.word	0x40011000

080052dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */
//	UART_Ring_ISR(USART6);
	UART_Driver_ISR(USART6);
 80052f0:	4802      	ldr	r0, [pc, #8]	@ (80052fc <USART6_IRQHandler+0x10>)
 80052f2:	f7fc fb56 	bl	80019a2 <UART_Driver_ISR>
  /* USER CODE END USART6_IRQn 1 */
}
 80052f6:	bf00      	nop
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40011400 	.word	0x40011400

08005300 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	e00a      	b.n	8005328 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005312:	f3af 8000 	nop.w
 8005316:	4601      	mov	r1, r0
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	60ba      	str	r2, [r7, #8]
 800531e:	b2ca      	uxtb	r2, r1
 8005320:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	3301      	adds	r3, #1
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	429a      	cmp	r2, r3
 800532e:	dbf0      	blt.n	8005312 <_read+0x12>
  }

  return len;
 8005330:	687b      	ldr	r3, [r7, #4]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b086      	sub	sp, #24
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	e009      	b.n	8005360 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	60ba      	str	r2, [r7, #8]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff fe6f 	bl	8005038 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	3301      	adds	r3, #1
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	429a      	cmp	r2, r3
 8005366:	dbf1      	blt.n	800534c <_write+0x12>
  }
  return len;
 8005368:	687b      	ldr	r3, [r7, #4]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <_close>:

int _close(int file)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800537a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800539a:	605a      	str	r2, [r3, #4]
  return 0;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <_isatty>:

int _isatty(int file)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80053b2:	2301      	movs	r3, #1
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053e4:	4a14      	ldr	r2, [pc, #80]	@ (8005438 <_sbrk+0x5c>)
 80053e6:	4b15      	ldr	r3, [pc, #84]	@ (800543c <_sbrk+0x60>)
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053f0:	4b13      	ldr	r3, [pc, #76]	@ (8005440 <_sbrk+0x64>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053f8:	4b11      	ldr	r3, [pc, #68]	@ (8005440 <_sbrk+0x64>)
 80053fa:	4a12      	ldr	r2, [pc, #72]	@ (8005444 <_sbrk+0x68>)
 80053fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053fe:	4b10      	ldr	r3, [pc, #64]	@ (8005440 <_sbrk+0x64>)
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4413      	add	r3, r2
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	429a      	cmp	r2, r3
 800540a:	d207      	bcs.n	800541c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800540c:	f003 fa60 	bl	80088d0 <__errno>
 8005410:	4603      	mov	r3, r0
 8005412:	220c      	movs	r2, #12
 8005414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005416:	f04f 33ff 	mov.w	r3, #4294967295
 800541a:	e009      	b.n	8005430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800541c:	4b08      	ldr	r3, [pc, #32]	@ (8005440 <_sbrk+0x64>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005422:	4b07      	ldr	r3, [pc, #28]	@ (8005440 <_sbrk+0x64>)
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4413      	add	r3, r2
 800542a:	4a05      	ldr	r2, [pc, #20]	@ (8005440 <_sbrk+0x64>)
 800542c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800542e:	68fb      	ldr	r3, [r7, #12]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20020000 	.word	0x20020000
 800543c:	00000400 	.word	0x00000400
 8005440:	20005e80 	.word	0x20005e80
 8005444:	200061f8 	.word	0x200061f8

08005448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800544c:	4b06      	ldr	r3, [pc, #24]	@ (8005468 <SystemInit+0x20>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005452:	4a05      	ldr	r2, [pc, #20]	@ (8005468 <SystemInit+0x20>)
 8005454:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005458:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800545c:	bf00      	nop
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	e000ed00 	.word	0xe000ed00

0800546c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800546c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80054a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005470:	f7ff ffea 	bl	8005448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005474:	480c      	ldr	r0, [pc, #48]	@ (80054a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005476:	490d      	ldr	r1, [pc, #52]	@ (80054ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005478:	4a0d      	ldr	r2, [pc, #52]	@ (80054b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800547a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800547c:	e002      	b.n	8005484 <LoopCopyDataInit>

0800547e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800547e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005482:	3304      	adds	r3, #4

08005484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005488:	d3f9      	bcc.n	800547e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800548a:	4a0a      	ldr	r2, [pc, #40]	@ (80054b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800548c:	4c0a      	ldr	r4, [pc, #40]	@ (80054b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800548e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005490:	e001      	b.n	8005496 <LoopFillZerobss>

08005492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005494:	3204      	adds	r2, #4

08005496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005498:	d3fb      	bcc.n	8005492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800549a:	f003 fa1f 	bl	80088dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800549e:	f7fe fefe 	bl	800429e <main>
  bx  lr    
 80054a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80054a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80054a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054ac:	20004174 	.word	0x20004174
  ldr r2, =_sidata
 80054b0:	08009cb4 	.word	0x08009cb4
  ldr r2, =_sbss
 80054b4:	20004174 	.word	0x20004174
  ldr r4, =_ebss
 80054b8:	200061f8 	.word	0x200061f8

080054bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054bc:	e7fe      	b.n	80054bc <ADC_IRQHandler>
	...

080054c0 <temperature_set_setpoint>:
	SCH_TASK_CreateTask(&temp_task_context.taskHandle, &temp_task_context.taskProperty);
	return;
}

void temperature_set_setpoint(int16_t setpoint)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	4603      	mov	r3, r0
 80054c8:	80fb      	strh	r3, [r7, #6]
	s_Temperature_CurrentState.Temp_Ref = setpoint;
 80054ca:	4a04      	ldr	r2, [pc, #16]	@ (80054dc <temperature_set_setpoint+0x1c>)
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	8053      	strh	r3, [r2, #2]
	return;
 80054d0:	bf00      	nop
}
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	200040c8 	.word	0x200040c8

080054e0 <temperature_get_setpoint>:

int16_t temperature_get_setpoint()
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
	return s_Temperature_CurrentState.Temp_Ref;
 80054e4:	4b03      	ldr	r3, [pc, #12]	@ (80054f4 <temperature_get_setpoint+0x14>)
 80054e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	200040c8 	.word	0x200040c8

080054f8 <temperature_set_tec_vol>:
{
	return s_Temperature_CurrentState.NTC_temp[channel];
}

void temperature_set_tec_vol(uint8_t channel, uint16_t voltage)
{
 80054f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	b087      	sub	sp, #28
 80054fe:	af00      	add	r7, sp, #0
 8005500:	4603      	mov	r3, r0
 8005502:	460a      	mov	r2, r1
 8005504:	75fb      	strb	r3, [r7, #23]
 8005506:	4613      	mov	r3, r2
 8005508:	82bb      	strh	r3, [r7, #20]
	s_Temperature_CurrentState.Temp_change_flag = 1;
 800550a:	4b2c      	ldr	r3, [pc, #176]	@ (80055bc <temperature_set_tec_vol+0xc4>)
 800550c:	2201      	movs	r2, #1
 800550e:	705a      	strb	r2, [r3, #1]
	if (voltage > 3000) voltage = 3000;
 8005510:	8abb      	ldrh	r3, [r7, #20]
 8005512:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8005516:	4293      	cmp	r3, r2
 8005518:	d902      	bls.n	8005520 <temperature_set_tec_vol+0x28>
 800551a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800551e:	82bb      	strh	r3, [r7, #20]
	s_Temperature_CurrentState.Tec_vol[channel] = (int64_t)voltage*1000000;
 8005520:	8abb      	ldrh	r3, [r7, #20]
 8005522:	2200      	movs	r2, #0
 8005524:	469a      	mov	sl, r3
 8005526:	4693      	mov	fp, r2
 8005528:	7dfe      	ldrb	r6, [r7, #23]
 800552a:	4652      	mov	r2, sl
 800552c:	465b      	mov	r3, fp
 800552e:	f04f 0000 	mov.w	r0, #0
 8005532:	f04f 0100 	mov.w	r1, #0
 8005536:	0159      	lsls	r1, r3, #5
 8005538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800553c:	0150      	lsls	r0, r2, #5
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	ebb2 040a 	subs.w	r4, r2, sl
 8005546:	eb63 050b 	sbc.w	r5, r3, fp
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	f04f 0300 	mov.w	r3, #0
 8005552:	026b      	lsls	r3, r5, #9
 8005554:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8005558:	0262      	lsls	r2, r4, #9
 800555a:	4614      	mov	r4, r2
 800555c:	461d      	mov	r5, r3
 800555e:	eb14 080a 	adds.w	r8, r4, sl
 8005562:	eb45 090b 	adc.w	r9, r5, fp
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005572:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005576:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800557a:	ebb2 0108 	subs.w	r1, r2, r8
 800557e:	6039      	str	r1, [r7, #0]
 8005580:	eb63 0309 	sbc.w	r3, r3, r9
 8005584:	607b      	str	r3, [r7, #4]
 8005586:	e9d7 1200 	ldrd	r1, r2, [r7]
 800558a:	460b      	mov	r3, r1
 800558c:	eb13 030a 	adds.w	r3, r3, sl
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	4613      	mov	r3, r2
 8005594:	eb43 030b 	adc.w	r3, r3, fp
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	4a08      	ldr	r2, [pc, #32]	@ (80055bc <temperature_set_tec_vol+0xc4>)
 800559c:	1c73      	adds	r3, r6, #1
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	4413      	add	r3, r2
 80055a2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80055a6:	e9c3 1200 	strd	r1, r2, [r3]
	LL_mDelay(1);
 80055aa:	2001      	movs	r0, #1
 80055ac:	f002 fe32 	bl	8008214 <LL_mDelay>
}
 80055b0:	bf00      	nop
 80055b2:	371c      	adds	r7, #28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ba:	bf00      	nop
 80055bc:	200040c8 	.word	0x200040c8

080055c0 <temperature_get_tec_vol_set>:

uint16_t temperature_get_tec_vol_set(uint8_t channel)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Tec_vol[channel]/1000000);
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	4a08      	ldr	r2, [pc, #32]	@ (80055f0 <temperature_get_tec_vol_set+0x30>)
 80055ce:	3301      	adds	r3, #1
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	4413      	add	r3, r2
 80055d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055d8:	4a06      	ldr	r2, [pc, #24]	@ (80055f4 <temperature_get_tec_vol_set+0x34>)
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	f7fa fe47 	bl	8000270 <__aeabi_ldivmod>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	b293      	uxth	r3, r2
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	200040c8 	.word	0x200040c8
 80055f4:	000f4240 	.word	0x000f4240

080055f8 <temperature_set_heater_duty>:
{
	return (s_Temperature_CurrentState.Tec_vol[channel]/1000000);
}

void temperature_set_heater_duty(uint8_t channel, uint8_t duty)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	460a      	mov	r2, r1
 8005602:	71fb      	strb	r3, [r7, #7]
 8005604:	4613      	mov	r3, r2
 8005606:	71bb      	strb	r3, [r7, #6]
	s_Temperature_CurrentState.Temp_change_flag = 1;
 8005608:	4b0e      	ldr	r3, [pc, #56]	@ (8005644 <temperature_set_heater_duty+0x4c>)
 800560a:	2201      	movs	r2, #1
 800560c:	705a      	strb	r2, [r3, #1]
    if (duty > 100) duty = 100;
 800560e:	79bb      	ldrb	r3, [r7, #6]
 8005610:	2b64      	cmp	r3, #100	@ 0x64
 8005612:	d901      	bls.n	8005618 <temperature_set_heater_duty+0x20>
 8005614:	2364      	movs	r3, #100	@ 0x64
 8005616:	71bb      	strb	r3, [r7, #6]
	s_Temperature_CurrentState.Heater_duty[channel] = duty*10;
 8005618:	79bb      	ldrb	r3, [r7, #6]
 800561a:	b29b      	uxth	r3, r3
 800561c:	461a      	mov	r2, r3
 800561e:	0092      	lsls	r2, r2, #2
 8005620:	4413      	add	r3, r2
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	b211      	sxth	r1, r2
 800562a:	4a06      	ldr	r2, [pc, #24]	@ (8005644 <temperature_set_heater_duty+0x4c>)
 800562c:	3314      	adds	r3, #20
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	4413      	add	r3, r2
 8005632:	460a      	mov	r2, r1
 8005634:	805a      	strh	r2, [r3, #2]
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	200040c8 	.word	0x200040c8

08005648 <temperature_get_heater_duty>:
uint8_t temperature_get_heater_duty(uint8_t channel)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Heater_duty[channel]/10);
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	4a09      	ldr	r2, [pc, #36]	@ (800567c <temperature_get_heater_duty+0x34>)
 8005656:	3314      	adds	r3, #20
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	4413      	add	r3, r2
 800565c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005660:	4a07      	ldr	r2, [pc, #28]	@ (8005680 <temperature_get_heater_duty+0x38>)
 8005662:	fb82 1203 	smull	r1, r2, r2, r3
 8005666:	1092      	asrs	r2, r2, #2
 8005668:	17db      	asrs	r3, r3, #31
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	b21b      	sxth	r3, r3
 800566e:	b2db      	uxtb	r3, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	200040c8 	.word	0x200040c8
 8005680:	66666667 	.word	0x66666667

08005684 <temperature_set_tec_dir>:

void temperature_set_tec_dir(tec_dir_t dir_0, tec_dir_t dir_1, tec_dir_t dir_2, tec_dir_t dir_3)
{
 8005684:	b490      	push	{r4, r7}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	4604      	mov	r4, r0
 800568c:	4608      	mov	r0, r1
 800568e:	4611      	mov	r1, r2
 8005690:	461a      	mov	r2, r3
 8005692:	4623      	mov	r3, r4
 8005694:	71fb      	strb	r3, [r7, #7]
 8005696:	4603      	mov	r3, r0
 8005698:	71bb      	strb	r3, [r7, #6]
 800569a:	460b      	mov	r3, r1
 800569c:	717b      	strb	r3, [r7, #5]
 800569e:	4613      	mov	r3, r2
 80056a0:	713b      	strb	r3, [r7, #4]
    s_Temperature_CurrentState.Temp_change_flag = 1;
 80056a2:	4b10      	ldr	r3, [pc, #64]	@ (80056e4 <temperature_set_tec_dir+0x60>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	705a      	strb	r2, [r3, #1]
    s_Temperature_CurrentState.Tec_dir = (dir_0 << TEC0_DIR) | (dir_1 << TEC1_DIR) | (dir_2 << TEC2_DIR) | (dir_3 << TEC3_DIR);
 80056a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	b25a      	sxtb	r2, r3
 80056b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	b25a      	sxtb	r2, r3
 80056b8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	b25b      	sxtb	r3, r3
 80056c0:	4313      	orrs	r3, r2
 80056c2:	b25a      	sxtb	r2, r3
 80056c4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	b25b      	sxtb	r3, r3
 80056cc:	4313      	orrs	r3, r2
 80056ce:	b25b      	sxtb	r3, r3
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	4b04      	ldr	r3, [pc, #16]	@ (80056e4 <temperature_set_tec_dir+0x60>)
 80056d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    return;
 80056d8:	bf00      	nop
}
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc90      	pop	{r4, r7}
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	200040c8 	.word	0x200040c8

080056e8 <temperature_get_tec_dir>:

void temperature_get_tec_dir(tec_dir_t *tec_dir) {
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	*tec_dir = (tec_dir_t)s_Temperature_CurrentState.Tec_dir;
 80056f0:	4b05      	ldr	r3, [pc, #20]	@ (8005708 <temperature_get_tec_dir+0x20>)
 80056f2:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	701a      	strb	r2, [r3, #0]
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	200040c8 	.word	0x200040c8

0800570c <temperature_set_tec_auto>:

void temperature_set_tec_auto(uint8_t tec_ena) {
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	71fb      	strb	r3, [r7, #7]
	s_Temperature_CurrentState.Tec_Heater_status = (s_Temperature_CurrentState.Tec_Heater_status & 0xF0) | (tec_ena & 0x0F);
 8005716:	4b0c      	ldr	r3, [pc, #48]	@ (8005748 <temperature_set_tec_auto+0x3c>)
 8005718:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800571c:	b25b      	sxtb	r3, r3
 800571e:	f023 030f 	bic.w	r3, r3, #15
 8005722:	b25a      	sxtb	r2, r3
 8005724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	b25b      	sxtb	r3, r3
 800572e:	4313      	orrs	r3, r2
 8005730:	b25b      	sxtb	r3, r3
 8005732:	b2da      	uxtb	r2, r3
 8005734:	4b04      	ldr	r3, [pc, #16]	@ (8005748 <temperature_set_tec_auto+0x3c>)
 8005736:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	200040c8 	.word	0x200040c8

0800574c <temperature_get_tec_auto>:

void temperature_get_tec_auto(uint8_t *tec_ena) {
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	*tec_ena = (uint8_t)(s_Temperature_CurrentState.Tec_Heater_status & 0x0F);
 8005754:	4b06      	ldr	r3, [pc, #24]	@ (8005770 <temperature_get_tec_auto+0x24>)
 8005756:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	b2da      	uxtb	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	701a      	strb	r2, [r3, #0]
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	200040c8 	.word	0x200040c8

08005774 <temperature_set_heater_auto>:

void temperature_set_heater_auto(uint8_t heater_ena) {
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	4603      	mov	r3, r0
 800577c:	71fb      	strb	r3, [r7, #7]
	s_Temperature_CurrentState.Tec_Heater_status = ((heater_ena << 4) & 0xF0) | (s_Temperature_CurrentState.Tec_Heater_status & 0x0F);
 800577e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	b25a      	sxtb	r2, r3
 8005786:	4b09      	ldr	r3, [pc, #36]	@ (80057ac <temperature_set_heater_auto+0x38>)
 8005788:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800578c:	b25b      	sxtb	r3, r3
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	b25b      	sxtb	r3, r3
 8005794:	4313      	orrs	r3, r2
 8005796:	b25b      	sxtb	r3, r3
 8005798:	b2da      	uxtb	r2, r3
 800579a:	4b04      	ldr	r3, [pc, #16]	@ (80057ac <temperature_set_heater_auto+0x38>)
 800579c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	200040c8 	.word	0x200040c8

080057b0 <temperature_get_heater_auto>:

void temperature_get_heater_auto(uint8_t *heater_ena) {
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	*heater_ena = (uint8_t)((s_Temperature_CurrentState.Tec_Heater_status >> 4) & 0x0F);
 80057b8:	4b06      	ldr	r3, [pc, #24]	@ (80057d4 <temperature_get_heater_auto+0x24>)
 80057ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057be:	091b      	lsrs	r3, r3, #4
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	701a      	strb	r2, [r3, #0]
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	200040c8 	.word	0x200040c8

080057d8 <temperature_set_ntc_ref>:

void temperature_set_ntc_ref(uint8_t NTC_Ref) {
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	4603      	mov	r3, r0
 80057e0:	71fb      	strb	r3, [r7, #7]
	s_Temperature_CurrentState.NTC_Ref = NTC_Ref;
 80057e2:	4a05      	ldr	r2, [pc, #20]	@ (80057f8 <temperature_set_ntc_ref+0x20>)
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	f882 3045 	strb.w	r3, [r2, #69]	@ 0x45
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	200040c8 	.word	0x200040c8

080057fc <temperature_get_ntc_ref>:

void temperature_get_ntc_ref(uint8_t *NTC_Ref) {
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	*NTC_Ref = s_Temperature_CurrentState.NTC_Ref;
 8005804:	4b05      	ldr	r3, [pc, #20]	@ (800581c <temperature_get_ntc_ref+0x20>)
 8005806:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	701a      	strb	r2, [r3, #0]
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	200040c8 	.word	0x200040c8

08005820 <temperature_set_auto_ctrl>:

void temperature_set_auto_ctrl(uint8_t Temp_auto) {
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	71fb      	strb	r3, [r7, #7]
	s_Temperature_CurrentState.Temp_auto = Temp_auto;
 800582a:	4a05      	ldr	r2, [pc, #20]	@ (8005840 <temperature_set_auto_ctrl+0x20>)
 800582c:	79fb      	ldrb	r3, [r7, #7]
 800582e:	f882 3046 	strb.w	r3, [r2, #70]	@ 0x46
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	200040c8 	.word	0x200040c8

08005844 <temperature_get_auto_ctrl>:
void temperature_get_auto_ctrl(uint8_t *Temp_auto) {
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	*Temp_auto = s_Temperature_CurrentState.Temp_auto;
 800584c:	4b05      	ldr	r3, [pc, #20]	@ (8005864 <temperature_get_auto_ctrl+0x20>)
 800584e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	701a      	strb	r2, [r3, #0]
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	200040c8 	.word	0x200040c8

08005868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800586c:	4b0e      	ldr	r3, [pc, #56]	@ (80058a8 <HAL_Init+0x40>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a0d      	ldr	r2, [pc, #52]	@ (80058a8 <HAL_Init+0x40>)
 8005872:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005878:	4b0b      	ldr	r3, [pc, #44]	@ (80058a8 <HAL_Init+0x40>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a0a      	ldr	r2, [pc, #40]	@ (80058a8 <HAL_Init+0x40>)
 800587e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005884:	4b08      	ldr	r3, [pc, #32]	@ (80058a8 <HAL_Init+0x40>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a07      	ldr	r2, [pc, #28]	@ (80058a8 <HAL_Init+0x40>)
 800588a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800588e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005890:	2003      	movs	r0, #3
 8005892:	f000 fb6f 	bl	8005f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005896:	200f      	movs	r0, #15
 8005898:	f000 f808 	bl	80058ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800589c:	f7ff fbea 	bl	8005074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40023c00 	.word	0x40023c00

080058ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058b4:	4b12      	ldr	r3, [pc, #72]	@ (8005900 <HAL_InitTick+0x54>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	4b12      	ldr	r3, [pc, #72]	@ (8005904 <HAL_InitTick+0x58>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	4619      	mov	r1, r3
 80058be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80058c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80058c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 fb79 	bl	8005fc2 <HAL_SYSTICK_Config>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e00e      	b.n	80058f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b0f      	cmp	r3, #15
 80058de:	d80a      	bhi.n	80058f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058e0:	2200      	movs	r2, #0
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295
 80058e8:	f000 fb4f 	bl	8005f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058ec:	4a06      	ldr	r2, [pc, #24]	@ (8005908 <HAL_InitTick+0x5c>)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e000      	b.n	80058f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	200040c0 	.word	0x200040c0
 8005904:	20004114 	.word	0x20004114
 8005908:	20004110 	.word	0x20004110

0800590c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005910:	4b06      	ldr	r3, [pc, #24]	@ (800592c <HAL_IncTick+0x20>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <HAL_IncTick+0x24>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4413      	add	r3, r2
 800591c:	4a04      	ldr	r2, [pc, #16]	@ (8005930 <HAL_IncTick+0x24>)
 800591e:	6013      	str	r3, [r2, #0]
}
 8005920:	bf00      	nop
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20004114 	.word	0x20004114
 8005930:	20005e84 	.word	0x20005e84

08005934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
  return uwTick;
 8005938:	4b03      	ldr	r3, [pc, #12]	@ (8005948 <HAL_GetTick+0x14>)
 800593a:	681b      	ldr	r3, [r3, #0]
}
 800593c:	4618      	mov	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	20005e84 	.word	0x20005e84

0800594c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e033      	b.n	80059ca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff fbaa 	bl	80050c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b00      	cmp	r3, #0
 8005988:	d118      	bne.n	80059bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005992:	f023 0302 	bic.w	r3, r3, #2
 8005996:	f043 0202 	orr.w	r2, r3, #2
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f93a 	bl	8005c18 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	f043 0201 	orr.w	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80059ba:	e001      	b.n	80059c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_ADC_ConfigChannel+0x1c>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e105      	b.n	8005bfc <HAL_ADC_ConfigChannel+0x228>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b09      	cmp	r3, #9
 80059fe:	d925      	bls.n	8005a4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68d9      	ldr	r1, [r3, #12]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4613      	mov	r3, r2
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	4413      	add	r3, r2
 8005a14:	3b1e      	subs	r3, #30
 8005a16:	2207      	movs	r2, #7
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	43da      	mvns	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	400a      	ands	r2, r1
 8005a24:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68d9      	ldr	r1, [r3, #12]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	4618      	mov	r0, r3
 8005a38:	4603      	mov	r3, r0
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	4403      	add	r3, r0
 8005a3e:	3b1e      	subs	r3, #30
 8005a40:	409a      	lsls	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	60da      	str	r2, [r3, #12]
 8005a4a:	e022      	b.n	8005a92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6919      	ldr	r1, [r3, #16]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	4413      	add	r3, r2
 8005a60:	2207      	movs	r2, #7
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43da      	mvns	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	400a      	ands	r2, r1
 8005a6e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6919      	ldr	r1, [r3, #16]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	4618      	mov	r0, r3
 8005a82:	4603      	mov	r3, r0
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	4403      	add	r3, r0
 8005a88:	409a      	lsls	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b06      	cmp	r3, #6
 8005a98:	d824      	bhi.n	8005ae4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	3b05      	subs	r3, #5
 8005aac:	221f      	movs	r2, #31
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	43da      	mvns	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	400a      	ands	r2, r1
 8005aba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	4618      	mov	r0, r3
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	3b05      	subs	r3, #5
 8005ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ae2:	e04c      	b.n	8005b7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b0c      	cmp	r3, #12
 8005aea:	d824      	bhi.n	8005b36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	3b23      	subs	r3, #35	@ 0x23
 8005afe:	221f      	movs	r2, #31
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	43da      	mvns	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	400a      	ands	r2, r1
 8005b0c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	3b23      	subs	r3, #35	@ 0x23
 8005b28:	fa00 f203 	lsl.w	r2, r0, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b34:	e023      	b.n	8005b7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	3b41      	subs	r3, #65	@ 0x41
 8005b48:	221f      	movs	r2, #31
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	43da      	mvns	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	400a      	ands	r2, r1
 8005b56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	4618      	mov	r0, r3
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	3b41      	subs	r3, #65	@ 0x41
 8005b72:	fa00 f203 	lsl.w	r2, r0, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b7e:	4b22      	ldr	r3, [pc, #136]	@ (8005c08 <HAL_ADC_ConfigChannel+0x234>)
 8005b80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a21      	ldr	r2, [pc, #132]	@ (8005c0c <HAL_ADC_ConfigChannel+0x238>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d109      	bne.n	8005ba0 <HAL_ADC_ConfigChannel+0x1cc>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b12      	cmp	r3, #18
 8005b92:	d105      	bne.n	8005ba0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a19      	ldr	r2, [pc, #100]	@ (8005c0c <HAL_ADC_ConfigChannel+0x238>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d123      	bne.n	8005bf2 <HAL_ADC_ConfigChannel+0x21e>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b10      	cmp	r3, #16
 8005bb0:	d003      	beq.n	8005bba <HAL_ADC_ConfigChannel+0x1e6>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b11      	cmp	r3, #17
 8005bb8:	d11b      	bne.n	8005bf2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b10      	cmp	r3, #16
 8005bcc:	d111      	bne.n	8005bf2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005bce:	4b10      	ldr	r3, [pc, #64]	@ (8005c10 <HAL_ADC_ConfigChannel+0x23c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a10      	ldr	r2, [pc, #64]	@ (8005c14 <HAL_ADC_ConfigChannel+0x240>)
 8005bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd8:	0c9a      	lsrs	r2, r3, #18
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005be4:	e002      	b.n	8005bec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f9      	bne.n	8005be6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40012300 	.word	0x40012300
 8005c0c:	40012000 	.word	0x40012000
 8005c10:	200040c0 	.word	0x200040c0
 8005c14:	431bde83 	.word	0x431bde83

08005c18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c20:	4b79      	ldr	r3, [pc, #484]	@ (8005e08 <ADC_Init+0x1f0>)
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6859      	ldr	r1, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	021a      	lsls	r2, r3, #8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005c70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6859      	ldr	r1, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6899      	ldr	r1, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005caa:	4a58      	ldr	r2, [pc, #352]	@ (8005e0c <ADC_Init+0x1f4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d022      	beq.n	8005cf6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005cbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6899      	ldr	r1, [r3, #8]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005ce0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6899      	ldr	r1, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	609a      	str	r2, [r3, #8]
 8005cf4:	e00f      	b.n	8005d16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005d04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005d14:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0202 	bic.w	r2, r2, #2
 8005d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6899      	ldr	r1, [r3, #8]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	7e1b      	ldrb	r3, [r3, #24]
 8005d30:	005a      	lsls	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01b      	beq.n	8005d7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d52:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005d62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6859      	ldr	r1, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	035a      	lsls	r2, r3, #13
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
 8005d7a:	e007      	b.n	8005d8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d8a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	051a      	lsls	r2, r3, #20
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005dc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6899      	ldr	r1, [r3, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005dce:	025a      	lsls	r2, r3, #9
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005de6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6899      	ldr	r1, [r3, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	029a      	lsls	r2, r3, #10
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	609a      	str	r2, [r3, #8]
}
 8005dfc:	bf00      	nop
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	40012300 	.word	0x40012300
 8005e0c:	0f000001 	.word	0x0f000001

08005e10 <__NVIC_SetPriorityGrouping>:
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e20:	4b0c      	ldr	r3, [pc, #48]	@ (8005e54 <__NVIC_SetPriorityGrouping+0x44>)
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e42:	4a04      	ldr	r2, [pc, #16]	@ (8005e54 <__NVIC_SetPriorityGrouping+0x44>)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	60d3      	str	r3, [r2, #12]
}
 8005e48:	bf00      	nop
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	e000ed00 	.word	0xe000ed00

08005e58 <__NVIC_GetPriorityGrouping>:
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e5c:	4b04      	ldr	r3, [pc, #16]	@ (8005e70 <__NVIC_GetPriorityGrouping+0x18>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	0a1b      	lsrs	r3, r3, #8
 8005e62:	f003 0307 	and.w	r3, r3, #7
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	e000ed00 	.word	0xe000ed00

08005e74 <__NVIC_SetPriority>:
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	6039      	str	r1, [r7, #0]
 8005e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	db0a      	blt.n	8005e9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	490c      	ldr	r1, [pc, #48]	@ (8005ec0 <__NVIC_SetPriority+0x4c>)
 8005e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e92:	0112      	lsls	r2, r2, #4
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	440b      	add	r3, r1
 8005e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005e9c:	e00a      	b.n	8005eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	4908      	ldr	r1, [pc, #32]	@ (8005ec4 <__NVIC_SetPriority+0x50>)
 8005ea4:	79fb      	ldrb	r3, [r7, #7]
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	3b04      	subs	r3, #4
 8005eac:	0112      	lsls	r2, r2, #4
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	761a      	strb	r2, [r3, #24]
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	e000e100 	.word	0xe000e100
 8005ec4:	e000ed00 	.word	0xe000ed00

08005ec8 <NVIC_EncodePriority>:
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b089      	sub	sp, #36	@ 0x24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	f1c3 0307 	rsb	r3, r3, #7
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	bf28      	it	cs
 8005ee6:	2304      	movcs	r3, #4
 8005ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	3304      	adds	r3, #4
 8005eee:	2b06      	cmp	r3, #6
 8005ef0:	d902      	bls.n	8005ef8 <NVIC_EncodePriority+0x30>
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	3b03      	subs	r3, #3
 8005ef6:	e000      	b.n	8005efa <NVIC_EncodePriority+0x32>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005efc:	f04f 32ff 	mov.w	r2, #4294967295
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	fa02 f303 	lsl.w	r3, r2, r3
 8005f06:	43da      	mvns	r2, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	401a      	ands	r2, r3
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f10:	f04f 31ff 	mov.w	r1, #4294967295
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1a:	43d9      	mvns	r1, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f20:	4313      	orrs	r3, r2
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3724      	adds	r7, #36	@ 0x24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <SysTick_Config>:
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f40:	d301      	bcc.n	8005f46 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005f42:	2301      	movs	r3, #1
 8005f44:	e00f      	b.n	8005f66 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f46:	4a0a      	ldr	r2, [pc, #40]	@ (8005f70 <SysTick_Config+0x40>)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f4e:	210f      	movs	r1, #15
 8005f50:	f04f 30ff 	mov.w	r0, #4294967295
 8005f54:	f7ff ff8e 	bl	8005e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f58:	4b05      	ldr	r3, [pc, #20]	@ (8005f70 <SysTick_Config+0x40>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f5e:	4b04      	ldr	r3, [pc, #16]	@ (8005f70 <SysTick_Config+0x40>)
 8005f60:	2207      	movs	r2, #7
 8005f62:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	e000e010 	.word	0xe000e010

08005f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff ff47 	bl	8005e10 <__NVIC_SetPriorityGrouping>
}
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b086      	sub	sp, #24
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	4603      	mov	r3, r0
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	607a      	str	r2, [r7, #4]
 8005f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f9c:	f7ff ff5c 	bl	8005e58 <__NVIC_GetPriorityGrouping>
 8005fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	6978      	ldr	r0, [r7, #20]
 8005fa8:	f7ff ff8e 	bl	8005ec8 <NVIC_EncodePriority>
 8005fac:	4602      	mov	r2, r0
 8005fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff ff5d 	bl	8005e74 <__NVIC_SetPriority>
}
 8005fba:	bf00      	nop
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff ffb0 	bl	8005f30 <SysTick_Config>
 8005fd0:	4603      	mov	r3, r0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b089      	sub	sp, #36	@ 0x24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
 8005ff6:	e16b      	b.n	80062d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8006000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4013      	ands	r3, r2
 800600a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	429a      	cmp	r2, r3
 8006012:	f040 815a 	bne.w	80062ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	2b01      	cmp	r3, #1
 8006020:	d005      	beq.n	800602e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800602a:	2b02      	cmp	r3, #2
 800602c:	d130      	bne.n	8006090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	2203      	movs	r2, #3
 800603a:	fa02 f303 	lsl.w	r3, r2, r3
 800603e:	43db      	mvns	r3, r3
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	4013      	ands	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	fa02 f303 	lsl.w	r3, r2, r3
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	4313      	orrs	r3, r2
 8006056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006064:	2201      	movs	r2, #1
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	43db      	mvns	r3, r3
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	4013      	ands	r3, r2
 8006072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	091b      	lsrs	r3, r3, #4
 800607a:	f003 0201 	and.w	r2, r3, #1
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	4313      	orrs	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f003 0303 	and.w	r3, r3, #3
 8006098:	2b03      	cmp	r3, #3
 800609a:	d017      	beq.n	80060cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	2203      	movs	r2, #3
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	43db      	mvns	r3, r3
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	4013      	ands	r3, r2
 80060b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f003 0303 	and.w	r3, r3, #3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d123      	bne.n	8006120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	08da      	lsrs	r2, r3, #3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3208      	adds	r2, #8
 80060e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	220f      	movs	r2, #15
 80060f0:	fa02 f303 	lsl.w	r3, r2, r3
 80060f4:	43db      	mvns	r3, r3
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	4013      	ands	r3, r2
 80060fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	4313      	orrs	r3, r2
 8006110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	08da      	lsrs	r2, r3, #3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	3208      	adds	r2, #8
 800611a:	69b9      	ldr	r1, [r7, #24]
 800611c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	2203      	movs	r2, #3
 800612c:	fa02 f303 	lsl.w	r3, r2, r3
 8006130:	43db      	mvns	r3, r3
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	4013      	ands	r3, r2
 8006136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f003 0203 	and.w	r2, r3, #3
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4313      	orrs	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 80b4 	beq.w	80062ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006162:	2300      	movs	r3, #0
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	4b60      	ldr	r3, [pc, #384]	@ (80062e8 <HAL_GPIO_Init+0x30c>)
 8006168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616a:	4a5f      	ldr	r2, [pc, #380]	@ (80062e8 <HAL_GPIO_Init+0x30c>)
 800616c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006170:	6453      	str	r3, [r2, #68]	@ 0x44
 8006172:	4b5d      	ldr	r3, [pc, #372]	@ (80062e8 <HAL_GPIO_Init+0x30c>)
 8006174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800617e:	4a5b      	ldr	r2, [pc, #364]	@ (80062ec <HAL_GPIO_Init+0x310>)
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	089b      	lsrs	r3, r3, #2
 8006184:	3302      	adds	r3, #2
 8006186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800618a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	220f      	movs	r2, #15
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	43db      	mvns	r3, r3
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	4013      	ands	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a52      	ldr	r2, [pc, #328]	@ (80062f0 <HAL_GPIO_Init+0x314>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d02b      	beq.n	8006202 <HAL_GPIO_Init+0x226>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a51      	ldr	r2, [pc, #324]	@ (80062f4 <HAL_GPIO_Init+0x318>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d025      	beq.n	80061fe <HAL_GPIO_Init+0x222>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a50      	ldr	r2, [pc, #320]	@ (80062f8 <HAL_GPIO_Init+0x31c>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01f      	beq.n	80061fa <HAL_GPIO_Init+0x21e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a4f      	ldr	r2, [pc, #316]	@ (80062fc <HAL_GPIO_Init+0x320>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d019      	beq.n	80061f6 <HAL_GPIO_Init+0x21a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a4e      	ldr	r2, [pc, #312]	@ (8006300 <HAL_GPIO_Init+0x324>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <HAL_GPIO_Init+0x216>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a4d      	ldr	r2, [pc, #308]	@ (8006304 <HAL_GPIO_Init+0x328>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00d      	beq.n	80061ee <HAL_GPIO_Init+0x212>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a4c      	ldr	r2, [pc, #304]	@ (8006308 <HAL_GPIO_Init+0x32c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d007      	beq.n	80061ea <HAL_GPIO_Init+0x20e>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a4b      	ldr	r2, [pc, #300]	@ (800630c <HAL_GPIO_Init+0x330>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d101      	bne.n	80061e6 <HAL_GPIO_Init+0x20a>
 80061e2:	2307      	movs	r3, #7
 80061e4:	e00e      	b.n	8006204 <HAL_GPIO_Init+0x228>
 80061e6:	2308      	movs	r3, #8
 80061e8:	e00c      	b.n	8006204 <HAL_GPIO_Init+0x228>
 80061ea:	2306      	movs	r3, #6
 80061ec:	e00a      	b.n	8006204 <HAL_GPIO_Init+0x228>
 80061ee:	2305      	movs	r3, #5
 80061f0:	e008      	b.n	8006204 <HAL_GPIO_Init+0x228>
 80061f2:	2304      	movs	r3, #4
 80061f4:	e006      	b.n	8006204 <HAL_GPIO_Init+0x228>
 80061f6:	2303      	movs	r3, #3
 80061f8:	e004      	b.n	8006204 <HAL_GPIO_Init+0x228>
 80061fa:	2302      	movs	r3, #2
 80061fc:	e002      	b.n	8006204 <HAL_GPIO_Init+0x228>
 80061fe:	2301      	movs	r3, #1
 8006200:	e000      	b.n	8006204 <HAL_GPIO_Init+0x228>
 8006202:	2300      	movs	r3, #0
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	f002 0203 	and.w	r2, r2, #3
 800620a:	0092      	lsls	r2, r2, #2
 800620c:	4093      	lsls	r3, r2
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	4313      	orrs	r3, r2
 8006212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006214:	4935      	ldr	r1, [pc, #212]	@ (80062ec <HAL_GPIO_Init+0x310>)
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	089b      	lsrs	r3, r3, #2
 800621a:	3302      	adds	r3, #2
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006222:	4b3b      	ldr	r3, [pc, #236]	@ (8006310 <HAL_GPIO_Init+0x334>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	43db      	mvns	r3, r3
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	4013      	ands	r3, r2
 8006230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006246:	4a32      	ldr	r2, [pc, #200]	@ (8006310 <HAL_GPIO_Init+0x334>)
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800624c:	4b30      	ldr	r3, [pc, #192]	@ (8006310 <HAL_GPIO_Init+0x334>)
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	43db      	mvns	r3, r3
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	4013      	ands	r3, r2
 800625a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006270:	4a27      	ldr	r2, [pc, #156]	@ (8006310 <HAL_GPIO_Init+0x334>)
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006276:	4b26      	ldr	r3, [pc, #152]	@ (8006310 <HAL_GPIO_Init+0x334>)
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	43db      	mvns	r3, r3
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	4013      	ands	r3, r2
 8006284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800629a:	4a1d      	ldr	r2, [pc, #116]	@ (8006310 <HAL_GPIO_Init+0x334>)
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062a0:	4b1b      	ldr	r3, [pc, #108]	@ (8006310 <HAL_GPIO_Init+0x334>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	43db      	mvns	r3, r3
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	4013      	ands	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062c4:	4a12      	ldr	r2, [pc, #72]	@ (8006310 <HAL_GPIO_Init+0x334>)
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	3301      	adds	r3, #1
 80062ce:	61fb      	str	r3, [r7, #28]
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	2b0f      	cmp	r3, #15
 80062d4:	f67f ae90 	bls.w	8005ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	3724      	adds	r7, #36	@ 0x24
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40023800 	.word	0x40023800
 80062ec:	40013800 	.word	0x40013800
 80062f0:	40020000 	.word	0x40020000
 80062f4:	40020400 	.word	0x40020400
 80062f8:	40020800 	.word	0x40020800
 80062fc:	40020c00 	.word	0x40020c00
 8006300:	40021000 	.word	0x40021000
 8006304:	40021400 	.word	0x40021400
 8006308:	40021800 	.word	0x40021800
 800630c:	40021c00 	.word	0x40021c00
 8006310:	40013c00 	.word	0x40013c00

08006314 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e041      	b.n	80063aa <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d106      	bne.n	8006340 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7fe ff06 	bl	800514c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3304      	adds	r3, #4
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f000 f88a 	bl	800646c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d101      	bne.n	80063d2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80063ce:	2302      	movs	r3, #2
 80063d0:	e048      	b.n	8006464 <HAL_TIM_OC_ConfigChannel+0xb0>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b0c      	cmp	r3, #12
 80063de:	d839      	bhi.n	8006454 <HAL_TIM_OC_ConfigChannel+0xa0>
 80063e0:	a201      	add	r2, pc, #4	@ (adr r2, 80063e8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80063e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e6:	bf00      	nop
 80063e8:	0800641d 	.word	0x0800641d
 80063ec:	08006455 	.word	0x08006455
 80063f0:	08006455 	.word	0x08006455
 80063f4:	08006455 	.word	0x08006455
 80063f8:	0800642b 	.word	0x0800642b
 80063fc:	08006455 	.word	0x08006455
 8006400:	08006455 	.word	0x08006455
 8006404:	08006455 	.word	0x08006455
 8006408:	08006439 	.word	0x08006439
 800640c:	08006455 	.word	0x08006455
 8006410:	08006455 	.word	0x08006455
 8006414:	08006455 	.word	0x08006455
 8006418:	08006447 	.word	0x08006447
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	4618      	mov	r0, r3
 8006424:	f000 f8ce 	bl	80065c4 <TIM_OC1_SetConfig>
      break;
 8006428:	e017      	b.n	800645a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	4618      	mov	r0, r3
 8006432:	f000 f937 	bl	80066a4 <TIM_OC2_SetConfig>
      break;
 8006436:	e010      	b.n	800645a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68b9      	ldr	r1, [r7, #8]
 800643e:	4618      	mov	r0, r3
 8006440:	f000 f9a6 	bl	8006790 <TIM_OC3_SetConfig>
      break;
 8006444:	e009      	b.n	800645a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	4618      	mov	r0, r3
 800644e:	f000 fa13 	bl	8006878 <TIM_OC4_SetConfig>
      break;
 8006452:	e002      	b.n	800645a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	75fb      	strb	r3, [r7, #23]
      break;
 8006458:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006462:	7dfb      	ldrb	r3, [r7, #23]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a46      	ldr	r2, [pc, #280]	@ (8006598 <TIM_Base_SetConfig+0x12c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d013      	beq.n	80064ac <TIM_Base_SetConfig+0x40>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800648a:	d00f      	beq.n	80064ac <TIM_Base_SetConfig+0x40>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a43      	ldr	r2, [pc, #268]	@ (800659c <TIM_Base_SetConfig+0x130>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00b      	beq.n	80064ac <TIM_Base_SetConfig+0x40>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a42      	ldr	r2, [pc, #264]	@ (80065a0 <TIM_Base_SetConfig+0x134>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d007      	beq.n	80064ac <TIM_Base_SetConfig+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a41      	ldr	r2, [pc, #260]	@ (80065a4 <TIM_Base_SetConfig+0x138>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d003      	beq.n	80064ac <TIM_Base_SetConfig+0x40>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a40      	ldr	r2, [pc, #256]	@ (80065a8 <TIM_Base_SetConfig+0x13c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d108      	bne.n	80064be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a35      	ldr	r2, [pc, #212]	@ (8006598 <TIM_Base_SetConfig+0x12c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d02b      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064cc:	d027      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a32      	ldr	r2, [pc, #200]	@ (800659c <TIM_Base_SetConfig+0x130>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d023      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a31      	ldr	r2, [pc, #196]	@ (80065a0 <TIM_Base_SetConfig+0x134>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01f      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a30      	ldr	r2, [pc, #192]	@ (80065a4 <TIM_Base_SetConfig+0x138>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d01b      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a2f      	ldr	r2, [pc, #188]	@ (80065a8 <TIM_Base_SetConfig+0x13c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d017      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a2e      	ldr	r2, [pc, #184]	@ (80065ac <TIM_Base_SetConfig+0x140>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a2d      	ldr	r2, [pc, #180]	@ (80065b0 <TIM_Base_SetConfig+0x144>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00f      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a2c      	ldr	r2, [pc, #176]	@ (80065b4 <TIM_Base_SetConfig+0x148>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00b      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a2b      	ldr	r2, [pc, #172]	@ (80065b8 <TIM_Base_SetConfig+0x14c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d007      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a2a      	ldr	r2, [pc, #168]	@ (80065bc <TIM_Base_SetConfig+0x150>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d003      	beq.n	800651e <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a29      	ldr	r2, [pc, #164]	@ (80065c0 <TIM_Base_SetConfig+0x154>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d108      	bne.n	8006530 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a10      	ldr	r2, [pc, #64]	@ (8006598 <TIM_Base_SetConfig+0x12c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d003      	beq.n	8006564 <TIM_Base_SetConfig+0xf8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a12      	ldr	r2, [pc, #72]	@ (80065a8 <TIM_Base_SetConfig+0x13c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d103      	bne.n	800656c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b01      	cmp	r3, #1
 800657c:	d105      	bne.n	800658a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f023 0201 	bic.w	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	611a      	str	r2, [r3, #16]
  }
}
 800658a:	bf00      	nop
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40010000 	.word	0x40010000
 800659c:	40000400 	.word	0x40000400
 80065a0:	40000800 	.word	0x40000800
 80065a4:	40000c00 	.word	0x40000c00
 80065a8:	40010400 	.word	0x40010400
 80065ac:	40014000 	.word	0x40014000
 80065b0:	40014400 	.word	0x40014400
 80065b4:	40014800 	.word	0x40014800
 80065b8:	40001800 	.word	0x40001800
 80065bc:	40001c00 	.word	0x40001c00
 80065c0:	40002000 	.word	0x40002000

080065c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	f023 0201 	bic.w	r2, r3, #1
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0303 	bic.w	r3, r3, #3
 80065fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f023 0302 	bic.w	r3, r3, #2
 800660c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a20      	ldr	r2, [pc, #128]	@ (800669c <TIM_OC1_SetConfig+0xd8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <TIM_OC1_SetConfig+0x64>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a1f      	ldr	r2, [pc, #124]	@ (80066a0 <TIM_OC1_SetConfig+0xdc>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d10c      	bne.n	8006642 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f023 0308 	bic.w	r3, r3, #8
 800662e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f023 0304 	bic.w	r3, r3, #4
 8006640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a15      	ldr	r2, [pc, #84]	@ (800669c <TIM_OC1_SetConfig+0xd8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d003      	beq.n	8006652 <TIM_OC1_SetConfig+0x8e>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a14      	ldr	r2, [pc, #80]	@ (80066a0 <TIM_OC1_SetConfig+0xdc>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d111      	bne.n	8006676 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	621a      	str	r2, [r3, #32]
}
 8006690:	bf00      	nop
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	40010000 	.word	0x40010000
 80066a0:	40010400 	.word	0x40010400

080066a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	f023 0210 	bic.w	r2, r3, #16
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	021b      	lsls	r3, r3, #8
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f023 0320 	bic.w	r3, r3, #32
 80066ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a22      	ldr	r2, [pc, #136]	@ (8006788 <TIM_OC2_SetConfig+0xe4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d003      	beq.n	800670c <TIM_OC2_SetConfig+0x68>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a21      	ldr	r2, [pc, #132]	@ (800678c <TIM_OC2_SetConfig+0xe8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d10d      	bne.n	8006728 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	4313      	orrs	r3, r2
 800671e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006726:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a17      	ldr	r2, [pc, #92]	@ (8006788 <TIM_OC2_SetConfig+0xe4>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d003      	beq.n	8006738 <TIM_OC2_SetConfig+0x94>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a16      	ldr	r2, [pc, #88]	@ (800678c <TIM_OC2_SetConfig+0xe8>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d113      	bne.n	8006760 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800673e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006746:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4313      	orrs	r3, r2
 800675e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	621a      	str	r2, [r3, #32]
}
 800677a:	bf00      	nop
 800677c:	371c      	adds	r7, #28
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	40010000 	.word	0x40010000
 800678c:	40010400 	.word	0x40010400

08006790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0303 	bic.w	r3, r3, #3
 80067c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a21      	ldr	r2, [pc, #132]	@ (8006870 <TIM_OC3_SetConfig+0xe0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d003      	beq.n	80067f6 <TIM_OC3_SetConfig+0x66>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a20      	ldr	r2, [pc, #128]	@ (8006874 <TIM_OC3_SetConfig+0xe4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d10d      	bne.n	8006812 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	021b      	lsls	r3, r3, #8
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	4313      	orrs	r3, r2
 8006808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a16      	ldr	r2, [pc, #88]	@ (8006870 <TIM_OC3_SetConfig+0xe0>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d003      	beq.n	8006822 <TIM_OC3_SetConfig+0x92>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a15      	ldr	r2, [pc, #84]	@ (8006874 <TIM_OC3_SetConfig+0xe4>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d113      	bne.n	800684a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	4313      	orrs	r3, r2
 800683c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	621a      	str	r2, [r3, #32]
}
 8006864:	bf00      	nop
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	40010000 	.word	0x40010000
 8006874:	40010400 	.word	0x40010400

08006878 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	021b      	lsls	r3, r3, #8
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	031b      	lsls	r3, r3, #12
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a12      	ldr	r2, [pc, #72]	@ (800691c <TIM_OC4_SetConfig+0xa4>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d003      	beq.n	80068e0 <TIM_OC4_SetConfig+0x68>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a11      	ldr	r2, [pc, #68]	@ (8006920 <TIM_OC4_SetConfig+0xa8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d109      	bne.n	80068f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	019b      	lsls	r3, r3, #6
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	621a      	str	r2, [r3, #32]
}
 800690e:	bf00      	nop
 8006910:	371c      	adds	r7, #28
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	40010000 	.word	0x40010000
 8006920:	40010400 	.word	0x40010400

08006924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006938:	2302      	movs	r3, #2
 800693a:	e05a      	b.n	80069f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a21      	ldr	r2, [pc, #132]	@ (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d022      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006988:	d01d      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a1d      	ldr	r2, [pc, #116]	@ (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d018      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a1b      	ldr	r2, [pc, #108]	@ (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d013      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1a      	ldr	r2, [pc, #104]	@ (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00e      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a18      	ldr	r2, [pc, #96]	@ (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d009      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a17      	ldr	r2, [pc, #92]	@ (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d004      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a15      	ldr	r2, [pc, #84]	@ (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d10c      	bne.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40010000 	.word	0x40010000
 8006a04:	40000400 	.word	0x40000400
 8006a08:	40000800 	.word	0x40000800
 8006a0c:	40000c00 	.word	0x40000c00
 8006a10:	40010400 	.word	0x40010400
 8006a14:	40014000 	.word	0x40014000
 8006a18:	40001800 	.word	0x40001800

08006a1c <LL_ADC_REG_SetSequencerLength>:
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	bf0c      	ite	eq
 8006a56:	2301      	moveq	r3, #1
 8006a58:	2300      	movne	r3, #0
 8006a5a:	b2db      	uxtb	r3, r3
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8006a68:	b590      	push	{r4, r7, lr}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006a72:	2300      	movs	r3, #0
 8006a74:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8006a76:	481c      	ldr	r0, [pc, #112]	@ (8006ae8 <LL_ADC_CommonInit+0x80>)
 8006a78:	f7ff ffe3 	bl	8006a42 <LL_ADC_IsEnabled>
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	481b      	ldr	r0, [pc, #108]	@ (8006aec <LL_ADC_CommonInit+0x84>)
 8006a80:	f7ff ffdf 	bl	8006a42 <LL_ADC_IsEnabled>
 8006a84:	4603      	mov	r3, r0
 8006a86:	431c      	orrs	r4, r3
 8006a88:	4819      	ldr	r0, [pc, #100]	@ (8006af0 <LL_ADC_CommonInit+0x88>)
 8006a8a:	f7ff ffda 	bl	8006a42 <LL_ADC_IsEnabled>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	4323      	orrs	r3, r4
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d120      	bne.n	8006ad8 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d012      	beq.n	8006ac4 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	4b14      	ldr	r3, [pc, #80]	@ (8006af4 <LL_ADC_CommonInit+0x8c>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	6811      	ldr	r1, [r2, #0]
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	6852      	ldr	r2, [r2, #4]
 8006aae:	4311      	orrs	r1, r2
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	6892      	ldr	r2, [r2, #8]
 8006ab4:	4311      	orrs	r1, r2
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	68d2      	ldr	r2, [r2, #12]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	605a      	str	r2, [r3, #4]
 8006ac2:	e00b      	b.n	8006adc <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8006af4 <LL_ADC_CommonInit+0x8c>)
 8006aca:	4013      	ands	r3, r2
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	6812      	ldr	r2, [r2, #0]
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	605a      	str	r2, [r3, #4]
 8006ad6:	e001      	b.n	8006adc <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd90      	pop	{r4, r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	40012000 	.word	0x40012000
 8006aec:	40012100 	.word	0x40012100
 8006af0:	40012200 	.word	0x40012200
 8006af4:	fffc10e0 	.word	0xfffc10e0

08006af8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006b02:	2300      	movs	r3, #0
 8006b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff ff9b 	bl	8006a42 <LL_ADC_IsEnabled>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d117      	bne.n	8006b42 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8006b1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	6811      	ldr	r1, [r2, #0]
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	6892      	ldr	r2, [r2, #8]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	609a      	str	r2, [r3, #8]
 8006b40:	e001      	b.n	8006b46 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff ff6f 	bl	8006a42 <LL_ADC_IsEnabled>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d12b      	bne.n	8006bc2 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d009      	beq.n	8006b86 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	605a      	str	r2, [r3, #4]
 8006b84:	e005      	b.n	8006b92 <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	689a      	ldr	r2, [r3, #8]
 8006b96:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd0 <LL_ADC_REG_Init+0x80>)
 8006b98:	4013      	ands	r3, r2
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	6812      	ldr	r2, [r2, #0]
 8006b9e:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	68d2      	ldr	r2, [r2, #12]
 8006ba6:	4311      	orrs	r1, r2
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	6912      	ldr	r2, [r2, #16]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff ff2e 	bl	8006a1c <LL_ADC_REG_SetSequencerLength>
 8006bc0:	e001      	b.n	8006bc6 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	c0fffcfd 	.word	0xc0fffcfd

08006bd4 <LL_GPIO_SetPinMode>:
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b08b      	sub	sp, #44	@ 0x2c
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	fa93 f3a3 	rbit	r3, r3
 8006bee:	613b      	str	r3, [r7, #16]
  return result;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006bfa:	2320      	movs	r3, #32
 8006bfc:	e003      	b.n	8006c06 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	fab3 f383 	clz	r3, r3
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	2103      	movs	r1, #3
 8006c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0e:	43db      	mvns	r3, r3
 8006c10:	401a      	ands	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	fa93 f3a3 	rbit	r3, r3
 8006c1c:	61fb      	str	r3, [r7, #28]
  return result;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006c28:	2320      	movs	r3, #32
 8006c2a:	e003      	b.n	8006c34 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2e:	fab3 f383 	clz	r3, r3
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	fa01 f303 	lsl.w	r3, r1, r3
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	601a      	str	r2, [r3, #0]
}
 8006c42:	bf00      	nop
 8006c44:	372c      	adds	r7, #44	@ 0x2c
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <LL_GPIO_SetPinOutputType>:
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b085      	sub	sp, #20
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	43db      	mvns	r3, r3
 8006c62:	401a      	ands	r2, r3
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	fb01 f303 	mul.w	r3, r1, r3
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	605a      	str	r2, [r3, #4]
}
 8006c72:	bf00      	nop
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <LL_GPIO_SetPinSpeed>:
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b08b      	sub	sp, #44	@ 0x2c
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	fa93 f3a3 	rbit	r3, r3
 8006c98:	613b      	str	r3, [r7, #16]
  return result;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006ca4:	2320      	movs	r3, #32
 8006ca6:	e003      	b.n	8006cb0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	fab3 f383 	clz	r3, r3
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	2103      	movs	r1, #3
 8006cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb8:	43db      	mvns	r3, r3
 8006cba:	401a      	ands	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	fa93 f3a3 	rbit	r3, r3
 8006cc6:	61fb      	str	r3, [r7, #28]
  return result;
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006cd2:	2320      	movs	r3, #32
 8006cd4:	e003      	b.n	8006cde <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd8:	fab3 f383 	clz	r3, r3
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	609a      	str	r2, [r3, #8]
}
 8006cec:	bf00      	nop
 8006cee:	372c      	adds	r7, #44	@ 0x2c
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <LL_GPIO_SetPinPull>:
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b08b      	sub	sp, #44	@ 0x2c
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	fa93 f3a3 	rbit	r3, r3
 8006d12:	613b      	str	r3, [r7, #16]
  return result;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006d1e:	2320      	movs	r3, #32
 8006d20:	e003      	b.n	8006d2a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	fab3 f383 	clz	r3, r3
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	2103      	movs	r1, #3
 8006d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d32:	43db      	mvns	r3, r3
 8006d34:	401a      	ands	r2, r3
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	fa93 f3a3 	rbit	r3, r3
 8006d40:	61fb      	str	r3, [r7, #28]
  return result;
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006d4c:	2320      	movs	r3, #32
 8006d4e:	e003      	b.n	8006d58 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d52:	fab3 f383 	clz	r3, r3
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d60:	431a      	orrs	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	60da      	str	r2, [r3, #12]
}
 8006d66:	bf00      	nop
 8006d68:	372c      	adds	r7, #44	@ 0x2c
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <LL_GPIO_SetAFPin_0_7>:
{
 8006d72:	b480      	push	{r7}
 8006d74:	b08b      	sub	sp, #44	@ 0x2c
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6a1a      	ldr	r2, [r3, #32]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	fa93 f3a3 	rbit	r3, r3
 8006d8c:	613b      	str	r3, [r7, #16]
  return result;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006d98:	2320      	movs	r3, #32
 8006d9a:	e003      	b.n	8006da4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	fab3 f383 	clz	r3, r3
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	210f      	movs	r1, #15
 8006da8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dac:	43db      	mvns	r3, r3
 8006dae:	401a      	ands	r2, r3
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	fa93 f3a3 	rbit	r3, r3
 8006dba:	61fb      	str	r3, [r7, #28]
  return result;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006dc6:	2320      	movs	r3, #32
 8006dc8:	e003      	b.n	8006dd2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dcc:	fab3 f383 	clz	r3, r3
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	621a      	str	r2, [r3, #32]
}
 8006de0:	bf00      	nop
 8006de2:	372c      	adds	r7, #44	@ 0x2c
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <LL_GPIO_SetAFPin_8_15>:
{
 8006dec:	b480      	push	{r7}
 8006dee:	b08b      	sub	sp, #44	@ 0x2c
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	0a1b      	lsrs	r3, r3, #8
 8006e00:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	fa93 f3a3 	rbit	r3, r3
 8006e08:	613b      	str	r3, [r7, #16]
  return result;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006e14:	2320      	movs	r3, #32
 8006e16:	e003      	b.n	8006e20 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	fab3 f383 	clz	r3, r3
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	210f      	movs	r1, #15
 8006e24:	fa01 f303 	lsl.w	r3, r1, r3
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	401a      	ands	r2, r3
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	0a1b      	lsrs	r3, r3, #8
 8006e30:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	fa93 f3a3 	rbit	r3, r3
 8006e38:	61fb      	str	r3, [r7, #28]
  return result;
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006e44:	2320      	movs	r3, #32
 8006e46:	e003      	b.n	8006e50 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4a:	fab3 f383 	clz	r3, r3
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	fa01 f303 	lsl.w	r3, r1, r3
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006e5e:	bf00      	nop
 8006e60:	372c      	adds	r7, #44	@ 0x2c
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b08a      	sub	sp, #40	@ 0x28
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	fa93 f3a3 	rbit	r3, r3
 8006e88:	617b      	str	r3, [r7, #20]
  return result;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <LL_GPIO_Init+0x2e>
    return 32U;
 8006e94:	2320      	movs	r3, #32
 8006e96:	e003      	b.n	8006ea0 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	fab3 f383 	clz	r3, r3
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006ea2:	e057      	b.n	8006f54 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d049      	beq.n	8006f4e <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d003      	beq.n	8006eca <LL_GPIO_Init+0x60>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d10d      	bne.n	8006ee6 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6a39      	ldr	r1, [r7, #32]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff fed3 	bl	8006c7e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	461a      	mov	r2, r3
 8006ede:	6a39      	ldr	r1, [r7, #32]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff feb4 	bl	8006c4e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	461a      	mov	r2, r3
 8006eec:	6a39      	ldr	r1, [r7, #32]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff ff02 	bl	8006cf8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d121      	bne.n	8006f40 <LL_GPIO_Init+0xd6>
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	fa93 f3a3 	rbit	r3, r3
 8006f06:	60bb      	str	r3, [r7, #8]
  return result;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <LL_GPIO_Init+0xac>
    return 32U;
 8006f12:	2320      	movs	r3, #32
 8006f14:	e003      	b.n	8006f1e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	fab3 f383 	clz	r3, r3
 8006f1c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006f1e:	2b07      	cmp	r3, #7
 8006f20:	d807      	bhi.n	8006f32 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	461a      	mov	r2, r3
 8006f28:	6a39      	ldr	r1, [r7, #32]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff ff21 	bl	8006d72 <LL_GPIO_SetAFPin_0_7>
 8006f30:	e006      	b.n	8006f40 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	461a      	mov	r2, r3
 8006f38:	6a39      	ldr	r1, [r7, #32]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff ff56 	bl	8006dec <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	461a      	mov	r2, r3
 8006f46:	6a39      	ldr	r1, [r7, #32]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff fe43 	bl	8006bd4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	3301      	adds	r3, #1
 8006f52:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1a0      	bne.n	8006ea4 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3728      	adds	r7, #40	@ 0x28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <LL_I2C_Enable>:
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f043 0201 	orr.w	r2, r3, #1
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	601a      	str	r2, [r3, #0]
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <LL_I2C_Disable>:
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f023 0201 	bic.w	r2, r3, #1
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	601a      	str	r2, [r3, #0]
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <LL_I2C_SetOwnAddress1>:
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006fc0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006fc4:	68b9      	ldr	r1, [r7, #8]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	609a      	str	r2, [r3, #8]
}
 8006fd0:	bf00      	nop
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <LL_I2C_ConfigSpeed>:
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	4a42      	ldr	r2, [pc, #264]	@ (8007100 <LL_I2C_ConfigSpeed+0x124>)
 8006ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffa:	0c9b      	lsrs	r3, r3, #18
 8006ffc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	431a      	orrs	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	493a      	ldr	r1, [pc, #232]	@ (8007104 <LL_I2C_ConfigSpeed+0x128>)
 800701a:	428b      	cmp	r3, r1
 800701c:	d802      	bhi.n	8007024 <LL_I2C_ConfigSpeed+0x48>
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	3301      	adds	r3, #1
 8007022:	e009      	b.n	8007038 <LL_I2C_ConfigSpeed+0x5c>
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800702a:	fb01 f303 	mul.w	r3, r1, r3
 800702e:	4936      	ldr	r1, [pc, #216]	@ (8007108 <LL_I2C_ConfigSpeed+0x12c>)
 8007030:	fba1 1303 	umull	r1, r3, r1, r3
 8007034:	099b      	lsrs	r3, r3, #6
 8007036:	3301      	adds	r3, #1
 8007038:	431a      	orrs	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a30      	ldr	r2, [pc, #192]	@ (8007104 <LL_I2C_ConfigSpeed+0x128>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d939      	bls.n	80070ba <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d117      	bne.n	800707c <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	4613      	mov	r3, r2
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	4413      	add	r3, r2
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	fbb2 f3f3 	udiv	r3, r2, r3
 800705a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800705e:	2b00      	cmp	r3, #0
 8007060:	d009      	beq.n	8007076 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	4613      	mov	r3, r2
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	4413      	add	r3, r2
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8007070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007074:	e01d      	b.n	80070b2 <LL_I2C_ConfigSpeed+0xd6>
 8007076:	f248 0301 	movw	r3, #32769	@ 0x8001
 800707a:	e01a      	b.n	80070b2 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	009a      	lsls	r2, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	fbb2 f3f3 	udiv	r3, r2, r3
 800708e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00b      	beq.n	80070ae <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	4613      	mov	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	009a      	lsls	r2, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80070a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ac:	e001      	b.n	80070b2 <LL_I2C_ConfigSpeed+0xd6>
 80070ae:	f248 0301 	movw	r3, #32769	@ 0x8001
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	e011      	b.n	80070de <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80070c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80070c8:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d8:	e000      	b.n	80070dc <LL_I2C_ConfigSpeed+0x100>
 80070da:	2304      	movs	r3, #4
 80070dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 80070e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	431a      	orrs	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	61da      	str	r2, [r3, #28]
}
 80070f2:	bf00      	nop
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	431bde83 	.word	0x431bde83
 8007104:	000186a0 	.word	0x000186a0
 8007108:	10624dd3 	.word	0x10624dd3

0800710c <LL_I2C_SetMode>:
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f023 021a 	bic.w	r2, r3, #26
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	431a      	orrs	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	601a      	str	r2, [r3, #0]
}
 8007126:	bf00      	nop
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <LL_I2C_AcknowledgeNextData>:
{
 8007132:	b480      	push	{r7}
 8007134:	b083      	sub	sp, #12
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	601a      	str	r2, [r3, #0]
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <LL_APB1_GRP1_ForceReset>:
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR, Periphs);
 8007160:	4b05      	ldr	r3, [pc, #20]	@ (8007178 <LL_APB1_GRP1_ForceReset+0x20>)
 8007162:	6a1a      	ldr	r2, [r3, #32]
 8007164:	4904      	ldr	r1, [pc, #16]	@ (8007178 <LL_APB1_GRP1_ForceReset+0x20>)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4313      	orrs	r3, r2
 800716a:	620b      	str	r3, [r1, #32]
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	40023800 	.word	0x40023800

0800717c <LL_APB1_GRP1_ReleaseReset>:
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 8007184:	4b06      	ldr	r3, [pc, #24]	@ (80071a0 <LL_APB1_GRP1_ReleaseReset+0x24>)
 8007186:	6a1a      	ldr	r2, [r3, #32]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	43db      	mvns	r3, r3
 800718c:	4904      	ldr	r1, [pc, #16]	@ (80071a0 <LL_APB1_GRP1_ReleaseReset+0x24>)
 800718e:	4013      	ands	r3, r2
 8007190:	620b      	str	r3, [r1, #32]
}
 8007192:	bf00      	nop
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40023800 	.word	0x40023800

080071a4 <LL_I2C_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are de-initialized
  *          - ERROR  I2C registers are not de-initialized
  */
uint32_t LL_I2C_DeInit(I2C_TypeDef *I2Cx)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]

  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));

  if (I2Cx == I2C1)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a16      	ldr	r2, [pc, #88]	@ (800720c <LL_I2C_DeInit+0x68>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d108      	bne.n	80071ca <LL_I2C_DeInit+0x26>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C1);
 80071b8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80071bc:	f7ff ffcc 	bl	8007158 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C1);
 80071c0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80071c4:	f7ff ffda 	bl	800717c <LL_APB1_GRP1_ReleaseReset>
 80071c8:	e01b      	b.n	8007202 <LL_I2C_DeInit+0x5e>
  }
  else if (I2Cx == I2C2)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a10      	ldr	r2, [pc, #64]	@ (8007210 <LL_I2C_DeInit+0x6c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d108      	bne.n	80071e4 <LL_I2C_DeInit+0x40>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C2);
 80071d2:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80071d6:	f7ff ffbf 	bl	8007158 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C2);
 80071da:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80071de:	f7ff ffcd 	bl	800717c <LL_APB1_GRP1_ReleaseReset>
 80071e2:	e00e      	b.n	8007202 <LL_I2C_DeInit+0x5e>

  }
#if defined(I2C3)
  else if (I2Cx == I2C3)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a0b      	ldr	r2, [pc, #44]	@ (8007214 <LL_I2C_DeInit+0x70>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d108      	bne.n	80071fe <LL_I2C_DeInit+0x5a>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C3);
 80071ec:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80071f0:	f7ff ffb2 	bl	8007158 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C3);
 80071f4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80071f8:	f7ff ffc0 	bl	800717c <LL_APB1_GRP1_ReleaseReset>
 80071fc:	e001      	b.n	8007202 <LL_I2C_DeInit+0x5e>
  }
#endif
  else
  {
    status = ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007202:	7bfb      	ldrb	r3, [r7, #15]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	40005400 	.word	0x40005400
 8007210:	40005800 	.word	0x40005800
 8007214:	40005c00 	.word	0x40005c00

08007218 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7ff feb2 	bl	8006f8c <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007228:	f107 0308 	add.w	r3, r7, #8
 800722c:	4618      	mov	r0, r3
 800722e:	f000 f895 	bl	800735c <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8007232:	6939      	ldr	r1, [r7, #16]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff fecd 	bl	8006fdc <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68d9      	ldr	r1, [r3, #12]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	461a      	mov	r2, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff fead 	bl	8006fac <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff ff57 	bl	800710c <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7ff fe84 	bl	8006f6c <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7ff ff61 	bl	8007132 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <LL_RCC_GetSysClkSource>:
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007280:	4b04      	ldr	r3, [pc, #16]	@ (8007294 <LL_RCC_GetSysClkSource+0x18>)
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f003 030c 	and.w	r3, r3, #12
}
 8007288:	4618      	mov	r0, r3
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	40023800 	.word	0x40023800

08007298 <LL_RCC_GetAHBPrescaler>:
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800729c:	4b04      	ldr	r3, [pc, #16]	@ (80072b0 <LL_RCC_GetAHBPrescaler+0x18>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	40023800 	.word	0x40023800

080072b4 <LL_RCC_GetAPB1Prescaler>:
{
 80072b4:	b480      	push	{r7}
 80072b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80072b8:	4b04      	ldr	r3, [pc, #16]	@ (80072cc <LL_RCC_GetAPB1Prescaler+0x18>)
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40023800 	.word	0x40023800

080072d0 <LL_RCC_GetAPB2Prescaler>:
{
 80072d0:	b480      	push	{r7}
 80072d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80072d4:	4b04      	ldr	r3, [pc, #16]	@ (80072e8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80072dc:	4618      	mov	r0, r3
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	40023800 	.word	0x40023800

080072ec <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80072f0:	4b04      	ldr	r3, [pc, #16]	@ (8007304 <LL_RCC_PLL_GetMainSource+0x18>)
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	40023800 	.word	0x40023800

08007308 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800730c:	4b04      	ldr	r3, [pc, #16]	@ (8007320 <LL_RCC_PLL_GetN+0x18>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	099b      	lsrs	r3, r3, #6
 8007312:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8007316:	4618      	mov	r0, r3
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	40023800 	.word	0x40023800

08007324 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8007328:	4b04      	ldr	r3, [pc, #16]	@ (800733c <LL_RCC_PLL_GetP+0x18>)
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8007330:	4618      	mov	r0, r3
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	40023800 	.word	0x40023800

08007340 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007344:	4b04      	ldr	r3, [pc, #16]	@ (8007358 <LL_RCC_PLL_GetDivider+0x18>)
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800734c:	4618      	mov	r0, r3
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	40023800 	.word	0x40023800

0800735c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8007364:	f000 f820 	bl	80073a8 <RCC_GetSystemClockFreq>
 8007368:	4602      	mov	r2, r0
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f000 f840 	bl	80073f8 <RCC_GetHCLKClockFreq>
 8007378:	4602      	mov	r2, r0
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	4618      	mov	r0, r3
 8007384:	f000 f84e 	bl	8007424 <RCC_GetPCLK1ClockFreq>
 8007388:	4602      	mov	r2, r0
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	4618      	mov	r0, r3
 8007394:	f000 f85a 	bl	800744c <RCC_GetPCLK2ClockFreq>
 8007398:	4602      	mov	r2, r0
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	60da      	str	r2, [r3, #12]
}
 800739e:	bf00      	nop
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80073b2:	f7ff ff63 	bl	800727c <LL_RCC_GetSysClkSource>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	d00c      	beq.n	80073d6 <RCC_GetSystemClockFreq+0x2e>
 80073bc:	2b08      	cmp	r3, #8
 80073be:	d80f      	bhi.n	80073e0 <RCC_GetSystemClockFreq+0x38>
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <RCC_GetSystemClockFreq+0x22>
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d003      	beq.n	80073d0 <RCC_GetSystemClockFreq+0x28>
 80073c8:	e00a      	b.n	80073e0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80073ca:	4b09      	ldr	r3, [pc, #36]	@ (80073f0 <RCC_GetSystemClockFreq+0x48>)
 80073cc:	607b      	str	r3, [r7, #4]
      break;
 80073ce:	e00a      	b.n	80073e6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80073d0:	4b08      	ldr	r3, [pc, #32]	@ (80073f4 <RCC_GetSystemClockFreq+0x4c>)
 80073d2:	607b      	str	r3, [r7, #4]
      break;
 80073d4:	e007      	b.n	80073e6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80073d6:	2008      	movs	r0, #8
 80073d8:	f000 f84c 	bl	8007474 <RCC_PLL_GetFreqDomain_SYS>
 80073dc:	6078      	str	r0, [r7, #4]
      break;
 80073de:	e002      	b.n	80073e6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80073e0:	4b03      	ldr	r3, [pc, #12]	@ (80073f0 <RCC_GetSystemClockFreq+0x48>)
 80073e2:	607b      	str	r3, [r7, #4]
      break;
 80073e4:	bf00      	nop
  }

  return frequency;
 80073e6:	687b      	ldr	r3, [r7, #4]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	00f42400 	.word	0x00f42400
 80073f4:	007a1200 	.word	0x007a1200

080073f8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007400:	f7ff ff4a 	bl	8007298 <LL_RCC_GetAHBPrescaler>
 8007404:	4603      	mov	r3, r0
 8007406:	091b      	lsrs	r3, r3, #4
 8007408:	f003 030f 	and.w	r3, r3, #15
 800740c:	4a04      	ldr	r2, [pc, #16]	@ (8007420 <RCC_GetHCLKClockFreq+0x28>)
 800740e:	5cd3      	ldrb	r3, [r2, r3]
 8007410:	461a      	mov	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	40d3      	lsrs	r3, r2
}
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	08009c58 	.word	0x08009c58

08007424 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800742c:	f7ff ff42 	bl	80072b4 <LL_RCC_GetAPB1Prescaler>
 8007430:	4603      	mov	r3, r0
 8007432:	0a9b      	lsrs	r3, r3, #10
 8007434:	4a04      	ldr	r2, [pc, #16]	@ (8007448 <RCC_GetPCLK1ClockFreq+0x24>)
 8007436:	5cd3      	ldrb	r3, [r2, r3]
 8007438:	461a      	mov	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	40d3      	lsrs	r3, r2
}
 800743e:	4618      	mov	r0, r3
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	08009c68 	.word	0x08009c68

0800744c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007454:	f7ff ff3c 	bl	80072d0 <LL_RCC_GetAPB2Prescaler>
 8007458:	4603      	mov	r3, r0
 800745a:	0b5b      	lsrs	r3, r3, #13
 800745c:	4a04      	ldr	r2, [pc, #16]	@ (8007470 <RCC_GetPCLK2ClockFreq+0x24>)
 800745e:	5cd3      	ldrb	r3, [r2, r3]
 8007460:	461a      	mov	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	40d3      	lsrs	r3, r2
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	08009c68 	.word	0x08009c68

08007474 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8007474:	b590      	push	{r4, r7, lr}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007488:	f7ff ff30 	bl	80072ec <LL_RCC_PLL_GetMainSource>
 800748c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d004      	beq.n	800749e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800749a:	d003      	beq.n	80074a4 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800749c:	e005      	b.n	80074aa <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800749e:	4b12      	ldr	r3, [pc, #72]	@ (80074e8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80074a0:	617b      	str	r3, [r7, #20]
      break;
 80074a2:	e005      	b.n	80074b0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80074a4:	4b11      	ldr	r3, [pc, #68]	@ (80074ec <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80074a6:	617b      	str	r3, [r7, #20]
      break;
 80074a8:	e002      	b.n	80074b0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80074aa:	4b0f      	ldr	r3, [pc, #60]	@ (80074e8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80074ac:	617b      	str	r3, [r7, #20]
      break;
 80074ae:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b08      	cmp	r3, #8
 80074b4:	d113      	bne.n	80074de <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80074b6:	f7ff ff43 	bl	8007340 <LL_RCC_PLL_GetDivider>
 80074ba:	4602      	mov	r2, r0
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	fbb3 f4f2 	udiv	r4, r3, r2
 80074c2:	f7ff ff21 	bl	8007308 <LL_RCC_PLL_GetN>
 80074c6:	4603      	mov	r3, r0
 80074c8:	fb03 f404 	mul.w	r4, r3, r4
 80074cc:	f7ff ff2a 	bl	8007324 <LL_RCC_PLL_GetP>
 80074d0:	4603      	mov	r3, r0
 80074d2:	0c1b      	lsrs	r3, r3, #16
 80074d4:	3301      	adds	r3, #1
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	fbb4 f3f3 	udiv	r3, r4, r3
 80074dc:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80074de:	693b      	ldr	r3, [r7, #16]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	371c      	adds	r7, #28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd90      	pop	{r4, r7, pc}
 80074e8:	00f42400 	.word	0x00f42400
 80074ec:	007a1200 	.word	0x007a1200

080074f0 <LL_SPI_IsEnabled>:
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007500:	2b40      	cmp	r3, #64	@ 0x40
 8007502:	d101      	bne.n	8007508 <LL_SPI_IsEnabled+0x18>
 8007504:	2301      	movs	r3, #1
 8007506:	e000      	b.n	800750a <LL_SPI_IsEnabled+0x1a>
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	461a      	mov	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	611a      	str	r2, [r3, #16]
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff ffd3 	bl	80074f0 <LL_SPI_IsEnabled>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d139      	bne.n	80075c4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007558:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 800755c:	683a      	ldr	r2, [r7, #0]
 800755e:	6811      	ldr	r1, [r2, #0]
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	6852      	ldr	r2, [r2, #4]
 8007564:	4311      	orrs	r1, r2
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	6892      	ldr	r2, [r2, #8]
 800756a:	4311      	orrs	r1, r2
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	68d2      	ldr	r2, [r2, #12]
 8007570:	4311      	orrs	r1, r2
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	6912      	ldr	r2, [r2, #16]
 8007576:	4311      	orrs	r1, r2
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	6952      	ldr	r2, [r2, #20]
 800757c:	4311      	orrs	r1, r2
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	6992      	ldr	r2, [r2, #24]
 8007582:	4311      	orrs	r1, r2
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	69d2      	ldr	r2, [r2, #28]
 8007588:	4311      	orrs	r1, r2
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	6a12      	ldr	r2, [r2, #32]
 800758e:	430a      	orrs	r2, r1
 8007590:	431a      	orrs	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f023 0204 	bic.w	r2, r3, #4
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	0c1b      	lsrs	r3, r3, #16
 80075a4:	431a      	orrs	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075b2:	d105      	bne.n	80075c0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff ffab 	bl	8007516 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80075c0:	2300      	movs	r3, #0
 80075c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	61da      	str	r2, [r3, #28]
  return status;
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <LL_TIM_SetPrescaler>:
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <LL_TIM_SetAutoReload>:
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <LL_TIM_SetRepetitionCounter>:
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <LL_TIM_OC_SetCompareCH1>:
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <LL_TIM_OC_SetCompareCH2>:
{
 800764a:	b480      	push	{r7}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <LL_TIM_OC_SetCompareCH3>:
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <LL_TIM_OC_SetCompareCH4>:
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	f043 0201 	orr.w	r2, r3, #1
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	615a      	str	r2, [r3, #20]
}
 80076b2:	bf00      	nop
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
	...

080076c0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a3d      	ldr	r2, [pc, #244]	@ (80077c8 <LL_TIM_Init+0x108>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d013      	beq.n	8007700 <LL_TIM_Init+0x40>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076de:	d00f      	beq.n	8007700 <LL_TIM_Init+0x40>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a3a      	ldr	r2, [pc, #232]	@ (80077cc <LL_TIM_Init+0x10c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d00b      	beq.n	8007700 <LL_TIM_Init+0x40>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a39      	ldr	r2, [pc, #228]	@ (80077d0 <LL_TIM_Init+0x110>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d007      	beq.n	8007700 <LL_TIM_Init+0x40>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a38      	ldr	r2, [pc, #224]	@ (80077d4 <LL_TIM_Init+0x114>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d003      	beq.n	8007700 <LL_TIM_Init+0x40>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a37      	ldr	r2, [pc, #220]	@ (80077d8 <LL_TIM_Init+0x118>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d106      	bne.n	800770e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a2d      	ldr	r2, [pc, #180]	@ (80077c8 <LL_TIM_Init+0x108>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d02b      	beq.n	800776e <LL_TIM_Init+0xae>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800771c:	d027      	beq.n	800776e <LL_TIM_Init+0xae>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a2a      	ldr	r2, [pc, #168]	@ (80077cc <LL_TIM_Init+0x10c>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d023      	beq.n	800776e <LL_TIM_Init+0xae>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a29      	ldr	r2, [pc, #164]	@ (80077d0 <LL_TIM_Init+0x110>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d01f      	beq.n	800776e <LL_TIM_Init+0xae>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a28      	ldr	r2, [pc, #160]	@ (80077d4 <LL_TIM_Init+0x114>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d01b      	beq.n	800776e <LL_TIM_Init+0xae>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a27      	ldr	r2, [pc, #156]	@ (80077d8 <LL_TIM_Init+0x118>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d017      	beq.n	800776e <LL_TIM_Init+0xae>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a26      	ldr	r2, [pc, #152]	@ (80077dc <LL_TIM_Init+0x11c>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d013      	beq.n	800776e <LL_TIM_Init+0xae>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a25      	ldr	r2, [pc, #148]	@ (80077e0 <LL_TIM_Init+0x120>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d00f      	beq.n	800776e <LL_TIM_Init+0xae>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a24      	ldr	r2, [pc, #144]	@ (80077e4 <LL_TIM_Init+0x124>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d00b      	beq.n	800776e <LL_TIM_Init+0xae>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a23      	ldr	r2, [pc, #140]	@ (80077e8 <LL_TIM_Init+0x128>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d007      	beq.n	800776e <LL_TIM_Init+0xae>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a22      	ldr	r2, [pc, #136]	@ (80077ec <LL_TIM_Init+0x12c>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d003      	beq.n	800776e <LL_TIM_Init+0xae>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a21      	ldr	r2, [pc, #132]	@ (80077f0 <LL_TIM_Init+0x130>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d106      	bne.n	800777c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7ff ff34 	bl	80075f6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7ff ff20 	bl	80075da <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a0a      	ldr	r2, [pc, #40]	@ (80077c8 <LL_TIM_Init+0x108>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d003      	beq.n	80077aa <LL_TIM_Init+0xea>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a0c      	ldr	r2, [pc, #48]	@ (80077d8 <LL_TIM_Init+0x118>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d105      	bne.n	80077b6 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff ff2e 	bl	8007612 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff ff71 	bl	800769e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	40010000 	.word	0x40010000
 80077cc:	40000400 	.word	0x40000400
 80077d0:	40000800 	.word	0x40000800
 80077d4:	40000c00 	.word	0x40000c00
 80077d8:	40010400 	.word	0x40010400
 80077dc:	40014000 	.word	0x40014000
 80077e0:	40014400 	.word	0x40014400
 80077e4:	40014800 	.word	0x40014800
 80077e8:	40001800 	.word	0x40001800
 80077ec:	40001c00 	.word	0x40001c00
 80077f0:	40002000 	.word	0x40002000

080077f4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800780a:	d027      	beq.n	800785c <LL_TIM_OC_Init+0x68>
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007812:	d82a      	bhi.n	800786a <LL_TIM_OC_Init+0x76>
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800781a:	d018      	beq.n	800784e <LL_TIM_OC_Init+0x5a>
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007822:	d822      	bhi.n	800786a <LL_TIM_OC_Init+0x76>
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d003      	beq.n	8007832 <LL_TIM_OC_Init+0x3e>
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2b10      	cmp	r3, #16
 800782e:	d007      	beq.n	8007840 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8007830:	e01b      	b.n	800786a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 f861 	bl	80078fc <OC1Config>
 800783a:	4603      	mov	r3, r0
 800783c:	75fb      	strb	r3, [r7, #23]
      break;
 800783e:	e015      	b.n	800786c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 f8c6 	bl	80079d4 <OC2Config>
 8007848:	4603      	mov	r3, r0
 800784a:	75fb      	strb	r3, [r7, #23]
      break;
 800784c:	e00e      	b.n	800786c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f92f 	bl	8007ab4 <OC3Config>
 8007856:	4603      	mov	r3, r0
 8007858:	75fb      	strb	r3, [r7, #23]
      break;
 800785a:	e007      	b.n	800786c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800785c:	6879      	ldr	r1, [r7, #4]
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 f998 	bl	8007b94 <OC4Config>
 8007864:	4603      	mov	r3, r0
 8007866:	75fb      	strb	r3, [r7, #23]
      break;
 8007868:	e000      	b.n	800786c <LL_TIM_OC_Init+0x78>
      break;
 800786a:	bf00      	nop
  }

  return result;
 800786c:	7dfb      	ldrb	r3, [r7, #23]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8007876:	b480      	push	{r7}
 8007878:	b085      	sub	sp, #20
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8007880:	2300      	movs	r3, #0
 8007882:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	7b12      	ldrb	r2, [r2, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	4313      	orrs	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	89d2      	ldrh	r2, [r2, #14]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
	...

080078fc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	f023 0201 	bic.w	r2, r3, #1
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f023 0303 	bic.w	r3, r3, #3
 800792a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4313      	orrs	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f023 0202 	bic.w	r2, r3, #2
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	4313      	orrs	r3, r2
 8007946:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f023 0201 	bic.w	r2, r3, #1
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	4313      	orrs	r3, r2
 8007954:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a1c      	ldr	r2, [pc, #112]	@ (80079cc <OC1Config+0xd0>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d003      	beq.n	8007966 <OC1Config+0x6a>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a1b      	ldr	r2, [pc, #108]	@ (80079d0 <OC1Config+0xd4>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d11e      	bne.n	80079a4 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f023 0208 	bic.w	r2, r3, #8
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4313      	orrs	r3, r2
 8007974:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f023 0204 	bic.w	r2, r3, #4
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4313      	orrs	r3, r2
 8007984:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	4313      	orrs	r3, r2
 8007992:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	4313      	orrs	r3, r2
 80079a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7ff fe39 	bl	800762e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	40010000 	.word	0x40010000
 80079d0:	40010400 	.word	0x40010400

080079d4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	f023 0210 	bic.w	r2, r3, #16
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f023 0220 	bic.w	r2, r3, #32
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	011b      	lsls	r3, r3, #4
 8007a20:	4313      	orrs	r3, r2
 8007a22:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f023 0210 	bic.w	r2, r3, #16
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	011b      	lsls	r3, r3, #4
 8007a30:	4313      	orrs	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a1d      	ldr	r2, [pc, #116]	@ (8007aac <OC2Config+0xd8>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d003      	beq.n	8007a44 <OC2Config+0x70>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ab0 <OC2Config+0xdc>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d11f      	bne.n	8007a84 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	019b      	lsls	r3, r3, #6
 8007a50:	4313      	orrs	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	019b      	lsls	r3, r3, #6
 8007a60:	4313      	orrs	r3, r2
 8007a62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4313      	orrs	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	00db      	lsls	r3, r3, #3
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff fdd7 	bl	800764a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	40010000 	.word	0x40010000
 8007ab0:	40010400 	.word	0x40010400

08007ab4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0303 	bic.w	r3, r3, #3
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	021b      	lsls	r3, r3, #8
 8007afe:	4313      	orrs	r3, r2
 8007b00:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a1d      	ldr	r2, [pc, #116]	@ (8007b8c <OC3Config+0xd8>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d003      	beq.n	8007b22 <OC3Config+0x6e>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8007b90 <OC3Config+0xdc>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d11f      	bne.n	8007b62 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	029b      	lsls	r3, r3, #10
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	029b      	lsls	r3, r3, #10
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	69db      	ldr	r3, [r3, #28]
 8007b5c:	015b      	lsls	r3, r3, #5
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff fd76 	bl	8007666 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	40010000 	.word	0x40010000
 8007b90:	40010400 	.word	0x40010400

08007b94 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	021b      	lsls	r3, r3, #8
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	031b      	lsls	r3, r3, #12
 8007be0:	4313      	orrs	r3, r2
 8007be2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	031b      	lsls	r3, r3, #12
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a11      	ldr	r2, [pc, #68]	@ (8007c3c <OC4Config+0xa8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d003      	beq.n	8007c04 <OC4Config+0x70>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a10      	ldr	r2, [pc, #64]	@ (8007c40 <OC4Config+0xac>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d107      	bne.n	8007c14 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	019b      	lsls	r3, r3, #6
 8007c10:	4313      	orrs	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	4619      	mov	r1, r3
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7ff fd2b 	bl	8007682 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	40010000 	.word	0x40010000
 8007c40:	40010400 	.word	0x40010400

08007c44 <LL_USART_IsEnabled>:
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c58:	bf0c      	ite	eq
 8007c5a:	2301      	moveq	r3, #1
 8007c5c:	2300      	movne	r3, #0
 8007c5e:	b2db      	uxtb	r3, r3
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <LL_USART_SetStopBitsLength>:
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	431a      	orrs	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	611a      	str	r2, [r3, #16]
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <LL_USART_SetHWFlowCtrl>:
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	615a      	str	r2, [r3, #20]
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <LL_USART_SetBaudRate>:
{
 8007cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cbc:	b0c0      	sub	sp, #256	@ 0x100
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007cc4:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8007cc8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8007ccc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cd8:	f040 810c 	bne.w	8007ef4 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007cdc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ce6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007cea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007cee:	4622      	mov	r2, r4
 8007cf0:	462b      	mov	r3, r5
 8007cf2:	1891      	adds	r1, r2, r2
 8007cf4:	6639      	str	r1, [r7, #96]	@ 0x60
 8007cf6:	415b      	adcs	r3, r3
 8007cf8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cfa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007cfe:	4621      	mov	r1, r4
 8007d00:	eb12 0801 	adds.w	r8, r2, r1
 8007d04:	4629      	mov	r1, r5
 8007d06:	eb43 0901 	adc.w	r9, r3, r1
 8007d0a:	f04f 0200 	mov.w	r2, #0
 8007d0e:	f04f 0300 	mov.w	r3, #0
 8007d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d1e:	4690      	mov	r8, r2
 8007d20:	4699      	mov	r9, r3
 8007d22:	4623      	mov	r3, r4
 8007d24:	eb18 0303 	adds.w	r3, r8, r3
 8007d28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d2c:	462b      	mov	r3, r5
 8007d2e:	eb49 0303 	adc.w	r3, r9, r3
 8007d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	469a      	mov	sl, r3
 8007d3e:	4693      	mov	fp, r2
 8007d40:	eb1a 030a 	adds.w	r3, sl, sl
 8007d44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d46:	eb4b 030b 	adc.w	r3, fp, fp
 8007d4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007d50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007d54:	f7f8 fadc 	bl	8000310 <__aeabi_uldivmod>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4b64      	ldr	r3, [pc, #400]	@ (8007ef0 <LL_USART_SetBaudRate+0x238>)
 8007d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d62:	095b      	lsrs	r3, r3, #5
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	011b      	lsls	r3, r3, #4
 8007d68:	b29c      	uxth	r4, r3
 8007d6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d74:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007d78:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8007d7c:	4642      	mov	r2, r8
 8007d7e:	464b      	mov	r3, r9
 8007d80:	1891      	adds	r1, r2, r2
 8007d82:	6539      	str	r1, [r7, #80]	@ 0x50
 8007d84:	415b      	adcs	r3, r3
 8007d86:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007d8c:	4641      	mov	r1, r8
 8007d8e:	1851      	adds	r1, r2, r1
 8007d90:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007d92:	4649      	mov	r1, r9
 8007d94:	414b      	adcs	r3, r1
 8007d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d98:	f04f 0200 	mov.w	r2, #0
 8007d9c:	f04f 0300 	mov.w	r3, #0
 8007da0:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8007da4:	4659      	mov	r1, fp
 8007da6:	00cb      	lsls	r3, r1, #3
 8007da8:	4651      	mov	r1, sl
 8007daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dae:	4651      	mov	r1, sl
 8007db0:	00ca      	lsls	r2, r1, #3
 8007db2:	4610      	mov	r0, r2
 8007db4:	4619      	mov	r1, r3
 8007db6:	4603      	mov	r3, r0
 8007db8:	4642      	mov	r2, r8
 8007dba:	189b      	adds	r3, r3, r2
 8007dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007dc0:	464b      	mov	r3, r9
 8007dc2:	460a      	mov	r2, r1
 8007dc4:	eb42 0303 	adc.w	r3, r2, r3
 8007dc8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007dcc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007dd6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8007dda:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007dde:	460b      	mov	r3, r1
 8007de0:	18db      	adds	r3, r3, r3
 8007de2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007de4:	4613      	mov	r3, r2
 8007de6:	eb42 0303 	adc.w	r3, r2, r3
 8007dea:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007df0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8007df4:	f7f8 fa8c 	bl	8000310 <__aeabi_uldivmod>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8007ef0 <LL_USART_SetBaudRate+0x238>)
 8007e00:	fba3 2301 	umull	r2, r3, r3, r1
 8007e04:	095b      	lsrs	r3, r3, #5
 8007e06:	2264      	movs	r2, #100	@ 0x64
 8007e08:	fb02 f303 	mul.w	r3, r2, r3
 8007e0c:	1acb      	subs	r3, r1, r3
 8007e0e:	00db      	lsls	r3, r3, #3
 8007e10:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007e14:	4b36      	ldr	r3, [pc, #216]	@ (8007ef0 <LL_USART_SetBaudRate+0x238>)
 8007e16:	fba3 2302 	umull	r2, r3, r3, r2
 8007e1a:	095b      	lsrs	r3, r3, #5
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	4423      	add	r3, r4
 8007e2a:	b29c      	uxth	r4, r3
 8007e2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e36:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007e3a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8007e3e:	4642      	mov	r2, r8
 8007e40:	464b      	mov	r3, r9
 8007e42:	1891      	adds	r1, r2, r2
 8007e44:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007e46:	415b      	adcs	r3, r3
 8007e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e4a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e4e:	4641      	mov	r1, r8
 8007e50:	1851      	adds	r1, r2, r1
 8007e52:	6339      	str	r1, [r7, #48]	@ 0x30
 8007e54:	4649      	mov	r1, r9
 8007e56:	414b      	adcs	r3, r1
 8007e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e5a:	f04f 0200 	mov.w	r2, #0
 8007e5e:	f04f 0300 	mov.w	r3, #0
 8007e62:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007e66:	4659      	mov	r1, fp
 8007e68:	00cb      	lsls	r3, r1, #3
 8007e6a:	4651      	mov	r1, sl
 8007e6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e70:	4651      	mov	r1, sl
 8007e72:	00ca      	lsls	r2, r1, #3
 8007e74:	4610      	mov	r0, r2
 8007e76:	4619      	mov	r1, r3
 8007e78:	4603      	mov	r3, r0
 8007e7a:	4642      	mov	r2, r8
 8007e7c:	189b      	adds	r3, r3, r2
 8007e7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e82:	464b      	mov	r3, r9
 8007e84:	460a      	mov	r2, r1
 8007e86:	eb42 0303 	adc.w	r3, r2, r3
 8007e8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007e8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007e92:	2200      	movs	r2, #0
 8007e94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e98:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8007e9c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	18db      	adds	r3, r3, r3
 8007ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	eb42 0303 	adc.w	r3, r2, r3
 8007eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007eae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007eb2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8007eb6:	f7f8 fa2b 	bl	8000310 <__aeabi_uldivmod>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef0 <LL_USART_SetBaudRate+0x238>)
 8007ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ec4:	095b      	lsrs	r3, r3, #5
 8007ec6:	2164      	movs	r1, #100	@ 0x64
 8007ec8:	fb01 f303 	mul.w	r3, r1, r3
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	3332      	adds	r3, #50	@ 0x32
 8007ed2:	4a07      	ldr	r2, [pc, #28]	@ (8007ef0 <LL_USART_SetBaudRate+0x238>)
 8007ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed8:	095b      	lsrs	r3, r3, #5
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	4423      	add	r3, r4
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eec:	609a      	str	r2, [r3, #8]
}
 8007eee:	e108      	b.n	8008102 <LL_USART_SetBaudRate+0x44a>
 8007ef0:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007ef4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007efe:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007f02:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8007f06:	4642      	mov	r2, r8
 8007f08:	464b      	mov	r3, r9
 8007f0a:	1891      	adds	r1, r2, r2
 8007f0c:	6239      	str	r1, [r7, #32]
 8007f0e:	415b      	adcs	r3, r3
 8007f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f16:	4641      	mov	r1, r8
 8007f18:	1854      	adds	r4, r2, r1
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	eb43 0501 	adc.w	r5, r3, r1
 8007f20:	f04f 0200 	mov.w	r2, #0
 8007f24:	f04f 0300 	mov.w	r3, #0
 8007f28:	00eb      	lsls	r3, r5, #3
 8007f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f2e:	00e2      	lsls	r2, r4, #3
 8007f30:	4614      	mov	r4, r2
 8007f32:	461d      	mov	r5, r3
 8007f34:	4643      	mov	r3, r8
 8007f36:	18e3      	adds	r3, r4, r3
 8007f38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f3c:	464b      	mov	r3, r9
 8007f3e:	eb45 0303 	adc.w	r3, r5, r3
 8007f42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007f46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f50:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007f54:	f04f 0200 	mov.w	r2, #0
 8007f58:	f04f 0300 	mov.w	r3, #0
 8007f5c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8007f60:	4629      	mov	r1, r5
 8007f62:	008b      	lsls	r3, r1, #2
 8007f64:	4621      	mov	r1, r4
 8007f66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	008a      	lsls	r2, r1, #2
 8007f6e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8007f72:	f7f8 f9cd 	bl	8000310 <__aeabi_uldivmod>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4b65      	ldr	r3, [pc, #404]	@ (8008110 <LL_USART_SetBaudRate+0x458>)
 8007f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8007f80:	095b      	lsrs	r3, r3, #5
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	011b      	lsls	r3, r3, #4
 8007f86:	b29c      	uxth	r4, r3
 8007f88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f96:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8007f9a:	4642      	mov	r2, r8
 8007f9c:	464b      	mov	r3, r9
 8007f9e:	1891      	adds	r1, r2, r2
 8007fa0:	61b9      	str	r1, [r7, #24]
 8007fa2:	415b      	adcs	r3, r3
 8007fa4:	61fb      	str	r3, [r7, #28]
 8007fa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007faa:	4641      	mov	r1, r8
 8007fac:	1851      	adds	r1, r2, r1
 8007fae:	6139      	str	r1, [r7, #16]
 8007fb0:	4649      	mov	r1, r9
 8007fb2:	414b      	adcs	r3, r1
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	f04f 0200 	mov.w	r2, #0
 8007fba:	f04f 0300 	mov.w	r3, #0
 8007fbe:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fc2:	4659      	mov	r1, fp
 8007fc4:	00cb      	lsls	r3, r1, #3
 8007fc6:	4651      	mov	r1, sl
 8007fc8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fcc:	4651      	mov	r1, sl
 8007fce:	00ca      	lsls	r2, r1, #3
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	4642      	mov	r2, r8
 8007fd8:	189b      	adds	r3, r3, r2
 8007fda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fde:	464b      	mov	r3, r9
 8007fe0:	460a      	mov	r2, r1
 8007fe2:	eb42 0303 	adc.w	r3, r2, r3
 8007fe6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007fea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ff4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007ff8:	f04f 0200 	mov.w	r2, #0
 8007ffc:	f04f 0300 	mov.w	r3, #0
 8008000:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8008004:	4649      	mov	r1, r9
 8008006:	008b      	lsls	r3, r1, #2
 8008008:	4641      	mov	r1, r8
 800800a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800800e:	4641      	mov	r1, r8
 8008010:	008a      	lsls	r2, r1, #2
 8008012:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8008016:	f7f8 f97b 	bl	8000310 <__aeabi_uldivmod>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4611      	mov	r1, r2
 8008020:	4b3b      	ldr	r3, [pc, #236]	@ (8008110 <LL_USART_SetBaudRate+0x458>)
 8008022:	fba3 2301 	umull	r2, r3, r3, r1
 8008026:	095b      	lsrs	r3, r3, #5
 8008028:	2264      	movs	r2, #100	@ 0x64
 800802a:	fb02 f303 	mul.w	r3, r2, r3
 800802e:	1acb      	subs	r3, r1, r3
 8008030:	011b      	lsls	r3, r3, #4
 8008032:	3332      	adds	r3, #50	@ 0x32
 8008034:	4a36      	ldr	r2, [pc, #216]	@ (8008110 <LL_USART_SetBaudRate+0x458>)
 8008036:	fba2 2303 	umull	r2, r3, r2, r3
 800803a:	095b      	lsrs	r3, r3, #5
 800803c:	b29b      	uxth	r3, r3
 800803e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008042:	b29b      	uxth	r3, r3
 8008044:	4423      	add	r3, r4
 8008046:	b29c      	uxth	r4, r3
 8008048:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800804c:	2200      	movs	r2, #0
 800804e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008050:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008052:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008056:	4642      	mov	r2, r8
 8008058:	464b      	mov	r3, r9
 800805a:	1891      	adds	r1, r2, r2
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	415b      	adcs	r3, r3
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008066:	4641      	mov	r1, r8
 8008068:	1851      	adds	r1, r2, r1
 800806a:	6039      	str	r1, [r7, #0]
 800806c:	4649      	mov	r1, r9
 800806e:	414b      	adcs	r3, r1
 8008070:	607b      	str	r3, [r7, #4]
 8008072:	f04f 0200 	mov.w	r2, #0
 8008076:	f04f 0300 	mov.w	r3, #0
 800807a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800807e:	4659      	mov	r1, fp
 8008080:	00cb      	lsls	r3, r1, #3
 8008082:	4651      	mov	r1, sl
 8008084:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008088:	4651      	mov	r1, sl
 800808a:	00ca      	lsls	r2, r1, #3
 800808c:	4610      	mov	r0, r2
 800808e:	4619      	mov	r1, r3
 8008090:	4603      	mov	r3, r0
 8008092:	4642      	mov	r2, r8
 8008094:	189b      	adds	r3, r3, r2
 8008096:	673b      	str	r3, [r7, #112]	@ 0x70
 8008098:	464b      	mov	r3, r9
 800809a:	460a      	mov	r2, r1
 800809c:	eb42 0303 	adc.w	r3, r2, r3
 80080a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80080a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80080a6:	2200      	movs	r2, #0
 80080a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80080ac:	f04f 0200 	mov.w	r2, #0
 80080b0:	f04f 0300 	mov.w	r3, #0
 80080b4:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80080b8:	4649      	mov	r1, r9
 80080ba:	008b      	lsls	r3, r1, #2
 80080bc:	4641      	mov	r1, r8
 80080be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080c2:	4641      	mov	r1, r8
 80080c4:	008a      	lsls	r2, r1, #2
 80080c6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80080ca:	f7f8 f921 	bl	8000310 <__aeabi_uldivmod>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008110 <LL_USART_SetBaudRate+0x458>)
 80080d4:	fba3 1302 	umull	r1, r3, r3, r2
 80080d8:	095b      	lsrs	r3, r3, #5
 80080da:	2164      	movs	r1, #100	@ 0x64
 80080dc:	fb01 f303 	mul.w	r3, r1, r3
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	011b      	lsls	r3, r3, #4
 80080e4:	3332      	adds	r3, #50	@ 0x32
 80080e6:	4a0a      	ldr	r2, [pc, #40]	@ (8008110 <LL_USART_SetBaudRate+0x458>)
 80080e8:	fba2 2303 	umull	r2, r3, r2, r3
 80080ec:	095b      	lsrs	r3, r3, #5
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	f003 030f 	and.w	r3, r3, #15
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	4423      	add	r3, r4
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	461a      	mov	r2, r3
 80080fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008100:	609a      	str	r2, [r3, #8]
}
 8008102:	bf00      	nop
 8008104:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008108:	46bd      	mov	sp, r7
 800810a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800810e:	bf00      	nop
 8008110:	51eb851f 	.word	0x51eb851f

08008114 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8008122:	2300      	movs	r3, #0
 8008124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff fd8c 	bl	8007c44 <LL_USART_IsEnabled>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d15e      	bne.n	80081f0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800813a:	f023 030c 	bic.w	r3, r3, #12
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	6851      	ldr	r1, [r2, #4]
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	68d2      	ldr	r2, [r2, #12]
 8008146:	4311      	orrs	r1, r2
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	6912      	ldr	r2, [r2, #16]
 800814c:	4311      	orrs	r1, r2
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	6992      	ldr	r2, [r2, #24]
 8008152:	430a      	orrs	r2, r1
 8008154:	431a      	orrs	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff fd83 	bl	8007c6c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7ff fd90 	bl	8007c92 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8008172:	f107 0308 	add.w	r3, r7, #8
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff f8f0 	bl	800735c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a1f      	ldr	r2, [pc, #124]	@ (80081fc <LL_USART_Init+0xe8>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d102      	bne.n	800818a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	61bb      	str	r3, [r7, #24]
 8008188:	e021      	b.n	80081ce <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a1c      	ldr	r2, [pc, #112]	@ (8008200 <LL_USART_Init+0xec>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d102      	bne.n	8008198 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	61bb      	str	r3, [r7, #24]
 8008196:	e01a      	b.n	80081ce <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a1a      	ldr	r2, [pc, #104]	@ (8008204 <LL_USART_Init+0xf0>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d102      	bne.n	80081a6 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	61bb      	str	r3, [r7, #24]
 80081a4:	e013      	b.n	80081ce <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a17      	ldr	r2, [pc, #92]	@ (8008208 <LL_USART_Init+0xf4>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d102      	bne.n	80081b4 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	61bb      	str	r3, [r7, #24]
 80081b2:	e00c      	b.n	80081ce <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a15      	ldr	r2, [pc, #84]	@ (800820c <LL_USART_Init+0xf8>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d102      	bne.n	80081c2 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	61bb      	str	r3, [r7, #24]
 80081c0:	e005      	b.n	80081ce <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a12      	ldr	r2, [pc, #72]	@ (8008210 <LL_USART_Init+0xfc>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d101      	bne.n	80081ce <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00d      	beq.n	80081f0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d009      	beq.n	80081f0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80081dc:	2300      	movs	r3, #0
 80081de:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80081e8:	69b9      	ldr	r1, [r7, #24]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7ff fd64 	bl	8007cb8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80081f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3720      	adds	r7, #32
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	40011000 	.word	0x40011000
 8008200:	40004400 	.word	0x40004400
 8008204:	40004800 	.word	0x40004800
 8008208:	40011400 	.word	0x40011400
 800820c:	40004c00 	.word	0x40004c00
 8008210:	40005000 	.word	0x40005000

08008214 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800821c:	4b0f      	ldr	r3, [pc, #60]	@ (800825c <LL_mDelay+0x48>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8008222:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822a:	d00c      	beq.n	8008246 <LL_mDelay+0x32>
  {
    Delay++;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3301      	adds	r3, #1
 8008230:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8008232:	e008      	b.n	8008246 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8008234:	4b09      	ldr	r3, [pc, #36]	@ (800825c <LL_mDelay+0x48>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d002      	beq.n	8008246 <LL_mDelay+0x32>
    {
      Delay--;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3b01      	subs	r3, #1
 8008244:	607b      	str	r3, [r7, #4]
  while (Delay)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1f3      	bne.n	8008234 <LL_mDelay+0x20>
    }
  }
}
 800824c:	bf00      	nop
 800824e:	bf00      	nop
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	e000e010 	.word	0xe000e010

08008260 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8008268:	4a04      	ldr	r2, [pc, #16]	@ (800827c <LL_SetSystemCoreClock+0x1c>)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6013      	str	r3, [r2, #0]
}
 800826e:	bf00      	nop
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	200040c0 	.word	0x200040c0

08008280 <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 8008284:	4b0d      	ldr	r3, [pc, #52]	@ (80082bc <SCH_Initialize+0x3c>)
 8008286:	2200      	movs	r2, #0
 8008288:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 800828a:	4b0d      	ldr	r3, [pc, #52]	@ (80082c0 <SCH_Initialize+0x40>)
 800828c:	2200      	movs	r2, #0
 800828e:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 8008290:	4b0c      	ldr	r3, [pc, #48]	@ (80082c4 <SCH_Initialize+0x44>)
 8008292:	2200      	movs	r2, #0
 8008294:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 8008296:	22f0      	movs	r2, #240	@ 0xf0
 8008298:	2100      	movs	r1, #0
 800829a:	480b      	ldr	r0, [pc, #44]	@ (80082c8 <SCH_Initialize+0x48>)
 800829c:	f000 fab6 	bl	800880c <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 80082a0:	22f0      	movs	r2, #240	@ 0xf0
 80082a2:	2100      	movs	r1, #0
 80082a4:	4809      	ldr	r0, [pc, #36]	@ (80082cc <SCH_Initialize+0x4c>)
 80082a6:	f000 fab1 	bl	800880c <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 80082aa:	2238      	movs	r2, #56	@ 0x38
 80082ac:	2100      	movs	r1, #0
 80082ae:	4808      	ldr	r0, [pc, #32]	@ (80082d0 <SCH_Initialize+0x50>)
 80082b0:	f000 faac 	bl	800880c <memset>

    // Initialize Scheduler context
  systick_timer_init();
 80082b4:	f7f8 feda 	bl	800106c <systick_timer_init>
}
 80082b8:	bf00      	nop
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	20006070 	.word	0x20006070
 80082c0:	20005f78 	.word	0x20005f78
 80082c4:	2000606c 	.word	0x2000606c
 80082c8:	20005e88 	.word	0x20005e88
 80082cc:	20005f7c 	.word	0x20005f7c
 80082d0:	20006074 	.word	0x20006074

080082d4 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d029      	beq.n	800833c <SCH_TASK_CreateTask+0x68>
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d026      	beq.n	800833c <SCH_TASK_CreateTask+0x68>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 80082ee:	4b17      	ldr	r3, [pc, #92]	@ (800834c <SCH_TASK_CreateTask+0x78>)
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b12      	cmp	r3, #18
 80082f4:	d822      	bhi.n	800833c <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 80082f6:	4b15      	ldr	r3, [pc, #84]	@ (800834c <SCH_TASK_CreateTask+0x78>)
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	4613      	mov	r3, r2
 80082fe:	005b      	lsls	r3, r3, #1
 8008300:	4413      	add	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4a12      	ldr	r2, [pc, #72]	@ (8008350 <SCH_TASK_CreateTask+0x7c>)
 8008306:	4413      	add	r3, r2
 8008308:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2200      	movs	r2, #0
 8008314:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = pTaskProperty->taskTick;;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2201      	movs	r2, #1
 8008322:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 8008324:	4b09      	ldr	r3, [pc, #36]	@ (800834c <SCH_TASK_CreateTask+0x78>)
 8008326:	781a      	ldrb	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 800832c:	4b07      	ldr	r3, [pc, #28]	@ (800834c <SCH_TASK_CreateTask+0x78>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	3301      	adds	r3, #1
 8008332:	b2da      	uxtb	r2, r3
 8008334:	4b05      	ldr	r3, [pc, #20]	@ (800834c <SCH_TASK_CreateTask+0x78>)
 8008336:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 8008338:	2300      	movs	r3, #0
 800833a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800833c:	7bfb      	ldrb	r3, [r7, #15]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	20005f78 	.word	0x20005f78
 8008350:	20005e88 	.word	0x20005e88

08008354 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 800835a:	4b42      	ldr	r3, [pc, #264]	@ (8008464 <SCH_RunSystemTickTimer+0x110>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3301      	adds	r3, #1
 8008360:	4a40      	ldr	r2, [pc, #256]	@ (8008464 <SCH_RunSystemTickTimer+0x110>)
 8008362:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8008364:	2300      	movs	r3, #0
 8008366:	73fb      	strb	r3, [r7, #15]
 8008368:	e025      	b.n	80083b6 <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800836a:	7bfa      	ldrb	r2, [r7, #15]
 800836c:	4613      	mov	r3, r2
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	4413      	add	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4a3c      	ldr	r2, [pc, #240]	@ (8008468 <SCH_RunSystemTickTimer+0x114>)
 8008376:	4413      	add	r3, r2
 8008378:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d115      	bne.n	80083b0 <SCH_RunSystemTickTimer+0x5c>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d111      	bne.n	80083b0 <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	1c5a      	adds	r2, r3, #1
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d305      	bcc.n	80083b0 <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	3301      	adds	r3, #1
 80083b4:	73fb      	strb	r3, [r7, #15]
 80083b6:	4b2d      	ldr	r3, [pc, #180]	@ (800846c <SCH_RunSystemTickTimer+0x118>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	7bfa      	ldrb	r2, [r7, #15]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d3d4      	bcc.n	800836a <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80083c0:	2300      	movs	r3, #0
 80083c2:	73bb      	strb	r3, [r7, #14]
 80083c4:	e02b      	b.n	800841e <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 80083c6:	7bba      	ldrb	r2, [r7, #14]
 80083c8:	4613      	mov	r3, r2
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	4413      	add	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4a27      	ldr	r2, [pc, #156]	@ (8008470 <SCH_RunSystemTickTimer+0x11c>)
 80083d2:	4413      	add	r3, r2
 80083d4:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d11c      	bne.n	8008418 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d310      	bcc.n	8008418 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2201      	movs	r2, #1
 80083fa:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2200      	movs	r2, #0
 8008400:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	2b02      	cmp	r3, #2
 800840a:	bf0c      	ite	eq
 800840c:	2301      	moveq	r3, #1
 800840e:	2300      	movne	r3, #0
 8008410:	b2db      	uxtb	r3, r3
 8008412:	461a      	mov	r2, r3
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8008418:	7bbb      	ldrb	r3, [r7, #14]
 800841a:	3301      	adds	r3, #1
 800841c:	73bb      	strb	r3, [r7, #14]
 800841e:	4b15      	ldr	r3, [pc, #84]	@ (8008474 <SCH_RunSystemTickTimer+0x120>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	7bba      	ldrb	r2, [r7, #14]
 8008424:	429a      	cmp	r2, r3
 8008426:	d3ce      	bcc.n	80083c6 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8008428:	2300      	movs	r3, #0
 800842a:	73bb      	strb	r3, [r7, #14]
 800842c:	e010      	b.n	8008450 <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	4a11      	ldr	r2, [pc, #68]	@ (8008478 <SCH_RunSystemTickTimer+0x124>)
 8008432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d007      	beq.n	800844a <SCH_RunSystemTickTimer+0xf6>
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	4a0e      	ldr	r2, [pc, #56]	@ (8008478 <SCH_RunSystemTickTimer+0x124>)
 800843e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008442:	3a01      	subs	r2, #1
 8008444:	490c      	ldr	r1, [pc, #48]	@ (8008478 <SCH_RunSystemTickTimer+0x124>)
 8008446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	3301      	adds	r3, #1
 800844e:	73bb      	strb	r3, [r7, #14]
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2b0d      	cmp	r3, #13
 8008454:	d9eb      	bls.n	800842e <SCH_RunSystemTickTimer+0xda>
}
 8008456:	bf00      	nop
 8008458:	bf00      	nop
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	20006070 	.word	0x20006070
 8008468:	20005e88 	.word	0x20005e88
 800846c:	20005f78 	.word	0x20005f78
 8008470:	20005f7c 	.word	0x20005f7c
 8008474:	2000606c 	.word	0x2000606c
 8008478:	20006074 	.word	0x20006074

0800847c <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 8008480:	f7f8 fde4 	bl	800104c <systick_timer_start>
}
 8008484:	bf00      	nop
 8008486:	bd80      	pop	{r7, pc}

08008488 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800848e:	2300      	movs	r3, #0
 8008490:	73fb      	strb	r3, [r7, #15]
 8008492:	e01e      	b.n	80084d2 <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8008494:	7bfa      	ldrb	r2, [r7, #15]
 8008496:	4613      	mov	r3, r2
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4a23      	ldr	r2, [pc, #140]	@ (800852c <SCH_HandleScheduledTask+0xa4>)
 80084a0:	4413      	add	r3, r2
 80084a2:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	885b      	ldrh	r3, [r3, #2]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d10f      	bne.n	80084cc <SCH_HandleScheduledTask+0x44>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d10b      	bne.n	80084cc <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d003      	beq.n	80084cc <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	3301      	adds	r3, #1
 80084d0:	73fb      	strb	r3, [r7, #15]
 80084d2:	4b17      	ldr	r3, [pc, #92]	@ (8008530 <SCH_HandleScheduledTask+0xa8>)
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	7bfa      	ldrb	r2, [r7, #15]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d3db      	bcc.n	8008494 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80084dc:	2300      	movs	r3, #0
 80084de:	73bb      	strb	r3, [r7, #14]
 80084e0:	e01a      	b.n	8008518 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 80084e2:	7bba      	ldrb	r2, [r7, #14]
 80084e4:	4613      	mov	r3, r2
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4a11      	ldr	r2, [pc, #68]	@ (8008534 <SCH_HandleScheduledTask+0xac>)
 80084ee:	4413      	add	r3, r2
 80084f0:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	885b      	ldrh	r3, [r3, #2]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d10b      	bne.n	8008512 <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2200      	movs	r2, #0
 80084fe:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d003      	beq.n	8008512 <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	3301      	adds	r3, #1
 8008516:	73bb      	strb	r3, [r7, #14]
 8008518:	4b07      	ldr	r3, [pc, #28]	@ (8008538 <SCH_HandleScheduledTask+0xb0>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	7bba      	ldrb	r2, [r7, #14]
 800851e:	429a      	cmp	r2, r3
 8008520:	d3df      	bcc.n	80084e2 <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 8008522:	bf00      	nop
 8008524:	bf00      	nop
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20005e88 	.word	0x20005e88
 8008530:	20005f78 	.word	0x20005f78
 8008534:	20005f7c 	.word	0x20005f7c
 8008538:	2000606c 	.word	0x2000606c

0800853c <std>:
 800853c:	2300      	movs	r3, #0
 800853e:	b510      	push	{r4, lr}
 8008540:	4604      	mov	r4, r0
 8008542:	e9c0 3300 	strd	r3, r3, [r0]
 8008546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800854a:	6083      	str	r3, [r0, #8]
 800854c:	8181      	strh	r1, [r0, #12]
 800854e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008550:	81c2      	strh	r2, [r0, #14]
 8008552:	6183      	str	r3, [r0, #24]
 8008554:	4619      	mov	r1, r3
 8008556:	2208      	movs	r2, #8
 8008558:	305c      	adds	r0, #92	@ 0x5c
 800855a:	f000 f957 	bl	800880c <memset>
 800855e:	4b0d      	ldr	r3, [pc, #52]	@ (8008594 <std+0x58>)
 8008560:	6263      	str	r3, [r4, #36]	@ 0x24
 8008562:	4b0d      	ldr	r3, [pc, #52]	@ (8008598 <std+0x5c>)
 8008564:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008566:	4b0d      	ldr	r3, [pc, #52]	@ (800859c <std+0x60>)
 8008568:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800856a:	4b0d      	ldr	r3, [pc, #52]	@ (80085a0 <std+0x64>)
 800856c:	6323      	str	r3, [r4, #48]	@ 0x30
 800856e:	4b0d      	ldr	r3, [pc, #52]	@ (80085a4 <std+0x68>)
 8008570:	6224      	str	r4, [r4, #32]
 8008572:	429c      	cmp	r4, r3
 8008574:	d006      	beq.n	8008584 <std+0x48>
 8008576:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800857a:	4294      	cmp	r4, r2
 800857c:	d002      	beq.n	8008584 <std+0x48>
 800857e:	33d0      	adds	r3, #208	@ 0xd0
 8008580:	429c      	cmp	r4, r3
 8008582:	d105      	bne.n	8008590 <std+0x54>
 8008584:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800858c:	f000 b9ca 	b.w	8008924 <__retarget_lock_init_recursive>
 8008590:	bd10      	pop	{r4, pc}
 8008592:	bf00      	nop
 8008594:	0800873d 	.word	0x0800873d
 8008598:	0800875f 	.word	0x0800875f
 800859c:	08008797 	.word	0x08008797
 80085a0:	080087bb 	.word	0x080087bb
 80085a4:	200060ac 	.word	0x200060ac

080085a8 <stdio_exit_handler>:
 80085a8:	4a02      	ldr	r2, [pc, #8]	@ (80085b4 <stdio_exit_handler+0xc>)
 80085aa:	4903      	ldr	r1, [pc, #12]	@ (80085b8 <stdio_exit_handler+0x10>)
 80085ac:	4803      	ldr	r0, [pc, #12]	@ (80085bc <stdio_exit_handler+0x14>)
 80085ae:	f000 b869 	b.w	8008684 <_fwalk_sglue>
 80085b2:	bf00      	nop
 80085b4:	20004118 	.word	0x20004118
 80085b8:	0800948d 	.word	0x0800948d
 80085bc:	20004128 	.word	0x20004128

080085c0 <cleanup_stdio>:
 80085c0:	6841      	ldr	r1, [r0, #4]
 80085c2:	4b0c      	ldr	r3, [pc, #48]	@ (80085f4 <cleanup_stdio+0x34>)
 80085c4:	4299      	cmp	r1, r3
 80085c6:	b510      	push	{r4, lr}
 80085c8:	4604      	mov	r4, r0
 80085ca:	d001      	beq.n	80085d0 <cleanup_stdio+0x10>
 80085cc:	f000 ff5e 	bl	800948c <_fflush_r>
 80085d0:	68a1      	ldr	r1, [r4, #8]
 80085d2:	4b09      	ldr	r3, [pc, #36]	@ (80085f8 <cleanup_stdio+0x38>)
 80085d4:	4299      	cmp	r1, r3
 80085d6:	d002      	beq.n	80085de <cleanup_stdio+0x1e>
 80085d8:	4620      	mov	r0, r4
 80085da:	f000 ff57 	bl	800948c <_fflush_r>
 80085de:	68e1      	ldr	r1, [r4, #12]
 80085e0:	4b06      	ldr	r3, [pc, #24]	@ (80085fc <cleanup_stdio+0x3c>)
 80085e2:	4299      	cmp	r1, r3
 80085e4:	d004      	beq.n	80085f0 <cleanup_stdio+0x30>
 80085e6:	4620      	mov	r0, r4
 80085e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ec:	f000 bf4e 	b.w	800948c <_fflush_r>
 80085f0:	bd10      	pop	{r4, pc}
 80085f2:	bf00      	nop
 80085f4:	200060ac 	.word	0x200060ac
 80085f8:	20006114 	.word	0x20006114
 80085fc:	2000617c 	.word	0x2000617c

08008600 <global_stdio_init.part.0>:
 8008600:	b510      	push	{r4, lr}
 8008602:	4b0b      	ldr	r3, [pc, #44]	@ (8008630 <global_stdio_init.part.0+0x30>)
 8008604:	4c0b      	ldr	r4, [pc, #44]	@ (8008634 <global_stdio_init.part.0+0x34>)
 8008606:	4a0c      	ldr	r2, [pc, #48]	@ (8008638 <global_stdio_init.part.0+0x38>)
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	4620      	mov	r0, r4
 800860c:	2200      	movs	r2, #0
 800860e:	2104      	movs	r1, #4
 8008610:	f7ff ff94 	bl	800853c <std>
 8008614:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008618:	2201      	movs	r2, #1
 800861a:	2109      	movs	r1, #9
 800861c:	f7ff ff8e 	bl	800853c <std>
 8008620:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008624:	2202      	movs	r2, #2
 8008626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800862a:	2112      	movs	r1, #18
 800862c:	f7ff bf86 	b.w	800853c <std>
 8008630:	200061e4 	.word	0x200061e4
 8008634:	200060ac 	.word	0x200060ac
 8008638:	080085a9 	.word	0x080085a9

0800863c <__sfp_lock_acquire>:
 800863c:	4801      	ldr	r0, [pc, #4]	@ (8008644 <__sfp_lock_acquire+0x8>)
 800863e:	f000 b972 	b.w	8008926 <__retarget_lock_acquire_recursive>
 8008642:	bf00      	nop
 8008644:	200061ed 	.word	0x200061ed

08008648 <__sfp_lock_release>:
 8008648:	4801      	ldr	r0, [pc, #4]	@ (8008650 <__sfp_lock_release+0x8>)
 800864a:	f000 b96d 	b.w	8008928 <__retarget_lock_release_recursive>
 800864e:	bf00      	nop
 8008650:	200061ed 	.word	0x200061ed

08008654 <__sinit>:
 8008654:	b510      	push	{r4, lr}
 8008656:	4604      	mov	r4, r0
 8008658:	f7ff fff0 	bl	800863c <__sfp_lock_acquire>
 800865c:	6a23      	ldr	r3, [r4, #32]
 800865e:	b11b      	cbz	r3, 8008668 <__sinit+0x14>
 8008660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008664:	f7ff bff0 	b.w	8008648 <__sfp_lock_release>
 8008668:	4b04      	ldr	r3, [pc, #16]	@ (800867c <__sinit+0x28>)
 800866a:	6223      	str	r3, [r4, #32]
 800866c:	4b04      	ldr	r3, [pc, #16]	@ (8008680 <__sinit+0x2c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1f5      	bne.n	8008660 <__sinit+0xc>
 8008674:	f7ff ffc4 	bl	8008600 <global_stdio_init.part.0>
 8008678:	e7f2      	b.n	8008660 <__sinit+0xc>
 800867a:	bf00      	nop
 800867c:	080085c1 	.word	0x080085c1
 8008680:	200061e4 	.word	0x200061e4

08008684 <_fwalk_sglue>:
 8008684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008688:	4607      	mov	r7, r0
 800868a:	4688      	mov	r8, r1
 800868c:	4614      	mov	r4, r2
 800868e:	2600      	movs	r6, #0
 8008690:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008694:	f1b9 0901 	subs.w	r9, r9, #1
 8008698:	d505      	bpl.n	80086a6 <_fwalk_sglue+0x22>
 800869a:	6824      	ldr	r4, [r4, #0]
 800869c:	2c00      	cmp	r4, #0
 800869e:	d1f7      	bne.n	8008690 <_fwalk_sglue+0xc>
 80086a0:	4630      	mov	r0, r6
 80086a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086a6:	89ab      	ldrh	r3, [r5, #12]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d907      	bls.n	80086bc <_fwalk_sglue+0x38>
 80086ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086b0:	3301      	adds	r3, #1
 80086b2:	d003      	beq.n	80086bc <_fwalk_sglue+0x38>
 80086b4:	4629      	mov	r1, r5
 80086b6:	4638      	mov	r0, r7
 80086b8:	47c0      	blx	r8
 80086ba:	4306      	orrs	r6, r0
 80086bc:	3568      	adds	r5, #104	@ 0x68
 80086be:	e7e9      	b.n	8008694 <_fwalk_sglue+0x10>

080086c0 <putchar>:
 80086c0:	4b02      	ldr	r3, [pc, #8]	@ (80086cc <putchar+0xc>)
 80086c2:	4601      	mov	r1, r0
 80086c4:	6818      	ldr	r0, [r3, #0]
 80086c6:	6882      	ldr	r2, [r0, #8]
 80086c8:	f000 bf08 	b.w	80094dc <_putc_r>
 80086cc:	20004124 	.word	0x20004124

080086d0 <sniprintf>:
 80086d0:	b40c      	push	{r2, r3}
 80086d2:	b530      	push	{r4, r5, lr}
 80086d4:	4b18      	ldr	r3, [pc, #96]	@ (8008738 <sniprintf+0x68>)
 80086d6:	1e0c      	subs	r4, r1, #0
 80086d8:	681d      	ldr	r5, [r3, #0]
 80086da:	b09d      	sub	sp, #116	@ 0x74
 80086dc:	da08      	bge.n	80086f0 <sniprintf+0x20>
 80086de:	238b      	movs	r3, #139	@ 0x8b
 80086e0:	602b      	str	r3, [r5, #0]
 80086e2:	f04f 30ff 	mov.w	r0, #4294967295
 80086e6:	b01d      	add	sp, #116	@ 0x74
 80086e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086ec:	b002      	add	sp, #8
 80086ee:	4770      	bx	lr
 80086f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80086f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80086f8:	f04f 0300 	mov.w	r3, #0
 80086fc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80086fe:	bf14      	ite	ne
 8008700:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008704:	4623      	moveq	r3, r4
 8008706:	9304      	str	r3, [sp, #16]
 8008708:	9307      	str	r3, [sp, #28]
 800870a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800870e:	9002      	str	r0, [sp, #8]
 8008710:	9006      	str	r0, [sp, #24]
 8008712:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008716:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008718:	ab21      	add	r3, sp, #132	@ 0x84
 800871a:	a902      	add	r1, sp, #8
 800871c:	4628      	mov	r0, r5
 800871e:	9301      	str	r3, [sp, #4]
 8008720:	f000 fa66 	bl	8008bf0 <_svfiprintf_r>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	bfbc      	itt	lt
 8008728:	238b      	movlt	r3, #139	@ 0x8b
 800872a:	602b      	strlt	r3, [r5, #0]
 800872c:	2c00      	cmp	r4, #0
 800872e:	d0da      	beq.n	80086e6 <sniprintf+0x16>
 8008730:	9b02      	ldr	r3, [sp, #8]
 8008732:	2200      	movs	r2, #0
 8008734:	701a      	strb	r2, [r3, #0]
 8008736:	e7d6      	b.n	80086e6 <sniprintf+0x16>
 8008738:	20004124 	.word	0x20004124

0800873c <__sread>:
 800873c:	b510      	push	{r4, lr}
 800873e:	460c      	mov	r4, r1
 8008740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008744:	f000 f8a0 	bl	8008888 <_read_r>
 8008748:	2800      	cmp	r0, #0
 800874a:	bfab      	itete	ge
 800874c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800874e:	89a3      	ldrhlt	r3, [r4, #12]
 8008750:	181b      	addge	r3, r3, r0
 8008752:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008756:	bfac      	ite	ge
 8008758:	6563      	strge	r3, [r4, #84]	@ 0x54
 800875a:	81a3      	strhlt	r3, [r4, #12]
 800875c:	bd10      	pop	{r4, pc}

0800875e <__swrite>:
 800875e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008762:	461f      	mov	r7, r3
 8008764:	898b      	ldrh	r3, [r1, #12]
 8008766:	05db      	lsls	r3, r3, #23
 8008768:	4605      	mov	r5, r0
 800876a:	460c      	mov	r4, r1
 800876c:	4616      	mov	r6, r2
 800876e:	d505      	bpl.n	800877c <__swrite+0x1e>
 8008770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008774:	2302      	movs	r3, #2
 8008776:	2200      	movs	r2, #0
 8008778:	f000 f874 	bl	8008864 <_lseek_r>
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008782:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008786:	81a3      	strh	r3, [r4, #12]
 8008788:	4632      	mov	r2, r6
 800878a:	463b      	mov	r3, r7
 800878c:	4628      	mov	r0, r5
 800878e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008792:	f000 b88b 	b.w	80088ac <_write_r>

08008796 <__sseek>:
 8008796:	b510      	push	{r4, lr}
 8008798:	460c      	mov	r4, r1
 800879a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800879e:	f000 f861 	bl	8008864 <_lseek_r>
 80087a2:	1c43      	adds	r3, r0, #1
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	bf15      	itete	ne
 80087a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80087aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80087ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80087b2:	81a3      	strheq	r3, [r4, #12]
 80087b4:	bf18      	it	ne
 80087b6:	81a3      	strhne	r3, [r4, #12]
 80087b8:	bd10      	pop	{r4, pc}

080087ba <__sclose>:
 80087ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087be:	f000 b841 	b.w	8008844 <_close_r>
	...

080087c4 <viprintf>:
 80087c4:	460b      	mov	r3, r1
 80087c6:	4903      	ldr	r1, [pc, #12]	@ (80087d4 <viprintf+0x10>)
 80087c8:	4602      	mov	r2, r0
 80087ca:	6808      	ldr	r0, [r1, #0]
 80087cc:	6881      	ldr	r1, [r0, #8]
 80087ce:	f000 bb35 	b.w	8008e3c <_vfiprintf_r>
 80087d2:	bf00      	nop
 80087d4:	20004124 	.word	0x20004124

080087d8 <memmove>:
 80087d8:	4288      	cmp	r0, r1
 80087da:	b510      	push	{r4, lr}
 80087dc:	eb01 0402 	add.w	r4, r1, r2
 80087e0:	d902      	bls.n	80087e8 <memmove+0x10>
 80087e2:	4284      	cmp	r4, r0
 80087e4:	4623      	mov	r3, r4
 80087e6:	d807      	bhi.n	80087f8 <memmove+0x20>
 80087e8:	1e43      	subs	r3, r0, #1
 80087ea:	42a1      	cmp	r1, r4
 80087ec:	d008      	beq.n	8008800 <memmove+0x28>
 80087ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087f6:	e7f8      	b.n	80087ea <memmove+0x12>
 80087f8:	4402      	add	r2, r0
 80087fa:	4601      	mov	r1, r0
 80087fc:	428a      	cmp	r2, r1
 80087fe:	d100      	bne.n	8008802 <memmove+0x2a>
 8008800:	bd10      	pop	{r4, pc}
 8008802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008806:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800880a:	e7f7      	b.n	80087fc <memmove+0x24>

0800880c <memset>:
 800880c:	4402      	add	r2, r0
 800880e:	4603      	mov	r3, r0
 8008810:	4293      	cmp	r3, r2
 8008812:	d100      	bne.n	8008816 <memset+0xa>
 8008814:	4770      	bx	lr
 8008816:	f803 1b01 	strb.w	r1, [r3], #1
 800881a:	e7f9      	b.n	8008810 <memset+0x4>

0800881c <strncpy>:
 800881c:	b510      	push	{r4, lr}
 800881e:	3901      	subs	r1, #1
 8008820:	4603      	mov	r3, r0
 8008822:	b132      	cbz	r2, 8008832 <strncpy+0x16>
 8008824:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008828:	f803 4b01 	strb.w	r4, [r3], #1
 800882c:	3a01      	subs	r2, #1
 800882e:	2c00      	cmp	r4, #0
 8008830:	d1f7      	bne.n	8008822 <strncpy+0x6>
 8008832:	441a      	add	r2, r3
 8008834:	2100      	movs	r1, #0
 8008836:	4293      	cmp	r3, r2
 8008838:	d100      	bne.n	800883c <strncpy+0x20>
 800883a:	bd10      	pop	{r4, pc}
 800883c:	f803 1b01 	strb.w	r1, [r3], #1
 8008840:	e7f9      	b.n	8008836 <strncpy+0x1a>
	...

08008844 <_close_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4d06      	ldr	r5, [pc, #24]	@ (8008860 <_close_r+0x1c>)
 8008848:	2300      	movs	r3, #0
 800884a:	4604      	mov	r4, r0
 800884c:	4608      	mov	r0, r1
 800884e:	602b      	str	r3, [r5, #0]
 8008850:	f7fc fd8f 	bl	8005372 <_close>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_close_r+0x1a>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	b103      	cbz	r3, 800885e <_close_r+0x1a>
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	200061e8 	.word	0x200061e8

08008864 <_lseek_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4d07      	ldr	r5, [pc, #28]	@ (8008884 <_lseek_r+0x20>)
 8008868:	4604      	mov	r4, r0
 800886a:	4608      	mov	r0, r1
 800886c:	4611      	mov	r1, r2
 800886e:	2200      	movs	r2, #0
 8008870:	602a      	str	r2, [r5, #0]
 8008872:	461a      	mov	r2, r3
 8008874:	f7fc fda4 	bl	80053c0 <_lseek>
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	d102      	bne.n	8008882 <_lseek_r+0x1e>
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	b103      	cbz	r3, 8008882 <_lseek_r+0x1e>
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	bd38      	pop	{r3, r4, r5, pc}
 8008884:	200061e8 	.word	0x200061e8

08008888 <_read_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4d07      	ldr	r5, [pc, #28]	@ (80088a8 <_read_r+0x20>)
 800888c:	4604      	mov	r4, r0
 800888e:	4608      	mov	r0, r1
 8008890:	4611      	mov	r1, r2
 8008892:	2200      	movs	r2, #0
 8008894:	602a      	str	r2, [r5, #0]
 8008896:	461a      	mov	r2, r3
 8008898:	f7fc fd32 	bl	8005300 <_read>
 800889c:	1c43      	adds	r3, r0, #1
 800889e:	d102      	bne.n	80088a6 <_read_r+0x1e>
 80088a0:	682b      	ldr	r3, [r5, #0]
 80088a2:	b103      	cbz	r3, 80088a6 <_read_r+0x1e>
 80088a4:	6023      	str	r3, [r4, #0]
 80088a6:	bd38      	pop	{r3, r4, r5, pc}
 80088a8:	200061e8 	.word	0x200061e8

080088ac <_write_r>:
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	4d07      	ldr	r5, [pc, #28]	@ (80088cc <_write_r+0x20>)
 80088b0:	4604      	mov	r4, r0
 80088b2:	4608      	mov	r0, r1
 80088b4:	4611      	mov	r1, r2
 80088b6:	2200      	movs	r2, #0
 80088b8:	602a      	str	r2, [r5, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	f7fc fd3d 	bl	800533a <_write>
 80088c0:	1c43      	adds	r3, r0, #1
 80088c2:	d102      	bne.n	80088ca <_write_r+0x1e>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	b103      	cbz	r3, 80088ca <_write_r+0x1e>
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	200061e8 	.word	0x200061e8

080088d0 <__errno>:
 80088d0:	4b01      	ldr	r3, [pc, #4]	@ (80088d8 <__errno+0x8>)
 80088d2:	6818      	ldr	r0, [r3, #0]
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	20004124 	.word	0x20004124

080088dc <__libc_init_array>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	4d0d      	ldr	r5, [pc, #52]	@ (8008914 <__libc_init_array+0x38>)
 80088e0:	4c0d      	ldr	r4, [pc, #52]	@ (8008918 <__libc_init_array+0x3c>)
 80088e2:	1b64      	subs	r4, r4, r5
 80088e4:	10a4      	asrs	r4, r4, #2
 80088e6:	2600      	movs	r6, #0
 80088e8:	42a6      	cmp	r6, r4
 80088ea:	d109      	bne.n	8008900 <__libc_init_array+0x24>
 80088ec:	4d0b      	ldr	r5, [pc, #44]	@ (800891c <__libc_init_array+0x40>)
 80088ee:	4c0c      	ldr	r4, [pc, #48]	@ (8008920 <__libc_init_array+0x44>)
 80088f0:	f000 ff86 	bl	8009800 <_init>
 80088f4:	1b64      	subs	r4, r4, r5
 80088f6:	10a4      	asrs	r4, r4, #2
 80088f8:	2600      	movs	r6, #0
 80088fa:	42a6      	cmp	r6, r4
 80088fc:	d105      	bne.n	800890a <__libc_init_array+0x2e>
 80088fe:	bd70      	pop	{r4, r5, r6, pc}
 8008900:	f855 3b04 	ldr.w	r3, [r5], #4
 8008904:	4798      	blx	r3
 8008906:	3601      	adds	r6, #1
 8008908:	e7ee      	b.n	80088e8 <__libc_init_array+0xc>
 800890a:	f855 3b04 	ldr.w	r3, [r5], #4
 800890e:	4798      	blx	r3
 8008910:	3601      	adds	r6, #1
 8008912:	e7f2      	b.n	80088fa <__libc_init_array+0x1e>
 8008914:	08009cac 	.word	0x08009cac
 8008918:	08009cac 	.word	0x08009cac
 800891c:	08009cac 	.word	0x08009cac
 8008920:	08009cb0 	.word	0x08009cb0

08008924 <__retarget_lock_init_recursive>:
 8008924:	4770      	bx	lr

08008926 <__retarget_lock_acquire_recursive>:
 8008926:	4770      	bx	lr

08008928 <__retarget_lock_release_recursive>:
 8008928:	4770      	bx	lr

0800892a <memcpy>:
 800892a:	440a      	add	r2, r1
 800892c:	4291      	cmp	r1, r2
 800892e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008932:	d100      	bne.n	8008936 <memcpy+0xc>
 8008934:	4770      	bx	lr
 8008936:	b510      	push	{r4, lr}
 8008938:	f811 4b01 	ldrb.w	r4, [r1], #1
 800893c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008940:	4291      	cmp	r1, r2
 8008942:	d1f9      	bne.n	8008938 <memcpy+0xe>
 8008944:	bd10      	pop	{r4, pc}
	...

08008948 <_free_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4605      	mov	r5, r0
 800894c:	2900      	cmp	r1, #0
 800894e:	d041      	beq.n	80089d4 <_free_r+0x8c>
 8008950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008954:	1f0c      	subs	r4, r1, #4
 8008956:	2b00      	cmp	r3, #0
 8008958:	bfb8      	it	lt
 800895a:	18e4      	addlt	r4, r4, r3
 800895c:	f000 f8e0 	bl	8008b20 <__malloc_lock>
 8008960:	4a1d      	ldr	r2, [pc, #116]	@ (80089d8 <_free_r+0x90>)
 8008962:	6813      	ldr	r3, [r2, #0]
 8008964:	b933      	cbnz	r3, 8008974 <_free_r+0x2c>
 8008966:	6063      	str	r3, [r4, #4]
 8008968:	6014      	str	r4, [r2, #0]
 800896a:	4628      	mov	r0, r5
 800896c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008970:	f000 b8dc 	b.w	8008b2c <__malloc_unlock>
 8008974:	42a3      	cmp	r3, r4
 8008976:	d908      	bls.n	800898a <_free_r+0x42>
 8008978:	6820      	ldr	r0, [r4, #0]
 800897a:	1821      	adds	r1, r4, r0
 800897c:	428b      	cmp	r3, r1
 800897e:	bf01      	itttt	eq
 8008980:	6819      	ldreq	r1, [r3, #0]
 8008982:	685b      	ldreq	r3, [r3, #4]
 8008984:	1809      	addeq	r1, r1, r0
 8008986:	6021      	streq	r1, [r4, #0]
 8008988:	e7ed      	b.n	8008966 <_free_r+0x1e>
 800898a:	461a      	mov	r2, r3
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	b10b      	cbz	r3, 8008994 <_free_r+0x4c>
 8008990:	42a3      	cmp	r3, r4
 8008992:	d9fa      	bls.n	800898a <_free_r+0x42>
 8008994:	6811      	ldr	r1, [r2, #0]
 8008996:	1850      	adds	r0, r2, r1
 8008998:	42a0      	cmp	r0, r4
 800899a:	d10b      	bne.n	80089b4 <_free_r+0x6c>
 800899c:	6820      	ldr	r0, [r4, #0]
 800899e:	4401      	add	r1, r0
 80089a0:	1850      	adds	r0, r2, r1
 80089a2:	4283      	cmp	r3, r0
 80089a4:	6011      	str	r1, [r2, #0]
 80089a6:	d1e0      	bne.n	800896a <_free_r+0x22>
 80089a8:	6818      	ldr	r0, [r3, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	6053      	str	r3, [r2, #4]
 80089ae:	4408      	add	r0, r1
 80089b0:	6010      	str	r0, [r2, #0]
 80089b2:	e7da      	b.n	800896a <_free_r+0x22>
 80089b4:	d902      	bls.n	80089bc <_free_r+0x74>
 80089b6:	230c      	movs	r3, #12
 80089b8:	602b      	str	r3, [r5, #0]
 80089ba:	e7d6      	b.n	800896a <_free_r+0x22>
 80089bc:	6820      	ldr	r0, [r4, #0]
 80089be:	1821      	adds	r1, r4, r0
 80089c0:	428b      	cmp	r3, r1
 80089c2:	bf04      	itt	eq
 80089c4:	6819      	ldreq	r1, [r3, #0]
 80089c6:	685b      	ldreq	r3, [r3, #4]
 80089c8:	6063      	str	r3, [r4, #4]
 80089ca:	bf04      	itt	eq
 80089cc:	1809      	addeq	r1, r1, r0
 80089ce:	6021      	streq	r1, [r4, #0]
 80089d0:	6054      	str	r4, [r2, #4]
 80089d2:	e7ca      	b.n	800896a <_free_r+0x22>
 80089d4:	bd38      	pop	{r3, r4, r5, pc}
 80089d6:	bf00      	nop
 80089d8:	200061f4 	.word	0x200061f4

080089dc <sbrk_aligned>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	4e0f      	ldr	r6, [pc, #60]	@ (8008a1c <sbrk_aligned+0x40>)
 80089e0:	460c      	mov	r4, r1
 80089e2:	6831      	ldr	r1, [r6, #0]
 80089e4:	4605      	mov	r5, r0
 80089e6:	b911      	cbnz	r1, 80089ee <sbrk_aligned+0x12>
 80089e8:	f000 fe40 	bl	800966c <_sbrk_r>
 80089ec:	6030      	str	r0, [r6, #0]
 80089ee:	4621      	mov	r1, r4
 80089f0:	4628      	mov	r0, r5
 80089f2:	f000 fe3b 	bl	800966c <_sbrk_r>
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	d103      	bne.n	8008a02 <sbrk_aligned+0x26>
 80089fa:	f04f 34ff 	mov.w	r4, #4294967295
 80089fe:	4620      	mov	r0, r4
 8008a00:	bd70      	pop	{r4, r5, r6, pc}
 8008a02:	1cc4      	adds	r4, r0, #3
 8008a04:	f024 0403 	bic.w	r4, r4, #3
 8008a08:	42a0      	cmp	r0, r4
 8008a0a:	d0f8      	beq.n	80089fe <sbrk_aligned+0x22>
 8008a0c:	1a21      	subs	r1, r4, r0
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f000 fe2c 	bl	800966c <_sbrk_r>
 8008a14:	3001      	adds	r0, #1
 8008a16:	d1f2      	bne.n	80089fe <sbrk_aligned+0x22>
 8008a18:	e7ef      	b.n	80089fa <sbrk_aligned+0x1e>
 8008a1a:	bf00      	nop
 8008a1c:	200061f0 	.word	0x200061f0

08008a20 <_malloc_r>:
 8008a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a24:	1ccd      	adds	r5, r1, #3
 8008a26:	f025 0503 	bic.w	r5, r5, #3
 8008a2a:	3508      	adds	r5, #8
 8008a2c:	2d0c      	cmp	r5, #12
 8008a2e:	bf38      	it	cc
 8008a30:	250c      	movcc	r5, #12
 8008a32:	2d00      	cmp	r5, #0
 8008a34:	4606      	mov	r6, r0
 8008a36:	db01      	blt.n	8008a3c <_malloc_r+0x1c>
 8008a38:	42a9      	cmp	r1, r5
 8008a3a:	d904      	bls.n	8008a46 <_malloc_r+0x26>
 8008a3c:	230c      	movs	r3, #12
 8008a3e:	6033      	str	r3, [r6, #0]
 8008a40:	2000      	movs	r0, #0
 8008a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b1c <_malloc_r+0xfc>
 8008a4a:	f000 f869 	bl	8008b20 <__malloc_lock>
 8008a4e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a52:	461c      	mov	r4, r3
 8008a54:	bb44      	cbnz	r4, 8008aa8 <_malloc_r+0x88>
 8008a56:	4629      	mov	r1, r5
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f7ff ffbf 	bl	80089dc <sbrk_aligned>
 8008a5e:	1c43      	adds	r3, r0, #1
 8008a60:	4604      	mov	r4, r0
 8008a62:	d158      	bne.n	8008b16 <_malloc_r+0xf6>
 8008a64:	f8d8 4000 	ldr.w	r4, [r8]
 8008a68:	4627      	mov	r7, r4
 8008a6a:	2f00      	cmp	r7, #0
 8008a6c:	d143      	bne.n	8008af6 <_malloc_r+0xd6>
 8008a6e:	2c00      	cmp	r4, #0
 8008a70:	d04b      	beq.n	8008b0a <_malloc_r+0xea>
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	4639      	mov	r1, r7
 8008a76:	4630      	mov	r0, r6
 8008a78:	eb04 0903 	add.w	r9, r4, r3
 8008a7c:	f000 fdf6 	bl	800966c <_sbrk_r>
 8008a80:	4581      	cmp	r9, r0
 8008a82:	d142      	bne.n	8008b0a <_malloc_r+0xea>
 8008a84:	6821      	ldr	r1, [r4, #0]
 8008a86:	1a6d      	subs	r5, r5, r1
 8008a88:	4629      	mov	r1, r5
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7ff ffa6 	bl	80089dc <sbrk_aligned>
 8008a90:	3001      	adds	r0, #1
 8008a92:	d03a      	beq.n	8008b0a <_malloc_r+0xea>
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	442b      	add	r3, r5
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	bb62      	cbnz	r2, 8008afc <_malloc_r+0xdc>
 8008aa2:	f8c8 7000 	str.w	r7, [r8]
 8008aa6:	e00f      	b.n	8008ac8 <_malloc_r+0xa8>
 8008aa8:	6822      	ldr	r2, [r4, #0]
 8008aaa:	1b52      	subs	r2, r2, r5
 8008aac:	d420      	bmi.n	8008af0 <_malloc_r+0xd0>
 8008aae:	2a0b      	cmp	r2, #11
 8008ab0:	d917      	bls.n	8008ae2 <_malloc_r+0xc2>
 8008ab2:	1961      	adds	r1, r4, r5
 8008ab4:	42a3      	cmp	r3, r4
 8008ab6:	6025      	str	r5, [r4, #0]
 8008ab8:	bf18      	it	ne
 8008aba:	6059      	strne	r1, [r3, #4]
 8008abc:	6863      	ldr	r3, [r4, #4]
 8008abe:	bf08      	it	eq
 8008ac0:	f8c8 1000 	streq.w	r1, [r8]
 8008ac4:	5162      	str	r2, [r4, r5]
 8008ac6:	604b      	str	r3, [r1, #4]
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f000 f82f 	bl	8008b2c <__malloc_unlock>
 8008ace:	f104 000b 	add.w	r0, r4, #11
 8008ad2:	1d23      	adds	r3, r4, #4
 8008ad4:	f020 0007 	bic.w	r0, r0, #7
 8008ad8:	1ac2      	subs	r2, r0, r3
 8008ada:	bf1c      	itt	ne
 8008adc:	1a1b      	subne	r3, r3, r0
 8008ade:	50a3      	strne	r3, [r4, r2]
 8008ae0:	e7af      	b.n	8008a42 <_malloc_r+0x22>
 8008ae2:	6862      	ldr	r2, [r4, #4]
 8008ae4:	42a3      	cmp	r3, r4
 8008ae6:	bf0c      	ite	eq
 8008ae8:	f8c8 2000 	streq.w	r2, [r8]
 8008aec:	605a      	strne	r2, [r3, #4]
 8008aee:	e7eb      	b.n	8008ac8 <_malloc_r+0xa8>
 8008af0:	4623      	mov	r3, r4
 8008af2:	6864      	ldr	r4, [r4, #4]
 8008af4:	e7ae      	b.n	8008a54 <_malloc_r+0x34>
 8008af6:	463c      	mov	r4, r7
 8008af8:	687f      	ldr	r7, [r7, #4]
 8008afa:	e7b6      	b.n	8008a6a <_malloc_r+0x4a>
 8008afc:	461a      	mov	r2, r3
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	42a3      	cmp	r3, r4
 8008b02:	d1fb      	bne.n	8008afc <_malloc_r+0xdc>
 8008b04:	2300      	movs	r3, #0
 8008b06:	6053      	str	r3, [r2, #4]
 8008b08:	e7de      	b.n	8008ac8 <_malloc_r+0xa8>
 8008b0a:	230c      	movs	r3, #12
 8008b0c:	6033      	str	r3, [r6, #0]
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f000 f80c 	bl	8008b2c <__malloc_unlock>
 8008b14:	e794      	b.n	8008a40 <_malloc_r+0x20>
 8008b16:	6005      	str	r5, [r0, #0]
 8008b18:	e7d6      	b.n	8008ac8 <_malloc_r+0xa8>
 8008b1a:	bf00      	nop
 8008b1c:	200061f4 	.word	0x200061f4

08008b20 <__malloc_lock>:
 8008b20:	4801      	ldr	r0, [pc, #4]	@ (8008b28 <__malloc_lock+0x8>)
 8008b22:	f7ff bf00 	b.w	8008926 <__retarget_lock_acquire_recursive>
 8008b26:	bf00      	nop
 8008b28:	200061ec 	.word	0x200061ec

08008b2c <__malloc_unlock>:
 8008b2c:	4801      	ldr	r0, [pc, #4]	@ (8008b34 <__malloc_unlock+0x8>)
 8008b2e:	f7ff befb 	b.w	8008928 <__retarget_lock_release_recursive>
 8008b32:	bf00      	nop
 8008b34:	200061ec 	.word	0x200061ec

08008b38 <__ssputs_r>:
 8008b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b3c:	688e      	ldr	r6, [r1, #8]
 8008b3e:	461f      	mov	r7, r3
 8008b40:	42be      	cmp	r6, r7
 8008b42:	680b      	ldr	r3, [r1, #0]
 8008b44:	4682      	mov	sl, r0
 8008b46:	460c      	mov	r4, r1
 8008b48:	4690      	mov	r8, r2
 8008b4a:	d82d      	bhi.n	8008ba8 <__ssputs_r+0x70>
 8008b4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b54:	d026      	beq.n	8008ba4 <__ssputs_r+0x6c>
 8008b56:	6965      	ldr	r5, [r4, #20]
 8008b58:	6909      	ldr	r1, [r1, #16]
 8008b5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b5e:	eba3 0901 	sub.w	r9, r3, r1
 8008b62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b66:	1c7b      	adds	r3, r7, #1
 8008b68:	444b      	add	r3, r9
 8008b6a:	106d      	asrs	r5, r5, #1
 8008b6c:	429d      	cmp	r5, r3
 8008b6e:	bf38      	it	cc
 8008b70:	461d      	movcc	r5, r3
 8008b72:	0553      	lsls	r3, r2, #21
 8008b74:	d527      	bpl.n	8008bc6 <__ssputs_r+0x8e>
 8008b76:	4629      	mov	r1, r5
 8008b78:	f7ff ff52 	bl	8008a20 <_malloc_r>
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	b360      	cbz	r0, 8008bda <__ssputs_r+0xa2>
 8008b80:	6921      	ldr	r1, [r4, #16]
 8008b82:	464a      	mov	r2, r9
 8008b84:	f7ff fed1 	bl	800892a <memcpy>
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b92:	81a3      	strh	r3, [r4, #12]
 8008b94:	6126      	str	r6, [r4, #16]
 8008b96:	6165      	str	r5, [r4, #20]
 8008b98:	444e      	add	r6, r9
 8008b9a:	eba5 0509 	sub.w	r5, r5, r9
 8008b9e:	6026      	str	r6, [r4, #0]
 8008ba0:	60a5      	str	r5, [r4, #8]
 8008ba2:	463e      	mov	r6, r7
 8008ba4:	42be      	cmp	r6, r7
 8008ba6:	d900      	bls.n	8008baa <__ssputs_r+0x72>
 8008ba8:	463e      	mov	r6, r7
 8008baa:	6820      	ldr	r0, [r4, #0]
 8008bac:	4632      	mov	r2, r6
 8008bae:	4641      	mov	r1, r8
 8008bb0:	f7ff fe12 	bl	80087d8 <memmove>
 8008bb4:	68a3      	ldr	r3, [r4, #8]
 8008bb6:	1b9b      	subs	r3, r3, r6
 8008bb8:	60a3      	str	r3, [r4, #8]
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	4433      	add	r3, r6
 8008bbe:	6023      	str	r3, [r4, #0]
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc6:	462a      	mov	r2, r5
 8008bc8:	f000 fd60 	bl	800968c <_realloc_r>
 8008bcc:	4606      	mov	r6, r0
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d1e0      	bne.n	8008b94 <__ssputs_r+0x5c>
 8008bd2:	6921      	ldr	r1, [r4, #16]
 8008bd4:	4650      	mov	r0, sl
 8008bd6:	f7ff feb7 	bl	8008948 <_free_r>
 8008bda:	230c      	movs	r3, #12
 8008bdc:	f8ca 3000 	str.w	r3, [sl]
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008be6:	81a3      	strh	r3, [r4, #12]
 8008be8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bec:	e7e9      	b.n	8008bc2 <__ssputs_r+0x8a>
	...

08008bf0 <_svfiprintf_r>:
 8008bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf4:	4698      	mov	r8, r3
 8008bf6:	898b      	ldrh	r3, [r1, #12]
 8008bf8:	061b      	lsls	r3, r3, #24
 8008bfa:	b09d      	sub	sp, #116	@ 0x74
 8008bfc:	4607      	mov	r7, r0
 8008bfe:	460d      	mov	r5, r1
 8008c00:	4614      	mov	r4, r2
 8008c02:	d510      	bpl.n	8008c26 <_svfiprintf_r+0x36>
 8008c04:	690b      	ldr	r3, [r1, #16]
 8008c06:	b973      	cbnz	r3, 8008c26 <_svfiprintf_r+0x36>
 8008c08:	2140      	movs	r1, #64	@ 0x40
 8008c0a:	f7ff ff09 	bl	8008a20 <_malloc_r>
 8008c0e:	6028      	str	r0, [r5, #0]
 8008c10:	6128      	str	r0, [r5, #16]
 8008c12:	b930      	cbnz	r0, 8008c22 <_svfiprintf_r+0x32>
 8008c14:	230c      	movs	r3, #12
 8008c16:	603b      	str	r3, [r7, #0]
 8008c18:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1c:	b01d      	add	sp, #116	@ 0x74
 8008c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c22:	2340      	movs	r3, #64	@ 0x40
 8008c24:	616b      	str	r3, [r5, #20]
 8008c26:	2300      	movs	r3, #0
 8008c28:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c2a:	2320      	movs	r3, #32
 8008c2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c30:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c34:	2330      	movs	r3, #48	@ 0x30
 8008c36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008dd4 <_svfiprintf_r+0x1e4>
 8008c3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c3e:	f04f 0901 	mov.w	r9, #1
 8008c42:	4623      	mov	r3, r4
 8008c44:	469a      	mov	sl, r3
 8008c46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c4a:	b10a      	cbz	r2, 8008c50 <_svfiprintf_r+0x60>
 8008c4c:	2a25      	cmp	r2, #37	@ 0x25
 8008c4e:	d1f9      	bne.n	8008c44 <_svfiprintf_r+0x54>
 8008c50:	ebba 0b04 	subs.w	fp, sl, r4
 8008c54:	d00b      	beq.n	8008c6e <_svfiprintf_r+0x7e>
 8008c56:	465b      	mov	r3, fp
 8008c58:	4622      	mov	r2, r4
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	4638      	mov	r0, r7
 8008c5e:	f7ff ff6b 	bl	8008b38 <__ssputs_r>
 8008c62:	3001      	adds	r0, #1
 8008c64:	f000 80a7 	beq.w	8008db6 <_svfiprintf_r+0x1c6>
 8008c68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c6a:	445a      	add	r2, fp
 8008c6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 809f 	beq.w	8008db6 <_svfiprintf_r+0x1c6>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c82:	f10a 0a01 	add.w	sl, sl, #1
 8008c86:	9304      	str	r3, [sp, #16]
 8008c88:	9307      	str	r3, [sp, #28]
 8008c8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c90:	4654      	mov	r4, sl
 8008c92:	2205      	movs	r2, #5
 8008c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c98:	484e      	ldr	r0, [pc, #312]	@ (8008dd4 <_svfiprintf_r+0x1e4>)
 8008c9a:	f7f7 fa99 	bl	80001d0 <memchr>
 8008c9e:	9a04      	ldr	r2, [sp, #16]
 8008ca0:	b9d8      	cbnz	r0, 8008cda <_svfiprintf_r+0xea>
 8008ca2:	06d0      	lsls	r0, r2, #27
 8008ca4:	bf44      	itt	mi
 8008ca6:	2320      	movmi	r3, #32
 8008ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cac:	0711      	lsls	r1, r2, #28
 8008cae:	bf44      	itt	mi
 8008cb0:	232b      	movmi	r3, #43	@ 0x2b
 8008cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8008cba:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cbc:	d015      	beq.n	8008cea <_svfiprintf_r+0xfa>
 8008cbe:	9a07      	ldr	r2, [sp, #28]
 8008cc0:	4654      	mov	r4, sl
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	f04f 0c0a 	mov.w	ip, #10
 8008cc8:	4621      	mov	r1, r4
 8008cca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cce:	3b30      	subs	r3, #48	@ 0x30
 8008cd0:	2b09      	cmp	r3, #9
 8008cd2:	d94b      	bls.n	8008d6c <_svfiprintf_r+0x17c>
 8008cd4:	b1b0      	cbz	r0, 8008d04 <_svfiprintf_r+0x114>
 8008cd6:	9207      	str	r2, [sp, #28]
 8008cd8:	e014      	b.n	8008d04 <_svfiprintf_r+0x114>
 8008cda:	eba0 0308 	sub.w	r3, r0, r8
 8008cde:	fa09 f303 	lsl.w	r3, r9, r3
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	9304      	str	r3, [sp, #16]
 8008ce6:	46a2      	mov	sl, r4
 8008ce8:	e7d2      	b.n	8008c90 <_svfiprintf_r+0xa0>
 8008cea:	9b03      	ldr	r3, [sp, #12]
 8008cec:	1d19      	adds	r1, r3, #4
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	9103      	str	r1, [sp, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bfbb      	ittet	lt
 8008cf6:	425b      	neglt	r3, r3
 8008cf8:	f042 0202 	orrlt.w	r2, r2, #2
 8008cfc:	9307      	strge	r3, [sp, #28]
 8008cfe:	9307      	strlt	r3, [sp, #28]
 8008d00:	bfb8      	it	lt
 8008d02:	9204      	strlt	r2, [sp, #16]
 8008d04:	7823      	ldrb	r3, [r4, #0]
 8008d06:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d08:	d10a      	bne.n	8008d20 <_svfiprintf_r+0x130>
 8008d0a:	7863      	ldrb	r3, [r4, #1]
 8008d0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d0e:	d132      	bne.n	8008d76 <_svfiprintf_r+0x186>
 8008d10:	9b03      	ldr	r3, [sp, #12]
 8008d12:	1d1a      	adds	r2, r3, #4
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	9203      	str	r2, [sp, #12]
 8008d18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d1c:	3402      	adds	r4, #2
 8008d1e:	9305      	str	r3, [sp, #20]
 8008d20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008de4 <_svfiprintf_r+0x1f4>
 8008d24:	7821      	ldrb	r1, [r4, #0]
 8008d26:	2203      	movs	r2, #3
 8008d28:	4650      	mov	r0, sl
 8008d2a:	f7f7 fa51 	bl	80001d0 <memchr>
 8008d2e:	b138      	cbz	r0, 8008d40 <_svfiprintf_r+0x150>
 8008d30:	9b04      	ldr	r3, [sp, #16]
 8008d32:	eba0 000a 	sub.w	r0, r0, sl
 8008d36:	2240      	movs	r2, #64	@ 0x40
 8008d38:	4082      	lsls	r2, r0
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	3401      	adds	r4, #1
 8008d3e:	9304      	str	r3, [sp, #16]
 8008d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d44:	4824      	ldr	r0, [pc, #144]	@ (8008dd8 <_svfiprintf_r+0x1e8>)
 8008d46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d4a:	2206      	movs	r2, #6
 8008d4c:	f7f7 fa40 	bl	80001d0 <memchr>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d036      	beq.n	8008dc2 <_svfiprintf_r+0x1d2>
 8008d54:	4b21      	ldr	r3, [pc, #132]	@ (8008ddc <_svfiprintf_r+0x1ec>)
 8008d56:	bb1b      	cbnz	r3, 8008da0 <_svfiprintf_r+0x1b0>
 8008d58:	9b03      	ldr	r3, [sp, #12]
 8008d5a:	3307      	adds	r3, #7
 8008d5c:	f023 0307 	bic.w	r3, r3, #7
 8008d60:	3308      	adds	r3, #8
 8008d62:	9303      	str	r3, [sp, #12]
 8008d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d66:	4433      	add	r3, r6
 8008d68:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d6a:	e76a      	b.n	8008c42 <_svfiprintf_r+0x52>
 8008d6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d70:	460c      	mov	r4, r1
 8008d72:	2001      	movs	r0, #1
 8008d74:	e7a8      	b.n	8008cc8 <_svfiprintf_r+0xd8>
 8008d76:	2300      	movs	r3, #0
 8008d78:	3401      	adds	r4, #1
 8008d7a:	9305      	str	r3, [sp, #20]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	f04f 0c0a 	mov.w	ip, #10
 8008d82:	4620      	mov	r0, r4
 8008d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d88:	3a30      	subs	r2, #48	@ 0x30
 8008d8a:	2a09      	cmp	r2, #9
 8008d8c:	d903      	bls.n	8008d96 <_svfiprintf_r+0x1a6>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d0c6      	beq.n	8008d20 <_svfiprintf_r+0x130>
 8008d92:	9105      	str	r1, [sp, #20]
 8008d94:	e7c4      	b.n	8008d20 <_svfiprintf_r+0x130>
 8008d96:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e7f0      	b.n	8008d82 <_svfiprintf_r+0x192>
 8008da0:	ab03      	add	r3, sp, #12
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	462a      	mov	r2, r5
 8008da6:	4b0e      	ldr	r3, [pc, #56]	@ (8008de0 <_svfiprintf_r+0x1f0>)
 8008da8:	a904      	add	r1, sp, #16
 8008daa:	4638      	mov	r0, r7
 8008dac:	f3af 8000 	nop.w
 8008db0:	1c42      	adds	r2, r0, #1
 8008db2:	4606      	mov	r6, r0
 8008db4:	d1d6      	bne.n	8008d64 <_svfiprintf_r+0x174>
 8008db6:	89ab      	ldrh	r3, [r5, #12]
 8008db8:	065b      	lsls	r3, r3, #25
 8008dba:	f53f af2d 	bmi.w	8008c18 <_svfiprintf_r+0x28>
 8008dbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dc0:	e72c      	b.n	8008c1c <_svfiprintf_r+0x2c>
 8008dc2:	ab03      	add	r3, sp, #12
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	462a      	mov	r2, r5
 8008dc8:	4b05      	ldr	r3, [pc, #20]	@ (8008de0 <_svfiprintf_r+0x1f0>)
 8008dca:	a904      	add	r1, sp, #16
 8008dcc:	4638      	mov	r0, r7
 8008dce:	f000 f9bb 	bl	8009148 <_printf_i>
 8008dd2:	e7ed      	b.n	8008db0 <_svfiprintf_r+0x1c0>
 8008dd4:	08009c70 	.word	0x08009c70
 8008dd8:	08009c7a 	.word	0x08009c7a
 8008ddc:	00000000 	.word	0x00000000
 8008de0:	08008b39 	.word	0x08008b39
 8008de4:	08009c76 	.word	0x08009c76

08008de8 <__sfputc_r>:
 8008de8:	6893      	ldr	r3, [r2, #8]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	b410      	push	{r4}
 8008df0:	6093      	str	r3, [r2, #8]
 8008df2:	da08      	bge.n	8008e06 <__sfputc_r+0x1e>
 8008df4:	6994      	ldr	r4, [r2, #24]
 8008df6:	42a3      	cmp	r3, r4
 8008df8:	db01      	blt.n	8008dfe <__sfputc_r+0x16>
 8008dfa:	290a      	cmp	r1, #10
 8008dfc:	d103      	bne.n	8008e06 <__sfputc_r+0x1e>
 8008dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e02:	f000 bb9f 	b.w	8009544 <__swbuf_r>
 8008e06:	6813      	ldr	r3, [r2, #0]
 8008e08:	1c58      	adds	r0, r3, #1
 8008e0a:	6010      	str	r0, [r2, #0]
 8008e0c:	7019      	strb	r1, [r3, #0]
 8008e0e:	4608      	mov	r0, r1
 8008e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <__sfputs_r>:
 8008e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e18:	4606      	mov	r6, r0
 8008e1a:	460f      	mov	r7, r1
 8008e1c:	4614      	mov	r4, r2
 8008e1e:	18d5      	adds	r5, r2, r3
 8008e20:	42ac      	cmp	r4, r5
 8008e22:	d101      	bne.n	8008e28 <__sfputs_r+0x12>
 8008e24:	2000      	movs	r0, #0
 8008e26:	e007      	b.n	8008e38 <__sfputs_r+0x22>
 8008e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e2c:	463a      	mov	r2, r7
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f7ff ffda 	bl	8008de8 <__sfputc_r>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d1f3      	bne.n	8008e20 <__sfputs_r+0xa>
 8008e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e3c <_vfiprintf_r>:
 8008e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e40:	460d      	mov	r5, r1
 8008e42:	b09d      	sub	sp, #116	@ 0x74
 8008e44:	4614      	mov	r4, r2
 8008e46:	4698      	mov	r8, r3
 8008e48:	4606      	mov	r6, r0
 8008e4a:	b118      	cbz	r0, 8008e54 <_vfiprintf_r+0x18>
 8008e4c:	6a03      	ldr	r3, [r0, #32]
 8008e4e:	b90b      	cbnz	r3, 8008e54 <_vfiprintf_r+0x18>
 8008e50:	f7ff fc00 	bl	8008654 <__sinit>
 8008e54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e56:	07d9      	lsls	r1, r3, #31
 8008e58:	d405      	bmi.n	8008e66 <_vfiprintf_r+0x2a>
 8008e5a:	89ab      	ldrh	r3, [r5, #12]
 8008e5c:	059a      	lsls	r2, r3, #22
 8008e5e:	d402      	bmi.n	8008e66 <_vfiprintf_r+0x2a>
 8008e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e62:	f7ff fd60 	bl	8008926 <__retarget_lock_acquire_recursive>
 8008e66:	89ab      	ldrh	r3, [r5, #12]
 8008e68:	071b      	lsls	r3, r3, #28
 8008e6a:	d501      	bpl.n	8008e70 <_vfiprintf_r+0x34>
 8008e6c:	692b      	ldr	r3, [r5, #16]
 8008e6e:	b99b      	cbnz	r3, 8008e98 <_vfiprintf_r+0x5c>
 8008e70:	4629      	mov	r1, r5
 8008e72:	4630      	mov	r0, r6
 8008e74:	f000 fba4 	bl	80095c0 <__swsetup_r>
 8008e78:	b170      	cbz	r0, 8008e98 <_vfiprintf_r+0x5c>
 8008e7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e7c:	07dc      	lsls	r4, r3, #31
 8008e7e:	d504      	bpl.n	8008e8a <_vfiprintf_r+0x4e>
 8008e80:	f04f 30ff 	mov.w	r0, #4294967295
 8008e84:	b01d      	add	sp, #116	@ 0x74
 8008e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8a:	89ab      	ldrh	r3, [r5, #12]
 8008e8c:	0598      	lsls	r0, r3, #22
 8008e8e:	d4f7      	bmi.n	8008e80 <_vfiprintf_r+0x44>
 8008e90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e92:	f7ff fd49 	bl	8008928 <__retarget_lock_release_recursive>
 8008e96:	e7f3      	b.n	8008e80 <_vfiprintf_r+0x44>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e9c:	2320      	movs	r3, #32
 8008e9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ea2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ea6:	2330      	movs	r3, #48	@ 0x30
 8008ea8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009058 <_vfiprintf_r+0x21c>
 8008eac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eb0:	f04f 0901 	mov.w	r9, #1
 8008eb4:	4623      	mov	r3, r4
 8008eb6:	469a      	mov	sl, r3
 8008eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ebc:	b10a      	cbz	r2, 8008ec2 <_vfiprintf_r+0x86>
 8008ebe:	2a25      	cmp	r2, #37	@ 0x25
 8008ec0:	d1f9      	bne.n	8008eb6 <_vfiprintf_r+0x7a>
 8008ec2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ec6:	d00b      	beq.n	8008ee0 <_vfiprintf_r+0xa4>
 8008ec8:	465b      	mov	r3, fp
 8008eca:	4622      	mov	r2, r4
 8008ecc:	4629      	mov	r1, r5
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f7ff ffa1 	bl	8008e16 <__sfputs_r>
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	f000 80a7 	beq.w	8009028 <_vfiprintf_r+0x1ec>
 8008eda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008edc:	445a      	add	r2, fp
 8008ede:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 809f 	beq.w	8009028 <_vfiprintf_r+0x1ec>
 8008eea:	2300      	movs	r3, #0
 8008eec:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ef4:	f10a 0a01 	add.w	sl, sl, #1
 8008ef8:	9304      	str	r3, [sp, #16]
 8008efa:	9307      	str	r3, [sp, #28]
 8008efc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f00:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f02:	4654      	mov	r4, sl
 8008f04:	2205      	movs	r2, #5
 8008f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f0a:	4853      	ldr	r0, [pc, #332]	@ (8009058 <_vfiprintf_r+0x21c>)
 8008f0c:	f7f7 f960 	bl	80001d0 <memchr>
 8008f10:	9a04      	ldr	r2, [sp, #16]
 8008f12:	b9d8      	cbnz	r0, 8008f4c <_vfiprintf_r+0x110>
 8008f14:	06d1      	lsls	r1, r2, #27
 8008f16:	bf44      	itt	mi
 8008f18:	2320      	movmi	r3, #32
 8008f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f1e:	0713      	lsls	r3, r2, #28
 8008f20:	bf44      	itt	mi
 8008f22:	232b      	movmi	r3, #43	@ 0x2b
 8008f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f28:	f89a 3000 	ldrb.w	r3, [sl]
 8008f2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f2e:	d015      	beq.n	8008f5c <_vfiprintf_r+0x120>
 8008f30:	9a07      	ldr	r2, [sp, #28]
 8008f32:	4654      	mov	r4, sl
 8008f34:	2000      	movs	r0, #0
 8008f36:	f04f 0c0a 	mov.w	ip, #10
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f40:	3b30      	subs	r3, #48	@ 0x30
 8008f42:	2b09      	cmp	r3, #9
 8008f44:	d94b      	bls.n	8008fde <_vfiprintf_r+0x1a2>
 8008f46:	b1b0      	cbz	r0, 8008f76 <_vfiprintf_r+0x13a>
 8008f48:	9207      	str	r2, [sp, #28]
 8008f4a:	e014      	b.n	8008f76 <_vfiprintf_r+0x13a>
 8008f4c:	eba0 0308 	sub.w	r3, r0, r8
 8008f50:	fa09 f303 	lsl.w	r3, r9, r3
 8008f54:	4313      	orrs	r3, r2
 8008f56:	9304      	str	r3, [sp, #16]
 8008f58:	46a2      	mov	sl, r4
 8008f5a:	e7d2      	b.n	8008f02 <_vfiprintf_r+0xc6>
 8008f5c:	9b03      	ldr	r3, [sp, #12]
 8008f5e:	1d19      	adds	r1, r3, #4
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	9103      	str	r1, [sp, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	bfbb      	ittet	lt
 8008f68:	425b      	neglt	r3, r3
 8008f6a:	f042 0202 	orrlt.w	r2, r2, #2
 8008f6e:	9307      	strge	r3, [sp, #28]
 8008f70:	9307      	strlt	r3, [sp, #28]
 8008f72:	bfb8      	it	lt
 8008f74:	9204      	strlt	r2, [sp, #16]
 8008f76:	7823      	ldrb	r3, [r4, #0]
 8008f78:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f7a:	d10a      	bne.n	8008f92 <_vfiprintf_r+0x156>
 8008f7c:	7863      	ldrb	r3, [r4, #1]
 8008f7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f80:	d132      	bne.n	8008fe8 <_vfiprintf_r+0x1ac>
 8008f82:	9b03      	ldr	r3, [sp, #12]
 8008f84:	1d1a      	adds	r2, r3, #4
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	9203      	str	r2, [sp, #12]
 8008f8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f8e:	3402      	adds	r4, #2
 8008f90:	9305      	str	r3, [sp, #20]
 8008f92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009068 <_vfiprintf_r+0x22c>
 8008f96:	7821      	ldrb	r1, [r4, #0]
 8008f98:	2203      	movs	r2, #3
 8008f9a:	4650      	mov	r0, sl
 8008f9c:	f7f7 f918 	bl	80001d0 <memchr>
 8008fa0:	b138      	cbz	r0, 8008fb2 <_vfiprintf_r+0x176>
 8008fa2:	9b04      	ldr	r3, [sp, #16]
 8008fa4:	eba0 000a 	sub.w	r0, r0, sl
 8008fa8:	2240      	movs	r2, #64	@ 0x40
 8008faa:	4082      	lsls	r2, r0
 8008fac:	4313      	orrs	r3, r2
 8008fae:	3401      	adds	r4, #1
 8008fb0:	9304      	str	r3, [sp, #16]
 8008fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb6:	4829      	ldr	r0, [pc, #164]	@ (800905c <_vfiprintf_r+0x220>)
 8008fb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fbc:	2206      	movs	r2, #6
 8008fbe:	f7f7 f907 	bl	80001d0 <memchr>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d03f      	beq.n	8009046 <_vfiprintf_r+0x20a>
 8008fc6:	4b26      	ldr	r3, [pc, #152]	@ (8009060 <_vfiprintf_r+0x224>)
 8008fc8:	bb1b      	cbnz	r3, 8009012 <_vfiprintf_r+0x1d6>
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	3307      	adds	r3, #7
 8008fce:	f023 0307 	bic.w	r3, r3, #7
 8008fd2:	3308      	adds	r3, #8
 8008fd4:	9303      	str	r3, [sp, #12]
 8008fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fd8:	443b      	add	r3, r7
 8008fda:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fdc:	e76a      	b.n	8008eb4 <_vfiprintf_r+0x78>
 8008fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	2001      	movs	r0, #1
 8008fe6:	e7a8      	b.n	8008f3a <_vfiprintf_r+0xfe>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	3401      	adds	r4, #1
 8008fec:	9305      	str	r3, [sp, #20]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	f04f 0c0a 	mov.w	ip, #10
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ffa:	3a30      	subs	r2, #48	@ 0x30
 8008ffc:	2a09      	cmp	r2, #9
 8008ffe:	d903      	bls.n	8009008 <_vfiprintf_r+0x1cc>
 8009000:	2b00      	cmp	r3, #0
 8009002:	d0c6      	beq.n	8008f92 <_vfiprintf_r+0x156>
 8009004:	9105      	str	r1, [sp, #20]
 8009006:	e7c4      	b.n	8008f92 <_vfiprintf_r+0x156>
 8009008:	fb0c 2101 	mla	r1, ip, r1, r2
 800900c:	4604      	mov	r4, r0
 800900e:	2301      	movs	r3, #1
 8009010:	e7f0      	b.n	8008ff4 <_vfiprintf_r+0x1b8>
 8009012:	ab03      	add	r3, sp, #12
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	462a      	mov	r2, r5
 8009018:	4b12      	ldr	r3, [pc, #72]	@ (8009064 <_vfiprintf_r+0x228>)
 800901a:	a904      	add	r1, sp, #16
 800901c:	4630      	mov	r0, r6
 800901e:	f3af 8000 	nop.w
 8009022:	4607      	mov	r7, r0
 8009024:	1c78      	adds	r0, r7, #1
 8009026:	d1d6      	bne.n	8008fd6 <_vfiprintf_r+0x19a>
 8009028:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800902a:	07d9      	lsls	r1, r3, #31
 800902c:	d405      	bmi.n	800903a <_vfiprintf_r+0x1fe>
 800902e:	89ab      	ldrh	r3, [r5, #12]
 8009030:	059a      	lsls	r2, r3, #22
 8009032:	d402      	bmi.n	800903a <_vfiprintf_r+0x1fe>
 8009034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009036:	f7ff fc77 	bl	8008928 <__retarget_lock_release_recursive>
 800903a:	89ab      	ldrh	r3, [r5, #12]
 800903c:	065b      	lsls	r3, r3, #25
 800903e:	f53f af1f 	bmi.w	8008e80 <_vfiprintf_r+0x44>
 8009042:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009044:	e71e      	b.n	8008e84 <_vfiprintf_r+0x48>
 8009046:	ab03      	add	r3, sp, #12
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	462a      	mov	r2, r5
 800904c:	4b05      	ldr	r3, [pc, #20]	@ (8009064 <_vfiprintf_r+0x228>)
 800904e:	a904      	add	r1, sp, #16
 8009050:	4630      	mov	r0, r6
 8009052:	f000 f879 	bl	8009148 <_printf_i>
 8009056:	e7e4      	b.n	8009022 <_vfiprintf_r+0x1e6>
 8009058:	08009c70 	.word	0x08009c70
 800905c:	08009c7a 	.word	0x08009c7a
 8009060:	00000000 	.word	0x00000000
 8009064:	08008e17 	.word	0x08008e17
 8009068:	08009c76 	.word	0x08009c76

0800906c <_printf_common>:
 800906c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009070:	4616      	mov	r6, r2
 8009072:	4698      	mov	r8, r3
 8009074:	688a      	ldr	r2, [r1, #8]
 8009076:	690b      	ldr	r3, [r1, #16]
 8009078:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800907c:	4293      	cmp	r3, r2
 800907e:	bfb8      	it	lt
 8009080:	4613      	movlt	r3, r2
 8009082:	6033      	str	r3, [r6, #0]
 8009084:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009088:	4607      	mov	r7, r0
 800908a:	460c      	mov	r4, r1
 800908c:	b10a      	cbz	r2, 8009092 <_printf_common+0x26>
 800908e:	3301      	adds	r3, #1
 8009090:	6033      	str	r3, [r6, #0]
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	0699      	lsls	r1, r3, #26
 8009096:	bf42      	ittt	mi
 8009098:	6833      	ldrmi	r3, [r6, #0]
 800909a:	3302      	addmi	r3, #2
 800909c:	6033      	strmi	r3, [r6, #0]
 800909e:	6825      	ldr	r5, [r4, #0]
 80090a0:	f015 0506 	ands.w	r5, r5, #6
 80090a4:	d106      	bne.n	80090b4 <_printf_common+0x48>
 80090a6:	f104 0a19 	add.w	sl, r4, #25
 80090aa:	68e3      	ldr	r3, [r4, #12]
 80090ac:	6832      	ldr	r2, [r6, #0]
 80090ae:	1a9b      	subs	r3, r3, r2
 80090b0:	42ab      	cmp	r3, r5
 80090b2:	dc26      	bgt.n	8009102 <_printf_common+0x96>
 80090b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090b8:	6822      	ldr	r2, [r4, #0]
 80090ba:	3b00      	subs	r3, #0
 80090bc:	bf18      	it	ne
 80090be:	2301      	movne	r3, #1
 80090c0:	0692      	lsls	r2, r2, #26
 80090c2:	d42b      	bmi.n	800911c <_printf_common+0xb0>
 80090c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090c8:	4641      	mov	r1, r8
 80090ca:	4638      	mov	r0, r7
 80090cc:	47c8      	blx	r9
 80090ce:	3001      	adds	r0, #1
 80090d0:	d01e      	beq.n	8009110 <_printf_common+0xa4>
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	6922      	ldr	r2, [r4, #16]
 80090d6:	f003 0306 	and.w	r3, r3, #6
 80090da:	2b04      	cmp	r3, #4
 80090dc:	bf02      	ittt	eq
 80090de:	68e5      	ldreq	r5, [r4, #12]
 80090e0:	6833      	ldreq	r3, [r6, #0]
 80090e2:	1aed      	subeq	r5, r5, r3
 80090e4:	68a3      	ldr	r3, [r4, #8]
 80090e6:	bf0c      	ite	eq
 80090e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090ec:	2500      	movne	r5, #0
 80090ee:	4293      	cmp	r3, r2
 80090f0:	bfc4      	itt	gt
 80090f2:	1a9b      	subgt	r3, r3, r2
 80090f4:	18ed      	addgt	r5, r5, r3
 80090f6:	2600      	movs	r6, #0
 80090f8:	341a      	adds	r4, #26
 80090fa:	42b5      	cmp	r5, r6
 80090fc:	d11a      	bne.n	8009134 <_printf_common+0xc8>
 80090fe:	2000      	movs	r0, #0
 8009100:	e008      	b.n	8009114 <_printf_common+0xa8>
 8009102:	2301      	movs	r3, #1
 8009104:	4652      	mov	r2, sl
 8009106:	4641      	mov	r1, r8
 8009108:	4638      	mov	r0, r7
 800910a:	47c8      	blx	r9
 800910c:	3001      	adds	r0, #1
 800910e:	d103      	bne.n	8009118 <_printf_common+0xac>
 8009110:	f04f 30ff 	mov.w	r0, #4294967295
 8009114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009118:	3501      	adds	r5, #1
 800911a:	e7c6      	b.n	80090aa <_printf_common+0x3e>
 800911c:	18e1      	adds	r1, r4, r3
 800911e:	1c5a      	adds	r2, r3, #1
 8009120:	2030      	movs	r0, #48	@ 0x30
 8009122:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009126:	4422      	add	r2, r4
 8009128:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800912c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009130:	3302      	adds	r3, #2
 8009132:	e7c7      	b.n	80090c4 <_printf_common+0x58>
 8009134:	2301      	movs	r3, #1
 8009136:	4622      	mov	r2, r4
 8009138:	4641      	mov	r1, r8
 800913a:	4638      	mov	r0, r7
 800913c:	47c8      	blx	r9
 800913e:	3001      	adds	r0, #1
 8009140:	d0e6      	beq.n	8009110 <_printf_common+0xa4>
 8009142:	3601      	adds	r6, #1
 8009144:	e7d9      	b.n	80090fa <_printf_common+0x8e>
	...

08009148 <_printf_i>:
 8009148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800914c:	7e0f      	ldrb	r7, [r1, #24]
 800914e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009150:	2f78      	cmp	r7, #120	@ 0x78
 8009152:	4691      	mov	r9, r2
 8009154:	4680      	mov	r8, r0
 8009156:	460c      	mov	r4, r1
 8009158:	469a      	mov	sl, r3
 800915a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800915e:	d807      	bhi.n	8009170 <_printf_i+0x28>
 8009160:	2f62      	cmp	r7, #98	@ 0x62
 8009162:	d80a      	bhi.n	800917a <_printf_i+0x32>
 8009164:	2f00      	cmp	r7, #0
 8009166:	f000 80d1 	beq.w	800930c <_printf_i+0x1c4>
 800916a:	2f58      	cmp	r7, #88	@ 0x58
 800916c:	f000 80b8 	beq.w	80092e0 <_printf_i+0x198>
 8009170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009174:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009178:	e03a      	b.n	80091f0 <_printf_i+0xa8>
 800917a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800917e:	2b15      	cmp	r3, #21
 8009180:	d8f6      	bhi.n	8009170 <_printf_i+0x28>
 8009182:	a101      	add	r1, pc, #4	@ (adr r1, 8009188 <_printf_i+0x40>)
 8009184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009188:	080091e1 	.word	0x080091e1
 800918c:	080091f5 	.word	0x080091f5
 8009190:	08009171 	.word	0x08009171
 8009194:	08009171 	.word	0x08009171
 8009198:	08009171 	.word	0x08009171
 800919c:	08009171 	.word	0x08009171
 80091a0:	080091f5 	.word	0x080091f5
 80091a4:	08009171 	.word	0x08009171
 80091a8:	08009171 	.word	0x08009171
 80091ac:	08009171 	.word	0x08009171
 80091b0:	08009171 	.word	0x08009171
 80091b4:	080092f3 	.word	0x080092f3
 80091b8:	0800921f 	.word	0x0800921f
 80091bc:	080092ad 	.word	0x080092ad
 80091c0:	08009171 	.word	0x08009171
 80091c4:	08009171 	.word	0x08009171
 80091c8:	08009315 	.word	0x08009315
 80091cc:	08009171 	.word	0x08009171
 80091d0:	0800921f 	.word	0x0800921f
 80091d4:	08009171 	.word	0x08009171
 80091d8:	08009171 	.word	0x08009171
 80091dc:	080092b5 	.word	0x080092b5
 80091e0:	6833      	ldr	r3, [r6, #0]
 80091e2:	1d1a      	adds	r2, r3, #4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6032      	str	r2, [r6, #0]
 80091e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091f0:	2301      	movs	r3, #1
 80091f2:	e09c      	b.n	800932e <_printf_i+0x1e6>
 80091f4:	6833      	ldr	r3, [r6, #0]
 80091f6:	6820      	ldr	r0, [r4, #0]
 80091f8:	1d19      	adds	r1, r3, #4
 80091fa:	6031      	str	r1, [r6, #0]
 80091fc:	0606      	lsls	r6, r0, #24
 80091fe:	d501      	bpl.n	8009204 <_printf_i+0xbc>
 8009200:	681d      	ldr	r5, [r3, #0]
 8009202:	e003      	b.n	800920c <_printf_i+0xc4>
 8009204:	0645      	lsls	r5, r0, #25
 8009206:	d5fb      	bpl.n	8009200 <_printf_i+0xb8>
 8009208:	f9b3 5000 	ldrsh.w	r5, [r3]
 800920c:	2d00      	cmp	r5, #0
 800920e:	da03      	bge.n	8009218 <_printf_i+0xd0>
 8009210:	232d      	movs	r3, #45	@ 0x2d
 8009212:	426d      	negs	r5, r5
 8009214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009218:	4858      	ldr	r0, [pc, #352]	@ (800937c <_printf_i+0x234>)
 800921a:	230a      	movs	r3, #10
 800921c:	e011      	b.n	8009242 <_printf_i+0xfa>
 800921e:	6821      	ldr	r1, [r4, #0]
 8009220:	6833      	ldr	r3, [r6, #0]
 8009222:	0608      	lsls	r0, r1, #24
 8009224:	f853 5b04 	ldr.w	r5, [r3], #4
 8009228:	d402      	bmi.n	8009230 <_printf_i+0xe8>
 800922a:	0649      	lsls	r1, r1, #25
 800922c:	bf48      	it	mi
 800922e:	b2ad      	uxthmi	r5, r5
 8009230:	2f6f      	cmp	r7, #111	@ 0x6f
 8009232:	4852      	ldr	r0, [pc, #328]	@ (800937c <_printf_i+0x234>)
 8009234:	6033      	str	r3, [r6, #0]
 8009236:	bf14      	ite	ne
 8009238:	230a      	movne	r3, #10
 800923a:	2308      	moveq	r3, #8
 800923c:	2100      	movs	r1, #0
 800923e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009242:	6866      	ldr	r6, [r4, #4]
 8009244:	60a6      	str	r6, [r4, #8]
 8009246:	2e00      	cmp	r6, #0
 8009248:	db05      	blt.n	8009256 <_printf_i+0x10e>
 800924a:	6821      	ldr	r1, [r4, #0]
 800924c:	432e      	orrs	r6, r5
 800924e:	f021 0104 	bic.w	r1, r1, #4
 8009252:	6021      	str	r1, [r4, #0]
 8009254:	d04b      	beq.n	80092ee <_printf_i+0x1a6>
 8009256:	4616      	mov	r6, r2
 8009258:	fbb5 f1f3 	udiv	r1, r5, r3
 800925c:	fb03 5711 	mls	r7, r3, r1, r5
 8009260:	5dc7      	ldrb	r7, [r0, r7]
 8009262:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009266:	462f      	mov	r7, r5
 8009268:	42bb      	cmp	r3, r7
 800926a:	460d      	mov	r5, r1
 800926c:	d9f4      	bls.n	8009258 <_printf_i+0x110>
 800926e:	2b08      	cmp	r3, #8
 8009270:	d10b      	bne.n	800928a <_printf_i+0x142>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	07df      	lsls	r7, r3, #31
 8009276:	d508      	bpl.n	800928a <_printf_i+0x142>
 8009278:	6923      	ldr	r3, [r4, #16]
 800927a:	6861      	ldr	r1, [r4, #4]
 800927c:	4299      	cmp	r1, r3
 800927e:	bfde      	ittt	le
 8009280:	2330      	movle	r3, #48	@ 0x30
 8009282:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009286:	f106 36ff 	addle.w	r6, r6, #4294967295
 800928a:	1b92      	subs	r2, r2, r6
 800928c:	6122      	str	r2, [r4, #16]
 800928e:	f8cd a000 	str.w	sl, [sp]
 8009292:	464b      	mov	r3, r9
 8009294:	aa03      	add	r2, sp, #12
 8009296:	4621      	mov	r1, r4
 8009298:	4640      	mov	r0, r8
 800929a:	f7ff fee7 	bl	800906c <_printf_common>
 800929e:	3001      	adds	r0, #1
 80092a0:	d14a      	bne.n	8009338 <_printf_i+0x1f0>
 80092a2:	f04f 30ff 	mov.w	r0, #4294967295
 80092a6:	b004      	add	sp, #16
 80092a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	f043 0320 	orr.w	r3, r3, #32
 80092b2:	6023      	str	r3, [r4, #0]
 80092b4:	4832      	ldr	r0, [pc, #200]	@ (8009380 <_printf_i+0x238>)
 80092b6:	2778      	movs	r7, #120	@ 0x78
 80092b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	6831      	ldr	r1, [r6, #0]
 80092c0:	061f      	lsls	r7, r3, #24
 80092c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80092c6:	d402      	bmi.n	80092ce <_printf_i+0x186>
 80092c8:	065f      	lsls	r7, r3, #25
 80092ca:	bf48      	it	mi
 80092cc:	b2ad      	uxthmi	r5, r5
 80092ce:	6031      	str	r1, [r6, #0]
 80092d0:	07d9      	lsls	r1, r3, #31
 80092d2:	bf44      	itt	mi
 80092d4:	f043 0320 	orrmi.w	r3, r3, #32
 80092d8:	6023      	strmi	r3, [r4, #0]
 80092da:	b11d      	cbz	r5, 80092e4 <_printf_i+0x19c>
 80092dc:	2310      	movs	r3, #16
 80092de:	e7ad      	b.n	800923c <_printf_i+0xf4>
 80092e0:	4826      	ldr	r0, [pc, #152]	@ (800937c <_printf_i+0x234>)
 80092e2:	e7e9      	b.n	80092b8 <_printf_i+0x170>
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	f023 0320 	bic.w	r3, r3, #32
 80092ea:	6023      	str	r3, [r4, #0]
 80092ec:	e7f6      	b.n	80092dc <_printf_i+0x194>
 80092ee:	4616      	mov	r6, r2
 80092f0:	e7bd      	b.n	800926e <_printf_i+0x126>
 80092f2:	6833      	ldr	r3, [r6, #0]
 80092f4:	6825      	ldr	r5, [r4, #0]
 80092f6:	6961      	ldr	r1, [r4, #20]
 80092f8:	1d18      	adds	r0, r3, #4
 80092fa:	6030      	str	r0, [r6, #0]
 80092fc:	062e      	lsls	r6, r5, #24
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	d501      	bpl.n	8009306 <_printf_i+0x1be>
 8009302:	6019      	str	r1, [r3, #0]
 8009304:	e002      	b.n	800930c <_printf_i+0x1c4>
 8009306:	0668      	lsls	r0, r5, #25
 8009308:	d5fb      	bpl.n	8009302 <_printf_i+0x1ba>
 800930a:	8019      	strh	r1, [r3, #0]
 800930c:	2300      	movs	r3, #0
 800930e:	6123      	str	r3, [r4, #16]
 8009310:	4616      	mov	r6, r2
 8009312:	e7bc      	b.n	800928e <_printf_i+0x146>
 8009314:	6833      	ldr	r3, [r6, #0]
 8009316:	1d1a      	adds	r2, r3, #4
 8009318:	6032      	str	r2, [r6, #0]
 800931a:	681e      	ldr	r6, [r3, #0]
 800931c:	6862      	ldr	r2, [r4, #4]
 800931e:	2100      	movs	r1, #0
 8009320:	4630      	mov	r0, r6
 8009322:	f7f6 ff55 	bl	80001d0 <memchr>
 8009326:	b108      	cbz	r0, 800932c <_printf_i+0x1e4>
 8009328:	1b80      	subs	r0, r0, r6
 800932a:	6060      	str	r0, [r4, #4]
 800932c:	6863      	ldr	r3, [r4, #4]
 800932e:	6123      	str	r3, [r4, #16]
 8009330:	2300      	movs	r3, #0
 8009332:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009336:	e7aa      	b.n	800928e <_printf_i+0x146>
 8009338:	6923      	ldr	r3, [r4, #16]
 800933a:	4632      	mov	r2, r6
 800933c:	4649      	mov	r1, r9
 800933e:	4640      	mov	r0, r8
 8009340:	47d0      	blx	sl
 8009342:	3001      	adds	r0, #1
 8009344:	d0ad      	beq.n	80092a2 <_printf_i+0x15a>
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	079b      	lsls	r3, r3, #30
 800934a:	d413      	bmi.n	8009374 <_printf_i+0x22c>
 800934c:	68e0      	ldr	r0, [r4, #12]
 800934e:	9b03      	ldr	r3, [sp, #12]
 8009350:	4298      	cmp	r0, r3
 8009352:	bfb8      	it	lt
 8009354:	4618      	movlt	r0, r3
 8009356:	e7a6      	b.n	80092a6 <_printf_i+0x15e>
 8009358:	2301      	movs	r3, #1
 800935a:	4632      	mov	r2, r6
 800935c:	4649      	mov	r1, r9
 800935e:	4640      	mov	r0, r8
 8009360:	47d0      	blx	sl
 8009362:	3001      	adds	r0, #1
 8009364:	d09d      	beq.n	80092a2 <_printf_i+0x15a>
 8009366:	3501      	adds	r5, #1
 8009368:	68e3      	ldr	r3, [r4, #12]
 800936a:	9903      	ldr	r1, [sp, #12]
 800936c:	1a5b      	subs	r3, r3, r1
 800936e:	42ab      	cmp	r3, r5
 8009370:	dcf2      	bgt.n	8009358 <_printf_i+0x210>
 8009372:	e7eb      	b.n	800934c <_printf_i+0x204>
 8009374:	2500      	movs	r5, #0
 8009376:	f104 0619 	add.w	r6, r4, #25
 800937a:	e7f5      	b.n	8009368 <_printf_i+0x220>
 800937c:	08009c81 	.word	0x08009c81
 8009380:	08009c92 	.word	0x08009c92

08009384 <__sflush_r>:
 8009384:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800938c:	0716      	lsls	r6, r2, #28
 800938e:	4605      	mov	r5, r0
 8009390:	460c      	mov	r4, r1
 8009392:	d454      	bmi.n	800943e <__sflush_r+0xba>
 8009394:	684b      	ldr	r3, [r1, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	dc02      	bgt.n	80093a0 <__sflush_r+0x1c>
 800939a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800939c:	2b00      	cmp	r3, #0
 800939e:	dd48      	ble.n	8009432 <__sflush_r+0xae>
 80093a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093a2:	2e00      	cmp	r6, #0
 80093a4:	d045      	beq.n	8009432 <__sflush_r+0xae>
 80093a6:	2300      	movs	r3, #0
 80093a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80093ac:	682f      	ldr	r7, [r5, #0]
 80093ae:	6a21      	ldr	r1, [r4, #32]
 80093b0:	602b      	str	r3, [r5, #0]
 80093b2:	d030      	beq.n	8009416 <__sflush_r+0x92>
 80093b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093b6:	89a3      	ldrh	r3, [r4, #12]
 80093b8:	0759      	lsls	r1, r3, #29
 80093ba:	d505      	bpl.n	80093c8 <__sflush_r+0x44>
 80093bc:	6863      	ldr	r3, [r4, #4]
 80093be:	1ad2      	subs	r2, r2, r3
 80093c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80093c2:	b10b      	cbz	r3, 80093c8 <__sflush_r+0x44>
 80093c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093c6:	1ad2      	subs	r2, r2, r3
 80093c8:	2300      	movs	r3, #0
 80093ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093cc:	6a21      	ldr	r1, [r4, #32]
 80093ce:	4628      	mov	r0, r5
 80093d0:	47b0      	blx	r6
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	d106      	bne.n	80093e6 <__sflush_r+0x62>
 80093d8:	6829      	ldr	r1, [r5, #0]
 80093da:	291d      	cmp	r1, #29
 80093dc:	d82b      	bhi.n	8009436 <__sflush_r+0xb2>
 80093de:	4a2a      	ldr	r2, [pc, #168]	@ (8009488 <__sflush_r+0x104>)
 80093e0:	40ca      	lsrs	r2, r1
 80093e2:	07d6      	lsls	r6, r2, #31
 80093e4:	d527      	bpl.n	8009436 <__sflush_r+0xb2>
 80093e6:	2200      	movs	r2, #0
 80093e8:	6062      	str	r2, [r4, #4]
 80093ea:	04d9      	lsls	r1, r3, #19
 80093ec:	6922      	ldr	r2, [r4, #16]
 80093ee:	6022      	str	r2, [r4, #0]
 80093f0:	d504      	bpl.n	80093fc <__sflush_r+0x78>
 80093f2:	1c42      	adds	r2, r0, #1
 80093f4:	d101      	bne.n	80093fa <__sflush_r+0x76>
 80093f6:	682b      	ldr	r3, [r5, #0]
 80093f8:	b903      	cbnz	r3, 80093fc <__sflush_r+0x78>
 80093fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80093fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093fe:	602f      	str	r7, [r5, #0]
 8009400:	b1b9      	cbz	r1, 8009432 <__sflush_r+0xae>
 8009402:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009406:	4299      	cmp	r1, r3
 8009408:	d002      	beq.n	8009410 <__sflush_r+0x8c>
 800940a:	4628      	mov	r0, r5
 800940c:	f7ff fa9c 	bl	8008948 <_free_r>
 8009410:	2300      	movs	r3, #0
 8009412:	6363      	str	r3, [r4, #52]	@ 0x34
 8009414:	e00d      	b.n	8009432 <__sflush_r+0xae>
 8009416:	2301      	movs	r3, #1
 8009418:	4628      	mov	r0, r5
 800941a:	47b0      	blx	r6
 800941c:	4602      	mov	r2, r0
 800941e:	1c50      	adds	r0, r2, #1
 8009420:	d1c9      	bne.n	80093b6 <__sflush_r+0x32>
 8009422:	682b      	ldr	r3, [r5, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d0c6      	beq.n	80093b6 <__sflush_r+0x32>
 8009428:	2b1d      	cmp	r3, #29
 800942a:	d001      	beq.n	8009430 <__sflush_r+0xac>
 800942c:	2b16      	cmp	r3, #22
 800942e:	d11e      	bne.n	800946e <__sflush_r+0xea>
 8009430:	602f      	str	r7, [r5, #0]
 8009432:	2000      	movs	r0, #0
 8009434:	e022      	b.n	800947c <__sflush_r+0xf8>
 8009436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800943a:	b21b      	sxth	r3, r3
 800943c:	e01b      	b.n	8009476 <__sflush_r+0xf2>
 800943e:	690f      	ldr	r7, [r1, #16]
 8009440:	2f00      	cmp	r7, #0
 8009442:	d0f6      	beq.n	8009432 <__sflush_r+0xae>
 8009444:	0793      	lsls	r3, r2, #30
 8009446:	680e      	ldr	r6, [r1, #0]
 8009448:	bf08      	it	eq
 800944a:	694b      	ldreq	r3, [r1, #20]
 800944c:	600f      	str	r7, [r1, #0]
 800944e:	bf18      	it	ne
 8009450:	2300      	movne	r3, #0
 8009452:	eba6 0807 	sub.w	r8, r6, r7
 8009456:	608b      	str	r3, [r1, #8]
 8009458:	f1b8 0f00 	cmp.w	r8, #0
 800945c:	dde9      	ble.n	8009432 <__sflush_r+0xae>
 800945e:	6a21      	ldr	r1, [r4, #32]
 8009460:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009462:	4643      	mov	r3, r8
 8009464:	463a      	mov	r2, r7
 8009466:	4628      	mov	r0, r5
 8009468:	47b0      	blx	r6
 800946a:	2800      	cmp	r0, #0
 800946c:	dc08      	bgt.n	8009480 <__sflush_r+0xfc>
 800946e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009476:	81a3      	strh	r3, [r4, #12]
 8009478:	f04f 30ff 	mov.w	r0, #4294967295
 800947c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009480:	4407      	add	r7, r0
 8009482:	eba8 0800 	sub.w	r8, r8, r0
 8009486:	e7e7      	b.n	8009458 <__sflush_r+0xd4>
 8009488:	20400001 	.word	0x20400001

0800948c <_fflush_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	690b      	ldr	r3, [r1, #16]
 8009490:	4605      	mov	r5, r0
 8009492:	460c      	mov	r4, r1
 8009494:	b913      	cbnz	r3, 800949c <_fflush_r+0x10>
 8009496:	2500      	movs	r5, #0
 8009498:	4628      	mov	r0, r5
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	b118      	cbz	r0, 80094a6 <_fflush_r+0x1a>
 800949e:	6a03      	ldr	r3, [r0, #32]
 80094a0:	b90b      	cbnz	r3, 80094a6 <_fflush_r+0x1a>
 80094a2:	f7ff f8d7 	bl	8008654 <__sinit>
 80094a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d0f3      	beq.n	8009496 <_fflush_r+0xa>
 80094ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094b0:	07d0      	lsls	r0, r2, #31
 80094b2:	d404      	bmi.n	80094be <_fflush_r+0x32>
 80094b4:	0599      	lsls	r1, r3, #22
 80094b6:	d402      	bmi.n	80094be <_fflush_r+0x32>
 80094b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094ba:	f7ff fa34 	bl	8008926 <__retarget_lock_acquire_recursive>
 80094be:	4628      	mov	r0, r5
 80094c0:	4621      	mov	r1, r4
 80094c2:	f7ff ff5f 	bl	8009384 <__sflush_r>
 80094c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094c8:	07da      	lsls	r2, r3, #31
 80094ca:	4605      	mov	r5, r0
 80094cc:	d4e4      	bmi.n	8009498 <_fflush_r+0xc>
 80094ce:	89a3      	ldrh	r3, [r4, #12]
 80094d0:	059b      	lsls	r3, r3, #22
 80094d2:	d4e1      	bmi.n	8009498 <_fflush_r+0xc>
 80094d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094d6:	f7ff fa27 	bl	8008928 <__retarget_lock_release_recursive>
 80094da:	e7dd      	b.n	8009498 <_fflush_r+0xc>

080094dc <_putc_r>:
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	460d      	mov	r5, r1
 80094e0:	4614      	mov	r4, r2
 80094e2:	4606      	mov	r6, r0
 80094e4:	b118      	cbz	r0, 80094ee <_putc_r+0x12>
 80094e6:	6a03      	ldr	r3, [r0, #32]
 80094e8:	b90b      	cbnz	r3, 80094ee <_putc_r+0x12>
 80094ea:	f7ff f8b3 	bl	8008654 <__sinit>
 80094ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094f0:	07d8      	lsls	r0, r3, #31
 80094f2:	d405      	bmi.n	8009500 <_putc_r+0x24>
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	0599      	lsls	r1, r3, #22
 80094f8:	d402      	bmi.n	8009500 <_putc_r+0x24>
 80094fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094fc:	f7ff fa13 	bl	8008926 <__retarget_lock_acquire_recursive>
 8009500:	68a3      	ldr	r3, [r4, #8]
 8009502:	3b01      	subs	r3, #1
 8009504:	2b00      	cmp	r3, #0
 8009506:	60a3      	str	r3, [r4, #8]
 8009508:	da05      	bge.n	8009516 <_putc_r+0x3a>
 800950a:	69a2      	ldr	r2, [r4, #24]
 800950c:	4293      	cmp	r3, r2
 800950e:	db12      	blt.n	8009536 <_putc_r+0x5a>
 8009510:	b2eb      	uxtb	r3, r5
 8009512:	2b0a      	cmp	r3, #10
 8009514:	d00f      	beq.n	8009536 <_putc_r+0x5a>
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	6022      	str	r2, [r4, #0]
 800951c:	701d      	strb	r5, [r3, #0]
 800951e:	b2ed      	uxtb	r5, r5
 8009520:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009522:	07da      	lsls	r2, r3, #31
 8009524:	d405      	bmi.n	8009532 <_putc_r+0x56>
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	059b      	lsls	r3, r3, #22
 800952a:	d402      	bmi.n	8009532 <_putc_r+0x56>
 800952c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800952e:	f7ff f9fb 	bl	8008928 <__retarget_lock_release_recursive>
 8009532:	4628      	mov	r0, r5
 8009534:	bd70      	pop	{r4, r5, r6, pc}
 8009536:	4629      	mov	r1, r5
 8009538:	4622      	mov	r2, r4
 800953a:	4630      	mov	r0, r6
 800953c:	f000 f802 	bl	8009544 <__swbuf_r>
 8009540:	4605      	mov	r5, r0
 8009542:	e7ed      	b.n	8009520 <_putc_r+0x44>

08009544 <__swbuf_r>:
 8009544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009546:	460e      	mov	r6, r1
 8009548:	4614      	mov	r4, r2
 800954a:	4605      	mov	r5, r0
 800954c:	b118      	cbz	r0, 8009556 <__swbuf_r+0x12>
 800954e:	6a03      	ldr	r3, [r0, #32]
 8009550:	b90b      	cbnz	r3, 8009556 <__swbuf_r+0x12>
 8009552:	f7ff f87f 	bl	8008654 <__sinit>
 8009556:	69a3      	ldr	r3, [r4, #24]
 8009558:	60a3      	str	r3, [r4, #8]
 800955a:	89a3      	ldrh	r3, [r4, #12]
 800955c:	071a      	lsls	r2, r3, #28
 800955e:	d501      	bpl.n	8009564 <__swbuf_r+0x20>
 8009560:	6923      	ldr	r3, [r4, #16]
 8009562:	b943      	cbnz	r3, 8009576 <__swbuf_r+0x32>
 8009564:	4621      	mov	r1, r4
 8009566:	4628      	mov	r0, r5
 8009568:	f000 f82a 	bl	80095c0 <__swsetup_r>
 800956c:	b118      	cbz	r0, 8009576 <__swbuf_r+0x32>
 800956e:	f04f 37ff 	mov.w	r7, #4294967295
 8009572:	4638      	mov	r0, r7
 8009574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	6922      	ldr	r2, [r4, #16]
 800957a:	1a98      	subs	r0, r3, r2
 800957c:	6963      	ldr	r3, [r4, #20]
 800957e:	b2f6      	uxtb	r6, r6
 8009580:	4283      	cmp	r3, r0
 8009582:	4637      	mov	r7, r6
 8009584:	dc05      	bgt.n	8009592 <__swbuf_r+0x4e>
 8009586:	4621      	mov	r1, r4
 8009588:	4628      	mov	r0, r5
 800958a:	f7ff ff7f 	bl	800948c <_fflush_r>
 800958e:	2800      	cmp	r0, #0
 8009590:	d1ed      	bne.n	800956e <__swbuf_r+0x2a>
 8009592:	68a3      	ldr	r3, [r4, #8]
 8009594:	3b01      	subs	r3, #1
 8009596:	60a3      	str	r3, [r4, #8]
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	6022      	str	r2, [r4, #0]
 800959e:	701e      	strb	r6, [r3, #0]
 80095a0:	6962      	ldr	r2, [r4, #20]
 80095a2:	1c43      	adds	r3, r0, #1
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d004      	beq.n	80095b2 <__swbuf_r+0x6e>
 80095a8:	89a3      	ldrh	r3, [r4, #12]
 80095aa:	07db      	lsls	r3, r3, #31
 80095ac:	d5e1      	bpl.n	8009572 <__swbuf_r+0x2e>
 80095ae:	2e0a      	cmp	r6, #10
 80095b0:	d1df      	bne.n	8009572 <__swbuf_r+0x2e>
 80095b2:	4621      	mov	r1, r4
 80095b4:	4628      	mov	r0, r5
 80095b6:	f7ff ff69 	bl	800948c <_fflush_r>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d0d9      	beq.n	8009572 <__swbuf_r+0x2e>
 80095be:	e7d6      	b.n	800956e <__swbuf_r+0x2a>

080095c0 <__swsetup_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4b29      	ldr	r3, [pc, #164]	@ (8009668 <__swsetup_r+0xa8>)
 80095c4:	4605      	mov	r5, r0
 80095c6:	6818      	ldr	r0, [r3, #0]
 80095c8:	460c      	mov	r4, r1
 80095ca:	b118      	cbz	r0, 80095d4 <__swsetup_r+0x14>
 80095cc:	6a03      	ldr	r3, [r0, #32]
 80095ce:	b90b      	cbnz	r3, 80095d4 <__swsetup_r+0x14>
 80095d0:	f7ff f840 	bl	8008654 <__sinit>
 80095d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095d8:	0719      	lsls	r1, r3, #28
 80095da:	d422      	bmi.n	8009622 <__swsetup_r+0x62>
 80095dc:	06da      	lsls	r2, r3, #27
 80095de:	d407      	bmi.n	80095f0 <__swsetup_r+0x30>
 80095e0:	2209      	movs	r2, #9
 80095e2:	602a      	str	r2, [r5, #0]
 80095e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095e8:	81a3      	strh	r3, [r4, #12]
 80095ea:	f04f 30ff 	mov.w	r0, #4294967295
 80095ee:	e033      	b.n	8009658 <__swsetup_r+0x98>
 80095f0:	0758      	lsls	r0, r3, #29
 80095f2:	d512      	bpl.n	800961a <__swsetup_r+0x5a>
 80095f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095f6:	b141      	cbz	r1, 800960a <__swsetup_r+0x4a>
 80095f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095fc:	4299      	cmp	r1, r3
 80095fe:	d002      	beq.n	8009606 <__swsetup_r+0x46>
 8009600:	4628      	mov	r0, r5
 8009602:	f7ff f9a1 	bl	8008948 <_free_r>
 8009606:	2300      	movs	r3, #0
 8009608:	6363      	str	r3, [r4, #52]	@ 0x34
 800960a:	89a3      	ldrh	r3, [r4, #12]
 800960c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009610:	81a3      	strh	r3, [r4, #12]
 8009612:	2300      	movs	r3, #0
 8009614:	6063      	str	r3, [r4, #4]
 8009616:	6923      	ldr	r3, [r4, #16]
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	f043 0308 	orr.w	r3, r3, #8
 8009620:	81a3      	strh	r3, [r4, #12]
 8009622:	6923      	ldr	r3, [r4, #16]
 8009624:	b94b      	cbnz	r3, 800963a <__swsetup_r+0x7a>
 8009626:	89a3      	ldrh	r3, [r4, #12]
 8009628:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800962c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009630:	d003      	beq.n	800963a <__swsetup_r+0x7a>
 8009632:	4621      	mov	r1, r4
 8009634:	4628      	mov	r0, r5
 8009636:	f000 f87d 	bl	8009734 <__smakebuf_r>
 800963a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800963e:	f013 0201 	ands.w	r2, r3, #1
 8009642:	d00a      	beq.n	800965a <__swsetup_r+0x9a>
 8009644:	2200      	movs	r2, #0
 8009646:	60a2      	str	r2, [r4, #8]
 8009648:	6962      	ldr	r2, [r4, #20]
 800964a:	4252      	negs	r2, r2
 800964c:	61a2      	str	r2, [r4, #24]
 800964e:	6922      	ldr	r2, [r4, #16]
 8009650:	b942      	cbnz	r2, 8009664 <__swsetup_r+0xa4>
 8009652:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009656:	d1c5      	bne.n	80095e4 <__swsetup_r+0x24>
 8009658:	bd38      	pop	{r3, r4, r5, pc}
 800965a:	0799      	lsls	r1, r3, #30
 800965c:	bf58      	it	pl
 800965e:	6962      	ldrpl	r2, [r4, #20]
 8009660:	60a2      	str	r2, [r4, #8]
 8009662:	e7f4      	b.n	800964e <__swsetup_r+0x8e>
 8009664:	2000      	movs	r0, #0
 8009666:	e7f7      	b.n	8009658 <__swsetup_r+0x98>
 8009668:	20004124 	.word	0x20004124

0800966c <_sbrk_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	4d06      	ldr	r5, [pc, #24]	@ (8009688 <_sbrk_r+0x1c>)
 8009670:	2300      	movs	r3, #0
 8009672:	4604      	mov	r4, r0
 8009674:	4608      	mov	r0, r1
 8009676:	602b      	str	r3, [r5, #0]
 8009678:	f7fb feb0 	bl	80053dc <_sbrk>
 800967c:	1c43      	adds	r3, r0, #1
 800967e:	d102      	bne.n	8009686 <_sbrk_r+0x1a>
 8009680:	682b      	ldr	r3, [r5, #0]
 8009682:	b103      	cbz	r3, 8009686 <_sbrk_r+0x1a>
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	bd38      	pop	{r3, r4, r5, pc}
 8009688:	200061e8 	.word	0x200061e8

0800968c <_realloc_r>:
 800968c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009690:	4607      	mov	r7, r0
 8009692:	4614      	mov	r4, r2
 8009694:	460d      	mov	r5, r1
 8009696:	b921      	cbnz	r1, 80096a2 <_realloc_r+0x16>
 8009698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800969c:	4611      	mov	r1, r2
 800969e:	f7ff b9bf 	b.w	8008a20 <_malloc_r>
 80096a2:	b92a      	cbnz	r2, 80096b0 <_realloc_r+0x24>
 80096a4:	f7ff f950 	bl	8008948 <_free_r>
 80096a8:	4625      	mov	r5, r4
 80096aa:	4628      	mov	r0, r5
 80096ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b0:	f000 f89e 	bl	80097f0 <_malloc_usable_size_r>
 80096b4:	4284      	cmp	r4, r0
 80096b6:	4606      	mov	r6, r0
 80096b8:	d802      	bhi.n	80096c0 <_realloc_r+0x34>
 80096ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096be:	d8f4      	bhi.n	80096aa <_realloc_r+0x1e>
 80096c0:	4621      	mov	r1, r4
 80096c2:	4638      	mov	r0, r7
 80096c4:	f7ff f9ac 	bl	8008a20 <_malloc_r>
 80096c8:	4680      	mov	r8, r0
 80096ca:	b908      	cbnz	r0, 80096d0 <_realloc_r+0x44>
 80096cc:	4645      	mov	r5, r8
 80096ce:	e7ec      	b.n	80096aa <_realloc_r+0x1e>
 80096d0:	42b4      	cmp	r4, r6
 80096d2:	4622      	mov	r2, r4
 80096d4:	4629      	mov	r1, r5
 80096d6:	bf28      	it	cs
 80096d8:	4632      	movcs	r2, r6
 80096da:	f7ff f926 	bl	800892a <memcpy>
 80096de:	4629      	mov	r1, r5
 80096e0:	4638      	mov	r0, r7
 80096e2:	f7ff f931 	bl	8008948 <_free_r>
 80096e6:	e7f1      	b.n	80096cc <_realloc_r+0x40>

080096e8 <__swhatbuf_r>:
 80096e8:	b570      	push	{r4, r5, r6, lr}
 80096ea:	460c      	mov	r4, r1
 80096ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f0:	2900      	cmp	r1, #0
 80096f2:	b096      	sub	sp, #88	@ 0x58
 80096f4:	4615      	mov	r5, r2
 80096f6:	461e      	mov	r6, r3
 80096f8:	da0d      	bge.n	8009716 <__swhatbuf_r+0x2e>
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009700:	f04f 0100 	mov.w	r1, #0
 8009704:	bf14      	ite	ne
 8009706:	2340      	movne	r3, #64	@ 0x40
 8009708:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800970c:	2000      	movs	r0, #0
 800970e:	6031      	str	r1, [r6, #0]
 8009710:	602b      	str	r3, [r5, #0]
 8009712:	b016      	add	sp, #88	@ 0x58
 8009714:	bd70      	pop	{r4, r5, r6, pc}
 8009716:	466a      	mov	r2, sp
 8009718:	f000 f848 	bl	80097ac <_fstat_r>
 800971c:	2800      	cmp	r0, #0
 800971e:	dbec      	blt.n	80096fa <__swhatbuf_r+0x12>
 8009720:	9901      	ldr	r1, [sp, #4]
 8009722:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009726:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800972a:	4259      	negs	r1, r3
 800972c:	4159      	adcs	r1, r3
 800972e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009732:	e7eb      	b.n	800970c <__swhatbuf_r+0x24>

08009734 <__smakebuf_r>:
 8009734:	898b      	ldrh	r3, [r1, #12]
 8009736:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009738:	079d      	lsls	r5, r3, #30
 800973a:	4606      	mov	r6, r0
 800973c:	460c      	mov	r4, r1
 800973e:	d507      	bpl.n	8009750 <__smakebuf_r+0x1c>
 8009740:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	6123      	str	r3, [r4, #16]
 8009748:	2301      	movs	r3, #1
 800974a:	6163      	str	r3, [r4, #20]
 800974c:	b003      	add	sp, #12
 800974e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009750:	ab01      	add	r3, sp, #4
 8009752:	466a      	mov	r2, sp
 8009754:	f7ff ffc8 	bl	80096e8 <__swhatbuf_r>
 8009758:	9f00      	ldr	r7, [sp, #0]
 800975a:	4605      	mov	r5, r0
 800975c:	4639      	mov	r1, r7
 800975e:	4630      	mov	r0, r6
 8009760:	f7ff f95e 	bl	8008a20 <_malloc_r>
 8009764:	b948      	cbnz	r0, 800977a <__smakebuf_r+0x46>
 8009766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800976a:	059a      	lsls	r2, r3, #22
 800976c:	d4ee      	bmi.n	800974c <__smakebuf_r+0x18>
 800976e:	f023 0303 	bic.w	r3, r3, #3
 8009772:	f043 0302 	orr.w	r3, r3, #2
 8009776:	81a3      	strh	r3, [r4, #12]
 8009778:	e7e2      	b.n	8009740 <__smakebuf_r+0xc>
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	6020      	str	r0, [r4, #0]
 800977e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009782:	81a3      	strh	r3, [r4, #12]
 8009784:	9b01      	ldr	r3, [sp, #4]
 8009786:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800978a:	b15b      	cbz	r3, 80097a4 <__smakebuf_r+0x70>
 800978c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009790:	4630      	mov	r0, r6
 8009792:	f000 f81d 	bl	80097d0 <_isatty_r>
 8009796:	b128      	cbz	r0, 80097a4 <__smakebuf_r+0x70>
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	f023 0303 	bic.w	r3, r3, #3
 800979e:	f043 0301 	orr.w	r3, r3, #1
 80097a2:	81a3      	strh	r3, [r4, #12]
 80097a4:	89a3      	ldrh	r3, [r4, #12]
 80097a6:	431d      	orrs	r5, r3
 80097a8:	81a5      	strh	r5, [r4, #12]
 80097aa:	e7cf      	b.n	800974c <__smakebuf_r+0x18>

080097ac <_fstat_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4d07      	ldr	r5, [pc, #28]	@ (80097cc <_fstat_r+0x20>)
 80097b0:	2300      	movs	r3, #0
 80097b2:	4604      	mov	r4, r0
 80097b4:	4608      	mov	r0, r1
 80097b6:	4611      	mov	r1, r2
 80097b8:	602b      	str	r3, [r5, #0]
 80097ba:	f7fb fde6 	bl	800538a <_fstat>
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	d102      	bne.n	80097c8 <_fstat_r+0x1c>
 80097c2:	682b      	ldr	r3, [r5, #0]
 80097c4:	b103      	cbz	r3, 80097c8 <_fstat_r+0x1c>
 80097c6:	6023      	str	r3, [r4, #0]
 80097c8:	bd38      	pop	{r3, r4, r5, pc}
 80097ca:	bf00      	nop
 80097cc:	200061e8 	.word	0x200061e8

080097d0 <_isatty_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4d06      	ldr	r5, [pc, #24]	@ (80097ec <_isatty_r+0x1c>)
 80097d4:	2300      	movs	r3, #0
 80097d6:	4604      	mov	r4, r0
 80097d8:	4608      	mov	r0, r1
 80097da:	602b      	str	r3, [r5, #0]
 80097dc:	f7fb fde5 	bl	80053aa <_isatty>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d102      	bne.n	80097ea <_isatty_r+0x1a>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	b103      	cbz	r3, 80097ea <_isatty_r+0x1a>
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	bd38      	pop	{r3, r4, r5, pc}
 80097ec:	200061e8 	.word	0x200061e8

080097f0 <_malloc_usable_size_r>:
 80097f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097f4:	1f18      	subs	r0, r3, #4
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bfbc      	itt	lt
 80097fa:	580b      	ldrlt	r3, [r1, r0]
 80097fc:	18c0      	addlt	r0, r0, r3
 80097fe:	4770      	bx	lr

08009800 <_init>:
 8009800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009802:	bf00      	nop
 8009804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009806:	bc08      	pop	{r3}
 8009808:	469e      	mov	lr, r3
 800980a:	4770      	bx	lr

0800980c <_fini>:
 800980c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980e:	bf00      	nop
 8009810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009812:	bc08      	pop	{r3}
 8009814:	469e      	mov	lr, r3
 8009816:	4770      	bx	lr
