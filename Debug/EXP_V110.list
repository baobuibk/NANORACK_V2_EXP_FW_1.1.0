
EXP_V110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb60  08008190  08008190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e04  08013cf0  08013cf0  0000ccf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015af4  08015af4  00011404  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08015af4  08015af4  0000eaf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015afc  08015afc  00011404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015afc  08015afc  0000eafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015b00  08015b00  0000eb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002404  20000000  08015b04  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011404  2**0
                  CONTENTS
 10 .bss          000015e4  20002404  20002404  00011404  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200039e8  200039e8  00011404  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011404  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b11c  00000000  00000000  00011434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005093  00000000  00000000  0002c550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001de0  00000000  00000000  000315e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000168a  00000000  00000000  000333c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bb41  00000000  00000000  00034a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000231fe  00000000  00000000  00060593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1823  00000000  00000000  00083791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00174fb4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000082ac  00000000  00000000  00174ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0017d2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008190 <__do_global_dtors_aux>:
 8008190:	b510      	push	{r4, lr}
 8008192:	4c05      	ldr	r4, [pc, #20]	@ (80081a8 <__do_global_dtors_aux+0x18>)
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	b933      	cbnz	r3, 80081a6 <__do_global_dtors_aux+0x16>
 8008198:	4b04      	ldr	r3, [pc, #16]	@ (80081ac <__do_global_dtors_aux+0x1c>)
 800819a:	b113      	cbz	r3, 80081a2 <__do_global_dtors_aux+0x12>
 800819c:	4804      	ldr	r0, [pc, #16]	@ (80081b0 <__do_global_dtors_aux+0x20>)
 800819e:	f3af 8000 	nop.w
 80081a2:	2301      	movs	r3, #1
 80081a4:	7023      	strb	r3, [r4, #0]
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	20002404 	.word	0x20002404
 80081ac:	00000000 	.word	0x00000000
 80081b0:	08013cd8 	.word	0x08013cd8

080081b4 <frame_dummy>:
 80081b4:	b508      	push	{r3, lr}
 80081b6:	4b03      	ldr	r3, [pc, #12]	@ (80081c4 <frame_dummy+0x10>)
 80081b8:	b11b      	cbz	r3, 80081c2 <frame_dummy+0xe>
 80081ba:	4903      	ldr	r1, [pc, #12]	@ (80081c8 <frame_dummy+0x14>)
 80081bc:	4803      	ldr	r0, [pc, #12]	@ (80081cc <frame_dummy+0x18>)
 80081be:	f3af 8000 	nop.w
 80081c2:	bd08      	pop	{r3, pc}
 80081c4:	00000000 	.word	0x00000000
 80081c8:	20002408 	.word	0x20002408
 80081cc:	08013cd8 	.word	0x08013cd8

080081d0 <strcmp>:
 80081d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081d8:	2a01      	cmp	r2, #1
 80081da:	bf28      	it	cs
 80081dc:	429a      	cmpcs	r2, r3
 80081de:	d0f7      	beq.n	80081d0 <strcmp>
 80081e0:	1ad0      	subs	r0, r2, r3
 80081e2:	4770      	bx	lr

080081e4 <strlen>:
 80081e4:	4603      	mov	r3, r0
 80081e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ea:	2a00      	cmp	r2, #0
 80081ec:	d1fb      	bne.n	80081e6 <strlen+0x2>
 80081ee:	1a18      	subs	r0, r3, r0
 80081f0:	3801      	subs	r0, #1
 80081f2:	4770      	bx	lr
	...

08008200 <memchr>:
 8008200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008204:	2a10      	cmp	r2, #16
 8008206:	db2b      	blt.n	8008260 <memchr+0x60>
 8008208:	f010 0f07 	tst.w	r0, #7
 800820c:	d008      	beq.n	8008220 <memchr+0x20>
 800820e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008212:	3a01      	subs	r2, #1
 8008214:	428b      	cmp	r3, r1
 8008216:	d02d      	beq.n	8008274 <memchr+0x74>
 8008218:	f010 0f07 	tst.w	r0, #7
 800821c:	b342      	cbz	r2, 8008270 <memchr+0x70>
 800821e:	d1f6      	bne.n	800820e <memchr+0xe>
 8008220:	b4f0      	push	{r4, r5, r6, r7}
 8008222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800822a:	f022 0407 	bic.w	r4, r2, #7
 800822e:	f07f 0700 	mvns.w	r7, #0
 8008232:	2300      	movs	r3, #0
 8008234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008238:	3c08      	subs	r4, #8
 800823a:	ea85 0501 	eor.w	r5, r5, r1
 800823e:	ea86 0601 	eor.w	r6, r6, r1
 8008242:	fa85 f547 	uadd8	r5, r5, r7
 8008246:	faa3 f587 	sel	r5, r3, r7
 800824a:	fa86 f647 	uadd8	r6, r6, r7
 800824e:	faa5 f687 	sel	r6, r5, r7
 8008252:	b98e      	cbnz	r6, 8008278 <memchr+0x78>
 8008254:	d1ee      	bne.n	8008234 <memchr+0x34>
 8008256:	bcf0      	pop	{r4, r5, r6, r7}
 8008258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800825c:	f002 0207 	and.w	r2, r2, #7
 8008260:	b132      	cbz	r2, 8008270 <memchr+0x70>
 8008262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008266:	3a01      	subs	r2, #1
 8008268:	ea83 0301 	eor.w	r3, r3, r1
 800826c:	b113      	cbz	r3, 8008274 <memchr+0x74>
 800826e:	d1f8      	bne.n	8008262 <memchr+0x62>
 8008270:	2000      	movs	r0, #0
 8008272:	4770      	bx	lr
 8008274:	3801      	subs	r0, #1
 8008276:	4770      	bx	lr
 8008278:	2d00      	cmp	r5, #0
 800827a:	bf06      	itte	eq
 800827c:	4635      	moveq	r5, r6
 800827e:	3803      	subeq	r0, #3
 8008280:	3807      	subne	r0, #7
 8008282:	f015 0f01 	tst.w	r5, #1
 8008286:	d107      	bne.n	8008298 <memchr+0x98>
 8008288:	3001      	adds	r0, #1
 800828a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800828e:	bf02      	ittt	eq
 8008290:	3001      	addeq	r0, #1
 8008292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8008296:	3001      	addeq	r0, #1
 8008298:	bcf0      	pop	{r4, r5, r6, r7}
 800829a:	3801      	subs	r0, #1
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop

080082a0 <__aeabi_ldivmod>:
 80082a0:	b97b      	cbnz	r3, 80082c2 <__aeabi_ldivmod+0x22>
 80082a2:	b972      	cbnz	r2, 80082c2 <__aeabi_ldivmod+0x22>
 80082a4:	2900      	cmp	r1, #0
 80082a6:	bfbe      	ittt	lt
 80082a8:	2000      	movlt	r0, #0
 80082aa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80082ae:	e006      	blt.n	80082be <__aeabi_ldivmod+0x1e>
 80082b0:	bf08      	it	eq
 80082b2:	2800      	cmpeq	r0, #0
 80082b4:	bf1c      	itt	ne
 80082b6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80082ba:	f04f 30ff 	movne.w	r0, #4294967295
 80082be:	f000 b9d3 	b.w	8008668 <__aeabi_idiv0>
 80082c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80082c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082ca:	2900      	cmp	r1, #0
 80082cc:	db09      	blt.n	80082e2 <__aeabi_ldivmod+0x42>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	db1a      	blt.n	8008308 <__aeabi_ldivmod+0x68>
 80082d2:	f000 f84d 	bl	8008370 <__udivmoddi4>
 80082d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082de:	b004      	add	sp, #16
 80082e0:	4770      	bx	lr
 80082e2:	4240      	negs	r0, r0
 80082e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	db1b      	blt.n	8008324 <__aeabi_ldivmod+0x84>
 80082ec:	f000 f840 	bl	8008370 <__udivmoddi4>
 80082f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082f8:	b004      	add	sp, #16
 80082fa:	4240      	negs	r0, r0
 80082fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008300:	4252      	negs	r2, r2
 8008302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008306:	4770      	bx	lr
 8008308:	4252      	negs	r2, r2
 800830a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800830e:	f000 f82f 	bl	8008370 <__udivmoddi4>
 8008312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800831a:	b004      	add	sp, #16
 800831c:	4240      	negs	r0, r0
 800831e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008322:	4770      	bx	lr
 8008324:	4252      	negs	r2, r2
 8008326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800832a:	f000 f821 	bl	8008370 <__udivmoddi4>
 800832e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008336:	b004      	add	sp, #16
 8008338:	4252      	negs	r2, r2
 800833a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800833e:	4770      	bx	lr

08008340 <__aeabi_uldivmod>:
 8008340:	b953      	cbnz	r3, 8008358 <__aeabi_uldivmod+0x18>
 8008342:	b94a      	cbnz	r2, 8008358 <__aeabi_uldivmod+0x18>
 8008344:	2900      	cmp	r1, #0
 8008346:	bf08      	it	eq
 8008348:	2800      	cmpeq	r0, #0
 800834a:	bf1c      	itt	ne
 800834c:	f04f 31ff 	movne.w	r1, #4294967295
 8008350:	f04f 30ff 	movne.w	r0, #4294967295
 8008354:	f000 b988 	b.w	8008668 <__aeabi_idiv0>
 8008358:	f1ad 0c08 	sub.w	ip, sp, #8
 800835c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008360:	f000 f806 	bl	8008370 <__udivmoddi4>
 8008364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800836c:	b004      	add	sp, #16
 800836e:	4770      	bx	lr

08008370 <__udivmoddi4>:
 8008370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008374:	9d08      	ldr	r5, [sp, #32]
 8008376:	468e      	mov	lr, r1
 8008378:	4604      	mov	r4, r0
 800837a:	4688      	mov	r8, r1
 800837c:	2b00      	cmp	r3, #0
 800837e:	d14a      	bne.n	8008416 <__udivmoddi4+0xa6>
 8008380:	428a      	cmp	r2, r1
 8008382:	4617      	mov	r7, r2
 8008384:	d962      	bls.n	800844c <__udivmoddi4+0xdc>
 8008386:	fab2 f682 	clz	r6, r2
 800838a:	b14e      	cbz	r6, 80083a0 <__udivmoddi4+0x30>
 800838c:	f1c6 0320 	rsb	r3, r6, #32
 8008390:	fa01 f806 	lsl.w	r8, r1, r6
 8008394:	fa20 f303 	lsr.w	r3, r0, r3
 8008398:	40b7      	lsls	r7, r6
 800839a:	ea43 0808 	orr.w	r8, r3, r8
 800839e:	40b4      	lsls	r4, r6
 80083a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80083a4:	fa1f fc87 	uxth.w	ip, r7
 80083a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80083ac:	0c23      	lsrs	r3, r4, #16
 80083ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80083b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80083b6:	fb01 f20c 	mul.w	r2, r1, ip
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d909      	bls.n	80083d2 <__udivmoddi4+0x62>
 80083be:	18fb      	adds	r3, r7, r3
 80083c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80083c4:	f080 80ea 	bcs.w	800859c <__udivmoddi4+0x22c>
 80083c8:	429a      	cmp	r2, r3
 80083ca:	f240 80e7 	bls.w	800859c <__udivmoddi4+0x22c>
 80083ce:	3902      	subs	r1, #2
 80083d0:	443b      	add	r3, r7
 80083d2:	1a9a      	subs	r2, r3, r2
 80083d4:	b2a3      	uxth	r3, r4
 80083d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80083da:	fb0e 2210 	mls	r2, lr, r0, r2
 80083de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80083e6:	459c      	cmp	ip, r3
 80083e8:	d909      	bls.n	80083fe <__udivmoddi4+0x8e>
 80083ea:	18fb      	adds	r3, r7, r3
 80083ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80083f0:	f080 80d6 	bcs.w	80085a0 <__udivmoddi4+0x230>
 80083f4:	459c      	cmp	ip, r3
 80083f6:	f240 80d3 	bls.w	80085a0 <__udivmoddi4+0x230>
 80083fa:	443b      	add	r3, r7
 80083fc:	3802      	subs	r0, #2
 80083fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008402:	eba3 030c 	sub.w	r3, r3, ip
 8008406:	2100      	movs	r1, #0
 8008408:	b11d      	cbz	r5, 8008412 <__udivmoddi4+0xa2>
 800840a:	40f3      	lsrs	r3, r6
 800840c:	2200      	movs	r2, #0
 800840e:	e9c5 3200 	strd	r3, r2, [r5]
 8008412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008416:	428b      	cmp	r3, r1
 8008418:	d905      	bls.n	8008426 <__udivmoddi4+0xb6>
 800841a:	b10d      	cbz	r5, 8008420 <__udivmoddi4+0xb0>
 800841c:	e9c5 0100 	strd	r0, r1, [r5]
 8008420:	2100      	movs	r1, #0
 8008422:	4608      	mov	r0, r1
 8008424:	e7f5      	b.n	8008412 <__udivmoddi4+0xa2>
 8008426:	fab3 f183 	clz	r1, r3
 800842a:	2900      	cmp	r1, #0
 800842c:	d146      	bne.n	80084bc <__udivmoddi4+0x14c>
 800842e:	4573      	cmp	r3, lr
 8008430:	d302      	bcc.n	8008438 <__udivmoddi4+0xc8>
 8008432:	4282      	cmp	r2, r0
 8008434:	f200 8105 	bhi.w	8008642 <__udivmoddi4+0x2d2>
 8008438:	1a84      	subs	r4, r0, r2
 800843a:	eb6e 0203 	sbc.w	r2, lr, r3
 800843e:	2001      	movs	r0, #1
 8008440:	4690      	mov	r8, r2
 8008442:	2d00      	cmp	r5, #0
 8008444:	d0e5      	beq.n	8008412 <__udivmoddi4+0xa2>
 8008446:	e9c5 4800 	strd	r4, r8, [r5]
 800844a:	e7e2      	b.n	8008412 <__udivmoddi4+0xa2>
 800844c:	2a00      	cmp	r2, #0
 800844e:	f000 8090 	beq.w	8008572 <__udivmoddi4+0x202>
 8008452:	fab2 f682 	clz	r6, r2
 8008456:	2e00      	cmp	r6, #0
 8008458:	f040 80a4 	bne.w	80085a4 <__udivmoddi4+0x234>
 800845c:	1a8a      	subs	r2, r1, r2
 800845e:	0c03      	lsrs	r3, r0, #16
 8008460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008464:	b280      	uxth	r0, r0
 8008466:	b2bc      	uxth	r4, r7
 8008468:	2101      	movs	r1, #1
 800846a:	fbb2 fcfe 	udiv	ip, r2, lr
 800846e:	fb0e 221c 	mls	r2, lr, ip, r2
 8008472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008476:	fb04 f20c 	mul.w	r2, r4, ip
 800847a:	429a      	cmp	r2, r3
 800847c:	d907      	bls.n	800848e <__udivmoddi4+0x11e>
 800847e:	18fb      	adds	r3, r7, r3
 8008480:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008484:	d202      	bcs.n	800848c <__udivmoddi4+0x11c>
 8008486:	429a      	cmp	r2, r3
 8008488:	f200 80e0 	bhi.w	800864c <__udivmoddi4+0x2dc>
 800848c:	46c4      	mov	ip, r8
 800848e:	1a9b      	subs	r3, r3, r2
 8008490:	fbb3 f2fe 	udiv	r2, r3, lr
 8008494:	fb0e 3312 	mls	r3, lr, r2, r3
 8008498:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800849c:	fb02 f404 	mul.w	r4, r2, r4
 80084a0:	429c      	cmp	r4, r3
 80084a2:	d907      	bls.n	80084b4 <__udivmoddi4+0x144>
 80084a4:	18fb      	adds	r3, r7, r3
 80084a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80084aa:	d202      	bcs.n	80084b2 <__udivmoddi4+0x142>
 80084ac:	429c      	cmp	r4, r3
 80084ae:	f200 80ca 	bhi.w	8008646 <__udivmoddi4+0x2d6>
 80084b2:	4602      	mov	r2, r0
 80084b4:	1b1b      	subs	r3, r3, r4
 80084b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80084ba:	e7a5      	b.n	8008408 <__udivmoddi4+0x98>
 80084bc:	f1c1 0620 	rsb	r6, r1, #32
 80084c0:	408b      	lsls	r3, r1
 80084c2:	fa22 f706 	lsr.w	r7, r2, r6
 80084c6:	431f      	orrs	r7, r3
 80084c8:	fa0e f401 	lsl.w	r4, lr, r1
 80084cc:	fa20 f306 	lsr.w	r3, r0, r6
 80084d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80084d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80084d8:	4323      	orrs	r3, r4
 80084da:	fa00 f801 	lsl.w	r8, r0, r1
 80084de:	fa1f fc87 	uxth.w	ip, r7
 80084e2:	fbbe f0f9 	udiv	r0, lr, r9
 80084e6:	0c1c      	lsrs	r4, r3, #16
 80084e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80084ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80084f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80084f4:	45a6      	cmp	lr, r4
 80084f6:	fa02 f201 	lsl.w	r2, r2, r1
 80084fa:	d909      	bls.n	8008510 <__udivmoddi4+0x1a0>
 80084fc:	193c      	adds	r4, r7, r4
 80084fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8008502:	f080 809c 	bcs.w	800863e <__udivmoddi4+0x2ce>
 8008506:	45a6      	cmp	lr, r4
 8008508:	f240 8099 	bls.w	800863e <__udivmoddi4+0x2ce>
 800850c:	3802      	subs	r0, #2
 800850e:	443c      	add	r4, r7
 8008510:	eba4 040e 	sub.w	r4, r4, lr
 8008514:	fa1f fe83 	uxth.w	lr, r3
 8008518:	fbb4 f3f9 	udiv	r3, r4, r9
 800851c:	fb09 4413 	mls	r4, r9, r3, r4
 8008520:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8008524:	fb03 fc0c 	mul.w	ip, r3, ip
 8008528:	45a4      	cmp	ip, r4
 800852a:	d908      	bls.n	800853e <__udivmoddi4+0x1ce>
 800852c:	193c      	adds	r4, r7, r4
 800852e:	f103 3eff 	add.w	lr, r3, #4294967295
 8008532:	f080 8082 	bcs.w	800863a <__udivmoddi4+0x2ca>
 8008536:	45a4      	cmp	ip, r4
 8008538:	d97f      	bls.n	800863a <__udivmoddi4+0x2ca>
 800853a:	3b02      	subs	r3, #2
 800853c:	443c      	add	r4, r7
 800853e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008542:	eba4 040c 	sub.w	r4, r4, ip
 8008546:	fba0 ec02 	umull	lr, ip, r0, r2
 800854a:	4564      	cmp	r4, ip
 800854c:	4673      	mov	r3, lr
 800854e:	46e1      	mov	r9, ip
 8008550:	d362      	bcc.n	8008618 <__udivmoddi4+0x2a8>
 8008552:	d05f      	beq.n	8008614 <__udivmoddi4+0x2a4>
 8008554:	b15d      	cbz	r5, 800856e <__udivmoddi4+0x1fe>
 8008556:	ebb8 0203 	subs.w	r2, r8, r3
 800855a:	eb64 0409 	sbc.w	r4, r4, r9
 800855e:	fa04 f606 	lsl.w	r6, r4, r6
 8008562:	fa22 f301 	lsr.w	r3, r2, r1
 8008566:	431e      	orrs	r6, r3
 8008568:	40cc      	lsrs	r4, r1
 800856a:	e9c5 6400 	strd	r6, r4, [r5]
 800856e:	2100      	movs	r1, #0
 8008570:	e74f      	b.n	8008412 <__udivmoddi4+0xa2>
 8008572:	fbb1 fcf2 	udiv	ip, r1, r2
 8008576:	0c01      	lsrs	r1, r0, #16
 8008578:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800857c:	b280      	uxth	r0, r0
 800857e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8008582:	463b      	mov	r3, r7
 8008584:	4638      	mov	r0, r7
 8008586:	463c      	mov	r4, r7
 8008588:	46b8      	mov	r8, r7
 800858a:	46be      	mov	lr, r7
 800858c:	2620      	movs	r6, #32
 800858e:	fbb1 f1f7 	udiv	r1, r1, r7
 8008592:	eba2 0208 	sub.w	r2, r2, r8
 8008596:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800859a:	e766      	b.n	800846a <__udivmoddi4+0xfa>
 800859c:	4601      	mov	r1, r0
 800859e:	e718      	b.n	80083d2 <__udivmoddi4+0x62>
 80085a0:	4610      	mov	r0, r2
 80085a2:	e72c      	b.n	80083fe <__udivmoddi4+0x8e>
 80085a4:	f1c6 0220 	rsb	r2, r6, #32
 80085a8:	fa2e f302 	lsr.w	r3, lr, r2
 80085ac:	40b7      	lsls	r7, r6
 80085ae:	40b1      	lsls	r1, r6
 80085b0:	fa20 f202 	lsr.w	r2, r0, r2
 80085b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80085b8:	430a      	orrs	r2, r1
 80085ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80085be:	b2bc      	uxth	r4, r7
 80085c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80085c4:	0c11      	lsrs	r1, r2, #16
 80085c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80085ca:	fb08 f904 	mul.w	r9, r8, r4
 80085ce:	40b0      	lsls	r0, r6
 80085d0:	4589      	cmp	r9, r1
 80085d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80085d6:	b280      	uxth	r0, r0
 80085d8:	d93e      	bls.n	8008658 <__udivmoddi4+0x2e8>
 80085da:	1879      	adds	r1, r7, r1
 80085dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80085e0:	d201      	bcs.n	80085e6 <__udivmoddi4+0x276>
 80085e2:	4589      	cmp	r9, r1
 80085e4:	d81f      	bhi.n	8008626 <__udivmoddi4+0x2b6>
 80085e6:	eba1 0109 	sub.w	r1, r1, r9
 80085ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80085ee:	fb09 f804 	mul.w	r8, r9, r4
 80085f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80085f6:	b292      	uxth	r2, r2
 80085f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80085fc:	4542      	cmp	r2, r8
 80085fe:	d229      	bcs.n	8008654 <__udivmoddi4+0x2e4>
 8008600:	18ba      	adds	r2, r7, r2
 8008602:	f109 31ff 	add.w	r1, r9, #4294967295
 8008606:	d2c4      	bcs.n	8008592 <__udivmoddi4+0x222>
 8008608:	4542      	cmp	r2, r8
 800860a:	d2c2      	bcs.n	8008592 <__udivmoddi4+0x222>
 800860c:	f1a9 0102 	sub.w	r1, r9, #2
 8008610:	443a      	add	r2, r7
 8008612:	e7be      	b.n	8008592 <__udivmoddi4+0x222>
 8008614:	45f0      	cmp	r8, lr
 8008616:	d29d      	bcs.n	8008554 <__udivmoddi4+0x1e4>
 8008618:	ebbe 0302 	subs.w	r3, lr, r2
 800861c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8008620:	3801      	subs	r0, #1
 8008622:	46e1      	mov	r9, ip
 8008624:	e796      	b.n	8008554 <__udivmoddi4+0x1e4>
 8008626:	eba7 0909 	sub.w	r9, r7, r9
 800862a:	4449      	add	r1, r9
 800862c:	f1a8 0c02 	sub.w	ip, r8, #2
 8008630:	fbb1 f9fe 	udiv	r9, r1, lr
 8008634:	fb09 f804 	mul.w	r8, r9, r4
 8008638:	e7db      	b.n	80085f2 <__udivmoddi4+0x282>
 800863a:	4673      	mov	r3, lr
 800863c:	e77f      	b.n	800853e <__udivmoddi4+0x1ce>
 800863e:	4650      	mov	r0, sl
 8008640:	e766      	b.n	8008510 <__udivmoddi4+0x1a0>
 8008642:	4608      	mov	r0, r1
 8008644:	e6fd      	b.n	8008442 <__udivmoddi4+0xd2>
 8008646:	443b      	add	r3, r7
 8008648:	3a02      	subs	r2, #2
 800864a:	e733      	b.n	80084b4 <__udivmoddi4+0x144>
 800864c:	f1ac 0c02 	sub.w	ip, ip, #2
 8008650:	443b      	add	r3, r7
 8008652:	e71c      	b.n	800848e <__udivmoddi4+0x11e>
 8008654:	4649      	mov	r1, r9
 8008656:	e79c      	b.n	8008592 <__udivmoddi4+0x222>
 8008658:	eba1 0109 	sub.w	r1, r1, r9
 800865c:	46c4      	mov	ip, r8
 800865e:	fbb1 f9fe 	udiv	r9, r1, lr
 8008662:	fb09 f804 	mul.w	r8, r9, r4
 8008666:	e7c4      	b.n	80085f2 <__udivmoddi4+0x282>

08008668 <__aeabi_idiv0>:
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop

0800866c <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 800866c:	b480      	push	{r7}
 800866e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8008670:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800867c:	bf0c      	ite	eq
 800867e:	2301      	moveq	r3, #1
 8008680:	2300      	movne	r3, #0
 8008682:	b2db      	uxtb	r3, r3
}
 8008684:	4618      	mov	r0, r3
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	e000e010 	.word	0xe000e010

08008694 <delay_us>:
#include "delay.h"
#include "stm32f4xx_ll_utils.h"
#include "stm32f4xx_ll_cortex.h"

void delay_us(uint8_t micro_seconds)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	71fb      	strb	r3, [r7, #7]
    uint32_t ticks = micro_seconds * (SystemCoreClock / 1000000);
 800869e:	79fb      	ldrb	r3, [r7, #7]
 80086a0:	4a0c      	ldr	r2, [pc, #48]	@ (80086d4 <delay_us+0x40>)
 80086a2:	6812      	ldr	r2, [r2, #0]
 80086a4:	490c      	ldr	r1, [pc, #48]	@ (80086d8 <delay_us+0x44>)
 80086a6:	fba1 1202 	umull	r1, r2, r1, r2
 80086aa:	0c92      	lsrs	r2, r2, #18
 80086ac:	fb02 f303 	mul.w	r3, r2, r3
 80086b0:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 80086b2:	e007      	b.n	80086c4 <delay_us+0x30>
    {
        if (LL_SYSTICK_IsActiveCounterFlag())
 80086b4:	f7ff ffda 	bl	800866c <LL_SYSTICK_IsActiveCounterFlag>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <delay_us+0x30>
        {
            ticks--;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1f4      	bne.n	80086b4 <delay_us+0x20>
        }
    }
}
 80086ca:	bf00      	nop
 80086cc:	bf00      	nop
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	2000232c 	.word	0x2000232c
 80086d8:	431bde83 	.word	0x431bde83

080086dc <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f043 0201 	orr.w	r2, r3, #1
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	601a      	str	r2, [r3, #0]
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f023 0201 	bic.w	r2, r3, #1
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	601a      	str	r2, [r3, #0]
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	601a      	str	r2, [r3, #0]
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	601a      	str	r2, [r3, #0]
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	f023 0201 	bic.w	r2, r3, #1
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	60da      	str	r2, [r3, #12]
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <LL_I2C_EnableIT_EVT>:
  * @rmtoll CR2          ITEVTEN       LL_I2C_EnableIT_EVT
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_EVT(I2C_TypeDef *I2Cx)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	605a      	str	r2, [r3, #4]
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <LL_I2C_EnableIT_BUF>:
  * @rmtoll CR2          ITBUFEN       LL_I2C_EnableIT_BUF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_BUF(I2C_TypeDef *I2Cx)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	605a      	str	r2, [r3, #4]
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <LL_I2C_DisableIT_BUF>:
  * @rmtoll CR2          ITBUFEN       LL_I2C_DisableIT_BUF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_BUF(I2C_TypeDef *I2Cx)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	605a      	str	r2, [r3, #4]
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <LL_I2C_EnableIT_ERR>:
  * @rmtoll CR2          ITERREN       LL_I2C_EnableIT_ERR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_ERR(I2C_TypeDef *I2Cx)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	605a      	str	r2, [r3, #4]
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800880c:	2b80      	cmp	r3, #128	@ 0x80
 800880e:	bf0c      	ite	eq
 8008810:	2301      	moveq	r3, #1
 8008812:	2300      	movne	r3, #0
 8008814:	b2db      	uxtb	r3, r3
}
 8008816:	4618      	mov	r0, r3
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8008822:	b480      	push	{r7}
 8008824:	b083      	sub	sp, #12
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008832:	2b40      	cmp	r3, #64	@ 0x40
 8008834:	bf0c      	ite	eq
 8008836:	2301      	moveq	r3, #1
 8008838:	2300      	movne	r3, #0
 800883a:	b2db      	uxtb	r3, r3
}
 800883c:	4618      	mov	r0, r3
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	f003 0302 	and.w	r3, r3, #2
 8008858:	2b02      	cmp	r3, #2
 800885a:	bf0c      	ite	eq
 800885c:	2301      	moveq	r3, #1
 800885e:	2300      	movne	r3, #0
 8008860:	b2db      	uxtb	r3, r3
}
 8008862:	4618      	mov	r0, r3
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <LL_I2C_IsActiveFlag_AF>:
  * @rmtoll SR1          AF            LL_I2C_IsActiveFlag_AF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_AF(I2C_TypeDef *I2Cx)
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_AF) == (I2C_SR1_AF));
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800887e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008882:	bf0c      	ite	eq
 8008884:	2301      	moveq	r3, #1
 8008886:	2300      	movne	r3, #0
 8008888:	b2db      	uxtb	r3, r3
}
 800888a:	4618      	mov	r0, r3
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll SR1          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_STOPF) == (I2C_SR1_STOPF));
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	f003 0310 	and.w	r3, r3, #16
 80088a6:	2b10      	cmp	r3, #16
 80088a8:	bf0c      	ite	eq
 80088aa:	2301      	moveq	r3, #1
 80088ac:	2300      	movne	r3, #0
 80088ae:	b2db      	uxtb	r3, r3
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <LL_I2C_IsActiveFlag_BERR>:
  * @rmtoll SR1          BERR          LL_I2C_IsActiveFlag_BERR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BERR(I2C_TypeDef *I2Cx)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BERR) == (I2C_SR1_BERR));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088d0:	bf0c      	ite	eq
 80088d2:	2301      	moveq	r3, #1
 80088d4:	2300      	movne	r3, #0
 80088d6:	b2db      	uxtb	r3, r3
}
 80088d8:	4618      	mov	r0, r3
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <LL_I2C_IsActiveFlag_ARLO>:
  * @rmtoll SR1          ARLO          LL_I2C_IsActiveFlag_ARLO
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ARLO(I2C_TypeDef *I2Cx)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ARLO) == (I2C_SR1_ARLO));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088f8:	bf0c      	ite	eq
 80088fa:	2301      	moveq	r3, #1
 80088fc:	2300      	movne	r3, #0
 80088fe:	b2db      	uxtb	r3, r3
}
 8008900:	4618      	mov	r0, r3
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <LL_I2C_IsActiveFlag_OVR>:
  * @rmtoll SR1          OVR           LL_I2C_IsActiveFlag_OVR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_OVR(I2C_TypeDef *I2Cx)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_OVR) == (I2C_SR1_OVR));
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800891c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008920:	bf0c      	ite	eq
 8008922:	2301      	moveq	r3, #1
 8008924:	2300      	movne	r3, #0
 8008926:	b2db      	uxtb	r3, r3
}
 8008928:	4618      	mov	r0, r3
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8008942:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800894a:	68fb      	ldr	r3, [r7, #12]
}
 800894c:	bf00      	nop
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <LL_I2C_ClearFlag_AF>:
  * @rmtoll SR1          AF            LL_I2C_ClearFlag_AF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_AF(I2C_TypeDef *I2Cx)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_AF);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	615a      	str	r2, [r3, #20]
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <LL_I2C_ClearFlag_STOP>:
  *         CR1          PE            LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8008986:	68fb      	ldr	r3, [r7, #12]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f043 0201 	orr.w	r2, r3, #1
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	601a      	str	r2, [r3, #0]
}
 8008994:	bf00      	nop
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <LL_I2C_ClearFlag_BERR>:
  * @rmtoll SR1          BERR          LL_I2C_ClearFlag_BERR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_BERR(I2C_TypeDef *I2Cx)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_BERR);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	615a      	str	r2, [r3, #20]
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <LL_I2C_ClearFlag_ARLO>:
  * @rmtoll SR1          ARLO          LL_I2C_ClearFlag_ARLO
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ARLO(I2C_TypeDef *I2Cx)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_ARLO);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	615a      	str	r2, [r3, #20]
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <LL_I2C_ClearFlag_OVR>:
  * @rmtoll SR1          OVR           LL_I2C_ClearFlag_OVR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_OVR(I2C_TypeDef *I2Cx)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_OVR);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	615a      	str	r2, [r3, #20]
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <LL_I2C_GetTransferDirection>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_I2C_DIRECTION_WRITE
  *         @arg @ref LL_I2C_DIRECTION_READ
  */
__STATIC_INLINE uint32_t LL_I2C_GetTransferDirection(I2C_TypeDef *I2Cx)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I2Cx->SR2, I2C_SR2_TRA));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	f003 0304 	and.w	r3, r3, #4
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	b2db      	uxtb	r3, r3
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008a4a:	78fb      	ldrb	r3, [r7, #3]
 8008a4c:	431a      	orrs	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	611a      	str	r2, [r3, #16]
}
 8008a52:	bf00      	nop
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
	...

08008a60 <I2C_ReInit>:

    while ((SysTick->VAL - start_tick) < ticks);
}

void I2C_ReInit(void)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
    LL_I2C_Disable(I2C_slave_obj.I2Cx);
 8008a66:	4b24      	ldr	r3, [pc, #144]	@ (8008af8 <I2C_ReInit+0x98>)
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7ff fe46 	bl	80086fc <LL_I2C_Disable>
    LL_I2C_DeInit(I2C_slave_obj.I2Cx);
 8008a70:	4b21      	ldr	r3, [pc, #132]	@ (8008af8 <I2C_ReInit+0x98>)
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f009 f9f3 	bl	8011e60 <LL_I2C_DeInit>

    LL_I2C_EnableClockStretching(I2C_slave_obj.I2Cx);
 8008a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8008af8 <I2C_ReInit+0x98>)
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7ff fe4c 	bl	800871c <LL_I2C_EnableClockStretching>
    LL_I2C_DisableGeneralCall(I2C_slave_obj.I2Cx);
 8008a84:	4b1c      	ldr	r3, [pc, #112]	@ (8008af8 <I2C_ReInit+0x98>)
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7ff fe57 	bl	800873c <LL_I2C_DisableGeneralCall>
    LL_I2C_DisableOwnAddress2(I2C_slave_obj.I2Cx);
 8008a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8008af8 <I2C_ReInit+0x98>)
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7ff fe62 	bl	800875c <LL_I2C_DisableOwnAddress2>

    LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8008a98:	463b      	mov	r3, r7
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	605a      	str	r2, [r3, #4]
 8008aa0:	609a      	str	r2, [r3, #8]
 8008aa2:	60da      	str	r2, [r3, #12]
 8008aa4:	611a      	str	r2, [r3, #16]
 8008aa6:	615a      	str	r2, [r3, #20]
    I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	603b      	str	r3, [r7, #0]
    I2C_InitStruct.ClockSpeed = 100000;
 8008aac:	4b13      	ldr	r3, [pc, #76]	@ (8008afc <I2C_ReInit+0x9c>)
 8008aae:	607b      	str	r3, [r7, #4]
    I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60bb      	str	r3, [r7, #8]
    I2C_InitStruct.OwnAddress1 = 36;  // 0x12
 8008ab4:	2324      	movs	r3, #36	@ 0x24
 8008ab6:	60fb      	str	r3, [r7, #12]
    I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8008ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008abc:	613b      	str	r3, [r7, #16]
    I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8008abe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008ac2:	617b      	str	r3, [r7, #20]
    LL_I2C_Init(I2C_slave_obj.I2Cx, &I2C_InitStruct);
 8008ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8008af8 <I2C_ReInit+0x98>)
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	463a      	mov	r2, r7
 8008aca:	4611      	mov	r1, r2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f009 fa01 	bl	8011ed4 <LL_I2C_Init>

    LL_I2C_EnableIT_EVT(I2C_slave_obj.I2Cx);
 8008ad2:	4b09      	ldr	r3, [pc, #36]	@ (8008af8 <I2C_ReInit+0x98>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff fe50 	bl	800877c <LL_I2C_EnableIT_EVT>
    LL_I2C_EnableIT_ERR(I2C_slave_obj.I2Cx);
 8008adc:	4b06      	ldr	r3, [pc, #24]	@ (8008af8 <I2C_ReInit+0x98>)
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff fe7b 	bl	80087dc <LL_I2C_EnableIT_ERR>
    LL_I2C_Enable(I2C_slave_obj.I2Cx);
 8008ae6:	4b04      	ldr	r3, [pc, #16]	@ (8008af8 <I2C_ReInit+0x98>)
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff fdf6 	bl	80086dc <LL_I2C_Enable>
}
 8008af0:	bf00      	nop
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	20002520 	.word	0x20002520
 8008afc:	000186a0 	.word	0x000186a0

08008b00 <i2c_slave_clear>:

        rx_busy_counter = 0;
    }
}

void i2c_slave_clear(void) {
 8008b00:	b480      	push	{r7}
 8008b02:	af00      	add	r7, sp, #0
    I2C_slave_obj.reg_address = 0;
 8008b04:	4b0a      	ldr	r3, [pc, #40]	@ (8008b30 <i2c_slave_clear+0x30>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	715a      	strb	r2, [r3, #5]
    I2C_slave_obj.curr_idx = NONE;
 8008b0a:	4b09      	ldr	r3, [pc, #36]	@ (8008b30 <i2c_slave_clear+0x30>)
 8008b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b10:	601a      	str	r2, [r3, #0]
    I2C_slave_obj.reg_addr_rcvd = 0;
 8008b12:	4b07      	ldr	r3, [pc, #28]	@ (8008b30 <i2c_slave_clear+0x30>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	711a      	strb	r2, [r3, #4]
    I2C_slave_obj.ready_to_answer = 0;
 8008b18:	4b05      	ldr	r3, [pc, #20]	@ (8008b30 <i2c_slave_clear+0x30>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	719a      	strb	r2, [r3, #6]
    I2C_slave_obj.ready_to_write = 0;
 8008b1e:	4b04      	ldr	r3, [pc, #16]	@ (8008b30 <i2c_slave_clear+0x30>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	71da      	strb	r2, [r3, #7]
}
 8008b24:	bf00      	nop
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	20002520 	.word	0x20002520

08008b34 <i2c_slave_init>:

int i2c_slave_init(I2C_TypeDef *I2Cx) {
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
    I2C_slave_obj.I2Cx = I2Cx;
 8008b3c:	4a09      	ldr	r2, [pc, #36]	@ (8008b64 <i2c_slave_init+0x30>)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6093      	str	r3, [r2, #8]
    I2C_Slave_Status = I2C_Status_OK;
 8008b42:	4b09      	ldr	r3, [pc, #36]	@ (8008b68 <i2c_slave_init+0x34>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	701a      	strb	r2, [r3, #0]
    i2c_slave_clear();
 8008b48:	f7ff ffda 	bl	8008b00 <i2c_slave_clear>
    memset(external_memory, 0, sizeof(external_memory));
 8008b4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b50:	2100      	movs	r1, #0
 8008b52:	4806      	ldr	r0, [pc, #24]	@ (8008b6c <i2c_slave_init+0x38>)
 8008b54:	f00a fc3a 	bl	80133cc <memset>

    return 0;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	20002520 	.word	0x20002520
 8008b68:	2000252c 	.word	0x2000252c
 8008b6c:	20002420 	.word	0x20002420

08008b70 <I2C_event_IRQ>:

//static uint8_t data_index = 0;

void I2C_event_IRQ(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b096      	sub	sp, #88	@ 0x58
 8008b74:	af00      	add	r7, sp, #0
	I2C_Slave_Status = I2C_Status_BUSY;
 8008b76:	4b78      	ldr	r3, [pc, #480]	@ (8008d58 <I2C_event_IRQ+0x1e8>)
 8008b78:	2201      	movs	r2, #1
 8008b7a:	701a      	strb	r2, [r3, #0]
    if (LL_I2C_IsActiveFlag_ADDR(I2C_slave_obj.I2Cx))
 8008b7c:	4b77      	ldr	r3, [pc, #476]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff fe61 	bl	8008848 <LL_I2C_IsActiveFlag_ADDR>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d01a      	beq.n	8008bc2 <I2C_event_IRQ+0x52>
    {
        LL_I2C_ClearFlag_ADDR(I2C_slave_obj.I2Cx);
 8008b8c:	4b73      	ldr	r3, [pc, #460]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff fecf 	bl	8008934 <LL_I2C_ClearFlag_ADDR>
        if (LL_I2C_GetTransferDirection(I2C_slave_obj.I2Cx) == LL_I2C_DIRECTION_WRITE)
 8008b96:	4b71      	ldr	r3, [pc, #452]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff ff30 	bl	8008a00 <LL_I2C_GetTransferDirection>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b04      	cmp	r3, #4
 8008ba4:	d108      	bne.n	8008bb8 <I2C_event_IRQ+0x48>
        {
            I2C_slave_obj.reg_addr_rcvd = 0;
 8008ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	711a      	strb	r2, [r3, #4]
            LL_I2C_EnableIT_BUF(I2C_slave_obj.I2Cx);
 8008bac:	4b6b      	ldr	r3, [pc, #428]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7ff fdf3 	bl	800879c <LL_I2C_EnableIT_BUF>
 8008bb6:	e004      	b.n	8008bc2 <I2C_event_IRQ+0x52>
        else
        {
//            I2C_slave_obj.curr_idx = reg_get_index(I2C_slave_obj.reg_address);
//            data_index = 0;
//	          UART_SendStringRing(UART_CMDLINE, "FREAL\r\n");
            LL_I2C_EnableIT_BUF(I2C_slave_obj.I2Cx);
 8008bb8:	4b68      	ldr	r3, [pc, #416]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff fded 	bl	800879c <LL_I2C_EnableIT_BUF>
        }
    }

    // Data Register Empty (Trans)
    if (LL_I2C_IsActiveFlag_TXE(I2C_slave_obj.I2Cx))
 8008bc2:	4b66      	ldr	r3, [pc, #408]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff fe18 	bl	80087fc <LL_I2C_IsActiveFlag_TXE>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d052      	beq.n	8008c78 <I2C_event_IRQ+0x108>
    {
        char buffer[30];
        uint8_t data_to_send = 0x00;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        snprintf(buffer, sizeof(buffer), "\r\nI2C Before Index:[%d]\r\n", I2C_slave_obj.curr_idx);
 8008bd8:	4b60      	ldr	r3, [pc, #384]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8008be0:	4a5f      	ldr	r2, [pc, #380]	@ (8008d60 <I2C_event_IRQ+0x1f0>)
 8008be2:	211e      	movs	r1, #30
 8008be4:	f00a fbbc 	bl	8013360 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8008be8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008bec:	4619      	mov	r1, r3
 8008bee:	485d      	ldr	r0, [pc, #372]	@ (8008d64 <I2C_event_IRQ+0x1f4>)
 8008bf0:	f000 fbd8 	bl	80093a4 <UART_SendStringRing>
		snprintf(buffer, sizeof(buffer), "\r\nI2C Index:[%d]\r\n", I2C_slave_obj.curr_idx);
 8008bf4:	4b59      	ldr	r3, [pc, #356]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8008bfc:	4a5a      	ldr	r2, [pc, #360]	@ (8008d68 <I2C_event_IRQ+0x1f8>)
 8008bfe:	211e      	movs	r1, #30
 8008c00:	f00a fbae 	bl	8013360 <sniprintf>
		UART_SendStringRing(UART_CMDLINE,buffer);
 8008c04:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4856      	ldr	r0, [pc, #344]	@ (8008d64 <I2C_event_IRQ+0x1f4>)
 8008c0c:	f000 fbca 	bl	80093a4 <UART_SendStringRing>
		data_to_send = g_registers[I2C_slave_obj.curr_idx].value;
 8008c10:	4b52      	ldr	r3, [pc, #328]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	4955      	ldr	r1, [pc, #340]	@ (8008d6c <I2C_event_IRQ+0x1fc>)
 8008c16:	4613      	mov	r3, r2
 8008c18:	005b      	lsls	r3, r3, #1
 8008c1a:	4413      	add	r3, r2
 8008c1c:	440b      	add	r3, r1
 8008c1e:	3302      	adds	r3, #2
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		snprintf(buffer, sizeof(buffer), "\r\nI2C GetDataIndex:[%d]\r\n", data_to_send);
 8008c26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c2a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8008c2e:	4a50      	ldr	r2, [pc, #320]	@ (8008d70 <I2C_event_IRQ+0x200>)
 8008c30:	211e      	movs	r1, #30
 8008c32:	f00a fb95 	bl	8013360 <sniprintf>
		UART_SendStringRing(UART_CMDLINE,buffer);
 8008c36:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4849      	ldr	r0, [pc, #292]	@ (8008d64 <I2C_event_IRQ+0x1f4>)
 8008c3e:	f000 fbb1 	bl	80093a4 <UART_SendStringRing>
        snprintf(buffer, sizeof(buffer), "\r\nI2C Response:[%d]\r\n", data_to_send);
 8008c42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c46:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8008c4a:	4a4a      	ldr	r2, [pc, #296]	@ (8008d74 <I2C_event_IRQ+0x204>)
 8008c4c:	211e      	movs	r1, #30
 8008c4e:	f00a fb87 	bl	8013360 <sniprintf>
        UART_SendStringRing(UART_CMDLINE,buffer);
 8008c52:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008c56:	4619      	mov	r1, r3
 8008c58:	4842      	ldr	r0, [pc, #264]	@ (8008d64 <I2C_event_IRQ+0x1f4>)
 8008c5a:	f000 fba3 	bl	80093a4 <UART_SendStringRing>
        LL_I2C_TransmitData8(I2C_slave_obj.I2Cx, data_to_send);
 8008c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008c66:	4611      	mov	r1, r2
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff fee4 	bl	8008a36 <LL_I2C_TransmitData8>
        LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8008c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7ff fda2 	bl	80087bc <LL_I2C_DisableIT_BUF>
    }
    // Data Register Not Empty (Recv)
    if (LL_I2C_IsActiveFlag_RXNE(I2C_slave_obj.I2Cx)) {
 8008c78:	4b38      	ldr	r3, [pc, #224]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7ff fdd0 	bl	8008822 <LL_I2C_IsActiveFlag_RXNE>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d04a      	beq.n	8008d1e <I2C_event_IRQ+0x1ae>
        uint8_t received = LL_I2C_ReceiveData8(I2C_slave_obj.I2Cx);
 8008c88:	4b34      	ldr	r3, [pc, #208]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7ff fec5 	bl	8008a1c <LL_I2C_ReceiveData8>
 8008c92:	4603      	mov	r3, r0
 8008c94:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        if (!I2C_slave_obj.reg_addr_rcvd)
 8008c98:	4b30      	ldr	r3, [pc, #192]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008c9a:	791b      	ldrb	r3, [r3, #4]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d11f      	bne.n	8008ce2 <I2C_event_IRQ+0x172>
        {
            I2C_slave_obj.reg_address = received;
 8008ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008ca4:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8008ca8:	7153      	strb	r3, [r2, #5]
            char buffer[50];
            snprintf(buffer, sizeof(buffer), "Address:[%d]\r\n", received);
 8008caa:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8008cae:	1d38      	adds	r0, r7, #4
 8008cb0:	4a31      	ldr	r2, [pc, #196]	@ (8008d78 <I2C_event_IRQ+0x208>)
 8008cb2:	2132      	movs	r1, #50	@ 0x32
 8008cb4:	f00a fb54 	bl	8013360 <sniprintf>
            UART_SendStringRing(UART_CMDLINE, buffer);
 8008cb8:	1d3b      	adds	r3, r7, #4
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4829      	ldr	r0, [pc, #164]	@ (8008d64 <I2C_event_IRQ+0x1f4>)
 8008cbe:	f000 fb71 	bl	80093a4 <UART_SendStringRing>
            I2C_slave_obj.reg_addr_rcvd = 1;
 8008cc2:	4b26      	ldr	r3, [pc, #152]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	711a      	strb	r2, [r3, #4]
            snprintf(buffer, sizeof(buffer), "GET INDEX:[%d]\r\n", I2C_slave_obj.curr_idx);
 8008cc8:	4b24      	ldr	r3, [pc, #144]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	1d38      	adds	r0, r7, #4
 8008cce:	4a2b      	ldr	r2, [pc, #172]	@ (8008d7c <I2C_event_IRQ+0x20c>)
 8008cd0:	2132      	movs	r1, #50	@ 0x32
 8008cd2:	f00a fb45 	bl	8013360 <sniprintf>
            UART_SendStringRing(UART_CMDLINE, buffer);
 8008cd6:	1d3b      	adds	r3, r7, #4
 8008cd8:	4619      	mov	r1, r3
 8008cda:	4822      	ldr	r0, [pc, #136]	@ (8008d64 <I2C_event_IRQ+0x1f4>)
 8008cdc:	f000 fb62 	bl	80093a4 <UART_SendStringRing>
 8008ce0:	e01d      	b.n	8008d1e <I2C_event_IRQ+0x1ae>
        }
        else
        {
            if (g_registers[I2C_slave_obj.curr_idx].access == FULL_ACCESS)
 8008ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	4921      	ldr	r1, [pc, #132]	@ (8008d6c <I2C_event_IRQ+0x1fc>)
 8008ce8:	4613      	mov	r3, r2
 8008cea:	005b      	lsls	r3, r3, #1
 8008cec:	4413      	add	r3, r2
 8008cee:	440b      	add	r3, r1
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d10a      	bne.n	8008d0e <I2C_event_IRQ+0x19e>
            {
                 g_registers[I2C_slave_obj.curr_idx].value = received;
 8008cf8:	4b18      	ldr	r3, [pc, #96]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	491b      	ldr	r1, [pc, #108]	@ (8008d6c <I2C_event_IRQ+0x1fc>)
 8008cfe:	4613      	mov	r3, r2
 8008d00:	005b      	lsls	r3, r3, #1
 8008d02:	4413      	add	r3, r2
 8008d04:	440b      	add	r3, r1
 8008d06:	3302      	adds	r3, #2
 8008d08:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8008d0c:	701a      	strb	r2, [r3, #0]
            }
            I2C_slave_obj.reg_addr_rcvd = 0;
 8008d0e:	4b13      	ldr	r3, [pc, #76]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	711a      	strb	r2, [r3, #4]
            LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8008d14:	4b11      	ldr	r3, [pc, #68]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7ff fd4f 	bl	80087bc <LL_I2C_DisableIT_BUF>
        }
    }

    // STOP condition detected
    if (LL_I2C_IsActiveFlag_STOP(I2C_slave_obj.I2Cx)) {
 8008d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7ff fdb7 	bl	8008896 <LL_I2C_IsActiveFlag_STOP>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00f      	beq.n	8008d4e <I2C_event_IRQ+0x1de>
        LL_I2C_ClearFlag_STOP(I2C_slave_obj.I2Cx);
 8008d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7ff fe20 	bl	8008978 <LL_I2C_ClearFlag_STOP>
        I2C_slave_obj.reg_addr_rcvd = 0;
 8008d38:	4b08      	ldr	r3, [pc, #32]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	711a      	strb	r2, [r3, #4]
//        I2C_slave_obj.curr_idx = NONE;
//        data_index = 0;
        LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8008d3e:	4b07      	ldr	r3, [pc, #28]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7ff fd3a 	bl	80087bc <LL_I2C_DisableIT_BUF>
        I2C_Slave_Status = I2C_Status_OK;
 8008d48:	4b03      	ldr	r3, [pc, #12]	@ (8008d58 <I2C_event_IRQ+0x1e8>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	701a      	strb	r2, [r3, #0]
    }
}
 8008d4e:	bf00      	nop
 8008d50:	3758      	adds	r7, #88	@ 0x58
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	2000252c 	.word	0x2000252c
 8008d5c:	20002520 	.word	0x20002520
 8008d60:	08013cf0 	.word	0x08013cf0
 8008d64:	40011000 	.word	0x40011000
 8008d68:	08013d0c 	.word	0x08013d0c
 8008d6c:	20002530 	.word	0x20002530
 8008d70:	08013d20 	.word	0x08013d20
 8008d74:	08013d3c 	.word	0x08013d3c
 8008d78:	08013d54 	.word	0x08013d54
 8008d7c:	08013d64 	.word	0x08013d64

08008d80 <I2C_error_IRQ>:

void I2C_error_IRQ(void) {
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
    // Handle errors
	UART_SendStringRing(UART_CMDLINE,"I2C ERROR!!!\r\n");
 8008d84:	4921      	ldr	r1, [pc, #132]	@ (8008e0c <I2C_error_IRQ+0x8c>)
 8008d86:	4822      	ldr	r0, [pc, #136]	@ (8008e10 <I2C_error_IRQ+0x90>)
 8008d88:	f000 fb0c 	bl	80093a4 <UART_SendStringRing>
	I2C_Slave_Status = I2C_Status_OK;
 8008d8c:	4b21      	ldr	r3, [pc, #132]	@ (8008e14 <I2C_error_IRQ+0x94>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	701a      	strb	r2, [r3, #0]
    if (LL_I2C_IsActiveFlag_BERR(I2C_slave_obj.I2Cx)) {
 8008d92:	4b21      	ldr	r3, [pc, #132]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7ff fd90 	bl	80088bc <LL_I2C_IsActiveFlag_BERR>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d004      	beq.n	8008dac <I2C_error_IRQ+0x2c>

        LL_I2C_ClearFlag_BERR(I2C_slave_obj.I2Cx);
 8008da2:	4b1d      	ldr	r3, [pc, #116]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7ff fdfa 	bl	80089a0 <LL_I2C_ClearFlag_BERR>
    }

    if (LL_I2C_IsActiveFlag_ARLO(I2C_slave_obj.I2Cx)) {
 8008dac:	4b1a      	ldr	r3, [pc, #104]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff fd97 	bl	80088e4 <LL_I2C_IsActiveFlag_ARLO>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d004      	beq.n	8008dc6 <I2C_error_IRQ+0x46>
        LL_I2C_ClearFlag_ARLO(I2C_slave_obj.I2Cx);
 8008dbc:	4b16      	ldr	r3, [pc, #88]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7ff fdfd 	bl	80089c0 <LL_I2C_ClearFlag_ARLO>
    }

    if (LL_I2C_IsActiveFlag_AF(I2C_slave_obj.I2Cx)) {
 8008dc6:	4b14      	ldr	r3, [pc, #80]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff fd4f 	bl	800886e <LL_I2C_IsActiveFlag_AF>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d004      	beq.n	8008de0 <I2C_error_IRQ+0x60>
        LL_I2C_ClearFlag_AF(I2C_slave_obj.I2Cx);
 8008dd6:	4b10      	ldr	r3, [pc, #64]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff fdbc 	bl	8008958 <LL_I2C_ClearFlag_AF>
    }

    if (LL_I2C_IsActiveFlag_OVR(I2C_slave_obj.I2Cx)) {
 8008de0:	4b0d      	ldr	r3, [pc, #52]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7ff fd91 	bl	800890c <LL_I2C_IsActiveFlag_OVR>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d004      	beq.n	8008dfa <I2C_error_IRQ+0x7a>
        LL_I2C_ClearFlag_OVR(I2C_slave_obj.I2Cx);
 8008df0:	4b09      	ldr	r3, [pc, #36]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7ff fdf3 	bl	80089e0 <LL_I2C_ClearFlag_OVR>
    }
    I2C_ReInit();
 8008dfa:	f7ff fe31 	bl	8008a60 <I2C_ReInit>
    i2c_slave_init(I2C_slave_obj.I2Cx);
 8008dfe:	4b06      	ldr	r3, [pc, #24]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7ff fe96 	bl	8008b34 <i2c_slave_init>
}
 8008e08:	bf00      	nop
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	08013d78 	.word	0x08013d78
 8008e10:	40011000 	.word	0x40011000
 8008e14:	2000252c 	.word	0x2000252c
 8008e18:	20002520 	.word	0x20002520

08008e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4603      	mov	r3, r0
 8008e24:	6039      	str	r1, [r7, #0]
 8008e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	db0a      	blt.n	8008e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	490c      	ldr	r1, [pc, #48]	@ (8008e68 <__NVIC_SetPriority+0x4c>)
 8008e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e3a:	0112      	lsls	r2, r2, #4
 8008e3c:	b2d2      	uxtb	r2, r2
 8008e3e:	440b      	add	r3, r1
 8008e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008e44:	e00a      	b.n	8008e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	4908      	ldr	r1, [pc, #32]	@ (8008e6c <__NVIC_SetPriority+0x50>)
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	f003 030f 	and.w	r3, r3, #15
 8008e52:	3b04      	subs	r3, #4
 8008e54:	0112      	lsls	r2, r2, #4
 8008e56:	b2d2      	uxtb	r2, r2
 8008e58:	440b      	add	r3, r1
 8008e5a:	761a      	strb	r2, [r3, #24]
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	e000e100 	.word	0xe000e100
 8008e6c:	e000ed00 	.word	0xe000ed00

08008e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e80:	d301      	bcc.n	8008e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008e82:	2301      	movs	r3, #1
 8008e84:	e00f      	b.n	8008ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008e86:	4a0a      	ldr	r2, [pc, #40]	@ (8008eb0 <SysTick_Config+0x40>)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008e8e:	210f      	movs	r1, #15
 8008e90:	f04f 30ff 	mov.w	r0, #4294967295
 8008e94:	f7ff ffc2 	bl	8008e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008e98:	4b05      	ldr	r3, [pc, #20]	@ (8008eb0 <SysTick_Config+0x40>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008e9e:	4b04      	ldr	r3, [pc, #16]	@ (8008eb0 <SysTick_Config+0x40>)
 8008ea0:	2207      	movs	r2, #7
 8008ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	e000e010 	.word	0xe000e010

08008eb4 <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8008eb8:	4b05      	ldr	r3, [pc, #20]	@ (8008ed0 <systick_timer_start+0x1c>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a04      	ldr	r2, [pc, #16]	@ (8008ed0 <systick_timer_start+0x1c>)
 8008ebe:	f043 0301 	orr.w	r3, r3, #1
 8008ec2:	6013      	str	r3, [r2, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	e000e010 	.word	0xe000e010

08008ed4 <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 8008ed8:	4b05      	ldr	r3, [pc, #20]	@ (8008ef0 <systick_timer_init+0x1c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a05      	ldr	r2, [pc, #20]	@ (8008ef4 <systick_timer_init+0x20>)
 8008ede:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee2:	099b      	lsrs	r3, r3, #6
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff ffc3 	bl	8008e70 <SysTick_Config>
}
 8008eea:	bf00      	nop
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	2000232c 	.word	0x2000232c
 8008ef4:	10624dd3 	.word	0x10624dd3

08008ef8 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0302 	and.w	r3, r3, #2
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	bf0c      	ite	eq
 8008f0c:	2301      	moveq	r3, #1
 8008f0e:	2300      	movne	r3, #0
 8008f10:	b2db      	uxtb	r3, r3
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b083      	sub	sp, #12
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0304 	and.w	r3, r3, #4
 8008f2e:	2b04      	cmp	r3, #4
 8008f30:	bf0c      	ite	eq
 8008f32:	2301      	moveq	r3, #1
 8008f34:	2300      	movne	r3, #0
 8008f36:	b2db      	uxtb	r3, r3
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	bf0c      	ite	eq
 8008f58:	2301      	moveq	r3, #1
 8008f5a:	2300      	movne	r3, #0
 8008f5c:	b2db      	uxtb	r3, r3
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0320 	and.w	r3, r3, #32
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	bf0c      	ite	eq
 8008f7e:	2301      	moveq	r3, #1
 8008f80:	2300      	movne	r3, #0
 8008f82:	b2db      	uxtb	r3, r3
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fa0:	2b80      	cmp	r3, #128	@ 0x80
 8008fa2:	bf0c      	ite	eq
 8008fa4:	2301      	moveq	r3, #1
 8008fa6:	2300      	movne	r3, #0
 8008fa8:	b2db      	uxtb	r3, r3
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b085      	sub	sp, #20
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
}
 8008fce:	bf00      	nop
 8008fd0:	3714      	adds	r7, #20
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b085      	sub	sp, #20
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
}
 8008ff2:	bf00      	nop
 8008ff4:	3714      	adds	r7, #20
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b085      	sub	sp, #20
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800900c:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8009014:	68fb      	ldr	r3, [r7, #12]
}
 8009016:	bf00      	nop
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8009022:	b480      	push	{r7}
 8009024:	b089      	sub	sp, #36	@ 0x24
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	330c      	adds	r3, #12
 800902e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	e853 3f00 	ldrex	r3, [r3]
 8009036:	60bb      	str	r3, [r7, #8]
   return(result);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	f043 0320 	orr.w	r3, r3, #32
 800903e:	61fb      	str	r3, [r7, #28]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	330c      	adds	r3, #12
 8009044:	69fa      	ldr	r2, [r7, #28]
 8009046:	61ba      	str	r2, [r7, #24]
 8009048:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	6979      	ldr	r1, [r7, #20]
 800904c:	69ba      	ldr	r2, [r7, #24]
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	613b      	str	r3, [r7, #16]
   return(result);
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e7      	bne.n	800902a <LL_USART_EnableIT_RXNE+0x8>
}
 800905a:	bf00      	nop
 800905c:	bf00      	nop
 800905e:	3724      	adds	r7, #36	@ 0x24
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8009068:	b480      	push	{r7}
 800906a:	b089      	sub	sp, #36	@ 0x24
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	330c      	adds	r3, #12
 8009074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	e853 3f00 	ldrex	r3, [r3]
 800907c:	60bb      	str	r3, [r7, #8]
   return(result);
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009084:	61fb      	str	r3, [r7, #28]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	330c      	adds	r3, #12
 800908a:	69fa      	ldr	r2, [r7, #28]
 800908c:	61ba      	str	r2, [r7, #24]
 800908e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009090:	6979      	ldr	r1, [r7, #20]
 8009092:	69ba      	ldr	r2, [r7, #24]
 8009094:	e841 2300 	strex	r3, r2, [r1]
 8009098:	613b      	str	r3, [r7, #16]
   return(result);
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1e7      	bne.n	8009070 <LL_USART_EnableIT_TXE+0x8>
}
 80090a0:	bf00      	nop
 80090a2:	bf00      	nop
 80090a4:	3724      	adds	r7, #36	@ 0x24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr

080090ae <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b089      	sub	sp, #36	@ 0x24
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	330c      	adds	r3, #12
 80090ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	e853 3f00 	ldrex	r3, [r3]
 80090c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	f023 0320 	bic.w	r3, r3, #32
 80090ca:	61fb      	str	r3, [r7, #28]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	330c      	adds	r3, #12
 80090d0:	69fa      	ldr	r2, [r7, #28]
 80090d2:	61ba      	str	r2, [r7, #24]
 80090d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d6:	6979      	ldr	r1, [r7, #20]
 80090d8:	69ba      	ldr	r2, [r7, #24]
 80090da:	e841 2300 	strex	r3, r2, [r1]
 80090de:	613b      	str	r3, [r7, #16]
   return(result);
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e7      	bne.n	80090b6 <LL_USART_DisableIT_RXNE+0x8>
}
 80090e6:	bf00      	nop
 80090e8:	bf00      	nop
 80090ea:	3724      	adds	r7, #36	@ 0x24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b089      	sub	sp, #36	@ 0x24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	330c      	adds	r3, #12
 8009100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	e853 3f00 	ldrex	r3, [r3]
 8009108:	60bb      	str	r3, [r7, #8]
   return(result);
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009110:	61fb      	str	r3, [r7, #28]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	330c      	adds	r3, #12
 8009116:	69fa      	ldr	r2, [r7, #28]
 8009118:	61ba      	str	r2, [r7, #24]
 800911a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	6979      	ldr	r1, [r7, #20]
 800911e:	69ba      	ldr	r2, [r7, #24]
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	613b      	str	r3, [r7, #16]
   return(result);
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e7      	bne.n	80090fc <LL_USART_DisableIT_TXE+0x8>
}
 800912c:	bf00      	nop
 800912e:	bf00      	nop
 8009130:	3724      	adds	r7, #36	@ 0x24
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	f003 0320 	and.w	r3, r3, #32
 800914a:	2b20      	cmp	r3, #32
 800914c:	bf0c      	ite	eq
 800914e:	2301      	moveq	r3, #1
 8009150:	2300      	movne	r3, #0
 8009152:	b2db      	uxtb	r3, r3
}
 8009154:	4618      	mov	r0, r3
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009170:	2b80      	cmp	r3, #128	@ 0x80
 8009172:	bf0c      	ite	eq
 8009174:	2301      	moveq	r3, #1
 8009176:	2300      	movne	r3, #0
 8009178:	b2db      	uxtb	r3, r3
}
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8009186:	b480      	push	{r7}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	b2db      	uxtb	r3, r3
}
 8009194:	4618      	mov	r0, r3
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80091ac:	78fa      	ldrb	r2, [r7, #3]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	605a      	str	r2, [r3, #4]
}
 80091b2:	bf00      	nop
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
	...

080091c0 <get_usart_buffer>:
    }
};

void store_char(unsigned char c, ring_buffer *buffer, USART_TypeDef *uart);

USART_Buffer* get_usart_buffer(USART_TypeDef *uart) {
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < USART_COUNT; i++) {
 80091c8:	2300      	movs	r3, #0
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	e015      	b.n	80091fa <get_usart_buffer+0x3a>
        if (usart_buffers[i].uart == uart) {
 80091ce:	4910      	ldr	r1, [pc, #64]	@ (8009210 <get_usart_buffer+0x50>)
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	4613      	mov	r3, r2
 80091d4:	00db      	lsls	r3, r3, #3
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	440b      	add	r3, r1
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d107      	bne.n	80091f4 <get_usart_buffer+0x34>
            return &usart_buffers[i];
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	4613      	mov	r3, r2
 80091e8:	00db      	lsls	r3, r3, #3
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4a08      	ldr	r2, [pc, #32]	@ (8009210 <get_usart_buffer+0x50>)
 80091f0:	4413      	add	r3, r2
 80091f2:	e006      	b.n	8009202 <get_usart_buffer+0x42>
    for (int i = 0; i < USART_COUNT; i++) {
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	3301      	adds	r3, #1
 80091f8:	60fb      	str	r3, [r7, #12]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	dde6      	ble.n	80091ce <get_usart_buffer+0xe>
        }
    }
    return NULL;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	20000000 	.word	0x20000000

08009214 <store_char>:
        LL_USART_EnableIT_ERROR(buffer->uart);
        LL_USART_EnableIT_RXNE(buffer->uart);
    }
}

void store_char(unsigned char c, ring_buffer *buffer, USART_TypeDef *uart) {
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	4603      	mov	r3, r0
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
 8009220:	73fb      	strb	r3, [r7, #15]
    int i = (buffer->head + 1) % buffer->size;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	3301      	adds	r3, #1
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	68d2      	ldr	r2, [r2, #12]
 800922c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009230:	fb01 f202 	mul.w	r2, r1, r2
 8009234:	1a9b      	subs	r3, r3, r2
 8009236:	617b      	str	r3, [r7, #20]

    if (i != buffer->tail) {
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	689a      	ldr	r2, [r3, #8]
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	429a      	cmp	r2, r3
 8009240:	d00f      	beq.n	8009262 <store_char+0x4e>
        ATOMIC_BLOCK_START(uart);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff ff33 	bl	80090ae <LL_USART_DisableIT_RXNE>
        buffer->buffer[buffer->head] = c;
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	4413      	add	r3, r2
 8009252:	7bfa      	ldrb	r2, [r7, #15]
 8009254:	701a      	strb	r2, [r3, #0]
        buffer->head = i;
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	605a      	str	r2, [r3, #4]
        ATOMIC_BLOCK_END(uart);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7ff fee0 	bl	8009022 <LL_USART_EnableIT_RXNE>
    }
}
 8009262:	bf00      	nop
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <UART_ReadRing>:

int UART_ReadRing(USART_TypeDef *uart) {
 800926a:	b580      	push	{r7, lr}
 800926c:	b086      	sub	sp, #24
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
    USART_Buffer *buffer = get_usart_buffer(uart);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff ffa4 	bl	80091c0 <get_usart_buffer>
 8009278:	6178      	str	r0, [r7, #20]
    if (!buffer) return -1;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d102      	bne.n	8009286 <UART_ReadRing+0x1c>
 8009280:	f04f 33ff 	mov.w	r3, #4294967295
 8009284:	e025      	b.n	80092d2 <UART_ReadRing+0x68>

    ring_buffer *rx_buffer = &buffer->rx_buffer;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	3304      	adds	r3, #4
 800928a:	613b      	str	r3, [r7, #16]

    if (rx_buffer->head == rx_buffer->tail) {
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	429a      	cmp	r2, r3
 8009296:	d102      	bne.n	800929e <UART_ReadRing+0x34>
        return -1;
 8009298:	f04f 33ff 	mov.w	r3, #4294967295
 800929c:	e019      	b.n	80092d2 <UART_ReadRing+0x68>
    } else {
        ATOMIC_BLOCK_START(uart);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7ff ff05 	bl	80090ae <LL_USART_DisableIT_RXNE>
        unsigned char c = rx_buffer->buffer[rx_buffer->tail];
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	4413      	add	r3, r2
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	73fb      	strb	r3, [r7, #15]
        rx_buffer->tail = (rx_buffer->tail + 1) % rx_buffer->size;
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	3301      	adds	r3, #1
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	68d2      	ldr	r2, [r2, #12]
 80092bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80092c0:	fb01 f202 	mul.w	r2, r1, r2
 80092c4:	1a9a      	subs	r2, r3, r2
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	609a      	str	r2, [r3, #8]
        ATOMIC_BLOCK_END(uart);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7ff fea9 	bl	8009022 <LL_USART_EnableIT_RXNE>
        return c;
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
    }
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3718      	adds	r7, #24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <UART_WriteRing>:

void UART_WriteRing(USART_TypeDef *uart, int c) {
 80092da:	b580      	push	{r7, lr}
 80092dc:	b086      	sub	sp, #24
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	6039      	str	r1, [r7, #0]
    USART_Buffer *buffer = get_usart_buffer(uart);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7ff ff6b 	bl	80091c0 <get_usart_buffer>
 80092ea:	6178      	str	r0, [r7, #20]
    if (!buffer || c < 0) return;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d02b      	beq.n	800934a <UART_WriteRing+0x70>
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	db28      	blt.n	800934a <UART_WriteRing+0x70>

    ring_buffer *tx_buffer = &buffer->tx_buffer;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	3314      	adds	r3, #20
 80092fc:	613b      	str	r3, [r7, #16]
    int i = (tx_buffer->head + 1) % tx_buffer->size;
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	3301      	adds	r3, #1
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	68d2      	ldr	r2, [r2, #12]
 8009308:	fbb3 f1f2 	udiv	r1, r3, r2
 800930c:	fb01 f202 	mul.w	r2, r1, r2
 8009310:	1a9b      	subs	r3, r3, r2
 8009312:	60fb      	str	r3, [r7, #12]

    ATOMIC_BLOCK_START(uart);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7ff feca 	bl	80090ae <LL_USART_DisableIT_RXNE>
    while (i == tx_buffer->tail);
 800931a:	bf00      	nop
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	689a      	ldr	r2, [r3, #8]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	429a      	cmp	r2, r3
 8009324:	d0fa      	beq.n	800931c <UART_WriteRing+0x42>

    tx_buffer->buffer[tx_buffer->head] = (uint8_t)c;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	4413      	add	r3, r2
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	b2d2      	uxtb	r2, r2
 8009334:	701a      	strb	r2, [r3, #0]
    tx_buffer->head = i;
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	605a      	str	r2, [r3, #4]
    ATOMIC_BLOCK_END(uart);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7ff fe70 	bl	8009022 <LL_USART_EnableIT_RXNE>

    LL_USART_EnableIT_TXE(uart);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff fe90 	bl	8009068 <LL_USART_EnableIT_TXE>
 8009348:	e000      	b.n	800934c <UART_WriteRing+0x72>
    if (!buffer || c < 0) return;
 800934a:	bf00      	nop
}
 800934c:	3718      	adds	r7, #24
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(USART_TypeDef *uart) {
 8009352:	b580      	push	{r7, lr}
 8009354:	b084      	sub	sp, #16
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
    USART_Buffer *buffer = get_usart_buffer(uart);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7ff ff30 	bl	80091c0 <get_usart_buffer>
 8009360:	60f8      	str	r0, [r7, #12]
    if (!buffer) return 0;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <IsDataAvailable+0x1a>
 8009368:	2300      	movs	r3, #0
 800936a:	e017      	b.n	800939c <IsDataAvailable+0x4a>

    ring_buffer *rx_buffer = &buffer->rx_buffer;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3304      	adds	r3, #4
 8009370:	60bb      	str	r3, [r7, #8]
    return (uint16_t)(rx_buffer->size + rx_buffer->head - rx_buffer->tail) % rx_buffer->size;
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	b29a      	uxth	r2, r3
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	b29b      	uxth	r3, r3
 800937e:	4413      	add	r3, r2
 8009380:	b29a      	uxth	r2, r3
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	b29b      	uxth	r3, r3
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	b29b      	uxth	r3, r3
 800938c:	461a      	mov	r2, r3
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	fbb2 f1f3 	udiv	r1, r2, r3
 8009396:	fb01 f303 	mul.w	r3, r1, r3
 800939a:	1ad3      	subs	r3, r2, r3
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <UART_SendStringRing>:
/* sends the string to the uart
 */
void UART_SendStringRing (USART_TypeDef *uart, const char *s)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
	while(*s) UART_WriteRing(uart, *s++);
 80093ae:	e007      	b.n	80093c0 <UART_SendStringRing+0x1c>
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	1c5a      	adds	r2, r3, #1
 80093b4:	603a      	str	r2, [r7, #0]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7ff ff8d 	bl	80092da <UART_WriteRing>
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1f3      	bne.n	80093b0 <UART_SendStringRing+0xc>
}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <UART_Flush_RingRx>:
//    va_end(args);
//
//    UART_SendStringRing(huart, buffer);
//}

void UART_Flush_RingRx(USART_TypeDef *uart) {
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b084      	sub	sp, #16
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
    USART_Buffer *buffer = get_usart_buffer(uart);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7ff fef0 	bl	80091c0 <get_usart_buffer>
 80093e0:	60f8      	str	r0, [r7, #12]
    if (!buffer) return;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d011      	beq.n	800940c <UART_Flush_RingRx+0x3a>

    ring_buffer *rx_buffer = &buffer->rx_buffer;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3304      	adds	r3, #4
 80093ec:	60bb      	str	r3, [r7, #8]
    memset(rx_buffer->buffer, '\0', rx_buffer->size);
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	6818      	ldr	r0, [r3, #0]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	461a      	mov	r2, r3
 80093f8:	2100      	movs	r1, #0
 80093fa:	f009 ffe7 	bl	80133cc <memset>
    rx_buffer->head = 0;
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2200      	movs	r2, #0
 8009402:	605a      	str	r2, [r3, #4]
    rx_buffer->tail = 0;
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2200      	movs	r2, #0
 8009408:	609a      	str	r2, [r3, #8]
 800940a:	e000      	b.n	800940e <UART_Flush_RingRx+0x3c>
    if (!buffer) return;
 800940c:	bf00      	nop
}
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <UART_Ring_ISR>:
    memset(tx_buffer->buffer, '\0', tx_buffer->size);
    tx_buffer->head = 0;
    tx_buffer->tail = 0;
}

void UART_Ring_ISR(USART_TypeDef *uart) {
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
    USART_Buffer *buffer = get_usart_buffer(uart);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff fecf 	bl	80091c0 <get_usart_buffer>
 8009422:	6178      	str	r0, [r7, #20]
    if (!buffer) return;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d068      	beq.n	80094fc <UART_Ring_ISR+0xe8>

    ring_buffer *rx_buffer = &buffer->rx_buffer;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	3304      	adds	r3, #4
 800942e:	613b      	str	r3, [r7, #16]
    ring_buffer *tx_buffer = &buffer->tx_buffer;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	3314      	adds	r3, #20
 8009434:	60fb      	str	r3, [r7, #12]

    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) && (LL_USART_IsEnabledIT_RXNE(uart) != RESET)) {
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7ff fd97 	bl	8008f6a <LL_USART_IsActiveFlag_RXNE>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d02d      	beq.n	800949e <UART_Ring_ISR+0x8a>
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7ff fe79 	bl	800913a <LL_USART_IsEnabledIT_RXNE>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d027      	beq.n	800949e <UART_Ring_ISR+0x8a>
        unsigned char data = LL_USART_ReceiveData8(uart);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7ff fe99 	bl	8009186 <LL_USART_ReceiveData8>
 8009454:	4603      	mov	r3, r0
 8009456:	72fb      	strb	r3, [r7, #11]

        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7ff fd73 	bl	8008f44 <LL_USART_IsActiveFlag_ORE>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10b      	bne.n	800947c <UART_Ring_ISR+0x68>
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7ff fd47 	bl	8008ef8 <LL_USART_IsActiveFlag_FE>
 800946a:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 800946c:	2b00      	cmp	r3, #0
 800946e:	d105      	bne.n	800947c <UART_Ring_ISR+0x68>
            (LL_USART_IsActiveFlag_NE(uart) != RESET)) {
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff fd54 	bl	8008f1e <LL_USART_IsActiveFlag_NE>
 8009476:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8009478:	2b00      	cmp	r3, #0
 800947a:	d009      	beq.n	8009490 <UART_Ring_ISR+0x7c>
            LL_USART_ClearFlag_ORE(uart);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff fdbe 	bl	8008ffe <LL_USART_ClearFlag_ORE>
            LL_USART_ClearFlag_FE(uart);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f7ff fd97 	bl	8008fb6 <LL_USART_ClearFlag_FE>
            LL_USART_ClearFlag_NE(uart);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f7ff fda6 	bl	8008fda <LL_USART_ClearFlag_NE>
        } else {
        	store_char(data, rx_buffer, uart);
        }
        return;
 800948e:	e036      	b.n	80094fe <UART_Ring_ISR+0xea>
        	store_char(data, rx_buffer, uart);
 8009490:	7afb      	ldrb	r3, [r7, #11]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	6939      	ldr	r1, [r7, #16]
 8009496:	4618      	mov	r0, r3
 8009498:	f7ff febc 	bl	8009214 <store_char>
        return;
 800949c:	e02f      	b.n	80094fe <UART_Ring_ISR+0xea>
    }

    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) && (LL_USART_IsEnabledIT_TXE(uart) != RESET)) {
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff fd76 	bl	8008f90 <LL_USART_IsActiveFlag_TXE>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d029      	beq.n	80094fe <UART_Ring_ISR+0xea>
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7ff fe58 	bl	8009160 <LL_USART_IsEnabledIT_TXE>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d023      	beq.n	80094fe <UART_Ring_ISR+0xea>
        if (tx_buffer->head == tx_buffer->tail) {
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	685a      	ldr	r2, [r3, #4]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d103      	bne.n	80094ca <UART_Ring_ISR+0xb6>
            LL_USART_DisableIT_TXE(uart);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7ff fe16 	bl	80090f4 <LL_USART_DisableIT_TXE>
 80094c8:	e019      	b.n	80094fe <UART_Ring_ISR+0xea>
        } else {
            unsigned char c = tx_buffer->buffer[tx_buffer->tail];
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	4413      	add	r3, r2
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	72bb      	strb	r3, [r7, #10]
            tx_buffer->tail = (tx_buffer->tail + 1) % tx_buffer->size;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	3301      	adds	r3, #1
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	68d2      	ldr	r2, [r2, #12]
 80094e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80094e6:	fb01 f202 	mul.w	r2, r1, r2
 80094ea:	1a9a      	subs	r2, r3, r2
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	609a      	str	r2, [r3, #8]
            LL_USART_TransmitData8(uart, c);
 80094f0:	7abb      	ldrb	r3, [r7, #10]
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff fe53 	bl	80091a0 <LL_USART_TransmitData8>
 80094fa:	e000      	b.n	80094fe <UART_Ring_ISR+0xea>
    if (!buffer) return;
 80094fc:	bf00      	nop
        }
    }
}
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <CmdLineProcess>:
//! \b CMDLINE_TOO_MANY_ARGS if there are more arguments than can be parsed.
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t CmdLineProcess(char *pcCmdLine)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 800950c:	2301      	movs	r3, #1
 800950e:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 8009510:	2300      	movs	r3, #0
 8009512:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 8009518:	e01f      	b.n	800955a <CmdLineProcess+0x56>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	2b20      	cmp	r3, #32
 8009520:	d105      	bne.n	800952e <CmdLineProcess+0x2a>
        {
            *pcChar = 0;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2200      	movs	r2, #0
 8009526:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 8009528:	2301      	movs	r3, #1
 800952a:	73fb      	strb	r3, [r7, #15]
 800952c:	e012      	b.n	8009554 <CmdLineProcess+0x50>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00f      	beq.n	8009554 <CmdLineProcess+0x50>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	2b07      	cmp	r3, #7
 8009538:	d80a      	bhi.n	8009550 <CmdLineProcess+0x4c>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 800953a:	491e      	ldr	r1, [pc, #120]	@ (80095b4 <CmdLineProcess+0xb0>)
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	3301      	adds	r3, #1
 8009548:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 800954a:	2300      	movs	r3, #0
 800954c:	73fb      	strb	r3, [r7, #15]
 800954e:	e001      	b.n	8009554 <CmdLineProcess+0x50>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 8009550:	2302      	movs	r3, #2
 8009552:	e02b      	b.n	80095ac <CmdLineProcess+0xa8>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	3301      	adds	r3, #1
 8009558:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1db      	bne.n	800951a <CmdLineProcess+0x16>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d020      	beq.n	80095aa <CmdLineProcess+0xa6>
    {
        ui8Argc++;
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	3301      	adds	r3, #1
 800956c:	613b      	str	r3, [r7, #16]
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 800956e:	4b12      	ldr	r3, [pc, #72]	@ (80095b8 <CmdLineProcess+0xb4>)
 8009570:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 8009572:	e016      	b.n	80095a2 <CmdLineProcess+0x9e>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 8009574:	4b0f      	ldr	r3, [pc, #60]	@ (80095b4 <CmdLineProcess+0xb0>)
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4619      	mov	r1, r3
 800957e:	4610      	mov	r0, r2
 8009580:	f7fe fe26 	bl	80081d0 <strcmp>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d108      	bne.n	800959c <CmdLineProcess+0x98>
            {
                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	4908      	ldr	r1, [pc, #32]	@ (80095b4 <CmdLineProcess+0xb0>)
 8009592:	4610      	mov	r0, r2
 8009594:	4798      	blx	r3
 8009596:	4603      	mov	r3, r0
 8009598:	b2db      	uxtb	r3, r3
 800959a:	e007      	b.n	80095ac <CmdLineProcess+0xa8>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	330c      	adds	r3, #12
 80095a0:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1e4      	bne.n	8009574 <CmdLineProcess+0x70>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 80095aa:	2301      	movs	r3, #1
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3718      	adds	r7, #24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20003230 	.word	0x20003230
 80095b8:	20000060 	.word	0x20000060

080095bc <__NVIC_SystemReset>:
{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80095c0:	f3bf 8f4f 	dsb	sy
}
 80095c4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80095c6:	4b06      	ldr	r3, [pc, #24]	@ (80095e0 <__NVIC_SystemReset+0x24>)
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80095ce:	4904      	ldr	r1, [pc, #16]	@ (80095e0 <__NVIC_SystemReset+0x24>)
 80095d0:	4b04      	ldr	r3, [pc, #16]	@ (80095e4 <__NVIC_SystemReset+0x28>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80095d6:	f3bf 8f4f 	dsb	sy
}
 80095da:	bf00      	nop
    __NOP();
 80095dc:	bf00      	nop
 80095de:	e7fd      	b.n	80095dc <__NVIC_SystemReset+0x20>
 80095e0:	e000ed00 	.word	0xe000ed00
 80095e4:	05fa0004 	.word	0x05fa0004

080095e8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	619a      	str	r2, [r3, #24]
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	041a      	lsls	r2, r3, #16
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	619a      	str	r2, [r3, #24]
}
 8009616:	bf00      	nop
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
	...

08009624 <CommandLine_Init>:
		9
	}
};

void CommandLine_Init(USART_TypeDef *handle_uart)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b08a      	sub	sp, #40	@ 0x28
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
    UART_CMDLINE = handle_uart;
 800962c:	4a14      	ldr	r2, [pc, #80]	@ (8009680 <CommandLine_Init+0x5c>)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6013      	str	r3, [r2, #0]
    memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
 8009632:	2240      	movs	r2, #64	@ 0x40
 8009634:	2100      	movs	r1, #0
 8009636:	4813      	ldr	r0, [pc, #76]	@ (8009684 <CommandLine_Init+0x60>)
 8009638:	f009 fec8 	bl	80133cc <memset>
    s_commandBufferIndex = 0;
 800963c:	4b12      	ldr	r3, [pc, #72]	@ (8009688 <CommandLine_Init+0x64>)
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]
//    Command_SendSplash();
    UART_SendStringRing(UART_CMDLINE, "\n\n\rEXP FIRMWARE V1.1.0\r\n");
 8009642:	4b0f      	ldr	r3, [pc, #60]	@ (8009680 <CommandLine_Init+0x5c>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4911      	ldr	r1, [pc, #68]	@ (800968c <CommandLine_Init+0x68>)
 8009648:	4618      	mov	r0, r3
 800964a:	f7ff feab 	bl	80093a4 <UART_SendStringRing>
    UART_Flush_RingRx(UART_CMDLINE);
 800964e:	4b0c      	ldr	r3, [pc, #48]	@ (8009680 <CommandLine_Init+0x5c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4618      	mov	r0, r3
 8009654:	f7ff febd 	bl	80093d2 <UART_Flush_RingRx>

    char buffer[30];
	snprintf(buffer, sizeof(buffer), "\r[00:00:00]%s$ ", NAME_SHELL);
 8009658:	f107 0008 	add.w	r0, r7, #8
 800965c:	4b0c      	ldr	r3, [pc, #48]	@ (8009690 <CommandLine_Init+0x6c>)
 800965e:	4a0d      	ldr	r2, [pc, #52]	@ (8009694 <CommandLine_Init+0x70>)
 8009660:	211e      	movs	r1, #30
 8009662:	f009 fe7d 	bl	8013360 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 8009666:	4b06      	ldr	r3, [pc, #24]	@ (8009680 <CommandLine_Init+0x5c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f107 0208 	add.w	r2, r7, #8
 800966e:	4611      	mov	r1, r2
 8009670:	4618      	mov	r0, r3
 8009672:	f7ff fe97 	bl	80093a4 <UART_SendStringRing>
}
 8009676:	bf00      	nop
 8009678:	3728      	adds	r7, #40	@ 0x28
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	2000349c 	.word	0x2000349c
 8009684:	200034a0 	.word	0x200034a0
 8009688:	200034e0 	.word	0x200034e0
 800968c:	080148a0 	.word	0x080148a0
 8009690:	080148bc 	.word	0x080148bc
 8009694:	080148c4 	.word	0x080148c4

08009698 <CommandLine_Task_Update>:

static void CommandLine_Task_Update(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
    char rxData;
    if (IsDataAvailable(UART_CMDLINE))
 800969e:	4b14      	ldr	r3, [pc, #80]	@ (80096f0 <CommandLine_Task_Update+0x58>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7ff fe55 	bl	8009352 <IsDataAvailable>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d01c      	beq.n	80096e8 <CommandLine_Task_Update+0x50>
    {
        rxData = UART_ReadRing(UART_CMDLINE);
 80096ae:	4b10      	ldr	r3, [pc, #64]	@ (80096f0 <CommandLine_Task_Update+0x58>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7ff fdd9 	bl	800926a <UART_ReadRing>
 80096b8:	4603      	mov	r3, r0
 80096ba:	71fb      	strb	r3, [r7, #7]
        if (rxData == 27)
 80096bc:	79fb      	ldrb	r3, [r7, #7]
 80096be:	2b1b      	cmp	r3, #27
 80096c0:	d106      	bne.n	80096d0 <CommandLine_Task_Update+0x38>
        {
            UART_SendStringRing(UART_CMDLINE, "\033[2J");
 80096c2:	4b0b      	ldr	r3, [pc, #44]	@ (80096f0 <CommandLine_Task_Update+0x58>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	490b      	ldr	r1, [pc, #44]	@ (80096f4 <CommandLine_Task_Update+0x5c>)
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7ff fe6b 	bl	80093a4 <UART_SendStringRing>
 80096ce:	e006      	b.n	80096de <CommandLine_Task_Update+0x46>
        }
        else
        {
            UART_WriteRing(UART_CMDLINE, rxData);
 80096d0:	4b07      	ldr	r3, [pc, #28]	@ (80096f0 <CommandLine_Task_Update+0x58>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	79fa      	ldrb	r2, [r7, #7]
 80096d6:	4611      	mov	r1, r2
 80096d8:	4618      	mov	r0, r3
 80096da:	f7ff fdfe 	bl	80092da <UART_WriteRing>
        }
        process_command(rxData, &pContext);
 80096de:	79fb      	ldrb	r3, [r7, #7]
 80096e0:	4905      	ldr	r1, [pc, #20]	@ (80096f8 <CommandLine_Task_Update+0x60>)
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 f80a 	bl	80096fc <process_command>
    }
}
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	2000349c 	.word	0x2000349c
 80096f4:	080148d4 	.word	0x080148d4
 80096f8:	20003254 	.word	0x20003254

080096fc <process_command>:

void process_command(char rxData, CMDLine_Context *context)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b0bc      	sub	sp, #240	@ 0xf0
 8009700:	af02      	add	r7, sp, #8
 8009702:	4603      	mov	r3, r0
 8009704:	6039      	str	r1, [r7, #0]
 8009706:	71fb      	strb	r3, [r7, #7]
    if (rxData == 27)
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	2b1b      	cmp	r3, #27
 800970c:	d132      	bne.n	8009774 <process_command+0x78>
    {
        s_DateTime rtcTime = {0};
 800970e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8009712:	2200      	movs	r2, #0
 8009714:	601a      	str	r2, [r3, #0]
 8009716:	809a      	strh	r2, [r3, #4]
        DateTime_GetRTC(&rtcTime);
 8009718:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800971c:	4618      	mov	r0, r3
 800971e:	f002 fc1b 	bl	800bf58 <DateTime_GetRTC>
        char x_timeBuffer[30];
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
                 "[%02u:%02u:%02u]",
                 rtcTime.hour, rtcTime.minute, rtcTime.second);
 8009722:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
 8009726:	4619      	mov	r1, r3
                 rtcTime.hour, rtcTime.minute, rtcTime.second);
 8009728:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 800972c:	f897 20e1 	ldrb.w	r2, [r7, #225]	@ 0xe1
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
 8009730:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 8009734:	9201      	str	r2, [sp, #4]
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	460b      	mov	r3, r1
 800973a:	4ab9      	ldr	r2, [pc, #740]	@ (8009a20 <process_command+0x324>)
 800973c:	211e      	movs	r1, #30
 800973e:	f009 fe0f 	bl	8013360 <sniprintf>
        char buffer[60];
        snprintf(buffer, sizeof(buffer), "\r\n%s%s$ ", x_timeBuffer, NAME_SHELL);
 8009742:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8009746:	f107 0008 	add.w	r0, r7, #8
 800974a:	4ab6      	ldr	r2, [pc, #728]	@ (8009a24 <process_command+0x328>)
 800974c:	9200      	str	r2, [sp, #0]
 800974e:	4ab6      	ldr	r2, [pc, #728]	@ (8009a28 <process_command+0x32c>)
 8009750:	213c      	movs	r1, #60	@ 0x3c
 8009752:	f009 fe05 	bl	8013360 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8009756:	4bb5      	ldr	r3, [pc, #724]	@ (8009a2c <process_command+0x330>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f107 0208 	add.w	r2, r7, #8
 800975e:	4611      	mov	r1, r2
 8009760:	4618      	mov	r0, r3
 8009762:	f7ff fe1f 	bl	80093a4 <UART_SendStringRing>
        context->commandBufferIndex = 0;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2200      	movs	r2, #0
 800976a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        context->commandBuffer[0] = '\0';
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2200      	movs	r2, #0
 8009772:	701a      	strb	r2, [r3, #0]
    }

    if (rxData == 0x2D) // '-' key (history up)
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	2b2d      	cmp	r3, #45	@ 0x2d
 8009778:	d16b      	bne.n	8009852 <process_command+0x156>
    {
        // Get Software DateTime
        s_DateTime rtcTime = {0};
 800977a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800977e:	2200      	movs	r2, #0
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	809a      	strh	r2, [r3, #4]
        DateTime_GetRTC(&rtcTime);
 8009784:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8009788:	4618      	mov	r0, r3
 800978a:	f002 fbe5 	bl	800bf58 <DateTime_GetRTC>
        char x_timeBuffer[30];
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
                 "[%02u:%02u:%02u]",
                 rtcTime.hour, rtcTime.minute, rtcTime.second);
 800978e:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
 8009792:	4619      	mov	r1, r3
                 rtcTime.hour, rtcTime.minute, rtcTime.second);
 8009794:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8009798:	f897 20b9 	ldrb.w	r2, [r7, #185]	@ 0xb9
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
 800979c:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80097a0:	9201      	str	r2, [sp, #4]
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	460b      	mov	r3, r1
 80097a6:	4a9e      	ldr	r2, [pc, #632]	@ (8009a20 <process_command+0x324>)
 80097a8:	211e      	movs	r1, #30
 80097aa:	f009 fdd9 	bl	8013360 <sniprintf>
        if (context->historyIndex > 0)
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	f8b3 3244 	ldrh.w	r3, [r3, #580]	@ 0x244
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d007      	beq.n	80097c8 <process_command+0xcc>
        {
            context->historyIndex--;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	f8b3 3244 	ldrh.w	r3, [r3, #580]	@ 0x244
 80097be:	3b01      	subs	r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	f8a3 2244 	strh.w	r2, [r3, #580]	@ 0x244
        }

        // Load history command
        if (context->historyIndex < context->historyCount)
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	f8b3 2244 	ldrh.w	r2, [r3, #580]	@ 0x244
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d215      	bcs.n	8009804 <process_command+0x108>
        {
            strcpy(context->commandBuffer, context->commandHistory[context->historyIndex]);
 80097d8:	6838      	ldr	r0, [r7, #0]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	f8b3 3244 	ldrh.w	r3, [r3, #580]	@ 0x244
 80097e0:	3301      	adds	r3, #1
 80097e2:	019b      	lsls	r3, r3, #6
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	4413      	add	r3, r2
 80097e8:	3302      	adds	r3, #2
 80097ea:	4619      	mov	r1, r3
 80097ec:	f009 fe22 	bl	8013434 <strcpy>
            context->commandBufferIndex = strlen(context->commandBuffer);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7fe fcf6 	bl	80081e4 <strlen>
 80097f8:	4603      	mov	r3, r0
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8009802:	e006      	b.n	8009812 <process_command+0x116>
        }
        else
        {
            context->commandBuffer[0] = '\0';
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	2200      	movs	r2, #0
 8009808:	701a      	strb	r2, [r3, #0]
            context->commandBufferIndex = 0;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2200      	movs	r2, #0
 800980e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        }

        // Clear current line and display updated command
        UART_SendStringRing(UART_CMDLINE, "\033[2K"); // Clear entire line
 8009812:	4b86      	ldr	r3, [pc, #536]	@ (8009a2c <process_command+0x330>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4986      	ldr	r1, [pc, #536]	@ (8009a30 <process_command+0x334>)
 8009818:	4618      	mov	r0, r3
 800981a:	f7ff fdc3 	bl	80093a4 <UART_SendStringRing>
        char buffer[60];
        snprintf(buffer, sizeof(buffer), "\r%s%s$ ", x_timeBuffer, NAME_SHELL);
 800981e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009822:	f107 0008 	add.w	r0, r7, #8
 8009826:	4a7f      	ldr	r2, [pc, #508]	@ (8009a24 <process_command+0x328>)
 8009828:	9200      	str	r2, [sp, #0]
 800982a:	4a82      	ldr	r2, [pc, #520]	@ (8009a34 <process_command+0x338>)
 800982c:	213c      	movs	r1, #60	@ 0x3c
 800982e:	f009 fd97 	bl	8013360 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8009832:	4b7e      	ldr	r3, [pc, #504]	@ (8009a2c <process_command+0x330>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f107 0208 	add.w	r2, r7, #8
 800983a:	4611      	mov	r1, r2
 800983c:	4618      	mov	r0, r3
 800983e:	f7ff fdb1 	bl	80093a4 <UART_SendStringRing>
        UART_SendStringRing(UART_CMDLINE, context->commandBuffer); // Display updated command
 8009842:	4b7a      	ldr	r3, [pc, #488]	@ (8009a2c <process_command+0x330>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	4611      	mov	r1, r2
 800984a:	4618      	mov	r0, r3
 800984c:	f7ff fdaa 	bl	80093a4 <UART_SendStringRing>
 8009850:	e1c8      	b.n	8009be4 <process_command+0x4e8>
        return;
    }
    else if (rxData == 0x3D) // '=' key (history down)
 8009852:	79fb      	ldrb	r3, [r7, #7]
 8009854:	2b3d      	cmp	r3, #61	@ 0x3d
 8009856:	d16e      	bne.n	8009936 <process_command+0x23a>
    {
        // Get Software DateTime
        s_DateTime rtcTime = {0};
 8009858:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800985c:	2200      	movs	r2, #0
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	809a      	strh	r2, [r3, #4]
        DateTime_GetRTC(&rtcTime);
 8009862:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8009866:	4618      	mov	r0, r3
 8009868:	f002 fb76 	bl	800bf58 <DateTime_GetRTC>
        char x_timeBuffer[30];
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
                 "[%02u:%02u:%02u]",
                 rtcTime.hour, rtcTime.minute, rtcTime.second);
 800986c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
 8009870:	4619      	mov	r1, r3
                 rtcTime.hour, rtcTime.minute, rtcTime.second);
 8009872:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8009876:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
 800987a:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800987e:	9201      	str	r2, [sp, #4]
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	460b      	mov	r3, r1
 8009884:	4a66      	ldr	r2, [pc, #408]	@ (8009a20 <process_command+0x324>)
 8009886:	211e      	movs	r1, #30
 8009888:	f009 fd6a 	bl	8013360 <sniprintf>
        if (context->historyIndex < context->historyCount)
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	f8b3 2244 	ldrh.w	r2, [r3, #580]	@ 0x244
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 8009898:	429a      	cmp	r2, r3
 800989a:	d207      	bcs.n	80098ac <process_command+0x1b0>
        {
            context->historyIndex++;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	f8b3 3244 	ldrh.w	r3, [r3, #580]	@ 0x244
 80098a2:	3301      	adds	r3, #1
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	f8a3 2244 	strh.w	r2, [r3, #580]	@ 0x244
        }

        // Load history command
        if (context->historyIndex < context->historyCount)
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	f8b3 2244 	ldrh.w	r2, [r3, #580]	@ 0x244
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d215      	bcs.n	80098e8 <process_command+0x1ec>
        {
            strcpy(context->commandBuffer, context->commandHistory[context->historyIndex]);
 80098bc:	6838      	ldr	r0, [r7, #0]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	f8b3 3244 	ldrh.w	r3, [r3, #580]	@ 0x244
 80098c4:	3301      	adds	r3, #1
 80098c6:	019b      	lsls	r3, r3, #6
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	4413      	add	r3, r2
 80098cc:	3302      	adds	r3, #2
 80098ce:	4619      	mov	r1, r3
 80098d0:	f009 fdb0 	bl	8013434 <strcpy>
            context->commandBufferIndex = strlen(context->commandBuffer);
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fe fc84 	bl	80081e4 <strlen>
 80098dc:	4603      	mov	r3, r0
 80098de:	b29a      	uxth	r2, r3
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 80098e6:	e006      	b.n	80098f6 <process_command+0x1fa>
        }
        else
        {
            context->commandBuffer[0] = '\0';
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2200      	movs	r2, #0
 80098ec:	701a      	strb	r2, [r3, #0]
            context->commandBufferIndex = 0;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        }

        // Clear current line and display updated command
        UART_SendStringRing(UART_CMDLINE, "\033[2K"); // Clear entire line
 80098f6:	4b4d      	ldr	r3, [pc, #308]	@ (8009a2c <process_command+0x330>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	494d      	ldr	r1, [pc, #308]	@ (8009a30 <process_command+0x334>)
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7ff fd51 	bl	80093a4 <UART_SendStringRing>
        char buffer[60];
        snprintf(buffer, sizeof(buffer), "\r%s%s$ ", x_timeBuffer, NAME_SHELL);
 8009902:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009906:	f107 0008 	add.w	r0, r7, #8
 800990a:	4a46      	ldr	r2, [pc, #280]	@ (8009a24 <process_command+0x328>)
 800990c:	9200      	str	r2, [sp, #0]
 800990e:	4a49      	ldr	r2, [pc, #292]	@ (8009a34 <process_command+0x338>)
 8009910:	213c      	movs	r1, #60	@ 0x3c
 8009912:	f009 fd25 	bl	8013360 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8009916:	4b45      	ldr	r3, [pc, #276]	@ (8009a2c <process_command+0x330>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f107 0208 	add.w	r2, r7, #8
 800991e:	4611      	mov	r1, r2
 8009920:	4618      	mov	r0, r3
 8009922:	f7ff fd3f 	bl	80093a4 <UART_SendStringRing>
        UART_SendStringRing(UART_CMDLINE, context->commandBuffer); // Display updated command
 8009926:	4b41      	ldr	r3, [pc, #260]	@ (8009a2c <process_command+0x330>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	4611      	mov	r1, r2
 800992e:	4618      	mov	r0, r3
 8009930:	f7ff fd38 	bl	80093a4 <UART_SendStringRing>
 8009934:	e156      	b.n	8009be4 <process_command+0x4e8>
        return;
    }

    // Handle individual key presses
    if (((rxData >= 32 && rxData <= 126) || rxData == KEY_ENTER || rxData == KEY_BACKSPACE) && rxData != 0x2D && rxData != 0x3D && rxData != 0x5C)
 8009936:	79fb      	ldrb	r3, [r7, #7]
 8009938:	2b1f      	cmp	r3, #31
 800993a:	d902      	bls.n	8009942 <process_command+0x246>
 800993c:	79fb      	ldrb	r3, [r7, #7]
 800993e:	2b7e      	cmp	r3, #126	@ 0x7e
 8009940:	d906      	bls.n	8009950 <process_command+0x254>
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	2b0d      	cmp	r3, #13
 8009946:	d003      	beq.n	8009950 <process_command+0x254>
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	2b7f      	cmp	r3, #127	@ 0x7f
 800994c:	f040 814a 	bne.w	8009be4 <process_command+0x4e8>
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	2b2d      	cmp	r3, #45	@ 0x2d
 8009954:	f000 8146 	beq.w	8009be4 <process_command+0x4e8>
 8009958:	79fb      	ldrb	r3, [r7, #7]
 800995a:	2b3d      	cmp	r3, #61	@ 0x3d
 800995c:	f000 8142 	beq.w	8009be4 <process_command+0x4e8>
 8009960:	79fb      	ldrb	r3, [r7, #7]
 8009962:	2b5c      	cmp	r3, #92	@ 0x5c
 8009964:	f000 813e 	beq.w	8009be4 <process_command+0x4e8>
    {
        // Get Software DateTime
        s_DateTime rtcTime = {0};
 8009968:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800996c:	2200      	movs	r2, #0
 800996e:	601a      	str	r2, [r3, #0]
 8009970:	809a      	strh	r2, [r3, #4]
        DateTime_GetRTC(&rtcTime);
 8009972:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8009976:	4618      	mov	r0, r3
 8009978:	f002 faee 	bl	800bf58 <DateTime_GetRTC>
        char x_timeBuffer[30];
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
                 "[%02u:%02u:%02u]",
                 rtcTime.hour, rtcTime.minute, rtcTime.second);
 800997c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
 8009980:	4619      	mov	r1, r3
                 rtcTime.hour, rtcTime.minute, rtcTime.second);
 8009982:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8009986:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
 800998a:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800998e:	9201      	str	r2, [sp, #4]
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	460b      	mov	r3, r1
 8009994:	4a22      	ldr	r2, [pc, #136]	@ (8009a20 <process_command+0x324>)
 8009996:	211e      	movs	r1, #30
 8009998:	f009 fce2 	bl	8013360 <sniprintf>
        if (rxData == KEY_ENTER)
 800999c:	79fb      	ldrb	r3, [r7, #7]
 800999e:	2b0d      	cmp	r3, #13
 80099a0:	f040 80c9 	bne.w	8009b36 <process_command+0x43a>
        {
            if (context->commandBufferIndex > 0)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 80ae 	beq.w	8009b0c <process_command+0x410>
            {
                context->commandBuffer[context->commandBufferIndex] = '\0';
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80099b6:	461a      	mov	r2, r3
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	2100      	movs	r1, #0
 80099bc:	5499      	strb	r1, [r3, r2]
                // Save to history
                if (context->historyCount == 0 ||
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d010      	beq.n	80099ea <process_command+0x2ee>
                    strcmp(context->commandHistory[context->historyCount - 1], context->commandBuffer) != 0)
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 80099ce:	3b01      	subs	r3, #1
 80099d0:	3301      	adds	r3, #1
 80099d2:	019b      	lsls	r3, r3, #6
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	4413      	add	r3, r2
 80099d8:	3302      	adds	r3, #2
 80099da:	683a      	ldr	r2, [r7, #0]
 80099dc:	4611      	mov	r1, r2
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fe fbf6 	bl	80081d0 <strcmp>
 80099e4:	4603      	mov	r3, r0
                if (context->historyCount == 0 ||
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d04d      	beq.n	8009a86 <process_command+0x38a>
                {
                    if (context->historyCount < MAX_HISTORY)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 80099f0:	2b07      	cmp	r3, #7
 80099f2:	d821      	bhi.n	8009a38 <process_command+0x33c>
                    {
                        strcpy(context->commandHistory[context->historyCount], context->commandBuffer);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 80099fa:	3301      	adds	r3, #1
 80099fc:	019b      	lsls	r3, r3, #6
 80099fe:	683a      	ldr	r2, [r7, #0]
 8009a00:	4413      	add	r3, r2
 8009a02:	3302      	adds	r3, #2
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	4611      	mov	r1, r2
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f009 fd13 	bl	8013434 <strcpy>
                        context->historyCount++;
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 8009a14:	3301      	adds	r3, #1
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	f8a3 2242 	strh.w	r2, [r3, #578]	@ 0x242
 8009a1e:	e032      	b.n	8009a86 <process_command+0x38a>
 8009a20:	080148dc 	.word	0x080148dc
 8009a24:	080148bc 	.word	0x080148bc
 8009a28:	080148f0 	.word	0x080148f0
 8009a2c:	2000349c 	.word	0x2000349c
 8009a30:	080148fc 	.word	0x080148fc
 8009a34:	08014904 	.word	0x08014904
                    }
                    else
                    {
                        for (int i = 0; i < MAX_HISTORY - 1; i++)
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a3e:	e016      	b.n	8009a6e <process_command+0x372>
                        {
                            strcpy(context->commandHistory[i], context->commandHistory[i + 1]);
 8009a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a44:	3301      	adds	r3, #1
 8009a46:	019b      	lsls	r3, r3, #6
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	1c98      	adds	r0, r3, #2
 8009a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a52:	3301      	adds	r3, #1
 8009a54:	3301      	adds	r3, #1
 8009a56:	019b      	lsls	r3, r3, #6
 8009a58:	683a      	ldr	r2, [r7, #0]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	3302      	adds	r3, #2
 8009a5e:	4619      	mov	r1, r3
 8009a60:	f009 fce8 	bl	8013434 <strcpy>
                        for (int i = 0; i < MAX_HISTORY - 1; i++)
 8009a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a68:	3301      	adds	r3, #1
 8009a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a72:	2b06      	cmp	r3, #6
 8009a74:	dde4      	ble.n	8009a40 <process_command+0x344>
                        }
                        strcpy(context->commandHistory[MAX_HISTORY - 1], context->commandBuffer);
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	f203 2302 	addw	r3, r3, #514	@ 0x202
 8009a7c:	683a      	ldr	r2, [r7, #0]
 8009a7e:	4611      	mov	r1, r2
 8009a80:	4618      	mov	r0, r3
 8009a82:	f009 fcd7 	bl	8013434 <strcpy>
                    }
                }
                context->historyIndex = context->historyCount;
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	f8b3 2242 	ldrh.w	r2, [r3, #578]	@ 0x242
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	f8a3 2244 	strh.w	r2, [r3, #580]	@ 0x244

                // Process command
                int8_t ret_val = CmdLineProcess(context->commandBuffer);
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7ff fd35 	bl	8009504 <CmdLineProcess>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
                if (ret_val == CMDLINE_NONE_RETURN)
 8009aa0:	f997 30e3 	ldrsb.w	r3, [r7, #227]	@ 0xe3
 8009aa4:	2b06      	cmp	r3, #6
 8009aa6:	f000 809d 	beq.w	8009be4 <process_command+0x4e8>
                {
                }
                else
                {
                    char buffer[60];
                    snprintf(buffer, sizeof(buffer), "\r\n--> Return: ");
 8009aaa:	f107 0308 	add.w	r3, r7, #8
 8009aae:	4a4f      	ldr	r2, [pc, #316]	@ (8009bec <process_command+0x4f0>)
 8009ab0:	213c      	movs	r1, #60	@ 0x3c
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f009 fc54 	bl	8013360 <sniprintf>
                    UART_SendStringRing(UART_CMDLINE, buffer);
 8009ab8:	4b4d      	ldr	r3, [pc, #308]	@ (8009bf0 <process_command+0x4f4>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f107 0208 	add.w	r2, r7, #8
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7ff fc6e 	bl	80093a4 <UART_SendStringRing>
                    UART_SendStringRing(UART_CMDLINE, ErrorCode[ret_val]); //
 8009ac8:	4b49      	ldr	r3, [pc, #292]	@ (8009bf0 <process_command+0x4f4>)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	f997 30e3 	ldrsb.w	r3, [r7, #227]	@ 0xe3
 8009ad0:	4948      	ldr	r1, [pc, #288]	@ (8009bf4 <process_command+0x4f8>)
 8009ad2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	4610      	mov	r0, r2
 8009ada:	f7ff fc63 	bl	80093a4 <UART_SendStringRing>
                    snprintf(buffer, sizeof(buffer), "%s%s$ ", x_timeBuffer, NAME_SHELL);
 8009ade:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009ae2:	f107 0008 	add.w	r0, r7, #8
 8009ae6:	4a44      	ldr	r2, [pc, #272]	@ (8009bf8 <process_command+0x4fc>)
 8009ae8:	9200      	str	r2, [sp, #0]
 8009aea:	4a44      	ldr	r2, [pc, #272]	@ (8009bfc <process_command+0x500>)
 8009aec:	213c      	movs	r1, #60	@ 0x3c
 8009aee:	f009 fc37 	bl	8013360 <sniprintf>
                    UART_SendStringRing(UART_CMDLINE, buffer);
 8009af2:	4b3f      	ldr	r3, [pc, #252]	@ (8009bf0 <process_command+0x4f4>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f107 0208 	add.w	r2, r7, #8
 8009afa:	4611      	mov	r1, r2
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7ff fc51 	bl	80093a4 <UART_SendStringRing>
                    context->commandBufferIndex = 0;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8009b0a:	e06b      	b.n	8009be4 <process_command+0x4e8>
                }
            }
            else
            {
                ResetConfig();
 8009b0c:	f000 f87e 	bl	8009c0c <ResetConfig>
                char buffer[60];
                snprintf(buffer, sizeof(buffer), "\r\n%s%s$ ", x_timeBuffer, NAME_SHELL);
 8009b10:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009b14:	f107 0008 	add.w	r0, r7, #8
 8009b18:	4a37      	ldr	r2, [pc, #220]	@ (8009bf8 <process_command+0x4fc>)
 8009b1a:	9200      	str	r2, [sp, #0]
 8009b1c:	4a38      	ldr	r2, [pc, #224]	@ (8009c00 <process_command+0x504>)
 8009b1e:	213c      	movs	r1, #60	@ 0x3c
 8009b20:	f009 fc1e 	bl	8013360 <sniprintf>
                UART_SendStringRing(UART_CMDLINE, buffer);
 8009b24:	4b32      	ldr	r3, [pc, #200]	@ (8009bf0 <process_command+0x4f4>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f107 0208 	add.w	r2, r7, #8
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7ff fc38 	bl	80093a4 <UART_SendStringRing>
 8009b34:	e056      	b.n	8009be4 <process_command+0x4e8>
            }
        }
        else if (rxData == KEY_BACKSPACE)
 8009b36:	79fb      	ldrb	r3, [r7, #7]
 8009b38:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b3a:	d11b      	bne.n	8009b74 <process_command+0x478>
        {
            if (context->commandBufferIndex > 0)
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00f      	beq.n	8009b66 <process_command+0x46a>
            {
                context->commandBufferIndex--;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
                context->commandBuffer[context->commandBufferIndex] = '\0';
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	2100      	movs	r1, #0
 8009b62:	5499      	strb	r1, [r3, r2]
 8009b64:	e03e      	b.n	8009be4 <process_command+0x4e8>
            }
            else
            {
                UART_SendStringRing(UART_CMDLINE, " ");
 8009b66:	4b22      	ldr	r3, [pc, #136]	@ (8009bf0 <process_command+0x4f4>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4926      	ldr	r1, [pc, #152]	@ (8009c04 <process_command+0x508>)
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7ff fc19 	bl	80093a4 <UART_SendStringRing>
 8009b72:	e037      	b.n	8009be4 <process_command+0x4e8>
            }
        }
        else
        {
            if (context->commandBufferIndex < COMMAND_MAX_LENGTH - 1)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009b7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b7c:	d813      	bhi.n	8009ba6 <process_command+0x4aa>
            {
                context->commandBuffer[context->commandBufferIndex++] = rxData;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009b84:	1c5a      	adds	r2, r3, #1
 8009b86:	b291      	uxth	r1, r2
 8009b88:	683a      	ldr	r2, [r7, #0]
 8009b8a:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 8009b8e:	4619      	mov	r1, r3
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	79fa      	ldrb	r2, [r7, #7]
 8009b94:	545a      	strb	r2, [r3, r1]
                context->commandBuffer[context->commandBufferIndex] = '\0';
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	5499      	strb	r1, [r3, r2]
 8009ba4:	e01e      	b.n	8009be4 <process_command+0x4e8>
            }
            else
            {
                // Command too long
                UART_SendStringRing(UART_CMDLINE, "\r\nError: Command too long.");
 8009ba6:	4b12      	ldr	r3, [pc, #72]	@ (8009bf0 <process_command+0x4f4>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4917      	ldr	r1, [pc, #92]	@ (8009c08 <process_command+0x50c>)
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7ff fbf9 	bl	80093a4 <UART_SendStringRing>
                char buffer[60];
                snprintf(buffer, sizeof(buffer), "\r\n%s%s$ ", x_timeBuffer, NAME_SHELL);
 8009bb2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009bb6:	f107 0008 	add.w	r0, r7, #8
 8009bba:	4a0f      	ldr	r2, [pc, #60]	@ (8009bf8 <process_command+0x4fc>)
 8009bbc:	9200      	str	r2, [sp, #0]
 8009bbe:	4a10      	ldr	r2, [pc, #64]	@ (8009c00 <process_command+0x504>)
 8009bc0:	213c      	movs	r1, #60	@ 0x3c
 8009bc2:	f009 fbcd 	bl	8013360 <sniprintf>
                UART_SendStringRing(UART_CMDLINE, buffer);
 8009bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8009bf0 <process_command+0x4f4>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f107 0208 	add.w	r2, r7, #8
 8009bce:	4611      	mov	r1, r2
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff fbe7 	bl	80093a4 <UART_SendStringRing>
                context->commandBufferIndex = 0;
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
                context->commandBuffer[0] = '\0';
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	2200      	movs	r2, #0
 8009be2:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 8009be4:	37e8      	adds	r7, #232	@ 0xe8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	0801490c 	.word	0x0801490c
 8009bf0:	2000349c 	.word	0x2000349c
 8009bf4:	20000048 	.word	0x20000048
 8009bf8:	080148bc 	.word	0x080148bc
 8009bfc:	0801491c 	.word	0x0801491c
 8009c00:	080148f0 	.word	0x080148f0
 8009c04:	08014924 	.word	0x08014924
 8009c08:	08014928 	.word	0x08014928

08009c0c <ResetConfig>:

static void ResetConfig(void)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	af00      	add	r7, sp, #0
    laser_interval = 0;
 8009c10:	4b12      	ldr	r3, [pc, #72]	@ (8009c5c <ResetConfig+0x50>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]
    run_system = 0;
 8009c16:	4b12      	ldr	r3, [pc, #72]	@ (8009c60 <ResetConfig+0x54>)
 8009c18:	2200      	movs	r2, #0
 8009c1a:	701a      	strb	r2, [r3, #0]
    run_adc = 0;
 8009c1c:	4b11      	ldr	r3, [pc, #68]	@ (8009c64 <ResetConfig+0x58>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	701a      	strb	r2, [r3, #0]
    adc_interval = 0;
 8009c22:	4b11      	ldr	r3, [pc, #68]	@ (8009c68 <ResetConfig+0x5c>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]
    pair_slot = 1;
 8009c28:	4b10      	ldr	r3, [pc, #64]	@ (8009c6c <ResetConfig+0x60>)
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	701a      	strb	r2, [r3, #0]
    current_column = 1;
 8009c2e:	4b10      	ldr	r3, [pc, #64]	@ (8009c70 <ResetConfig+0x64>)
 8009c30:	2201      	movs	r2, #1
 8009c32:	701a      	strb	r2, [r3, #0]
    current_row = 1;
 8009c34:	4b0f      	ldr	r3, [pc, #60]	@ (8009c74 <ResetConfig+0x68>)
 8009c36:	2201      	movs	r2, #1
 8009c38:	701a      	strb	r2, [r3, #0]
    user_delay = 0;
 8009c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009c78 <ResetConfig+0x6c>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	601a      	str	r2, [r3, #0]
    rest_time = 0;
 8009c40:	4b0e      	ldr	r3, [pc, #56]	@ (8009c7c <ResetConfig+0x70>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	601a      	str	r2, [r3, #0]
    run_inf = 0;
 8009c46:	4b0e      	ldr	r3, [pc, #56]	@ (8009c80 <ResetConfig+0x74>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	701a      	strb	r2, [r3, #0]
    do_time = 0;
 8009c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8009c84 <ResetConfig+0x78>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	701a      	strb	r2, [r3, #0]
}
 8009c52:	bf00      	nop
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr
 8009c5c:	200034e4 	.word	0x200034e4
 8009c60:	200034e8 	.word	0x200034e8
 8009c64:	200034e9 	.word	0x200034e9
 8009c68:	200034ec 	.word	0x200034ec
 8009c6c:	2000022c 	.word	0x2000022c
 8009c70:	2000022d 	.word	0x2000022d
 8009c74:	2000022e 	.word	0x2000022e
 8009c78:	200034f0 	.word	0x200034f0
 8009c7c:	200034f4 	.word	0x200034f4
 8009c80:	200034f9 	.word	0x200034f9
 8009c84:	200034f8 	.word	0x200034f8

08009c88 <Cmd_help>:

/*-----------------------COMMAND FUNCTION LIST---------------------------*/
/* Command support */
int Cmd_help(int argc, char *argv[])
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b0cc      	sub	sp, #304	@ 0x130
 8009c8c:	af04      	add	r7, sp, #16
 8009c8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009c92:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009c96:	6018      	str	r0, [r3, #0]
 8009c98:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009c9c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8009ca0:	6019      	str	r1, [r3, #0]
//	LL_SPI_TransmitData8(SPI1, 0x01);
    if (argc > 2)
 8009ca2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009ca6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	dd01      	ble.n	8009cb4 <Cmd_help+0x2c>
        return CMDLINE_TOO_MANY_ARGS;
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	e063      	b.n	8009d7c <Cmd_help+0xf4>
    UART_SendStringRing(UART_CMDLINE, "\r\nAvailable commands:");
 8009cb4:	4b34      	ldr	r3, [pc, #208]	@ (8009d88 <Cmd_help+0x100>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4934      	ldr	r1, [pc, #208]	@ (8009d8c <Cmd_help+0x104>)
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7ff fb72 	bl	80093a4 <UART_SendStringRing>
    tCmdLineEntry *pEntry = &g_psCmdTable[0];
 8009cc0:	4b33      	ldr	r3, [pc, #204]	@ (8009d90 <Cmd_help+0x108>)
 8009cc2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    size_t maxCmdLength = 0;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    while (pEntry->pcCmd)
 8009ccc:	e016      	b.n	8009cfc <Cmd_help+0x74>
    {
        size_t cmdLength = strlen(pEntry->pcCmd);
 8009cce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fe fa85 	bl	80081e4 <strlen>
 8009cda:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
        if (cmdLength > maxCmdLength)
 8009cde:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8009ce2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d903      	bls.n	8009cf2 <Cmd_help+0x6a>
        {
            maxCmdLength = cmdLength;
 8009cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
        }
        pEntry++;
 8009cf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009cf6:	330c      	adds	r3, #12
 8009cf8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    while (pEntry->pcCmd)
 8009cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1e3      	bne.n	8009cce <Cmd_help+0x46>
    }
    pEntry = &g_psCmdTable[0];
 8009d06:	4b22      	ldr	r3, [pc, #136]	@ (8009d90 <Cmd_help+0x108>)
 8009d08:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    while (pEntry->pcCmd)
 8009d0c:	e030      	b.n	8009d70 <Cmd_help+0xe8>
    {
        char buffer[256];
        size_t cmdLength = strlen(pEntry->pcCmd);
 8009d0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fe fa65 	bl	80081e4 <strlen>
 8009d1a:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
        int padding = (int)(maxCmdLength - cmdLength + 4);
 8009d1e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	3304      	adds	r3, #4
 8009d2a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        snprintf(buffer, sizeof(buffer), "\r\n[%s]%*s: %s",
 8009d2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	f107 000c 	add.w	r0, r7, #12
 8009d3e:	9302      	str	r3, [sp, #8]
 8009d40:	4b14      	ldr	r3, [pc, #80]	@ (8009d94 <Cmd_help+0x10c>)
 8009d42:	9301      	str	r3, [sp, #4]
 8009d44:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	4a12      	ldr	r2, [pc, #72]	@ (8009d98 <Cmd_help+0x110>)
 8009d4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009d52:	f009 fb05 	bl	8013360 <sniprintf>
                 pEntry->pcCmd, padding, "", pEntry->pcHelp);
        UART_SendStringRing(UART_CMDLINE, buffer);
 8009d56:	4b0c      	ldr	r3, [pc, #48]	@ (8009d88 <Cmd_help+0x100>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f107 020c 	add.w	r2, r7, #12
 8009d5e:	4611      	mov	r1, r2
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7ff fb1f 	bl	80093a4 <UART_SendStringRing>
        pEntry++;
 8009d66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d6a:	330c      	adds	r3, #12
 8009d6c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    while (pEntry->pcCmd)
 8009d70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1c9      	bne.n	8009d0e <Cmd_help+0x86>
    }
    return (CMDLINE_OK);
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	2000349c 	.word	0x2000349c
 8009d8c:	08014944 	.word	0x08014944
 8009d90:	20000060 	.word	0x20000060
 8009d94:	0801496c 	.word	0x0801496c
 8009d98:	0801495c 	.word	0x0801495c

08009d9c <Cmd_system_reset>:
int Cmd_system_reset(int argc, char *argv[])
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
	NVIC_SystemReset();
 8009da6:	f7ff fc09 	bl	80095bc <__NVIC_SystemReset>
	...

08009dac <Cmd_alive_check>:
	return CMDLINE_OK;
}
int Cmd_alive_check(int argc, char *argv[])
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
	UART_SendStringRing(UART_CMDLINE, "\r\n--> EXP_110 READY <--");
 8009db6:	4b05      	ldr	r3, [pc, #20]	@ (8009dcc <Cmd_alive_check+0x20>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4905      	ldr	r1, [pc, #20]	@ (8009dd0 <Cmd_alive_check+0x24>)
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff faf1 	bl	80093a4 <UART_SendStringRing>
	return CMDLINE_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	2000349c 	.word	0x2000349c
 8009dd0:	08014970 	.word	0x08014970

08009dd4 <Cmd_ota_boot>:
int Cmd_ota_boot(int argc, char *argv[])
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
	NVIC_SystemReset();
 8009dde:	f7ff fbed 	bl	80095bc <__NVIC_SystemReset>
	...

08009de4 <Cmd_temp_pw>:
	return CMDLINE_OK;
}

/* Command for power supply */
int Cmd_temp_pw(int argc, char *argv[])
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
    if (argc < 3)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	dc01      	bgt.n	8009df8 <Cmd_temp_pw+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 8009df4:	2303      	movs	r3, #3
 8009df6:	e017      	b.n	8009e28 <Cmd_temp_pw+0x44>
    if (argc > 3)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	dd01      	ble.n	8009e02 <Cmd_temp_pw+0x1e>
        return CMDLINE_TOO_MANY_ARGS;
 8009dfe:	2302      	movs	r3, #2
 8009e00:	e012      	b.n	8009e28 <Cmd_temp_pw+0x44>
    if (atoi(argv[1]))
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	3304      	adds	r3, #4
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f009 fa21 	bl	8013250 <atoi>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d004      	beq.n	8009e1e <Cmd_temp_pw+0x3a>
        LL_GPIO_SetOutputPin(EF_5_EN_GPIO_Port, EF_5_EN_Pin);
 8009e14:	2110      	movs	r1, #16
 8009e16:	4806      	ldr	r0, [pc, #24]	@ (8009e30 <Cmd_temp_pw+0x4c>)
 8009e18:	f7ff fbe6 	bl	80095e8 <LL_GPIO_SetOutputPin>
 8009e1c:	e003      	b.n	8009e26 <Cmd_temp_pw+0x42>
    else
        LL_GPIO_ResetOutputPin(EF_5_EN_GPIO_Port, EF_5_EN_Pin);
 8009e1e:	2110      	movs	r1, #16
 8009e20:	4803      	ldr	r0, [pc, #12]	@ (8009e30 <Cmd_temp_pw+0x4c>)
 8009e22:	f7ff fbef 	bl	8009604 <LL_GPIO_ResetOutputPin>
    return (CMDLINE_OK);
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	40020c00 	.word	0x40020c00

08009e34 <Cmd_set_temp>:

/* Command for temperature */
int Cmd_set_temp(int argc, char *argv[])
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b092      	sub	sp, #72	@ 0x48
 8009e38:	af02      	add	r7, sp, #8
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2b05      	cmp	r3, #5
 8009e42:	dc01      	bgt.n	8009e48 <Cmd_set_temp+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e04b      	b.n	8009ee0 <Cmd_set_temp+0xac>
    if (argc > 6)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b06      	cmp	r3, #6
 8009e4c:	dd01      	ble.n	8009e52 <Cmd_set_temp+0x1e>
        return CMDLINE_TOO_MANY_ARGS;
 8009e4e:	2302      	movs	r3, #2
 8009e50:	e046      	b.n	8009ee0 <Cmd_set_temp+0xac>
    int16_t setpoint[4];
    char buffer[40];
    for (uint8_t i = 0; i < 4; i++)
 8009e52:	2300      	movs	r3, #0
 8009e54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009e58:	e03d      	b.n	8009ed6 <Cmd_set_temp+0xa2>
    {
        setpoint[i] = atoi(argv[i + 1]);
 8009e5a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009e5e:	3301      	adds	r3, #1
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	4413      	add	r3, r2
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f009 f9f1 	bl	8013250 <atoi>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009e74:	b212      	sxth	r2, r2
 8009e76:	005b      	lsls	r3, r3, #1
 8009e78:	3340      	adds	r3, #64	@ 0x40
 8009e7a:	443b      	add	r3, r7
 8009e7c:	f823 2c0c 	strh.w	r2, [r3, #-12]
        temperature_set_setpoint(i, setpoint[i]);
 8009e80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009e84:	005b      	lsls	r3, r3, #1
 8009e86:	3340      	adds	r3, #64	@ 0x40
 8009e88:	443b      	add	r3, r7
 8009e8a:	f933 2c0c 	ldrsh.w	r2, [r3, #-12]
 8009e8e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009e92:	4611      	mov	r1, r2
 8009e94:	4618      	mov	r0, r3
 8009e96:	f005 fbd5 	bl	800f644 <temperature_set_setpoint>
        snprintf(buffer, sizeof(buffer), "\r\n--> Setpoint[%d]: %i", i, setpoint[i]);
 8009e9a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009e9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	3340      	adds	r3, #64	@ 0x40
 8009ea6:	443b      	add	r3, r7
 8009ea8:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8009eac:	f107 000c 	add.w	r0, r7, #12
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8009ee8 <Cmd_set_temp+0xb4>)
 8009eb6:	2128      	movs	r1, #40	@ 0x28
 8009eb8:	f009 fa52 	bl	8013360 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8009ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8009eec <Cmd_set_temp+0xb8>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f107 020c 	add.w	r2, r7, #12
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7ff fa6c 	bl	80093a4 <UART_SendStringRing>
    for (uint8_t i = 0; i < 4; i++)
 8009ecc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009ed6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d9bd      	bls.n	8009e5a <Cmd_set_temp+0x26>
    }
    return CMDLINE_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3740      	adds	r7, #64	@ 0x40
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	08014988 	.word	0x08014988
 8009eec:	2000349c 	.word	0x2000349c

08009ef0 <Cmd_get_temp>:
int Cmd_get_temp(int argc, char *argv[])
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b09a      	sub	sp, #104	@ 0x68
 8009ef4:	af02      	add	r7, sp, #8
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
    if (argc > 2)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	dd01      	ble.n	8009f04 <Cmd_get_temp+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 8009f00:	2302      	movs	r3, #2
 8009f02:	e05a      	b.n	8009fba <Cmd_get_temp+0xca>

    int16_t temp = 0;
 8009f04:	2300      	movs	r3, #0
 8009f06:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    char buffer[80];

    /* Temperature from BMP390 */
    // temp = bmp390_get_temperature();
    if (temp == 0x7FFF)
 8009f0a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8009f0e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d106      	bne.n	8009f24 <Cmd_get_temp+0x34>
    {
        UART_SendStringRing(UART_CMDLINE, "\r\n--> BMP390 is fail");
 8009f16:	4b2b      	ldr	r3, [pc, #172]	@ (8009fc4 <Cmd_get_temp+0xd4>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	492b      	ldr	r1, [pc, #172]	@ (8009fc8 <Cmd_get_temp+0xd8>)
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7ff fa41 	bl	80093a4 <UART_SendStringRing>
 8009f22:	e00f      	b.n	8009f44 <Cmd_get_temp+0x54>
    }
    else
    {
        snprintf(buffer, sizeof(buffer), "\r\n--> BMP390 temp: %i", temp);
 8009f24:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8009f28:	f107 000c 	add.w	r0, r7, #12
 8009f2c:	4a27      	ldr	r2, [pc, #156]	@ (8009fcc <Cmd_get_temp+0xdc>)
 8009f2e:	2150      	movs	r1, #80	@ 0x50
 8009f30:	f009 fa16 	bl	8013360 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8009f34:	4b23      	ldr	r3, [pc, #140]	@ (8009fc4 <Cmd_get_temp+0xd4>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f107 020c 	add.w	r2, r7, #12
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7ff fa30 	bl	80093a4 <UART_SendStringRing>
    }

    /* Temperature from NTC */
    NTC_get_temperature(NTC_Temperature);
 8009f44:	4822      	ldr	r0, [pc, #136]	@ (8009fd0 <Cmd_get_temp+0xe0>)
 8009f46:	f003 fb07 	bl	800d558 <NTC_get_temperature>
    for (uint8_t channel = 0; channel < 8; channel++)
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009f50:	e02e      	b.n	8009fb0 <Cmd_get_temp+0xc0>
    {
        temp = NTC_Temperature[channel];
 8009f52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f56:	4a1e      	ldr	r2, [pc, #120]	@ (8009fd0 <Cmd_get_temp+0xe0>)
 8009f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f5c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
        if (temp == 0x7FFF)
 8009f60:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8009f64:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d108      	bne.n	8009f7e <Cmd_get_temp+0x8e>
        {
            snprintf(buffer, sizeof(buffer), "\r\n--> NTC[%d] is fail", channel);
 8009f6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f70:	f107 000c 	add.w	r0, r7, #12
 8009f74:	4a17      	ldr	r2, [pc, #92]	@ (8009fd4 <Cmd_get_temp+0xe4>)
 8009f76:	2150      	movs	r1, #80	@ 0x50
 8009f78:	f009 f9f2 	bl	8013360 <sniprintf>
 8009f7c:	e00b      	b.n	8009f96 <Cmd_get_temp+0xa6>
        }
        else
        {
            snprintf(buffer, sizeof(buffer), "\r\n--> NTC[%d]: %i", channel, temp);
 8009f7e:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8009f82:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8009f86:	f107 000c 	add.w	r0, r7, #12
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	4a12      	ldr	r2, [pc, #72]	@ (8009fd8 <Cmd_get_temp+0xe8>)
 8009f90:	2150      	movs	r1, #80	@ 0x50
 8009f92:	f009 f9e5 	bl	8013360 <sniprintf>
        }
        UART_SendStringRing(UART_CMDLINE, buffer);
 8009f96:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc4 <Cmd_get_temp+0xd4>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f107 020c 	add.w	r2, r7, #12
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7ff f9ff 	bl	80093a4 <UART_SendStringRing>
    for (uint8_t channel = 0; channel < 8; channel++)
 8009fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009faa:	3301      	adds	r3, #1
 8009fac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009fb4:	2b07      	cmp	r3, #7
 8009fb6:	d9cc      	bls.n	8009f52 <Cmd_get_temp+0x62>
    }
    return CMDLINE_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3760      	adds	r7, #96	@ 0x60
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	2000349c 	.word	0x2000349c
 8009fc8:	080149a0 	.word	0x080149a0
 8009fcc:	080149b8 	.word	0x080149b8
 8009fd0:	20003570 	.word	0x20003570
 8009fd4:	080149d0 	.word	0x080149d0
 8009fd8:	080149e8 	.word	0x080149e8

08009fdc <Cmd_get_temp_setpoint>:
int Cmd_get_temp_setpoint(int argc, char *argv[])
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b094      	sub	sp, #80	@ 0x50
 8009fe0:	af02      	add	r7, sp, #8
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
    if (argc > 2)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	dd01      	ble.n	8009ff0 <Cmd_get_temp_setpoint+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 8009fec:	2302      	movs	r3, #2
 8009fee:	e02c      	b.n	800a04a <Cmd_get_temp_setpoint+0x6e>
    int16_t setpoint = 0;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    char buffer[60];
    for (uint8_t channel = 0; channel < 4; channel++)
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009ffc:	e020      	b.n	800a040 <Cmd_get_temp_setpoint+0x64>
    {
        setpoint = temperature_get_setpoint(channel);
 8009ffe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a002:	4618      	mov	r0, r3
 800a004:	f005 fb34 	bl	800f670 <temperature_get_setpoint>
 800a008:	4603      	mov	r3, r0
 800a00a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        snprintf(buffer, sizeof(buffer), "\r\n--> Setpoint[%d]:%i", channel, setpoint);
 800a00e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a012:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800a016:	f107 0008 	add.w	r0, r7, #8
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	4613      	mov	r3, r2
 800a01e:	4a0d      	ldr	r2, [pc, #52]	@ (800a054 <Cmd_get_temp_setpoint+0x78>)
 800a020:	213c      	movs	r1, #60	@ 0x3c
 800a022:	f009 f99d 	bl	8013360 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 800a026:	4b0c      	ldr	r3, [pc, #48]	@ (800a058 <Cmd_get_temp_setpoint+0x7c>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f107 0208 	add.w	r2, r7, #8
 800a02e:	4611      	mov	r1, r2
 800a030:	4618      	mov	r0, r3
 800a032:	f7ff f9b7 	bl	80093a4 <UART_SendStringRing>
    for (uint8_t channel = 0; channel < 4; channel++)
 800a036:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a03a:	3301      	adds	r3, #1
 800a03c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a040:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a044:	2b03      	cmp	r3, #3
 800a046:	d9da      	bls.n	8009ffe <Cmd_get_temp_setpoint+0x22>
    }
    return (CMDLINE_OK);
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3748      	adds	r7, #72	@ 0x48
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	080149fc 	.word	0x080149fc
 800a058:	2000349c 	.word	0x2000349c

0800a05c <Cmd_tec_init>:

/* Command for TEC */
int Cmd_tec_init(int argc, char *argv[])
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b094      	sub	sp, #80	@ 0x50
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b03      	cmp	r3, #3
 800a06a:	dd01      	ble.n	800a070 <Cmd_tec_init+0x14>
 800a06c:	2302      	movs	r3, #2
 800a06e:	e097      	b.n	800a1a0 <Cmd_tec_init+0x144>
	uint32_t data = 1;
 800a070:	2301      	movs	r3, #1
 800a072:	64bb      	str	r3, [r7, #72]	@ 0x48
	char buffer[60];
	int8_t tec_init_channel = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    if (argc == 2)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d147      	bne.n	800a110 <Cmd_tec_init+0xb4>
    {
    	for (uint8_t channel = 0; channel < 4; channel++)
 800a080:	2300      	movs	r3, #0
 800a082:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a086:	e03d      	b.n	800a104 <Cmd_tec_init+0xa8>
    	{
    		tec_init_channel = lt8722_init(channel);
 800a088:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a08c:	4618      	mov	r0, r3
 800a08e:	f002 fe53 	bl	800cd38 <lt8722_init>
 800a092:	4603      	mov	r3, r0
 800a094:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
			LL_mDelay(10);
 800a098:	200a      	movs	r0, #10
 800a09a:	f008 ff19 	bl	8012ed0 <LL_mDelay>
			if (!tec_init_channel) lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
 800a09e:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d105      	bne.n	800a0b2 <Cmd_tec_init+0x56>
 800a0a6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f002 fdf2 	bl	800cc96 <lt8722_set_swen_req>
			lt8722_reg_read(channel, LT8722_SPIS_STATUS, &data);
 800a0b2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a0b6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f002 fd49 	bl	800cb54 <lt8722_reg_read>
			if (!data)
 800a0c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d108      	bne.n	800a0da <Cmd_tec_init+0x7e>
				snprintf(buffer, sizeof(buffer), "\r\n--> Tec %d init success", channel);
 800a0c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a0cc:	f107 000c 	add.w	r0, r7, #12
 800a0d0:	4a35      	ldr	r2, [pc, #212]	@ (800a1a8 <Cmd_tec_init+0x14c>)
 800a0d2:	213c      	movs	r1, #60	@ 0x3c
 800a0d4:	f009 f944 	bl	8013360 <sniprintf>
 800a0d8:	e007      	b.n	800a0ea <Cmd_tec_init+0x8e>
			else
				snprintf(buffer, sizeof(buffer), "\r\n--> Tec %d init fail", channel);
 800a0da:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a0de:	f107 000c 	add.w	r0, r7, #12
 800a0e2:	4a32      	ldr	r2, [pc, #200]	@ (800a1ac <Cmd_tec_init+0x150>)
 800a0e4:	213c      	movs	r1, #60	@ 0x3c
 800a0e6:	f009 f93b 	bl	8013360 <sniprintf>
			UART_SendStringRing(UART_CMDLINE, buffer);
 800a0ea:	4b31      	ldr	r3, [pc, #196]	@ (800a1b0 <Cmd_tec_init+0x154>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f107 020c 	add.w	r2, r7, #12
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7ff f955 	bl	80093a4 <UART_SendStringRing>
    	for (uint8_t channel = 0; channel < 4; channel++)
 800a0fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a0fe:	3301      	adds	r3, #1
 800a100:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a104:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d9bd      	bls.n	800a088 <Cmd_tec_init+0x2c>
    	}
        return CMDLINE_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	e047      	b.n	800a1a0 <Cmd_tec_init+0x144>
    }
    if (argc == 3)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2b03      	cmp	r3, #3
 800a114:	d143      	bne.n	800a19e <Cmd_tec_init+0x142>
    {
    	uint8_t channel = atoi(argv[1]);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	3304      	adds	r3, #4
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f009 f897 	bl	8013250 <atoi>
 800a122:	4603      	mov	r3, r0
 800a124:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    	tec_init_channel = lt8722_init(channel);
 800a128:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800a12c:	4618      	mov	r0, r3
 800a12e:	f002 fe03 	bl	800cd38 <lt8722_init>
 800a132:	4603      	mov	r3, r0
 800a134:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    	LL_mDelay(10);
 800a138:	200a      	movs	r0, #10
 800a13a:	f008 fec9 	bl	8012ed0 <LL_mDelay>
    	if (!tec_init_channel) lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
 800a13e:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 800a142:	2b00      	cmp	r3, #0
 800a144:	d105      	bne.n	800a152 <Cmd_tec_init+0xf6>
 800a146:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800a14a:	2100      	movs	r1, #0
 800a14c:	4618      	mov	r0, r3
 800a14e:	f002 fda2 	bl	800cc96 <lt8722_set_swen_req>
    	lt8722_reg_read(channel, LT8722_SPIS_STATUS, &data);
 800a152:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a156:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800a15a:	2101      	movs	r1, #1
 800a15c:	4618      	mov	r0, r3
 800a15e:	f002 fcf9 	bl	800cb54 <lt8722_reg_read>
    	if (!data)
 800a162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a164:	2b00      	cmp	r3, #0
 800a166:	d108      	bne.n	800a17a <Cmd_tec_init+0x11e>
    		snprintf(buffer, sizeof(buffer), "\r\n--> Tec %d init success", channel);
 800a168:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800a16c:	f107 000c 	add.w	r0, r7, #12
 800a170:	4a0d      	ldr	r2, [pc, #52]	@ (800a1a8 <Cmd_tec_init+0x14c>)
 800a172:	213c      	movs	r1, #60	@ 0x3c
 800a174:	f009 f8f4 	bl	8013360 <sniprintf>
 800a178:	e007      	b.n	800a18a <Cmd_tec_init+0x12e>
    	else
    		snprintf(buffer, sizeof(buffer), "\r\n--> Tec %d init fail", channel);
 800a17a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800a17e:	f107 000c 	add.w	r0, r7, #12
 800a182:	4a0a      	ldr	r2, [pc, #40]	@ (800a1ac <Cmd_tec_init+0x150>)
 800a184:	213c      	movs	r1, #60	@ 0x3c
 800a186:	f009 f8eb 	bl	8013360 <sniprintf>
    	UART_SendStringRing(UART_CMDLINE, buffer);
 800a18a:	4b09      	ldr	r3, [pc, #36]	@ (800a1b0 <Cmd_tec_init+0x154>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f107 020c 	add.w	r2, r7, #12
 800a192:	4611      	mov	r1, r2
 800a194:	4618      	mov	r0, r3
 800a196:	f7ff f905 	bl	80093a4 <UART_SendStringRing>
    	return CMDLINE_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	e000      	b.n	800a1a0 <Cmd_tec_init+0x144>
    }
    return CMDLINE_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3750      	adds	r7, #80	@ 0x50
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	08014a14 	.word	0x08014a14
 800a1ac:	08014a30 	.word	0x08014a30
 800a1b0:	2000349c 	.word	0x2000349c

0800a1b4 <Cmd_tec_set_vol>:

int Cmd_tec_set_vol(int argc, char *argv[])
{
 800a1b4:	b590      	push	{r4, r7, lr}
 800a1b6:	b09b      	sub	sp, #108	@ 0x6c
 800a1b8:	af02      	add	r7, sp, #8
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b05      	cmp	r3, #5
 800a1c2:	dc01      	bgt.n	800a1c8 <Cmd_tec_set_vol+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e041      	b.n	800a24c <Cmd_tec_set_vol+0x98>
    if (argc > 6)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b06      	cmp	r3, #6
 800a1cc:	dd01      	ble.n	800a1d2 <Cmd_tec_set_vol+0x1e>
        return CMDLINE_TOO_MANY_ARGS;
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	e03c      	b.n	800a24c <Cmd_tec_set_vol+0x98>
    char buffer[80];
    for (uint8_t i = 0; i < 4; i++)
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a1d8:	e033      	b.n	800a242 <Cmd_tec_set_vol+0x8e>
    {
        temperature_set_tec_vol(i, atoi(argv[i + 1]));
 800a1da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a1de:	3301      	adds	r3, #1
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f009 f831 	bl	8013250 <atoi>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f005 fa4d 	bl	800f698 <temperature_set_tec_vol>
        snprintf(buffer, sizeof(buffer), "\r\n--> Tec vol[%d]: %i mV", i, atoi(argv[i + 1]));
 800a1fe:	f897 405f 	ldrb.w	r4, [r7, #95]	@ 0x5f
 800a202:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a206:	3301      	adds	r3, #1
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	4413      	add	r3, r2
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4618      	mov	r0, r3
 800a212:	f009 f81d 	bl	8013250 <atoi>
 800a216:	4603      	mov	r3, r0
 800a218:	f107 000c 	add.w	r0, r7, #12
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	4623      	mov	r3, r4
 800a220:	4a0c      	ldr	r2, [pc, #48]	@ (800a254 <Cmd_tec_set_vol+0xa0>)
 800a222:	2150      	movs	r1, #80	@ 0x50
 800a224:	f009 f89c 	bl	8013360 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 800a228:	4b0b      	ldr	r3, [pc, #44]	@ (800a258 <Cmd_tec_set_vol+0xa4>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f107 020c 	add.w	r2, r7, #12
 800a230:	4611      	mov	r1, r2
 800a232:	4618      	mov	r0, r3
 800a234:	f7ff f8b6 	bl	80093a4 <UART_SendStringRing>
    for (uint8_t i = 0; i < 4; i++)
 800a238:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a23c:	3301      	adds	r3, #1
 800a23e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a242:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a246:	2b03      	cmp	r3, #3
 800a248:	d9c7      	bls.n	800a1da <Cmd_tec_set_vol+0x26>
    }
    return CMDLINE_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3764      	adds	r7, #100	@ 0x64
 800a250:	46bd      	mov	sp, r7
 800a252:	bd90      	pop	{r4, r7, pc}
 800a254:	08014a48 	.word	0x08014a48
 800a258:	2000349c 	.word	0x2000349c

0800a25c <Cmd_tec_get_vol>:

int Cmd_tec_get_vol(int argc, char *argv[])
{
 800a25c:	b590      	push	{r4, r7, lr}
 800a25e:	b09d      	sub	sp, #116	@ 0x74
 800a260:	af02      	add	r7, sp, #8
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
    if (argc > 2)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b02      	cmp	r3, #2
 800a26a:	dd01      	ble.n	800a270 <Cmd_tec_get_vol+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 800a26c:	2302      	movs	r3, #2
 800a26e:	e034      	b.n	800a2da <Cmd_tec_get_vol+0x7e>
    uint16_t vol[4];
    char buffer[80];
    for (uint8_t i = 0; i < 4; i++)
 800a270:	2300      	movs	r3, #0
 800a272:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a276:	e02b      	b.n	800a2d0 <Cmd_tec_get_vol+0x74>
    {
        vol[i] = temperature_get_tec_vol(i);
 800a278:	f897 4067 	ldrb.w	r4, [r7, #103]	@ 0x67
 800a27c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a280:	4618      	mov	r0, r3
 800a282:	f005 fa35 	bl	800f6f0 <temperature_get_tec_vol>
 800a286:	4603      	mov	r3, r0
 800a288:	461a      	mov	r2, r3
 800a28a:	0063      	lsls	r3, r4, #1
 800a28c:	3368      	adds	r3, #104	@ 0x68
 800a28e:	443b      	add	r3, r7
 800a290:	f823 2c0c 	strh.w	r2, [r3, #-12]
        snprintf(buffer, sizeof(buffer), "\r\n--> Tec voltage[%d]: %i mV", i, vol[i]);
 800a294:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800a298:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a29c:	005b      	lsls	r3, r3, #1
 800a29e:	3368      	adds	r3, #104	@ 0x68
 800a2a0:	443b      	add	r3, r7
 800a2a2:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 800a2a6:	f107 000c 	add.w	r0, r7, #12
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	4a0d      	ldr	r2, [pc, #52]	@ (800a2e4 <Cmd_tec_get_vol+0x88>)
 800a2b0:	2150      	movs	r1, #80	@ 0x50
 800a2b2:	f009 f855 	bl	8013360 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 800a2b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a2e8 <Cmd_tec_get_vol+0x8c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f107 020c 	add.w	r2, r7, #12
 800a2be:	4611      	mov	r1, r2
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff f86f 	bl	80093a4 <UART_SendStringRing>
    for (uint8_t i = 0; i < 4; i++)
 800a2c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a2d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a2d4:	2b03      	cmp	r3, #3
 800a2d6:	d9cf      	bls.n	800a278 <Cmd_tec_get_vol+0x1c>
    }
    return CMDLINE_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	376c      	adds	r7, #108	@ 0x6c
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd90      	pop	{r4, r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	08014a64 	.word	0x08014a64
 800a2e8:	2000349c 	.word	0x2000349c

0800a2ec <Cmd_tec_dir>:

int Cmd_tec_dir (int argc, char *argv[])
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2b05      	cmp	r3, #5
 800a2fa:	dc01      	bgt.n	800a300 <Cmd_tec_dir+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	e03f      	b.n	800a380 <Cmd_tec_dir+0x94>
    if (argc > 6)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b06      	cmp	r3, #6
 800a304:	dd01      	ble.n	800a30a <Cmd_tec_dir+0x1e>
        return CMDLINE_TOO_MANY_ARGS;
 800a306:	2302      	movs	r3, #2
 800a308:	e03a      	b.n	800a380 <Cmd_tec_dir+0x94>
    tec_dir_t dir_0 = atoi(argv[1]) ? TEC_HEAT : TEC_COOL;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	3304      	adds	r3, #4
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4618      	mov	r0, r3
 800a312:	f008 ff9d 	bl	8013250 <atoi>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	bf14      	ite	ne
 800a31c:	2301      	movne	r3, #1
 800a31e:	2300      	moveq	r3, #0
 800a320:	b2db      	uxtb	r3, r3
 800a322:	73fb      	strb	r3, [r7, #15]
    tec_dir_t dir_1 = atoi(argv[2]) ? TEC_HEAT : TEC_COOL;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	3308      	adds	r3, #8
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f008 ff90 	bl	8013250 <atoi>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	bf14      	ite	ne
 800a336:	2301      	movne	r3, #1
 800a338:	2300      	moveq	r3, #0
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	73bb      	strb	r3, [r7, #14]
    tec_dir_t dir_2 = atoi(argv[3]) ? TEC_HEAT : TEC_COOL;
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	330c      	adds	r3, #12
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4618      	mov	r0, r3
 800a346:	f008 ff83 	bl	8013250 <atoi>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	bf14      	ite	ne
 800a350:	2301      	movne	r3, #1
 800a352:	2300      	moveq	r3, #0
 800a354:	b2db      	uxtb	r3, r3
 800a356:	737b      	strb	r3, [r7, #13]
    tec_dir_t dir_3 = atoi(argv[4]) ? TEC_HEAT : TEC_COOL;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	3310      	adds	r3, #16
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4618      	mov	r0, r3
 800a360:	f008 ff76 	bl	8013250 <atoi>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	bf14      	ite	ne
 800a36a:	2301      	movne	r3, #1
 800a36c:	2300      	moveq	r3, #0
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	733b      	strb	r3, [r7, #12]
    tec_set_dir(dir_0, dir_1, dir_2, dir_3);
 800a372:	7b3b      	ldrb	r3, [r7, #12]
 800a374:	7b7a      	ldrb	r2, [r7, #13]
 800a376:	7bb9      	ldrb	r1, [r7, #14]
 800a378:	7bf8      	ldrb	r0, [r7, #15]
 800a37a:	f005 fa69 	bl	800f850 <tec_set_dir>
    return CMDLINE_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <Cmd_tec_ctrl>:

int Cmd_tec_ctrl (int argc, char *argv[])
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2b05      	cmp	r3, #5
 800a396:	dc01      	bgt.n	800a39c <Cmd_tec_ctrl+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 800a398:	2303      	movs	r3, #3
 800a39a:	e04d      	b.n	800a438 <Cmd_tec_ctrl+0xb0>
    if (argc > 6)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b06      	cmp	r3, #6
 800a3a0:	dd01      	ble.n	800a3a6 <Cmd_tec_ctrl+0x1e>
        return CMDLINE_TOO_MANY_ARGS;
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	e048      	b.n	800a438 <Cmd_tec_ctrl+0xb0>
    if (atoi(argv[1]))
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f008 ff4f 	bl	8013250 <atoi>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d004      	beq.n	800a3c2 <Cmd_tec_ctrl+0x3a>
    	lt8722_set_swen_req(0, LT8722_SWEN_REQ_ENABLED);
 800a3b8:	2101      	movs	r1, #1
 800a3ba:	2000      	movs	r0, #0
 800a3bc:	f002 fc6b 	bl	800cc96 <lt8722_set_swen_req>
 800a3c0:	e003      	b.n	800a3ca <Cmd_tec_ctrl+0x42>
    else
    	lt8722_set_swen_req(0, LT8722_SWEN_REQ_DISABLED);
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	f002 fc66 	bl	800cc96 <lt8722_set_swen_req>
    if (atoi(argv[2]))
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	3308      	adds	r3, #8
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f008 ff3d 	bl	8013250 <atoi>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d004      	beq.n	800a3e6 <Cmd_tec_ctrl+0x5e>
    	lt8722_set_swen_req(1, LT8722_SWEN_REQ_ENABLED);
 800a3dc:	2101      	movs	r1, #1
 800a3de:	2001      	movs	r0, #1
 800a3e0:	f002 fc59 	bl	800cc96 <lt8722_set_swen_req>
 800a3e4:	e003      	b.n	800a3ee <Cmd_tec_ctrl+0x66>
    else
    	lt8722_set_swen_req(1, LT8722_SWEN_REQ_DISABLED);
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	2001      	movs	r0, #1
 800a3ea:	f002 fc54 	bl	800cc96 <lt8722_set_swen_req>
    if (atoi(argv[3]))
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	330c      	adds	r3, #12
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f008 ff2b 	bl	8013250 <atoi>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d004      	beq.n	800a40a <Cmd_tec_ctrl+0x82>
    	lt8722_set_swen_req(2, LT8722_SWEN_REQ_ENABLED);
 800a400:	2101      	movs	r1, #1
 800a402:	2002      	movs	r0, #2
 800a404:	f002 fc47 	bl	800cc96 <lt8722_set_swen_req>
 800a408:	e003      	b.n	800a412 <Cmd_tec_ctrl+0x8a>
    else
    	lt8722_set_swen_req(2, LT8722_SWEN_REQ_DISABLED);
 800a40a:	2100      	movs	r1, #0
 800a40c:	2002      	movs	r0, #2
 800a40e:	f002 fc42 	bl	800cc96 <lt8722_set_swen_req>
    if (atoi(argv[4]))
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	3310      	adds	r3, #16
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4618      	mov	r0, r3
 800a41a:	f008 ff19 	bl	8013250 <atoi>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d004      	beq.n	800a42e <Cmd_tec_ctrl+0xa6>
    	lt8722_set_swen_req(3, LT8722_SWEN_REQ_ENABLED);
 800a424:	2101      	movs	r1, #1
 800a426:	2003      	movs	r0, #3
 800a428:	f002 fc35 	bl	800cc96 <lt8722_set_swen_req>
 800a42c:	e003      	b.n	800a436 <Cmd_tec_ctrl+0xae>
    else
    	lt8722_set_swen_req(3, LT8722_SWEN_REQ_DISABLED);
 800a42e:	2100      	movs	r1, #0
 800a430:	2003      	movs	r0, #3
 800a432:	f002 fc30 	bl	800cc96 <lt8722_set_swen_req>
    return CMDLINE_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <Cmd_tec_read>:

int Cmd_tec_read(int argc, char *argv[])
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b096      	sub	sp, #88	@ 0x58
 800a444:	af02      	add	r7, sp, #8
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
    uint32_t data;
    char buffer[60];
    uint8_t channel = atoi(argv[1]);
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	3304      	adds	r3, #4
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4618      	mov	r0, r3
 800a452:	f008 fefd 	bl	8013250 <atoi>
 800a456:	4603      	mov	r3, r0
 800a458:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    lt8722_reg_read(channel, LT8722_SPIS_COMMAND, &data);
 800a45c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a460:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a464:	2100      	movs	r1, #0
 800a466:	4618      	mov	r0, r3
 800a468:	f002 fb74 	bl	800cb54 <lt8722_reg_read>
    snprintf(buffer, sizeof(buffer), "\r\nSPIS_COMMAND: 0x%lX-%lX\r\n", data >> 16, data);
 800a46c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a46e:	0c1a      	lsrs	r2, r3, #16
 800a470:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a472:	f107 000c 	add.w	r0, r7, #12
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	4613      	mov	r3, r2
 800a47a:	4a61      	ldr	r2, [pc, #388]	@ (800a600 <Cmd_tec_read+0x1c0>)
 800a47c:	213c      	movs	r1, #60	@ 0x3c
 800a47e:	f008 ff6f 	bl	8013360 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 800a482:	4b60      	ldr	r3, [pc, #384]	@ (800a604 <Cmd_tec_read+0x1c4>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f107 020c 	add.w	r2, r7, #12
 800a48a:	4611      	mov	r1, r2
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fe ff89 	bl	80093a4 <UART_SendStringRing>

    lt8722_reg_read(channel, LT8722_SPIS_STATUS, &data);
 800a492:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a496:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a49a:	2101      	movs	r1, #1
 800a49c:	4618      	mov	r0, r3
 800a49e:	f002 fb59 	bl	800cb54 <lt8722_reg_read>
    snprintf(buffer, sizeof(buffer), "SPIS_STATUS: 0x%lX-%lX\r\n", data >> 16, data);
 800a4a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4a4:	0c1a      	lsrs	r2, r3, #16
 800a4a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4a8:	f107 000c 	add.w	r0, r7, #12
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	4a55      	ldr	r2, [pc, #340]	@ (800a608 <Cmd_tec_read+0x1c8>)
 800a4b2:	213c      	movs	r1, #60	@ 0x3c
 800a4b4:	f008 ff54 	bl	8013360 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 800a4b8:	4b52      	ldr	r3, [pc, #328]	@ (800a604 <Cmd_tec_read+0x1c4>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f107 020c 	add.w	r2, r7, #12
 800a4c0:	4611      	mov	r1, r2
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fe ff6e 	bl	80093a4 <UART_SendStringRing>

    lt8722_reg_read(channel, LT8722_SPIS_DAC_ILIMN, &data);
 800a4c8:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a4cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a4d0:	2102      	movs	r1, #2
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f002 fb3e 	bl	800cb54 <lt8722_reg_read>
    snprintf(buffer, sizeof(buffer), "SPIS_DAC_ILIMN: 0x%lX-%lX\r\n", data >> 16, data);
 800a4d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4da:	0c1a      	lsrs	r2, r3, #16
 800a4dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4de:	f107 000c 	add.w	r0, r7, #12
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	4a49      	ldr	r2, [pc, #292]	@ (800a60c <Cmd_tec_read+0x1cc>)
 800a4e8:	213c      	movs	r1, #60	@ 0x3c
 800a4ea:	f008 ff39 	bl	8013360 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 800a4ee:	4b45      	ldr	r3, [pc, #276]	@ (800a604 <Cmd_tec_read+0x1c4>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f107 020c 	add.w	r2, r7, #12
 800a4f6:	4611      	mov	r1, r2
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7fe ff53 	bl	80093a4 <UART_SendStringRing>

    lt8722_reg_read(channel, LT8722_SPIS_DAC_ILIMP, &data);
 800a4fe:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a502:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a506:	2103      	movs	r1, #3
 800a508:	4618      	mov	r0, r3
 800a50a:	f002 fb23 	bl	800cb54 <lt8722_reg_read>
    snprintf(buffer, sizeof(buffer), "SPIS_DAC_ILIMP: 0x%lX-%lX\r\n", data >> 16, data);
 800a50e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a510:	0c1a      	lsrs	r2, r3, #16
 800a512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a514:	f107 000c 	add.w	r0, r7, #12
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	4613      	mov	r3, r2
 800a51c:	4a3c      	ldr	r2, [pc, #240]	@ (800a610 <Cmd_tec_read+0x1d0>)
 800a51e:	213c      	movs	r1, #60	@ 0x3c
 800a520:	f008 ff1e 	bl	8013360 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 800a524:	4b37      	ldr	r3, [pc, #220]	@ (800a604 <Cmd_tec_read+0x1c4>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f107 020c 	add.w	r2, r7, #12
 800a52c:	4611      	mov	r1, r2
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fe ff38 	bl	80093a4 <UART_SendStringRing>

    lt8722_reg_read(channel, LT8722_SPIS_DAC, &data);
 800a534:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a538:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a53c:	2104      	movs	r1, #4
 800a53e:	4618      	mov	r0, r3
 800a540:	f002 fb08 	bl	800cb54 <lt8722_reg_read>
    snprintf(buffer, sizeof(buffer), "SPIS_DAC: 0x%lX-%lX\r\n", data >> 16, data);
 800a544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a546:	0c1a      	lsrs	r2, r3, #16
 800a548:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a54a:	f107 000c 	add.w	r0, r7, #12
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	4613      	mov	r3, r2
 800a552:	4a30      	ldr	r2, [pc, #192]	@ (800a614 <Cmd_tec_read+0x1d4>)
 800a554:	213c      	movs	r1, #60	@ 0x3c
 800a556:	f008 ff03 	bl	8013360 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 800a55a:	4b2a      	ldr	r3, [pc, #168]	@ (800a604 <Cmd_tec_read+0x1c4>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f107 020c 	add.w	r2, r7, #12
 800a562:	4611      	mov	r1, r2
 800a564:	4618      	mov	r0, r3
 800a566:	f7fe ff1d 	bl	80093a4 <UART_SendStringRing>

    lt8722_reg_read(channel, LT8722_SPIS_OV_CLAMP, &data);
 800a56a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a56e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a572:	2105      	movs	r1, #5
 800a574:	4618      	mov	r0, r3
 800a576:	f002 faed 	bl	800cb54 <lt8722_reg_read>
    snprintf(buffer, sizeof(buffer), "SPIS_OV_CLAMP: 0x%lX\r\n", data);
 800a57a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a57c:	f107 000c 	add.w	r0, r7, #12
 800a580:	4a25      	ldr	r2, [pc, #148]	@ (800a618 <Cmd_tec_read+0x1d8>)
 800a582:	213c      	movs	r1, #60	@ 0x3c
 800a584:	f008 feec 	bl	8013360 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 800a588:	4b1e      	ldr	r3, [pc, #120]	@ (800a604 <Cmd_tec_read+0x1c4>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f107 020c 	add.w	r2, r7, #12
 800a590:	4611      	mov	r1, r2
 800a592:	4618      	mov	r0, r3
 800a594:	f7fe ff06 	bl	80093a4 <UART_SendStringRing>

    lt8722_reg_read(channel, LT8722_SPIS_UV_CLAMP, &data);
 800a598:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a59c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a5a0:	2106      	movs	r1, #6
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f002 fad6 	bl	800cb54 <lt8722_reg_read>
    snprintf(buffer, sizeof(buffer), "SPIS_UV_CLAMP: 0x%lX\r\n", data);
 800a5a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5aa:	f107 000c 	add.w	r0, r7, #12
 800a5ae:	4a1b      	ldr	r2, [pc, #108]	@ (800a61c <Cmd_tec_read+0x1dc>)
 800a5b0:	213c      	movs	r1, #60	@ 0x3c
 800a5b2:	f008 fed5 	bl	8013360 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 800a5b6:	4b13      	ldr	r3, [pc, #76]	@ (800a604 <Cmd_tec_read+0x1c4>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f107 020c 	add.w	r2, r7, #12
 800a5be:	4611      	mov	r1, r2
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fe feef 	bl	80093a4 <UART_SendStringRing>

    lt8722_reg_read(channel, LT8722_SPIS_AMUX, &data);
 800a5c6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a5ca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a5ce:	2107      	movs	r1, #7
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f002 fabf 	bl	800cb54 <lt8722_reg_read>
    snprintf(buffer, sizeof(buffer), "SPIS_AMUX: 0x%lX\r\n", data);
 800a5d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5d8:	f107 000c 	add.w	r0, r7, #12
 800a5dc:	4a10      	ldr	r2, [pc, #64]	@ (800a620 <Cmd_tec_read+0x1e0>)
 800a5de:	213c      	movs	r1, #60	@ 0x3c
 800a5e0:	f008 febe 	bl	8013360 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 800a5e4:	4b07      	ldr	r3, [pc, #28]	@ (800a604 <Cmd_tec_read+0x1c4>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f107 020c 	add.w	r2, r7, #12
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fe fed8 	bl	80093a4 <UART_SendStringRing>

    return (CMDLINE_OK);
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3750      	adds	r7, #80	@ 0x50
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	08014a84 	.word	0x08014a84
 800a604:	2000349c 	.word	0x2000349c
 800a608:	08014aa0 	.word	0x08014aa0
 800a60c:	08014abc 	.word	0x08014abc
 800a610:	08014ad8 	.word	0x08014ad8
 800a614:	08014af4 	.word	0x08014af4
 800a618:	08014b0c 	.word	0x08014b0c
 800a61c:	08014b24 	.word	0x08014b24
 800a620:	08014b3c 	.word	0x08014b3c

0800a624 <Cmd_heater_set_duty>:

int Cmd_heater_set_duty(int argc, char *argv[])
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b09a      	sub	sp, #104	@ 0x68
 800a628:	af02      	add	r7, sp, #8
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2b05      	cmp	r3, #5
 800a632:	dc01      	bgt.n	800a638 <Cmd_heater_set_duty+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 800a634:	2303      	movs	r3, #3
 800a636:	e042      	b.n	800a6be <Cmd_heater_set_duty+0x9a>
    if (argc > 6)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b06      	cmp	r3, #6
 800a63c:	dd01      	ble.n	800a642 <Cmd_heater_set_duty+0x1e>
        return CMDLINE_TOO_MANY_ARGS;
 800a63e:	2302      	movs	r3, #2
 800a640:	e03d      	b.n	800a6be <Cmd_heater_set_duty+0x9a>
    uint8_t duty;
    char buffer[80];
    for (uint8_t i = 0; i < 4; i++)
 800a642:	2300      	movs	r3, #0
 800a644:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 800a648:	e034      	b.n	800a6b4 <Cmd_heater_set_duty+0x90>
    {
        duty = atoi(argv[i + 1]);
 800a64a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800a64e:	3301      	adds	r3, #1
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	4413      	add	r3, r2
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4618      	mov	r0, r3
 800a65a:	f008 fdf9 	bl	8013250 <atoi>
 800a65e:	4603      	mov	r3, r0
 800a660:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        if (duty > 100) duty = 100;
 800a664:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a668:	2b64      	cmp	r3, #100	@ 0x64
 800a66a:	d902      	bls.n	800a672 <Cmd_heater_set_duty+0x4e>
 800a66c:	2364      	movs	r3, #100	@ 0x64
 800a66e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        temperature_set_heater_duty(i, duty);
 800a672:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800a676:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800a67a:	4611      	mov	r1, r2
 800a67c:	4618      	mov	r0, r3
 800a67e:	f005 f853 	bl	800f728 <temperature_set_heater_duty>
        snprintf(buffer, sizeof(buffer), "\r\n--> Heater duty[%d]: %i%%", i, duty);
 800a682:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 800a686:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a68a:	f107 000c 	add.w	r0, r7, #12
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	4613      	mov	r3, r2
 800a692:	4a0d      	ldr	r2, [pc, #52]	@ (800a6c8 <Cmd_heater_set_duty+0xa4>)
 800a694:	2150      	movs	r1, #80	@ 0x50
 800a696:	f008 fe63 	bl	8013360 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 800a69a:	4b0c      	ldr	r3, [pc, #48]	@ (800a6cc <Cmd_heater_set_duty+0xa8>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f107 020c 	add.w	r2, r7, #12
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fe fe7d 	bl	80093a4 <UART_SendStringRing>
    for (uint8_t i = 0; i < 4; i++)
 800a6aa:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 800a6b4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800a6b8:	2b03      	cmp	r3, #3
 800a6ba:	d9c6      	bls.n	800a64a <Cmd_heater_set_duty+0x26>
    }
    return CMDLINE_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3760      	adds	r7, #96	@ 0x60
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	08014b50 	.word	0x08014b50
 800a6cc:	2000349c 	.word	0x2000349c

0800a6d0 <Cmd_heater_get_duty>:

int Cmd_heater_get_duty(int argc, char *argv[])
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b09a      	sub	sp, #104	@ 0x68
 800a6d4:	af02      	add	r7, sp, #8
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
    if (argc > 2)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	dd01      	ble.n	800a6e4 <Cmd_heater_get_duty+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 800a6e0:	2302      	movs	r3, #2
 800a6e2:	e029      	b.n	800a738 <Cmd_heater_get_duty+0x68>
    uint8_t duty;
    char buffer[80];
    for (uint8_t i = 0; i < 4; i++)
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a6ea:	e020      	b.n	800a72e <Cmd_heater_get_duty+0x5e>
    {
        duty = temperature_get_heater_duty(i);
 800a6ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f005 f841 	bl	800f778 <temperature_get_heater_duty>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        snprintf(buffer, sizeof(buffer), "Heater duty[%d]: %i%%\r\n", i, duty);
 800a6fc:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800a700:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800a704:	f107 000c 	add.w	r0, r7, #12
 800a708:	9300      	str	r3, [sp, #0]
 800a70a:	4613      	mov	r3, r2
 800a70c:	4a0c      	ldr	r2, [pc, #48]	@ (800a740 <Cmd_heater_get_duty+0x70>)
 800a70e:	2150      	movs	r1, #80	@ 0x50
 800a710:	f008 fe26 	bl	8013360 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 800a714:	4b0b      	ldr	r3, [pc, #44]	@ (800a744 <Cmd_heater_get_duty+0x74>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f107 020c 	add.w	r2, r7, #12
 800a71c:	4611      	mov	r1, r2
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fe fe40 	bl	80093a4 <UART_SendStringRing>
    for (uint8_t i = 0; i < 4; i++)
 800a724:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a728:	3301      	adds	r3, #1
 800a72a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a72e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a732:	2b03      	cmp	r3, #3
 800a734:	d9da      	bls.n	800a6ec <Cmd_heater_get_duty+0x1c>
    }
    return CMDLINE_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3760      	adds	r7, #96	@ 0x60
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	08014b6c 	.word	0x08014b6c
 800a744:	2000349c 	.word	0x2000349c

0800a748 <Cmd_temp_set_auto>:

/* Command auto temperature */
int Cmd_temp_set_auto(int argc, char *argv[])
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2b05      	cmp	r3, #5
 800a756:	dc01      	bgt.n	800a75c <Cmd_temp_set_auto+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 800a758:	2303      	movs	r3, #3
 800a75a:	e03f      	b.n	800a7dc <Cmd_temp_set_auto+0x94>
    if (argc > 6)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b06      	cmp	r3, #6
 800a760:	dd01      	ble.n	800a766 <Cmd_temp_set_auto+0x1e>
        return CMDLINE_TOO_MANY_ARGS;
 800a762:	2302      	movs	r3, #2
 800a764:	e03a      	b.n	800a7dc <Cmd_temp_set_auto+0x94>
    uint8_t auto_0 = atoi(argv[1]) ? 1 : 0;
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	3304      	adds	r3, #4
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f008 fd6f 	bl	8013250 <atoi>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	bf14      	ite	ne
 800a778:	2301      	movne	r3, #1
 800a77a:	2300      	moveq	r3, #0
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	73fb      	strb	r3, [r7, #15]
    uint8_t auto_1 = atoi(argv[2]) ? 1 : 0;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	3308      	adds	r3, #8
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4618      	mov	r0, r3
 800a788:	f008 fd62 	bl	8013250 <atoi>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	bf14      	ite	ne
 800a792:	2301      	movne	r3, #1
 800a794:	2300      	moveq	r3, #0
 800a796:	b2db      	uxtb	r3, r3
 800a798:	73bb      	strb	r3, [r7, #14]
    uint8_t auto_2 = atoi(argv[3]) ? 1 : 0;
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	330c      	adds	r3, #12
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f008 fd55 	bl	8013250 <atoi>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	bf14      	ite	ne
 800a7ac:	2301      	movne	r3, #1
 800a7ae:	2300      	moveq	r3, #0
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	737b      	strb	r3, [r7, #13]
    uint8_t auto_3 = atoi(argv[4]) ? 1 : 0;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	3310      	adds	r3, #16
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f008 fd48 	bl	8013250 <atoi>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	bf14      	ite	ne
 800a7c6:	2301      	movne	r3, #1
 800a7c8:	2300      	moveq	r3, #0
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	733b      	strb	r3, [r7, #12]
    temperature_set_auto_ctrl(auto_0, auto_1, auto_2, auto_3);
 800a7ce:	7b3b      	ldrb	r3, [r7, #12]
 800a7d0:	7b7a      	ldrb	r2, [r7, #13]
 800a7d2:	7bb9      	ldrb	r1, [r7, #14]
 800a7d4:	7bf8      	ldrb	r0, [r7, #15]
 800a7d6:	f004 ffed 	bl	800f7b4 <temperature_set_auto_ctrl>
    return CMDLINE_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <Cmd_temp_auto_0>:

int Cmd_temp_auto_0(int argc, char *argv[])
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b0ba      	sub	sp, #232	@ 0xe8
 800a7e8:	af02      	add	r7, sp, #8
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2b05      	cmp	r3, #5
 800a7f2:	dc01      	bgt.n	800a7f8 <Cmd_temp_auto_0+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e0a8      	b.n	800a94a <Cmd_temp_auto_0+0x166>
    if (argc > 6)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2b06      	cmp	r3, #6
 800a7fc:	dd01      	ble.n	800a802 <Cmd_temp_auto_0+0x1e>
    	return CMDLINE_TOO_MANY_ARGS;
 800a7fe:	2302      	movs	r3, #2
 800a800:	e0a3      	b.n	800a94a <Cmd_temp_auto_0+0x166>
    uint8_t auto_0 = atoi(argv[1]) ? 1 : 0;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	3304      	adds	r3, #4
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4618      	mov	r0, r3
 800a80a:	f008 fd21 	bl	8013250 <atoi>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	bf14      	ite	ne
 800a814:	2301      	movne	r3, #1
 800a816:	2300      	moveq	r3, #0
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
    uint16_t vol_tec_0 = atoi(argv[2]);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	3308      	adds	r3, #8
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4618      	mov	r0, r3
 800a826:	f008 fd13 	bl	8013250 <atoi>
 800a82a:	4603      	mov	r3, r0
 800a82c:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    uint8_t duty_heater_0 = atoi(argv[3]);
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	330c      	adds	r3, #12
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4618      	mov	r0, r3
 800a838:	f008 fd0a 	bl	8013250 <atoi>
 800a83c:	4603      	mov	r3, r0
 800a83e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    int16_t temp_setpoint_0 = atoi(argv[4]);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	3310      	adds	r3, #16
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4618      	mov	r0, r3
 800a84a:	f008 fd01 	bl	8013250 <atoi>
 800a84e:	4603      	mov	r3, r0
 800a850:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8

    uint32_t data = 1;
 800a854:	2301      	movs	r3, #1
 800a856:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	uint8_t tec_init = lt8722_init(0);
 800a85a:	2000      	movs	r0, #0
 800a85c:	f002 fa6c 	bl	800cd38 <lt8722_init>
 800a860:	4603      	mov	r3, r0
 800a862:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
	LL_mDelay(10);
 800a866:	200a      	movs	r0, #10
 800a868:	f008 fb32 	bl	8012ed0 <LL_mDelay>
	if (!tec_init) lt8722_set_swen_req(0, LT8722_SWEN_REQ_DISABLED);
 800a86c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800a870:	2b00      	cmp	r3, #0
 800a872:	d103      	bne.n	800a87c <Cmd_temp_auto_0+0x98>
 800a874:	2100      	movs	r1, #0
 800a876:	2000      	movs	r0, #0
 800a878:	f002 fa0d 	bl	800cc96 <lt8722_set_swen_req>
	lt8722_reg_read(0, LT8722_SPIS_STATUS, &data);
 800a87c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a880:	461a      	mov	r2, r3
 800a882:	2101      	movs	r1, #1
 800a884:	2000      	movs	r0, #0
 800a886:	f002 f965 	bl	800cb54 <lt8722_reg_read>
	if (!data)
 800a88a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d133      	bne.n	800a8fa <Cmd_temp_auto_0+0x116>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 0 init success");
 800a892:	4b30      	ldr	r3, [pc, #192]	@ (800a954 <Cmd_temp_auto_0+0x170>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4930      	ldr	r1, [pc, #192]	@ (800a958 <Cmd_temp_auto_0+0x174>)
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fe fd83 	bl	80093a4 <UART_SendStringRing>
	{
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 0 init fail");
		return CMDLINE_OK;
	}

    temperature_set_tec_vol(0, vol_tec_0);
 800a89e:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	f004 fef7 	bl	800f698 <temperature_set_tec_vol>
    temperature_set_heater_duty(0, duty_heater_0);
 800a8aa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	f004 ff39 	bl	800f728 <temperature_set_heater_duty>
    temperature_set_setpoint(0, temp_setpoint_0);
 800a8b6:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	@ 0xd8
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	2000      	movs	r0, #0
 800a8be:	f004 fec1 	bl	800f644 <temperature_set_setpoint>

    char buffer[200];
	snprintf(buffer, sizeof(buffer), "\r\n--> Tec vol[0]: %d mV \r\n--> Heater duty[0]: %d%% \r\n--> Temp_set[0]: %i", vol_tec_0, duty_heater_0, temp_setpoint_0);
 800a8c2:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	@ 0xdc
 800a8c6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a8ca:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	@ 0xd8
 800a8ce:	f107 0008 	add.w	r0, r7, #8
 800a8d2:	9201      	str	r2, [sp, #4]
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	4a20      	ldr	r2, [pc, #128]	@ (800a95c <Cmd_temp_auto_0+0x178>)
 800a8da:	21c8      	movs	r1, #200	@ 0xc8
 800a8dc:	f008 fd40 	bl	8013360 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800a8e0:	4b1c      	ldr	r3, [pc, #112]	@ (800a954 <Cmd_temp_auto_0+0x170>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f107 0208 	add.w	r2, r7, #8
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fe fd5a 	bl	80093a4 <UART_SendStringRing>
    if (auto_0)
 800a8f0:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d018      	beq.n	800a92a <Cmd_temp_auto_0+0x146>
 800a8f8:	e007      	b.n	800a90a <Cmd_temp_auto_0+0x126>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 0 init fail");
 800a8fa:	4b16      	ldr	r3, [pc, #88]	@ (800a954 <Cmd_temp_auto_0+0x170>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4918      	ldr	r1, [pc, #96]	@ (800a960 <Cmd_temp_auto_0+0x17c>)
 800a900:	4618      	mov	r0, r3
 800a902:	f7fe fd4f 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_OK;
 800a906:	2300      	movs	r3, #0
 800a908:	e01f      	b.n	800a94a <Cmd_temp_auto_0+0x166>
    {
    	s_Temperature_CurrentState.Temp_auto |= 0x01;
 800a90a:	4b16      	ldr	r3, [pc, #88]	@ (800a964 <Cmd_temp_auto_0+0x180>)
 800a90c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a910:	f043 0301 	orr.w	r3, r3, #1
 800a914:	b2da      	uxtb	r2, r3
 800a916:	4b13      	ldr	r3, [pc, #76]	@ (800a964 <Cmd_temp_auto_0+0x180>)
 800a918:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    	UART_SendStringRing(UART_CMDLINE, "\r\n--> Temp 0 is auto");
 800a91c:	4b0d      	ldr	r3, [pc, #52]	@ (800a954 <Cmd_temp_auto_0+0x170>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4911      	ldr	r1, [pc, #68]	@ (800a968 <Cmd_temp_auto_0+0x184>)
 800a922:	4618      	mov	r0, r3
 800a924:	f7fe fd3e 	bl	80093a4 <UART_SendStringRing>
 800a928:	e00e      	b.n	800a948 <Cmd_temp_auto_0+0x164>
    }
    else
    {
    	s_Temperature_CurrentState.Temp_auto &= ~0x01;
 800a92a:	4b0e      	ldr	r3, [pc, #56]	@ (800a964 <Cmd_temp_auto_0+0x180>)
 800a92c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a930:	f023 0301 	bic.w	r3, r3, #1
 800a934:	b2da      	uxtb	r2, r3
 800a936:	4b0b      	ldr	r3, [pc, #44]	@ (800a964 <Cmd_temp_auto_0+0x180>)
 800a938:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    	UART_SendStringRing(UART_CMDLINE, "\r\n--> Temp 0 is off");
 800a93c:	4b05      	ldr	r3, [pc, #20]	@ (800a954 <Cmd_temp_auto_0+0x170>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	490a      	ldr	r1, [pc, #40]	@ (800a96c <Cmd_temp_auto_0+0x188>)
 800a942:	4618      	mov	r0, r3
 800a944:	f7fe fd2e 	bl	80093a4 <UART_SendStringRing>
    }
	return CMDLINE_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	37e0      	adds	r7, #224	@ 0xe0
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	2000349c 	.word	0x2000349c
 800a958:	08014b84 	.word	0x08014b84
 800a95c:	08014bb8 	.word	0x08014bb8
 800a960:	08014ba0 	.word	0x08014ba0
 800a964:	20002348 	.word	0x20002348
 800a968:	08014c04 	.word	0x08014c04
 800a96c:	08014c1c 	.word	0x08014c1c

0800a970 <Cmd_temp_auto_1>:

int Cmd_temp_auto_1(int argc, char *argv[])
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b0ba      	sub	sp, #232	@ 0xe8
 800a974:	af02      	add	r7, sp, #8
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2b05      	cmp	r3, #5
 800a97e:	dc01      	bgt.n	800a984 <Cmd_temp_auto_1+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 800a980:	2303      	movs	r3, #3
 800a982:	e0a8      	b.n	800aad6 <Cmd_temp_auto_1+0x166>
    if (argc > 6)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b06      	cmp	r3, #6
 800a988:	dd01      	ble.n	800a98e <Cmd_temp_auto_1+0x1e>
    	return CMDLINE_TOO_MANY_ARGS;
 800a98a:	2302      	movs	r3, #2
 800a98c:	e0a3      	b.n	800aad6 <Cmd_temp_auto_1+0x166>

    uint8_t auto_1 = atoi(argv[1]) ? 1 : 0;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	3304      	adds	r3, #4
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4618      	mov	r0, r3
 800a996:	f008 fc5b 	bl	8013250 <atoi>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	bf14      	ite	ne
 800a9a0:	2301      	movne	r3, #1
 800a9a2:	2300      	moveq	r3, #0
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
    uint16_t vol_tec_1 = atoi(argv[2]);
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f008 fc4d 	bl	8013250 <atoi>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    uint8_t duty_heater_1 = atoi(argv[3]);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	330c      	adds	r3, #12
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f008 fc44 	bl	8013250 <atoi>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    int16_t temp_setpoint_1 = atoi(argv[4]);
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	3310      	adds	r3, #16
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f008 fc3b 	bl	8013250 <atoi>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8

    uint32_t data = 1;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	uint8_t tec_init = lt8722_init(1);
 800a9e6:	2001      	movs	r0, #1
 800a9e8:	f002 f9a6 	bl	800cd38 <lt8722_init>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
	LL_mDelay(10);
 800a9f2:	200a      	movs	r0, #10
 800a9f4:	f008 fa6c 	bl	8012ed0 <LL_mDelay>
	if (!tec_init) lt8722_set_swen_req(1, LT8722_SWEN_REQ_DISABLED);
 800a9f8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d103      	bne.n	800aa08 <Cmd_temp_auto_1+0x98>
 800aa00:	2100      	movs	r1, #0
 800aa02:	2001      	movs	r0, #1
 800aa04:	f002 f947 	bl	800cc96 <lt8722_set_swen_req>
	lt8722_reg_read(1, LT8722_SPIS_STATUS, &data);
 800aa08:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	2101      	movs	r1, #1
 800aa10:	2001      	movs	r0, #1
 800aa12:	f002 f89f 	bl	800cb54 <lt8722_reg_read>
	if (!data)
 800aa16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d133      	bne.n	800aa86 <Cmd_temp_auto_1+0x116>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 1 init success");
 800aa1e:	4b30      	ldr	r3, [pc, #192]	@ (800aae0 <Cmd_temp_auto_1+0x170>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4930      	ldr	r1, [pc, #192]	@ (800aae4 <Cmd_temp_auto_1+0x174>)
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fe fcbd 	bl	80093a4 <UART_SendStringRing>
	{
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 1 init fail");
		return CMDLINE_OK;
	}

    temperature_set_tec_vol(1, vol_tec_1);
 800aa2a:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 800aa2e:	4619      	mov	r1, r3
 800aa30:	2001      	movs	r0, #1
 800aa32:	f004 fe31 	bl	800f698 <temperature_set_tec_vol>
    temperature_set_heater_duty(1, duty_heater_1);
 800aa36:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	2001      	movs	r0, #1
 800aa3e:	f004 fe73 	bl	800f728 <temperature_set_heater_duty>
    temperature_set_setpoint(1, temp_setpoint_1);
 800aa42:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	@ 0xd8
 800aa46:	4619      	mov	r1, r3
 800aa48:	2001      	movs	r0, #1
 800aa4a:	f004 fdfb 	bl	800f644 <temperature_set_setpoint>
    char buffer[200];
	snprintf(buffer, sizeof(buffer), "\r\n--> Tec vol[1]: %d mV \r\n--> Heater duty[1]: %d%% \r\n--> Temp_set[1]: %i", vol_tec_1, duty_heater_1, temp_setpoint_1);
 800aa4e:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	@ 0xdc
 800aa52:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800aa56:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	@ 0xd8
 800aa5a:	f107 0008 	add.w	r0, r7, #8
 800aa5e:	9201      	str	r2, [sp, #4]
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	460b      	mov	r3, r1
 800aa64:	4a20      	ldr	r2, [pc, #128]	@ (800aae8 <Cmd_temp_auto_1+0x178>)
 800aa66:	21c8      	movs	r1, #200	@ 0xc8
 800aa68:	f008 fc7a 	bl	8013360 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800aa6c:	4b1c      	ldr	r3, [pc, #112]	@ (800aae0 <Cmd_temp_auto_1+0x170>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f107 0208 	add.w	r2, r7, #8
 800aa74:	4611      	mov	r1, r2
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fe fc94 	bl	80093a4 <UART_SendStringRing>
    if (auto_1)
 800aa7c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d018      	beq.n	800aab6 <Cmd_temp_auto_1+0x146>
 800aa84:	e007      	b.n	800aa96 <Cmd_temp_auto_1+0x126>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 1 init fail");
 800aa86:	4b16      	ldr	r3, [pc, #88]	@ (800aae0 <Cmd_temp_auto_1+0x170>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4918      	ldr	r1, [pc, #96]	@ (800aaec <Cmd_temp_auto_1+0x17c>)
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7fe fc89 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	e01f      	b.n	800aad6 <Cmd_temp_auto_1+0x166>
    {
    	s_Temperature_CurrentState.Temp_auto |= (0x01 << 1);
 800aa96:	4b16      	ldr	r3, [pc, #88]	@ (800aaf0 <Cmd_temp_auto_1+0x180>)
 800aa98:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800aa9c:	f043 0302 	orr.w	r3, r3, #2
 800aaa0:	b2da      	uxtb	r2, r3
 800aaa2:	4b13      	ldr	r3, [pc, #76]	@ (800aaf0 <Cmd_temp_auto_1+0x180>)
 800aaa4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    	UART_SendStringRing(UART_CMDLINE, "\r\n--> Temp 1 is auto");
 800aaa8:	4b0d      	ldr	r3, [pc, #52]	@ (800aae0 <Cmd_temp_auto_1+0x170>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4911      	ldr	r1, [pc, #68]	@ (800aaf4 <Cmd_temp_auto_1+0x184>)
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fe fc78 	bl	80093a4 <UART_SendStringRing>
 800aab4:	e00e      	b.n	800aad4 <Cmd_temp_auto_1+0x164>
    }
    else
    {
    	s_Temperature_CurrentState.Temp_auto &= ~(0x01 << 1);
 800aab6:	4b0e      	ldr	r3, [pc, #56]	@ (800aaf0 <Cmd_temp_auto_1+0x180>)
 800aab8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800aabc:	f023 0302 	bic.w	r3, r3, #2
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	4b0b      	ldr	r3, [pc, #44]	@ (800aaf0 <Cmd_temp_auto_1+0x180>)
 800aac4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    	UART_SendStringRing(UART_CMDLINE, "\r\n--> Temp 1 is off");
 800aac8:	4b05      	ldr	r3, [pc, #20]	@ (800aae0 <Cmd_temp_auto_1+0x170>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	490a      	ldr	r1, [pc, #40]	@ (800aaf8 <Cmd_temp_auto_1+0x188>)
 800aace:	4618      	mov	r0, r3
 800aad0:	f7fe fc68 	bl	80093a4 <UART_SendStringRing>
    }
	return CMDLINE_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	37e0      	adds	r7, #224	@ 0xe0
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	2000349c 	.word	0x2000349c
 800aae4:	08014c30 	.word	0x08014c30
 800aae8:	08014c64 	.word	0x08014c64
 800aaec:	08014c4c 	.word	0x08014c4c
 800aaf0:	20002348 	.word	0x20002348
 800aaf4:	08014cb0 	.word	0x08014cb0
 800aaf8:	08014cc8 	.word	0x08014cc8

0800aafc <Cmd_temp_auto_2>:

int Cmd_temp_auto_2(int argc, char *argv[])
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b0ba      	sub	sp, #232	@ 0xe8
 800ab00:	af02      	add	r7, sp, #8
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2b05      	cmp	r3, #5
 800ab0a:	dc01      	bgt.n	800ab10 <Cmd_temp_auto_2+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	e0a8      	b.n	800ac62 <Cmd_temp_auto_2+0x166>
    if (argc > 6)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b06      	cmp	r3, #6
 800ab14:	dd01      	ble.n	800ab1a <Cmd_temp_auto_2+0x1e>
    	return CMDLINE_TOO_MANY_ARGS;
 800ab16:	2302      	movs	r3, #2
 800ab18:	e0a3      	b.n	800ac62 <Cmd_temp_auto_2+0x166>

    uint8_t auto_2 = atoi(argv[1]) ? 1 : 0;
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f008 fb95 	bl	8013250 <atoi>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	bf14      	ite	ne
 800ab2c:	2301      	movne	r3, #1
 800ab2e:	2300      	moveq	r3, #0
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
    uint16_t vol_tec_2 = atoi(argv[2]);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	3308      	adds	r3, #8
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f008 fb87 	bl	8013250 <atoi>
 800ab42:	4603      	mov	r3, r0
 800ab44:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    uint8_t duty_heater_2 = atoi(argv[3]);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	330c      	adds	r3, #12
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f008 fb7e 	bl	8013250 <atoi>
 800ab54:	4603      	mov	r3, r0
 800ab56:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    int16_t temp_setpoint_2 = atoi(argv[4]);
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	3310      	adds	r3, #16
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4618      	mov	r0, r3
 800ab62:	f008 fb75 	bl	8013250 <atoi>
 800ab66:	4603      	mov	r3, r0
 800ab68:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8

    uint32_t data = 1;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	uint8_t tec_init = lt8722_init(2);
 800ab72:	2002      	movs	r0, #2
 800ab74:	f002 f8e0 	bl	800cd38 <lt8722_init>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
	LL_mDelay(10);
 800ab7e:	200a      	movs	r0, #10
 800ab80:	f008 f9a6 	bl	8012ed0 <LL_mDelay>
	if (!tec_init) lt8722_set_swen_req(2, LT8722_SWEN_REQ_DISABLED);
 800ab84:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d103      	bne.n	800ab94 <Cmd_temp_auto_2+0x98>
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	2002      	movs	r0, #2
 800ab90:	f002 f881 	bl	800cc96 <lt8722_set_swen_req>
	lt8722_reg_read(2, LT8722_SPIS_STATUS, &data);
 800ab94:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800ab98:	461a      	mov	r2, r3
 800ab9a:	2101      	movs	r1, #1
 800ab9c:	2002      	movs	r0, #2
 800ab9e:	f001 ffd9 	bl	800cb54 <lt8722_reg_read>
	if (!data)
 800aba2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d133      	bne.n	800ac12 <Cmd_temp_auto_2+0x116>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 2 init success");
 800abaa:	4b30      	ldr	r3, [pc, #192]	@ (800ac6c <Cmd_temp_auto_2+0x170>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4930      	ldr	r1, [pc, #192]	@ (800ac70 <Cmd_temp_auto_2+0x174>)
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7fe fbf7 	bl	80093a4 <UART_SendStringRing>
	{
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 2 init fail");
		return CMDLINE_OK;
	}

    temperature_set_tec_vol(2, vol_tec_2);
 800abb6:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 800abba:	4619      	mov	r1, r3
 800abbc:	2002      	movs	r0, #2
 800abbe:	f004 fd6b 	bl	800f698 <temperature_set_tec_vol>
    temperature_set_heater_duty(2, duty_heater_2);
 800abc2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800abc6:	4619      	mov	r1, r3
 800abc8:	2002      	movs	r0, #2
 800abca:	f004 fdad 	bl	800f728 <temperature_set_heater_duty>
    temperature_set_setpoint(2, temp_setpoint_2);
 800abce:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	@ 0xd8
 800abd2:	4619      	mov	r1, r3
 800abd4:	2002      	movs	r0, #2
 800abd6:	f004 fd35 	bl	800f644 <temperature_set_setpoint>
    char buffer[200];
	snprintf(buffer, sizeof(buffer), "\r\n--> Tec vol[2]: %d mV \r\n--> Heater duty[2]: %d%% \r\n--> Temp_set[2]: %i", vol_tec_2, duty_heater_2, temp_setpoint_2);
 800abda:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	@ 0xdc
 800abde:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800abe2:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	@ 0xd8
 800abe6:	f107 0008 	add.w	r0, r7, #8
 800abea:	9201      	str	r2, [sp, #4]
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	460b      	mov	r3, r1
 800abf0:	4a20      	ldr	r2, [pc, #128]	@ (800ac74 <Cmd_temp_auto_2+0x178>)
 800abf2:	21c8      	movs	r1, #200	@ 0xc8
 800abf4:	f008 fbb4 	bl	8013360 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800abf8:	4b1c      	ldr	r3, [pc, #112]	@ (800ac6c <Cmd_temp_auto_2+0x170>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f107 0208 	add.w	r2, r7, #8
 800ac00:	4611      	mov	r1, r2
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fe fbce 	bl	80093a4 <UART_SendStringRing>
    if (auto_2)
 800ac08:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d018      	beq.n	800ac42 <Cmd_temp_auto_2+0x146>
 800ac10:	e007      	b.n	800ac22 <Cmd_temp_auto_2+0x126>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 2 init fail");
 800ac12:	4b16      	ldr	r3, [pc, #88]	@ (800ac6c <Cmd_temp_auto_2+0x170>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4918      	ldr	r1, [pc, #96]	@ (800ac78 <Cmd_temp_auto_2+0x17c>)
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fe fbc3 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_OK;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	e01f      	b.n	800ac62 <Cmd_temp_auto_2+0x166>
    {
    	s_Temperature_CurrentState.Temp_auto |= (0x01 << 2);
 800ac22:	4b16      	ldr	r3, [pc, #88]	@ (800ac7c <Cmd_temp_auto_2+0x180>)
 800ac24:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800ac28:	f043 0304 	orr.w	r3, r3, #4
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	4b13      	ldr	r3, [pc, #76]	@ (800ac7c <Cmd_temp_auto_2+0x180>)
 800ac30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    	UART_SendStringRing(UART_CMDLINE, "\r\n--> Temp 2 is auto");
 800ac34:	4b0d      	ldr	r3, [pc, #52]	@ (800ac6c <Cmd_temp_auto_2+0x170>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4911      	ldr	r1, [pc, #68]	@ (800ac80 <Cmd_temp_auto_2+0x184>)
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fe fbb2 	bl	80093a4 <UART_SendStringRing>
 800ac40:	e00e      	b.n	800ac60 <Cmd_temp_auto_2+0x164>
    }
    else
    {
    	s_Temperature_CurrentState.Temp_auto &= ~(0x01 << 2);
 800ac42:	4b0e      	ldr	r3, [pc, #56]	@ (800ac7c <Cmd_temp_auto_2+0x180>)
 800ac44:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800ac48:	f023 0304 	bic.w	r3, r3, #4
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ac7c <Cmd_temp_auto_2+0x180>)
 800ac50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    	UART_SendStringRing(UART_CMDLINE, "\r\n--> Temp 2 is off");
 800ac54:	4b05      	ldr	r3, [pc, #20]	@ (800ac6c <Cmd_temp_auto_2+0x170>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	490a      	ldr	r1, [pc, #40]	@ (800ac84 <Cmd_temp_auto_2+0x188>)
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7fe fba2 	bl	80093a4 <UART_SendStringRing>
    }
	return CMDLINE_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	37e0      	adds	r7, #224	@ 0xe0
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	2000349c 	.word	0x2000349c
 800ac70:	08014cdc 	.word	0x08014cdc
 800ac74:	08014d10 	.word	0x08014d10
 800ac78:	08014cf8 	.word	0x08014cf8
 800ac7c:	20002348 	.word	0x20002348
 800ac80:	08014d5c 	.word	0x08014d5c
 800ac84:	08014d74 	.word	0x08014d74

0800ac88 <Cmd_temp_auto_3>:

int Cmd_temp_auto_3(int argc, char *argv[])
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b0ba      	sub	sp, #232	@ 0xe8
 800ac8c:	af02      	add	r7, sp, #8
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2b05      	cmp	r3, #5
 800ac96:	dc01      	bgt.n	800ac9c <Cmd_temp_auto_3+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	e0a8      	b.n	800adee <Cmd_temp_auto_3+0x166>
    if (argc > 6)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b06      	cmp	r3, #6
 800aca0:	dd01      	ble.n	800aca6 <Cmd_temp_auto_3+0x1e>
    	return CMDLINE_TOO_MANY_ARGS;
 800aca2:	2302      	movs	r3, #2
 800aca4:	e0a3      	b.n	800adee <Cmd_temp_auto_3+0x166>

    uint8_t auto_3 = atoi(argv[1]) ? 1 : 0;
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	3304      	adds	r3, #4
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4618      	mov	r0, r3
 800acae:	f008 facf 	bl	8013250 <atoi>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	bf14      	ite	ne
 800acb8:	2301      	movne	r3, #1
 800acba:	2300      	moveq	r3, #0
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
    uint16_t vol_tec_3 = atoi(argv[2]);
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	3308      	adds	r3, #8
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4618      	mov	r0, r3
 800acca:	f008 fac1 	bl	8013250 <atoi>
 800acce:	4603      	mov	r3, r0
 800acd0:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    uint8_t duty_heater_3 = atoi(argv[3]);
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	330c      	adds	r3, #12
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4618      	mov	r0, r3
 800acdc:	f008 fab8 	bl	8013250 <atoi>
 800ace0:	4603      	mov	r3, r0
 800ace2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    int16_t temp_setpoint_3 = atoi(argv[4]);
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	3310      	adds	r3, #16
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4618      	mov	r0, r3
 800acee:	f008 faaf 	bl	8013250 <atoi>
 800acf2:	4603      	mov	r3, r0
 800acf4:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8

    uint32_t data = 1;
 800acf8:	2301      	movs	r3, #1
 800acfa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	uint8_t tec_init = lt8722_init(3);
 800acfe:	2003      	movs	r0, #3
 800ad00:	f002 f81a 	bl	800cd38 <lt8722_init>
 800ad04:	4603      	mov	r3, r0
 800ad06:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
	LL_mDelay(10);
 800ad0a:	200a      	movs	r0, #10
 800ad0c:	f008 f8e0 	bl	8012ed0 <LL_mDelay>
	if (!tec_init) lt8722_set_swen_req(3, LT8722_SWEN_REQ_DISABLED);
 800ad10:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d103      	bne.n	800ad20 <Cmd_temp_auto_3+0x98>
 800ad18:	2100      	movs	r1, #0
 800ad1a:	2003      	movs	r0, #3
 800ad1c:	f001 ffbb 	bl	800cc96 <lt8722_set_swen_req>
	lt8722_reg_read(3, LT8722_SPIS_STATUS, &data);
 800ad20:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800ad24:	461a      	mov	r2, r3
 800ad26:	2101      	movs	r1, #1
 800ad28:	2003      	movs	r0, #3
 800ad2a:	f001 ff13 	bl	800cb54 <lt8722_reg_read>
	if (!data)
 800ad2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d133      	bne.n	800ad9e <Cmd_temp_auto_3+0x116>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 3 init success");
 800ad36:	4b30      	ldr	r3, [pc, #192]	@ (800adf8 <Cmd_temp_auto_3+0x170>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4930      	ldr	r1, [pc, #192]	@ (800adfc <Cmd_temp_auto_3+0x174>)
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fe fb31 	bl	80093a4 <UART_SendStringRing>
	{
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 3 init fail");
		return CMDLINE_OK;
	}

    temperature_set_tec_vol(3, vol_tec_3);
 800ad42:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 800ad46:	4619      	mov	r1, r3
 800ad48:	2003      	movs	r0, #3
 800ad4a:	f004 fca5 	bl	800f698 <temperature_set_tec_vol>
    temperature_set_heater_duty(3, duty_heater_3);
 800ad4e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800ad52:	4619      	mov	r1, r3
 800ad54:	2003      	movs	r0, #3
 800ad56:	f004 fce7 	bl	800f728 <temperature_set_heater_duty>
    temperature_set_setpoint(3, temp_setpoint_3);
 800ad5a:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	@ 0xd8
 800ad5e:	4619      	mov	r1, r3
 800ad60:	2003      	movs	r0, #3
 800ad62:	f004 fc6f 	bl	800f644 <temperature_set_setpoint>
    char buffer[200];
	snprintf(buffer, sizeof(buffer), "\r\n--> Tec vol[3]: %d mV \r\n--> Heater duty[3]: %d%% \r\n--> Temp_set[3]: %i", vol_tec_3, duty_heater_3, temp_setpoint_3);
 800ad66:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	@ 0xdc
 800ad6a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800ad6e:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	@ 0xd8
 800ad72:	f107 0008 	add.w	r0, r7, #8
 800ad76:	9201      	str	r2, [sp, #4]
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	4a20      	ldr	r2, [pc, #128]	@ (800ae00 <Cmd_temp_auto_3+0x178>)
 800ad7e:	21c8      	movs	r1, #200	@ 0xc8
 800ad80:	f008 faee 	bl	8013360 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800ad84:	4b1c      	ldr	r3, [pc, #112]	@ (800adf8 <Cmd_temp_auto_3+0x170>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f107 0208 	add.w	r2, r7, #8
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fe fb08 	bl	80093a4 <UART_SendStringRing>
    if (auto_3)
 800ad94:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d018      	beq.n	800adce <Cmd_temp_auto_3+0x146>
 800ad9c:	e007      	b.n	800adae <Cmd_temp_auto_3+0x126>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 3 init fail");
 800ad9e:	4b16      	ldr	r3, [pc, #88]	@ (800adf8 <Cmd_temp_auto_3+0x170>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4918      	ldr	r1, [pc, #96]	@ (800ae04 <Cmd_temp_auto_3+0x17c>)
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fe fafd 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_OK;
 800adaa:	2300      	movs	r3, #0
 800adac:	e01f      	b.n	800adee <Cmd_temp_auto_3+0x166>
    {
    	s_Temperature_CurrentState.Temp_auto |= (0x01 << 3);
 800adae:	4b16      	ldr	r3, [pc, #88]	@ (800ae08 <Cmd_temp_auto_3+0x180>)
 800adb0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800adb4:	f043 0308 	orr.w	r3, r3, #8
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	4b13      	ldr	r3, [pc, #76]	@ (800ae08 <Cmd_temp_auto_3+0x180>)
 800adbc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    	UART_SendStringRing(UART_CMDLINE, "\r\n--> Temp 3 is auto");
 800adc0:	4b0d      	ldr	r3, [pc, #52]	@ (800adf8 <Cmd_temp_auto_3+0x170>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4911      	ldr	r1, [pc, #68]	@ (800ae0c <Cmd_temp_auto_3+0x184>)
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7fe faec 	bl	80093a4 <UART_SendStringRing>
 800adcc:	e00e      	b.n	800adec <Cmd_temp_auto_3+0x164>
    }
    else
    {
    	s_Temperature_CurrentState.Temp_auto &= ~(0x01 << 3);
 800adce:	4b0e      	ldr	r3, [pc, #56]	@ (800ae08 <Cmd_temp_auto_3+0x180>)
 800add0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800add4:	f023 0308 	bic.w	r3, r3, #8
 800add8:	b2da      	uxtb	r2, r3
 800adda:	4b0b      	ldr	r3, [pc, #44]	@ (800ae08 <Cmd_temp_auto_3+0x180>)
 800addc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    	UART_SendStringRing(UART_CMDLINE, "\r\n--> Temp 3 is off");
 800ade0:	4b05      	ldr	r3, [pc, #20]	@ (800adf8 <Cmd_temp_auto_3+0x170>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	490a      	ldr	r1, [pc, #40]	@ (800ae10 <Cmd_temp_auto_3+0x188>)
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fe fadc 	bl	80093a4 <UART_SendStringRing>
    }
	return CMDLINE_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	37e0      	adds	r7, #224	@ 0xe0
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	2000349c 	.word	0x2000349c
 800adfc:	08014d88 	.word	0x08014d88
 800ae00:	08014dbc 	.word	0x08014dbc
 800ae04:	08014da4 	.word	0x08014da4
 800ae08:	20002348 	.word	0x20002348
 800ae0c:	08014e08 	.word	0x08014e08
 800ae10:	08014e20 	.word	0x08014e20

0800ae14 <Cmd_ir_set_duty>:

/* Command for ir led */
int Cmd_ir_set_duty(int argc, char *argv[])
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b098      	sub	sp, #96	@ 0x60
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b05      	cmp	r3, #5
 800ae22:	dc01      	bgt.n	800ae28 <Cmd_ir_set_duty+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 800ae24:	2303      	movs	r3, #3
 800ae26:	e02a      	b.n	800ae7e <Cmd_ir_set_duty+0x6a>
    if (argc > 6)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b06      	cmp	r3, #6
 800ae2c:	dd01      	ble.n	800ae32 <Cmd_ir_set_duty+0x1e>
        return CMDLINE_TOO_MANY_ARGS;
 800ae2e:	2302      	movs	r3, #2
 800ae30:	e025      	b.n	800ae7e <Cmd_ir_set_duty+0x6a>
    char buffer[80];
	uint8_t duty = atoi(argv[1]);
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	3304      	adds	r3, #4
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f008 fa09 	bl	8013250 <atoi>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (duty > 100) duty = 100;
 800ae44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae48:	2b64      	cmp	r3, #100	@ 0x64
 800ae4a:	d902      	bls.n	800ae52 <Cmd_ir_set_duty+0x3e>
 800ae4c:	2364      	movs	r3, #100	@ 0x64
 800ae4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	ir_led_set_duty(duty);
 800ae52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae56:	4618      	mov	r0, r3
 800ae58:	f001 f918 	bl	800c08c <ir_led_set_duty>
    snprintf(buffer, sizeof(buffer), "IR LED duty: %i%%\r\n", duty);
 800ae5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae60:	f107 000c 	add.w	r0, r7, #12
 800ae64:	4a08      	ldr	r2, [pc, #32]	@ (800ae88 <Cmd_ir_set_duty+0x74>)
 800ae66:	2150      	movs	r1, #80	@ 0x50
 800ae68:	f008 fa7a 	bl	8013360 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 800ae6c:	4b07      	ldr	r3, [pc, #28]	@ (800ae8c <Cmd_ir_set_duty+0x78>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f107 020c 	add.w	r2, r7, #12
 800ae74:	4611      	mov	r1, r2
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fe fa94 	bl	80093a4 <UART_SendStringRing>
    return CMDLINE_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3760      	adds	r7, #96	@ 0x60
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	08014e34 	.word	0x08014e34
 800ae8c:	2000349c 	.word	0x2000349c

0800ae90 <Cmd_ir_get_duty>:

int Cmd_ir_get_duty(int argc, char *argv[])
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b08e      	sub	sp, #56	@ 0x38
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
    if (argc > 2)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	dd01      	ble.n	800aea4 <Cmd_ir_get_duty+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 800aea0:	2302      	movs	r3, #2
 800aea2:	e015      	b.n	800aed0 <Cmd_ir_get_duty+0x40>
    char buffer[40];
    uint8_t duty = ir_led_get_duty();
 800aea4:	f001 f912 	bl	800c0cc <ir_led_get_duty>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	snprintf(buffer, sizeof(buffer), "Heater duty: %i%%\r\n", duty);
 800aeae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aeb2:	f107 000c 	add.w	r0, r7, #12
 800aeb6:	4a08      	ldr	r2, [pc, #32]	@ (800aed8 <Cmd_ir_get_duty+0x48>)
 800aeb8:	2128      	movs	r1, #40	@ 0x28
 800aeba:	f008 fa51 	bl	8013360 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800aebe:	4b07      	ldr	r3, [pc, #28]	@ (800aedc <Cmd_ir_get_duty+0x4c>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f107 020c 	add.w	r2, r7, #12
 800aec6:	4611      	mov	r1, r2
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7fe fa6b 	bl	80093a4 <UART_SendStringRing>
    return CMDLINE_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3738      	adds	r7, #56	@ 0x38
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	08014e48 	.word	0x08014e48
 800aedc:	2000349c 	.word	0x2000349c

0800aee0 <Cmd_acceleration_gyroscope_get>:

/* Command for i2c sensor */
int Cmd_acceleration_gyroscope_get(int argc, char *argv[])
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
    return (CMDLINE_OK);
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <Cmd_pressure_get>:
int Cmd_pressure_get(int argc, char *argv[])
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
    return (CMDLINE_OK);
 800af02:	2300      	movs	r3, #0
}
 800af04:	4618      	mov	r0, r3
 800af06:	370c      	adds	r7, #12
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <Cmd_int_ls_dac>:
//    return CMDLINE_OK;
//}

/* Internal laser board commands */
int Cmd_int_ls_dac(int argc, char *argv[])
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b092      	sub	sp, #72	@ 0x48
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
    if (argc > 3)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2b03      	cmp	r3, #3
 800af1e:	dd01      	ble.n	800af24 <Cmd_int_ls_dac+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 800af20:	2302      	movs	r3, #2
 800af22:	e02b      	b.n	800af7c <Cmd_int_ls_dac+0x6c>
    if (argc < 3)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b02      	cmp	r3, #2
 800af28:	dc01      	bgt.n	800af2e <Cmd_int_ls_dac+0x1e>
        return CMDLINE_TOO_FEW_ARGS;
 800af2a:	2303      	movs	r3, #3
 800af2c:	e026      	b.n	800af7c <Cmd_int_ls_dac+0x6c>
    uint16_t voltage = atoi(argv[1]);
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	3304      	adds	r3, #4
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4618      	mov	r0, r3
 800af36:	f008 f98b 	bl	8013250 <atoi>
 800af3a:	4603      	mov	r3, r0
 800af3c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if (voltage > 255)
 800af40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800af44:	2bff      	cmp	r3, #255	@ 0xff
 800af46:	d901      	bls.n	800af4c <Cmd_int_ls_dac+0x3c>
        return CMDLINE_INVALID_ARG;
 800af48:	2304      	movs	r3, #4
 800af4a:	e017      	b.n	800af7c <Cmd_int_ls_dac+0x6c>
    char buffer[60];
    snprintf(buffer, sizeof(buffer), "\r\n--> Int Laser DAC: %d", voltage);
 800af4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800af50:	f107 0008 	add.w	r0, r7, #8
 800af54:	4a0b      	ldr	r2, [pc, #44]	@ (800af84 <Cmd_int_ls_dac+0x74>)
 800af56:	213c      	movs	r1, #60	@ 0x3c
 800af58:	f008 fa02 	bl	8013360 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 800af5c:	4b0a      	ldr	r3, [pc, #40]	@ (800af88 <Cmd_int_ls_dac+0x78>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f107 0208 	add.w	r2, r7, #8
 800af64:	4611      	mov	r1, r2
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe fa1c 	bl	80093a4 <UART_SendStringRing>
    MCP4902_Set_Voltage(&DAC_device, MCP4902_CHA, voltage);
 800af6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800af70:	461a      	mov	r2, r3
 800af72:	2100      	movs	r1, #0
 800af74:	4805      	ldr	r0, [pc, #20]	@ (800af8c <Cmd_int_ls_dac+0x7c>)
 800af76:	f001 fb79 	bl	800c66c <MCP4902_Set_Voltage>
    return CMDLINE_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3748      	adds	r7, #72	@ 0x48
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	08014e5c 	.word	0x08014e5c
 800af88:	2000349c 	.word	0x2000349c
 800af8c:	20003548 	.word	0x20003548

0800af90 <Cmd_int_ls_set>:

int Cmd_int_ls_set(int argc, char *argv[])
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
    if (argc > 3)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2b03      	cmp	r3, #3
 800af9e:	dd01      	ble.n	800afa4 <Cmd_int_ls_set+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 800afa0:	2302      	movs	r3, #2
 800afa2:	e017      	b.n	800afd4 <Cmd_int_ls_set+0x44>
    if (argc < 3)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	dc01      	bgt.n	800afae <Cmd_int_ls_set+0x1e>
        return CMDLINE_TOO_FEW_ARGS;
 800afaa:	2303      	movs	r3, #3
 800afac:	e012      	b.n	800afd4 <Cmd_int_ls_set+0x44>
    uint8_t ls_slot = atoi(argv[1]);
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	3304      	adds	r3, #4
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4618      	mov	r0, r3
 800afb6:	f008 f94b 	bl	8013250 <atoi>
 800afba:	4603      	mov	r3, r0
 800afbc:	73fb      	strb	r3, [r7, #15]
    if (ls_slot > INTERNAL_CHAIN_CHANNEL_NUM)
 800afbe:	7bfb      	ldrb	r3, [r7, #15]
 800afc0:	2b24      	cmp	r3, #36	@ 0x24
 800afc2:	d901      	bls.n	800afc8 <Cmd_int_ls_set+0x38>
    	return CMDLINE_INVALID_ARG;
 800afc4:	2304      	movs	r3, #4
 800afc6:	e005      	b.n	800afd4 <Cmd_int_ls_set+0x44>
    ADG1414_Chain_SwitchOn(&laser_int, ls_slot);
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
 800afca:	4619      	mov	r1, r3
 800afcc:	4803      	ldr	r0, [pc, #12]	@ (800afdc <Cmd_int_ls_set+0x4c>)
 800afce:	f001 f9b1 	bl	800c334 <ADG1414_Chain_SwitchOn>
    return CMDLINE_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	20003508 	.word	0x20003508

0800afe0 <Cmd_int_ls_auto>:
int Cmd_int_ls_auto(int argc, char *argv[])
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b0a0      	sub	sp, #128	@ 0x80
 800afe4:	af02      	add	r7, sp, #8
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
	if (argc > 8)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b08      	cmp	r3, #8
 800afee:	dd01      	ble.n	800aff4 <Cmd_int_ls_auto+0x14>
		return CMDLINE_TOO_MANY_ARGS;
 800aff0:	2302      	movs	r3, #2
 800aff2:	e13e      	b.n	800b272 <Cmd_int_ls_auto+0x292>
	if (argc < 8)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2b07      	cmp	r3, #7
 800aff8:	dc01      	bgt.n	800affe <Cmd_int_ls_auto+0x1e>
		return CMDLINE_TOO_FEW_ARGS;
 800affa:	2303      	movs	r3, #3
 800affc:	e139      	b.n	800b272 <Cmd_int_ls_auto+0x292>
	uint32_t interval = atoi(argv[1]);
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	3304      	adds	r3, #4
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4618      	mov	r0, r3
 800b006:	f008 f923 	bl	8013250 <atoi>
 800b00a:	4603      	mov	r3, r0
 800b00c:	673b      	str	r3, [r7, #112]	@ 0x70
	uint32_t times = atoi(argv[2]);
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	3308      	adds	r3, #8
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4618      	mov	r0, r3
 800b016:	f008 f91b 	bl	8013250 <atoi>
 800b01a:	4603      	mov	r3, r0
 800b01c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	uint32_t udelay = atoi(argv[3]);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	330c      	adds	r3, #12
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4618      	mov	r0, r3
 800b026:	f008 f913 	bl	8013250 <atoi>
 800b02a:	4603      	mov	r3, r0
 800b02c:	66bb      	str	r3, [r7, #104]	@ 0x68
	uint8_t s_do_time = atoi(argv[4]);
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	3310      	adds	r3, #16
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4618      	mov	r0, r3
 800b036:	f008 f90b 	bl	8013250 <atoi>
 800b03a:	4603      	mov	r3, r0
 800b03c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t s_rest_time = atoi(argv[5]);
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	3314      	adds	r3, #20
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4618      	mov	r0, r3
 800b048:	f008 f902 	bl	8013250 <atoi>
 800b04c:	4603      	mov	r3, r0
 800b04e:	663b      	str	r3, [r7, #96]	@ 0x60
	uint32_t dac = atoi(argv[6]);
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	3318      	adds	r3, #24
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4618      	mov	r0, r3
 800b058:	f008 f8fa 	bl	8013250 <atoi>
 800b05c:	4603      	mov	r3, r0
 800b05e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	char buffer[80];
	if (interval % 100 != 0 || interval < 400)
 800b060:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b062:	4b86      	ldr	r3, [pc, #536]	@ (800b27c <Cmd_int_ls_auto+0x29c>)
 800b064:	fba3 1302 	umull	r1, r3, r3, r2
 800b068:	095b      	lsrs	r3, r3, #5
 800b06a:	2164      	movs	r1, #100	@ 0x64
 800b06c:	fb01 f303 	mul.w	r3, r1, r3
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	2b00      	cmp	r3, #0
 800b074:	d103      	bne.n	800b07e <Cmd_int_ls_auto+0x9e>
 800b076:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b078:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800b07c:	d210      	bcs.n	800b0a0 <Cmd_int_ls_auto+0xc0>
	{
		snprintf(buffer, sizeof(buffer), "Error: Interval must be a multiple of 100ms and > 400ms.\r\n");
 800b07e:	f107 0308 	add.w	r3, r7, #8
 800b082:	4a7f      	ldr	r2, [pc, #508]	@ (800b280 <Cmd_int_ls_auto+0x2a0>)
 800b084:	2150      	movs	r1, #80	@ 0x50
 800b086:	4618      	mov	r0, r3
 800b088:	f008 f96a 	bl	8013360 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 800b08c:	4b7d      	ldr	r3, [pc, #500]	@ (800b284 <Cmd_int_ls_auto+0x2a4>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f107 0208 	add.w	r2, r7, #8
 800b094:	4611      	mov	r1, r2
 800b096:	4618      	mov	r0, r3
 800b098:	f7fe f984 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_INVALID_ARG;
 800b09c:	2304      	movs	r3, #4
 800b09e:	e0e8      	b.n	800b272 <Cmd_int_ls_auto+0x292>
	}
	if (times < 200 || times % 100 != 0 || times > interval)
 800b0a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0a2:	2bc7      	cmp	r3, #199	@ 0xc7
 800b0a4:	d90e      	bls.n	800b0c4 <Cmd_int_ls_auto+0xe4>
 800b0a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b0a8:	4b74      	ldr	r3, [pc, #464]	@ (800b27c <Cmd_int_ls_auto+0x29c>)
 800b0aa:	fba3 1302 	umull	r1, r3, r3, r2
 800b0ae:	095b      	lsrs	r3, r3, #5
 800b0b0:	2164      	movs	r1, #100	@ 0x64
 800b0b2:	fb01 f303 	mul.w	r3, r1, r3
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d103      	bne.n	800b0c4 <Cmd_int_ls_auto+0xe4>
 800b0bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b0be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d910      	bls.n	800b0e6 <Cmd_int_ls_auto+0x106>
	{
		snprintf(buffer, sizeof(buffer), "Error: Times must be <= interval, > 200ms, mulof100ms.\r\n");
 800b0c4:	f107 0308 	add.w	r3, r7, #8
 800b0c8:	4a6f      	ldr	r2, [pc, #444]	@ (800b288 <Cmd_int_ls_auto+0x2a8>)
 800b0ca:	2150      	movs	r1, #80	@ 0x50
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f008 f947 	bl	8013360 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 800b0d2:	4b6c      	ldr	r3, [pc, #432]	@ (800b284 <Cmd_int_ls_auto+0x2a4>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f107 0208 	add.w	r2, r7, #8
 800b0da:	4611      	mov	r1, r2
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fe f961 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_INVALID_ARG;
 800b0e2:	2304      	movs	r3, #4
 800b0e4:	e0c5      	b.n	800b272 <Cmd_int_ls_auto+0x292>
	}
	if (udelay > 500)
 800b0e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b0e8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b0ec:	d910      	bls.n	800b110 <Cmd_int_ls_auto+0x130>
	{
		snprintf(buffer, sizeof(buffer), "Error: udelay <= 500\r\n");
 800b0ee:	f107 0308 	add.w	r3, r7, #8
 800b0f2:	4a66      	ldr	r2, [pc, #408]	@ (800b28c <Cmd_int_ls_auto+0x2ac>)
 800b0f4:	2150      	movs	r1, #80	@ 0x50
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f008 f932 	bl	8013360 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 800b0fc:	4b61      	ldr	r3, [pc, #388]	@ (800b284 <Cmd_int_ls_auto+0x2a4>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f107 0208 	add.w	r2, r7, #8
 800b104:	4611      	mov	r1, r2
 800b106:	4618      	mov	r0, r3
 800b108:	f7fe f94c 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_INVALID_ARG;
 800b10c:	2304      	movs	r3, #4
 800b10e:	e0b0      	b.n	800b272 <Cmd_int_ls_auto+0x292>
	}
	if (s_do_time > 200)
 800b110:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b114:	2bc8      	cmp	r3, #200	@ 0xc8
 800b116:	d910      	bls.n	800b13a <Cmd_int_ls_auto+0x15a>
	{
		snprintf(buffer, sizeof(buffer), "Error: Do only < 200 or = 0 to infinity\r\n");
 800b118:	f107 0308 	add.w	r3, r7, #8
 800b11c:	4a5c      	ldr	r2, [pc, #368]	@ (800b290 <Cmd_int_ls_auto+0x2b0>)
 800b11e:	2150      	movs	r1, #80	@ 0x50
 800b120:	4618      	mov	r0, r3
 800b122:	f008 f91d 	bl	8013360 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 800b126:	4b57      	ldr	r3, [pc, #348]	@ (800b284 <Cmd_int_ls_auto+0x2a4>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f107 0208 	add.w	r2, r7, #8
 800b12e:	4611      	mov	r1, r2
 800b130:	4618      	mov	r0, r3
 800b132:	f7fe f937 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_INVALID_ARG;
 800b136:	2304      	movs	r3, #4
 800b138:	e09b      	b.n	800b272 <Cmd_int_ls_auto+0x292>
	}
	run_inf = (s_do_time == 0) ? 1 : 0;
 800b13a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b13e:	2b00      	cmp	r3, #0
 800b140:	bf0c      	ite	eq
 800b142:	2301      	moveq	r3, #1
 800b144:	2300      	movne	r3, #0
 800b146:	b2db      	uxtb	r3, r3
 800b148:	461a      	mov	r2, r3
 800b14a:	4b52      	ldr	r3, [pc, #328]	@ (800b294 <Cmd_int_ls_auto+0x2b4>)
 800b14c:	701a      	strb	r2, [r3, #0]
	if (dac > 255)
 800b14e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b150:	2bff      	cmp	r3, #255	@ 0xff
 800b152:	d901      	bls.n	800b158 <Cmd_int_ls_auto+0x178>
		return CMDLINE_INVALID_ARG;
 800b154:	2304      	movs	r3, #4
 800b156:	e08c      	b.n	800b272 <Cmd_int_ls_auto+0x292>
	snprintf(buffer, sizeof(buffer), "DAC Point: %ld\r\n", dac);
 800b158:	f107 0008 	add.w	r0, r7, #8
 800b15c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b15e:	4a4e      	ldr	r2, [pc, #312]	@ (800b298 <Cmd_int_ls_auto+0x2b8>)
 800b160:	2150      	movs	r1, #80	@ 0x50
 800b162:	f008 f8fd 	bl	8013360 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800b166:	4b47      	ldr	r3, [pc, #284]	@ (800b284 <Cmd_int_ls_auto+0x2a4>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f107 0208 	add.w	r2, r7, #8
 800b16e:	4611      	mov	r1, r2
 800b170:	4618      	mov	r0, r3
 800b172:	f7fe f917 	bl	80093a4 <UART_SendStringRing>
	int16_t temp = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	if (temp == 0x7FFF)
 800b17c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 800b180:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b184:	4293      	cmp	r3, r2
 800b186:	d106      	bne.n	800b196 <Cmd_int_ls_auto+0x1b6>
	{
		UART_SendStringRing(UART_CMDLINE, "\r\nTemp BMP390 = [FAIL]\r\n");
 800b188:	4b3e      	ldr	r3, [pc, #248]	@ (800b284 <Cmd_int_ls_auto+0x2a4>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4943      	ldr	r1, [pc, #268]	@ (800b29c <Cmd_int_ls_auto+0x2bc>)
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fe f908 	bl	80093a4 <UART_SendStringRing>
 800b194:	e00f      	b.n	800b1b6 <Cmd_int_ls_auto+0x1d6>
	}
	else
	{
		snprintf(buffer, sizeof(buffer), "\r\nTemp BMP390 = [%i]\r\n", temp);
 800b196:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 800b19a:	f107 0008 	add.w	r0, r7, #8
 800b19e:	4a40      	ldr	r2, [pc, #256]	@ (800b2a0 <Cmd_int_ls_auto+0x2c0>)
 800b1a0:	2150      	movs	r1, #80	@ 0x50
 800b1a2:	f008 f8dd 	bl	8013360 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 800b1a6:	4b37      	ldr	r3, [pc, #220]	@ (800b284 <Cmd_int_ls_auto+0x2a4>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f107 0208 	add.w	r2, r7, #8
 800b1ae:	4611      	mov	r1, r2
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7fe f8f7 	bl	80093a4 <UART_SendStringRing>
	}
	for (uint8_t channel = 0; channel < 8; channel++)
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800b1bc:	e02e      	b.n	800b21c <Cmd_int_ls_auto+0x23c>
	{
		temp = NTC_Temperature[channel];
 800b1be:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b1c2:	4a38      	ldr	r2, [pc, #224]	@ (800b2a4 <Cmd_int_ls_auto+0x2c4>)
 800b1c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1c8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
		if (temp == 0x7FFF)
 800b1cc:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 800b1d0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d108      	bne.n	800b1ea <Cmd_int_ls_auto+0x20a>
		{
			snprintf(buffer, sizeof(buffer), " | NTC[%d] = [FAIL]\r\n", channel);
 800b1d8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b1dc:	f107 0008 	add.w	r0, r7, #8
 800b1e0:	4a31      	ldr	r2, [pc, #196]	@ (800b2a8 <Cmd_int_ls_auto+0x2c8>)
 800b1e2:	2150      	movs	r1, #80	@ 0x50
 800b1e4:	f008 f8bc 	bl	8013360 <sniprintf>
 800b1e8:	e00b      	b.n	800b202 <Cmd_int_ls_auto+0x222>
		}
		else
		{
			snprintf(buffer, sizeof(buffer), " | NTC[%d] = [%i]\r\n", channel, temp);
 800b1ea:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800b1ee:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 800b1f2:	f107 0008 	add.w	r0, r7, #8
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	4a2c      	ldr	r2, [pc, #176]	@ (800b2ac <Cmd_int_ls_auto+0x2cc>)
 800b1fc:	2150      	movs	r1, #80	@ 0x50
 800b1fe:	f008 f8af 	bl	8013360 <sniprintf>
		}
		UART_SendStringRing(UART_CMDLINE, buffer);
 800b202:	4b20      	ldr	r3, [pc, #128]	@ (800b284 <Cmd_int_ls_auto+0x2a4>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f107 0208 	add.w	r2, r7, #8
 800b20a:	4611      	mov	r1, r2
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fe f8c9 	bl	80093a4 <UART_SendStringRing>
	for (uint8_t channel = 0; channel < 8; channel++)
 800b212:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b216:	3301      	adds	r3, #1
 800b218:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800b21c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b220:	2b07      	cmp	r3, #7
 800b222:	d9cc      	bls.n	800b1be <Cmd_int_ls_auto+0x1de>
	}
	laser_interval = interval;
 800b224:	4a22      	ldr	r2, [pc, #136]	@ (800b2b0 <Cmd_int_ls_auto+0x2d0>)
 800b226:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b228:	6013      	str	r3, [r2, #0]
	adc_interval = times;
 800b22a:	4a22      	ldr	r2, [pc, #136]	@ (800b2b4 <Cmd_int_ls_auto+0x2d4>)
 800b22c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b22e:	6013      	str	r3, [r2, #0]
	user_delay = udelay;
 800b230:	4a21      	ldr	r2, [pc, #132]	@ (800b2b8 <Cmd_int_ls_auto+0x2d8>)
 800b232:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b234:	6013      	str	r3, [r2, #0]
	rest_time = s_rest_time;
 800b236:	4a21      	ldr	r2, [pc, #132]	@ (800b2bc <Cmd_int_ls_auto+0x2dc>)
 800b238:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b23a:	6013      	str	r3, [r2, #0]
	do_time = s_do_time;
 800b23c:	4a20      	ldr	r2, [pc, #128]	@ (800b2c0 <Cmd_int_ls_auto+0x2e0>)
 800b23e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b242:	7013      	strb	r3, [r2, #0]
	run_system = 1;
 800b244:	4b1f      	ldr	r3, [pc, #124]	@ (800b2c4 <Cmd_int_ls_auto+0x2e4>)
 800b246:	2201      	movs	r2, #1
 800b248:	701a      	strb	r2, [r3, #0]
	snprintf(buffer, sizeof(buffer), "Run system with interval: %ld ms, times: %ld, delay: %ld. Enter to End\r\n", interval, times, udelay);
 800b24a:	f107 0008 	add.w	r0, r7, #8
 800b24e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b250:	9301      	str	r3, [sp, #4]
 800b252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b258:	4a1b      	ldr	r2, [pc, #108]	@ (800b2c8 <Cmd_int_ls_auto+0x2e8>)
 800b25a:	2150      	movs	r1, #80	@ 0x50
 800b25c:	f008 f880 	bl	8013360 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800b260:	4b08      	ldr	r3, [pc, #32]	@ (800b284 <Cmd_int_ls_auto+0x2a4>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f107 0208 	add.w	r2, r7, #8
 800b268:	4611      	mov	r1, r2
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fe f89a 	bl	80093a4 <UART_SendStringRing>
	return CMDLINE_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	3778      	adds	r7, #120	@ 0x78
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	51eb851f 	.word	0x51eb851f
 800b280:	08014e74 	.word	0x08014e74
 800b284:	2000349c 	.word	0x2000349c
 800b288:	08014eb0 	.word	0x08014eb0
 800b28c:	08014eec 	.word	0x08014eec
 800b290:	08014f04 	.word	0x08014f04
 800b294:	200034f9 	.word	0x200034f9
 800b298:	08014f30 	.word	0x08014f30
 800b29c:	08014f44 	.word	0x08014f44
 800b2a0:	08014f60 	.word	0x08014f60
 800b2a4:	20003570 	.word	0x20003570
 800b2a8:	08014f78 	.word	0x08014f78
 800b2ac:	08014f90 	.word	0x08014f90
 800b2b0:	200034e4 	.word	0x200034e4
 800b2b4:	200034ec 	.word	0x200034ec
 800b2b8:	200034f0 	.word	0x200034f0
 800b2bc:	200034f4 	.word	0x200034f4
 800b2c0:	200034f8 	.word	0x200034f8
 800b2c4:	200034e8 	.word	0x200034e8
 800b2c8:	08014fa4 	.word	0x08014fa4

0800b2cc <Cmd_ext_ls_dac>:

/* External laser board commands */
int Cmd_ext_ls_dac(int argc, char *argv[])
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b092      	sub	sp, #72	@ 0x48
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
    if (argc > 3)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2b03      	cmp	r3, #3
 800b2da:	dd01      	ble.n	800b2e0 <Cmd_ext_ls_dac+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 800b2dc:	2302      	movs	r3, #2
 800b2de:	e02b      	b.n	800b338 <Cmd_ext_ls_dac+0x6c>
    if (argc < 3)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	dc01      	bgt.n	800b2ea <Cmd_ext_ls_dac+0x1e>
        return CMDLINE_TOO_FEW_ARGS;
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	e026      	b.n	800b338 <Cmd_ext_ls_dac+0x6c>
    uint16_t voltage = atoi(argv[1]);
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f007 ffad 	bl	8013250 <atoi>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if (voltage > 210)
 800b2fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b300:	2bd2      	cmp	r3, #210	@ 0xd2
 800b302:	d901      	bls.n	800b308 <Cmd_ext_ls_dac+0x3c>
        return CMDLINE_INVALID_ARG;
 800b304:	2304      	movs	r3, #4
 800b306:	e017      	b.n	800b338 <Cmd_ext_ls_dac+0x6c>
    char buffer[60];
    snprintf(buffer, sizeof(buffer), "\r\n--> Ext Laser DAC: %d", voltage);
 800b308:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b30c:	f107 0008 	add.w	r0, r7, #8
 800b310:	4a0b      	ldr	r2, [pc, #44]	@ (800b340 <Cmd_ext_ls_dac+0x74>)
 800b312:	213c      	movs	r1, #60	@ 0x3c
 800b314:	f008 f824 	bl	8013360 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 800b318:	4b0a      	ldr	r3, [pc, #40]	@ (800b344 <Cmd_ext_ls_dac+0x78>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f107 0208 	add.w	r2, r7, #8
 800b320:	4611      	mov	r1, r2
 800b322:	4618      	mov	r0, r3
 800b324:	f7fe f83e 	bl	80093a4 <UART_SendStringRing>
    MCP4902_Set_Voltage(&DAC_device, MCP4902_CHB, voltage);
 800b328:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b32c:	461a      	mov	r2, r3
 800b32e:	2101      	movs	r1, #1
 800b330:	4805      	ldr	r0, [pc, #20]	@ (800b348 <Cmd_ext_ls_dac+0x7c>)
 800b332:	f001 f99b 	bl	800c66c <MCP4902_Set_Voltage>
    return CMDLINE_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3748      	adds	r7, #72	@ 0x48
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	08014ff0 	.word	0x08014ff0
 800b344:	2000349c 	.word	0x2000349c
 800b348:	20003548 	.word	0x20003548

0800b34c <Cmd_ext_ls_set>:
int Cmd_ext_ls_set(int argc, char *argv[])
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
    if (argc > 3)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2b03      	cmp	r3, #3
 800b35a:	dd01      	ble.n	800b360 <Cmd_ext_ls_set+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 800b35c:	2302      	movs	r3, #2
 800b35e:	e017      	b.n	800b390 <Cmd_ext_ls_set+0x44>
    if (argc < 3)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b02      	cmp	r3, #2
 800b364:	dc01      	bgt.n	800b36a <Cmd_ext_ls_set+0x1e>
        return CMDLINE_TOO_FEW_ARGS;
 800b366:	2303      	movs	r3, #3
 800b368:	e012      	b.n	800b390 <Cmd_ext_ls_set+0x44>
    uint8_t ls_slot = atoi(argv[1]);
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	3304      	adds	r3, #4
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4618      	mov	r0, r3
 800b372:	f007 ff6d 	bl	8013250 <atoi>
 800b376:	4603      	mov	r3, r0
 800b378:	73fb      	strb	r3, [r7, #15]
    if (ls_slot > EXTERNAL_CHAIN_CHANNEL_NUM)
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
 800b37c:	2b08      	cmp	r3, #8
 800b37e:	d901      	bls.n	800b384 <Cmd_ext_ls_set+0x38>
    	return CMDLINE_INVALID_ARG;
 800b380:	2304      	movs	r3, #4
 800b382:	e005      	b.n	800b390 <Cmd_ext_ls_set+0x44>
    ADG1414_Chain_SwitchOn(&laser_ext, ls_slot);
 800b384:	7bfb      	ldrb	r3, [r7, #15]
 800b386:	4619      	mov	r1, r3
 800b388:	4803      	ldr	r0, [pc, #12]	@ (800b398 <Cmd_ext_ls_set+0x4c>)
 800b38a:	f000 ffd3 	bl	800c334 <ADG1414_Chain_SwitchOn>
    return CMDLINE_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	20003528 	.word	0x20003528

0800b39c <Cmd_ext_ls_auto>:
int Cmd_ext_ls_auto(int argc, char *argv[])
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
	return CMDLINE_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <Cmd_pd_set>:

/* Photo board commands */
int Cmd_pd_set(int argc, char *argv[])
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b088      	sub	sp, #32
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
    if (argc > 3)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2b03      	cmp	r3, #3
 800b3c2:	dd01      	ble.n	800b3c8 <Cmd_pd_set+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 800b3c4:	2302      	movs	r3, #2
 800b3c6:	e064      	b.n	800b492 <Cmd_pd_set+0xde>
    if (argc < 3)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	dc01      	bgt.n	800b3d2 <Cmd_pd_set+0x1e>
        return CMDLINE_TOO_FEW_ARGS;
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	e05f      	b.n	800b492 <Cmd_pd_set+0xde>
    uint8_t pd_slot = atoi(argv[1]);
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	3304      	adds	r3, #4
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f007 ff39 	bl	8013250 <atoi>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	76fb      	strb	r3, [r7, #27]
    if (pd_slot > 36)
 800b3e2:	7efb      	ldrb	r3, [r7, #27]
 800b3e4:	2b24      	cmp	r3, #36	@ 0x24
 800b3e6:	d901      	bls.n	800b3ec <Cmd_pd_set+0x38>
        return CMDLINE_INVALID_ARG;
 800b3e8:	2304      	movs	r3, #4
 800b3ea:	e052      	b.n	800b492 <Cmd_pd_set+0xde>
    uint8_t data[6] = {0, 0, 0, 0, 0, 0};
 800b3ec:	f107 0310 	add.w	r3, r7, #16
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	809a      	strh	r2, [r3, #4]
    if (pd_slot > 0 && pd_slot <= 36)
 800b3f6:	7efb      	ldrb	r3, [r7, #27]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d021      	beq.n	800b440 <Cmd_pd_set+0x8c>
 800b3fc:	7efb      	ldrb	r3, [r7, #27]
 800b3fe:	2b24      	cmp	r3, #36	@ 0x24
 800b400:	d81e      	bhi.n	800b440 <Cmd_pd_set+0x8c>
    {
        uint8_t chip_index = (pd_slot - 1) / 6;
 800b402:	7efb      	ldrb	r3, [r7, #27]
 800b404:	3b01      	subs	r3, #1
 800b406:	4a25      	ldr	r2, [pc, #148]	@ (800b49c <Cmd_pd_set+0xe8>)
 800b408:	fb82 1203 	smull	r1, r2, r2, r3
 800b40c:	17db      	asrs	r3, r3, #31
 800b40e:	1ad3      	subs	r3, r2, r3
 800b410:	76bb      	strb	r3, [r7, #26]
        uint8_t port_index = (pd_slot - 1) % 6;
 800b412:	7efb      	ldrb	r3, [r7, #27]
 800b414:	1e5a      	subs	r2, r3, #1
 800b416:	4b21      	ldr	r3, [pc, #132]	@ (800b49c <Cmd_pd_set+0xe8>)
 800b418:	fb83 3102 	smull	r3, r1, r3, r2
 800b41c:	17d3      	asrs	r3, r2, #31
 800b41e:	1ac9      	subs	r1, r1, r3
 800b420:	460b      	mov	r3, r1
 800b422:	005b      	lsls	r3, r3, #1
 800b424:	440b      	add	r3, r1
 800b426:	005b      	lsls	r3, r3, #1
 800b428:	1ad1      	subs	r1, r2, r3
 800b42a:	460b      	mov	r3, r1
 800b42c:	767b      	strb	r3, [r7, #25]
        data[chip_index] = (1 << port_index);
 800b42e:	7e7b      	ldrb	r3, [r7, #25]
 800b430:	2201      	movs	r2, #1
 800b432:	409a      	lsls	r2, r3
 800b434:	7ebb      	ldrb	r3, [r7, #26]
 800b436:	b2d2      	uxtb	r2, r2
 800b438:	3320      	adds	r3, #32
 800b43a:	443b      	add	r3, r7
 800b43c:	f803 2c10 	strb.w	r2, [r3, #-16]
    }
    uint8_t reversed_data[6];
    for (int i = 0; i < 6; i++)
 800b440:	2300      	movs	r3, #0
 800b442:	61fb      	str	r3, [r7, #28]
 800b444:	e00f      	b.n	800b466 <Cmd_pd_set+0xb2>
    {
        reversed_data[i] = data[5 - i];
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	f1c3 0305 	rsb	r3, r3, #5
 800b44c:	3320      	adds	r3, #32
 800b44e:	443b      	add	r3, r7
 800b450:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 800b454:	f107 0208 	add.w	r2, r7, #8
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	4413      	add	r3, r2
 800b45c:	460a      	mov	r2, r1
 800b45e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 6; i++)
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	3301      	adds	r3, #1
 800b464:	61fb      	str	r3, [r7, #28]
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	2b05      	cmp	r3, #5
 800b46a:	ddec      	ble.n	800b446 <Cmd_pd_set+0x92>
    }
    LL_GPIO_ResetOutputPin(PHOTO_PD_CS_GPIO_Port, PHOTO_PD_CS_Pin);
 800b46c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b470:	480b      	ldr	r0, [pc, #44]	@ (800b4a0 <Cmd_pd_set+0xec>)
 800b472:	f7fe f8c7 	bl	8009604 <LL_GPIO_ResetOutputPin>
    HAL_SPI_Transmit(&hspi2, reversed_data, 6, 1000);
 800b476:	f107 0108 	add.w	r1, r7, #8
 800b47a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b47e:	2206      	movs	r2, #6
 800b480:	4808      	ldr	r0, [pc, #32]	@ (800b4a4 <Cmd_pd_set+0xf0>)
 800b482:	f005 f85c 	bl	801053e <HAL_SPI_Transmit>
    LL_GPIO_SetOutputPin(PHOTO_PD_CS_GPIO_Port, PHOTO_PD_CS_Pin);
 800b486:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b48a:	4805      	ldr	r0, [pc, #20]	@ (800b4a0 <Cmd_pd_set+0xec>)
 800b48c:	f7fe f8ac 	bl	80095e8 <LL_GPIO_SetOutputPin>
    return CMDLINE_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3720      	adds	r7, #32
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	2aaaaaab 	.word	0x2aaaaaab
 800b4a0:	40020c00 	.word	0x40020c00
 800b4a4:	200035cc 	.word	0x200035cc

0800b4a8 <Cmd_pd_get_adc>:
int Cmd_pd_get_adc(int argc, char *argv[])
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b094      	sub	sp, #80	@ 0x50
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
    if (argc > 2)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	dd01      	ble.n	800b4bc <Cmd_pd_get_adc+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 800b4b8:	2302      	movs	r3, #2
 800b4ba:	e03d      	b.n	800b538 <Cmd_pd_get_adc+0x90>
    if (argc < 2)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	dc01      	bgt.n	800b4c6 <Cmd_pd_get_adc+0x1e>
        return CMDLINE_TOO_FEW_ARGS;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	e038      	b.n	800b538 <Cmd_pd_get_adc+0x90>
    uint8_t rxData[2] = {0};
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    uint32_t result = 0;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    LL_GPIO_ResetOutputPin(PHOTO_ADC_CONV_GPIO_Port, PHOTO_ADC_CONV_Pin);
 800b4d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800b4d4:	481a      	ldr	r0, [pc, #104]	@ (800b540 <Cmd_pd_get_adc+0x98>)
 800b4d6:	f7fe f895 	bl	8009604 <LL_GPIO_ResetOutputPin>
    __asm__("NOP");
 800b4da:	bf00      	nop
    LL_GPIO_SetOutputPin(PHOTO_ADC_CONV_GPIO_Port, PHOTO_ADC_CONV_Pin);
 800b4dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800b4e0:	4817      	ldr	r0, [pc, #92]	@ (800b540 <Cmd_pd_get_adc+0x98>)
 800b4e2:	f7fe f881 	bl	80095e8 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(PHOTO_ADC_CS_GPIO_Port, PHOTO_ADC_CS_Pin);
 800b4e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b4ea:	4815      	ldr	r0, [pc, #84]	@ (800b540 <Cmd_pd_get_adc+0x98>)
 800b4ec:	f7fe f88a 	bl	8009604 <LL_GPIO_ResetOutputPin>
    HAL_SPI_Receive(&hspi2, rxData, 2, 1000);
 800b4f0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800b4f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b4f8:	2202      	movs	r2, #2
 800b4fa:	4812      	ldr	r0, [pc, #72]	@ (800b544 <Cmd_pd_get_adc+0x9c>)
 800b4fc:	f005 f963 	bl	80107c6 <HAL_SPI_Receive>
    LL_GPIO_SetOutputPin(PHOTO_ADC_CS_GPIO_Port, PHOTO_ADC_CS_Pin);
 800b500:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b504:	480e      	ldr	r0, [pc, #56]	@ (800b540 <Cmd_pd_get_adc+0x98>)
 800b506:	f7fe f86f 	bl	80095e8 <LL_GPIO_SetOutputPin>
    result = ((uint32_t)rxData[0] << 8) | rxData[1];
 800b50a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800b50e:	021b      	lsls	r3, r3, #8
 800b510:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 800b514:	4313      	orrs	r3, r2
 800b516:	64fb      	str	r3, [r7, #76]	@ 0x4c

    char buffer[60];
    snprintf(buffer, sizeof(buffer), "\r\n--> Got ADC: %ld", result);
 800b518:	f107 000c 	add.w	r0, r7, #12
 800b51c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b51e:	4a0a      	ldr	r2, [pc, #40]	@ (800b548 <Cmd_pd_get_adc+0xa0>)
 800b520:	213c      	movs	r1, #60	@ 0x3c
 800b522:	f007 ff1d 	bl	8013360 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 800b526:	4b09      	ldr	r3, [pc, #36]	@ (800b54c <Cmd_pd_get_adc+0xa4>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f107 020c 	add.w	r2, r7, #12
 800b52e:	4611      	mov	r1, r2
 800b530:	4618      	mov	r0, r3
 800b532:	f7fd ff37 	bl	80093a4 <UART_SendStringRing>
    return CMDLINE_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3750      	adds	r7, #80	@ 0x50
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	40020c00 	.word	0x40020c00
 800b544:	200035cc 	.word	0x200035cc
 800b548:	08015008 	.word	0x08015008
 800b54c:	2000349c 	.word	0x2000349c

0800b550 <Cmd_pd_auto>:
int Cmd_pd_auto(int argc, char *argv[])
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b098      	sub	sp, #96	@ 0x60
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
    if (argc > 3)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2b03      	cmp	r3, #3
 800b55e:	dd01      	ble.n	800b564 <Cmd_pd_auto+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 800b560:	2302      	movs	r3, #2
 800b562:	e042      	b.n	800b5ea <Cmd_pd_auto+0x9a>
    if (argc < 3)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b02      	cmp	r3, #2
 800b568:	dc01      	bgt.n	800b56e <Cmd_pd_auto+0x1e>
        return CMDLINE_TOO_FEW_ARGS;
 800b56a:	2303      	movs	r3, #3
 800b56c:	e03d      	b.n	800b5ea <Cmd_pd_auto+0x9a>
    uint32_t interval = atoi(argv[1]);
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	3304      	adds	r3, #4
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4618      	mov	r0, r3
 800b576:	f007 fe6b 	bl	8013250 <atoi>
 800b57a:	4603      	mov	r3, r0
 800b57c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    char buffer[80];
    if (interval % 100 != 0 || interval < 500)
 800b57e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b580:	4b1c      	ldr	r3, [pc, #112]	@ (800b5f4 <Cmd_pd_auto+0xa4>)
 800b582:	fba3 1302 	umull	r1, r3, r3, r2
 800b586:	095b      	lsrs	r3, r3, #5
 800b588:	2164      	movs	r1, #100	@ 0x64
 800b58a:	fb01 f303 	mul.w	r3, r1, r3
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	2b00      	cmp	r3, #0
 800b592:	d103      	bne.n	800b59c <Cmd_pd_auto+0x4c>
 800b594:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b596:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b59a:	d210      	bcs.n	800b5be <Cmd_pd_auto+0x6e>
    {
        snprintf(buffer, sizeof(buffer), "Error: Interval must be a multiple of 100ms and > 500ms.\r\n");
 800b59c:	f107 030c 	add.w	r3, r7, #12
 800b5a0:	4a15      	ldr	r2, [pc, #84]	@ (800b5f8 <Cmd_pd_auto+0xa8>)
 800b5a2:	2150      	movs	r1, #80	@ 0x50
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f007 fedb 	bl	8013360 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 800b5aa:	4b14      	ldr	r3, [pc, #80]	@ (800b5fc <Cmd_pd_auto+0xac>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f107 020c 	add.w	r2, r7, #12
 800b5b2:	4611      	mov	r1, r2
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7fd fef5 	bl	80093a4 <UART_SendStringRing>
        return CMDLINE_INVALID_ARG;
 800b5ba:	2304      	movs	r3, #4
 800b5bc:	e015      	b.n	800b5ea <Cmd_pd_auto+0x9a>
    }
    adc_interval = interval;
 800b5be:	4a10      	ldr	r2, [pc, #64]	@ (800b600 <Cmd_pd_auto+0xb0>)
 800b5c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b5c2:	6013      	str	r3, [r2, #0]
    run_adc = 1;
 800b5c4:	4b0f      	ldr	r3, [pc, #60]	@ (800b604 <Cmd_pd_auto+0xb4>)
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	701a      	strb	r2, [r3, #0]
    snprintf(buffer, sizeof(buffer), "Run auto ADC with interval: %ld ms. Enter to End\r\n", interval);
 800b5ca:	f107 000c 	add.w	r0, r7, #12
 800b5ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b5d0:	4a0d      	ldr	r2, [pc, #52]	@ (800b608 <Cmd_pd_auto+0xb8>)
 800b5d2:	2150      	movs	r1, #80	@ 0x50
 800b5d4:	f007 fec4 	bl	8013360 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 800b5d8:	4b08      	ldr	r3, [pc, #32]	@ (800b5fc <Cmd_pd_auto+0xac>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f107 020c 	add.w	r2, r7, #12
 800b5e0:	4611      	mov	r1, r2
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7fd fede 	bl	80093a4 <UART_SendStringRing>
    return CMDLINE_OK;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3760      	adds	r7, #96	@ 0x60
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	51eb851f 	.word	0x51eb851f
 800b5f8:	0801501c 	.word	0x0801501c
 800b5fc:	2000349c 	.word	0x2000349c
 800b600:	200034ec 	.word	0x200034ec
 800b604:	200034e9 	.word	0x200034e9
 800b608:	08015058 	.word	0x08015058

0800b60c <CommandLine_CreateTask>:



void CommandLine_CreateTask(void)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 800b610:	4902      	ldr	r1, [pc, #8]	@ (800b61c <CommandLine_CreateTask+0x10>)
 800b612:	4803      	ldr	r0, [pc, #12]	@ (800b620 <CommandLine_CreateTask+0x14>)
 800b614:	f007 fce8 	bl	8012fe8 <SCH_TASK_CreateTask>
}
 800b618:	bf00      	nop
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	20000208 	.word	0x20000208
 800b620:	20000204 	.word	0x20000204

0800b624 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	f003 0302 	and.w	r3, r3, #2
 800b634:	2b02      	cmp	r3, #2
 800b636:	d101      	bne.n	800b63c <LL_SPI_IsActiveFlag_TXE+0x18>
 800b638:	2301      	movs	r3, #1
 800b63a:	e000      	b.n	800b63e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr

0800b64a <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(const SPI_TypeDef *SPIx)
{
 800b64a:	b480      	push	{r7}
 800b64c:	b083      	sub	sp, #12
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b65a:	2b80      	cmp	r3, #128	@ 0x80
 800b65c:	d101      	bne.n	800b662 <LL_SPI_IsActiveFlag_BSY+0x18>
 800b65e:	2301      	movs	r3, #1
 800b660:	e000      	b.n	800b664 <LL_SPI_IsActiveFlag_BSY+0x1a>
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800b670:	b480      	push	{r7}
 800b672:	b085      	sub	sp, #20
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	460b      	mov	r3, r1
 800b67a:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	330c      	adds	r3, #12
 800b680:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	78fa      	ldrb	r2, [r7, #3]
 800b686:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800b688:	bf00      	nop
 800b68a:	3714      	adds	r7, #20
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <LL_GPIO_SetOutputPin>:
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	683a      	ldr	r2, [r7, #0]
 800b6a2:	619a      	str	r2, [r3, #24]
}
 800b6a4:	bf00      	nop
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <LL_GPIO_ResetOutputPin>:
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	041a      	lsls	r2, r3, #16
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	619a      	str	r2, [r3, #24]
}
 800b6c2:	bf00      	nop
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
	...

0800b6d0 <auto_run_task_update>:
volatile uint8_t first_rest = 1;
volatile uint8_t do_time = 0;
volatile uint8_t run_inf = 0;

static void auto_run_task_update(void)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b090      	sub	sp, #64	@ 0x40
 800b6d4:	af02      	add	r7, sp, #8

	if (run_adc)
 800b6d6:	4b98      	ldr	r3, [pc, #608]	@ (800b938 <auto_run_task_update+0x268>)
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00d      	beq.n	800b6fc <auto_run_task_update+0x2c>
	{
		if (SCH_TIM_HasCompleted(SCH_TIM_AUTO_ADC))
 800b6e0:	200a      	movs	r0, #10
 800b6e2:	f007 fc6b 	bl	8012fbc <SCH_TIM_HasCompleted>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d007      	beq.n	800b6fc <auto_run_task_update+0x2c>
		{
			read_adc();
 800b6ec:	f000 fa6c 	bl	800bbc8 <read_adc>
			SCH_TIM_Start(SCH_TIM_AUTO_ADC, adc_interval);
 800b6f0:	4b92      	ldr	r3, [pc, #584]	@ (800b93c <auto_run_task_update+0x26c>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	200a      	movs	r0, #10
 800b6f8:	f007 fc4a 	bl	8012f90 <SCH_TIM_Start>
		}
	}

	if (run_system)
 800b6fc:	4b90      	ldr	r3, [pc, #576]	@ (800b940 <auto_run_task_update+0x270>)
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	b2db      	uxtb	r3, r3
 800b702:	2b00      	cmp	r3, #0
 800b704:	f000 8114 	beq.w	800b930 <auto_run_task_update+0x260>
	{

		if (SCH_TIM_HasCompleted(SCH_TIM_AUTO_LASER))
 800b708:	200b      	movs	r0, #11
 800b70a:	f007 fc57 	bl	8012fbc <SCH_TIM_HasCompleted>
 800b70e:	4603      	mov	r3, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	f000 80f3 	beq.w	800b8fc <auto_run_task_update+0x22c>
		{
			data_times = 0;
 800b716:	4b8b      	ldr	r3, [pc, #556]	@ (800b944 <auto_run_task_update+0x274>)
 800b718:	2200      	movs	r2, #0
 800b71a:	701a      	strb	r2, [r3, #0]

			uint8_t ld_slot = (current_column - 1) + (current_row - 1) * 6 + 1;
 800b71c:	4b8a      	ldr	r3, [pc, #552]	@ (800b948 <auto_run_task_update+0x278>)
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	b2db      	uxtb	r3, r3
 800b722:	461a      	mov	r2, r3
 800b724:	0052      	lsls	r2, r2, #1
 800b726:	4413      	add	r3, r2
 800b728:	005b      	lsls	r3, r3, #1
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	4b87      	ldr	r3, [pc, #540]	@ (800b94c <auto_run_task_update+0x27c>)
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	b2db      	uxtb	r3, r3
 800b732:	4413      	add	r3, r2
 800b734:	b2db      	uxtb	r3, r3
 800b736:	3b06      	subs	r3, #6
 800b738:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if (first_time)
 800b73c:	4b84      	ldr	r3, [pc, #528]	@ (800b950 <auto_run_task_update+0x280>)
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	b2db      	uxtb	r3, r3
 800b742:	2b00      	cmp	r3, #0
 800b744:	d03a      	beq.n	800b7bc <auto_run_task_update+0xec>
			{
				if (!run_inf)
 800b746:	4b83      	ldr	r3, [pc, #524]	@ (800b954 <auto_run_task_update+0x284>)
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d125      	bne.n	800b79c <auto_run_task_update+0xcc>
				{
					if (do_time <= 0)
 800b750:	4b81      	ldr	r3, [pc, #516]	@ (800b958 <auto_run_task_update+0x288>)
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b00      	cmp	r3, #0
 800b758:	d120      	bne.n	800b79c <auto_run_task_update+0xcc>
					{
						laser_interval = 0;
 800b75a:	4b80      	ldr	r3, [pc, #512]	@ (800b95c <auto_run_task_update+0x28c>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	601a      	str	r2, [r3, #0]
						run_system = 0;
 800b760:	4b77      	ldr	r3, [pc, #476]	@ (800b940 <auto_run_task_update+0x270>)
 800b762:	2200      	movs	r2, #0
 800b764:	701a      	strb	r2, [r3, #0]
						run_adc = 0;
 800b766:	4b74      	ldr	r3, [pc, #464]	@ (800b938 <auto_run_task_update+0x268>)
 800b768:	2200      	movs	r2, #0
 800b76a:	701a      	strb	r2, [r3, #0]
						adc_interval = 0;
 800b76c:	4b73      	ldr	r3, [pc, #460]	@ (800b93c <auto_run_task_update+0x26c>)
 800b76e:	2200      	movs	r2, #0
 800b770:	601a      	str	r2, [r3, #0]
						pair_slot = 1;
 800b772:	4b7b      	ldr	r3, [pc, #492]	@ (800b960 <auto_run_task_update+0x290>)
 800b774:	2201      	movs	r2, #1
 800b776:	701a      	strb	r2, [r3, #0]
						current_column = 1;
 800b778:	4b74      	ldr	r3, [pc, #464]	@ (800b94c <auto_run_task_update+0x27c>)
 800b77a:	2201      	movs	r2, #1
 800b77c:	701a      	strb	r2, [r3, #0]
						current_row = 1;
 800b77e:	4b72      	ldr	r3, [pc, #456]	@ (800b948 <auto_run_task_update+0x278>)
 800b780:	2201      	movs	r2, #1
 800b782:	701a      	strb	r2, [r3, #0]
						user_delay = 0;
 800b784:	4b77      	ldr	r3, [pc, #476]	@ (800b964 <auto_run_task_update+0x294>)
 800b786:	2200      	movs	r2, #0
 800b788:	601a      	str	r2, [r3, #0]
						rest_time = 0;
 800b78a:	4b77      	ldr	r3, [pc, #476]	@ (800b968 <auto_run_task_update+0x298>)
 800b78c:	2200      	movs	r2, #0
 800b78e:	601a      	str	r2, [r3, #0]
						run_inf = 0;
 800b790:	4b70      	ldr	r3, [pc, #448]	@ (800b954 <auto_run_task_update+0x284>)
 800b792:	2200      	movs	r2, #0
 800b794:	701a      	strb	r2, [r3, #0]
						do_time = 0;
 800b796:	4b70      	ldr	r3, [pc, #448]	@ (800b958 <auto_run_task_update+0x288>)
 800b798:	2200      	movs	r2, #0
 800b79a:	701a      	strb	r2, [r3, #0]
					}
				}

				auto_set_pd(0);
 800b79c:	2000      	movs	r0, #0
 800b79e:	f000 f94d 	bl	800ba3c <auto_set_pd>
				auto_set_ls(0);
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	f000 f9ac 	bl	800bb00 <auto_set_ls>

				SCH_TIM_Start(SCH_TIM_USER_DELAY, user_delay);
 800b7a8:	4b6e      	ldr	r3, [pc, #440]	@ (800b964 <auto_run_task_update+0x294>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	200c      	movs	r0, #12
 800b7b0:	f007 fbee 	bl	8012f90 <SCH_TIM_Start>
				first_time = 0;
 800b7b4:	4b66      	ldr	r3, [pc, #408]	@ (800b950 <auto_run_task_update+0x280>)
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	701a      	strb	r2, [r3, #0]
 800b7ba:	e098      	b.n	800b8ee <auto_run_task_update+0x21e>
			}
			else
			{
				if (SCH_TIM_HasCompleted(SCH_TIM_USER_DELAY))
 800b7bc:	200c      	movs	r0, #12
 800b7be:	f007 fbfd 	bl	8012fbc <SCH_TIM_HasCompleted>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f000 8092 	beq.w	800b8ee <auto_run_task_update+0x21e>
				{
					if (current_row == 1 && first_rest == 0)
 800b7ca:	4b5f      	ldr	r3, [pc, #380]	@ (800b948 <auto_run_task_update+0x278>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d11b      	bne.n	800b80c <auto_run_task_update+0x13c>
 800b7d4:	4b65      	ldr	r3, [pc, #404]	@ (800b96c <auto_run_task_update+0x29c>)
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d116      	bne.n	800b80c <auto_run_task_update+0x13c>
					{
						if (current_column == 1)
 800b7de:	4b5b      	ldr	r3, [pc, #364]	@ (800b94c <auto_run_task_update+0x27c>)
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d111      	bne.n	800b80c <auto_run_task_update+0x13c>
						{
							auto_get_temp();
 800b7e8:	f000 f8ca 	bl	800b980 <auto_get_temp>
							do_time = do_time - 1;
 800b7ec:	4b5a      	ldr	r3, [pc, #360]	@ (800b958 <auto_run_task_update+0x288>)
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	b2da      	uxtb	r2, r3
 800b7f6:	4b58      	ldr	r3, [pc, #352]	@ (800b958 <auto_run_task_update+0x288>)
 800b7f8:	701a      	strb	r2, [r3, #0]
							SCH_TIM_Start(SCH_TIM_REST, rest_time);
 800b7fa:	4b5b      	ldr	r3, [pc, #364]	@ (800b968 <auto_run_task_update+0x298>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4619      	mov	r1, r3
 800b800:	200d      	movs	r0, #13
 800b802:	f007 fbc5 	bl	8012f90 <SCH_TIM_Start>
							first_rest = 1;
 800b806:	4b59      	ldr	r3, [pc, #356]	@ (800b96c <auto_run_task_update+0x29c>)
 800b808:	2201      	movs	r2, #1
 800b80a:	701a      	strb	r2, [r3, #0]
						}
					}
					if (SCH_TIM_HasCompleted(SCH_TIM_REST))
 800b80c:	200d      	movs	r0, #13
 800b80e:	f007 fbd5 	bl	8012fbc <SCH_TIM_HasCompleted>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d061      	beq.n	800b8dc <auto_run_task_update+0x20c>
					{
						if (current_row == 1)
 800b818:	4b4b      	ldr	r3, [pc, #300]	@ (800b948 <auto_run_task_update+0x278>)
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d103      	bne.n	800b82a <auto_run_task_update+0x15a>
						{
							UART_SendStringRing(UART_CMDLINE, "\r\n");
 800b822:	4953      	ldr	r1, [pc, #332]	@ (800b970 <auto_run_task_update+0x2a0>)
 800b824:	4853      	ldr	r0, [pc, #332]	@ (800b974 <auto_run_task_update+0x2a4>)
 800b826:	f7fd fdbd 	bl	80093a4 <UART_SendStringRing>
						}

						auto_set_pd(ld_slot);
 800b82a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b82e:	4618      	mov	r0, r3
 800b830:	f000 f904 	bl	800ba3c <auto_set_pd>
						auto_set_ls(ld_slot);
 800b834:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b838:	4618      	mov	r0, r3
 800b83a:	f000 f961 	bl	800bb00 <auto_set_ls>
						char buffer[50];

						if (ld_slot < 10)
 800b83e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b842:	2b09      	cmp	r3, #9
 800b844:	d812      	bhi.n	800b86c <auto_run_task_update+0x19c>
						{
							snprintf(buffer, sizeof(buffer), "\r\nC%d-%d | [LD0%d]", current_column, current_row, ld_slot);
 800b846:	4b41      	ldr	r3, [pc, #260]	@ (800b94c <auto_run_task_update+0x27c>)
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	4619      	mov	r1, r3
 800b84e:	4b3e      	ldr	r3, [pc, #248]	@ (800b948 <auto_run_task_update+0x278>)
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	b2db      	uxtb	r3, r3
 800b854:	461a      	mov	r2, r3
 800b856:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b85a:	1d38      	adds	r0, r7, #4
 800b85c:	9301      	str	r3, [sp, #4]
 800b85e:	9200      	str	r2, [sp, #0]
 800b860:	460b      	mov	r3, r1
 800b862:	4a45      	ldr	r2, [pc, #276]	@ (800b978 <auto_run_task_update+0x2a8>)
 800b864:	2132      	movs	r1, #50	@ 0x32
 800b866:	f007 fd7b 	bl	8013360 <sniprintf>
 800b86a:	e011      	b.n	800b890 <auto_run_task_update+0x1c0>
						}
						else
						{
							snprintf(buffer, sizeof(buffer), "\r\nC%d-%d | [LD%d]", current_column, current_row, ld_slot);
 800b86c:	4b37      	ldr	r3, [pc, #220]	@ (800b94c <auto_run_task_update+0x27c>)
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	b2db      	uxtb	r3, r3
 800b872:	4619      	mov	r1, r3
 800b874:	4b34      	ldr	r3, [pc, #208]	@ (800b948 <auto_run_task_update+0x278>)
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	461a      	mov	r2, r3
 800b87c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b880:	1d38      	adds	r0, r7, #4
 800b882:	9301      	str	r3, [sp, #4]
 800b884:	9200      	str	r2, [sp, #0]
 800b886:	460b      	mov	r3, r1
 800b888:	4a3c      	ldr	r2, [pc, #240]	@ (800b97c <auto_run_task_update+0x2ac>)
 800b88a:	2132      	movs	r1, #50	@ 0x32
 800b88c:	f007 fd68 	bl	8013360 <sniprintf>
						}

						UART_SendStringRing(UART_CMDLINE, buffer);
 800b890:	1d3b      	adds	r3, r7, #4
 800b892:	4619      	mov	r1, r3
 800b894:	4837      	ldr	r0, [pc, #220]	@ (800b974 <auto_run_task_update+0x2a4>)
 800b896:	f7fd fd85 	bl	80093a4 <UART_SendStringRing>

						current_row++;
 800b89a:	4b2b      	ldr	r3, [pc, #172]	@ (800b948 <auto_run_task_update+0x278>)
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	b2da      	uxtb	r2, r3
 800b8a4:	4b28      	ldr	r3, [pc, #160]	@ (800b948 <auto_run_task_update+0x278>)
 800b8a6:	701a      	strb	r2, [r3, #0]
						if (current_row > 6)
 800b8a8:	4b27      	ldr	r3, [pc, #156]	@ (800b948 <auto_run_task_update+0x278>)
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	2b06      	cmp	r3, #6
 800b8b0:	d911      	bls.n	800b8d6 <auto_run_task_update+0x206>
						{
							current_row = 1;
 800b8b2:	4b25      	ldr	r3, [pc, #148]	@ (800b948 <auto_run_task_update+0x278>)
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	701a      	strb	r2, [r3, #0]
							current_column++;
 800b8b8:	4b24      	ldr	r3, [pc, #144]	@ (800b94c <auto_run_task_update+0x27c>)
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	3301      	adds	r3, #1
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	4b22      	ldr	r3, [pc, #136]	@ (800b94c <auto_run_task_update+0x27c>)
 800b8c4:	701a      	strb	r2, [r3, #0]
							if (current_column > 6)
 800b8c6:	4b21      	ldr	r3, [pc, #132]	@ (800b94c <auto_run_task_update+0x27c>)
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	2b06      	cmp	r3, #6
 800b8ce:	d902      	bls.n	800b8d6 <auto_run_task_update+0x206>
							{
								current_column = 1;
 800b8d0:	4b1e      	ldr	r3, [pc, #120]	@ (800b94c <auto_run_task_update+0x27c>)
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	701a      	strb	r2, [r3, #0]
							}
						}
						first_rest = 0;
 800b8d6:	4b25      	ldr	r3, [pc, #148]	@ (800b96c <auto_run_task_update+0x29c>)
 800b8d8:	2200      	movs	r2, #0
 800b8da:	701a      	strb	r2, [r3, #0]
					}
					SCH_TIM_Start(SCH_TIM_AUTO_LASER, laser_interval);
 800b8dc:	4b1f      	ldr	r3, [pc, #124]	@ (800b95c <auto_run_task_update+0x28c>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	200b      	movs	r0, #11
 800b8e4:	f007 fb54 	bl	8012f90 <SCH_TIM_Start>
					first_time = 1;
 800b8e8:	4b19      	ldr	r3, [pc, #100]	@ (800b950 <auto_run_task_update+0x280>)
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	701a      	strb	r2, [r3, #0]
				}
			}
			SCH_TIM_Start(SCH_TIM_AUTO_ADC, adc_interval);
 800b8ee:	4b13      	ldr	r3, [pc, #76]	@ (800b93c <auto_run_task_update+0x26c>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	200a      	movs	r0, #10
 800b8f6:	f007 fb4b 	bl	8012f90 <SCH_TIM_Start>
					SCH_TIM_Start(SCH_TIM_AUTO_ADC, adc_interval);
				}
			}
		}
	}
}
 800b8fa:	e019      	b.n	800b930 <auto_run_task_update+0x260>
			if (SCH_TIM_HasCompleted(SCH_TIM_REST))
 800b8fc:	200d      	movs	r0, #13
 800b8fe:	f007 fb5d 	bl	8012fbc <SCH_TIM_HasCompleted>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d013      	beq.n	800b930 <auto_run_task_update+0x260>
				if (SCH_TIM_HasCompleted(SCH_TIM_AUTO_ADC))
 800b908:	200a      	movs	r0, #10
 800b90a:	f007 fb57 	bl	8012fbc <SCH_TIM_HasCompleted>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d00d      	beq.n	800b930 <auto_run_task_update+0x260>
					read_adc_without_LF();
 800b914:	f000 f9d6 	bl	800bcc4 <read_adc_without_LF>
					data_times++;
 800b918:	4b0a      	ldr	r3, [pc, #40]	@ (800b944 <auto_run_task_update+0x274>)
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	3301      	adds	r3, #1
 800b91e:	b2da      	uxtb	r2, r3
 800b920:	4b08      	ldr	r3, [pc, #32]	@ (800b944 <auto_run_task_update+0x274>)
 800b922:	701a      	strb	r2, [r3, #0]
					SCH_TIM_Start(SCH_TIM_AUTO_ADC, adc_interval);
 800b924:	4b05      	ldr	r3, [pc, #20]	@ (800b93c <auto_run_task_update+0x26c>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4619      	mov	r1, r3
 800b92a:	200a      	movs	r0, #10
 800b92c:	f007 fb30 	bl	8012f90 <SCH_TIM_Start>
}
 800b930:	bf00      	nop
 800b932:	3738      	adds	r7, #56	@ 0x38
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	200034e9 	.word	0x200034e9
 800b93c:	200034ec 	.word	0x200034ec
 800b940:	200034e8 	.word	0x200034e8
 800b944:	200034e1 	.word	0x200034e1
 800b948:	2000022e 	.word	0x2000022e
 800b94c:	2000022d 	.word	0x2000022d
 800b950:	2000022f 	.word	0x2000022f
 800b954:	200034f9 	.word	0x200034f9
 800b958:	200034f8 	.word	0x200034f8
 800b95c:	200034e4 	.word	0x200034e4
 800b960:	2000022c 	.word	0x2000022c
 800b964:	200034f0 	.word	0x200034f0
 800b968:	200034f4 	.word	0x200034f4
 800b96c:	20000230 	.word	0x20000230
 800b970:	080158ac 	.word	0x080158ac
 800b974:	40011000 	.word	0x40011000
 800b978:	080158b0 	.word	0x080158b0
 800b97c:	080158c4 	.word	0x080158c4

0800b980 <auto_get_temp>:

void auto_get_temp()
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b092      	sub	sp, #72	@ 0x48
 800b984:	af02      	add	r7, sp, #8
	int16_t temp = 0;
 800b986:	2300      	movs	r3, #0
 800b988:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	char buffer[60];

	if (temp == 0x7FFF)
 800b98a:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800b98e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b992:	4293      	cmp	r3, r2
 800b994:	d104      	bne.n	800b9a0 <auto_get_temp+0x20>
	{
		UART_SendStringRing(UART_CMDLINE, "\r\nTemp BMP390 = [FAIL] \r\n");
 800b996:	4923      	ldr	r1, [pc, #140]	@ (800ba24 <auto_get_temp+0xa4>)
 800b998:	4823      	ldr	r0, [pc, #140]	@ (800ba28 <auto_get_temp+0xa8>)
 800b99a:	f7fd fd03 	bl	80093a4 <UART_SendStringRing>
 800b99e:	e00b      	b.n	800b9b8 <auto_get_temp+0x38>
	}
	else
	{
		snprintf(buffer, sizeof(buffer), "\r\nTemp BMP390 = [%i] \r\n", temp);
 800b9a0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	4a21      	ldr	r2, [pc, #132]	@ (800ba2c <auto_get_temp+0xac>)
 800b9a8:	213c      	movs	r1, #60	@ 0x3c
 800b9aa:	f007 fcd9 	bl	8013360 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 800b9ae:	463b      	mov	r3, r7
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	481d      	ldr	r0, [pc, #116]	@ (800ba28 <auto_get_temp+0xa8>)
 800b9b4:	f7fd fcf6 	bl	80093a4 <UART_SendStringRing>
	}

	for (uint8_t channel = 0; channel < 8; channel++)
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b9be:	e028      	b.n	800ba12 <auto_get_temp+0x92>
	{
		temp = NTC_Temperature[channel];
 800b9c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b9c4:	4a1a      	ldr	r2, [pc, #104]	@ (800ba30 <auto_get_temp+0xb0>)
 800b9c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9ca:	87bb      	strh	r3, [r7, #60]	@ 0x3c

		if (temp == 0x7FFF)
 800b9cc:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800b9d0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d107      	bne.n	800b9e8 <auto_get_temp+0x68>
		{
			snprintf(buffer, sizeof(buffer), " | NTC[%d] = [FAIL]\r\n", channel);
 800b9d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b9dc:	4638      	mov	r0, r7
 800b9de:	4a15      	ldr	r2, [pc, #84]	@ (800ba34 <auto_get_temp+0xb4>)
 800b9e0:	213c      	movs	r1, #60	@ 0x3c
 800b9e2:	f007 fcbd 	bl	8013360 <sniprintf>
 800b9e6:	e00a      	b.n	800b9fe <auto_get_temp+0x7e>
		}
		else
		{
			snprintf(buffer, sizeof(buffer), " | NTC[%d] = [%i]\r\n", channel, temp);
 800b9e8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800b9ec:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800b9f0:	4638      	mov	r0, r7
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	4a10      	ldr	r2, [pc, #64]	@ (800ba38 <auto_get_temp+0xb8>)
 800b9f8:	213c      	movs	r1, #60	@ 0x3c
 800b9fa:	f007 fcb1 	bl	8013360 <sniprintf>
		}

		UART_SendStringRing(UART_CMDLINE, buffer);
 800b9fe:	463b      	mov	r3, r7
 800ba00:	4619      	mov	r1, r3
 800ba02:	4809      	ldr	r0, [pc, #36]	@ (800ba28 <auto_get_temp+0xa8>)
 800ba04:	f7fd fcce 	bl	80093a4 <UART_SendStringRing>
	for (uint8_t channel = 0; channel < 8; channel++)
 800ba08:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ba12:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ba16:	2b07      	cmp	r3, #7
 800ba18:	d9d2      	bls.n	800b9c0 <auto_get_temp+0x40>
	}
}
 800ba1a:	bf00      	nop
 800ba1c:	bf00      	nop
 800ba1e:	3740      	adds	r7, #64	@ 0x40
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	080158d8 	.word	0x080158d8
 800ba28:	40011000 	.word	0x40011000
 800ba2c:	080158f4 	.word	0x080158f4
 800ba30:	20003570 	.word	0x20003570
 800ba34:	0801590c 	.word	0x0801590c
 800ba38:	08015924 	.word	0x08015924

0800ba3c <auto_set_pd>:

void auto_set_pd(uint8_t pd_slot)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b088      	sub	sp, #32
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	4603      	mov	r3, r0
 800ba44:	71fb      	strb	r3, [r7, #7]
	uint8_t data[6] = {0, 0, 0, 0, 0, 0};
 800ba46:	f107 0314 	add.w	r3, r7, #20
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	601a      	str	r2, [r3, #0]
 800ba4e:	809a      	strh	r2, [r3, #4]

	if (pd_slot > 0 && pd_slot <= 36)
 800ba50:	79fb      	ldrb	r3, [r7, #7]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d021      	beq.n	800ba9a <auto_set_pd+0x5e>
 800ba56:	79fb      	ldrb	r3, [r7, #7]
 800ba58:	2b24      	cmp	r3, #36	@ 0x24
 800ba5a:	d81e      	bhi.n	800ba9a <auto_set_pd+0x5e>
	{

		uint8_t chip_index = (pd_slot - 1) / 6;
 800ba5c:	79fb      	ldrb	r3, [r7, #7]
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	4a24      	ldr	r2, [pc, #144]	@ (800baf4 <auto_set_pd+0xb8>)
 800ba62:	fb82 1203 	smull	r1, r2, r2, r3
 800ba66:	17db      	asrs	r3, r3, #31
 800ba68:	1ad3      	subs	r3, r2, r3
 800ba6a:	76fb      	strb	r3, [r7, #27]
		uint8_t port_index = (pd_slot - 1) % 6;
 800ba6c:	79fb      	ldrb	r3, [r7, #7]
 800ba6e:	1e5a      	subs	r2, r3, #1
 800ba70:	4b20      	ldr	r3, [pc, #128]	@ (800baf4 <auto_set_pd+0xb8>)
 800ba72:	fb83 3102 	smull	r3, r1, r3, r2
 800ba76:	17d3      	asrs	r3, r2, #31
 800ba78:	1ac9      	subs	r1, r1, r3
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	005b      	lsls	r3, r3, #1
 800ba7e:	440b      	add	r3, r1
 800ba80:	005b      	lsls	r3, r3, #1
 800ba82:	1ad1      	subs	r1, r2, r3
 800ba84:	460b      	mov	r3, r1
 800ba86:	76bb      	strb	r3, [r7, #26]

		data[chip_index] = (1 << port_index);
 800ba88:	7ebb      	ldrb	r3, [r7, #26]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	409a      	lsls	r2, r3
 800ba8e:	7efb      	ldrb	r3, [r7, #27]
 800ba90:	b2d2      	uxtb	r2, r2
 800ba92:	3320      	adds	r3, #32
 800ba94:	443b      	add	r3, r7
 800ba96:	f803 2c0c 	strb.w	r2, [r3, #-12]
	}

	uint8_t reversed_data[6];
	for (int i = 0; i < 6; i++)
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	61fb      	str	r3, [r7, #28]
 800ba9e:	e00f      	b.n	800bac0 <auto_set_pd+0x84>
	{
		reversed_data[i] = data[5 - i];
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	f1c3 0305 	rsb	r3, r3, #5
 800baa6:	3320      	adds	r3, #32
 800baa8:	443b      	add	r3, r7
 800baaa:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 800baae:	f107 020c 	add.w	r2, r7, #12
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	4413      	add	r3, r2
 800bab6:	460a      	mov	r2, r1
 800bab8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; i++)
 800baba:	69fb      	ldr	r3, [r7, #28]
 800babc:	3301      	adds	r3, #1
 800babe:	61fb      	str	r3, [r7, #28]
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	2b05      	cmp	r3, #5
 800bac4:	ddec      	ble.n	800baa0 <auto_set_pd+0x64>
	}

	LL_GPIO_ResetOutputPin(PHOTO_PD_CS_GPIO_Port, PHOTO_PD_CS_Pin);
 800bac6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800baca:	480b      	ldr	r0, [pc, #44]	@ (800baf8 <auto_set_pd+0xbc>)
 800bacc:	f7ff fdf0 	bl	800b6b0 <LL_GPIO_ResetOutputPin>
	HAL_SPI_Transmit(&hspi2, reversed_data, 6, 1000);
 800bad0:	f107 010c 	add.w	r1, r7, #12
 800bad4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bad8:	2206      	movs	r2, #6
 800bada:	4808      	ldr	r0, [pc, #32]	@ (800bafc <auto_set_pd+0xc0>)
 800badc:	f004 fd2f 	bl	801053e <HAL_SPI_Transmit>
	LL_GPIO_SetOutputPin(PHOTO_PD_CS_GPIO_Port, PHOTO_PD_CS_Pin);
 800bae0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bae4:	4804      	ldr	r0, [pc, #16]	@ (800baf8 <auto_set_pd+0xbc>)
 800bae6:	f7ff fdd5 	bl	800b694 <LL_GPIO_SetOutputPin>
}
 800baea:	bf00      	nop
 800baec:	3720      	adds	r7, #32
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	2aaaaaab 	.word	0x2aaaaaab
 800baf8:	40020c00 	.word	0x40020c00
 800bafc:	200035cc 	.word	0x200035cc

0800bb00 <auto_set_ls>:

void auto_set_ls(uint8_t ls_slot)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b086      	sub	sp, #24
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	4603      	mov	r3, r0
 800bb08:	71fb      	strb	r3, [r7, #7]
	uint8_t data[6] = {0, 0, 0, 0, 0, 0};
 800bb0a:	f107 030c 	add.w	r3, r7, #12
 800bb0e:	2200      	movs	r2, #0
 800bb10:	601a      	str	r2, [r3, #0]
 800bb12:	809a      	strh	r2, [r3, #4]

	if (ls_slot > 0 && ls_slot <= 36)
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d021      	beq.n	800bb5e <auto_set_ls+0x5e>
 800bb1a:	79fb      	ldrb	r3, [r7, #7]
 800bb1c:	2b24      	cmp	r3, #36	@ 0x24
 800bb1e:	d81e      	bhi.n	800bb5e <auto_set_ls+0x5e>
	{

		uint8_t chip_index = (ls_slot - 1) / 6;
 800bb20:	79fb      	ldrb	r3, [r7, #7]
 800bb22:	3b01      	subs	r3, #1
 800bb24:	4a25      	ldr	r2, [pc, #148]	@ (800bbbc <auto_set_ls+0xbc>)
 800bb26:	fb82 1203 	smull	r1, r2, r2, r3
 800bb2a:	17db      	asrs	r3, r3, #31
 800bb2c:	1ad3      	subs	r3, r2, r3
 800bb2e:	74fb      	strb	r3, [r7, #19]
		uint8_t port_index = (ls_slot - 1) % 6;
 800bb30:	79fb      	ldrb	r3, [r7, #7]
 800bb32:	1e5a      	subs	r2, r3, #1
 800bb34:	4b21      	ldr	r3, [pc, #132]	@ (800bbbc <auto_set_ls+0xbc>)
 800bb36:	fb83 3102 	smull	r3, r1, r3, r2
 800bb3a:	17d3      	asrs	r3, r2, #31
 800bb3c:	1ac9      	subs	r1, r1, r3
 800bb3e:	460b      	mov	r3, r1
 800bb40:	005b      	lsls	r3, r3, #1
 800bb42:	440b      	add	r3, r1
 800bb44:	005b      	lsls	r3, r3, #1
 800bb46:	1ad1      	subs	r1, r2, r3
 800bb48:	460b      	mov	r3, r1
 800bb4a:	74bb      	strb	r3, [r7, #18]

		data[chip_index] = (1 << port_index);
 800bb4c:	7cbb      	ldrb	r3, [r7, #18]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	409a      	lsls	r2, r3
 800bb52:	7cfb      	ldrb	r3, [r7, #19]
 800bb54:	b2d2      	uxtb	r2, r2
 800bb56:	3318      	adds	r3, #24
 800bb58:	443b      	add	r3, r7
 800bb5a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	}

	LL_GPIO_ResetOutputPin(LASER_SW_INT_CS_GPIO_Port, LASER_SW_INT_CS_Pin);
 800bb5e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800bb62:	4817      	ldr	r0, [pc, #92]	@ (800bbc0 <auto_set_ls+0xc0>)
 800bb64:	f7ff fda4 	bl	800b6b0 <LL_GPIO_ResetOutputPin>

	for (int i = 5; i >= 0; i--)
 800bb68:	2305      	movs	r3, #5
 800bb6a:	617b      	str	r3, [r7, #20]
 800bb6c:	e012      	b.n	800bb94 <auto_set_ls+0x94>
	{
		LL_SPI_TransmitData8(SPI1, data[i]);
 800bb6e:	f107 020c 	add.w	r2, r7, #12
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	4413      	add	r3, r2
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	4619      	mov	r1, r3
 800bb7a:	4812      	ldr	r0, [pc, #72]	@ (800bbc4 <auto_set_ls+0xc4>)
 800bb7c:	f7ff fd78 	bl	800b670 <LL_SPI_TransmitData8>
		while (!LL_SPI_IsActiveFlag_TXE(SPI1))
 800bb80:	bf00      	nop
 800bb82:	4810      	ldr	r0, [pc, #64]	@ (800bbc4 <auto_set_ls+0xc4>)
 800bb84:	f7ff fd4e 	bl	800b624 <LL_SPI_IsActiveFlag_TXE>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d0f9      	beq.n	800bb82 <auto_set_ls+0x82>
	for (int i = 5; i >= 0; i--)
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	3b01      	subs	r3, #1
 800bb92:	617b      	str	r3, [r7, #20]
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	dae9      	bge.n	800bb6e <auto_set_ls+0x6e>
			;
	}

	while (LL_SPI_IsActiveFlag_BSY(SPI1))
 800bb9a:	bf00      	nop
 800bb9c:	4809      	ldr	r0, [pc, #36]	@ (800bbc4 <auto_set_ls+0xc4>)
 800bb9e:	f7ff fd54 	bl	800b64a <LL_SPI_IsActiveFlag_BSY>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d1f9      	bne.n	800bb9c <auto_set_ls+0x9c>
		;

	LL_GPIO_SetOutputPin(LASER_SW_INT_CS_GPIO_Port, LASER_SW_INT_CS_Pin);
 800bba8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800bbac:	4804      	ldr	r0, [pc, #16]	@ (800bbc0 <auto_set_ls+0xc0>)
 800bbae:	f7ff fd71 	bl	800b694 <LL_GPIO_SetOutputPin>
}
 800bbb2:	bf00      	nop
 800bbb4:	3718      	adds	r7, #24
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	2aaaaaab 	.word	0x2aaaaaab
 800bbc0:	40021000 	.word	0x40021000
 800bbc4:	40013000 	.word	0x40013000

0800bbc8 <read_adc>:

void read_adc(void)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b098      	sub	sp, #96	@ 0x60
 800bbcc:	af02      	add	r7, sp, #8
	uint8_t rxData[2] = {0};
 800bbce:	2300      	movs	r3, #0
 800bbd0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	uint32_t result = 0;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	657b      	str	r3, [r7, #84]	@ 0x54
	float voltage = 0.0;
 800bbd8:	f04f 0300 	mov.w	r3, #0
 800bbdc:	653b      	str	r3, [r7, #80]	@ 0x50
	const float vref = 3.0;
 800bbde:	4b32      	ldr	r3, [pc, #200]	@ (800bca8 <read_adc+0xe0>)
 800bbe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int32_t voltage_int = 0, voltage_frac = 0;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	647b      	str	r3, [r7, #68]	@ 0x44

	LL_GPIO_ResetOutputPin(PHOTO_ADC_CONV_GPIO_Port, PHOTO_ADC_CONV_Pin);
 800bbea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800bbee:	482f      	ldr	r0, [pc, #188]	@ (800bcac <read_adc+0xe4>)
 800bbf0:	f7ff fd5e 	bl	800b6b0 <LL_GPIO_ResetOutputPin>
	__asm__("NOP");
 800bbf4:	bf00      	nop
	LL_GPIO_SetOutputPin(PHOTO_ADC_CONV_GPIO_Port, PHOTO_ADC_CONV_Pin);
 800bbf6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800bbfa:	482c      	ldr	r0, [pc, #176]	@ (800bcac <read_adc+0xe4>)
 800bbfc:	f7ff fd4a 	bl	800b694 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(PHOTO_ADC_CS_GPIO_Port, PHOTO_ADC_CS_Pin);
 800bc00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bc04:	4829      	ldr	r0, [pc, #164]	@ (800bcac <read_adc+0xe4>)
 800bc06:	f7ff fd53 	bl	800b6b0 <LL_GPIO_ResetOutputPin>
	HAL_SPI_Receive(&hspi2, rxData, 2, 1000);
 800bc0a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800bc0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bc12:	2202      	movs	r2, #2
 800bc14:	4826      	ldr	r0, [pc, #152]	@ (800bcb0 <read_adc+0xe8>)
 800bc16:	f004 fdd6 	bl	80107c6 <HAL_SPI_Receive>
	LL_GPIO_SetOutputPin(PHOTO_ADC_CS_GPIO_Port, PHOTO_ADC_CS_Pin);
 800bc1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bc1e:	4823      	ldr	r0, [pc, #140]	@ (800bcac <read_adc+0xe4>)
 800bc20:	f7ff fd38 	bl	800b694 <LL_GPIO_SetOutputPin>

	result = ((uint32_t)rxData[0] << 8) | rxData[1];
 800bc24:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800bc28:	021b      	lsls	r3, r3, #8
 800bc2a:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	657b      	str	r3, [r7, #84]	@ 0x54
	voltage = (result / 65536.0f) * vref;
 800bc32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc34:	ee07 3a90 	vmov	s15, r3
 800bc38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bc3c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800bcb4 <read_adc+0xec>
 800bc40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bc44:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800bc48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc4c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

	voltage_int = (int32_t)voltage;
 800bc50:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800bc54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc58:	ee17 3a90 	vmov	r3, s15
 800bc5c:	64bb      	str	r3, [r7, #72]	@ 0x48
	voltage_frac = (int32_t)((voltage - voltage_int) * 1000);
 800bc5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc60:	ee07 3a90 	vmov	s15, r3
 800bc64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc68:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800bc6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc70:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800bcb8 <read_adc+0xf0>
 800bc74:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc7c:	ee17 3a90 	vmov	r3, s15
 800bc80:	647b      	str	r3, [r7, #68]	@ 0x44

	char buffer[60];
	snprintf(buffer, sizeof(buffer), "AutoADC: %ld (Vol: %ld.%03ld V)\r\n", result, voltage_int, voltage_frac);
 800bc82:	1d38      	adds	r0, r7, #4
 800bc84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc86:	9301      	str	r3, [sp, #4]
 800bc88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc8a:	9300      	str	r3, [sp, #0]
 800bc8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc8e:	4a0b      	ldr	r2, [pc, #44]	@ (800bcbc <read_adc+0xf4>)
 800bc90:	213c      	movs	r1, #60	@ 0x3c
 800bc92:	f007 fb65 	bl	8013360 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800bc96:	1d3b      	adds	r3, r7, #4
 800bc98:	4619      	mov	r1, r3
 800bc9a:	4809      	ldr	r0, [pc, #36]	@ (800bcc0 <read_adc+0xf8>)
 800bc9c:	f7fd fb82 	bl	80093a4 <UART_SendStringRing>
}
 800bca0:	bf00      	nop
 800bca2:	3758      	adds	r7, #88	@ 0x58
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	40400000 	.word	0x40400000
 800bcac:	40020c00 	.word	0x40020c00
 800bcb0:	200035cc 	.word	0x200035cc
 800bcb4:	47800000 	.word	0x47800000
 800bcb8:	447a0000 	.word	0x447a0000
 800bcbc:	08015938 	.word	0x08015938
 800bcc0:	40011000 	.word	0x40011000

0800bcc4 <read_adc_without_LF>:

void read_adc_without_LF(void)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b090      	sub	sp, #64	@ 0x40
 800bcc8:	af02      	add	r7, sp, #8
	uint8_t rxData[2] = {0};
 800bcca:	2300      	movs	r3, #0
 800bccc:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint16_t result = 0;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	86fb      	strh	r3, [r7, #54]	@ 0x36

	LL_GPIO_ResetOutputPin(PHOTO_ADC_CONV_GPIO_Port, PHOTO_ADC_CONV_Pin);
 800bcd2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800bcd6:	481d      	ldr	r0, [pc, #116]	@ (800bd4c <read_adc_without_LF+0x88>)
 800bcd8:	f7ff fcea 	bl	800b6b0 <LL_GPIO_ResetOutputPin>
	__asm__("NOP");
 800bcdc:	bf00      	nop
	LL_GPIO_SetOutputPin(PHOTO_ADC_CONV_GPIO_Port, PHOTO_ADC_CONV_Pin);
 800bcde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800bce2:	481a      	ldr	r0, [pc, #104]	@ (800bd4c <read_adc_without_LF+0x88>)
 800bce4:	f7ff fcd6 	bl	800b694 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(PHOTO_ADC_CS_GPIO_Port, PHOTO_ADC_CS_Pin);
 800bce8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bcec:	4817      	ldr	r0, [pc, #92]	@ (800bd4c <read_adc_without_LF+0x88>)
 800bcee:	f7ff fcdf 	bl	800b6b0 <LL_GPIO_ResetOutputPin>
	HAL_SPI_Receive(&hspi2, rxData, 2, 1000);
 800bcf2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800bcf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bcfa:	2202      	movs	r2, #2
 800bcfc:	4814      	ldr	r0, [pc, #80]	@ (800bd50 <read_adc_without_LF+0x8c>)
 800bcfe:	f004 fd62 	bl	80107c6 <HAL_SPI_Receive>
	LL_GPIO_SetOutputPin(PHOTO_ADC_CS_GPIO_Port, PHOTO_ADC_CS_Pin);
 800bd02:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bd06:	4811      	ldr	r0, [pc, #68]	@ (800bd4c <read_adc_without_LF+0x88>)
 800bd08:	f7ff fcc4 	bl	800b694 <LL_GPIO_SetOutputPin>

	result = ((uint16_t)rxData[0] << 8) | rxData[1];
 800bd0c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800bd10:	b21b      	sxth	r3, r3
 800bd12:	021b      	lsls	r3, r3, #8
 800bd14:	b21a      	sxth	r2, r3
 800bd16:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800bd1a:	b21b      	sxth	r3, r3
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	b21b      	sxth	r3, r3
 800bd20:	86fb      	strh	r3, [r7, #54]	@ 0x36

	char buffer[50];
	snprintf(buffer, sizeof(buffer), "  [T: %d]-[ADC: %d]", data_times, result);
 800bd22:	4b0c      	ldr	r3, [pc, #48]	@ (800bd54 <read_adc_without_LF+0x90>)
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	461a      	mov	r2, r3
 800bd28:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bd2a:	4638      	mov	r0, r7
 800bd2c:	9300      	str	r3, [sp, #0]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	4a09      	ldr	r2, [pc, #36]	@ (800bd58 <read_adc_without_LF+0x94>)
 800bd32:	2132      	movs	r1, #50	@ 0x32
 800bd34:	f007 fb14 	bl	8013360 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800bd38:	463b      	mov	r3, r7
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	4807      	ldr	r0, [pc, #28]	@ (800bd5c <read_adc_without_LF+0x98>)
 800bd3e:	f7fd fb31 	bl	80093a4 <UART_SendStringRing>
}
 800bd42:	bf00      	nop
 800bd44:	3738      	adds	r7, #56	@ 0x38
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	40020c00 	.word	0x40020c00
 800bd50:	200035cc 	.word	0x200035cc
 800bd54:	200034e1 	.word	0x200034e1
 800bd58:	0801595c 	.word	0x0801595c
 800bd5c:	40011000 	.word	0x40011000

0800bd60 <AutoRun_CreateTask>:

void AutoRun_CreateTask(void)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_auto_runTaskContext.taskHandle, &s_auto_runTaskContext.taskProperty);
 800bd64:	4902      	ldr	r1, [pc, #8]	@ (800bd70 <AutoRun_CreateTask+0x10>)
 800bd66:	4803      	ldr	r0, [pc, #12]	@ (800bd74 <AutoRun_CreateTask+0x14>)
 800bd68:	f007 f93e 	bl	8012fe8 <SCH_TASK_CreateTask>
}
 800bd6c:	bf00      	nop
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	2000021c 	.word	0x2000021c
 800bd74:	20000218 	.word	0x20000218

0800bd78 <SoftTime_Task_Update>:
		SoftTime_Task_Update,                // taskFunction;
		0							//taskTick
	},
};

void SoftTime_Task_Update(void) {
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
    s_RealTimeClock_context.second++;
 800bd7e:	4b5b      	ldr	r3, [pc, #364]	@ (800beec <SoftTime_Task_Update+0x174>)
 800bd80:	795b      	ldrb	r3, [r3, #5]
 800bd82:	3301      	adds	r3, #1
 800bd84:	b2da      	uxtb	r2, r3
 800bd86:	4b59      	ldr	r3, [pc, #356]	@ (800beec <SoftTime_Task_Update+0x174>)
 800bd88:	715a      	strb	r2, [r3, #5]
    if (s_RealTimeClock_context.second >= 60) {
 800bd8a:	4b58      	ldr	r3, [pc, #352]	@ (800beec <SoftTime_Task_Update+0x174>)
 800bd8c:	795b      	ldrb	r3, [r3, #5]
 800bd8e:	2b3b      	cmp	r3, #59	@ 0x3b
 800bd90:	d97a      	bls.n	800be88 <SoftTime_Task_Update+0x110>
        s_RealTimeClock_context.second = 0;
 800bd92:	4b56      	ldr	r3, [pc, #344]	@ (800beec <SoftTime_Task_Update+0x174>)
 800bd94:	2200      	movs	r2, #0
 800bd96:	715a      	strb	r2, [r3, #5]
        s_RealTimeClock_context.minute++;
 800bd98:	4b54      	ldr	r3, [pc, #336]	@ (800beec <SoftTime_Task_Update+0x174>)
 800bd9a:	791b      	ldrb	r3, [r3, #4]
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	4b52      	ldr	r3, [pc, #328]	@ (800beec <SoftTime_Task_Update+0x174>)
 800bda2:	711a      	strb	r2, [r3, #4]
        if (s_RealTimeClock_context.minute >= 60) {
 800bda4:	4b51      	ldr	r3, [pc, #324]	@ (800beec <SoftTime_Task_Update+0x174>)
 800bda6:	791b      	ldrb	r3, [r3, #4]
 800bda8:	2b3b      	cmp	r3, #59	@ 0x3b
 800bdaa:	d96d      	bls.n	800be88 <SoftTime_Task_Update+0x110>
            s_RealTimeClock_context.minute = 0;
 800bdac:	4b4f      	ldr	r3, [pc, #316]	@ (800beec <SoftTime_Task_Update+0x174>)
 800bdae:	2200      	movs	r2, #0
 800bdb0:	711a      	strb	r2, [r3, #4]
            s_RealTimeClock_context.hour++;
 800bdb2:	4b4e      	ldr	r3, [pc, #312]	@ (800beec <SoftTime_Task_Update+0x174>)
 800bdb4:	78db      	ldrb	r3, [r3, #3]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	b2da      	uxtb	r2, r3
 800bdba:	4b4c      	ldr	r3, [pc, #304]	@ (800beec <SoftTime_Task_Update+0x174>)
 800bdbc:	70da      	strb	r2, [r3, #3]
            if (s_RealTimeClock_context.hour >= 24) {
 800bdbe:	4b4b      	ldr	r3, [pc, #300]	@ (800beec <SoftTime_Task_Update+0x174>)
 800bdc0:	78db      	ldrb	r3, [r3, #3]
 800bdc2:	2b17      	cmp	r3, #23
 800bdc4:	d960      	bls.n	800be88 <SoftTime_Task_Update+0x110>
                s_RealTimeClock_context.hour = 0;
 800bdc6:	4b49      	ldr	r3, [pc, #292]	@ (800beec <SoftTime_Task_Update+0x174>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	70da      	strb	r2, [r3, #3]
                s_RealTimeClock_context.day++;
 800bdcc:	4b47      	ldr	r3, [pc, #284]	@ (800beec <SoftTime_Task_Update+0x174>)
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	b2da      	uxtb	r2, r3
 800bdd4:	4b45      	ldr	r3, [pc, #276]	@ (800beec <SoftTime_Task_Update+0x174>)
 800bdd6:	701a      	strb	r2, [r3, #0]

                static const uint8_t daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
                uint8_t leapYear = ((s_RealTimeClock_context.year % 4 == 0) &&
 800bdd8:	4b44      	ldr	r3, [pc, #272]	@ (800beec <SoftTime_Task_Update+0x174>)
 800bdda:	789b      	ldrb	r3, [r3, #2]
 800bddc:	f003 0303 	and.w	r3, r3, #3
 800bde0:	b2db      	uxtb	r3, r3
                                   ((s_RealTimeClock_context.year % 100 != 0) ||
                                		   (s_RealTimeClock_context.year % 400 == 0))) ? 1 : 0;
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d11e      	bne.n	800be24 <SoftTime_Task_Update+0xac>
                                   ((s_RealTimeClock_context.year % 100 != 0) ||
 800bde6:	4b41      	ldr	r3, [pc, #260]	@ (800beec <SoftTime_Task_Update+0x174>)
 800bde8:	789b      	ldrb	r3, [r3, #2]
 800bdea:	4a41      	ldr	r2, [pc, #260]	@ (800bef0 <SoftTime_Task_Update+0x178>)
 800bdec:	fba2 1203 	umull	r1, r2, r2, r3
 800bdf0:	0952      	lsrs	r2, r2, #5
 800bdf2:	2164      	movs	r1, #100	@ 0x64
 800bdf4:	fb01 f202 	mul.w	r2, r1, r2
 800bdf8:	1a9b      	subs	r3, r3, r2
 800bdfa:	b2db      	uxtb	r3, r3
                                		   (s_RealTimeClock_context.year % 400 == 0))) ? 1 : 0;
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d10f      	bne.n	800be20 <SoftTime_Task_Update+0xa8>
 800be00:	4b3a      	ldr	r3, [pc, #232]	@ (800beec <SoftTime_Task_Update+0x174>)
 800be02:	789b      	ldrb	r3, [r3, #2]
 800be04:	461a      	mov	r2, r3
 800be06:	4b3a      	ldr	r3, [pc, #232]	@ (800bef0 <SoftTime_Task_Update+0x178>)
 800be08:	fb83 1302 	smull	r1, r3, r3, r2
 800be0c:	11d9      	asrs	r1, r3, #7
 800be0e:	17d3      	asrs	r3, r2, #31
 800be10:	1acb      	subs	r3, r1, r3
 800be12:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800be16:	fb01 f303 	mul.w	r3, r1, r3
 800be1a:	1ad3      	subs	r3, r2, r3
                                   ((s_RealTimeClock_context.year % 100 != 0) ||
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d101      	bne.n	800be24 <SoftTime_Task_Update+0xac>
                                		   (s_RealTimeClock_context.year % 400 == 0))) ? 1 : 0;
 800be20:	2301      	movs	r3, #1
 800be22:	e000      	b.n	800be26 <SoftTime_Task_Update+0xae>
 800be24:	2300      	movs	r3, #0
                uint8_t leapYear = ((s_RealTimeClock_context.year % 4 == 0) &&
 800be26:	71fb      	strb	r3, [r7, #7]

                uint8_t maxDays =
                		(s_RealTimeClock_context.month == 2) ? (28 + leapYear) : daysInMonth[s_RealTimeClock_context.month - 1];
 800be28:	4b30      	ldr	r3, [pc, #192]	@ (800beec <SoftTime_Task_Update+0x174>)
 800be2a:	785b      	ldrb	r3, [r3, #1]
                uint8_t maxDays =
 800be2c:	2b02      	cmp	r3, #2
 800be2e:	d103      	bne.n	800be38 <SoftTime_Task_Update+0xc0>
 800be30:	79fb      	ldrb	r3, [r7, #7]
 800be32:	331c      	adds	r3, #28
 800be34:	b2db      	uxtb	r3, r3
 800be36:	e004      	b.n	800be42 <SoftTime_Task_Update+0xca>
                		(s_RealTimeClock_context.month == 2) ? (28 + leapYear) : daysInMonth[s_RealTimeClock_context.month - 1];
 800be38:	4b2c      	ldr	r3, [pc, #176]	@ (800beec <SoftTime_Task_Update+0x174>)
 800be3a:	785b      	ldrb	r3, [r3, #1]
 800be3c:	3b01      	subs	r3, #1
                uint8_t maxDays =
 800be3e:	4a2d      	ldr	r2, [pc, #180]	@ (800bef4 <SoftTime_Task_Update+0x17c>)
 800be40:	5cd3      	ldrb	r3, [r2, r3]
 800be42:	71bb      	strb	r3, [r7, #6]

                if (s_RealTimeClock_context.day > maxDays) {
 800be44:	4b29      	ldr	r3, [pc, #164]	@ (800beec <SoftTime_Task_Update+0x174>)
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	79ba      	ldrb	r2, [r7, #6]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d21c      	bcs.n	800be88 <SoftTime_Task_Update+0x110>
                    s_RealTimeClock_context.day = 1;
 800be4e:	4b27      	ldr	r3, [pc, #156]	@ (800beec <SoftTime_Task_Update+0x174>)
 800be50:	2201      	movs	r2, #1
 800be52:	701a      	strb	r2, [r3, #0]
                    s_RealTimeClock_context.month++;
 800be54:	4b25      	ldr	r3, [pc, #148]	@ (800beec <SoftTime_Task_Update+0x174>)
 800be56:	785b      	ldrb	r3, [r3, #1]
 800be58:	3301      	adds	r3, #1
 800be5a:	b2da      	uxtb	r2, r3
 800be5c:	4b23      	ldr	r3, [pc, #140]	@ (800beec <SoftTime_Task_Update+0x174>)
 800be5e:	705a      	strb	r2, [r3, #1]
                    if (s_RealTimeClock_context.month > 12) {
 800be60:	4b22      	ldr	r3, [pc, #136]	@ (800beec <SoftTime_Task_Update+0x174>)
 800be62:	785b      	ldrb	r3, [r3, #1]
 800be64:	2b0c      	cmp	r3, #12
 800be66:	d90f      	bls.n	800be88 <SoftTime_Task_Update+0x110>
                        s_RealTimeClock_context.month = 1;
 800be68:	4b20      	ldr	r3, [pc, #128]	@ (800beec <SoftTime_Task_Update+0x174>)
 800be6a:	2201      	movs	r2, #1
 800be6c:	705a      	strb	r2, [r3, #1]
                        s_RealTimeClock_context.year++;
 800be6e:	4b1f      	ldr	r3, [pc, #124]	@ (800beec <SoftTime_Task_Update+0x174>)
 800be70:	789b      	ldrb	r3, [r3, #2]
 800be72:	3301      	adds	r3, #1
 800be74:	b2da      	uxtb	r2, r3
 800be76:	4b1d      	ldr	r3, [pc, #116]	@ (800beec <SoftTime_Task_Update+0x174>)
 800be78:	709a      	strb	r2, [r3, #2]
                        if (s_RealTimeClock_context.year > 99) {
 800be7a:	4b1c      	ldr	r3, [pc, #112]	@ (800beec <SoftTime_Task_Update+0x174>)
 800be7c:	789b      	ldrb	r3, [r3, #2]
 800be7e:	2b63      	cmp	r3, #99	@ 0x63
 800be80:	d902      	bls.n	800be88 <SoftTime_Task_Update+0x110>
                            s_RealTimeClock_context.year = 0;
 800be82:	4b1a      	ldr	r3, [pc, #104]	@ (800beec <SoftTime_Task_Update+0x174>)
 800be84:	2200      	movs	r2, #0
 800be86:	709a      	strb	r2, [r3, #2]
                }
            }
        }
    }

    s_WorkingTimeClock_context.seconds++;
 800be88:	4b1b      	ldr	r3, [pc, #108]	@ (800bef8 <SoftTime_Task_Update+0x180>)
 800be8a:	799b      	ldrb	r3, [r3, #6]
 800be8c:	3301      	adds	r3, #1
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	4b19      	ldr	r3, [pc, #100]	@ (800bef8 <SoftTime_Task_Update+0x180>)
 800be92:	719a      	strb	r2, [r3, #6]
    if (s_WorkingTimeClock_context.seconds >= 60) {
 800be94:	4b18      	ldr	r3, [pc, #96]	@ (800bef8 <SoftTime_Task_Update+0x180>)
 800be96:	799b      	ldrb	r3, [r3, #6]
 800be98:	2b3b      	cmp	r3, #59	@ 0x3b
 800be9a:	d921      	bls.n	800bee0 <SoftTime_Task_Update+0x168>
        s_WorkingTimeClock_context.seconds = 0;
 800be9c:	4b16      	ldr	r3, [pc, #88]	@ (800bef8 <SoftTime_Task_Update+0x180>)
 800be9e:	2200      	movs	r2, #0
 800bea0:	719a      	strb	r2, [r3, #6]
        s_WorkingTimeClock_context.minutes++;
 800bea2:	4b15      	ldr	r3, [pc, #84]	@ (800bef8 <SoftTime_Task_Update+0x180>)
 800bea4:	795b      	ldrb	r3, [r3, #5]
 800bea6:	3301      	adds	r3, #1
 800bea8:	b2da      	uxtb	r2, r3
 800beaa:	4b13      	ldr	r3, [pc, #76]	@ (800bef8 <SoftTime_Task_Update+0x180>)
 800beac:	715a      	strb	r2, [r3, #5]
        if (s_WorkingTimeClock_context.minutes >= 60) {
 800beae:	4b12      	ldr	r3, [pc, #72]	@ (800bef8 <SoftTime_Task_Update+0x180>)
 800beb0:	795b      	ldrb	r3, [r3, #5]
 800beb2:	2b3b      	cmp	r3, #59	@ 0x3b
 800beb4:	d914      	bls.n	800bee0 <SoftTime_Task_Update+0x168>
            s_WorkingTimeClock_context.minutes = 0;
 800beb6:	4b10      	ldr	r3, [pc, #64]	@ (800bef8 <SoftTime_Task_Update+0x180>)
 800beb8:	2200      	movs	r2, #0
 800beba:	715a      	strb	r2, [r3, #5]
            s_WorkingTimeClock_context.hours++;
 800bebc:	4b0e      	ldr	r3, [pc, #56]	@ (800bef8 <SoftTime_Task_Update+0x180>)
 800bebe:	791b      	ldrb	r3, [r3, #4]
 800bec0:	3301      	adds	r3, #1
 800bec2:	b2da      	uxtb	r2, r3
 800bec4:	4b0c      	ldr	r3, [pc, #48]	@ (800bef8 <SoftTime_Task_Update+0x180>)
 800bec6:	711a      	strb	r2, [r3, #4]
            if (s_WorkingTimeClock_context.hours >= 24) {
 800bec8:	4b0b      	ldr	r3, [pc, #44]	@ (800bef8 <SoftTime_Task_Update+0x180>)
 800beca:	791b      	ldrb	r3, [r3, #4]
 800becc:	2b17      	cmp	r3, #23
 800bece:	d907      	bls.n	800bee0 <SoftTime_Task_Update+0x168>
                s_WorkingTimeClock_context.hours = 0;
 800bed0:	4b09      	ldr	r3, [pc, #36]	@ (800bef8 <SoftTime_Task_Update+0x180>)
 800bed2:	2200      	movs	r2, #0
 800bed4:	711a      	strb	r2, [r3, #4]
                s_WorkingTimeClock_context.days++;
 800bed6:	4b08      	ldr	r3, [pc, #32]	@ (800bef8 <SoftTime_Task_Update+0x180>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	3301      	adds	r3, #1
 800bedc:	4a06      	ldr	r2, [pc, #24]	@ (800bef8 <SoftTime_Task_Update+0x180>)
 800bede:	6013      	str	r3, [r2, #0]
            }
        }
    }
}
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr
 800beec:	20000234 	.word	0x20000234
 800bef0:	51eb851f 	.word	0x51eb851f
 800bef4:	0801597c 	.word	0x0801597c
 800bef8:	200034fc 	.word	0x200034fc

0800befc <SoftTime_CreateTask>:

void SoftTime_CreateTask(void) {
 800befc:	b580      	push	{r7, lr}
 800befe:	af00      	add	r7, sp, #0
    s_RealTimeClock_context.year = 0;  // 2000
 800bf00:	4b11      	ldr	r3, [pc, #68]	@ (800bf48 <SoftTime_CreateTask+0x4c>)
 800bf02:	2200      	movs	r2, #0
 800bf04:	709a      	strb	r2, [r3, #2]
    s_RealTimeClock_context.month = 1; // January
 800bf06:	4b10      	ldr	r3, [pc, #64]	@ (800bf48 <SoftTime_CreateTask+0x4c>)
 800bf08:	2201      	movs	r2, #1
 800bf0a:	705a      	strb	r2, [r3, #1]
    s_RealTimeClock_context.day = 1;
 800bf0c:	4b0e      	ldr	r3, [pc, #56]	@ (800bf48 <SoftTime_CreateTask+0x4c>)
 800bf0e:	2201      	movs	r2, #1
 800bf10:	701a      	strb	r2, [r3, #0]
    s_RealTimeClock_context.hour = 0;
 800bf12:	4b0d      	ldr	r3, [pc, #52]	@ (800bf48 <SoftTime_CreateTask+0x4c>)
 800bf14:	2200      	movs	r2, #0
 800bf16:	70da      	strb	r2, [r3, #3]
    s_RealTimeClock_context.minute = 0;
 800bf18:	4b0b      	ldr	r3, [pc, #44]	@ (800bf48 <SoftTime_CreateTask+0x4c>)
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	711a      	strb	r2, [r3, #4]
    s_RealTimeClock_context.second = 0;
 800bf1e:	4b0a      	ldr	r3, [pc, #40]	@ (800bf48 <SoftTime_CreateTask+0x4c>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	715a      	strb	r2, [r3, #5]

    s_WorkingTimeClock_context.days = 0;
 800bf24:	4b09      	ldr	r3, [pc, #36]	@ (800bf4c <SoftTime_CreateTask+0x50>)
 800bf26:	2200      	movs	r2, #0
 800bf28:	601a      	str	r2, [r3, #0]
    s_WorkingTimeClock_context.hours = 0;
 800bf2a:	4b08      	ldr	r3, [pc, #32]	@ (800bf4c <SoftTime_CreateTask+0x50>)
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	711a      	strb	r2, [r3, #4]
    s_WorkingTimeClock_context.minutes = 0;
 800bf30:	4b06      	ldr	r3, [pc, #24]	@ (800bf4c <SoftTime_CreateTask+0x50>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	715a      	strb	r2, [r3, #5]
    s_WorkingTimeClock_context.seconds = 0;
 800bf36:	4b05      	ldr	r3, [pc, #20]	@ (800bf4c <SoftTime_CreateTask+0x50>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	719a      	strb	r2, [r3, #6]

    SCH_TASK_CreateTask(&s_SoftTime_task_context.taskHandle, &s_SoftTime_task_context.taskProperty);
 800bf3c:	4904      	ldr	r1, [pc, #16]	@ (800bf50 <SoftTime_CreateTask+0x54>)
 800bf3e:	4805      	ldr	r0, [pc, #20]	@ (800bf54 <SoftTime_CreateTask+0x58>)
 800bf40:	f007 f852 	bl	8012fe8 <SCH_TASK_CreateTask>
}
 800bf44:	bf00      	nop
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	20000234 	.word	0x20000234
 800bf4c:	200034fc 	.word	0x200034fc
 800bf50:	20000240 	.word	0x20000240
 800bf54:	2000023c 	.word	0x2000023c

0800bf58 <DateTime_GetRTC>:

void DateTime_GetRTC(s_DateTime *dateTime) {
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
    if (dateTime == NULL) return;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d006      	beq.n	800bf74 <DateTime_GetRTC+0x1c>
    *dateTime = s_RealTimeClock_context;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4a05      	ldr	r2, [pc, #20]	@ (800bf80 <DateTime_GetRTC+0x28>)
 800bf6a:	6810      	ldr	r0, [r2, #0]
 800bf6c:	6018      	str	r0, [r3, #0]
 800bf6e:	8892      	ldrh	r2, [r2, #4]
 800bf70:	809a      	strh	r2, [r3, #4]
 800bf72:	e000      	b.n	800bf76 <DateTime_GetRTC+0x1e>
    if (dateTime == NULL) return;
 800bf74:	bf00      	nop
}
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr
 800bf80:	20000234 	.word	0x20000234

0800bf84 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	683a      	ldr	r2, [r7, #0]
 800bfae:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800bfb0:	bf00      	nop
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	683a      	ldr	r2, [r7, #0]
 800bfca:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800bfe8:	bf00      	nop
 800bfea:	370c      	adds	r7, #12
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <heater_set_duty_pwm_channel>:

#include "heater.h"
#include "main.h"

void heater_set_duty_pwm_channel(uint8_t channel, uint16_t duty_pwm)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	4603      	mov	r3, r0
 800bffc:	460a      	mov	r2, r1
 800bffe:	71fb      	strb	r3, [r7, #7]
 800c000:	4613      	mov	r3, r2
 800c002:	80bb      	strh	r3, [r7, #4]
    if (duty_pwm > 999) duty_pwm = 999;
 800c004:	88bb      	ldrh	r3, [r7, #4]
 800c006:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c00a:	d302      	bcc.n	800c012 <heater_set_duty_pwm_channel+0x1e>
 800c00c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800c010:	80bb      	strh	r3, [r7, #4]
    switch (channel)
 800c012:	79fb      	ldrb	r3, [r7, #7]
 800c014:	2b03      	cmp	r3, #3
 800c016:	d823      	bhi.n	800c060 <heater_set_duty_pwm_channel+0x6c>
 800c018:	a201      	add	r2, pc, #4	@ (adr r2, 800c020 <heater_set_duty_pwm_channel+0x2c>)
 800c01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c01e:	bf00      	nop
 800c020:	0800c031 	.word	0x0800c031
 800c024:	0800c03d 	.word	0x0800c03d
 800c028:	0800c049 	.word	0x0800c049
 800c02c:	0800c055 	.word	0x0800c055
    {
        case 0:
            LL_TIM_OC_SetCompareCH1(TIM1, duty_pwm);
 800c030:	88bb      	ldrh	r3, [r7, #4]
 800c032:	4619      	mov	r1, r3
 800c034:	480d      	ldr	r0, [pc, #52]	@ (800c06c <heater_set_duty_pwm_channel+0x78>)
 800c036:	f7ff ffa5 	bl	800bf84 <LL_TIM_OC_SetCompareCH1>
            break;
 800c03a:	e012      	b.n	800c062 <heater_set_duty_pwm_channel+0x6e>
        case 1:
            LL_TIM_OC_SetCompareCH2(TIM1, duty_pwm);
 800c03c:	88bb      	ldrh	r3, [r7, #4]
 800c03e:	4619      	mov	r1, r3
 800c040:	480a      	ldr	r0, [pc, #40]	@ (800c06c <heater_set_duty_pwm_channel+0x78>)
 800c042:	f7ff ffad 	bl	800bfa0 <LL_TIM_OC_SetCompareCH2>
            break;
 800c046:	e00c      	b.n	800c062 <heater_set_duty_pwm_channel+0x6e>
        case 2:
            LL_TIM_OC_SetCompareCH3(TIM1, duty_pwm);
 800c048:	88bb      	ldrh	r3, [r7, #4]
 800c04a:	4619      	mov	r1, r3
 800c04c:	4807      	ldr	r0, [pc, #28]	@ (800c06c <heater_set_duty_pwm_channel+0x78>)
 800c04e:	f7ff ffb5 	bl	800bfbc <LL_TIM_OC_SetCompareCH3>
            break;
 800c052:	e006      	b.n	800c062 <heater_set_duty_pwm_channel+0x6e>
        case 3:
            LL_TIM_OC_SetCompareCH4(TIM1, duty_pwm);
 800c054:	88bb      	ldrh	r3, [r7, #4]
 800c056:	4619      	mov	r1, r3
 800c058:	4804      	ldr	r0, [pc, #16]	@ (800c06c <heater_set_duty_pwm_channel+0x78>)
 800c05a:	f7ff ffbd 	bl	800bfd8 <LL_TIM_OC_SetCompareCH4>
            break;
 800c05e:	e000      	b.n	800c062 <heater_set_duty_pwm_channel+0x6e>
        default:
            break;
 800c060:	bf00      	nop
    }
}
 800c062:	bf00      	nop
 800c064:	3708      	adds	r7, #8
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	40010000 	.word	0x40010000

0800c070 <LL_TIM_OC_SetCompareCH1>:
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	683a      	ldr	r2, [r7, #0]
 800c07e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <ir_led_set_duty>:
#include "ir_led.h"

static uint16_t ir_led_duty_current = 0;

void ir_led_set_duty(uint8_t duty)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	4603      	mov	r3, r0
 800c094:	71fb      	strb	r3, [r7, #7]
	ir_led_duty_current = duty*10;
 800c096:	79fb      	ldrb	r3, [r7, #7]
 800c098:	b29b      	uxth	r3, r3
 800c09a:	461a      	mov	r2, r3
 800c09c:	0092      	lsls	r2, r2, #2
 800c09e:	4413      	add	r3, r2
 800c0a0:	005b      	lsls	r3, r3, #1
 800c0a2:	b29a      	uxth	r2, r3
 800c0a4:	4b07      	ldr	r3, [pc, #28]	@ (800c0c4 <ir_led_set_duty+0x38>)
 800c0a6:	801a      	strh	r2, [r3, #0]
	LL_TIM_OC_SetCompareCH1(TIM1, duty*10);
 800c0a8:	79fa      	ldrb	r2, [r7, #7]
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	4413      	add	r3, r2
 800c0b0:	005b      	lsls	r3, r3, #1
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	4804      	ldr	r0, [pc, #16]	@ (800c0c8 <ir_led_set_duty+0x3c>)
 800c0b6:	f7ff ffdb 	bl	800c070 <LL_TIM_OC_SetCompareCH1>
}
 800c0ba:	bf00      	nop
 800c0bc:	3708      	adds	r7, #8
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	20003504 	.word	0x20003504
 800c0c8:	40010000 	.word	0x40010000

0800c0cc <ir_led_get_duty>:

uint8_t ir_led_get_duty(void)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	af00      	add	r7, sp, #0
	return ir_led_duty_current/10;
 800c0d0:	4b06      	ldr	r3, [pc, #24]	@ (800c0ec <ir_led_get_duty+0x20>)
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	4a06      	ldr	r2, [pc, #24]	@ (800c0f0 <ir_led_get_duty+0x24>)
 800c0d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c0da:	08db      	lsrs	r3, r3, #3
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	b2db      	uxtb	r3, r3
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop
 800c0ec:	20003504 	.word	0x20003504
 800c0f0:	cccccccd 	.word	0xcccccccd

0800c0f4 <LL_SPI_Enable>:
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	601a      	str	r2, [r3, #0]
}
 800c108:	bf00      	nop
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <LL_SPI_IsEnabled>:
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c124:	2b40      	cmp	r3, #64	@ 0x40
 800c126:	d101      	bne.n	800c12c <LL_SPI_IsEnabled+0x18>
 800c128:	2301      	movs	r3, #1
 800c12a:	e000      	b.n	800c12e <LL_SPI_IsEnabled+0x1a>
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	370c      	adds	r7, #12
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <LL_SPI_IsActiveFlag_TXE>:
{
 800c13a:	b480      	push	{r7}
 800c13c:	b083      	sub	sp, #12
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	f003 0302 	and.w	r3, r3, #2
 800c14a:	2b02      	cmp	r3, #2
 800c14c:	d101      	bne.n	800c152 <LL_SPI_IsActiveFlag_TXE+0x18>
 800c14e:	2301      	movs	r3, #1
 800c150:	e000      	b.n	800c154 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <LL_SPI_IsActiveFlag_BSY>:
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c170:	2b80      	cmp	r3, #128	@ 0x80
 800c172:	d101      	bne.n	800c178 <LL_SPI_IsActiveFlag_BSY+0x18>
 800c174:	2301      	movs	r3, #1
 800c176:	e000      	b.n	800c17a <LL_SPI_IsActiveFlag_BSY+0x1a>
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	370c      	adds	r7, #12
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <LL_SPI_TransmitData8>:
{
 800c186:	b480      	push	{r7}
 800c188:	b085      	sub	sp, #20
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
 800c18e:	460b      	mov	r3, r1
 800c190:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	330c      	adds	r3, #12
 800c196:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	78fa      	ldrb	r2, [r7, #3]
 800c19c:	701a      	strb	r2, [r3, #0]
}
 800c19e:	bf00      	nop
 800c1a0:	3714      	adds	r7, #20
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr

0800c1aa <LL_GPIO_SetOutputPin>:
{
 800c1aa:	b480      	push	{r7}
 800c1ac:	b083      	sub	sp, #12
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
 800c1b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	683a      	ldr	r2, [r7, #0]
 800c1b8:	619a      	str	r2, [r3, #24]
}
 800c1ba:	bf00      	nop
 800c1bc:	370c      	adds	r7, #12
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr

0800c1c6 <LL_GPIO_ResetOutputPin>:
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	b083      	sub	sp, #12
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
 800c1ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	041a      	lsls	r2, r3, #16
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	619a      	str	r2, [r3, #24]
}
 800c1d8:	bf00      	nop
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <ADG1414_Chain_Write>:

#include <adg1414.h>


static void ADG1414_Chain_Write(ADG1414_Device_t *dev)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 800c1ec:	bf00      	nop
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7ff ffa1 	bl	800c13a <LL_SPI_IsActiveFlag_TXE>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d0f7      	beq.n	800c1ee <ADG1414_Chain_Write+0xa>
	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	685a      	ldr	r2, [r3, #4]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	4619      	mov	r1, r3
 800c208:	4610      	mov	r0, r2
 800c20a:	f7ff ffdc 	bl	800c1c6 <LL_GPIO_ResetOutputPin>

    for (int i = dev->num_of_sw - 1; i >= 0; i--)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	7b1b      	ldrb	r3, [r3, #12]
 800c212:	3b01      	subs	r3, #1
 800c214:	60fb      	str	r3, [r7, #12]
 800c216:	e01e      	b.n	800c256 <ADG1414_Chain_Write+0x72>
    {
        LL_SPI_TransmitData8(dev->spi, dev->switch_state[i]);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6818      	ldr	r0, [r3, #0]
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	4413      	add	r3, r2
 800c222:	330d      	adds	r3, #13
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	4619      	mov	r1, r3
 800c228:	f7ff ffad 	bl	800c186 <LL_SPI_TransmitData8>
        while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 800c22c:	bf00      	nop
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4618      	mov	r0, r3
 800c234:	f7ff ff81 	bl	800c13a <LL_SPI_IsActiveFlag_TXE>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d0f7      	beq.n	800c22e <ADG1414_Chain_Write+0x4a>
        while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 800c23e:	bf00      	nop
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4618      	mov	r0, r3
 800c246:	f7ff ff8b 	bl	800c160 <LL_SPI_IsActiveFlag_BSY>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1f7      	bne.n	800c240 <ADG1414_Chain_Write+0x5c>
    for (int i = dev->num_of_sw - 1; i >= 0; i--)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	3b01      	subs	r3, #1
 800c254:	60fb      	str	r3, [r7, #12]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	dadd      	bge.n	800c218 <ADG1414_Chain_Write+0x34>
    }

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685a      	ldr	r2, [r3, #4]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	4619      	mov	r1, r3
 800c266:	4610      	mov	r0, r2
 800c268:	f7ff ff9f 	bl	800c1aa <LL_GPIO_SetOutputPin>
}
 800c26c:	bf00      	nop
 800c26e:	3710      	adds	r7, #16
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <ADG1414_Chain_Init>:

/* Hàm khởi tạo module ADG1414 */
void ADG1414_Chain_Init(ADG1414_Device_t *dev, SPI_TypeDef *spi, GPIO_TypeDef *cs_port, uint32_t cs_pin, uint8_t num_of_sw)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b08c      	sub	sp, #48	@ 0x30
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
 800c280:	603b      	str	r3, [r7, #0]
	dev->spi = spi;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	601a      	str	r2, [r3, #0]
	dev->num_of_sw = num_of_sw;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c28e:	731a      	strb	r2, [r3, #12]
	dev->cs_port = cs_port;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	683a      	ldr	r2, [r7, #0]
 800c29a:	609a      	str	r2, [r3, #8]

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c29c:	f107 0314 	add.w	r3, r7, #20
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	601a      	str	r2, [r3, #0]
 800c2a4:	605a      	str	r2, [r3, #4]
 800c2a6:	609a      	str	r2, [r3, #8]
 800c2a8:	60da      	str	r2, [r3, #12]
 800c2aa:	611a      	str	r2, [r3, #16]
 800c2ac:	615a      	str	r2, [r3, #20]
    GPIO_InitStruct.Pin = dev->cs_pin;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	689b      	ldr	r3, [r3, #8]
 800c2b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800c2b8:	2302      	movs	r3, #2
 800c2ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_GPIO_Init(dev->cs_port, &GPIO_InitStruct);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	f107 0214 	add.w	r2, r7, #20
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f005 fc29 	bl	8011b26 <LL_GPIO_Init>

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	685a      	ldr	r2, [r3, #4]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	4619      	mov	r1, r3
 800c2de:	4610      	mov	r0, r2
 800c2e0:	f7ff ff63 	bl	800c1aa <LL_GPIO_SetOutputPin>

    for (int i = 0; i < dev->num_of_sw; i++)
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c2e8:	e008      	b.n	800c2fc <ADG1414_Chain_Init+0x88>
    {
        dev->switch_state[i] = 0x00;
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ee:	4413      	add	r3, r2
 800c2f0:	330d      	adds	r3, #13
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < dev->num_of_sw; i++)
 800c2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	7b1b      	ldrb	r3, [r3, #12]
 800c300:	461a      	mov	r2, r3
 800c302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c304:	4293      	cmp	r3, r2
 800c306:	dbf0      	blt.n	800c2ea <ADG1414_Chain_Init+0x76>
    }

    LL_SPI_Enable(dev->spi);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4618      	mov	r0, r3
 800c30e:	f7ff fef1 	bl	800c0f4 <LL_SPI_Enable>
    while (!LL_SPI_IsEnabled(dev->spi));
 800c312:	bf00      	nop
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4618      	mov	r0, r3
 800c31a:	f7ff fefb 	bl	800c114 <LL_SPI_IsEnabled>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d0f7      	beq.n	800c314 <ADG1414_Chain_Init+0xa0>

    ADG1414_Chain_Write(dev);
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f7ff ff5d 	bl	800c1e4 <ADG1414_Chain_Write>
}
 800c32a:	bf00      	nop
 800c32c:	3730      	adds	r7, #48	@ 0x30
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
	...

0800c334 <ADG1414_Chain_SwitchOn>:

/* Hàm bật một switch */
void ADG1414_Chain_SwitchOn(ADG1414_Device_t *dev, uint8_t channel_num)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	460b      	mov	r3, r1
 800c33e:	70fb      	strb	r3, [r7, #3]
    if ((channel_num >= INTERNAL_CHAIN_CHANNEL_NUM)&&
 800c340:	78fb      	ldrb	r3, [r7, #3]
 800c342:	2b23      	cmp	r3, #35	@ 0x23
 800c344:	d903      	bls.n	800c34e <ADG1414_Chain_SwitchOn+0x1a>
    	(dev->num_of_sw == INTERNAL_CHAIN_SWITCH_NUM))
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	7b1b      	ldrb	r3, [r3, #12]
    if ((channel_num >= INTERNAL_CHAIN_CHANNEL_NUM)&&
 800c34a:	2b06      	cmp	r3, #6
 800c34c:	d05a      	beq.n	800c404 <ADG1414_Chain_SwitchOn+0xd0>
    	return;  // Kiểm tra giới hạn

    if ((channel_num >= EXTERNAL_CHAIN_CHANNEL_NUM)&&
 800c34e:	78fb      	ldrb	r3, [r7, #3]
 800c350:	2b07      	cmp	r3, #7
 800c352:	d903      	bls.n	800c35c <ADG1414_Chain_SwitchOn+0x28>
		(dev->num_of_sw == EXTERNAL_CHAIN_SWITCH_NUM))
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	7b1b      	ldrb	r3, [r3, #12]
    if ((channel_num >= EXTERNAL_CHAIN_CHANNEL_NUM)&&
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d055      	beq.n	800c408 <ADG1414_Chain_SwitchOn+0xd4>
		return;  // Kiểm tra giới hạn

    if (dev->num_of_sw == INTERNAL_CHAIN_SWITCH_NUM)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	7b1b      	ldrb	r3, [r3, #12]
 800c360:	2b06      	cmp	r3, #6
 800c362:	d138      	bne.n	800c3d6 <ADG1414_Chain_SwitchOn+0xa2>
	{
    	for (int i = 0; i < dev->num_of_sw; i++)
 800c364:	2300      	movs	r3, #0
 800c366:	60fb      	str	r3, [r7, #12]
 800c368:	e008      	b.n	800c37c <ADG1414_Chain_SwitchOn+0x48>
		{
			dev->switch_state[i] = 0x00;
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	4413      	add	r3, r2
 800c370:	330d      	adds	r3, #13
 800c372:	2200      	movs	r2, #0
 800c374:	701a      	strb	r2, [r3, #0]
    	for (int i = 0; i < dev->num_of_sw; i++)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	3301      	adds	r3, #1
 800c37a:	60fb      	str	r3, [r7, #12]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	7b1b      	ldrb	r3, [r3, #12]
 800c380:	461a      	mov	r2, r3
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	4293      	cmp	r3, r2
 800c386:	dbf0      	blt.n	800c36a <ADG1414_Chain_SwitchOn+0x36>
		}
    	if (channel_num)
 800c388:	78fb      	ldrb	r3, [r7, #3]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d036      	beq.n	800c3fc <ADG1414_Chain_SwitchOn+0xc8>
    	{
    		uint8_t chip_idx = (channel_num-1) / 6;
 800c38e:	78fb      	ldrb	r3, [r7, #3]
 800c390:	3b01      	subs	r3, #1
 800c392:	4a1f      	ldr	r2, [pc, #124]	@ (800c410 <ADG1414_Chain_SwitchOn+0xdc>)
 800c394:	fb82 1203 	smull	r1, r2, r2, r3
 800c398:	17db      	asrs	r3, r3, #31
 800c39a:	1ad3      	subs	r3, r2, r3
 800c39c:	72fb      	strb	r3, [r7, #11]
			uint8_t bit_idx = (channel_num-1) % 6;
 800c39e:	78fb      	ldrb	r3, [r7, #3]
 800c3a0:	1e5a      	subs	r2, r3, #1
 800c3a2:	4b1b      	ldr	r3, [pc, #108]	@ (800c410 <ADG1414_Chain_SwitchOn+0xdc>)
 800c3a4:	fb83 3102 	smull	r3, r1, r3, r2
 800c3a8:	17d3      	asrs	r3, r2, #31
 800c3aa:	1ac9      	subs	r1, r1, r3
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	005b      	lsls	r3, r3, #1
 800c3b0:	440b      	add	r3, r1
 800c3b2:	005b      	lsls	r3, r3, #1
 800c3b4:	1ad1      	subs	r1, r2, r3
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	72bb      	strb	r3, [r7, #10]
			dev->switch_state[(uint8_t)chip_idx] = (1 << bit_idx)&0x3F;
 800c3ba:	7abb      	ldrb	r3, [r7, #10]
 800c3bc:	2201      	movs	r2, #1
 800c3be:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c2:	b2da      	uxtb	r2, r3
 800c3c4:	7afb      	ldrb	r3, [r7, #11]
 800c3c6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c3ca:	b2d1      	uxtb	r1, r2
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	460a      	mov	r2, r1
 800c3d2:	735a      	strb	r2, [r3, #13]
 800c3d4:	e012      	b.n	800c3fc <ADG1414_Chain_SwitchOn+0xc8>
    	}
	}

    else if (dev->num_of_sw == EXTERNAL_CHAIN_SWITCH_NUM)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	7b1b      	ldrb	r3, [r3, #12]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d10e      	bne.n	800c3fc <ADG1414_Chain_SwitchOn+0xc8>
	{
    	if(channel_num)
 800c3de:	78fb      	ldrb	r3, [r7, #3]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d008      	beq.n	800c3f6 <ADG1414_Chain_SwitchOn+0xc2>
    	{
    		dev->switch_state[0] = (1 << (channel_num - 1));
 800c3e4:	78fb      	ldrb	r3, [r7, #3]
 800c3e6:	3b01      	subs	r3, #1
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ee:	b2da      	uxtb	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	735a      	strb	r2, [r3, #13]
 800c3f4:	e002      	b.n	800c3fc <ADG1414_Chain_SwitchOn+0xc8>
    	}

    	else
    	{
    		dev->switch_state[0] = 0;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	735a      	strb	r2, [r3, #13]
		}
	}

    ADG1414_Chain_Write(dev);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f7ff fef1 	bl	800c1e4 <ADG1414_Chain_Write>
 800c402:	e002      	b.n	800c40a <ADG1414_Chain_SwitchOn+0xd6>
    	return;  // Kiểm tra giới hạn
 800c404:	bf00      	nop
 800c406:	e000      	b.n	800c40a <ADG1414_Chain_SwitchOn+0xd6>
		return;  // Kiểm tra giới hạn
 800c408:	bf00      	nop
}
 800c40a:	3710      	adds	r7, #16
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	2aaaaaab 	.word	0x2aaaaaab

0800c414 <LL_SPI_Enable>:
{
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	601a      	str	r2, [r3, #0]
}
 800c428:	bf00      	nop
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <LL_SPI_IsEnabled>:
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c444:	2b40      	cmp	r3, #64	@ 0x40
 800c446:	d101      	bne.n	800c44c <LL_SPI_IsEnabled+0x18>
 800c448:	2301      	movs	r3, #1
 800c44a:	e000      	b.n	800c44e <LL_SPI_IsEnabled+0x1a>
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	370c      	adds	r7, #12
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <LL_SPI_IsActiveFlag_TXE>:
{
 800c45a:	b480      	push	{r7}
 800c45c:	b083      	sub	sp, #12
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	f003 0302 	and.w	r3, r3, #2
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d101      	bne.n	800c472 <LL_SPI_IsActiveFlag_TXE+0x18>
 800c46e:	2301      	movs	r3, #1
 800c470:	e000      	b.n	800c474 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <LL_SPI_IsActiveFlag_BSY>:
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c490:	2b80      	cmp	r3, #128	@ 0x80
 800c492:	d101      	bne.n	800c498 <LL_SPI_IsActiveFlag_BSY+0x18>
 800c494:	2301      	movs	r3, #1
 800c496:	e000      	b.n	800c49a <LL_SPI_IsActiveFlag_BSY+0x1a>
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	370c      	adds	r7, #12
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr

0800c4a6 <LL_SPI_TransmitData8>:
{
 800c4a6:	b480      	push	{r7}
 800c4a8:	b085      	sub	sp, #20
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	330c      	adds	r3, #12
 800c4b6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	78fa      	ldrb	r2, [r7, #3]
 800c4bc:	701a      	strb	r2, [r3, #0]
}
 800c4be:	bf00      	nop
 800c4c0:	3714      	adds	r7, #20
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr

0800c4ca <LL_GPIO_SetOutputPin>:
{
 800c4ca:	b480      	push	{r7}
 800c4cc:	b083      	sub	sp, #12
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
 800c4d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	683a      	ldr	r2, [r7, #0]
 800c4d8:	619a      	str	r2, [r3, #24]
}
 800c4da:	bf00      	nop
 800c4dc:	370c      	adds	r7, #12
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr

0800c4e6 <LL_GPIO_ResetOutputPin>:
{
 800c4e6:	b480      	push	{r7}
 800c4e8:	b083      	sub	sp, #12
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
 800c4ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	041a      	lsls	r2, r3, #16
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	619a      	str	r2, [r3, #24]
}
 800c4f8:	bf00      	nop
 800c4fa:	370c      	adds	r7, #12
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <v2dac>:
#include "mcp4902.h"



uint8_t v2dac(uint16_t voltage)
{
 800c504:	b480      	push	{r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	4603      	mov	r3, r0
 800c50c:	80fb      	strh	r3, [r7, #6]
	return (voltage * 2.55f)/_VREF_DAC;
 800c50e:	88fb      	ldrh	r3, [r7, #6]
 800c510:	ee07 3a90 	vmov	s15, r3
 800c514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c518:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800c540 <v2dac+0x3c>
 800c51c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c520:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800c544 <v2dac+0x40>
 800c524:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c52c:	edc7 7a00 	vstr	s15, [r7]
 800c530:	783b      	ldrb	r3, [r7, #0]
 800c532:	b2db      	uxtb	r3, r3
}
 800c534:	4618      	mov	r0, r3
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr
 800c540:	40233333 	.word	0x40233333
 800c544:	40533333 	.word	0x40533333

0800c548 <MCP4902_Write>:
	return (dac*_VREF_DAC)/2.55f;
}

/* Hàm gửi dữ liệu qua SPI */
static void MCP4902_Write(MCP4902_Device_t *dev)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
	uint16_t temp;

    while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 800c550:	bf00      	nop
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4618      	mov	r0, r3
 800c558:	f7ff ff7f 	bl	800c45a <LL_SPI_IsActiveFlag_TXE>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d0f7      	beq.n	800c552 <MCP4902_Write+0xa>


    for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 800c562:	2300      	movs	r3, #0
 800c564:	60fb      	str	r3, [r7, #12]
 800c566:	e076      	b.n	800c656 <MCP4902_Write+0x10e>
    {
    	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	685a      	ldr	r2, [r3, #4]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	4619      	mov	r1, r3
 800c572:	4610      	mov	r0, r2
 800c574:	f7ff ffb7 	bl	800c4e6 <LL_GPIO_ResetOutputPin>
    	temp = i ? ((1<<MCP4902_AB_BIT)|(1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4)):
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00c      	beq.n	800c598 <MCP4902_Write+0x50>
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	4413      	add	r3, r2
 800c584:	3314      	adds	r3, #20
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	b21b      	sxth	r3, r3
 800c58a:	011b      	lsls	r3, r3, #4
 800c58c:	b21a      	sxth	r2, r3
 800c58e:	4b36      	ldr	r3, [pc, #216]	@ (800c668 <MCP4902_Write+0x120>)
 800c590:	4313      	orrs	r3, r2
 800c592:	b21b      	sxth	r3, r3
 800c594:	b29b      	uxth	r3, r3
 800c596:	e00b      	b.n	800c5b0 <MCP4902_Write+0x68>
				   ((1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4));
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	4413      	add	r3, r2
 800c59e:	3314      	adds	r3, #20
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	b21b      	sxth	r3, r3
 800c5a4:	011b      	lsls	r3, r3, #4
 800c5a6:	b21b      	sxth	r3, r3
 800c5a8:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800c5ac:	b21b      	sxth	r3, r3
    	temp = i ? ((1<<MCP4902_AB_BIT)|(1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4)):
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	817b      	strh	r3, [r7, #10]

        LL_SPI_TransmitData8(dev->spi, (uint8_t)(temp>>8));
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	897b      	ldrh	r3, [r7, #10]
 800c5b8:	0a1b      	lsrs	r3, r3, #8
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	4619      	mov	r1, r3
 800c5c0:	4610      	mov	r0, r2
 800c5c2:	f7ff ff70 	bl	800c4a6 <LL_SPI_TransmitData8>
        while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 800c5c6:	bf00      	nop
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7ff ff44 	bl	800c45a <LL_SPI_IsActiveFlag_TXE>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d0f7      	beq.n	800c5c8 <MCP4902_Write+0x80>
        while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 800c5d8:	bf00      	nop
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7ff ff4e 	bl	800c480 <LL_SPI_IsActiveFlag_BSY>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d1f7      	bne.n	800c5da <MCP4902_Write+0x92>

        LL_SPI_TransmitData8(dev->spi, (uint8_t)temp);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	897a      	ldrh	r2, [r7, #10]
 800c5f0:	b2d2      	uxtb	r2, r2
 800c5f2:	4611      	mov	r1, r2
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7ff ff56 	bl	800c4a6 <LL_SPI_TransmitData8>
		while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 800c5fa:	bf00      	nop
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4618      	mov	r0, r3
 800c602:	f7ff ff2a 	bl	800c45a <LL_SPI_IsActiveFlag_TXE>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d0f7      	beq.n	800c5fc <MCP4902_Write+0xb4>
		while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 800c60c:	bf00      	nop
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4618      	mov	r0, r3
 800c614:	f7ff ff34 	bl	800c480 <LL_SPI_IsActiveFlag_BSY>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1f7      	bne.n	800c60e <MCP4902_Write+0xc6>

        LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	685a      	ldr	r2, [r3, #4]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	689b      	ldr	r3, [r3, #8]
 800c626:	4619      	mov	r1, r3
 800c628:	4610      	mov	r0, r2
 800c62a:	f7ff ff4e 	bl	800c4ca <LL_GPIO_SetOutputPin>

		LL_GPIO_ResetOutputPin(dev->latch_port, dev->latch_pin);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	68da      	ldr	r2, [r3, #12]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	4619      	mov	r1, r3
 800c638:	4610      	mov	r0, r2
 800c63a:	f7ff ff54 	bl	800c4e6 <LL_GPIO_ResetOutputPin>
		__NOP();
 800c63e:	bf00      	nop
		LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	68da      	ldr	r2, [r3, #12]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	691b      	ldr	r3, [r3, #16]
 800c648:	4619      	mov	r1, r3
 800c64a:	4610      	mov	r0, r2
 800c64c:	f7ff ff3d 	bl	800c4ca <LL_GPIO_SetOutputPin>
    for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	3301      	adds	r3, #1
 800c654:	60fb      	str	r3, [r7, #12]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2b01      	cmp	r3, #1
 800c65a:	dd85      	ble.n	800c568 <MCP4902_Write+0x20>
    }


}
 800c65c:	bf00      	nop
 800c65e:	bf00      	nop
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	ffffb000 	.word	0xffffb000

0800c66c <MCP4902_Set_Voltage>:
	__NOP();
	LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
}

void MCP4902_Set_Voltage(MCP4902_Device_t *dev, uint8_t channel, uint16_t voltage)
{
 800c66c:	b590      	push	{r4, r7, lr}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	460b      	mov	r3, r1
 800c676:	70fb      	strb	r3, [r7, #3]
 800c678:	4613      	mov	r3, r2
 800c67a:	803b      	strh	r3, [r7, #0]
	dev->dac_channel[channel] = v2dac(voltage);
 800c67c:	78fc      	ldrb	r4, [r7, #3]
 800c67e:	883b      	ldrh	r3, [r7, #0]
 800c680:	4618      	mov	r0, r3
 800c682:	f7ff ff3f 	bl	800c504 <v2dac>
 800c686:	4603      	mov	r3, r0
 800c688:	461a      	mov	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4423      	add	r3, r4
 800c68e:	751a      	strb	r2, [r3, #20]
	MCP4902_Write(dev);
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7ff ff59 	bl	800c548 <MCP4902_Write>
}
 800c696:	bf00      	nop
 800c698:	370c      	adds	r7, #12
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd90      	pop	{r4, r7, pc}

0800c69e <MCP4902_Device_Init>:
							SPI_TypeDef *spi,
							GPIO_TypeDef *cs_port,
							uint32_t cs_pin,
							GPIO_TypeDef *latch_port,
							uint32_t latch_pin)
{
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b08c      	sub	sp, #48	@ 0x30
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	60f8      	str	r0, [r7, #12]
 800c6a6:	60b9      	str	r1, [r7, #8]
 800c6a8:	607a      	str	r2, [r7, #4]
 800c6aa:	603b      	str	r3, [r7, #0]
	dev->spi = spi;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	601a      	str	r2, [r3, #0]
	dev->cs_port = cs_port;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	683a      	ldr	r2, [r7, #0]
 800c6bc:	609a      	str	r2, [r3, #8]
	dev->latch_port = latch_port;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6c2:	60da      	str	r2, [r3, #12]
	dev->latch_pin = latch_pin;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c6c8:	611a      	str	r2, [r3, #16]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6ca:	f107 0314 	add.w	r3, r7, #20
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	601a      	str	r2, [r3, #0]
 800c6d2:	605a      	str	r2, [r3, #4]
 800c6d4:	609a      	str	r2, [r3, #8]
 800c6d6:	60da      	str	r2, [r3, #12]
 800c6d8:	611a      	str	r2, [r3, #16]
 800c6da:	615a      	str	r2, [r3, #20]
	GPIO_InitStruct.Pin = dev->cs_pin;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800c6e6:	2302      	movs	r3, #2
 800c6e8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	627b      	str	r3, [r7, #36]	@ 0x24
	LL_GPIO_Init(dev->cs_port, &GPIO_InitStruct);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	f107 0214 	add.w	r2, r7, #20
 800c6fa:	4611      	mov	r1, r2
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f005 fa12 	bl	8011b26 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = dev->latch_pin;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(dev->latch_port, &GPIO_InitStruct);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	f107 0214 	add.w	r2, r7, #20
 800c710:	4611      	mov	r1, r2
 800c712:	4618      	mov	r0, r3
 800c714:	f005 fa07 	bl	8011b26 <LL_GPIO_Init>

	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	685a      	ldr	r2, [r3, #4]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	4619      	mov	r1, r3
 800c722:	4610      	mov	r0, r2
 800c724:	f7ff fed1 	bl	800c4ca <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	68da      	ldr	r2, [r3, #12]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	691b      	ldr	r3, [r3, #16]
 800c730:	4619      	mov	r1, r3
 800c732:	4610      	mov	r0, r2
 800c734:	f7ff fec9 	bl	800c4ca <LL_GPIO_SetOutputPin>

	for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 800c738:	2300      	movs	r3, #0
 800c73a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c73c:	e008      	b.n	800c750 <MCP4902_Device_Init+0xb2>
	{
		dev->dac_channel[i] = 0;
 800c73e:	68fa      	ldr	r2, [r7, #12]
 800c740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c742:	4413      	add	r3, r2
 800c744:	3314      	adds	r3, #20
 800c746:	2200      	movs	r2, #0
 800c748:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 800c74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c74c:	3301      	adds	r3, #1
 800c74e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c752:	2b01      	cmp	r3, #1
 800c754:	ddf3      	ble.n	800c73e <MCP4902_Device_Init+0xa0>
	}

	LL_SPI_Enable(dev->spi);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7ff fe5a 	bl	800c414 <LL_SPI_Enable>
	while (!LL_SPI_IsEnabled(dev->spi));
 800c760:	bf00      	nop
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4618      	mov	r0, r3
 800c768:	f7ff fe64 	bl	800c434 <LL_SPI_IsEnabled>
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d0f7      	beq.n	800c762 <MCP4902_Device_Init+0xc4>
	MCP4902_Write(dev);
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f7ff fee8 	bl	800c548 <MCP4902_Write>
}
 800c778:	bf00      	nop
 800c77a:	3730      	adds	r7, #48	@ 0x30
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <Laser_board_init>:
ADG1414_Device_t laser_int;
ADG1414_Device_t laser_ext;
MCP4902_Device_t DAC_device;

void Laser_board_init(void)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af02      	add	r7, sp, #8
	ADG1414_Chain_Init(&laser_int, SPI1, LASER_SW_INT_CS_GPIO_Port, LASER_SW_INT_CS_Pin, INTERNAL_CHAIN_SWITCH_NUM);
 800c786:	2306      	movs	r3, #6
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c78e:	4a0e      	ldr	r2, [pc, #56]	@ (800c7c8 <Laser_board_init+0x48>)
 800c790:	490e      	ldr	r1, [pc, #56]	@ (800c7cc <Laser_board_init+0x4c>)
 800c792:	480f      	ldr	r0, [pc, #60]	@ (800c7d0 <Laser_board_init+0x50>)
 800c794:	f7ff fd6e 	bl	800c274 <ADG1414_Chain_Init>
	ADG1414_Chain_Init(&laser_ext, SPI1, LASER_SW_EXT_CS_GPIO_Port, LASER_SW_EXT_CS_Pin, EXTERNAL_CHAIN_CHANNEL_NUM);
 800c798:	2308      	movs	r3, #8
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c7a0:	4a09      	ldr	r2, [pc, #36]	@ (800c7c8 <Laser_board_init+0x48>)
 800c7a2:	490a      	ldr	r1, [pc, #40]	@ (800c7cc <Laser_board_init+0x4c>)
 800c7a4:	480b      	ldr	r0, [pc, #44]	@ (800c7d4 <Laser_board_init+0x54>)
 800c7a6:	f7ff fd65 	bl	800c274 <ADG1414_Chain_Init>
	MCP4902_Device_Init(&DAC_device, SPI1, LASER_DAC_CS_GPIO_Port, LASER_DAC_CS_Pin, LASER_DAC_LATCH_GPIO_Port, LASER_DAC_LATCH_Pin);
 800c7aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c7ae:	9301      	str	r3, [sp, #4]
 800c7b0:	4b05      	ldr	r3, [pc, #20]	@ (800c7c8 <Laser_board_init+0x48>)
 800c7b2:	9300      	str	r3, [sp, #0]
 800c7b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c7b8:	4a03      	ldr	r2, [pc, #12]	@ (800c7c8 <Laser_board_init+0x48>)
 800c7ba:	4904      	ldr	r1, [pc, #16]	@ (800c7cc <Laser_board_init+0x4c>)
 800c7bc:	4806      	ldr	r0, [pc, #24]	@ (800c7d8 <Laser_board_init+0x58>)
 800c7be:	f7ff ff6e 	bl	800c69e <MCP4902_Device_Init>
}
 800c7c2:	bf00      	nop
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	40021000 	.word	0x40021000
 800c7cc:	40013000 	.word	0x40013000
 800c7d0:	20003508 	.word	0x20003508
 800c7d4:	20003528 	.word	0x20003528
 800c7d8:	20003548 	.word	0x20003548

0800c7dc <LL_SPI_IsActiveFlag_RXNE>:
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	f003 0301 	and.w	r3, r3, #1
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d101      	bne.n	800c7f4 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e000      	b.n	800c7f6 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	370c      	adds	r7, #12
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr

0800c802 <LL_SPI_ReceiveData8>:
{
 800c802:	b480      	push	{r7}
 800c804:	b083      	sub	sp, #12
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	330c      	adds	r3, #12
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	b2db      	uxtb	r3, r3
}
 800c812:	4618      	mov	r0, r3
 800c814:	370c      	adds	r7, #12
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr

0800c81e <LL_SPI_TransmitData8>:
{
 800c81e:	b480      	push	{r7}
 800c820:	b085      	sub	sp, #20
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
 800c826:	460b      	mov	r3, r1
 800c828:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	330c      	adds	r3, #12
 800c82e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	78fa      	ldrb	r2, [r7, #3]
 800c834:	701a      	strb	r2, [r3, #0]
}
 800c836:	bf00      	nop
 800c838:	3714      	adds	r7, #20
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr

0800c842 <LL_GPIO_SetOutputPin>:
{
 800c842:	b480      	push	{r7}
 800c844:	b083      	sub	sp, #12
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
 800c84a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	683a      	ldr	r2, [r7, #0]
 800c850:	619a      	str	r2, [r3, #24]
}
 800c852:	bf00      	nop
 800c854:	370c      	adds	r7, #12
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr

0800c85e <LL_GPIO_ResetOutputPin>:
{
 800c85e:	b480      	push	{r7}
 800c860:	b083      	sub	sp, #12
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
 800c866:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	041a      	lsls	r2, r3, #16
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	619a      	str	r2, [r3, #24]
}
 800c870:	bf00      	nop
 800c872:	370c      	adds	r7, #12
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <csLOW>:

int swen_port[4] = {(int)TEC_1_SWEN_GPIO_Port, (int)TEC_2_SWEN_GPIO_Port, (int)TEC_3_SWEN_GPIO_Port, (int)TEC_4_SWEN_GPIO_Port};
int swen_pin[4] = {TEC_1_SWEN_Pin, TEC_2_SWEN_Pin, TEC_3_SWEN_Pin, TEC_4_SWEN_Pin};

/* SPI support function --------------------------------------------------*/
static inline void csLOW(uint8_t channel) {
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	4603      	mov	r3, r0
 800c884:	71fb      	strb	r3, [r7, #7]
//	LL_GPIO_ResetOutputPin(TEC_1_CS_GPIO_Port, TEC_1_CS_Pin);
	LL_GPIO_ResetOutputPin((GPIO_TypeDef*)cs_port[channel], cs_pin[channel]);
 800c886:	79fb      	ldrb	r3, [r7, #7]
 800c888:	4a07      	ldr	r2, [pc, #28]	@ (800c8a8 <csLOW+0x2c>)
 800c88a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c88e:	4618      	mov	r0, r3
 800c890:	79fb      	ldrb	r3, [r7, #7]
 800c892:	4a06      	ldr	r2, [pc, #24]	@ (800c8ac <csLOW+0x30>)
 800c894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c898:	4619      	mov	r1, r3
 800c89a:	f7ff ffe0 	bl	800c85e <LL_GPIO_ResetOutputPin>
}
 800c89e:	bf00      	nop
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	200002b4 	.word	0x200002b4
 800c8ac:	200002c4 	.word	0x200002c4

0800c8b0 <csHIGH>:

static inline void csHIGH(uint8_t channel) {
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	71fb      	strb	r3, [r7, #7]
//	LL_GPIO_SetOutputPin(TEC_1_CS_GPIO_Port, TEC_1_CS_Pin);
	LL_GPIO_SetOutputPin((GPIO_TypeDef*)cs_port[channel], cs_pin[channel]);
 800c8ba:	79fb      	ldrb	r3, [r7, #7]
 800c8bc:	4a07      	ldr	r2, [pc, #28]	@ (800c8dc <csHIGH+0x2c>)
 800c8be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	79fb      	ldrb	r3, [r7, #7]
 800c8c6:	4a06      	ldr	r2, [pc, #24]	@ (800c8e0 <csHIGH+0x30>)
 800c8c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	f7ff ffb8 	bl	800c842 <LL_GPIO_SetOutputPin>
}
 800c8d2:	bf00      	nop
 800c8d4:	3708      	adds	r7, #8
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	200002b4 	.word	0x200002b4
 800c8e0:	200002c4 	.word	0x200002c4

0800c8e4 <SPI_LL_Transmit>:

static uint8_t SPI_LL_Transmit(uint8_t data)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	71fb      	strb	r3, [r7, #7]
	LL_SPI_TransmitData8(SPI_TEC, data);
 800c8ee:	79fb      	ldrb	r3, [r7, #7]
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	4809      	ldr	r0, [pc, #36]	@ (800c918 <SPI_LL_Transmit+0x34>)
 800c8f4:	f7ff ff93 	bl	800c81e <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI_TEC));
 800c8f8:	bf00      	nop
 800c8fa:	4807      	ldr	r0, [pc, #28]	@ (800c918 <SPI_LL_Transmit+0x34>)
 800c8fc:	f7ff ff6e 	bl	800c7dc <LL_SPI_IsActiveFlag_RXNE>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d0f9      	beq.n	800c8fa <SPI_LL_Transmit+0x16>
	return LL_SPI_ReceiveData8(SPI_TEC);
 800c906:	4804      	ldr	r0, [pc, #16]	@ (800c918 <SPI_LL_Transmit+0x34>)
 800c908:	f7ff ff7b 	bl	800c802 <LL_SPI_ReceiveData8>
 800c90c:	4603      	mov	r3, r0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3708      	adds	r7, #8
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	40003c00 	.word	0x40003c00

0800c91c <SPI_write_and_read_buffer>:

uint8_t SPI_write_and_read_buffer(uint8_t channel, uint8_t *buffer, uint8_t byte_number)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	4603      	mov	r3, r0
 800c924:	6039      	str	r1, [r7, #0]
 800c926:	71fb      	strb	r3, [r7, #7]
 800c928:	4613      	mov	r3, r2
 800c92a:	71bb      	strb	r3, [r7, #6]
    uint8_t received_data = 0;
 800c92c:	2300      	movs	r3, #0
 800c92e:	73fb      	strb	r3, [r7, #15]
    csLOW(channel);
 800c930:	79fb      	ldrb	r3, [r7, #7]
 800c932:	4618      	mov	r0, r3
 800c934:	f7ff ffa2 	bl	800c87c <csLOW>
    for (uint8_t i = 0; i < byte_number; i++)
 800c938:	2300      	movs	r3, #0
 800c93a:	73bb      	strb	r3, [r7, #14]
 800c93c:	e010      	b.n	800c960 <SPI_write_and_read_buffer+0x44>
    {
        received_data = SPI_LL_Transmit(buffer[i]);
 800c93e:	7bbb      	ldrb	r3, [r7, #14]
 800c940:	683a      	ldr	r2, [r7, #0]
 800c942:	4413      	add	r3, r2
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	4618      	mov	r0, r3
 800c948:	f7ff ffcc 	bl	800c8e4 <SPI_LL_Transmit>
 800c94c:	4603      	mov	r3, r0
 800c94e:	73fb      	strb	r3, [r7, #15]
        buffer[i] = received_data;
 800c950:	7bbb      	ldrb	r3, [r7, #14]
 800c952:	683a      	ldr	r2, [r7, #0]
 800c954:	4413      	add	r3, r2
 800c956:	7bfa      	ldrb	r2, [r7, #15]
 800c958:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < byte_number; i++)
 800c95a:	7bbb      	ldrb	r3, [r7, #14]
 800c95c:	3301      	adds	r3, #1
 800c95e:	73bb      	strb	r3, [r7, #14]
 800c960:	7bba      	ldrb	r2, [r7, #14]
 800c962:	79bb      	ldrb	r3, [r7, #6]
 800c964:	429a      	cmp	r2, r3
 800c966:	d3ea      	bcc.n	800c93e <SPI_write_and_read_buffer+0x22>
    }
    csHIGH(channel);
 800c968:	79fb      	ldrb	r3, [r7, #7]
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7ff ffa0 	bl	800c8b0 <csHIGH>
    return received_data;
 800c970:	7bfb      	ldrb	r3, [r7, #15]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	0000      	movs	r0, r0
 800c97c:	0000      	movs	r0, r0
	...

0800c980 <lt8722_voltage_to_dac>:
 * @brief Convert voltage to DAC code.
 * @param voltage - Voltage value in nanovolts.
 * @return DAC code.
 */
int32_t lt8722_voltage_to_dac(int64_t voltage)
{
 800c980:	b5b0      	push	{r4, r5, r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	e9c7 0100 	strd	r0, r1, [r7]
	return (LT8722_DAC_OFFSET - voltage) * (1 << LT8722_DAC_RESOLUTION) / LT8722_DAC_VREF;
 800c98a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c98e:	4d0e      	ldr	r5, [pc, #56]	@ (800c9c8 <lt8722_voltage_to_dac+0x48>)
 800c990:	2400      	movs	r4, #0
 800c992:	1a2a      	subs	r2, r5, r0
 800c994:	eb64 0301 	sbc.w	r3, r4, r1
 800c998:	f04f 0000 	mov.w	r0, #0
 800c99c:	f04f 0100 	mov.w	r1, #0
 800c9a0:	0659      	lsls	r1, r3, #25
 800c9a2:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 800c9a6:	0650      	lsls	r0, r2, #25
 800c9a8:	a305      	add	r3, pc, #20	@ (adr r3, 800c9c0 <lt8722_voltage_to_dac+0x40>)
 800c9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ae:	f7fb fc77 	bl	80082a0 <__aeabi_ldivmod>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	4613      	mov	r3, r2
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3708      	adds	r7, #8
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bdb0      	pop	{r4, r5, r7, pc}
 800c9c0:	9502f900 	.word	0x9502f900
 800c9c4:	00000000 	.word	0x00000000
 800c9c8:	4a817c80 	.word	0x4a817c80

0800c9cc <lt8722_dac_to_voltage>:
 * @brief Convert DAC code to nanovolts.
 * @param dac - DAC code.
 * @return Voltage value in nanovolts.
 */
int64_t lt8722_dac_to_voltage(int32_t dac)
{
 800c9cc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c9d0:	b085      	sub	sp, #20
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	60f8      	str	r0, [r7, #12]
	return LT8722_DAC_OFFSET - dac * LT8722_DAC_VREF /(1 << LT8722_DAC_RESOLUTION);
 800c9d6:	68f9      	ldr	r1, [r7, #12]
 800c9d8:	17c8      	asrs	r0, r1, #31
 800c9da:	460c      	mov	r4, r1
 800c9dc:	4605      	mov	r5, r0
 800c9de:	491b      	ldr	r1, [pc, #108]	@ (800ca4c <lt8722_dac_to_voltage+0x80>)
 800c9e0:	fb01 f005 	mul.w	r0, r1, r5
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	fb04 f101 	mul.w	r1, r4, r1
 800c9ea:	4401      	add	r1, r0
 800c9ec:	4817      	ldr	r0, [pc, #92]	@ (800ca4c <lt8722_dac_to_voltage+0x80>)
 800c9ee:	fba4 2300 	umull	r2, r3, r4, r0
 800c9f2:	4419      	add	r1, r3
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	4610      	mov	r0, r2
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	2900      	cmp	r1, #0
 800c9fc:	da08      	bge.n	800ca10 <lt8722_dac_to_voltage+0x44>
 800c9fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ca02:	18c3      	adds	r3, r0, r3
 800ca04:	603b      	str	r3, [r7, #0]
 800ca06:	f141 0300 	adc.w	r3, r1, #0
 800ca0a:	607b      	str	r3, [r7, #4]
 800ca0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca10:	f04f 0200 	mov.w	r2, #0
 800ca14:	f04f 0300 	mov.w	r3, #0
 800ca18:	0e42      	lsrs	r2, r0, #25
 800ca1a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800ca1e:	164b      	asrs	r3, r1, #25
 800ca20:	2100      	movs	r1, #0
 800ca22:	f1d2 0a00 	rsbs	sl, r2, #0
 800ca26:	eb61 0b03 	sbc.w	fp, r1, r3
 800ca2a:	4652      	mov	r2, sl
 800ca2c:	465b      	mov	r3, fp
 800ca2e:	4908      	ldr	r1, [pc, #32]	@ (800ca50 <lt8722_dac_to_voltage+0x84>)
 800ca30:	eb12 0801 	adds.w	r8, r2, r1
 800ca34:	f143 0900 	adc.w	r9, r3, #0
 800ca38:	4642      	mov	r2, r8
 800ca3a:	464b      	mov	r3, r9
}
 800ca3c:	4610      	mov	r0, r2
 800ca3e:	4619      	mov	r1, r3
 800ca40:	3714      	adds	r7, #20
 800ca42:	46bd      	mov	sp, r7
 800ca44:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop
 800ca4c:	9502f900 	.word	0x9502f900
 800ca50:	4a817c80 	.word	0x4a817c80

0800ca54 <lt8722_transaction>:
 * @param dev - LT8722 device descriptor
 * @param packet - LT8722 packet.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_transaction(uint8_t channel, struct lt8722_packet *packet)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b086      	sub	sp, #24
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	6039      	str	r1, [r7, #0]
 800ca5e:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8] = {0};
 800ca60:	f107 030c 	add.w	r3, r7, #12
 800ca64:	2200      	movs	r2, #0
 800ca66:	601a      	str	r2, [r3, #0]
 800ca68:	605a      	str	r2, [r3, #4]
	buffer[0] = packet->command.byte;
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	733b      	strb	r3, [r7, #12]
	buffer[1] = packet->reg.address << 1;
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	791b      	ldrb	r3, [r3, #4]
 800ca74:	005b      	lsls	r3, r3, #1
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	737b      	strb	r3, [r7, #13]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	2bf2      	cmp	r3, #242	@ 0xf2
 800ca80:	d111      	bne.n	800caa6 <lt8722_transaction+0x52>
	{
		put_unaligned_be32(packet->data, &buffer[2]);
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	691a      	ldr	r2, [r3, #16]
 800ca86:	f107 030c 	add.w	r3, r7, #12
 800ca8a:	3302      	adds	r3, #2
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	4610      	mov	r0, r2
 800ca90:	f000 faea 	bl	800d068 <put_unaligned_be32>
		buffer[6] = Calculate_CRC8(buffer, 6);
 800ca94:	f107 030c 	add.w	r3, r7, #12
 800ca98:	2106      	movs	r1, #6
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f000 faa8 	bl	800cff0 <Calculate_CRC8>
 800caa0:	4603      	mov	r3, r0
 800caa2:	74bb      	strb	r3, [r7, #18]
 800caa4:	e007      	b.n	800cab6 <lt8722_transaction+0x62>
	} else
		buffer[2] = Calculate_CRC8(buffer, 2);
 800caa6:	f107 030c 	add.w	r3, r7, #12
 800caaa:	2102      	movs	r1, #2
 800caac:	4618      	mov	r0, r3
 800caae:	f000 fa9f 	bl	800cff0 <Calculate_CRC8>
 800cab2:	4603      	mov	r3, r0
 800cab4:	73bb      	strb	r3, [r7, #14]
	SPI_write_and_read_buffer(channel, buffer, packet->command.size);
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	785a      	ldrb	r2, [r3, #1]
 800caba:	f107 010c 	add.w	r1, r7, #12
 800cabe:	79fb      	ldrb	r3, [r7, #7]
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7ff ff2b 	bl	800c91c <SPI_write_and_read_buffer>
	packet->status = (get_unaligned_be16(&buffer[0]) & GENMASK(10, 0));
 800cac6:	f107 030c 	add.w	r3, r7, #12
 800caca:	4618      	mov	r0, r3
 800cacc:	f000 fb0a 	bl	800d0e4 <get_unaligned_be16>
 800cad0:	4603      	mov	r3, r0
 800cad2:	b29a      	uxth	r2, r3
 800cad4:	f04f 33ff 	mov.w	r3, #4294967295
 800cad8:	617b      	str	r3, [r7, #20]
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	055b      	lsls	r3, r3, #21
 800cade:	617b      	str	r3, [r7, #20]
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	0d5b      	lsrs	r3, r3, #21
 800cae4:	617b      	str	r3, [r7, #20]
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	b29b      	uxth	r3, r3
 800caea:	4013      	ands	r3, r2
 800caec:	b29a      	uxth	r2, r3
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	82da      	strh	r2, [r3, #22]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	2bf2      	cmp	r3, #242	@ 0xf2
 800caf8:	d106      	bne.n	800cb08 <lt8722_transaction+0xb4>
	{
		packet->crc = buffer[2];
 800cafa:	7bba      	ldrb	r2, [r7, #14]
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 800cb00:	7cfa      	ldrb	r2, [r7, #19]
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	755a      	strb	r2, [r3, #21]
 800cb06:	e019      	b.n	800cb3c <lt8722_transaction+0xe8>
	} else if (packet->command.byte == LT8722_DATA_READ_COMMAND) {
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	2bf4      	cmp	r3, #244	@ 0xf4
 800cb0e:	d10f      	bne.n	800cb30 <lt8722_transaction+0xdc>
		packet->data = get_unaligned_be32(&buffer[2]);
 800cb10:	f107 030c 	add.w	r3, r7, #12
 800cb14:	3302      	adds	r3, #2
 800cb16:	4618      	mov	r0, r3
 800cb18:	f000 fac7 	bl	800d0aa <get_unaligned_be32>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	611a      	str	r2, [r3, #16]
		packet->crc = buffer[6];
 800cb22:	7cba      	ldrb	r2, [r7, #18]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 800cb28:	7cfa      	ldrb	r2, [r7, #19]
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	755a      	strb	r2, [r3, #21]
 800cb2e:	e005      	b.n	800cb3c <lt8722_transaction+0xe8>
	} else {
		packet->crc = buffer[2];
 800cb30:	7bba      	ldrb	r2, [r7, #14]
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[3];
 800cb36:	7bfa      	ldrb	r2, [r7, #15]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	755a      	strb	r2, [r3, #21]
	}
	if (packet->ack != LT8722_ACK_ACKNOWLEDGE)
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	7d5b      	ldrb	r3, [r3, #21]
 800cb40:	2ba5      	cmp	r3, #165	@ 0xa5
 800cb42:	d002      	beq.n	800cb4a <lt8722_transaction+0xf6>
		return -1;
 800cb44:	f04f 33ff 	mov.w	r3, #4294967295
 800cb48:	e000      	b.n	800cb4c <lt8722_transaction+0xf8>
	return 0;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3718      	adds	r7, #24
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <lt8722_reg_read>:
 * @param address - Register address.
 * @param data - Received data.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_read(uint8_t channel, uint8_t address, uint32_t *data)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b08a      	sub	sp, #40	@ 0x28
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	603a      	str	r2, [r7, #0]
 800cb5e:	71fb      	strb	r3, [r7, #7]
 800cb60:	460b      	mov	r3, r1
 800cb62:	71bb      	strb	r3, [r7, #6]
	int8_t ret = 0;
 800cb64:	2300      	movs	r3, #0
 800cb66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	struct lt8722_packet packet;
	struct lt8722_command command = {
 800cb6a:	4b15      	ldr	r3, [pc, #84]	@ (800cbc0 <lt8722_reg_read+0x6c>)
 800cb6c:	881b      	ldrh	r3, [r3, #0]
 800cb6e:	813b      	strh	r3, [r7, #8]
		LT8722_DATA_READ_COMMAND,
		LT8722_DATA_READ_COMMAND_SIZE
	};
	packet.command = command;
 800cb70:	893b      	ldrh	r3, [r7, #8]
 800cb72:	81bb      	strh	r3, [r7, #12]
	packet.reg = lt8722_regs[address];
 800cb74:	79ba      	ldrb	r2, [r7, #6]
 800cb76:	4913      	ldr	r1, [pc, #76]	@ (800cbc4 <lt8722_reg_read+0x70>)
 800cb78:	4613      	mov	r3, r2
 800cb7a:	005b      	lsls	r3, r3, #1
 800cb7c:	4413      	add	r3, r2
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	18ca      	adds	r2, r1, r3
 800cb82:	f107 0310 	add.w	r3, r7, #16
 800cb86:	ca07      	ldmia	r2, {r0, r1, r2}
 800cb88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ret = lt8722_transaction(channel, &packet);
 800cb8c:	f107 020c 	add.w	r2, r7, #12
 800cb90:	79fb      	ldrb	r3, [r7, #7]
 800cb92:	4611      	mov	r1, r2
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7ff ff5d 	bl	800ca54 <lt8722_transaction>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (ret)
 800cba0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d002      	beq.n	800cbae <lt8722_reg_read+0x5a>
		return ret;
 800cba8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cbac:	e003      	b.n	800cbb6 <lt8722_reg_read+0x62>
	*data = packet.data;
 800cbae:	69fa      	ldr	r2, [r7, #28]
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	601a      	str	r2, [r3, #0]
	return 0;
 800cbb4:	2300      	movs	r3, #0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3728      	adds	r7, #40	@ 0x28
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	08015970 	.word	0x08015970
 800cbc4:	20000254 	.word	0x20000254

0800cbc8 <lt8722_reg_write>:
 * @param address - Register address.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write(uint8_t channel, uint8_t address, uint32_t data)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b08a      	sub	sp, #40	@ 0x28
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	4603      	mov	r3, r0
 800cbd0:	603a      	str	r2, [r7, #0]
 800cbd2:	71fb      	strb	r3, [r7, #7]
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	71bb      	strb	r3, [r7, #6]
	struct lt8722_packet packet;
	struct lt8722_command command = {
 800cbd8:	4b0f      	ldr	r3, [pc, #60]	@ (800cc18 <lt8722_reg_write+0x50>)
 800cbda:	881b      	ldrh	r3, [r3, #0]
 800cbdc:	81bb      	strh	r3, [r7, #12]
		LT8722_DATA_WRITE_COMMAND,
		LT8722_DATA_WRITE_COMMAND_SIZE
	};
	packet.command = command;
 800cbde:	89bb      	ldrh	r3, [r7, #12]
 800cbe0:	823b      	strh	r3, [r7, #16]
	packet.reg = lt8722_regs[address];
 800cbe2:	79ba      	ldrb	r2, [r7, #6]
 800cbe4:	490d      	ldr	r1, [pc, #52]	@ (800cc1c <lt8722_reg_write+0x54>)
 800cbe6:	4613      	mov	r3, r2
 800cbe8:	005b      	lsls	r3, r3, #1
 800cbea:	4413      	add	r3, r2
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	18ca      	adds	r2, r1, r3
 800cbf0:	f107 0314 	add.w	r3, r7, #20
 800cbf4:	ca07      	ldmia	r2, {r0, r1, r2}
 800cbf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	packet.data = data;
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	623b      	str	r3, [r7, #32]
	return lt8722_transaction(channel, &packet);
 800cbfe:	f107 0210 	add.w	r2, r7, #16
 800cc02:	79fb      	ldrb	r3, [r7, #7]
 800cc04:	4611      	mov	r1, r2
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7ff ff24 	bl	800ca54 <lt8722_transaction>
 800cc0c:	4603      	mov	r3, r0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3728      	adds	r7, #40	@ 0x28
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	08015974 	.word	0x08015974
 800cc1c:	20000254 	.word	0x20000254

0800cc20 <lt8722_reg_write_mask>:
 * @param mask - Mask to be applied.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write_mask(uint8_t channel, uint8_t address, uint32_t mask, uint32_t data)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b086      	sub	sp, #24
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60ba      	str	r2, [r7, #8]
 800cc28:	607b      	str	r3, [r7, #4]
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	73fb      	strb	r3, [r7, #15]
 800cc2e:	460b      	mov	r3, r1
 800cc30:	73bb      	strb	r3, [r7, #14]
	uint32_t reg_data;
	lt8722_reg_read(channel, address, &reg_data);
 800cc32:	f107 0214 	add.w	r2, r7, #20
 800cc36:	7bb9      	ldrb	r1, [r7, #14]
 800cc38:	7bfb      	ldrb	r3, [r7, #15]
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7ff ff8a 	bl	800cb54 <lt8722_reg_read>
	reg_data &= ~mask;
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	43da      	mvns	r2, r3
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	4013      	ands	r3, r2
 800cc48:	617b      	str	r3, [r7, #20]
	reg_data |= field_prep(mask, data);
 800cc4a:	6879      	ldr	r1, [r7, #4]
 800cc4c:	68b8      	ldr	r0, [r7, #8]
 800cc4e:	f000 fa79 	bl	800d144 <field_prep>
 800cc52:	4602      	mov	r2, r0
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	617b      	str	r3, [r7, #20]
	return lt8722_reg_write(channel, address, reg_data);
 800cc5a:	697a      	ldr	r2, [r7, #20]
 800cc5c:	7bb9      	ldrb	r1, [r7, #14]
 800cc5e:	7bfb      	ldrb	r3, [r7, #15]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7ff ffb1 	bl	800cbc8 <lt8722_reg_write>
 800cc66:	4603      	mov	r3, r0
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3718      	adds	r7, #24
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <lt8722_set_enable_req>:
 * @brief Set ENABLE_REQ field in LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_enable_req(uint8_t channel, bool value)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	4603      	mov	r3, r0
 800cc78:	460a      	mov	r2, r1
 800cc7a:	71fb      	strb	r3, [r7, #7]
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	71bb      	strb	r3, [r7, #6]
	return lt8722_reg_write_mask(channel, LT8722_SPIS_COMMAND, LT8722_ENABLE_REQ_MASK, value);
 800cc80:	79bb      	ldrb	r3, [r7, #6]
 800cc82:	79f8      	ldrb	r0, [r7, #7]
 800cc84:	2201      	movs	r2, #1
 800cc86:	2100      	movs	r1, #0
 800cc88:	f7ff ffca 	bl	800cc20 <lt8722_reg_write_mask>
 800cc8c:	4603      	mov	r3, r0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <lt8722_set_swen_req>:
 * @brief Set switching enable of LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_swen_req(uint8_t channel, bool value)
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b082      	sub	sp, #8
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	460a      	mov	r2, r1
 800cca0:	71fb      	strb	r3, [r7, #7]
 800cca2:	4613      	mov	r3, r2
 800cca4:	71bb      	strb	r3, [r7, #6]
	return lt8722_reg_write_mask(channel, LT8722_SPIS_COMMAND, LT8722_SWEN_REQ_MASK, value);
 800cca6:	79bb      	ldrb	r3, [r7, #6]
 800cca8:	79f8      	ldrb	r0, [r7, #7]
 800ccaa:	2202      	movs	r2, #2
 800ccac:	2100      	movs	r1, #0
 800ccae:	f7ff ffb7 	bl	800cc20 <lt8722_reg_write_mask>
 800ccb2:	4603      	mov	r3, r0
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3708      	adds	r7, #8
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <lt8722_reset>:
/**
 * @brief Shutdown the LT8722 device.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reset(uint8_t channel)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(channel, LT8722_SPIS_COMMAND, LT8722_SPI_RST_MASK, LT8722_SPI_RST_RESET);
 800ccc6:	79f8      	ldrb	r0, [r7, #7]
 800ccc8:	2301      	movs	r3, #1
 800ccca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800ccce:	2100      	movs	r1, #0
 800ccd0:	f7ff ffa6 	bl	800cc20 <lt8722_reg_write_mask>
 800ccd4:	4603      	mov	r3, r0
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <lt8722_clear_faults>:
/**
 * @brief Clear LT8722 device faults.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_clear_faults(uint8_t channel)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b084      	sub	sp, #16
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	4603      	mov	r3, r0
 800cce6:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(channel, LT8722_SPIS_STATUS, LT8722_FAULTS_MASK, 0);
 800cce8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccec:	60fb      	str	r3, [r7, #12]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	069b      	lsls	r3, r3, #26
 800ccf2:	60fb      	str	r3, [r7, #12]
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	0d5b      	lsrs	r3, r3, #21
 800ccf8:	60fb      	str	r3, [r7, #12]
 800ccfa:	68fa      	ldr	r2, [r7, #12]
 800ccfc:	79f8      	ldrb	r0, [r7, #7]
 800ccfe:	2300      	movs	r3, #0
 800cd00:	2101      	movs	r1, #1
 800cd02:	f7ff ff8d 	bl	800cc20 <lt8722_reg_write_mask>
 800cd06:	4603      	mov	r3, r0
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3710      	adds	r7, #16
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <lt8722_set_dac>:
 * @brief Set DAC code of LT8722 device.
 * @param value - DAC value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_dac(uint8_t channel, uint32_t value)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	4603      	mov	r3, r0
 800cd18:	6039      	str	r1, [r7, #0]
 800cd1a:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(channel, LT8722_SPIS_DAC, LT8722_SPIS_DAC_MASK, value);
 800cd1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd20:	60fb      	str	r3, [r7, #12]
 800cd22:	68fa      	ldr	r2, [r7, #12]
 800cd24:	79f8      	ldrb	r0, [r7, #7]
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	2104      	movs	r1, #4
 800cd2a:	f7ff ff79 	bl	800cc20 <lt8722_reg_write_mask>
 800cd2e:	4603      	mov	r3, r0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3710      	adds	r7, #16
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <lt8722_init>:
 * @param init_param - Initialization parameter containing information about the
 * 		LT8722 device to be initialized.
 * @return 0 in case of success, negative error code otherwise
*/
int8_t lt8722_init(uint8_t channel)
{
 800cd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd3c:	b091      	sub	sp, #68	@ 0x44
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	4603      	mov	r3, r0
 800cd42:	75fb      	strb	r3, [r7, #23]
	int8_t ret = 0;
 800cd44:	2300      	movs	r3, #0
 800cd46:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	int32_t dac;
	int64_t voltage;
	int64_t start_voltage;
	int64_t end_voltage;
	LL_GPIO_ResetOutputPin((GPIO_TypeDef*)en_port[channel], en_pin[channel]);
 800cd4a:	7dfb      	ldrb	r3, [r7, #23]
 800cd4c:	4a6b      	ldr	r2, [pc, #428]	@ (800cefc <lt8722_init+0x1c4>)
 800cd4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd52:	4618      	mov	r0, r3
 800cd54:	7dfb      	ldrb	r3, [r7, #23]
 800cd56:	4a6a      	ldr	r2, [pc, #424]	@ (800cf00 <lt8722_init+0x1c8>)
 800cd58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	f7ff fd7e 	bl	800c85e <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin((GPIO_TypeDef*)swen_port[channel], swen_pin[channel]);
 800cd62:	7dfb      	ldrb	r3, [r7, #23]
 800cd64:	4a67      	ldr	r2, [pc, #412]	@ (800cf04 <lt8722_init+0x1cc>)
 800cd66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
 800cd6e:	4a66      	ldr	r2, [pc, #408]	@ (800cf08 <lt8722_init+0x1d0>)
 800cd70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd74:	4619      	mov	r1, r3
 800cd76:	f7ff fd72 	bl	800c85e <LL_GPIO_ResetOutputPin>
//		LL_GPIO_ResetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
//		LL_GPIO_ResetOutputPin(TEC_1_SWEN_GPIO_Port, TEC_1_SWEN_Pin);
	/*
	 * Reset LT8722
	 */
	lt8722_reset(channel);
 800cd7a:	7dfb      	ldrb	r3, [r7, #23]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7ff ff9d 	bl	800ccbc <lt8722_reset>
	 * Start-up sequence
	 * 1. Apply proper VIN and VDDIO voltages
	 *
	 * 2. Enable VCC LDO and other LT8722 circuitry
	 */
	ret = lt8722_clear_faults(channel);
 800cd82:	7dfb      	ldrb	r3, [r7, #23]
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7ff ffaa 	bl	800ccde <lt8722_clear_faults>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	LL_GPIO_SetOutputPin((GPIO_TypeDef*)en_port[channel], en_pin[channel]);
 800cd90:	7dfb      	ldrb	r3, [r7, #23]
 800cd92:	4a5a      	ldr	r2, [pc, #360]	@ (800cefc <lt8722_init+0x1c4>)
 800cd94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	7dfb      	ldrb	r3, [r7, #23]
 800cd9c:	4a58      	ldr	r2, [pc, #352]	@ (800cf00 <lt8722_init+0x1c8>)
 800cd9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cda2:	4619      	mov	r1, r3
 800cda4:	f7ff fd4d 	bl	800c842 <LL_GPIO_SetOutputPin>

	ret = lt8722_set_enable_req(channel, LT8722_ENABLE_REQ_ENABLED);
 800cda8:	7dfb      	ldrb	r3, [r7, #23]
 800cdaa:	2101      	movs	r1, #1
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7ff ff5f 	bl	800cc70 <lt8722_set_enable_req>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	ret = lt8722_reg_write(channel, LT8722_SPIS_COMMAND, 0x00003A01);
 800cdb8:	7dfb      	ldrb	r3, [r7, #23]
 800cdba:	f643 2201 	movw	r2, #14849	@ 0x3a01
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7ff ff01 	bl	800cbc8 <lt8722_reg_write>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 3. Configure output voltage control DAC to 0xFF000000
	 */
	ret = lt8722_set_dac(channel, 0xFF000000);
 800cdcc:	7dfb      	ldrb	r3, [r7, #23]
 800cdce:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7ff ff9c 	bl	800cd10 <lt8722_set_dac>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 4. Write all SPIS_STATUS registers to 0
	 */
	ret = lt8722_reg_write(channel, LT8722_SPIS_STATUS, 0);
 800cdde:	7dfb      	ldrb	r3, [r7, #23]
 800cde0:	2200      	movs	r2, #0
 800cde2:	2101      	movs	r1, #1
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7ff feef 	bl	800cbc8 <lt8722_reg_write>
 800cdea:	4603      	mov	r3, r0
 800cdec:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	LL_mDelay(1);
 800cdf0:	2001      	movs	r0, #1
 800cdf2:	f006 f86d 	bl	8012ed0 <LL_mDelay>
	ret = lt8722_reg_write(channel, LT8722_SPIS_COMMAND, 0x00003A01);
 800cdf6:	7dfb      	ldrb	r3, [r7, #23]
 800cdf8:	f643 2201 	movw	r2, #14849	@ 0x3a01
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7ff fee2 	bl	800cbc8 <lt8722_reg_write>
 800ce04:	4603      	mov	r3, r0
 800ce06:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 5. Ramp the output voltage control DAC from 0xFF000000 to 0x00000000
	 */
	start_voltage = lt8722_dac_to_voltage(0xFF000000);
 800ce0a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800ce0e:	f7ff fddd 	bl	800c9cc <lt8722_dac_to_voltage>
 800ce12:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
	end_voltage = lt8722_dac_to_voltage(0x00000000);
 800ce16:	2000      	movs	r0, #0
 800ce18:	f7ff fdd8 	bl	800c9cc <lt8722_dac_to_voltage>
 800ce1c:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	for (uint8_t i = 0;  i < 5; i++)
 800ce20:	2300      	movs	r3, #0
 800ce22:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ce26:	e047      	b.n	800ceb8 <lt8722_init+0x180>
	{
		voltage = (start_voltage + (end_voltage - start_voltage) * i / 4);
 800ce28:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ce2c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ce30:	1a84      	subs	r4, r0, r2
 800ce32:	eb61 0503 	sbc.w	r5, r1, r3
 800ce36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	4698      	mov	r8, r3
 800ce3e:	4691      	mov	r9, r2
 800ce40:	fb08 f205 	mul.w	r2, r8, r5
 800ce44:	fb04 f309 	mul.w	r3, r4, r9
 800ce48:	4413      	add	r3, r2
 800ce4a:	fba4 ab08 	umull	sl, fp, r4, r8
 800ce4e:	445b      	add	r3, fp
 800ce50:	469b      	mov	fp, r3
 800ce52:	4652      	mov	r2, sl
 800ce54:	465b      	mov	r3, fp
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	da06      	bge.n	800ce68 <lt8722_init+0x130>
 800ce5a:	1cd1      	adds	r1, r2, #3
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	f143 0300 	adc.w	r3, r3, #0
 800ce62:	60fb      	str	r3, [r7, #12]
 800ce64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce68:	f04f 0000 	mov.w	r0, #0
 800ce6c:	f04f 0100 	mov.w	r1, #0
 800ce70:	0890      	lsrs	r0, r2, #2
 800ce72:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800ce76:	1099      	asrs	r1, r3, #2
 800ce78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ce7c:	1816      	adds	r6, r2, r0
 800ce7e:	603e      	str	r6, [r7, #0]
 800ce80:	414b      	adcs	r3, r1
 800ce82:	607b      	str	r3, [r7, #4]
 800ce84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce88:	e9c7 2308 	strd	r2, r3, [r7, #32]
		dac = lt8722_voltage_to_dac(voltage);
 800ce8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ce90:	f7ff fd76 	bl	800c980 <lt8722_voltage_to_dac>
 800ce94:	61f8      	str	r0, [r7, #28]
		ret = lt8722_set_dac(channel, dac);
 800ce96:	69fa      	ldr	r2, [r7, #28]
 800ce98:	7dfb      	ldrb	r3, [r7, #23]
 800ce9a:	4611      	mov	r1, r2
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7ff ff37 	bl	800cd10 <lt8722_set_dac>
 800cea2:	4603      	mov	r3, r0
 800cea4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		LL_mDelay(1);
 800cea8:	2001      	movs	r0, #1
 800ceaa:	f006 f811 	bl	8012ed0 <LL_mDelay>
	for (uint8_t i = 0;  i < 5; i++)
 800ceae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ceb8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cebc:	2b04      	cmp	r3, #4
 800cebe:	d9b3      	bls.n	800ce28 <lt8722_init+0xf0>
	}
	/*
	 * 6. Enable the PWM switching behavior
	 */
	LL_GPIO_SetOutputPin((GPIO_TypeDef*)swen_port[channel], swen_pin[channel]);
 800cec0:	7dfb      	ldrb	r3, [r7, #23]
 800cec2:	4a10      	ldr	r2, [pc, #64]	@ (800cf04 <lt8722_init+0x1cc>)
 800cec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cec8:	4618      	mov	r0, r3
 800ceca:	7dfb      	ldrb	r3, [r7, #23]
 800cecc:	4a0e      	ldr	r2, [pc, #56]	@ (800cf08 <lt8722_init+0x1d0>)
 800cece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ced2:	4619      	mov	r1, r3
 800ced4:	f7ff fcb5 	bl	800c842 <LL_GPIO_SetOutputPin>
	ret = lt8722_set_swen_req(channel, LT8722_SWEN_REQ_ENABLED);
 800ced8:	7dfb      	ldrb	r3, [r7, #23]
 800ceda:	2101      	movs	r1, #1
 800cedc:	4618      	mov	r0, r3
 800cede:	f7ff feda 	bl	800cc96 <lt8722_set_swen_req>
 800cee2:	4603      	mov	r3, r0
 800cee4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	delay_us(200);
 800cee8:	20c8      	movs	r0, #200	@ 0xc8
 800ceea:	f7fb fbd3 	bl	8008694 <delay_us>
//
//		delay_us(255);
//		delay_us(255);
//
//		ret = lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
	return ret;
 800ceee:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3744      	adds	r7, #68	@ 0x44
 800cef6:	46bd      	mov	sp, r7
 800cef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cefc:	200002d4 	.word	0x200002d4
 800cf00:	200002e4 	.word	0x200002e4
 800cf04:	200002f4 	.word	0x200002f4
 800cf08:	20000304 	.word	0x20000304

0800cf0c <lt8722_set_output_voltage_channel>:
 * @param channel - Channel of lt8722.
 * @param value - Output voltage value in nanovolts.
 * @return 0 in case of success, negative error code otherwise
 */
int8_t lt8722_set_output_voltage_channel(uint8_t channel, tec_dir_t dir, int64_t value)
{
 800cf0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf10:	b08c      	sub	sp, #48	@ 0x30
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800cf18:	4603      	mov	r3, r0
 800cf1a:	77fb      	strb	r3, [r7, #31]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	77bb      	strb	r3, [r7, #30]
	uint8_t ret = 0;
 800cf20:	2300      	movs	r3, #0
 800cf22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int64_t vdac = 0;
 800cf26:	f04f 0200 	mov.w	r2, #0
 800cf2a:	f04f 0300 	mov.w	r3, #0
 800cf2e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	int32_t dac = 0x0;
 800cf32:	2300      	movs	r3, #0
 800cf34:	623b      	str	r3, [r7, #32]
	if (dir == TEC_COOL)
 800cf36:	7fbb      	ldrb	r3, [r7, #30]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d124      	bne.n	800cf86 <lt8722_set_output_voltage_channel+0x7a>
		vdac = LT8722_DAC_OFFSET - value / 16;
 800cf3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cf40:	4610      	mov	r0, r2
 800cf42:	4619      	mov	r1, r3
 800cf44:	2900      	cmp	r1, #0
 800cf46:	da07      	bge.n	800cf58 <lt8722_set_output_voltage_channel+0x4c>
 800cf48:	f110 030f 	adds.w	r3, r0, #15
 800cf4c:	60bb      	str	r3, [r7, #8]
 800cf4e:	f141 0300 	adc.w	r3, r1, #0
 800cf52:	60fb      	str	r3, [r7, #12]
 800cf54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cf58:	f04f 0200 	mov.w	r2, #0
 800cf5c:	f04f 0300 	mov.w	r3, #0
 800cf60:	0902      	lsrs	r2, r0, #4
 800cf62:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800cf66:	110b      	asrs	r3, r1, #4
 800cf68:	2100      	movs	r1, #0
 800cf6a:	4250      	negs	r0, r2
 800cf6c:	6038      	str	r0, [r7, #0]
 800cf6e:	eb61 0303 	sbc.w	r3, r1, r3
 800cf72:	607b      	str	r3, [r7, #4]
 800cf74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf78:	491c      	ldr	r1, [pc, #112]	@ (800cfec <lt8722_set_output_voltage_channel+0xe0>)
 800cf7a:	eb12 0801 	adds.w	r8, r2, r1
 800cf7e:	f143 0900 	adc.w	r9, r3, #0
 800cf82:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
	if (dir == TEC_HEAT)
 800cf86:	7fbb      	ldrb	r3, [r7, #30]
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d119      	bne.n	800cfc0 <lt8722_set_output_voltage_channel+0xb4>
		vdac = LT8722_DAC_OFFSET + value / 16;
 800cf8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	da05      	bge.n	800cfa0 <lt8722_set_output_voltage_channel+0x94>
 800cf94:	f112 0a0f 	adds.w	sl, r2, #15
 800cf98:	f143 0b00 	adc.w	fp, r3, #0
 800cf9c:	4652      	mov	r2, sl
 800cf9e:	465b      	mov	r3, fp
 800cfa0:	f04f 0000 	mov.w	r0, #0
 800cfa4:	f04f 0100 	mov.w	r1, #0
 800cfa8:	0910      	lsrs	r0, r2, #4
 800cfaa:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800cfae:	1119      	asrs	r1, r3, #4
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	490d      	ldr	r1, [pc, #52]	@ (800cfec <lt8722_set_output_voltage_channel+0xe0>)
 800cfb6:	1854      	adds	r4, r2, r1
 800cfb8:	f143 0500 	adc.w	r5, r3, #0
 800cfbc:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
	dac = lt8722_voltage_to_dac(vdac);
 800cfc0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800cfc4:	f7ff fcdc 	bl	800c980 <lt8722_voltage_to_dac>
 800cfc8:	6238      	str	r0, [r7, #32]
	ret = lt8722_set_dac(channel, dac);
 800cfca:	6a3a      	ldr	r2, [r7, #32]
 800cfcc:	7ffb      	ldrb	r3, [r7, #31]
 800cfce:	4611      	mov	r1, r2
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7ff fe9d 	bl	800cd10 <lt8722_set_dac>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	return ret;
 800cfdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3730      	adds	r7, #48	@ 0x30
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cfea:	bf00      	nop
 800cfec:	4a817c80 	.word	0x4a817c80

0800cff0 <Calculate_CRC8>:

/* Private support function definition ------------------------------------*/
uint8_t Calculate_CRC8(uint8_t *data, uint8_t length)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b085      	sub	sp, #20
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	460b      	mov	r3, r1
 800cffa:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00;
 800cffc:	2300      	movs	r3, #0
 800cffe:	73fb      	strb	r3, [r7, #15]
    uint8_t poly = 0x07;
 800d000:	2307      	movs	r3, #7
 800d002:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < length; i++)
 800d004:	2300      	movs	r3, #0
 800d006:	73bb      	strb	r3, [r7, #14]
 800d008:	e023      	b.n	800d052 <Calculate_CRC8+0x62>
    {
        crc ^= data[i];
 800d00a:	7bbb      	ldrb	r3, [r7, #14]
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	4413      	add	r3, r2
 800d010:	781a      	ldrb	r2, [r3, #0]
 800d012:	7bfb      	ldrb	r3, [r7, #15]
 800d014:	4053      	eors	r3, r2
 800d016:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 800d018:	2300      	movs	r3, #0
 800d01a:	737b      	strb	r3, [r7, #13]
 800d01c:	e013      	b.n	800d046 <Calculate_CRC8+0x56>
        {
            if (crc & 0x80)
 800d01e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d022:	2b00      	cmp	r3, #0
 800d024:	da09      	bge.n	800d03a <Calculate_CRC8+0x4a>
                crc = (crc << 1) ^ poly;
 800d026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d02a:	005b      	lsls	r3, r3, #1
 800d02c:	b25a      	sxtb	r2, r3
 800d02e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800d032:	4053      	eors	r3, r2
 800d034:	b25b      	sxtb	r3, r3
 800d036:	73fb      	strb	r3, [r7, #15]
 800d038:	e002      	b.n	800d040 <Calculate_CRC8+0x50>
            else
                crc <<= 1;
 800d03a:	7bfb      	ldrb	r3, [r7, #15]
 800d03c:	005b      	lsls	r3, r3, #1
 800d03e:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 800d040:	7b7b      	ldrb	r3, [r7, #13]
 800d042:	3301      	adds	r3, #1
 800d044:	737b      	strb	r3, [r7, #13]
 800d046:	7b7b      	ldrb	r3, [r7, #13]
 800d048:	2b07      	cmp	r3, #7
 800d04a:	d9e8      	bls.n	800d01e <Calculate_CRC8+0x2e>
    for (uint8_t i = 0; i < length; i++)
 800d04c:	7bbb      	ldrb	r3, [r7, #14]
 800d04e:	3301      	adds	r3, #1
 800d050:	73bb      	strb	r3, [r7, #14]
 800d052:	7bba      	ldrb	r2, [r7, #14]
 800d054:	78fb      	ldrb	r3, [r7, #3]
 800d056:	429a      	cmp	r2, r3
 800d058:	d3d7      	bcc.n	800d00a <Calculate_CRC8+0x1a>
        }
    }
    return crc;
 800d05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3714      	adds	r7, #20
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <put_unaligned_be32>:

void put_unaligned_be32(uint32_t val, uint8_t *buf)
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
	buf[3] = val & 0xFF;
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	3303      	adds	r3, #3
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	b2d2      	uxtb	r2, r2
 800d07a:	701a      	strb	r2, [r3, #0]
	buf[2] = (val >> 8) & 0xFF;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	0a1a      	lsrs	r2, r3, #8
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	3302      	adds	r3, #2
 800d084:	b2d2      	uxtb	r2, r2
 800d086:	701a      	strb	r2, [r3, #0]
	buf[1] = (val >> 16) & 0xFF;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	0c1a      	lsrs	r2, r3, #16
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	3301      	adds	r3, #1
 800d090:	b2d2      	uxtb	r2, r2
 800d092:	701a      	strb	r2, [r3, #0]
	buf[0] = val >> 24;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	0e1b      	lsrs	r3, r3, #24
 800d098:	b2da      	uxtb	r2, r3
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	701a      	strb	r2, [r3, #0]
}
 800d09e:	bf00      	nop
 800d0a0:	370c      	adds	r7, #12
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr

0800d0aa <get_unaligned_be32>:
{
	buf[1] = val & 0xFF;
	buf[0] = val >> 8;
}
uint32_t get_unaligned_be32(uint8_t *buf)
{
 800d0aa:	b480      	push	{r7}
 800d0ac:	b083      	sub	sp, #12
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
	return buf[3] | ((uint16_t)buf[2] << 8) | ((uint32_t)buf[1] << 16) | ((uint32_t)buf[0] << 24);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	3303      	adds	r3, #3
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	3302      	adds	r3, #2
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	021b      	lsls	r3, r3, #8
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	041b      	lsls	r3, r3, #16
 800d0ce:	431a      	orrs	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	061b      	lsls	r3, r3, #24
 800d0d6:	4313      	orrs	r3, r2
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	370c      	adds	r7, #12
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <get_unaligned_be16>:
uint32_t get_unaligned_be16(uint8_t *buf)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
	return buf[1] | ((uint16_t)buf[0] << 8);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	021b      	lsls	r3, r3, #8
 800d0fa:	4313      	orrs	r3, r2
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	370c      	adds	r7, #12
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <find_first_set_bit>:
uint32_t find_first_set_bit(uint32_t word)
{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
	uint32_t first_set_bit = 0;
 800d110:	2300      	movs	r3, #0
 800d112:	60fb      	str	r3, [r7, #12]
	while (word) {
 800d114:	e00c      	b.n	800d130 <find_first_set_bit+0x28>
		if (word & 0x1)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f003 0301 	and.w	r3, r3, #1
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d001      	beq.n	800d124 <find_first_set_bit+0x1c>
			return first_set_bit;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	e009      	b.n	800d138 <find_first_set_bit+0x30>
		word >>= 1;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	085b      	lsrs	r3, r3, #1
 800d128:	607b      	str	r3, [r7, #4]
		first_set_bit ++;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	3301      	adds	r3, #1
 800d12e:	60fb      	str	r3, [r7, #12]
	while (word) {
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1ef      	bne.n	800d116 <find_first_set_bit+0xe>
	}
	return 32;
 800d136:	2320      	movs	r3, #32
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3714      	adds	r7, #20
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <field_prep>:
uint32_t field_prep(uint32_t mask, uint32_t val)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
	return (val << find_first_set_bit(mask)) & mask;
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f7ff ffda 	bl	800d108 <find_first_set_bit>
 800d154:	4602      	mov	r2, r0
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	fa03 f202 	lsl.w	r2, r3, r2
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	4013      	ands	r3, r2
}
 800d160:	4618      	mov	r0, r3
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	f043 0201 	orr.w	r2, r3, #1
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	609a      	str	r2, [r3, #8]
}
 800d17c:	bf00      	nop
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	f003 0301 	and.w	r3, r3, #1
 800d198:	2b01      	cmp	r3, #1
 800d19a:	bf0c      	ite	eq
 800d19c:	2301      	moveq	r3, #1
 800d19e:	2300      	movne	r3, #0
 800d1a0:	b2db      	uxtb	r3, r3
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	370c      	adds	r7, #12
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr

0800d1ae <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800d1ae:	b480      	push	{r7}
 800d1b0:	b083      	sub	sp, #12
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	609a      	str	r2, [r3, #8]
}
 800d1c2:	bf00      	nop
 800d1c4:	370c      	adds	r7, #12
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr
	...

0800d1d0 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800d1da:	4a0c      	ldr	r2, [pc, #48]	@ (800d20c <LL_DMA_EnableStream+0x3c>)
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	4413      	add	r3, r2
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4908      	ldr	r1, [pc, #32]	@ (800d20c <LL_DMA_EnableStream+0x3c>)
 800d1ec:	683a      	ldr	r2, [r7, #0]
 800d1ee:	440a      	add	r2, r1
 800d1f0:	7812      	ldrb	r2, [r2, #0]
 800d1f2:	4611      	mov	r1, r2
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	440a      	add	r2, r1
 800d1f8:	f043 0301 	orr.w	r3, r3, #1
 800d1fc:	6013      	str	r3, [r2, #0]
}
 800d1fe:	bf00      	nop
 800d200:	370c      	adds	r7, #12
 800d202:	46bd      	mov	sp, r7
 800d204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d208:	4770      	bx	lr
 800d20a:	bf00      	nop
 800d20c:	08015988 	.word	0x08015988

0800d210 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 800d210:	b480      	push	{r7}
 800d212:	b085      	sub	sp, #20
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	60b9      	str	r1, [r7, #8]
 800d21a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800d21c:	4a0d      	ldr	r2, [pc, #52]	@ (800d254 <LL_DMA_SetDataTransferDirection+0x44>)
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	4413      	add	r3, r2
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	461a      	mov	r2, r3
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	4413      	add	r3, r2
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d230:	4908      	ldr	r1, [pc, #32]	@ (800d254 <LL_DMA_SetDataTransferDirection+0x44>)
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	440b      	add	r3, r1
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	4619      	mov	r1, r3
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	440b      	add	r3, r1
 800d23e:	4619      	mov	r1, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	4313      	orrs	r3, r2
 800d244:	600b      	str	r3, [r1, #0]
}
 800d246:	bf00      	nop
 800d248:	3714      	adds	r7, #20
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	08015988 	.word	0x08015988

0800d258 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 800d258:	b480      	push	{r7}
 800d25a:	b085      	sub	sp, #20
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800d264:	4a0d      	ldr	r2, [pc, #52]	@ (800d29c <LL_DMA_SetMode+0x44>)
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	4413      	add	r3, r2
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	461a      	mov	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	4413      	add	r3, r2
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 800d278:	4908      	ldr	r1, [pc, #32]	@ (800d29c <LL_DMA_SetMode+0x44>)
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	440b      	add	r3, r1
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	4619      	mov	r1, r3
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	440b      	add	r3, r1
 800d286:	4619      	mov	r1, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	600b      	str	r3, [r1, #0]
}
 800d28e:	bf00      	nop
 800d290:	3714      	adds	r7, #20
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	08015988 	.word	0x08015988

0800d2a0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800d2ac:	4a0d      	ldr	r2, [pc, #52]	@ (800d2e4 <LL_DMA_SetPeriphIncMode+0x44>)
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d2c0:	4908      	ldr	r1, [pc, #32]	@ (800d2e4 <LL_DMA_SetPeriphIncMode+0x44>)
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	440b      	add	r3, r1
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	440b      	add	r3, r1
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	600b      	str	r3, [r1, #0]
}
 800d2d6:	bf00      	nop
 800d2d8:	3714      	adds	r7, #20
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	08015988 	.word	0x08015988

0800d2e8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b085      	sub	sp, #20
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800d2f4:	4a0d      	ldr	r2, [pc, #52]	@ (800d32c <LL_DMA_SetMemoryIncMode+0x44>)
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	4413      	add	r3, r2
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d308:	4908      	ldr	r1, [pc, #32]	@ (800d32c <LL_DMA_SetMemoryIncMode+0x44>)
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	440b      	add	r3, r1
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	4619      	mov	r1, r3
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	440b      	add	r3, r1
 800d316:	4619      	mov	r1, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	4313      	orrs	r3, r2
 800d31c:	600b      	str	r3, [r1, #0]
}
 800d31e:	bf00      	nop
 800d320:	3714      	adds	r7, #20
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	08015988 	.word	0x08015988

0800d330 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 800d330:	b480      	push	{r7}
 800d332:	b085      	sub	sp, #20
 800d334:	af00      	add	r7, sp, #0
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	60b9      	str	r1, [r7, #8]
 800d33a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800d33c:	4a0d      	ldr	r2, [pc, #52]	@ (800d374 <LL_DMA_SetPeriphSize+0x44>)
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	4413      	add	r3, r2
 800d342:	781b      	ldrb	r3, [r3, #0]
 800d344:	461a      	mov	r2, r3
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	4413      	add	r3, r2
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800d350:	4908      	ldr	r1, [pc, #32]	@ (800d374 <LL_DMA_SetPeriphSize+0x44>)
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	440b      	add	r3, r1
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	4619      	mov	r1, r3
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	440b      	add	r3, r1
 800d35e:	4619      	mov	r1, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	4313      	orrs	r3, r2
 800d364:	600b      	str	r3, [r1, #0]
}
 800d366:	bf00      	nop
 800d368:	3714      	adds	r7, #20
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr
 800d372:	bf00      	nop
 800d374:	08015988 	.word	0x08015988

0800d378 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 800d378:	b480      	push	{r7}
 800d37a:	b085      	sub	sp, #20
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800d384:	4a0d      	ldr	r2, [pc, #52]	@ (800d3bc <LL_DMA_SetMemorySize+0x44>)
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	4413      	add	r3, r2
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	461a      	mov	r2, r3
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	4413      	add	r3, r2
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 800d398:	4908      	ldr	r1, [pc, #32]	@ (800d3bc <LL_DMA_SetMemorySize+0x44>)
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	440b      	add	r3, r1
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	440b      	add	r3, r1
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	600b      	str	r3, [r1, #0]
}
 800d3ae:	bf00      	nop
 800d3b0:	3714      	adds	r7, #20
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop
 800d3bc:	08015988 	.word	0x08015988

0800d3c0 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800d3cc:	4a0d      	ldr	r2, [pc, #52]	@ (800d404 <LL_DMA_SetDataLength+0x44>)
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	4413      	add	r3, r2
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	0c1b      	lsrs	r3, r3, #16
 800d3de:	041b      	lsls	r3, r3, #16
 800d3e0:	4908      	ldr	r1, [pc, #32]	@ (800d404 <LL_DMA_SetDataLength+0x44>)
 800d3e2:	68ba      	ldr	r2, [r7, #8]
 800d3e4:	440a      	add	r2, r1
 800d3e6:	7812      	ldrb	r2, [r2, #0]
 800d3e8:	4611      	mov	r1, r2
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	440a      	add	r2, r1
 800d3ee:	4611      	mov	r1, r2
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	604b      	str	r3, [r1, #4]
}
 800d3f6:	bf00      	nop
 800d3f8:	3714      	adds	r7, #20
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr
 800d402:	bf00      	nop
 800d404:	08015988 	.word	0x08015988

0800d408 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 800d408:	b480      	push	{r7}
 800d40a:	b085      	sub	sp, #20
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800d414:	4a0d      	ldr	r2, [pc, #52]	@ (800d44c <LL_DMA_SetChannelSelection+0x44>)
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	4413      	add	r3, r2
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	461a      	mov	r2, r3
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	4413      	add	r3, r2
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800d428:	4908      	ldr	r1, [pc, #32]	@ (800d44c <LL_DMA_SetChannelSelection+0x44>)
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	440b      	add	r3, r1
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	4619      	mov	r1, r3
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	440b      	add	r3, r1
 800d436:	4619      	mov	r1, r3
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	4313      	orrs	r3, r2
 800d43c:	600b      	str	r3, [r1, #0]
}
 800d43e:	bf00      	nop
 800d440:	3714      	adds	r7, #20
 800d442:	46bd      	mov	sp, r7
 800d444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	08015988 	.word	0x08015988

0800d450 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 800d450:	b480      	push	{r7}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800d45c:	4a07      	ldr	r2, [pc, #28]	@ (800d47c <LL_DMA_SetMemoryAddress+0x2c>)
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	4413      	add	r3, r2
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	461a      	mov	r2, r3
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	4413      	add	r3, r2
 800d46a:	461a      	mov	r2, r3
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	60d3      	str	r3, [r2, #12]
}
 800d470:	bf00      	nop
 800d472:	3714      	adds	r7, #20
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr
 800d47c:	08015988 	.word	0x08015988

0800d480 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 800d480:	b480      	push	{r7}
 800d482:	b085      	sub	sp, #20
 800d484:	af00      	add	r7, sp, #0
 800d486:	60f8      	str	r0, [r7, #12]
 800d488:	60b9      	str	r1, [r7, #8]
 800d48a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800d48c:	4a07      	ldr	r2, [pc, #28]	@ (800d4ac <LL_DMA_SetPeriphAddress+0x2c>)
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	4413      	add	r3, r2
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	461a      	mov	r2, r3
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	4413      	add	r3, r2
 800d49a:	461a      	mov	r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6093      	str	r3, [r2, #8]
}
 800d4a0:	bf00      	nop
 800d4a2:	3714      	adds	r7, #20
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	08015988 	.word	0x08015988

0800d4b0 <NTC_DMA_ADC_Init>:
  3143, 3307, 3521, 3819, 4292, 5279, 6266
};


void NTC_DMA_ADC_Init(void)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	af00      	add	r7, sp, #0
    // Cấu hình DMA
    LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	2100      	movs	r1, #0
 800d4b8:	4823      	ldr	r0, [pc, #140]	@ (800d548 <NTC_DMA_ADC_Init+0x98>)
 800d4ba:	f7ff ffa5 	bl	800d408 <LL_DMA_SetChannelSelection>
    LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800d4be:	2200      	movs	r2, #0
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	4821      	ldr	r0, [pc, #132]	@ (800d548 <NTC_DMA_ADC_Init+0x98>)
 800d4c4:	f7ff fea4 	bl	800d210 <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	2100      	movs	r1, #0
 800d4cc:	481e      	ldr	r0, [pc, #120]	@ (800d548 <NTC_DMA_ADC_Init+0x98>)
 800d4ce:	f7ff fee7 	bl	800d2a0 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 800d4d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d4d6:	2100      	movs	r1, #0
 800d4d8:	481b      	ldr	r0, [pc, #108]	@ (800d548 <NTC_DMA_ADC_Init+0x98>)
 800d4da:	f7ff ff05 	bl	800d2e8 <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 800d4de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	4818      	ldr	r0, [pc, #96]	@ (800d548 <NTC_DMA_ADC_Init+0x98>)
 800d4e6:	f7ff ff23 	bl	800d330 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 800d4ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	4815      	ldr	r0, [pc, #84]	@ (800d548 <NTC_DMA_ADC_Init+0x98>)
 800d4f2:	f7ff ff41 	bl	800d378 <LL_DMA_SetMemorySize>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_0, 8); // 8 kênh
 800d4f6:	2208      	movs	r2, #8
 800d4f8:	2100      	movs	r1, #0
 800d4fa:	4813      	ldr	r0, [pc, #76]	@ (800d548 <NTC_DMA_ADC_Init+0x98>)
 800d4fc:	f7ff ff60 	bl	800d3c0 <LL_DMA_SetDataLength>

    // Địa chỉ của ADC data register
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_0, (uint32_t)&ADC1->DR);
 800d500:	4a12      	ldr	r2, [pc, #72]	@ (800d54c <NTC_DMA_ADC_Init+0x9c>)
 800d502:	2100      	movs	r1, #0
 800d504:	4810      	ldr	r0, [pc, #64]	@ (800d548 <NTC_DMA_ADC_Init+0x98>)
 800d506:	f7ff ffbb 	bl	800d480 <LL_DMA_SetPeriphAddress>

    // Địa chỉ bộ nhớ DMA
    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_0, (uint32_t)NTC_ADC_value);
 800d50a:	4b11      	ldr	r3, [pc, #68]	@ (800d550 <NTC_DMA_ADC_Init+0xa0>)
 800d50c:	461a      	mov	r2, r3
 800d50e:	2100      	movs	r1, #0
 800d510:	480d      	ldr	r0, [pc, #52]	@ (800d548 <NTC_DMA_ADC_Init+0x98>)
 800d512:	f7ff ff9d 	bl	800d450 <LL_DMA_SetMemoryAddress>

    // Cấu hình DMA ở chế độ vòng lặp (Circular Mode)
    LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 800d516:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d51a:	2100      	movs	r1, #0
 800d51c:	480a      	ldr	r0, [pc, #40]	@ (800d548 <NTC_DMA_ADC_Init+0x98>)
 800d51e:	f7ff fe9b 	bl	800d258 <LL_DMA_SetMode>

    // Bật DMA stream
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 800d522:	2100      	movs	r1, #0
 800d524:	4808      	ldr	r0, [pc, #32]	@ (800d548 <NTC_DMA_ADC_Init+0x98>)
 800d526:	f7ff fe53 	bl	800d1d0 <LL_DMA_EnableStream>

    // Bật ADC
    LL_ADC_Enable(ADC1);
 800d52a:	480a      	ldr	r0, [pc, #40]	@ (800d554 <NTC_DMA_ADC_Init+0xa4>)
 800d52c:	f7ff fe1c 	bl	800d168 <LL_ADC_Enable>
    while (!LL_ADC_IsEnabled(ADC1));
 800d530:	bf00      	nop
 800d532:	4808      	ldr	r0, [pc, #32]	@ (800d554 <NTC_DMA_ADC_Init+0xa4>)
 800d534:	f7ff fe28 	bl	800d188 <LL_ADC_IsEnabled>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d0f9      	beq.n	800d532 <NTC_DMA_ADC_Init+0x82>

    // Bắt đầu chuyển đổi ADC
    LL_ADC_REG_StartConversionSWStart(ADC1);
 800d53e:	4805      	ldr	r0, [pc, #20]	@ (800d554 <NTC_DMA_ADC_Init+0xa4>)
 800d540:	f7ff fe35 	bl	800d1ae <LL_ADC_REG_StartConversionSWStart>
}
 800d544:	bf00      	nop
 800d546:	bd80      	pop	{r7, pc}
 800d548:	40026400 	.word	0x40026400
 800d54c:	4001204c 	.word	0x4001204c
 800d550:	20003560 	.word	0x20003560
 800d554:	40012000 	.word	0x40012000

0800d558 <NTC_get_temperature>:

void NTC_get_temperature(int16_t* temp)
{
 800d558:	b480      	push	{r7}
 800d55a:	b085      	sub	sp, #20
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 8; i++)
 800d560:	2300      	movs	r3, #0
 800d562:	73fb      	strb	r3, [r7, #15]
 800d564:	e028      	b.n	800d5b8 <NTC_get_temperature+0x60>
	{
		temp[i] = NTC_table[NTC_ADC_value[i]];
 800d566:	7bfb      	ldrb	r3, [r7, #15]
 800d568:	4a18      	ldr	r2, [pc, #96]	@ (800d5cc <NTC_get_temperature+0x74>)
 800d56a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d56e:	4619      	mov	r1, r3
 800d570:	7bfb      	ldrb	r3, [r7, #15]
 800d572:	005b      	lsls	r3, r3, #1
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	4413      	add	r3, r2
 800d578:	4a15      	ldr	r2, [pc, #84]	@ (800d5d0 <NTC_get_temperature+0x78>)
 800d57a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800d57e:	801a      	strh	r2, [r3, #0]
		if (temp[i] < -500 || temp[i] > 2000)  temp[i] = 0x7FFF;
 800d580:	7bfb      	ldrb	r3, [r7, #15]
 800d582:	005b      	lsls	r3, r3, #1
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	4413      	add	r3, r2
 800d588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d58c:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 800d590:	db08      	blt.n	800d5a4 <NTC_get_temperature+0x4c>
 800d592:	7bfb      	ldrb	r3, [r7, #15]
 800d594:	005b      	lsls	r3, r3, #1
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	4413      	add	r3, r2
 800d59a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d59e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800d5a2:	dd06      	ble.n	800d5b2 <NTC_get_temperature+0x5a>
 800d5a4:	7bfb      	ldrb	r3, [r7, #15]
 800d5a6:	005b      	lsls	r3, r3, #1
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	4413      	add	r3, r2
 800d5ac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d5b0:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++)
 800d5b2:	7bfb      	ldrb	r3, [r7, #15]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	73fb      	strb	r3, [r7, #15]
 800d5b8:	7bfb      	ldrb	r3, [r7, #15]
 800d5ba:	2b07      	cmp	r3, #7
 800d5bc:	d9d3      	bls.n	800d566 <NTC_get_temperature+0xe>
	}
};
 800d5be:	bf00      	nop
 800d5c0:	bf00      	nop
 800d5c2:	3714      	adds	r7, #20
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr
 800d5cc:	20003560 	.word	0x20003560
 800d5d0:	20000314 	.word	0x20000314

0800d5d4 <LL_GPIO_SetOutputPin>:
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	683a      	ldr	r2, [r7, #0]
 800d5e2:	619a      	str	r2, [r3, #24]
}
 800d5e4:	bf00      	nop
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <LL_GPIO_ResetOutputPin>:
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	041a      	lsls	r2, r3, #16
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	619a      	str	r2, [r3, #24]
}
 800d602:	bf00      	nop
 800d604:	370c      	adds	r7, #12
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
	...

0800d610 <LED_Status_Init>:
		480									// taskTick
	},
};

void LED_Status_Init(void)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	af00      	add	r7, sp, #0
    s_led_display_status.led_green = 0;
 800d614:	4a0a      	ldr	r2, [pc, #40]	@ (800d640 <LED_Status_Init+0x30>)
 800d616:	7813      	ldrb	r3, [r2, #0]
 800d618:	f023 0301 	bic.w	r3, r3, #1
 800d61c:	7013      	strb	r3, [r2, #0]
    s_led_display_status.led_blue = 0;
 800d61e:	4a08      	ldr	r2, [pc, #32]	@ (800d640 <LED_Status_Init+0x30>)
 800d620:	7813      	ldrb	r3, [r2, #0]
 800d622:	f023 0302 	bic.w	r3, r3, #2
 800d626:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = EXP_POWERUP;
 800d628:	4a05      	ldr	r2, [pc, #20]	@ (800d640 <LED_Status_Init+0x30>)
 800d62a:	7813      	ldrb	r3, [r2, #0]
 800d62c:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 800d630:	7013      	strb	r3, [r2, #0]
	status_led_led_green_on();
 800d632:	f000 f8d5 	bl	800d7e0 <status_led_led_green_on>
	status_led_led_blue_on();
 800d636:	f000 f8eb 	bl	800d810 <status_led_led_blue_on>



}
 800d63a:	bf00      	nop
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	20003580 	.word	0x20003580

0800d644 <status_led_update>:
#include "board.h"
#include "main.h"
#include "bmp390.h"

void	status_led_update(void)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	af00      	add	r7, sp, #0
//	bmp390_temp_press_update();
//	UART_Printf(&EXP_UART, "%d %d \n", bmp390_get_press(), bmp390_get_temperature());



	switch (s_led_display_status.state) {
 800d648:	4b0c      	ldr	r3, [pc, #48]	@ (800d67c <status_led_update+0x38>)
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800d650:	b2db      	uxtb	r3, r3
 800d652:	2b02      	cmp	r3, #2
 800d654:	d00c      	beq.n	800d670 <status_led_update+0x2c>
 800d656:	2b02      	cmp	r3, #2
 800d658:	dc0d      	bgt.n	800d676 <status_led_update+0x32>
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d002      	beq.n	800d664 <status_led_update+0x20>
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d003      	beq.n	800d66a <status_led_update+0x26>
		break;
	case EXP_ERROR:
		status_led_error();
		break;
	default:
		break;
 800d662:	e008      	b.n	800d676 <status_led_update+0x32>
		status_led_powerup();
 800d664:	f000 f80c 	bl	800d680 <status_led_powerup>
		break;
 800d668:	e006      	b.n	800d678 <status_led_update+0x34>
		status_led_normal();
 800d66a:	f000 f851 	bl	800d710 <status_led_normal>
		break;
 800d66e:	e003      	b.n	800d678 <status_led_update+0x34>
		status_led_error();
 800d670:	f000 f870 	bl	800d754 <status_led_error>
		break;
 800d674:	e000      	b.n	800d678 <status_led_update+0x34>
		break;
 800d676:	bf00      	nop
	}
}
 800d678:	bf00      	nop
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	20003580 	.word	0x20003580

0800d680 <status_led_powerup>:

static void status_led_powerup(void)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 800d684:	4b21      	ldr	r3, [pc, #132]	@ (800d70c <status_led_powerup+0x8c>)
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	f003 0301 	and.w	r3, r3, #1
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d020      	beq.n	800d6d4 <status_led_powerup+0x54>
 800d692:	4b1e      	ldr	r3, [pc, #120]	@ (800d70c <status_led_powerup+0x8c>)
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	f003 0302 	and.w	r3, r3, #2
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d019      	beq.n	800d6d4 <status_led_powerup+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800d6a0:	2000      	movs	r0, #0
 800d6a2:	f005 fc8b 	bl	8012fbc <SCH_TIM_HasCompleted>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d02d      	beq.n	800d708 <status_led_powerup+0x88>
			s_led_display_status.led_green = 0;
 800d6ac:	4a17      	ldr	r2, [pc, #92]	@ (800d70c <status_led_powerup+0x8c>)
 800d6ae:	7813      	ldrb	r3, [r2, #0]
 800d6b0:	f023 0301 	bic.w	r3, r3, #1
 800d6b4:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 800d6b6:	4a15      	ldr	r2, [pc, #84]	@ (800d70c <status_led_powerup+0x8c>)
 800d6b8:	7813      	ldrb	r3, [r2, #0]
 800d6ba:	f023 0302 	bic.w	r3, r3, #2
 800d6be:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 800d6c0:	f000 f89a 	bl	800d7f8 <status_led_led_green_off>
			status_led_led_blue_off();
 800d6c4:	f000 f8b0 	bl	800d828 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 800d6c8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	f005 fc5f 	bl	8012f90 <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800d6d2:	e019      	b.n	800d708 <status_led_powerup+0x88>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	f005 fc71 	bl	8012fbc <SCH_TIM_HasCompleted>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d013      	beq.n	800d708 <status_led_powerup+0x88>
			s_led_display_status.led_green = 1;
 800d6e0:	4a0a      	ldr	r2, [pc, #40]	@ (800d70c <status_led_powerup+0x8c>)
 800d6e2:	7813      	ldrb	r3, [r2, #0]
 800d6e4:	f043 0301 	orr.w	r3, r3, #1
 800d6e8:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 800d6ea:	4a08      	ldr	r2, [pc, #32]	@ (800d70c <status_led_powerup+0x8c>)
 800d6ec:	7813      	ldrb	r3, [r2, #0]
 800d6ee:	f043 0302 	orr.w	r3, r3, #2
 800d6f2:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 800d6f4:	f000 f874 	bl	800d7e0 <status_led_led_green_on>
			status_led_led_blue_on();
 800d6f8:	f000 f88a 	bl	800d810 <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 800d6fc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800d700:	2000      	movs	r0, #0
 800d702:	f005 fc45 	bl	8012f90 <SCH_TIM_Start>
		}
	}
}
 800d706:	e7ff      	b.n	800d708 <status_led_powerup+0x88>
 800d708:	bf00      	nop
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	20003580 	.word	0x20003580

0800d710 <status_led_normal>:

static void status_led_normal(void)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	af00      	add	r7, sp, #0
	// viết tạm
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800d714:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d718:	480d      	ldr	r0, [pc, #52]	@ (800d750 <status_led_normal+0x40>)
 800d71a:	f7ff ff69 	bl	800d5f0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 800d71e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d722:	480b      	ldr	r0, [pc, #44]	@ (800d750 <status_led_normal+0x40>)
 800d724:	f7ff ff56 	bl	800d5d4 <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 800d728:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800d72c:	f005 fbd0 	bl	8012ed0 <LL_mDelay>
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 800d730:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d734:	4806      	ldr	r0, [pc, #24]	@ (800d750 <status_led_normal+0x40>)
 800d736:	f7ff ff5b 	bl	800d5f0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800d73a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d73e:	4804      	ldr	r0, [pc, #16]	@ (800d750 <status_led_normal+0x40>)
 800d740:	f7ff ff48 	bl	800d5d4 <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 800d744:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800d748:	f005 fbc2 	bl	8012ed0 <LL_mDelay>
}
 800d74c:	bf00      	nop
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	40021000 	.word	0x40021000

0800d754 <status_led_error>:

static void status_led_error(void)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 800d758:	4b20      	ldr	r3, [pc, #128]	@ (800d7dc <status_led_error+0x88>)
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	f003 0301 	and.w	r3, r3, #1
 800d760:	b2db      	uxtb	r3, r3
 800d762:	2b00      	cmp	r3, #0
 800d764:	d01f      	beq.n	800d7a6 <status_led_error+0x52>
 800d766:	4b1d      	ldr	r3, [pc, #116]	@ (800d7dc <status_led_error+0x88>)
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	f003 0302 	and.w	r3, r3, #2
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	2b00      	cmp	r3, #0
 800d772:	d018      	beq.n	800d7a6 <status_led_error+0x52>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800d774:	2000      	movs	r0, #0
 800d776:	f005 fc21 	bl	8012fbc <SCH_TIM_HasCompleted>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d02b      	beq.n	800d7d8 <status_led_error+0x84>
			s_led_display_status.led_green = 0;
 800d780:	4a16      	ldr	r2, [pc, #88]	@ (800d7dc <status_led_error+0x88>)
 800d782:	7813      	ldrb	r3, [r2, #0]
 800d784:	f023 0301 	bic.w	r3, r3, #1
 800d788:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 800d78a:	4a14      	ldr	r2, [pc, #80]	@ (800d7dc <status_led_error+0x88>)
 800d78c:	7813      	ldrb	r3, [r2, #0]
 800d78e:	f023 0302 	bic.w	r3, r3, #2
 800d792:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 800d794:	f000 f830 	bl	800d7f8 <status_led_led_green_off>
			status_led_led_blue_off();
 800d798:	f000 f846 	bl	800d828 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 800d79c:	2132      	movs	r1, #50	@ 0x32
 800d79e:	2000      	movs	r0, #0
 800d7a0:	f005 fbf6 	bl	8012f90 <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800d7a4:	e018      	b.n	800d7d8 <status_led_error+0x84>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	f005 fc08 	bl	8012fbc <SCH_TIM_HasCompleted>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d012      	beq.n	800d7d8 <status_led_error+0x84>
			s_led_display_status.led_green = 1;
 800d7b2:	4a0a      	ldr	r2, [pc, #40]	@ (800d7dc <status_led_error+0x88>)
 800d7b4:	7813      	ldrb	r3, [r2, #0]
 800d7b6:	f043 0301 	orr.w	r3, r3, #1
 800d7ba:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 800d7bc:	4a07      	ldr	r2, [pc, #28]	@ (800d7dc <status_led_error+0x88>)
 800d7be:	7813      	ldrb	r3, [r2, #0]
 800d7c0:	f043 0302 	orr.w	r3, r3, #2
 800d7c4:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 800d7c6:	f000 f80b 	bl	800d7e0 <status_led_led_green_on>
			status_led_led_blue_on();
 800d7ca:	f000 f821 	bl	800d810 <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 800d7ce:	2132      	movs	r1, #50	@ 0x32
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	f005 fbdd 	bl	8012f90 <SCH_TIM_Start>
		}
	}
}
 800d7d6:	e7ff      	b.n	800d7d8 <status_led_error+0x84>
 800d7d8:	bf00      	nop
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	20003580 	.word	0x20003580

0800d7e0 <status_led_led_green_on>:

static void status_led_led_green_on(void)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 800d7e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d7e8:	4802      	ldr	r0, [pc, #8]	@ (800d7f4 <status_led_led_green_on+0x14>)
 800d7ea:	f7ff fef3 	bl	800d5d4 <LL_GPIO_SetOutputPin>
}
 800d7ee:	bf00      	nop
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	40021000 	.word	0x40021000

0800d7f8 <status_led_led_green_off>:
static void status_led_led_green_off(void)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 800d7fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d800:	4802      	ldr	r0, [pc, #8]	@ (800d80c <status_led_led_green_off+0x14>)
 800d802:	f7ff fef5 	bl	800d5f0 <LL_GPIO_ResetOutputPin>
}
 800d806:	bf00      	nop
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	40021000 	.word	0x40021000

0800d810 <status_led_led_blue_on>:
static void status_led_led_blue_on(void)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800d814:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d818:	4802      	ldr	r0, [pc, #8]	@ (800d824 <status_led_led_blue_on+0x14>)
 800d81a:	f7ff fedb 	bl	800d5d4 <LL_GPIO_SetOutputPin>
}
 800d81e:	bf00      	nop
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	40021000 	.word	0x40021000

0800d828 <status_led_led_blue_off>:
static void status_led_led_blue_off(void)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800d82c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d830:	4802      	ldr	r0, [pc, #8]	@ (800d83c <status_led_led_blue_off+0x14>)
 800d832:	f7ff fedd 	bl	800d5f0 <LL_GPIO_ResetOutputPin>
}
 800d836:	bf00      	nop
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	40021000 	.word	0x40021000

0800d840 <LED_Status_CreateTask>:

void	LED_Status_CreateTask(void)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 800d844:	4902      	ldr	r1, [pc, #8]	@ (800d850 <LED_Status_CreateTask+0x10>)
 800d846:	4803      	ldr	r0, [pc, #12]	@ (800d854 <LED_Status_CreateTask+0x14>)
 800d848:	f005 fbce 	bl	8012fe8 <SCH_TASK_CreateTask>
}
 800d84c:	bf00      	nop
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	20002318 	.word	0x20002318
 800d854:	20002314 	.word	0x20002314

0800d858 <__NVIC_GetPriorityGrouping>:
{
 800d858:	b480      	push	{r7}
 800d85a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d85c:	4b04      	ldr	r3, [pc, #16]	@ (800d870 <__NVIC_GetPriorityGrouping+0x18>)
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	0a1b      	lsrs	r3, r3, #8
 800d862:	f003 0307 	and.w	r3, r3, #7
}
 800d866:	4618      	mov	r0, r3
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr
 800d870:	e000ed00 	.word	0xe000ed00

0800d874 <__NVIC_EnableIRQ>:
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	4603      	mov	r3, r0
 800d87c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d87e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d882:	2b00      	cmp	r3, #0
 800d884:	db0b      	blt.n	800d89e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d886:	79fb      	ldrb	r3, [r7, #7]
 800d888:	f003 021f 	and.w	r2, r3, #31
 800d88c:	4907      	ldr	r1, [pc, #28]	@ (800d8ac <__NVIC_EnableIRQ+0x38>)
 800d88e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d892:	095b      	lsrs	r3, r3, #5
 800d894:	2001      	movs	r0, #1
 800d896:	fa00 f202 	lsl.w	r2, r0, r2
 800d89a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d89e:	bf00      	nop
 800d8a0:	370c      	adds	r7, #12
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop
 800d8ac:	e000e100 	.word	0xe000e100

0800d8b0 <__NVIC_SetPriority>:
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	6039      	str	r1, [r7, #0]
 800d8ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d8bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	db0a      	blt.n	800d8da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	b2da      	uxtb	r2, r3
 800d8c8:	490c      	ldr	r1, [pc, #48]	@ (800d8fc <__NVIC_SetPriority+0x4c>)
 800d8ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8ce:	0112      	lsls	r2, r2, #4
 800d8d0:	b2d2      	uxtb	r2, r2
 800d8d2:	440b      	add	r3, r1
 800d8d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d8d8:	e00a      	b.n	800d8f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	b2da      	uxtb	r2, r3
 800d8de:	4908      	ldr	r1, [pc, #32]	@ (800d900 <__NVIC_SetPriority+0x50>)
 800d8e0:	79fb      	ldrb	r3, [r7, #7]
 800d8e2:	f003 030f 	and.w	r3, r3, #15
 800d8e6:	3b04      	subs	r3, #4
 800d8e8:	0112      	lsls	r2, r2, #4
 800d8ea:	b2d2      	uxtb	r2, r2
 800d8ec:	440b      	add	r3, r1
 800d8ee:	761a      	strb	r2, [r3, #24]
}
 800d8f0:	bf00      	nop
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr
 800d8fc:	e000e100 	.word	0xe000e100
 800d900:	e000ed00 	.word	0xe000ed00

0800d904 <NVIC_EncodePriority>:
{
 800d904:	b480      	push	{r7}
 800d906:	b089      	sub	sp, #36	@ 0x24
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f003 0307 	and.w	r3, r3, #7
 800d916:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	f1c3 0307 	rsb	r3, r3, #7
 800d91e:	2b04      	cmp	r3, #4
 800d920:	bf28      	it	cs
 800d922:	2304      	movcs	r3, #4
 800d924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d926:	69fb      	ldr	r3, [r7, #28]
 800d928:	3304      	adds	r3, #4
 800d92a:	2b06      	cmp	r3, #6
 800d92c:	d902      	bls.n	800d934 <NVIC_EncodePriority+0x30>
 800d92e:	69fb      	ldr	r3, [r7, #28]
 800d930:	3b03      	subs	r3, #3
 800d932:	e000      	b.n	800d936 <NVIC_EncodePriority+0x32>
 800d934:	2300      	movs	r3, #0
 800d936:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d938:	f04f 32ff 	mov.w	r2, #4294967295
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	fa02 f303 	lsl.w	r3, r2, r3
 800d942:	43da      	mvns	r2, r3
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	401a      	ands	r2, r3
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d94c:	f04f 31ff 	mov.w	r1, #4294967295
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	fa01 f303 	lsl.w	r3, r1, r3
 800d956:	43d9      	mvns	r1, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d95c:	4313      	orrs	r3, r2
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3724      	adds	r7, #36	@ 0x24
 800d962:	46bd      	mov	sp, r7
 800d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d968:	4770      	bx	lr

0800d96a <LL_ADC_REG_SetSequencerRanks>:
{
 800d96a:	b480      	push	{r7}
 800d96c:	b089      	sub	sp, #36	@ 0x24
 800d96e:	af00      	add	r7, sp, #0
 800d970:	60f8      	str	r0, [r7, #12]
 800d972:	60b9      	str	r1, [r7, #8]
 800d974:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	332c      	adds	r3, #44	@ 0x2c
 800d97a:	4619      	mov	r1, r3
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d982:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800d986:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d988:	697a      	ldr	r2, [r7, #20]
 800d98a:	fa92 f2a2 	rbit	r2, r2
 800d98e:	613a      	str	r2, [r7, #16]
  return result;
 800d990:	693a      	ldr	r2, [r7, #16]
 800d992:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 800d994:	69ba      	ldr	r2, [r7, #24]
 800d996:	2a00      	cmp	r2, #0
 800d998:	d101      	bne.n	800d99e <LL_ADC_REG_SetSequencerRanks+0x34>
    return 32U;
 800d99a:	2220      	movs	r2, #32
 800d99c:	e003      	b.n	800d9a6 <LL_ADC_REG_SetSequencerRanks+0x3c>
  return __builtin_clz(value);
 800d99e:	69ba      	ldr	r2, [r7, #24]
 800d9a0:	fab2 f282 	clz	r2, r2
 800d9a4:	b2d2      	uxtb	r2, r2
 800d9a6:	40d3      	lsrs	r3, r2
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	440b      	add	r3, r1
 800d9ac:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 800d9ae:	69fb      	ldr	r3, [r7, #28]
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	f003 031f 	and.w	r3, r3, #31
 800d9b8:	211f      	movs	r1, #31
 800d9ba:	fa01 f303 	lsl.w	r3, r1, r3
 800d9be:	43db      	mvns	r3, r3
 800d9c0:	401a      	ands	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f003 011f 	and.w	r1, r3, #31
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	f003 031f 	and.w	r3, r3, #31
 800d9ce:	fa01 f303 	lsl.w	r3, r1, r3
 800d9d2:	431a      	orrs	r2, r3
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	601a      	str	r2, [r3, #0]
}
 800d9d8:	bf00      	nop
 800d9da:	3724      	adds	r7, #36	@ 0x24
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b083      	sub	sp, #12
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	689b      	ldr	r3, [r3, #8]
 800d9f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	431a      	orrs	r2, r3
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	609a      	str	r2, [r3, #8]
}
 800d9fe:	bf00      	nop
 800da00:	370c      	adds	r7, #12
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr

0800da0a <LL_ADC_SetChannelSamplingTime>:
{
 800da0a:	b480      	push	{r7}
 800da0c:	b08f      	sub	sp, #60	@ 0x3c
 800da0e:	af00      	add	r7, sp, #0
 800da10:	60f8      	str	r0, [r7, #12]
 800da12:	60b9      	str	r1, [r7, #8]
 800da14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	330c      	adds	r3, #12
 800da1a:	4619      	mov	r1, r3
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800da22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800da26:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da28:	697a      	ldr	r2, [r7, #20]
 800da2a:	fa92 f2a2 	rbit	r2, r2
 800da2e:	613a      	str	r2, [r7, #16]
  return result;
 800da30:	693a      	ldr	r2, [r7, #16]
 800da32:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 800da34:	69ba      	ldr	r2, [r7, #24]
 800da36:	2a00      	cmp	r2, #0
 800da38:	d101      	bne.n	800da3e <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 800da3a:	2220      	movs	r2, #32
 800da3c:	e003      	b.n	800da46 <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 800da3e:	69ba      	ldr	r2, [r7, #24]
 800da40:	fab2 f282 	clz	r2, r2
 800da44:	b2d2      	uxtb	r2, r2
 800da46:	40d3      	lsrs	r3, r2
 800da48:	009b      	lsls	r3, r3, #2
 800da4a:	440b      	add	r3, r1
 800da4c:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(*preg,
 800da4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800da58:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800da5c:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da5e:	6a39      	ldr	r1, [r7, #32]
 800da60:	fa91 f1a1 	rbit	r1, r1
 800da64:	61f9      	str	r1, [r7, #28]
  return result;
 800da66:	69f9      	ldr	r1, [r7, #28]
 800da68:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 800da6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da6c:	2900      	cmp	r1, #0
 800da6e:	d101      	bne.n	800da74 <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 800da70:	2120      	movs	r1, #32
 800da72:	e003      	b.n	800da7c <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 800da74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da76:	fab1 f181 	clz	r1, r1
 800da7a:	b2c9      	uxtb	r1, r1
 800da7c:	40cb      	lsrs	r3, r1
 800da7e:	2107      	movs	r1, #7
 800da80:	fa01 f303 	lsl.w	r3, r1, r3
 800da84:	43db      	mvns	r3, r3
 800da86:	401a      	ands	r2, r3
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800da8e:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800da92:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da96:	fa91 f1a1 	rbit	r1, r1
 800da9a:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 800da9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da9e:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 800daa0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800daa2:	2900      	cmp	r1, #0
 800daa4:	d101      	bne.n	800daaa <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 800daa6:	2120      	movs	r1, #32
 800daa8:	e003      	b.n	800dab2 <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 800daaa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800daac:	fab1 f181 	clz	r1, r1
 800dab0:	b2c9      	uxtb	r1, r1
 800dab2:	40cb      	lsrs	r3, r1
 800dab4:	6879      	ldr	r1, [r7, #4]
 800dab6:	fa01 f303 	lsl.w	r3, r1, r3
 800daba:	431a      	orrs	r2, r3
 800dabc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dabe:	601a      	str	r2, [r3, #0]
}
 800dac0:	bf00      	nop
 800dac2:	373c      	adds	r7, #60	@ 0x3c
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr

0800dacc <LL_DMA_SetDataTransferDirection>:
{
 800dacc:	b480      	push	{r7}
 800dace:	b085      	sub	sp, #20
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800dad8:	4a0d      	ldr	r2, [pc, #52]	@ (800db10 <LL_DMA_SetDataTransferDirection+0x44>)
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	4413      	add	r3, r2
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	461a      	mov	r2, r3
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	4413      	add	r3, r2
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800daec:	4908      	ldr	r1, [pc, #32]	@ (800db10 <LL_DMA_SetDataTransferDirection+0x44>)
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	440b      	add	r3, r1
 800daf2:	781b      	ldrb	r3, [r3, #0]
 800daf4:	4619      	mov	r1, r3
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	440b      	add	r3, r1
 800dafa:	4619      	mov	r1, r3
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	4313      	orrs	r3, r2
 800db00:	600b      	str	r3, [r1, #0]
}
 800db02:	bf00      	nop
 800db04:	3714      	adds	r7, #20
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr
 800db0e:	bf00      	nop
 800db10:	08015990 	.word	0x08015990

0800db14 <LL_DMA_SetMode>:
{
 800db14:	b480      	push	{r7}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
 800db1a:	60f8      	str	r0, [r7, #12]
 800db1c:	60b9      	str	r1, [r7, #8]
 800db1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800db20:	4a0d      	ldr	r2, [pc, #52]	@ (800db58 <LL_DMA_SetMode+0x44>)
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	4413      	add	r3, r2
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	461a      	mov	r2, r3
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	4413      	add	r3, r2
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 800db34:	4908      	ldr	r1, [pc, #32]	@ (800db58 <LL_DMA_SetMode+0x44>)
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	440b      	add	r3, r1
 800db3a:	781b      	ldrb	r3, [r3, #0]
 800db3c:	4619      	mov	r1, r3
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	440b      	add	r3, r1
 800db42:	4619      	mov	r1, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4313      	orrs	r3, r2
 800db48:	600b      	str	r3, [r1, #0]
}
 800db4a:	bf00      	nop
 800db4c:	3714      	adds	r7, #20
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop
 800db58:	08015990 	.word	0x08015990

0800db5c <LL_DMA_SetPeriphIncMode>:
{
 800db5c:	b480      	push	{r7}
 800db5e:	b085      	sub	sp, #20
 800db60:	af00      	add	r7, sp, #0
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	60b9      	str	r1, [r7, #8]
 800db66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800db68:	4a0d      	ldr	r2, [pc, #52]	@ (800dba0 <LL_DMA_SetPeriphIncMode+0x44>)
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	4413      	add	r3, r2
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	461a      	mov	r2, r3
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	4413      	add	r3, r2
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800db7c:	4908      	ldr	r1, [pc, #32]	@ (800dba0 <LL_DMA_SetPeriphIncMode+0x44>)
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	440b      	add	r3, r1
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	4619      	mov	r1, r3
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	440b      	add	r3, r1
 800db8a:	4619      	mov	r1, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	4313      	orrs	r3, r2
 800db90:	600b      	str	r3, [r1, #0]
}
 800db92:	bf00      	nop
 800db94:	3714      	adds	r7, #20
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop
 800dba0:	08015990 	.word	0x08015990

0800dba4 <LL_DMA_SetMemoryIncMode>:
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800dbb0:	4a0d      	ldr	r2, [pc, #52]	@ (800dbe8 <LL_DMA_SetMemoryIncMode+0x44>)
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	461a      	mov	r2, r3
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800dbc4:	4908      	ldr	r1, [pc, #32]	@ (800dbe8 <LL_DMA_SetMemoryIncMode+0x44>)
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	440b      	add	r3, r1
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	4619      	mov	r1, r3
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	440b      	add	r3, r1
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	600b      	str	r3, [r1, #0]
}
 800dbda:	bf00      	nop
 800dbdc:	3714      	adds	r7, #20
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr
 800dbe6:	bf00      	nop
 800dbe8:	08015990 	.word	0x08015990

0800dbec <LL_DMA_SetPeriphSize>:
{
 800dbec:	b480      	push	{r7}
 800dbee:	b085      	sub	sp, #20
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800dbf8:	4a0d      	ldr	r2, [pc, #52]	@ (800dc30 <LL_DMA_SetPeriphSize+0x44>)
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	461a      	mov	r2, r3
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	4413      	add	r3, r2
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800dc0c:	4908      	ldr	r1, [pc, #32]	@ (800dc30 <LL_DMA_SetPeriphSize+0x44>)
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	440b      	add	r3, r1
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	4619      	mov	r1, r3
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	440b      	add	r3, r1
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	600b      	str	r3, [r1, #0]
}
 800dc22:	bf00      	nop
 800dc24:	3714      	adds	r7, #20
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr
 800dc2e:	bf00      	nop
 800dc30:	08015990 	.word	0x08015990

0800dc34 <LL_DMA_SetMemorySize>:
{
 800dc34:	b480      	push	{r7}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800dc40:	4a0d      	ldr	r2, [pc, #52]	@ (800dc78 <LL_DMA_SetMemorySize+0x44>)
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	4413      	add	r3, r2
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	461a      	mov	r2, r3
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 800dc54:	4908      	ldr	r1, [pc, #32]	@ (800dc78 <LL_DMA_SetMemorySize+0x44>)
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	440b      	add	r3, r1
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	440b      	add	r3, r1
 800dc62:	4619      	mov	r1, r3
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4313      	orrs	r3, r2
 800dc68:	600b      	str	r3, [r1, #0]
}
 800dc6a:	bf00      	nop
 800dc6c:	3714      	adds	r7, #20
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr
 800dc76:	bf00      	nop
 800dc78:	08015990 	.word	0x08015990

0800dc7c <LL_DMA_SetStreamPriorityLevel>:
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b085      	sub	sp, #20
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800dc88:	4a0d      	ldr	r2, [pc, #52]	@ (800dcc0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	4413      	add	r3, r2
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	461a      	mov	r2, r3
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	4413      	add	r3, r2
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800dc9c:	4908      	ldr	r1, [pc, #32]	@ (800dcc0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	440b      	add	r3, r1
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	4619      	mov	r1, r3
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	440b      	add	r3, r1
 800dcaa:	4619      	mov	r1, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	600b      	str	r3, [r1, #0]
}
 800dcb2:	bf00      	nop
 800dcb4:	3714      	adds	r7, #20
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	08015990 	.word	0x08015990

0800dcc4 <LL_DMA_SetChannelSelection>:
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b085      	sub	sp, #20
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800dcd0:	4a0d      	ldr	r2, [pc, #52]	@ (800dd08 <LL_DMA_SetChannelSelection+0x44>)
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	461a      	mov	r2, r3
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	4413      	add	r3, r2
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800dce4:	4908      	ldr	r1, [pc, #32]	@ (800dd08 <LL_DMA_SetChannelSelection+0x44>)
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	440b      	add	r3, r1
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	4619      	mov	r1, r3
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	440b      	add	r3, r1
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	600b      	str	r3, [r1, #0]
}
 800dcfa:	bf00      	nop
 800dcfc:	3714      	adds	r7, #20
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr
 800dd06:	bf00      	nop
 800dd08:	08015990 	.word	0x08015990

0800dd0c <LL_DMA_DisableFifoMode>:
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b083      	sub	sp, #12
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800dd16:	4a0c      	ldr	r2, [pc, #48]	@ (800dd48 <LL_DMA_DisableFifoMode+0x3c>)
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	4413      	add	r3, r2
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	461a      	mov	r2, r3
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	4413      	add	r3, r2
 800dd24:	695b      	ldr	r3, [r3, #20]
 800dd26:	4908      	ldr	r1, [pc, #32]	@ (800dd48 <LL_DMA_DisableFifoMode+0x3c>)
 800dd28:	683a      	ldr	r2, [r7, #0]
 800dd2a:	440a      	add	r2, r1
 800dd2c:	7812      	ldrb	r2, [r2, #0]
 800dd2e:	4611      	mov	r1, r2
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	440a      	add	r2, r1
 800dd34:	f023 0304 	bic.w	r3, r3, #4
 800dd38:	6153      	str	r3, [r2, #20]
}
 800dd3a:	bf00      	nop
 800dd3c:	370c      	adds	r7, #12
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr
 800dd46:	bf00      	nop
 800dd48:	08015990 	.word	0x08015990

0800dd4c <LL_I2C_Enable>:
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f043 0201 	orr.w	r2, r3, #1
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	601a      	str	r2, [r3, #0]
}
 800dd60:	bf00      	nop
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr

0800dd6c <LL_I2C_EnableClockStretching>:
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b083      	sub	sp, #12
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	601a      	str	r2, [r3, #0]
}
 800dd80:	bf00      	nop
 800dd82:	370c      	adds	r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr

0800dd8c <LL_I2C_DisableGeneralCall>:
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b083      	sub	sp, #12
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	601a      	str	r2, [r3, #0]
}
 800dda0:	bf00      	nop
 800dda2:	370c      	adds	r7, #12
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <LL_I2C_SetOwnAddress2>:
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	431a      	orrs	r2, r3
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	60da      	str	r2, [r3, #12]
}
 800ddc6:	bf00      	nop
 800ddc8:	370c      	adds	r7, #12
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr

0800ddd2 <LL_I2C_DisableOwnAddress2>:
{
 800ddd2:	b480      	push	{r7}
 800ddd4:	b083      	sub	sp, #12
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	f023 0201 	bic.w	r2, r3, #1
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	60da      	str	r2, [r3, #12]
}
 800dde6:	bf00      	nop
 800dde8:	370c      	adds	r7, #12
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr

0800ddf2 <LL_I2C_EnableIT_EVT>:
{
 800ddf2:	b480      	push	{r7}
 800ddf4:	b083      	sub	sp, #12
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	605a      	str	r2, [r3, #4]
}
 800de06:	bf00      	nop
 800de08:	370c      	adds	r7, #12
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr
	...

0800de14 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800de14:	b480      	push	{r7}
 800de16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800de18:	4b05      	ldr	r3, [pc, #20]	@ (800de30 <LL_RCC_HSE_Enable+0x1c>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4a04      	ldr	r2, [pc, #16]	@ (800de30 <LL_RCC_HSE_Enable+0x1c>)
 800de1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800de22:	6013      	str	r3, [r2, #0]
}
 800de24:	bf00      	nop
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	40023800 	.word	0x40023800

0800de34 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800de34:	b480      	push	{r7}
 800de36:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800de38:	4b07      	ldr	r3, [pc, #28]	@ (800de58 <LL_RCC_HSE_IsReady+0x24>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800de40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de44:	bf0c      	ite	eq
 800de46:	2301      	moveq	r3, #1
 800de48:	2300      	movne	r3, #0
 800de4a:	b2db      	uxtb	r3, r3
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr
 800de56:	bf00      	nop
 800de58:	40023800 	.word	0x40023800

0800de5c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b083      	sub	sp, #12
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800de64:	4b06      	ldr	r3, [pc, #24]	@ (800de80 <LL_RCC_SetSysClkSource+0x24>)
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	f023 0203 	bic.w	r2, r3, #3
 800de6c:	4904      	ldr	r1, [pc, #16]	@ (800de80 <LL_RCC_SetSysClkSource+0x24>)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4313      	orrs	r3, r2
 800de72:	608b      	str	r3, [r1, #8]
}
 800de74:	bf00      	nop
 800de76:	370c      	adds	r7, #12
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr
 800de80:	40023800 	.word	0x40023800

0800de84 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800de84:	b480      	push	{r7}
 800de86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800de88:	4b04      	ldr	r3, [pc, #16]	@ (800de9c <LL_RCC_GetSysClkSource+0x18>)
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	f003 030c 	and.w	r3, r3, #12
}
 800de90:	4618      	mov	r0, r3
 800de92:	46bd      	mov	sp, r7
 800de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop
 800de9c:	40023800 	.word	0x40023800

0800dea0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b083      	sub	sp, #12
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800dea8:	4b06      	ldr	r3, [pc, #24]	@ (800dec4 <LL_RCC_SetAHBPrescaler+0x24>)
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800deb0:	4904      	ldr	r1, [pc, #16]	@ (800dec4 <LL_RCC_SetAHBPrescaler+0x24>)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	4313      	orrs	r3, r2
 800deb6:	608b      	str	r3, [r1, #8]
}
 800deb8:	bf00      	nop
 800deba:	370c      	adds	r7, #12
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr
 800dec4:	40023800 	.word	0x40023800

0800dec8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800dec8:	b480      	push	{r7}
 800deca:	b083      	sub	sp, #12
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800ded0:	4b06      	ldr	r3, [pc, #24]	@ (800deec <LL_RCC_SetAPB1Prescaler+0x24>)
 800ded2:	689b      	ldr	r3, [r3, #8]
 800ded4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ded8:	4904      	ldr	r1, [pc, #16]	@ (800deec <LL_RCC_SetAPB1Prescaler+0x24>)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	4313      	orrs	r3, r2
 800dede:	608b      	str	r3, [r1, #8]
}
 800dee0:	bf00      	nop
 800dee2:	370c      	adds	r7, #12
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr
 800deec:	40023800 	.word	0x40023800

0800def0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800def8:	4b06      	ldr	r3, [pc, #24]	@ (800df14 <LL_RCC_SetAPB2Prescaler+0x24>)
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800df00:	4904      	ldr	r1, [pc, #16]	@ (800df14 <LL_RCC_SetAPB2Prescaler+0x24>)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	4313      	orrs	r3, r2
 800df06:	608b      	str	r3, [r1, #8]
}
 800df08:	bf00      	nop
 800df0a:	370c      	adds	r7, #12
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr
 800df14:	40023800 	.word	0x40023800

0800df18 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800df18:	b480      	push	{r7}
 800df1a:	b085      	sub	sp, #20
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800df20:	4b08      	ldr	r3, [pc, #32]	@ (800df44 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800df22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df24:	4907      	ldr	r1, [pc, #28]	@ (800df44 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	4313      	orrs	r3, r2
 800df2a:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800df2c:	4b05      	ldr	r3, [pc, #20]	@ (800df44 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800df2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	4013      	ands	r3, r2
 800df34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800df36:	68fb      	ldr	r3, [r7, #12]
}
 800df38:	bf00      	nop
 800df3a:	3714      	adds	r7, #20
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr
 800df44:	40023800 	.word	0x40023800

0800df48 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800df48:	b480      	push	{r7}
 800df4a:	b085      	sub	sp, #20
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800df50:	4b08      	ldr	r3, [pc, #32]	@ (800df74 <LL_APB1_GRP1_EnableClock+0x2c>)
 800df52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800df54:	4907      	ldr	r1, [pc, #28]	@ (800df74 <LL_APB1_GRP1_EnableClock+0x2c>)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	4313      	orrs	r3, r2
 800df5a:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800df5c:	4b05      	ldr	r3, [pc, #20]	@ (800df74 <LL_APB1_GRP1_EnableClock+0x2c>)
 800df5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	4013      	ands	r3, r2
 800df64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800df66:	68fb      	ldr	r3, [r7, #12]
}
 800df68:	bf00      	nop
 800df6a:	3714      	adds	r7, #20
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr
 800df74:	40023800 	.word	0x40023800

0800df78 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800df78:	b480      	push	{r7}
 800df7a:	b085      	sub	sp, #20
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800df80:	4b08      	ldr	r3, [pc, #32]	@ (800dfa4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800df82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df84:	4907      	ldr	r1, [pc, #28]	@ (800dfa4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	4313      	orrs	r3, r2
 800df8a:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800df8c:	4b05      	ldr	r3, [pc, #20]	@ (800dfa4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800df8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	4013      	ands	r3, r2
 800df94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800df96:	68fb      	ldr	r3, [r7, #12]
}
 800df98:	bf00      	nop
 800df9a:	3714      	adds	r7, #20
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr
 800dfa4:	40023800 	.word	0x40023800

0800dfa8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800dfb0:	4b06      	ldr	r3, [pc, #24]	@ (800dfcc <LL_FLASH_SetLatency+0x24>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f023 0207 	bic.w	r2, r3, #7
 800dfb8:	4904      	ldr	r1, [pc, #16]	@ (800dfcc <LL_FLASH_SetLatency+0x24>)
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	600b      	str	r3, [r1, #0]
}
 800dfc0:	bf00      	nop
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr
 800dfcc:	40023c00 	.word	0x40023c00

0800dfd0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800dfd4:	4b04      	ldr	r3, [pc, #16]	@ (800dfe8 <LL_FLASH_GetLatency+0x18>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f003 0307 	and.w	r3, r3, #7
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	40023c00 	.word	0x40023c00

0800dfec <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800dff4:	4b06      	ldr	r3, [pc, #24]	@ (800e010 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800dffc:	4904      	ldr	r1, [pc, #16]	@ (800e010 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	4313      	orrs	r3, r2
 800e002:	600b      	str	r3, [r1, #0]
}
 800e004:	bf00      	nop
 800e006:	370c      	adds	r7, #12
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr
 800e010:	40007000 	.word	0x40007000

0800e014 <LL_SPI_Enable>:
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	601a      	str	r2, [r3, #0]
}
 800e028:	bf00      	nop
 800e02a:	370c      	adds	r7, #12
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr

0800e034 <LL_SPI_SetStandard>:
{
 800e034:	b480      	push	{r7}
 800e036:	b083      	sub	sp, #12
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	f023 0210 	bic.w	r2, r3, #16
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	431a      	orrs	r2, r3
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	605a      	str	r2, [r3, #4]
}
 800e04e:	bf00      	nop
 800e050:	370c      	adds	r7, #12
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr

0800e05a <LL_TIM_DisableARRPreload>:
{
 800e05a:	b480      	push	{r7}
 800e05c:	b083      	sub	sp, #12
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	601a      	str	r2, [r3, #0]
}
 800e06e:	bf00      	nop
 800e070:	370c      	adds	r7, #12
 800e072:	46bd      	mov	sp, r7
 800e074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e078:	4770      	bx	lr
	...

0800e07c <LL_TIM_OC_DisableFast>:
{
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	2b01      	cmp	r3, #1
 800e08a:	d01c      	beq.n	800e0c6 <LL_TIM_OC_DisableFast+0x4a>
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	2b04      	cmp	r3, #4
 800e090:	d017      	beq.n	800e0c2 <LL_TIM_OC_DisableFast+0x46>
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	2b10      	cmp	r3, #16
 800e096:	d012      	beq.n	800e0be <LL_TIM_OC_DisableFast+0x42>
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	2b40      	cmp	r3, #64	@ 0x40
 800e09c:	d00d      	beq.n	800e0ba <LL_TIM_OC_DisableFast+0x3e>
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0a4:	d007      	beq.n	800e0b6 <LL_TIM_OC_DisableFast+0x3a>
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0ac:	d101      	bne.n	800e0b2 <LL_TIM_OC_DisableFast+0x36>
 800e0ae:	2305      	movs	r3, #5
 800e0b0:	e00a      	b.n	800e0c8 <LL_TIM_OC_DisableFast+0x4c>
 800e0b2:	2306      	movs	r3, #6
 800e0b4:	e008      	b.n	800e0c8 <LL_TIM_OC_DisableFast+0x4c>
 800e0b6:	2304      	movs	r3, #4
 800e0b8:	e006      	b.n	800e0c8 <LL_TIM_OC_DisableFast+0x4c>
 800e0ba:	2303      	movs	r3, #3
 800e0bc:	e004      	b.n	800e0c8 <LL_TIM_OC_DisableFast+0x4c>
 800e0be:	2302      	movs	r3, #2
 800e0c0:	e002      	b.n	800e0c8 <LL_TIM_OC_DisableFast+0x4c>
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e000      	b.n	800e0c8 <LL_TIM_OC_DisableFast+0x4c>
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	3318      	adds	r3, #24
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	7bfb      	ldrb	r3, [r7, #15]
 800e0d2:	4a0b      	ldr	r2, [pc, #44]	@ (800e100 <LL_TIM_OC_DisableFast+0x84>)
 800e0d4:	5cd3      	ldrb	r3, [r2, r3]
 800e0d6:	440b      	add	r3, r1
 800e0d8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	681a      	ldr	r2, [r3, #0]
 800e0de:	7bfb      	ldrb	r3, [r7, #15]
 800e0e0:	4908      	ldr	r1, [pc, #32]	@ (800e104 <LL_TIM_OC_DisableFast+0x88>)
 800e0e2:	5ccb      	ldrb	r3, [r1, r3]
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	2304      	movs	r3, #4
 800e0e8:	408b      	lsls	r3, r1
 800e0ea:	43db      	mvns	r3, r3
 800e0ec:	401a      	ands	r2, r3
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	601a      	str	r2, [r3, #0]
}
 800e0f2:	bf00      	nop
 800e0f4:	3714      	adds	r7, #20
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr
 800e0fe:	bf00      	nop
 800e100:	08015998 	.word	0x08015998
 800e104:	080159a0 	.word	0x080159a0

0800e108 <LL_TIM_OC_EnablePreload>:
{
 800e108:	b480      	push	{r7}
 800e10a:	b085      	sub	sp, #20
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	2b01      	cmp	r3, #1
 800e116:	d01c      	beq.n	800e152 <LL_TIM_OC_EnablePreload+0x4a>
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	2b04      	cmp	r3, #4
 800e11c:	d017      	beq.n	800e14e <LL_TIM_OC_EnablePreload+0x46>
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	2b10      	cmp	r3, #16
 800e122:	d012      	beq.n	800e14a <LL_TIM_OC_EnablePreload+0x42>
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	2b40      	cmp	r3, #64	@ 0x40
 800e128:	d00d      	beq.n	800e146 <LL_TIM_OC_EnablePreload+0x3e>
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e130:	d007      	beq.n	800e142 <LL_TIM_OC_EnablePreload+0x3a>
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e138:	d101      	bne.n	800e13e <LL_TIM_OC_EnablePreload+0x36>
 800e13a:	2305      	movs	r3, #5
 800e13c:	e00a      	b.n	800e154 <LL_TIM_OC_EnablePreload+0x4c>
 800e13e:	2306      	movs	r3, #6
 800e140:	e008      	b.n	800e154 <LL_TIM_OC_EnablePreload+0x4c>
 800e142:	2304      	movs	r3, #4
 800e144:	e006      	b.n	800e154 <LL_TIM_OC_EnablePreload+0x4c>
 800e146:	2303      	movs	r3, #3
 800e148:	e004      	b.n	800e154 <LL_TIM_OC_EnablePreload+0x4c>
 800e14a:	2302      	movs	r3, #2
 800e14c:	e002      	b.n	800e154 <LL_TIM_OC_EnablePreload+0x4c>
 800e14e:	2301      	movs	r3, #1
 800e150:	e000      	b.n	800e154 <LL_TIM_OC_EnablePreload+0x4c>
 800e152:	2300      	movs	r3, #0
 800e154:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	3318      	adds	r3, #24
 800e15a:	4619      	mov	r1, r3
 800e15c:	7bfb      	ldrb	r3, [r7, #15]
 800e15e:	4a0a      	ldr	r2, [pc, #40]	@ (800e188 <LL_TIM_OC_EnablePreload+0x80>)
 800e160:	5cd3      	ldrb	r3, [r2, r3]
 800e162:	440b      	add	r3, r1
 800e164:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	7bfb      	ldrb	r3, [r7, #15]
 800e16c:	4907      	ldr	r1, [pc, #28]	@ (800e18c <LL_TIM_OC_EnablePreload+0x84>)
 800e16e:	5ccb      	ldrb	r3, [r1, r3]
 800e170:	4619      	mov	r1, r3
 800e172:	2308      	movs	r3, #8
 800e174:	408b      	lsls	r3, r1
 800e176:	431a      	orrs	r2, r3
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	601a      	str	r2, [r3, #0]
}
 800e17c:	bf00      	nop
 800e17e:	3714      	adds	r7, #20
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr
 800e188:	08015998 	.word	0x08015998
 800e18c:	080159a0 	.word	0x080159a0

0800e190 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800e190:	b480      	push	{r7}
 800e192:	b083      	sub	sp, #12
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	689b      	ldr	r3, [r3, #8]
 800e19e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e1a2:	f023 0307 	bic.w	r3, r3, #7
 800e1a6:	683a      	ldr	r2, [r7, #0]
 800e1a8:	431a      	orrs	r2, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	609a      	str	r2, [r3, #8]
}
 800e1ae:	bf00      	nop
 800e1b0:	370c      	adds	r7, #12
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr

0800e1ba <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800e1ba:	b480      	push	{r7}
 800e1bc:	b083      	sub	sp, #12
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	6078      	str	r0, [r7, #4]
 800e1c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	431a      	orrs	r2, r3
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	605a      	str	r2, [r3, #4]
}
 800e1d4:	bf00      	nop
 800e1d6:	370c      	adds	r7, #12
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	609a      	str	r2, [r3, #8]
}
 800e1f4:	bf00      	nop
 800e1f6:	370c      	adds	r7, #12
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <LL_USART_Enable>:
{
 800e200:	b480      	push	{r7}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	68db      	ldr	r3, [r3, #12]
 800e20c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	60da      	str	r2, [r3, #12]
}
 800e214:	bf00      	nop
 800e216:	370c      	adds	r7, #12
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <LL_USART_ConfigAsyncMode>:
{
 800e220:	b480      	push	{r7}
 800e222:	b083      	sub	sp, #12
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	691b      	ldr	r3, [r3, #16]
 800e22c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	695b      	ldr	r3, [r3, #20]
 800e238:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	615a      	str	r2, [r3, #20]
}
 800e240:	bf00      	nop
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr

0800e24c <LL_GPIO_SetOutputPin>:
{
 800e24c:	b480      	push	{r7}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	683a      	ldr	r2, [r7, #0]
 800e25a:	619a      	str	r2, [r3, #24]
}
 800e25c:	bf00      	nop
 800e25e:	370c      	adds	r7, #12
 800e260:	46bd      	mov	sp, r7
 800e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e266:	4770      	bx	lr

0800e268 <LL_GPIO_ResetOutputPin>:
{
 800e268:	b480      	push	{r7}
 800e26a:	b083      	sub	sp, #12
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	041a      	lsls	r2, r3, #16
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	619a      	str	r2, [r3, #24]
}
 800e27a:	bf00      	nop
 800e27c:	370c      	adds	r7, #12
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr
	...

0800e288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e28c:	f001 fb78 	bl	800f980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e290:	f000 f83c 	bl	800e30c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e294:	f000 fdb8 	bl	800ee08 <MX_GPIO_Init>
  MX_DMA_Init();
 800e298:	f000 fd9e 	bl	800edd8 <MX_DMA_Init>
  MX_SPI1_Init();
 800e29c:	f000 fab8 	bl	800e810 <MX_SPI1_Init>
  MX_ADC1_Init();
 800e2a0:	f000 f86c 	bl	800e37c <MX_ADC1_Init>
  MX_TIM1_Init();
 800e2a4:	f000 fb96 	bl	800e9d4 <MX_TIM1_Init>
  MX_TIM3_Init();
 800e2a8:	f000 fc2c 	bl	800eb04 <MX_TIM3_Init>
  MX_I2C2_Init();
 800e2ac:	f000 fa32 	bl	800e714 <MX_I2C2_Init>
  MX_SPI3_Init();
 800e2b0:	f000 fb3a 	bl	800e928 <MX_SPI3_Init>
  MX_SPI2_Init();
 800e2b4:	f000 fb02 	bl	800e8bc <MX_SPI2_Init>
  MX_USART6_UART_Init();
 800e2b8:	f000 fd2e 	bl	800ed18 <MX_USART6_UART_Init>
  MX_ADC3_Init();
 800e2bc:	f000 f980 	bl	800e5c0 <MX_ADC3_Init>
  MX_TIM4_Init();
 800e2c0:	f000 fc50 	bl	800eb64 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800e2c4:	f000 fcc8 	bl	800ec58 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800e2c8:	f000 f9cc 	bl	800e664 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize all preset for schedule task
  Ex_Watchdog_Init();
 800e2cc:	f001 fb10 	bl	800f8f0 <Ex_Watchdog_Init>
  LED_Status_Init();
 800e2d0:	f7ff f99e 	bl	800d610 <LED_Status_Init>
  CommandLine_Init(USART6);
 800e2d4:	480c      	ldr	r0, [pc, #48]	@ (800e308 <main+0x80>)
 800e2d6:	f7fb f9a5 	bl	8009624 <CommandLine_Init>
  NTC_DMA_ADC_Init();
 800e2da:	f7ff f8e9 	bl	800d4b0 <NTC_DMA_ADC_Init>
  Laser_board_init();
 800e2de:	f7fe fa4f 	bl	800c780 <Laser_board_init>
  SCH_Initialize();
 800e2e2:	f004 fe2b 	bl	8012f3c <SCH_Initialize>

  // Create task scheduler
  Ex_Watchdog_CreateTask();
 800e2e6:	f001 fb0f 	bl	800f908 <Ex_Watchdog_CreateTask>
  LED_Status_CreateTask();
 800e2ea:	f7ff faa9 	bl	800d840 <LED_Status_CreateTask>
  CommandLine_CreateTask();
 800e2ee:	f7fd f98d 	bl	800b60c <CommandLine_CreateTask>
  Temperature_GetSet_CreateTask();
 800e2f2:	f001 f99b 	bl	800f62c <Temperature_GetSet_CreateTask>
  // sensor_i2c_create_task();
  AutoRun_CreateTask();
 800e2f6:	f7fd fd33 	bl	800bd60 <AutoRun_CreateTask>
  SoftTime_CreateTask();
 800e2fa:	f7fd fdff 	bl	800befc <SoftTime_CreateTask>
  SCH_StartSchedular();
 800e2fe:	f004 ff47 	bl	8013190 <SCH_StartSchedular>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_HandleScheduledTask();
 800e302:	f004 ff4b 	bl	801319c <SCH_HandleScheduledTask>
 800e306:	e7fc      	b.n	800e302 <main+0x7a>
 800e308:	40011400 	.word	0x40011400

0800e30c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800e310:	2000      	movs	r0, #0
 800e312:	f7ff fe49 	bl	800dfa8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800e316:	bf00      	nop
 800e318:	f7ff fe5a 	bl	800dfd0 <LL_FLASH_GetLatency>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d1fa      	bne.n	800e318 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800e322:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e326:	f7ff fe61 	bl	800dfec <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800e32a:	f7ff fd73 	bl	800de14 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800e32e:	bf00      	nop
 800e330:	f7ff fd80 	bl	800de34 <LL_RCC_HSE_IsReady>
 800e334:	4603      	mov	r3, r0
 800e336:	2b01      	cmp	r3, #1
 800e338:	d1fa      	bne.n	800e330 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800e33a:	2000      	movs	r0, #0
 800e33c:	f7ff fdb0 	bl	800dea0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800e340:	2000      	movs	r0, #0
 800e342:	f7ff fdc1 	bl	800dec8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800e346:	2000      	movs	r0, #0
 800e348:	f7ff fdd2 	bl	800def0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 800e34c:	2001      	movs	r0, #1
 800e34e:	f7ff fd85 	bl	800de5c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)
 800e352:	bf00      	nop
 800e354:	f7ff fd96 	bl	800de84 <LL_RCC_GetSysClkSource>
 800e358:	4603      	mov	r3, r0
 800e35a:	2b04      	cmp	r3, #4
 800e35c:	d1fa      	bne.n	800e354 <SystemClock_Config+0x48>
  {

  }
  LL_SetSystemCoreClock(8000000);
 800e35e:	4806      	ldr	r0, [pc, #24]	@ (800e378 <SystemClock_Config+0x6c>)
 800e360:	f004 fddc 	bl	8012f1c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800e364:	200f      	movs	r0, #15
 800e366:	f001 fb2d 	bl	800f9c4 <HAL_InitTick>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d001      	beq.n	800e374 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800e370:	f000 fe22 	bl	800efb8 <Error_Handler>
  }
}
 800e374:	bf00      	nop
 800e376:	bd80      	pop	{r7, pc}
 800e378:	007a1200 	.word	0x007a1200

0800e37c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b092      	sub	sp, #72	@ 0x48
 800e380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800e382:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e386:	2200      	movs	r2, #0
 800e388:	601a      	str	r2, [r3, #0]
 800e38a:	605a      	str	r2, [r3, #4]
 800e38c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800e38e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e392:	2200      	movs	r2, #0
 800e394:	601a      	str	r2, [r3, #0]
 800e396:	605a      	str	r2, [r3, #4]
 800e398:	609a      	str	r2, [r3, #8]
 800e39a:	60da      	str	r2, [r3, #12]
 800e39c:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800e39e:	f107 0318 	add.w	r3, r7, #24
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	601a      	str	r2, [r3, #0]
 800e3a6:	605a      	str	r2, [r3, #4]
 800e3a8:	609a      	str	r2, [r3, #8]
 800e3aa:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3ac:	463b      	mov	r3, r7
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	601a      	str	r2, [r3, #0]
 800e3b2:	605a      	str	r2, [r3, #4]
 800e3b4:	609a      	str	r2, [r3, #8]
 800e3b6:	60da      	str	r2, [r3, #12]
 800e3b8:	611a      	str	r2, [r3, #16]
 800e3ba:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800e3bc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e3c0:	f7ff fdda 	bl	800df78 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800e3c4:	2004      	movs	r0, #4
 800e3c6:	f7ff fda7 	bl	800df18 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800e3ca:	2001      	movs	r0, #1
 800e3cc:	f7ff fda4 	bl	800df18 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800e3d0:	2002      	movs	r0, #2
 800e3d2:	f7ff fda1 	bl	800df18 <LL_AHB1_GRP1_EnableClock>
  PC4   ------> ADC1_IN14
  PC5   ------> ADC1_IN15
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = ADC_TEMP1_Pin|ADC_TEMP2_Pin|ADC_TEMP3_Pin|ADC_TEMP4_Pin
 800e3d6:	233f      	movs	r3, #63	@ 0x3f
 800e3d8:	603b      	str	r3, [r7, #0]
                          |ADC_TEMP5_Pin|ADC_TEMP6_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800e3da:	2303      	movs	r3, #3
 800e3dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e3e2:	463b      	mov	r3, r7
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	4869      	ldr	r0, [pc, #420]	@ (800e58c <MX_ADC1_Init+0x210>)
 800e3e8:	f003 fb9d 	bl	8011b26 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_TEC_Pin;
 800e3ec:	2310      	movs	r3, #16
 800e3ee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800e3f0:	2303      	movs	r3, #3
 800e3f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ADC_TEC_GPIO_Port, &GPIO_InitStruct);
 800e3f8:	463b      	mov	r3, r7
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	4864      	ldr	r0, [pc, #400]	@ (800e590 <MX_ADC1_Init+0x214>)
 800e3fe:	f003 fb92 	bl	8011b26 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_TEMP7_Pin|ADC_TEMP8_Pin;
 800e402:	2303      	movs	r3, #3
 800e404:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800e406:	2303      	movs	r3, #3
 800e408:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e40a:	2300      	movs	r3, #0
 800e40c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e40e:	463b      	mov	r3, r7
 800e410:	4619      	mov	r1, r3
 800e412:	4860      	ldr	r0, [pc, #384]	@ (800e594 <MX_ADC1_Init+0x218>)
 800e414:	f003 fb87 	bl	8011b26 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 800e418:	2200      	movs	r2, #0
 800e41a:	2100      	movs	r1, #0
 800e41c:	485e      	ldr	r0, [pc, #376]	@ (800e598 <MX_ADC1_Init+0x21c>)
 800e41e:	f7ff fc51 	bl	800dcc4 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800e422:	2200      	movs	r2, #0
 800e424:	2100      	movs	r1, #0
 800e426:	485c      	ldr	r0, [pc, #368]	@ (800e598 <MX_ADC1_Init+0x21c>)
 800e428:	f7ff fb50 	bl	800dacc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_MEDIUM);
 800e42c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e430:	2100      	movs	r1, #0
 800e432:	4859      	ldr	r0, [pc, #356]	@ (800e598 <MX_ADC1_Init+0x21c>)
 800e434:	f7ff fc22 	bl	800dc7c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 800e438:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e43c:	2100      	movs	r1, #0
 800e43e:	4856      	ldr	r0, [pc, #344]	@ (800e598 <MX_ADC1_Init+0x21c>)
 800e440:	f7ff fb68 	bl	800db14 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 800e444:	2200      	movs	r2, #0
 800e446:	2100      	movs	r1, #0
 800e448:	4853      	ldr	r0, [pc, #332]	@ (800e598 <MX_ADC1_Init+0x21c>)
 800e44a:	f7ff fb87 	bl	800db5c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 800e44e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e452:	2100      	movs	r1, #0
 800e454:	4850      	ldr	r0, [pc, #320]	@ (800e598 <MX_ADC1_Init+0x21c>)
 800e456:	f7ff fba5 	bl	800dba4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 800e45a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e45e:	2100      	movs	r1, #0
 800e460:	484d      	ldr	r0, [pc, #308]	@ (800e598 <MX_ADC1_Init+0x21c>)
 800e462:	f7ff fbc3 	bl	800dbec <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 800e466:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800e46a:	2100      	movs	r1, #0
 800e46c:	484a      	ldr	r0, [pc, #296]	@ (800e598 <MX_ADC1_Init+0x21c>)
 800e46e:	f7ff fbe1 	bl	800dc34 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 800e472:	2100      	movs	r1, #0
 800e474:	4848      	ldr	r0, [pc, #288]	@ (800e598 <MX_ADC1_Init+0x21c>)
 800e476:	f7ff fc49 	bl	800dd0c <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800e47a:	2300      	movs	r3, #0
 800e47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800e47e:	2300      	movs	r3, #0
 800e480:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800e482:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e486:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800e488:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e48c:	4619      	mov	r1, r3
 800e48e:	4843      	ldr	r0, [pc, #268]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e490:	f003 f990 	bl	80117b4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800e494:	2300      	movs	r3, #0
 800e496:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 800e498:	f44f 03e0 	mov.w	r3, #7340032	@ 0x700000
 800e49c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800e4a2:	2302      	movs	r3, #2
 800e4a4:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800e4a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e4aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800e4ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	483a      	ldr	r0, [pc, #232]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e4b4:	f003 f9aa 	bl	801180c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	4838      	ldr	r0, [pc, #224]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e4bc:	f7ff fa92 	bl	800d9e4 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800e4c8:	f107 0318 	add.w	r3, r7, #24
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	4834      	ldr	r0, [pc, #208]	@ (800e5a0 <MX_ADC1_Init+0x224>)
 800e4d0:	f003 f928 	bl	8011724 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_10);
 800e4d4:	220a      	movs	r2, #10
 800e4d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e4da:	4830      	ldr	r0, [pc, #192]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e4dc:	f7ff fa45 	bl	800d96a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_15CYCLES);
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	210a      	movs	r1, #10
 800e4e4:	482d      	ldr	r0, [pc, #180]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e4e6:	f7ff fa90 	bl	800da0a <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_11);
 800e4ea:	4a2e      	ldr	r2, [pc, #184]	@ (800e5a4 <MX_ADC1_Init+0x228>)
 800e4ec:	f240 2105 	movw	r1, #517	@ 0x205
 800e4f0:	482a      	ldr	r0, [pc, #168]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e4f2:	f7ff fa3a 	bl	800d96a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_15CYCLES);
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	492a      	ldr	r1, [pc, #168]	@ (800e5a4 <MX_ADC1_Init+0x228>)
 800e4fa:	4828      	ldr	r0, [pc, #160]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e4fc:	f7ff fa85 	bl	800da0a <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_12);
 800e500:	4a29      	ldr	r2, [pc, #164]	@ (800e5a8 <MX_ADC1_Init+0x22c>)
 800e502:	f240 210a 	movw	r1, #522	@ 0x20a
 800e506:	4825      	ldr	r0, [pc, #148]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e508:	f7ff fa2f 	bl	800d96a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_15CYCLES);
 800e50c:	2201      	movs	r2, #1
 800e50e:	4926      	ldr	r1, [pc, #152]	@ (800e5a8 <MX_ADC1_Init+0x22c>)
 800e510:	4822      	ldr	r0, [pc, #136]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e512:	f7ff fa7a 	bl	800da0a <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_13);
 800e516:	4a25      	ldr	r2, [pc, #148]	@ (800e5ac <MX_ADC1_Init+0x230>)
 800e518:	f240 210f 	movw	r1, #527	@ 0x20f
 800e51c:	481f      	ldr	r0, [pc, #124]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e51e:	f7ff fa24 	bl	800d96a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SAMPLINGTIME_15CYCLES);
 800e522:	2201      	movs	r2, #1
 800e524:	4921      	ldr	r1, [pc, #132]	@ (800e5ac <MX_ADC1_Init+0x230>)
 800e526:	481d      	ldr	r0, [pc, #116]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e528:	f7ff fa6f 	bl	800da0a <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_14);
 800e52c:	4a20      	ldr	r2, [pc, #128]	@ (800e5b0 <MX_ADC1_Init+0x234>)
 800e52e:	f44f 7105 	mov.w	r1, #532	@ 0x214
 800e532:	481a      	ldr	r0, [pc, #104]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e534:	f7ff fa19 	bl	800d96a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_15CYCLES);
 800e538:	2201      	movs	r2, #1
 800e53a:	491d      	ldr	r1, [pc, #116]	@ (800e5b0 <MX_ADC1_Init+0x234>)
 800e53c:	4817      	ldr	r0, [pc, #92]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e53e:	f7ff fa64 	bl	800da0a <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_15);
 800e542:	4a1c      	ldr	r2, [pc, #112]	@ (800e5b4 <MX_ADC1_Init+0x238>)
 800e544:	f240 2119 	movw	r1, #537	@ 0x219
 800e548:	4814      	ldr	r0, [pc, #80]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e54a:	f7ff fa0e 	bl	800d96a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_15CYCLES);
 800e54e:	2201      	movs	r2, #1
 800e550:	4918      	ldr	r1, [pc, #96]	@ (800e5b4 <MX_ADC1_Init+0x238>)
 800e552:	4812      	ldr	r0, [pc, #72]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e554:	f7ff fa59 	bl	800da0a <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_8);
 800e558:	4a17      	ldr	r2, [pc, #92]	@ (800e5b8 <MX_ADC1_Init+0x23c>)
 800e55a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e55e:	480f      	ldr	r0, [pc, #60]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e560:	f7ff fa03 	bl	800d96a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_15CYCLES);
 800e564:	2201      	movs	r2, #1
 800e566:	4914      	ldr	r1, [pc, #80]	@ (800e5b8 <MX_ADC1_Init+0x23c>)
 800e568:	480c      	ldr	r0, [pc, #48]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e56a:	f7ff fa4e 	bl	800da0a <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_9);
 800e56e:	4a13      	ldr	r2, [pc, #76]	@ (800e5bc <MX_ADC1_Init+0x240>)
 800e570:	f240 1105 	movw	r1, #261	@ 0x105
 800e574:	4809      	ldr	r0, [pc, #36]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e576:	f7ff f9f8 	bl	800d96a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_15CYCLES);
 800e57a:	2201      	movs	r2, #1
 800e57c:	490f      	ldr	r1, [pc, #60]	@ (800e5bc <MX_ADC1_Init+0x240>)
 800e57e:	4807      	ldr	r0, [pc, #28]	@ (800e59c <MX_ADC1_Init+0x220>)
 800e580:	f7ff fa43 	bl	800da0a <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800e584:	bf00      	nop
 800e586:	3748      	adds	r7, #72	@ 0x48
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	40020800 	.word	0x40020800
 800e590:	40020000 	.word	0x40020000
 800e594:	40020400 	.word	0x40020400
 800e598:	40026400 	.word	0x40026400
 800e59c:	40012000 	.word	0x40012000
 800e5a0:	40012300 	.word	0x40012300
 800e5a4:	0030000b 	.word	0x0030000b
 800e5a8:	0060000c 	.word	0x0060000c
 800e5ac:	0090000d 	.word	0x0090000d
 800e5b0:	00c0000e 	.word	0x00c0000e
 800e5b4:	00f0000f 	.word	0x00f0000f
 800e5b8:	03800008 	.word	0x03800008
 800e5bc:	03b00009 	.word	0x03b00009

0800e5c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800e5c6:	463b      	mov	r3, r7
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	601a      	str	r2, [r3, #0]
 800e5cc:	605a      	str	r2, [r3, #4]
 800e5ce:	609a      	str	r2, [r3, #8]
 800e5d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800e5d2:	4b21      	ldr	r3, [pc, #132]	@ (800e658 <MX_ADC3_Init+0x98>)
 800e5d4:	4a21      	ldr	r2, [pc, #132]	@ (800e65c <MX_ADC3_Init+0x9c>)
 800e5d6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800e5d8:	4b1f      	ldr	r3, [pc, #124]	@ (800e658 <MX_ADC3_Init+0x98>)
 800e5da:	2200      	movs	r2, #0
 800e5dc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800e5de:	4b1e      	ldr	r3, [pc, #120]	@ (800e658 <MX_ADC3_Init+0x98>)
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800e5e4:	4b1c      	ldr	r3, [pc, #112]	@ (800e658 <MX_ADC3_Init+0x98>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800e5ea:	4b1b      	ldr	r3, [pc, #108]	@ (800e658 <MX_ADC3_Init+0x98>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800e5f0:	4b19      	ldr	r3, [pc, #100]	@ (800e658 <MX_ADC3_Init+0x98>)
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e5f8:	4b17      	ldr	r3, [pc, #92]	@ (800e658 <MX_ADC3_Init+0x98>)
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e5fe:	4b16      	ldr	r3, [pc, #88]	@ (800e658 <MX_ADC3_Init+0x98>)
 800e600:	4a17      	ldr	r2, [pc, #92]	@ (800e660 <MX_ADC3_Init+0xa0>)
 800e602:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e604:	4b14      	ldr	r3, [pc, #80]	@ (800e658 <MX_ADC3_Init+0x98>)
 800e606:	2200      	movs	r2, #0
 800e608:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800e60a:	4b13      	ldr	r3, [pc, #76]	@ (800e658 <MX_ADC3_Init+0x98>)
 800e60c:	2201      	movs	r2, #1
 800e60e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800e610:	4b11      	ldr	r3, [pc, #68]	@ (800e658 <MX_ADC3_Init+0x98>)
 800e612:	2200      	movs	r2, #0
 800e614:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e618:	4b0f      	ldr	r3, [pc, #60]	@ (800e658 <MX_ADC3_Init+0x98>)
 800e61a:	2201      	movs	r2, #1
 800e61c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800e61e:	480e      	ldr	r0, [pc, #56]	@ (800e658 <MX_ADC3_Init+0x98>)
 800e620:	f001 fa20 	bl	800fa64 <HAL_ADC_Init>
 800e624:	4603      	mov	r3, r0
 800e626:	2b00      	cmp	r3, #0
 800e628:	d001      	beq.n	800e62e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800e62a:	f000 fcc5 	bl	800efb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800e62e:	2302      	movs	r3, #2
 800e630:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e632:	2301      	movs	r3, #1
 800e634:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e636:	2300      	movs	r3, #0
 800e638:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800e63a:	463b      	mov	r3, r7
 800e63c:	4619      	mov	r1, r3
 800e63e:	4806      	ldr	r0, [pc, #24]	@ (800e658 <MX_ADC3_Init+0x98>)
 800e640:	f001 fa54 	bl	800faec <HAL_ADC_ConfigChannel>
 800e644:	4603      	mov	r3, r0
 800e646:	2b00      	cmp	r3, #0
 800e648:	d001      	beq.n	800e64e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800e64a:	f000 fcb5 	bl	800efb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800e64e:	bf00      	nop
 800e650:	3710      	adds	r7, #16
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	20003584 	.word	0x20003584
 800e65c:	40012200 	.word	0x40012200
 800e660:	0f000001 	.word	0x0f000001

0800e664 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b08c      	sub	sp, #48	@ 0x30
 800e668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800e66a:	f107 0318 	add.w	r3, r7, #24
 800e66e:	2200      	movs	r2, #0
 800e670:	601a      	str	r2, [r3, #0]
 800e672:	605a      	str	r2, [r3, #4]
 800e674:	609a      	str	r2, [r3, #8]
 800e676:	60da      	str	r2, [r3, #12]
 800e678:	611a      	str	r2, [r3, #16]
 800e67a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e67c:	463b      	mov	r3, r7
 800e67e:	2200      	movs	r2, #0
 800e680:	601a      	str	r2, [r3, #0]
 800e682:	605a      	str	r2, [r3, #4]
 800e684:	609a      	str	r2, [r3, #8]
 800e686:	60da      	str	r2, [r3, #12]
 800e688:	611a      	str	r2, [r3, #16]
 800e68a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800e68c:	2002      	movs	r0, #2
 800e68e:	f7ff fc43 	bl	800df18 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = SENSOR_SCL_Pin|SENSOR_SDA_Pin;
 800e692:	23c0      	movs	r3, #192	@ 0xc0
 800e694:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800e696:	2302      	movs	r3, #2
 800e698:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800e69a:	2303      	movs	r3, #3
 800e69c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800e69e:	2301      	movs	r3, #1
 800e6a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800e6a6:	2304      	movs	r3, #4
 800e6a8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e6aa:	463b      	mov	r3, r7
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	4816      	ldr	r0, [pc, #88]	@ (800e708 <MX_I2C1_Init+0xa4>)
 800e6b0:	f003 fa39 	bl	8011b26 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800e6b4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e6b8:	f7ff fc46 	bl	800df48 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800e6bc:	4813      	ldr	r0, [pc, #76]	@ (800e70c <MX_I2C1_Init+0xa8>)
 800e6be:	f7ff fb88 	bl	800ddd2 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800e6c2:	4812      	ldr	r0, [pc, #72]	@ (800e70c <MX_I2C1_Init+0xa8>)
 800e6c4:	f7ff fb62 	bl	800dd8c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800e6c8:	4810      	ldr	r0, [pc, #64]	@ (800e70c <MX_I2C1_Init+0xa8>)
 800e6ca:	f7ff fb4f 	bl	800dd6c <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800e6d2:	4b0f      	ldr	r3, [pc, #60]	@ (800e710 <MX_I2C1_Init+0xac>)
 800e6d4:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800e6de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e6e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800e6e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e6e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800e6ea:	f107 0318 	add.w	r3, r7, #24
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	4806      	ldr	r0, [pc, #24]	@ (800e70c <MX_I2C1_Init+0xa8>)
 800e6f2:	f003 fbef 	bl	8011ed4 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800e6f6:	2100      	movs	r1, #0
 800e6f8:	4804      	ldr	r0, [pc, #16]	@ (800e70c <MX_I2C1_Init+0xa8>)
 800e6fa:	f7ff fb57 	bl	800ddac <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800e6fe:	bf00      	nop
 800e700:	3730      	adds	r7, #48	@ 0x30
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	40020400 	.word	0x40020400
 800e70c:	40005400 	.word	0x40005400
 800e710:	000186a0 	.word	0x000186a0

0800e714 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b08c      	sub	sp, #48	@ 0x30
 800e718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800e71a:	f107 0318 	add.w	r3, r7, #24
 800e71e:	2200      	movs	r2, #0
 800e720:	601a      	str	r2, [r3, #0]
 800e722:	605a      	str	r2, [r3, #4]
 800e724:	609a      	str	r2, [r3, #8]
 800e726:	60da      	str	r2, [r3, #12]
 800e728:	611a      	str	r2, [r3, #16]
 800e72a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e72c:	463b      	mov	r3, r7
 800e72e:	2200      	movs	r2, #0
 800e730:	601a      	str	r2, [r3, #0]
 800e732:	605a      	str	r2, [r3, #4]
 800e734:	609a      	str	r2, [r3, #8]
 800e736:	60da      	str	r2, [r3, #12]
 800e738:	611a      	str	r2, [r3, #16]
 800e73a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800e73c:	2002      	movs	r0, #2
 800e73e:	f7ff fbeb 	bl	800df18 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = EXP_SCL_Pin|EXP_SDA_Pin;
 800e742:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800e746:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800e748:	2302      	movs	r3, #2
 800e74a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800e74c:	2303      	movs	r3, #3
 800e74e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800e750:	2301      	movs	r3, #1
 800e752:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e754:	2300      	movs	r3, #0
 800e756:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800e758:	2304      	movs	r3, #4
 800e75a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e75c:	463b      	mov	r3, r7
 800e75e:	4619      	mov	r1, r3
 800e760:	4828      	ldr	r0, [pc, #160]	@ (800e804 <MX_I2C2_Init+0xf0>)
 800e762:	f003 f9e0 	bl	8011b26 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 800e766:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e76a:	f7ff fbed 	bl	800df48 <LL_APB1_GRP1_EnableClock>

  /* I2C2 interrupt Init */
  NVIC_SetPriority(I2C2_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800e76e:	f7ff f873 	bl	800d858 <__NVIC_GetPriorityGrouping>
 800e772:	4603      	mov	r3, r0
 800e774:	2200      	movs	r2, #0
 800e776:	2100      	movs	r1, #0
 800e778:	4618      	mov	r0, r3
 800e77a:	f7ff f8c3 	bl	800d904 <NVIC_EncodePriority>
 800e77e:	4603      	mov	r3, r0
 800e780:	4619      	mov	r1, r3
 800e782:	2021      	movs	r0, #33	@ 0x21
 800e784:	f7ff f894 	bl	800d8b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C2_EV_IRQn);
 800e788:	2021      	movs	r0, #33	@ 0x21
 800e78a:	f7ff f873 	bl	800d874 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C2_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800e78e:	f7ff f863 	bl	800d858 <__NVIC_GetPriorityGrouping>
 800e792:	4603      	mov	r3, r0
 800e794:	2200      	movs	r2, #0
 800e796:	2100      	movs	r1, #0
 800e798:	4618      	mov	r0, r3
 800e79a:	f7ff f8b3 	bl	800d904 <NVIC_EncodePriority>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	2022      	movs	r0, #34	@ 0x22
 800e7a4:	f7ff f884 	bl	800d8b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C2_ER_IRQn);
 800e7a8:	2022      	movs	r0, #34	@ 0x22
 800e7aa:	f7ff f863 	bl	800d874 <__NVIC_EnableIRQ>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 800e7ae:	4816      	ldr	r0, [pc, #88]	@ (800e808 <MX_I2C2_Init+0xf4>)
 800e7b0:	f7ff fb0f 	bl	800ddd2 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 800e7b4:	4814      	ldr	r0, [pc, #80]	@ (800e808 <MX_I2C2_Init+0xf4>)
 800e7b6:	f7ff fae9 	bl	800dd8c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 800e7ba:	4813      	ldr	r0, [pc, #76]	@ (800e808 <MX_I2C2_Init+0xf4>)
 800e7bc:	f7ff fad6 	bl	800dd6c <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800e7c4:	4b11      	ldr	r3, [pc, #68]	@ (800e80c <MX_I2C2_Init+0xf8>)
 800e7c6:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 36;
 800e7cc:	2324      	movs	r3, #36	@ 0x24
 800e7ce:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800e7d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800e7d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e7da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 800e7dc:	f107 0318 	add.w	r3, r7, #24
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	4809      	ldr	r0, [pc, #36]	@ (800e808 <MX_I2C2_Init+0xf4>)
 800e7e4:	f003 fb76 	bl	8011ed4 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 800e7e8:	2100      	movs	r1, #0
 800e7ea:	4807      	ldr	r0, [pc, #28]	@ (800e808 <MX_I2C2_Init+0xf4>)
 800e7ec:	f7ff fade 	bl	800ddac <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */
  LL_I2C_EnableIT_EVT(I2C2);
 800e7f0:	4805      	ldr	r0, [pc, #20]	@ (800e808 <MX_I2C2_Init+0xf4>)
 800e7f2:	f7ff fafe 	bl	800ddf2 <LL_I2C_EnableIT_EVT>
  //  LL_I2C_EnableIT_ERR(I2C2);
  LL_I2C_Enable(I2C2);
 800e7f6:	4804      	ldr	r0, [pc, #16]	@ (800e808 <MX_I2C2_Init+0xf4>)
 800e7f8:	f7ff faa8 	bl	800dd4c <LL_I2C_Enable>
  /* USER CODE END I2C2_Init 2 */

}
 800e7fc:	bf00      	nop
 800e7fe:	3730      	adds	r7, #48	@ 0x30
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}
 800e804:	40020400 	.word	0x40020400
 800e808:	40005800 	.word	0x40005800
 800e80c:	000186a0 	.word	0x000186a0

0800e810 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b090      	sub	sp, #64	@ 0x40
 800e814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800e816:	f107 0318 	add.w	r3, r7, #24
 800e81a:	2228      	movs	r2, #40	@ 0x28
 800e81c:	2100      	movs	r1, #0
 800e81e:	4618      	mov	r0, r3
 800e820:	f004 fdd4 	bl	80133cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e824:	463b      	mov	r3, r7
 800e826:	2200      	movs	r2, #0
 800e828:	601a      	str	r2, [r3, #0]
 800e82a:	605a      	str	r2, [r3, #4]
 800e82c:	609a      	str	r2, [r3, #8]
 800e82e:	60da      	str	r2, [r3, #12]
 800e830:	611a      	str	r2, [r3, #16]
 800e832:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800e834:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e838:	f7ff fb9e 	bl	800df78 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800e83c:	2001      	movs	r0, #1
 800e83e:	f7ff fb6b 	bl	800df18 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LASRR_SCK_Pin|LASER_MISO_Pin|LASER_MOSI_Pin;
 800e842:	23e0      	movs	r3, #224	@ 0xe0
 800e844:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800e846:	2302      	movs	r3, #2
 800e848:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800e84a:	2303      	movs	r3, #3
 800e84c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800e84e:	2300      	movs	r3, #0
 800e850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e852:	2300      	movs	r3, #0
 800e854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800e856:	2305      	movs	r3, #5
 800e858:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e85a:	463b      	mov	r3, r7
 800e85c:	4619      	mov	r1, r3
 800e85e:	4815      	ldr	r0, [pc, #84]	@ (800e8b4 <MX_SPI1_Init+0xa4>)
 800e860:	f003 f961 	bl	8011b26 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800e864:	2300      	movs	r3, #0
 800e866:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800e868:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800e86c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800e86e:	2300      	movs	r3, #0
 800e870:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800e872:	2300      	movs	r3, #0
 800e874:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800e876:	2301      	movs	r3, #1
 800e878:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800e87a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e87e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800e880:	2310      	movs	r3, #16
 800e882:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800e884:	2300      	movs	r3, #0
 800e886:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800e888:	2300      	movs	r3, #0
 800e88a:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 800e88c:	230a      	movs	r3, #10
 800e88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800e890:	f107 0318 	add.w	r3, r7, #24
 800e894:	4619      	mov	r1, r3
 800e896:	4808      	ldr	r0, [pc, #32]	@ (800e8b8 <MX_SPI1_Init+0xa8>)
 800e898:	f003 fcab 	bl	80121f2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800e89c:	2100      	movs	r1, #0
 800e89e:	4806      	ldr	r0, [pc, #24]	@ (800e8b8 <MX_SPI1_Init+0xa8>)
 800e8a0:	f7ff fbc8 	bl	800e034 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 800e8a4:	4804      	ldr	r0, [pc, #16]	@ (800e8b8 <MX_SPI1_Init+0xa8>)
 800e8a6:	f7ff fbb5 	bl	800e014 <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 800e8aa:	bf00      	nop
 800e8ac:	3740      	adds	r7, #64	@ 0x40
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	40020000 	.word	0x40020000
 800e8b8:	40013000 	.word	0x40013000

0800e8bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800e8c0:	4b17      	ldr	r3, [pc, #92]	@ (800e920 <MX_SPI2_Init+0x64>)
 800e8c2:	4a18      	ldr	r2, [pc, #96]	@ (800e924 <MX_SPI2_Init+0x68>)
 800e8c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800e8c6:	4b16      	ldr	r3, [pc, #88]	@ (800e920 <MX_SPI2_Init+0x64>)
 800e8c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800e8cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800e8ce:	4b14      	ldr	r3, [pc, #80]	@ (800e920 <MX_SPI2_Init+0x64>)
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800e8d4:	4b12      	ldr	r3, [pc, #72]	@ (800e920 <MX_SPI2_Init+0x64>)
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e8da:	4b11      	ldr	r3, [pc, #68]	@ (800e920 <MX_SPI2_Init+0x64>)
 800e8dc:	2200      	movs	r2, #0
 800e8de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800e8e0:	4b0f      	ldr	r3, [pc, #60]	@ (800e920 <MX_SPI2_Init+0x64>)
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800e8e6:	4b0e      	ldr	r3, [pc, #56]	@ (800e920 <MX_SPI2_Init+0x64>)
 800e8e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e8ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800e8ee:	4b0c      	ldr	r3, [pc, #48]	@ (800e920 <MX_SPI2_Init+0x64>)
 800e8f0:	2210      	movs	r2, #16
 800e8f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e8f4:	4b0a      	ldr	r3, [pc, #40]	@ (800e920 <MX_SPI2_Init+0x64>)
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800e8fa:	4b09      	ldr	r3, [pc, #36]	@ (800e920 <MX_SPI2_Init+0x64>)
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e900:	4b07      	ldr	r3, [pc, #28]	@ (800e920 <MX_SPI2_Init+0x64>)
 800e902:	2200      	movs	r2, #0
 800e904:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800e906:	4b06      	ldr	r3, [pc, #24]	@ (800e920 <MX_SPI2_Init+0x64>)
 800e908:	220a      	movs	r2, #10
 800e90a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800e90c:	4804      	ldr	r0, [pc, #16]	@ (800e920 <MX_SPI2_Init+0x64>)
 800e90e:	f001 fd8d 	bl	801042c <HAL_SPI_Init>
 800e912:	4603      	mov	r3, r0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d001      	beq.n	800e91c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800e918:	f000 fb4e 	bl	800efb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800e91c:	bf00      	nop
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	200035cc 	.word	0x200035cc
 800e924:	40003800 	.word	0x40003800

0800e928 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b090      	sub	sp, #64	@ 0x40
 800e92c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800e92e:	f107 0318 	add.w	r3, r7, #24
 800e932:	2228      	movs	r2, #40	@ 0x28
 800e934:	2100      	movs	r1, #0
 800e936:	4618      	mov	r0, r3
 800e938:	f004 fd48 	bl	80133cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e93c:	463b      	mov	r3, r7
 800e93e:	2200      	movs	r2, #0
 800e940:	601a      	str	r2, [r3, #0]
 800e942:	605a      	str	r2, [r3, #4]
 800e944:	609a      	str	r2, [r3, #8]
 800e946:	60da      	str	r2, [r3, #12]
 800e948:	611a      	str	r2, [r3, #16]
 800e94a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800e94c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e950:	f7ff fafa 	bl	800df48 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800e954:	2004      	movs	r0, #4
 800e956:	f7ff fadf 	bl	800df18 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = TEC_SCK_Pin|TEC_MISO_Pin|TEC_MOSI_Pin;
 800e95a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800e95e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800e960:	2302      	movs	r3, #2
 800e962:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800e964:	2303      	movs	r3, #3
 800e966:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800e968:	2300      	movs	r3, #0
 800e96a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e96c:	2300      	movs	r3, #0
 800e96e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800e970:	2306      	movs	r3, #6
 800e972:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e974:	463b      	mov	r3, r7
 800e976:	4619      	mov	r1, r3
 800e978:	4814      	ldr	r0, [pc, #80]	@ (800e9cc <MX_SPI3_Init+0xa4>)
 800e97a:	f003 f8d4 	bl	8011b26 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800e97e:	2300      	movs	r3, #0
 800e980:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800e982:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800e986:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800e988:	2300      	movs	r3, #0
 800e98a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800e98c:	2300      	movs	r3, #0
 800e98e:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800e990:	2300      	movs	r3, #0
 800e992:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800e994:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800e99a:	2318      	movs	r3, #24
 800e99c:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 800e9a6:	230a      	movs	r3, #10
 800e9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800e9aa:	f107 0318 	add.w	r3, r7, #24
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	4807      	ldr	r0, [pc, #28]	@ (800e9d0 <MX_SPI3_Init+0xa8>)
 800e9b2:	f003 fc1e 	bl	80121f2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 800e9b6:	2100      	movs	r1, #0
 800e9b8:	4805      	ldr	r0, [pc, #20]	@ (800e9d0 <MX_SPI3_Init+0xa8>)
 800e9ba:	f7ff fb3b 	bl	800e034 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */
  LL_SPI_Enable(SPI3);
 800e9be:	4804      	ldr	r0, [pc, #16]	@ (800e9d0 <MX_SPI3_Init+0xa8>)
 800e9c0:	f7ff fb28 	bl	800e014 <LL_SPI_Enable>
  /* USER CODE END SPI3_Init 2 */

}
 800e9c4:	bf00      	nop
 800e9c6:	3740      	adds	r7, #64	@ 0x40
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	40020800 	.word	0x40020800
 800e9d0:	40003c00 	.word	0x40003c00

0800e9d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b09a      	sub	sp, #104	@ 0x68
 800e9d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800e9da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800e9de:	2200      	movs	r2, #0
 800e9e0:	601a      	str	r2, [r3, #0]
 800e9e2:	605a      	str	r2, [r3, #4]
 800e9e4:	609a      	str	r2, [r3, #8]
 800e9e6:	60da      	str	r2, [r3, #12]
 800e9e8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800e9ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e9ee:	2220      	movs	r2, #32
 800e9f0:	2100      	movs	r1, #0
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f004 fcea 	bl	80133cc <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 800e9f8:	f107 031c 	add.w	r3, r7, #28
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	601a      	str	r2, [r3, #0]
 800ea00:	605a      	str	r2, [r3, #4]
 800ea02:	609a      	str	r2, [r3, #8]
 800ea04:	60da      	str	r2, [r3, #12]
 800ea06:	611a      	str	r2, [r3, #16]
 800ea08:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea0a:	1d3b      	adds	r3, r7, #4
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	601a      	str	r2, [r3, #0]
 800ea10:	605a      	str	r2, [r3, #4]
 800ea12:	609a      	str	r2, [r3, #8]
 800ea14:	60da      	str	r2, [r3, #12]
 800ea16:	611a      	str	r2, [r3, #16]
 800ea18:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800ea1a:	2001      	movs	r0, #1
 800ea1c:	f7ff faac 	bl	800df78 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 800ea20:	2353      	movs	r3, #83	@ 0x53
 800ea22:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800ea26:	2300      	movs	r3, #0
 800ea28:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.Autoreload = 9999;
 800ea2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ea2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800ea30:	2300      	movs	r3, #0
 800ea32:	663b      	str	r3, [r7, #96]	@ 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 800ea34:	2300      	movs	r3, #0
 800ea36:	667b      	str	r3, [r7, #100]	@ 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800ea38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	482f      	ldr	r0, [pc, #188]	@ (800eafc <MX_TIM1_Init+0x128>)
 800ea40:	f003 fc9c 	bl	801237c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800ea44:	482d      	ldr	r0, [pc, #180]	@ (800eafc <MX_TIM1_Init+0x128>)
 800ea46:	f7ff fb08 	bl	800e05a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	482b      	ldr	r0, [pc, #172]	@ (800eafc <MX_TIM1_Init+0x128>)
 800ea4e:	f7ff fb9f 	bl	800e190 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800ea52:	2101      	movs	r1, #1
 800ea54:	4829      	ldr	r0, [pc, #164]	@ (800eafc <MX_TIM1_Init+0x128>)
 800ea56:	f7ff fb57 	bl	800e108 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800ea5a:	2360      	movs	r3, #96	@ 0x60
 800ea5c:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800ea62:	2300      	movs	r3, #0
 800ea64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 800ea66:	2300      	movs	r3, #0
 800ea68:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800ea72:	2300      	movs	r3, #0
 800ea74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800ea76:	2300      	movs	r3, #0
 800ea78:	653b      	str	r3, [r7, #80]	@ 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800ea7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800ea7e:	461a      	mov	r2, r3
 800ea80:	2101      	movs	r1, #1
 800ea82:	481e      	ldr	r0, [pc, #120]	@ (800eafc <MX_TIM1_Init+0x128>)
 800ea84:	f003 fd14 	bl	80124b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 800ea88:	2101      	movs	r1, #1
 800ea8a:	481c      	ldr	r0, [pc, #112]	@ (800eafc <MX_TIM1_Init+0x128>)
 800ea8c:	f7ff faf6 	bl	800e07c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800ea90:	2100      	movs	r1, #0
 800ea92:	481a      	ldr	r0, [pc, #104]	@ (800eafc <MX_TIM1_Init+0x128>)
 800ea94:	f7ff fb91 	bl	800e1ba <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800ea98:	4818      	ldr	r0, [pc, #96]	@ (800eafc <MX_TIM1_Init+0x128>)
 800ea9a:	f7ff fba1 	bl	800e1e0 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800eab0:	2300      	movs	r3, #0
 800eab2:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800eab4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800eab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800eaba:	2300      	movs	r3, #0
 800eabc:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800eabe:	f107 031c 	add.w	r3, r7, #28
 800eac2:	4619      	mov	r1, r3
 800eac4:	480d      	ldr	r0, [pc, #52]	@ (800eafc <MX_TIM1_Init+0x128>)
 800eac6:	f003 fd34 	bl	8012532 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800eaca:	2010      	movs	r0, #16
 800eacc:	f7ff fa24 	bl	800df18 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PE9   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = IR_LED_PWM_Pin;
 800ead0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ead4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800ead6:	2302      	movs	r3, #2
 800ead8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800eada:	2300      	movs	r3, #0
 800eadc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800eade:	2300      	movs	r3, #0
 800eae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800eae2:	2300      	movs	r3, #0
 800eae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800eae6:	2301      	movs	r3, #1
 800eae8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(IR_LED_PWM_GPIO_Port, &GPIO_InitStruct);
 800eaea:	1d3b      	adds	r3, r7, #4
 800eaec:	4619      	mov	r1, r3
 800eaee:	4804      	ldr	r0, [pc, #16]	@ (800eb00 <MX_TIM1_Init+0x12c>)
 800eaf0:	f003 f819 	bl	8011b26 <LL_GPIO_Init>

}
 800eaf4:	bf00      	nop
 800eaf6:	3768      	adds	r7, #104	@ 0x68
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	40010000 	.word	0x40010000
 800eb00:	40021000 	.word	0x40021000

0800eb04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b086      	sub	sp, #24
 800eb08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800eb0a:	1d3b      	adds	r3, r7, #4
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	601a      	str	r2, [r3, #0]
 800eb10:	605a      	str	r2, [r3, #4]
 800eb12:	609a      	str	r2, [r3, #8]
 800eb14:	60da      	str	r2, [r3, #12]
 800eb16:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800eb18:	2002      	movs	r0, #2
 800eb1a:	f7ff fa15 	bl	800df48 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 800eb1e:	2353      	movs	r3, #83	@ 0x53
 800eb20:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800eb22:	2300      	movs	r3, #0
 800eb24:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9999;
 800eb26:	f242 730f 	movw	r3, #9999	@ 0x270f
 800eb2a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800eb30:	1d3b      	adds	r3, r7, #4
 800eb32:	4619      	mov	r1, r3
 800eb34:	480a      	ldr	r0, [pc, #40]	@ (800eb60 <MX_TIM3_Init+0x5c>)
 800eb36:	f003 fc21 	bl	801237c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800eb3a:	4809      	ldr	r0, [pc, #36]	@ (800eb60 <MX_TIM3_Init+0x5c>)
 800eb3c:	f7ff fa8d 	bl	800e05a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800eb40:	2100      	movs	r1, #0
 800eb42:	4807      	ldr	r0, [pc, #28]	@ (800eb60 <MX_TIM3_Init+0x5c>)
 800eb44:	f7ff fb24 	bl	800e190 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800eb48:	2100      	movs	r1, #0
 800eb4a:	4805      	ldr	r0, [pc, #20]	@ (800eb60 <MX_TIM3_Init+0x5c>)
 800eb4c:	f7ff fb35 	bl	800e1ba <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800eb50:	4803      	ldr	r0, [pc, #12]	@ (800eb60 <MX_TIM3_Init+0x5c>)
 800eb52:	f7ff fb45 	bl	800e1e0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800eb56:	bf00      	nop
 800eb58:	3718      	adds	r7, #24
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	40000400 	.word	0x40000400

0800eb64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b08a      	sub	sp, #40	@ 0x28
 800eb68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eb6a:	f107 0320 	add.w	r3, r7, #32
 800eb6e:	2200      	movs	r2, #0
 800eb70:	601a      	str	r2, [r3, #0]
 800eb72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800eb74:	1d3b      	adds	r3, r7, #4
 800eb76:	2200      	movs	r2, #0
 800eb78:	601a      	str	r2, [r3, #0]
 800eb7a:	605a      	str	r2, [r3, #4]
 800eb7c:	609a      	str	r2, [r3, #8]
 800eb7e:	60da      	str	r2, [r3, #12]
 800eb80:	611a      	str	r2, [r3, #16]
 800eb82:	615a      	str	r2, [r3, #20]
 800eb84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800eb86:	4b32      	ldr	r3, [pc, #200]	@ (800ec50 <MX_TIM4_Init+0xec>)
 800eb88:	4a32      	ldr	r2, [pc, #200]	@ (800ec54 <MX_TIM4_Init+0xf0>)
 800eb8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800eb8c:	4b30      	ldr	r3, [pc, #192]	@ (800ec50 <MX_TIM4_Init+0xec>)
 800eb8e:	2200      	movs	r2, #0
 800eb90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eb92:	4b2f      	ldr	r3, [pc, #188]	@ (800ec50 <MX_TIM4_Init+0xec>)
 800eb94:	2200      	movs	r2, #0
 800eb96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800eb98:	4b2d      	ldr	r3, [pc, #180]	@ (800ec50 <MX_TIM4_Init+0xec>)
 800eb9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eb9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eba0:	4b2b      	ldr	r3, [pc, #172]	@ (800ec50 <MX_TIM4_Init+0xec>)
 800eba2:	2200      	movs	r2, #0
 800eba4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eba6:	4b2a      	ldr	r3, [pc, #168]	@ (800ec50 <MX_TIM4_Init+0xec>)
 800eba8:	2200      	movs	r2, #0
 800ebaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800ebac:	4828      	ldr	r0, [pc, #160]	@ (800ec50 <MX_TIM4_Init+0xec>)
 800ebae:	f002 fa0f 	bl	8010fd0 <HAL_TIM_OC_Init>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d001      	beq.n	800ebbc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800ebb8:	f000 f9fe 	bl	800efb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800ebc4:	f107 0320 	add.w	r3, r7, #32
 800ebc8:	4619      	mov	r1, r3
 800ebca:	4821      	ldr	r0, [pc, #132]	@ (800ec50 <MX_TIM4_Init+0xec>)
 800ebcc:	f002 fd08 	bl	80115e0 <HAL_TIMEx_MasterConfigSynchronization>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d001      	beq.n	800ebda <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800ebd6:	f000 f9ef 	bl	800efb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ebea:	1d3b      	adds	r3, r7, #4
 800ebec:	2200      	movs	r2, #0
 800ebee:	4619      	mov	r1, r3
 800ebf0:	4817      	ldr	r0, [pc, #92]	@ (800ec50 <MX_TIM4_Init+0xec>)
 800ebf2:	f002 fa3d 	bl	8011070 <HAL_TIM_OC_ConfigChannel>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d001      	beq.n	800ec00 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800ebfc:	f000 f9dc 	bl	800efb8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ec00:	1d3b      	adds	r3, r7, #4
 800ec02:	2204      	movs	r2, #4
 800ec04:	4619      	mov	r1, r3
 800ec06:	4812      	ldr	r0, [pc, #72]	@ (800ec50 <MX_TIM4_Init+0xec>)
 800ec08:	f002 fa32 	bl	8011070 <HAL_TIM_OC_ConfigChannel>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d001      	beq.n	800ec16 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800ec12:	f000 f9d1 	bl	800efb8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800ec16:	1d3b      	adds	r3, r7, #4
 800ec18:	2208      	movs	r2, #8
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	480c      	ldr	r0, [pc, #48]	@ (800ec50 <MX_TIM4_Init+0xec>)
 800ec1e:	f002 fa27 	bl	8011070 <HAL_TIM_OC_ConfigChannel>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d001      	beq.n	800ec2c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 800ec28:	f000 f9c6 	bl	800efb8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ec2c:	1d3b      	adds	r3, r7, #4
 800ec2e:	220c      	movs	r2, #12
 800ec30:	4619      	mov	r1, r3
 800ec32:	4807      	ldr	r0, [pc, #28]	@ (800ec50 <MX_TIM4_Init+0xec>)
 800ec34:	f002 fa1c 	bl	8011070 <HAL_TIM_OC_ConfigChannel>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d001      	beq.n	800ec42 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800ec3e:	f000 f9bb 	bl	800efb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800ec42:	4803      	ldr	r0, [pc, #12]	@ (800ec50 <MX_TIM4_Init+0xec>)
 800ec44:	f000 fa94 	bl	800f170 <HAL_TIM_MspPostInit>

}
 800ec48:	bf00      	nop
 800ec4a:	3728      	adds	r7, #40	@ 0x28
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}
 800ec50:	20003624 	.word	0x20003624
 800ec54:	40000800 	.word	0x40000800

0800ec58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b08e      	sub	sp, #56	@ 0x38
 800ec5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800ec5e:	f107 031c 	add.w	r3, r7, #28
 800ec62:	2200      	movs	r2, #0
 800ec64:	601a      	str	r2, [r3, #0]
 800ec66:	605a      	str	r2, [r3, #4]
 800ec68:	609a      	str	r2, [r3, #8]
 800ec6a:	60da      	str	r2, [r3, #12]
 800ec6c:	611a      	str	r2, [r3, #16]
 800ec6e:	615a      	str	r2, [r3, #20]
 800ec70:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec72:	1d3b      	adds	r3, r7, #4
 800ec74:	2200      	movs	r2, #0
 800ec76:	601a      	str	r2, [r3, #0]
 800ec78:	605a      	str	r2, [r3, #4]
 800ec7a:	609a      	str	r2, [r3, #8]
 800ec7c:	60da      	str	r2, [r3, #12]
 800ec7e:	611a      	str	r2, [r3, #16]
 800ec80:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800ec82:	2010      	movs	r0, #16
 800ec84:	f7ff f978 	bl	800df78 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800ec88:	2001      	movs	r0, #1
 800ec8a:	f7ff f945 	bl	800df18 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = EXP_RS485_TX_Pin|EXP_RS485_RX_Pin;
 800ec8e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800ec92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800ec94:	2302      	movs	r3, #2
 800ec96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800ec98:	2303      	movs	r3, #3
 800ec9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800eca0:	2300      	movs	r3, #0
 800eca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800eca4:	2307      	movs	r3, #7
 800eca6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eca8:	1d3b      	adds	r3, r7, #4
 800ecaa:	4619      	mov	r1, r3
 800ecac:	4818      	ldr	r0, [pc, #96]	@ (800ed10 <MX_USART1_UART_Init+0xb8>)
 800ecae:	f002 ff3a 	bl	8011b26 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800ecb2:	f7fe fdd1 	bl	800d858 <__NVIC_GetPriorityGrouping>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2200      	movs	r2, #0
 800ecba:	2100      	movs	r1, #0
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7fe fe21 	bl	800d904 <NVIC_EncodePriority>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	2025      	movs	r0, #37	@ 0x25
 800ecc8:	f7fe fdf2 	bl	800d8b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800eccc:	2025      	movs	r0, #37	@ 0x25
 800ecce:	f7fe fdd1 	bl	800d874 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800ecd2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800ecd6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800ece0:	2300      	movs	r3, #0
 800ece2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800ece4:	230c      	movs	r3, #12
 800ece6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800ece8:	2300      	movs	r3, #0
 800ecea:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800ecec:	2300      	movs	r3, #0
 800ecee:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800ecf0:	f107 031c 	add.w	r3, r7, #28
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	4807      	ldr	r0, [pc, #28]	@ (800ed14 <MX_USART1_UART_Init+0xbc>)
 800ecf8:	f004 f86a 	bl	8012dd0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800ecfc:	4805      	ldr	r0, [pc, #20]	@ (800ed14 <MX_USART1_UART_Init+0xbc>)
 800ecfe:	f7ff fa8f 	bl	800e220 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800ed02:	4804      	ldr	r0, [pc, #16]	@ (800ed14 <MX_USART1_UART_Init+0xbc>)
 800ed04:	f7ff fa7c 	bl	800e200 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ed08:	bf00      	nop
 800ed0a:	3738      	adds	r7, #56	@ 0x38
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}
 800ed10:	40020000 	.word	0x40020000
 800ed14:	40011000 	.word	0x40011000

0800ed18 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b08e      	sub	sp, #56	@ 0x38
 800ed1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800ed1e:	f107 031c 	add.w	r3, r7, #28
 800ed22:	2200      	movs	r2, #0
 800ed24:	601a      	str	r2, [r3, #0]
 800ed26:	605a      	str	r2, [r3, #4]
 800ed28:	609a      	str	r2, [r3, #8]
 800ed2a:	60da      	str	r2, [r3, #12]
 800ed2c:	611a      	str	r2, [r3, #16]
 800ed2e:	615a      	str	r2, [r3, #20]
 800ed30:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed32:	1d3b      	adds	r3, r7, #4
 800ed34:	2200      	movs	r2, #0
 800ed36:	601a      	str	r2, [r3, #0]
 800ed38:	605a      	str	r2, [r3, #4]
 800ed3a:	609a      	str	r2, [r3, #8]
 800ed3c:	60da      	str	r2, [r3, #12]
 800ed3e:	611a      	str	r2, [r3, #16]
 800ed40:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800ed42:	2020      	movs	r0, #32
 800ed44:	f7ff f918 	bl	800df78 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800ed48:	2004      	movs	r0, #4
 800ed4a:	f7ff f8e5 	bl	800df18 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = EXP_UART_TX_Pin|EXP_UART_RX_Pin;
 800ed4e:	23c0      	movs	r3, #192	@ 0xc0
 800ed50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800ed52:	2302      	movs	r3, #2
 800ed54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800ed56:	2303      	movs	r3, #3
 800ed58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800ed62:	2308      	movs	r3, #8
 800ed64:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ed66:	1d3b      	adds	r3, r7, #4
 800ed68:	4619      	mov	r1, r3
 800ed6a:	4819      	ldr	r0, [pc, #100]	@ (800edd0 <MX_USART6_UART_Init+0xb8>)
 800ed6c:	f002 fedb 	bl	8011b26 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800ed70:	f7fe fd72 	bl	800d858 <__NVIC_GetPriorityGrouping>
 800ed74:	4603      	mov	r3, r0
 800ed76:	2200      	movs	r2, #0
 800ed78:	2100      	movs	r1, #0
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7fe fdc2 	bl	800d904 <NVIC_EncodePriority>
 800ed80:	4603      	mov	r3, r0
 800ed82:	4619      	mov	r1, r3
 800ed84:	2047      	movs	r0, #71	@ 0x47
 800ed86:	f7fe fd93 	bl	800d8b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800ed8a:	2047      	movs	r0, #71	@ 0x47
 800ed8c:	f7fe fd72 	bl	800d874 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800ed90:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800ed94:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800ed96:	2300      	movs	r3, #0
 800ed98:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800eda2:	230c      	movs	r3, #12
 800eda4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800eda6:	2300      	movs	r3, #0
 800eda8:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800edaa:	2300      	movs	r3, #0
 800edac:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800edae:	f107 031c 	add.w	r3, r7, #28
 800edb2:	4619      	mov	r1, r3
 800edb4:	4807      	ldr	r0, [pc, #28]	@ (800edd4 <MX_USART6_UART_Init+0xbc>)
 800edb6:	f004 f80b 	bl	8012dd0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800edba:	4806      	ldr	r0, [pc, #24]	@ (800edd4 <MX_USART6_UART_Init+0xbc>)
 800edbc:	f7ff fa30 	bl	800e220 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800edc0:	4804      	ldr	r0, [pc, #16]	@ (800edd4 <MX_USART6_UART_Init+0xbc>)
 800edc2:	f7ff fa1d 	bl	800e200 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800edc6:	bf00      	nop
 800edc8:	3738      	adds	r7, #56	@ 0x38
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	40020800 	.word	0x40020800
 800edd4:	40011400 	.word	0x40011400

0800edd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800eddc:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800ede0:	f7ff f89a 	bl	800df18 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800ede4:	f7fe fd38 	bl	800d858 <__NVIC_GetPriorityGrouping>
 800ede8:	4603      	mov	r3, r0
 800edea:	2200      	movs	r2, #0
 800edec:	2100      	movs	r1, #0
 800edee:	4618      	mov	r0, r3
 800edf0:	f7fe fd88 	bl	800d904 <NVIC_EncodePriority>
 800edf4:	4603      	mov	r3, r0
 800edf6:	4619      	mov	r1, r3
 800edf8:	2038      	movs	r0, #56	@ 0x38
 800edfa:	f7fe fd59 	bl	800d8b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800edfe:	2038      	movs	r0, #56	@ 0x38
 800ee00:	f7fe fd38 	bl	800d874 <__NVIC_EnableIRQ>

}
 800ee04:	bf00      	nop
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b086      	sub	sp, #24
 800ee0c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee0e:	463b      	mov	r3, r7
 800ee10:	2200      	movs	r2, #0
 800ee12:	601a      	str	r2, [r3, #0]
 800ee14:	605a      	str	r2, [r3, #4]
 800ee16:	609a      	str	r2, [r3, #8]
 800ee18:	60da      	str	r2, [r3, #12]
 800ee1a:	611a      	str	r2, [r3, #16]
 800ee1c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800ee1e:	2010      	movs	r0, #16
 800ee20:	f7ff f87a 	bl	800df18 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800ee24:	2004      	movs	r0, #4
 800ee26:	f7ff f877 	bl	800df18 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800ee2a:	2080      	movs	r0, #128	@ 0x80
 800ee2c:	f7ff f874 	bl	800df18 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800ee30:	2001      	movs	r0, #1
 800ee32:	f7ff f871 	bl	800df18 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800ee36:	2002      	movs	r0, #2
 800ee38:	f7ff f86e 	bl	800df18 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800ee3c:	2008      	movs	r0, #8
 800ee3e:	f7ff f86b 	bl	800df18 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, TEC_3_SWEN_Pin|TEC_4_SWEN_Pin|TEC_2_SWEN_Pin|TEC_1_SWEN_Pin
 800ee42:	f64f 417c 	movw	r1, #64636	@ 0xfc7c
 800ee46:	4857      	ldr	r0, [pc, #348]	@ (800efa4 <MX_GPIO_Init+0x19c>)
 800ee48:	f7ff fa0e 	bl	800e268 <LL_GPIO_ResetOutputPin>
                          |TEC_1_EN_Pin|LED_G_Pin|LED_B_Pin|LASER_DAC_CS_Pin
                          |LASER_SW_EXT_CS_Pin|LASER_SW_INT_CS_Pin|LASER_DAC_LATCH_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, TEC_2_EN_Pin|TEC_3_EN_Pin|TEC_4_EN_Pin|PHOTO_ADC_EOC_Pin);
 800ee4c:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 800ee50:	4855      	ldr	r0, [pc, #340]	@ (800efa8 <MX_GPIO_Init+0x1a0>)
 800ee52:	f7ff fa09 	bl	800e268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800ee56:	2102      	movs	r1, #2
 800ee58:	4854      	ldr	r0, [pc, #336]	@ (800efac <MX_GPIO_Init+0x1a4>)
 800ee5a:	f7ff fa05 	bl	800e268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, EXP_RS485_NRE_Pin|PHOTO_PD_CS_Pin|PHOTO_ADC_CS_Pin|PHOTO_ADC_CONV_Pin
 800ee5e:	f640 7134 	movw	r1, #3892	@ 0xf34
 800ee62:	4853      	ldr	r0, [pc, #332]	@ (800efb0 <MX_GPIO_Init+0x1a8>)
 800ee64:	f7ff fa00 	bl	800e268 <LL_GPIO_ResetOutputPin>
                          |FRAM_CS_Pin|EF_5_EN_Pin|TEC_ADC_CS_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, SENSOR2_EN_Pin|SENSOR1_EN_Pin);
 800ee68:	2130      	movs	r1, #48	@ 0x30
 800ee6a:	4852      	ldr	r0, [pc, #328]	@ (800efb4 <MX_GPIO_Init+0x1ac>)
 800ee6c:	f7ff f9fc 	bl	800e268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, EXP_RS485_DE_Pin|TEC_4_CS_Pin|TEC_3_CS_Pin);
 800ee70:	f44f 5198 	mov.w	r1, #4864	@ 0x1300
 800ee74:	484f      	ldr	r0, [pc, #316]	@ (800efb4 <MX_GPIO_Init+0x1ac>)
 800ee76:	f7ff f9e9 	bl	800e24c <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, TEC_2_CS_Pin|TEC_1_CS_Pin);
 800ee7a:	2103      	movs	r1, #3
 800ee7c:	4849      	ldr	r0, [pc, #292]	@ (800efa4 <MX_GPIO_Init+0x19c>)
 800ee7e:	f7ff f9e5 	bl	800e24c <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = TEC_3_SWEN_Pin|TEC_1_SWEN_Pin;
 800ee82:	2324      	movs	r3, #36	@ 0x24
 800ee84:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800ee86:	2301      	movs	r3, #1
 800ee88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800ee92:	2302      	movs	r3, #2
 800ee94:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ee96:	463b      	mov	r3, r7
 800ee98:	4619      	mov	r1, r3
 800ee9a:	4842      	ldr	r0, [pc, #264]	@ (800efa4 <MX_GPIO_Init+0x19c>)
 800ee9c:	f002 fe43 	bl	8011b26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_4_SWEN_Pin|TEC_2_SWEN_Pin|TEC_1_EN_Pin|LED_G_Pin
 800eea0:	f64f 435b 	movw	r3, #64603	@ 0xfc5b
 800eea4:	603b      	str	r3, [r7, #0]
                          |LED_B_Pin|LASER_DAC_CS_Pin|LASER_SW_EXT_CS_Pin|LASER_SW_INT_CS_Pin
                          |LASER_DAC_LATCH_Pin|TEC_2_CS_Pin|TEC_1_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800eea6:	2301      	movs	r3, #1
 800eea8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800eeb6:	463b      	mov	r3, r7
 800eeb8:	4619      	mov	r1, r3
 800eeba:	483a      	ldr	r0, [pc, #232]	@ (800efa4 <MX_GPIO_Init+0x19c>)
 800eebc:	f002 fe33 	bl	8011b26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_2_EN_Pin|TEC_3_EN_Pin|TEC_4_EN_Pin|PHOTO_ADC_EOC_Pin;
 800eec0:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 800eec4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800eec6:	2301      	movs	r3, #1
 800eec8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800eeca:	2300      	movs	r3, #0
 800eecc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800eece:	2300      	movs	r3, #0
 800eed0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800eed2:	2300      	movs	r3, #0
 800eed4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800eed6:	463b      	mov	r3, r7
 800eed8:	4619      	mov	r1, r3
 800eeda:	4833      	ldr	r0, [pc, #204]	@ (800efa8 <MX_GPIO_Init+0x1a0>)
 800eedc:	f002 fe23 	bl	8011b26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin;
 800eee0:	2302      	movs	r3, #2
 800eee2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800eee4:	2301      	movs	r3, #1
 800eee6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800eee8:	2300      	movs	r3, #0
 800eeea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800eeec:	2300      	movs	r3, #0
 800eeee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800eef0:	2300      	movs	r3, #0
 800eef2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(WD_DONE_GPIO_Port, &GPIO_InitStruct);
 800eef4:	463b      	mov	r3, r7
 800eef6:	4619      	mov	r1, r3
 800eef8:	482c      	ldr	r0, [pc, #176]	@ (800efac <MX_GPIO_Init+0x1a4>)
 800eefa:	f002 fe14 	bl	8011b26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_12_AUX_Pin;
 800eefe:	2380      	movs	r3, #128	@ 0x80
 800ef00:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800ef02:	2300      	movs	r3, #0
 800ef04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800ef06:	2300      	movs	r3, #0
 800ef08:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_12_AUX_GPIO_Port, &GPIO_InitStruct);
 800ef0a:	463b      	mov	r3, r7
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	4825      	ldr	r0, [pc, #148]	@ (800efa4 <MX_GPIO_Init+0x19c>)
 800ef10:	f002 fe09 	bl	8011b26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EXP_RS485_DE_Pin|SENSOR2_EN_Pin|SENSOR1_EN_Pin|TEC_4_CS_Pin
 800ef14:	f241 3330 	movw	r3, #4912	@ 0x1330
 800ef18:	603b      	str	r3, [r7, #0]
                          |TEC_3_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800ef22:	2300      	movs	r3, #0
 800ef24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800ef26:	2300      	movs	r3, #0
 800ef28:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ef2a:	463b      	mov	r3, r7
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	4821      	ldr	r0, [pc, #132]	@ (800efb4 <MX_GPIO_Init+0x1ac>)
 800ef30:	f002 fdf9 	bl	8011b26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EXP_RS485_NRE_Pin|PHOTO_PD_CS_Pin|PHOTO_ADC_CS_Pin|PHOTO_ADC_CONV_Pin
 800ef34:	f640 7334 	movw	r3, #3892	@ 0xf34
 800ef38:	603b      	str	r3, [r7, #0]
                          |FRAM_CS_Pin|EF_5_EN_Pin|TEC_ADC_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800ef42:	2300      	movs	r3, #0
 800ef44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800ef46:	2300      	movs	r3, #0
 800ef48:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ef4a:	463b      	mov	r3, r7
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	4818      	ldr	r0, [pc, #96]	@ (800efb0 <MX_GPIO_Init+0x1a8>)
 800ef50:	f002 fde9 	bl	8011b26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IRQ1_Pin;
 800ef54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ef58:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IRQ1_GPIO_Port, &GPIO_InitStruct);
 800ef62:	463b      	mov	r3, r7
 800ef64:	4619      	mov	r1, r3
 800ef66:	4810      	ldr	r0, [pc, #64]	@ (800efa8 <MX_GPIO_Init+0x1a0>)
 800ef68:	f002 fddd 	bl	8011b26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IRQ0_Pin;
 800ef6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ef70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800ef72:	2300      	movs	r3, #0
 800ef74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800ef76:	2300      	movs	r3, #0
 800ef78:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IRQ0_GPIO_Port, &GPIO_InitStruct);
 800ef7a:	463b      	mov	r3, r7
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	480b      	ldr	r0, [pc, #44]	@ (800efac <MX_GPIO_Init+0x1a4>)
 800ef80:	f002 fdd1 	bl	8011b26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FF_5_AUX_Pin;
 800ef84:	2308      	movs	r3, #8
 800ef86:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FF_5_AUX_GPIO_Port, &GPIO_InitStruct);
 800ef90:	463b      	mov	r3, r7
 800ef92:	4619      	mov	r1, r3
 800ef94:	4806      	ldr	r0, [pc, #24]	@ (800efb0 <MX_GPIO_Init+0x1a8>)
 800ef96:	f002 fdc6 	bl	8011b26 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800ef9a:	bf00      	nop
 800ef9c:	3718      	adds	r7, #24
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	40021000 	.word	0x40021000
 800efa8:	40020800 	.word	0x40020800
 800efac:	40020000 	.word	0x40020000
 800efb0:	40020c00 	.word	0x40020c00
 800efb4:	40020400 	.word	0x40020400

0800efb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800efb8:	b480      	push	{r7}
 800efba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800efbc:	b672      	cpsid	i
}
 800efbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800efc0:	bf00      	nop
 800efc2:	e7fd      	b.n	800efc0 <Error_Handler+0x8>

0800efc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b083      	sub	sp, #12
 800efc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800efca:	2300      	movs	r3, #0
 800efcc:	607b      	str	r3, [r7, #4]
 800efce:	4b10      	ldr	r3, [pc, #64]	@ (800f010 <HAL_MspInit+0x4c>)
 800efd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efd2:	4a0f      	ldr	r2, [pc, #60]	@ (800f010 <HAL_MspInit+0x4c>)
 800efd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800efd8:	6453      	str	r3, [r2, #68]	@ 0x44
 800efda:	4b0d      	ldr	r3, [pc, #52]	@ (800f010 <HAL_MspInit+0x4c>)
 800efdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800efe2:	607b      	str	r3, [r7, #4]
 800efe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800efe6:	2300      	movs	r3, #0
 800efe8:	603b      	str	r3, [r7, #0]
 800efea:	4b09      	ldr	r3, [pc, #36]	@ (800f010 <HAL_MspInit+0x4c>)
 800efec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efee:	4a08      	ldr	r2, [pc, #32]	@ (800f010 <HAL_MspInit+0x4c>)
 800eff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eff4:	6413      	str	r3, [r2, #64]	@ 0x40
 800eff6:	4b06      	ldr	r3, [pc, #24]	@ (800f010 <HAL_MspInit+0x4c>)
 800eff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800effa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800effe:	603b      	str	r3, [r7, #0]
 800f000:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f002:	bf00      	nop
 800f004:	370c      	adds	r7, #12
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr
 800f00e:	bf00      	nop
 800f010:	40023800 	.word	0x40023800

0800f014 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b08a      	sub	sp, #40	@ 0x28
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f01c:	f107 0314 	add.w	r3, r7, #20
 800f020:	2200      	movs	r2, #0
 800f022:	601a      	str	r2, [r3, #0]
 800f024:	605a      	str	r2, [r3, #4]
 800f026:	609a      	str	r2, [r3, #8]
 800f028:	60da      	str	r2, [r3, #12]
 800f02a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4a17      	ldr	r2, [pc, #92]	@ (800f090 <HAL_ADC_MspInit+0x7c>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d127      	bne.n	800f086 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800f036:	2300      	movs	r3, #0
 800f038:	613b      	str	r3, [r7, #16]
 800f03a:	4b16      	ldr	r3, [pc, #88]	@ (800f094 <HAL_ADC_MspInit+0x80>)
 800f03c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f03e:	4a15      	ldr	r2, [pc, #84]	@ (800f094 <HAL_ADC_MspInit+0x80>)
 800f040:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800f044:	6453      	str	r3, [r2, #68]	@ 0x44
 800f046:	4b13      	ldr	r3, [pc, #76]	@ (800f094 <HAL_ADC_MspInit+0x80>)
 800f048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f04a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f04e:	613b      	str	r3, [r7, #16]
 800f050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f052:	2300      	movs	r3, #0
 800f054:	60fb      	str	r3, [r7, #12]
 800f056:	4b0f      	ldr	r3, [pc, #60]	@ (800f094 <HAL_ADC_MspInit+0x80>)
 800f058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f05a:	4a0e      	ldr	r2, [pc, #56]	@ (800f094 <HAL_ADC_MspInit+0x80>)
 800f05c:	f043 0301 	orr.w	r3, r3, #1
 800f060:	6313      	str	r3, [r2, #48]	@ 0x30
 800f062:	4b0c      	ldr	r3, [pc, #48]	@ (800f094 <HAL_ADC_MspInit+0x80>)
 800f064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f066:	f003 0301 	and.w	r3, r3, #1
 800f06a:	60fb      	str	r3, [r7, #12]
 800f06c:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA2     ------> ADC3_IN2
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800f06e:	230c      	movs	r3, #12
 800f070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f072:	2303      	movs	r3, #3
 800f074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f076:	2300      	movs	r3, #0
 800f078:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f07a:	f107 0314 	add.w	r3, r7, #20
 800f07e:	4619      	mov	r1, r3
 800f080:	4805      	ldr	r0, [pc, #20]	@ (800f098 <HAL_ADC_MspInit+0x84>)
 800f082:	f001 f837 	bl	80100f4 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 800f086:	bf00      	nop
 800f088:	3728      	adds	r7, #40	@ 0x28
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	40012200 	.word	0x40012200
 800f094:	40023800 	.word	0x40023800
 800f098:	40020000 	.word	0x40020000

0800f09c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b08a      	sub	sp, #40	@ 0x28
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f0a4:	f107 0314 	add.w	r3, r7, #20
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	601a      	str	r2, [r3, #0]
 800f0ac:	605a      	str	r2, [r3, #4]
 800f0ae:	609a      	str	r2, [r3, #8]
 800f0b0:	60da      	str	r2, [r3, #12]
 800f0b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4a19      	ldr	r2, [pc, #100]	@ (800f120 <HAL_SPI_MspInit+0x84>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d12c      	bne.n	800f118 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800f0be:	2300      	movs	r3, #0
 800f0c0:	613b      	str	r3, [r7, #16]
 800f0c2:	4b18      	ldr	r3, [pc, #96]	@ (800f124 <HAL_SPI_MspInit+0x88>)
 800f0c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0c6:	4a17      	ldr	r2, [pc, #92]	@ (800f124 <HAL_SPI_MspInit+0x88>)
 800f0c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f0cc:	6413      	str	r3, [r2, #64]	@ 0x40
 800f0ce:	4b15      	ldr	r3, [pc, #84]	@ (800f124 <HAL_SPI_MspInit+0x88>)
 800f0d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f0d6:	613b      	str	r3, [r7, #16]
 800f0d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f0da:	2300      	movs	r3, #0
 800f0dc:	60fb      	str	r3, [r7, #12]
 800f0de:	4b11      	ldr	r3, [pc, #68]	@ (800f124 <HAL_SPI_MspInit+0x88>)
 800f0e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0e2:	4a10      	ldr	r2, [pc, #64]	@ (800f124 <HAL_SPI_MspInit+0x88>)
 800f0e4:	f043 0302 	orr.w	r3, r3, #2
 800f0e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800f0ea:	4b0e      	ldr	r3, [pc, #56]	@ (800f124 <HAL_SPI_MspInit+0x88>)
 800f0ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0ee:	f003 0302 	and.w	r3, r3, #2
 800f0f2:	60fb      	str	r3, [r7, #12]
 800f0f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800f0f6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800f0fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0fc:	2302      	movs	r3, #2
 800f0fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f100:	2300      	movs	r3, #0
 800f102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f104:	2303      	movs	r3, #3
 800f106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f108:	2305      	movs	r3, #5
 800f10a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f10c:	f107 0314 	add.w	r3, r7, #20
 800f110:	4619      	mov	r1, r3
 800f112:	4805      	ldr	r0, [pc, #20]	@ (800f128 <HAL_SPI_MspInit+0x8c>)
 800f114:	f000 ffee 	bl	80100f4 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800f118:	bf00      	nop
 800f11a:	3728      	adds	r7, #40	@ 0x28
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}
 800f120:	40003800 	.word	0x40003800
 800f124:	40023800 	.word	0x40023800
 800f128:	40020400 	.word	0x40020400

0800f12c <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b085      	sub	sp, #20
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	4a0b      	ldr	r2, [pc, #44]	@ (800f168 <HAL_TIM_OC_MspInit+0x3c>)
 800f13a:	4293      	cmp	r3, r2
 800f13c:	d10d      	bne.n	800f15a <HAL_TIM_OC_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800f13e:	2300      	movs	r3, #0
 800f140:	60fb      	str	r3, [r7, #12]
 800f142:	4b0a      	ldr	r3, [pc, #40]	@ (800f16c <HAL_TIM_OC_MspInit+0x40>)
 800f144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f146:	4a09      	ldr	r2, [pc, #36]	@ (800f16c <HAL_TIM_OC_MspInit+0x40>)
 800f148:	f043 0304 	orr.w	r3, r3, #4
 800f14c:	6413      	str	r3, [r2, #64]	@ 0x40
 800f14e:	4b07      	ldr	r3, [pc, #28]	@ (800f16c <HAL_TIM_OC_MspInit+0x40>)
 800f150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f152:	f003 0304 	and.w	r3, r3, #4
 800f156:	60fb      	str	r3, [r7, #12]
 800f158:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800f15a:	bf00      	nop
 800f15c:	3714      	adds	r7, #20
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr
 800f166:	bf00      	nop
 800f168:	40000800 	.word	0x40000800
 800f16c:	40023800 	.word	0x40023800

0800f170 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b088      	sub	sp, #32
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f178:	f107 030c 	add.w	r3, r7, #12
 800f17c:	2200      	movs	r2, #0
 800f17e:	601a      	str	r2, [r3, #0]
 800f180:	605a      	str	r2, [r3, #4]
 800f182:	609a      	str	r2, [r3, #8]
 800f184:	60da      	str	r2, [r3, #12]
 800f186:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	4a12      	ldr	r2, [pc, #72]	@ (800f1d8 <HAL_TIM_MspPostInit+0x68>)
 800f18e:	4293      	cmp	r3, r2
 800f190:	d11e      	bne.n	800f1d0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f192:	2300      	movs	r3, #0
 800f194:	60bb      	str	r3, [r7, #8]
 800f196:	4b11      	ldr	r3, [pc, #68]	@ (800f1dc <HAL_TIM_MspPostInit+0x6c>)
 800f198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f19a:	4a10      	ldr	r2, [pc, #64]	@ (800f1dc <HAL_TIM_MspPostInit+0x6c>)
 800f19c:	f043 0308 	orr.w	r3, r3, #8
 800f1a0:	6313      	str	r3, [r2, #48]	@ 0x30
 800f1a2:	4b0e      	ldr	r3, [pc, #56]	@ (800f1dc <HAL_TIM_MspPostInit+0x6c>)
 800f1a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1a6:	f003 0308 	and.w	r3, r3, #8
 800f1aa:	60bb      	str	r3, [r7, #8]
 800f1ac:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800f1ae:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800f1b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1b4:	2302      	movs	r3, #2
 800f1b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800f1c0:	2302      	movs	r3, #2
 800f1c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f1c4:	f107 030c 	add.w	r3, r7, #12
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	4805      	ldr	r0, [pc, #20]	@ (800f1e0 <HAL_TIM_MspPostInit+0x70>)
 800f1cc:	f000 ff92 	bl	80100f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800f1d0:	bf00      	nop
 800f1d2:	3720      	adds	r7, #32
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	40000800 	.word	0x40000800
 800f1dc:	40023800 	.word	0x40023800
 800f1e0:	40020c00 	.word	0x40020c00

0800f1e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800f1e8:	bf00      	nop
 800f1ea:	e7fd      	b.n	800f1e8 <NMI_Handler+0x4>

0800f1ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f1f0:	bf00      	nop
 800f1f2:	e7fd      	b.n	800f1f0 <HardFault_Handler+0x4>

0800f1f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f1f8:	bf00      	nop
 800f1fa:	e7fd      	b.n	800f1f8 <MemManage_Handler+0x4>

0800f1fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f200:	bf00      	nop
 800f202:	e7fd      	b.n	800f200 <BusFault_Handler+0x4>

0800f204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f204:	b480      	push	{r7}
 800f206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f208:	bf00      	nop
 800f20a:	e7fd      	b.n	800f208 <UsageFault_Handler+0x4>

0800f20c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800f20c:	b480      	push	{r7}
 800f20e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800f210:	bf00      	nop
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr

0800f21a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f21a:	b480      	push	{r7}
 800f21c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f21e:	bf00      	nop
 800f220:	46bd      	mov	sp, r7
 800f222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f226:	4770      	bx	lr

0800f228 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800f228:	b480      	push	{r7}
 800f22a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800f22c:	bf00      	nop
 800f22e:	46bd      	mov	sp, r7
 800f230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f234:	4770      	bx	lr
	...

0800f238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	g_systick_count++;
 800f23c:	4b05      	ldr	r3, [pc, #20]	@ (800f254 <SysTick_Handler+0x1c>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	3301      	adds	r3, #1
 800f242:	4a04      	ldr	r2, [pc, #16]	@ (800f254 <SysTick_Handler+0x1c>)
 800f244:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 800f246:	f003 ff0f 	bl	8013068 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f24a:	f000 fbeb 	bl	800fa24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800f24e:	bf00      	nop
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	2000366c 	.word	0x2000366c

0800f258 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
	I2C_event_IRQ();
 800f25c:	f7f9 fc88 	bl	8008b70 <I2C_event_IRQ>
  /* USER CODE END I2C2_EV_IRQn 0 */
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800f260:	bf00      	nop
 800f262:	bd80      	pop	{r7, pc}

0800f264 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */
	I2C_error_IRQ();
 800f268:	f7f9 fd8a 	bl	8008d80 <I2C_error_IRQ>
  /* USER CODE END I2C2_ER_IRQn 0 */
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800f26c:	bf00      	nop
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	UART_Ring_ISR(USART1);
 800f274:	4802      	ldr	r0, [pc, #8]	@ (800f280 <USART1_IRQHandler+0x10>)
 800f276:	f7fa f8cd 	bl	8009414 <UART_Ring_ISR>
  /* USER CODE END USART1_IRQn 1 */
}
 800f27a:	bf00      	nop
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	40011000 	.word	0x40011000

0800f284 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800f284:	b480      	push	{r7}
 800f286:	af00      	add	r7, sp, #0

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800f288:	bf00      	nop
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr
	...

0800f294 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */
	UART_Ring_ISR(USART6);
 800f298:	4802      	ldr	r0, [pc, #8]	@ (800f2a4 <USART6_IRQHandler+0x10>)
 800f29a:	f7fa f8bb 	bl	8009414 <UART_Ring_ISR>
  /* USER CODE END USART6_IRQn 1 */
}
 800f29e:	bf00      	nop
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	40011400 	.word	0x40011400

0800f2a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b086      	sub	sp, #24
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f2b0:	4a14      	ldr	r2, [pc, #80]	@ (800f304 <_sbrk+0x5c>)
 800f2b2:	4b15      	ldr	r3, [pc, #84]	@ (800f308 <_sbrk+0x60>)
 800f2b4:	1ad3      	subs	r3, r2, r3
 800f2b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f2bc:	4b13      	ldr	r3, [pc, #76]	@ (800f30c <_sbrk+0x64>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d102      	bne.n	800f2ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f2c4:	4b11      	ldr	r3, [pc, #68]	@ (800f30c <_sbrk+0x64>)
 800f2c6:	4a12      	ldr	r2, [pc, #72]	@ (800f310 <_sbrk+0x68>)
 800f2c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f2ca:	4b10      	ldr	r3, [pc, #64]	@ (800f30c <_sbrk+0x64>)
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	693a      	ldr	r2, [r7, #16]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d207      	bcs.n	800f2e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f2d8:	f004 f880 	bl	80133dc <__errno>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	220c      	movs	r2, #12
 800f2e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800f2e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2e6:	e009      	b.n	800f2fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f2e8:	4b08      	ldr	r3, [pc, #32]	@ (800f30c <_sbrk+0x64>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f2ee:	4b07      	ldr	r3, [pc, #28]	@ (800f30c <_sbrk+0x64>)
 800f2f0:	681a      	ldr	r2, [r3, #0]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	4413      	add	r3, r2
 800f2f6:	4a05      	ldr	r2, [pc, #20]	@ (800f30c <_sbrk+0x64>)
 800f2f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3718      	adds	r7, #24
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	20020000 	.word	0x20020000
 800f308:	00000400 	.word	0x00000400
 800f30c:	20003670 	.word	0x20003670
 800f310:	200039e8 	.word	0x200039e8

0800f314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f314:	b480      	push	{r7}
 800f316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f318:	4b06      	ldr	r3, [pc, #24]	@ (800f334 <SystemInit+0x20>)
 800f31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f31e:	4a05      	ldr	r2, [pc, #20]	@ (800f334 <SystemInit+0x20>)
 800f320:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f324:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800f328:	bf00      	nop
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	e000ed00 	.word	0xe000ed00

0800f338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800f338:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800f370 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800f33c:	f7ff ffea 	bl	800f314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800f340:	480c      	ldr	r0, [pc, #48]	@ (800f374 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800f342:	490d      	ldr	r1, [pc, #52]	@ (800f378 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800f344:	4a0d      	ldr	r2, [pc, #52]	@ (800f37c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800f346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f348:	e002      	b.n	800f350 <LoopCopyDataInit>

0800f34a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f34a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f34c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f34e:	3304      	adds	r3, #4

0800f350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f354:	d3f9      	bcc.n	800f34a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f356:	4a0a      	ldr	r2, [pc, #40]	@ (800f380 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800f358:	4c0a      	ldr	r4, [pc, #40]	@ (800f384 <LoopFillZerobss+0x22>)
  movs r3, #0
 800f35a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f35c:	e001      	b.n	800f362 <LoopFillZerobss>

0800f35e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f35e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f360:	3204      	adds	r2, #4

0800f362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f364:	d3fb      	bcc.n	800f35e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f366:	f004 f83f 	bl	80133e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f36a:	f7fe ff8d 	bl	800e288 <main>
  bx  lr    
 800f36e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800f370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800f374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f378:	20002404 	.word	0x20002404
  ldr r2, =_sidata
 800f37c:	08015b04 	.word	0x08015b04
  ldr r2, =_sbss
 800f380:	20002404 	.word	0x20002404
  ldr r4, =_ebss
 800f384:	200039e8 	.word	0x200039e8

0800f388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f388:	e7fe      	b.n	800f388 <ADC_IRQHandler>
	...

0800f38c <temperature_update>:
	 0,								// Temp_auto; 			// xxxx temp3_auto temp2_auto temp1_auto temp0_auto (LSB)
	 0,								// Tec_Heater_status;	// heater3_on heater2_on heater1_on heater0_on tec3_on tec2_on tec1_on tec0_on
};

static void temperature_update(void)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b082      	sub	sp, #8
 800f390:	af00      	add	r7, sp, #0
	if (s_Temperature_CurrentState.Temp_change_flag)
 800f392:	4b3e      	ldr	r3, [pc, #248]	@ (800f48c <temperature_update+0x100>)
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d039      	beq.n	800f40e <temperature_update+0x82>
	{
		uint8_t Tec_dir = 0;
 800f39a:	2300      	movs	r3, #0
 800f39c:	71bb      	strb	r3, [r7, #6]
		for (uint8_t channel = 0; channel < 4; channel ++)
 800f39e:	2300      	movs	r3, #0
 800f3a0:	71fb      	strb	r3, [r7, #7]
 800f3a2:	e02e      	b.n	800f402 <temperature_update+0x76>
		{
			Tec_dir = ((s_Temperature_CurrentState.Tec_dir & (1 << channel)) == (1 << channel)) ? TEC_HEAT : TEC_COOL;
 800f3a4:	4b39      	ldr	r3, [pc, #228]	@ (800f48c <temperature_update+0x100>)
 800f3a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	79fb      	ldrb	r3, [r7, #7]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	fa02 f303 	lsl.w	r3, r2, r3
 800f3b4:	ea01 0203 	and.w	r2, r1, r3
 800f3b8:	79fb      	ldrb	r3, [r7, #7]
 800f3ba:	2101      	movs	r1, #1
 800f3bc:	fa01 f303 	lsl.w	r3, r1, r3
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	bf0c      	ite	eq
 800f3c4:	2301      	moveq	r3, #1
 800f3c6:	2300      	movne	r3, #0
 800f3c8:	b2db      	uxtb	r3, r3
 800f3ca:	71bb      	strb	r3, [r7, #6]
			lt8722_set_output_voltage_channel(channel, Tec_dir, s_Temperature_CurrentState.Tec_vol[channel]);
 800f3cc:	79fb      	ldrb	r3, [r7, #7]
 800f3ce:	4a2f      	ldr	r2, [pc, #188]	@ (800f48c <temperature_update+0x100>)
 800f3d0:	3302      	adds	r3, #2
 800f3d2:	00db      	lsls	r3, r3, #3
 800f3d4:	4413      	add	r3, r2
 800f3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3da:	79b9      	ldrb	r1, [r7, #6]
 800f3dc:	79f8      	ldrb	r0, [r7, #7]
 800f3de:	f7fd fd95 	bl	800cf0c <lt8722_set_output_voltage_channel>
			heater_set_duty_pwm_channel(channel, s_Temperature_CurrentState.Heater_duty[channel]);
 800f3e2:	79fb      	ldrb	r3, [r7, #7]
 800f3e4:	4a29      	ldr	r2, [pc, #164]	@ (800f48c <temperature_update+0x100>)
 800f3e6:	3318      	adds	r3, #24
 800f3e8:	005b      	lsls	r3, r3, #1
 800f3ea:	4413      	add	r3, r2
 800f3ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f3f0:	b29a      	uxth	r2, r3
 800f3f2:	79fb      	ldrb	r3, [r7, #7]
 800f3f4:	4611      	mov	r1, r2
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7fc fdfc 	bl	800bff4 <heater_set_duty_pwm_channel>
		for (uint8_t channel = 0; channel < 4; channel ++)
 800f3fc:	79fb      	ldrb	r3, [r7, #7]
 800f3fe:	3301      	adds	r3, #1
 800f400:	71fb      	strb	r3, [r7, #7]
 800f402:	79fb      	ldrb	r3, [r7, #7]
 800f404:	2b03      	cmp	r3, #3
 800f406:	d9cd      	bls.n	800f3a4 <temperature_update+0x18>
		}
		s_Temperature_CurrentState.Temp_change_flag = 0;
 800f408:	4b20      	ldr	r3, [pc, #128]	@ (800f48c <temperature_update+0x100>)
 800f40a:	2200      	movs	r2, #0
 800f40c:	701a      	strb	r2, [r3, #0]
	}
	NTC_get_temperature(s_Temperature_CurrentState.NTC_temp);
 800f40e:	4820      	ldr	r0, [pc, #128]	@ (800f490 <temperature_update+0x104>)
 800f410:	f7fe f8a2 	bl	800d558 <NTC_get_temperature>
	if ((s_Temperature_CurrentState.Temp_auto & (1 << TEMP0_AUTO)) == (1 << TEMP0_AUTO))
 800f414:	4b1d      	ldr	r3, [pc, #116]	@ (800f48c <temperature_update+0x100>)
 800f416:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800f41a:	f003 0301 	and.w	r3, r3, #1
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d006      	beq.n	800f430 <temperature_update+0xa4>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temp[0], 0);
 800f422:	4b1a      	ldr	r3, [pc, #104]	@ (800f48c <temperature_update+0x100>)
 800f424:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
 800f428:	2100      	movs	r1, #0
 800f42a:	4618      	mov	r0, r3
 800f42c:	f000 f832 	bl	800f494 <temperature_auto_ctrl>
	if ((s_Temperature_CurrentState.Temp_auto & (1 << TEMP1_AUTO)) == (1 << TEMP1_AUTO))
 800f430:	4b16      	ldr	r3, [pc, #88]	@ (800f48c <temperature_update+0x100>)
 800f432:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800f436:	f003 0302 	and.w	r3, r3, #2
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d006      	beq.n	800f44c <temperature_update+0xc0>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temp[1], 1);
 800f43e:	4b13      	ldr	r3, [pc, #76]	@ (800f48c <temperature_update+0x100>)
 800f440:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f444:	2101      	movs	r1, #1
 800f446:	4618      	mov	r0, r3
 800f448:	f000 f824 	bl	800f494 <temperature_auto_ctrl>
	if ((s_Temperature_CurrentState.Temp_auto & (1 << TEMP2_AUTO)) == (1 << TEMP2_AUTO))
 800f44c:	4b0f      	ldr	r3, [pc, #60]	@ (800f48c <temperature_update+0x100>)
 800f44e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800f452:	f003 0304 	and.w	r3, r3, #4
 800f456:	2b00      	cmp	r3, #0
 800f458:	d006      	beq.n	800f468 <temperature_update+0xdc>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temp[2], 2);
 800f45a:	4b0c      	ldr	r3, [pc, #48]	@ (800f48c <temperature_update+0x100>)
 800f45c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f460:	2102      	movs	r1, #2
 800f462:	4618      	mov	r0, r3
 800f464:	f000 f816 	bl	800f494 <temperature_auto_ctrl>
	if ((s_Temperature_CurrentState.Temp_auto & (1 << TEMP3_AUTO)) == (1 << TEMP3_AUTO))
 800f468:	4b08      	ldr	r3, [pc, #32]	@ (800f48c <temperature_update+0x100>)
 800f46a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800f46e:	f003 0308 	and.w	r3, r3, #8
 800f472:	2b00      	cmp	r3, #0
 800f474:	d006      	beq.n	800f484 <temperature_update+0xf8>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temp[3], 3);
 800f476:	4b05      	ldr	r3, [pc, #20]	@ (800f48c <temperature_update+0x100>)
 800f478:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f47c:	2103      	movs	r1, #3
 800f47e:	4618      	mov	r0, r3
 800f480:	f000 f808 	bl	800f494 <temperature_auto_ctrl>
}
 800f484:	bf00      	nop
 800f486:	3708      	adds	r7, #8
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}
 800f48c:	20002348 	.word	0x20002348
 800f490:	20002382 	.word	0x20002382

0800f494 <temperature_auto_ctrl>:

void temperature_auto_ctrl(int16_t temperature_now, uint8_t channel)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	4603      	mov	r3, r0
 800f49c:	460a      	mov	r2, r1
 800f49e:	80fb      	strh	r3, [r7, #6]
 800f4a0:	4613      	mov	r3, r2
 800f4a2:	717b      	strb	r3, [r7, #5]
	// Case: temperature is higher than expected temperature
	// Using: TEC
	if (temperature_now > s_Temperature_CurrentState.Temp_setpoint[channel] + s_Temperature_CurrentState.High_Threshold)
 800f4a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f4a8:	797b      	ldrb	r3, [r7, #5]
 800f4aa:	495f      	ldr	r1, [pc, #380]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f4ac:	005b      	lsls	r3, r3, #1
 800f4ae:	440b      	add	r3, r1
 800f4b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	4b5c      	ldr	r3, [pc, #368]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f4b8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f4bc:	440b      	add	r3, r1
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	dd47      	ble.n	800f552 <temperature_auto_ctrl+0xbe>
	{
		// UART_SendStringRing(UART_CMDLINE, "nhiet cao");
		// turn off heater
		heater_set_duty_pwm_channel(channel, 0);
 800f4c2:	797b      	ldrb	r3, [r7, #5]
 800f4c4:	2100      	movs	r1, #0
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7fc fd94 	bl	800bff4 <heater_set_duty_pwm_channel>
		// turn on tec with COOL
		s_Temperature_CurrentState.Tec_dir &= ~(1 << channel);
 800f4cc:	4b56      	ldr	r3, [pc, #344]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f4ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f4d2:	b25a      	sxtb	r2, r3
 800f4d4:	797b      	ldrb	r3, [r7, #5]
 800f4d6:	2101      	movs	r1, #1
 800f4d8:	fa01 f303 	lsl.w	r3, r1, r3
 800f4dc:	b25b      	sxtb	r3, r3
 800f4de:	43db      	mvns	r3, r3
 800f4e0:	b25b      	sxtb	r3, r3
 800f4e2:	4013      	ands	r3, r2
 800f4e4:	b25b      	sxtb	r3, r3
 800f4e6:	b2da      	uxtb	r2, r3
 800f4e8:	4b4f      	ldr	r3, [pc, #316]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f4ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		lt8722_set_output_voltage_channel(channel, TEC_COOL, s_Temperature_CurrentState.Tec_vol[channel]);
 800f4ee:	797b      	ldrb	r3, [r7, #5]
 800f4f0:	4a4d      	ldr	r2, [pc, #308]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f4f2:	3302      	adds	r3, #2
 800f4f4:	00db      	lsls	r3, r3, #3
 800f4f6:	4413      	add	r3, r2
 800f4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4fc:	7978      	ldrb	r0, [r7, #5]
 800f4fe:	2100      	movs	r1, #0
 800f500:	f7fd fd04 	bl	800cf0c <lt8722_set_output_voltage_channel>
		lt8722_set_swen_req(channel, LT8722_SWEN_REQ_ENABLED);
 800f504:	797b      	ldrb	r3, [r7, #5]
 800f506:	2101      	movs	r1, #1
 800f508:	4618      	mov	r0, r3
 800f50a:	f7fd fbc4 	bl	800cc96 <lt8722_set_swen_req>
		// update status
		s_Temperature_CurrentState.Tec_Heater_status |= (1 << channel);
 800f50e:	4b46      	ldr	r3, [pc, #280]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f510:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f514:	b25a      	sxtb	r2, r3
 800f516:	797b      	ldrb	r3, [r7, #5]
 800f518:	2101      	movs	r1, #1
 800f51a:	fa01 f303 	lsl.w	r3, r1, r3
 800f51e:	b25b      	sxtb	r3, r3
 800f520:	4313      	orrs	r3, r2
 800f522:	b25b      	sxtb	r3, r3
 800f524:	b2da      	uxtb	r2, r3
 800f526:	4b40      	ldr	r3, [pc, #256]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f528:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		s_Temperature_CurrentState.Tec_Heater_status &= ~(1 << (channel + 4));
 800f52c:	4b3e      	ldr	r3, [pc, #248]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f52e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f532:	b25a      	sxtb	r2, r3
 800f534:	797b      	ldrb	r3, [r7, #5]
 800f536:	3304      	adds	r3, #4
 800f538:	2101      	movs	r1, #1
 800f53a:	fa01 f303 	lsl.w	r3, r1, r3
 800f53e:	b25b      	sxtb	r3, r3
 800f540:	43db      	mvns	r3, r3
 800f542:	b25b      	sxtb	r3, r3
 800f544:	4013      	ands	r3, r2
 800f546:	b25b      	sxtb	r3, r3
 800f548:	b2da      	uxtb	r2, r3
 800f54a:	4b37      	ldr	r3, [pc, #220]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f54c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
		heater_set_duty_pwm_channel(channel, 0);
		// update status
		s_Temperature_CurrentState.Tec_Heater_status &= ~((1 << (channel + 4)) | (1 << channel));
	}
	return;
 800f550:	e066      	b.n	800f620 <temperature_auto_ctrl+0x18c>
	else if (temperature_now < s_Temperature_CurrentState.Temp_setpoint[channel] - s_Temperature_CurrentState.Low_Threshold)
 800f552:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f556:	797b      	ldrb	r3, [r7, #5]
 800f558:	4933      	ldr	r1, [pc, #204]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f55a:	005b      	lsls	r3, r3, #1
 800f55c:	440b      	add	r3, r1
 800f55e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f562:	4619      	mov	r1, r3
 800f564:	4b30      	ldr	r3, [pc, #192]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f566:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f56a:	1acb      	subs	r3, r1, r3
 800f56c:	429a      	cmp	r2, r3
 800f56e:	da33      	bge.n	800f5d8 <temperature_auto_ctrl+0x144>
		lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
 800f570:	797b      	ldrb	r3, [r7, #5]
 800f572:	2100      	movs	r1, #0
 800f574:	4618      	mov	r0, r3
 800f576:	f7fd fb8e 	bl	800cc96 <lt8722_set_swen_req>
		heater_set_duty_pwm_channel(channel, s_Temperature_CurrentState.Heater_duty[channel]);
 800f57a:	797b      	ldrb	r3, [r7, #5]
 800f57c:	4a2a      	ldr	r2, [pc, #168]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f57e:	3318      	adds	r3, #24
 800f580:	005b      	lsls	r3, r3, #1
 800f582:	4413      	add	r3, r2
 800f584:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f588:	b29a      	uxth	r2, r3
 800f58a:	797b      	ldrb	r3, [r7, #5]
 800f58c:	4611      	mov	r1, r2
 800f58e:	4618      	mov	r0, r3
 800f590:	f7fc fd30 	bl	800bff4 <heater_set_duty_pwm_channel>
		s_Temperature_CurrentState.Tec_Heater_status |= (1 << (channel + 4));
 800f594:	4b24      	ldr	r3, [pc, #144]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f596:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f59a:	b25a      	sxtb	r2, r3
 800f59c:	797b      	ldrb	r3, [r7, #5]
 800f59e:	3304      	adds	r3, #4
 800f5a0:	2101      	movs	r1, #1
 800f5a2:	fa01 f303 	lsl.w	r3, r1, r3
 800f5a6:	b25b      	sxtb	r3, r3
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	b25b      	sxtb	r3, r3
 800f5ac:	b2da      	uxtb	r2, r3
 800f5ae:	4b1e      	ldr	r3, [pc, #120]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f5b0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		s_Temperature_CurrentState.Tec_Heater_status &= ~(1 << channel);
 800f5b4:	4b1c      	ldr	r3, [pc, #112]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f5b6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f5ba:	b25a      	sxtb	r2, r3
 800f5bc:	797b      	ldrb	r3, [r7, #5]
 800f5be:	2101      	movs	r1, #1
 800f5c0:	fa01 f303 	lsl.w	r3, r1, r3
 800f5c4:	b25b      	sxtb	r3, r3
 800f5c6:	43db      	mvns	r3, r3
 800f5c8:	b25b      	sxtb	r3, r3
 800f5ca:	4013      	ands	r3, r2
 800f5cc:	b25b      	sxtb	r3, r3
 800f5ce:	b2da      	uxtb	r2, r3
 800f5d0:	4b15      	ldr	r3, [pc, #84]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f5d2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	return;
 800f5d6:	e023      	b.n	800f620 <temperature_auto_ctrl+0x18c>
		lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
 800f5d8:	797b      	ldrb	r3, [r7, #5]
 800f5da:	2100      	movs	r1, #0
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7fd fb5a 	bl	800cc96 <lt8722_set_swen_req>
		heater_set_duty_pwm_channel(channel, 0);
 800f5e2:	797b      	ldrb	r3, [r7, #5]
 800f5e4:	2100      	movs	r1, #0
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7fc fd04 	bl	800bff4 <heater_set_duty_pwm_channel>
		s_Temperature_CurrentState.Tec_Heater_status &= ~((1 << (channel + 4)) | (1 << channel));
 800f5ec:	4b0e      	ldr	r3, [pc, #56]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f5ee:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f5f2:	b25a      	sxtb	r2, r3
 800f5f4:	797b      	ldrb	r3, [r7, #5]
 800f5f6:	3304      	adds	r3, #4
 800f5f8:	2101      	movs	r1, #1
 800f5fa:	fa01 f303 	lsl.w	r3, r1, r3
 800f5fe:	b259      	sxtb	r1, r3
 800f600:	797b      	ldrb	r3, [r7, #5]
 800f602:	2001      	movs	r0, #1
 800f604:	fa00 f303 	lsl.w	r3, r0, r3
 800f608:	b25b      	sxtb	r3, r3
 800f60a:	430b      	orrs	r3, r1
 800f60c:	b25b      	sxtb	r3, r3
 800f60e:	43db      	mvns	r3, r3
 800f610:	b25b      	sxtb	r3, r3
 800f612:	4013      	ands	r3, r2
 800f614:	b25b      	sxtb	r3, r3
 800f616:	b2da      	uxtb	r2, r3
 800f618:	4b03      	ldr	r3, [pc, #12]	@ (800f628 <temperature_auto_ctrl+0x194>)
 800f61a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	return;
 800f61e:	bf00      	nop
}
 800f620:	3708      	adds	r7, #8
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	20002348 	.word	0x20002348

0800f62c <Temperature_GetSet_CreateTask>:
{
	return;
}

void Temperature_GetSet_CreateTask(void)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&temp_task_context.taskHandle, &temp_task_context.taskProperty);
 800f630:	4902      	ldr	r1, [pc, #8]	@ (800f63c <Temperature_GetSet_CreateTask+0x10>)
 800f632:	4803      	ldr	r0, [pc, #12]	@ (800f640 <Temperature_GetSet_CreateTask+0x14>)
 800f634:	f003 fcd8 	bl	8012fe8 <SCH_TASK_CreateTask>
	return;
 800f638:	bf00      	nop
}
 800f63a:	bd80      	pop	{r7, pc}
 800f63c:	20002334 	.word	0x20002334
 800f640:	20002330 	.word	0x20002330

0800f644 <temperature_set_setpoint>:

void temperature_set_setpoint(uint8_t channel, int16_t setpoint)
{
 800f644:	b480      	push	{r7}
 800f646:	b083      	sub	sp, #12
 800f648:	af00      	add	r7, sp, #0
 800f64a:	4603      	mov	r3, r0
 800f64c:	460a      	mov	r2, r1
 800f64e:	71fb      	strb	r3, [r7, #7]
 800f650:	4613      	mov	r3, r2
 800f652:	80bb      	strh	r3, [r7, #4]
	s_Temperature_CurrentState.Temp_setpoint[channel] = setpoint;
 800f654:	79fb      	ldrb	r3, [r7, #7]
 800f656:	4a05      	ldr	r2, [pc, #20]	@ (800f66c <temperature_set_setpoint+0x28>)
 800f658:	005b      	lsls	r3, r3, #1
 800f65a:	4413      	add	r3, r2
 800f65c:	88ba      	ldrh	r2, [r7, #4]
 800f65e:	805a      	strh	r2, [r3, #2]
	return;
 800f660:	bf00      	nop
}
 800f662:	370c      	adds	r7, #12
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr
 800f66c:	20002348 	.word	0x20002348

0800f670 <temperature_get_setpoint>:

int16_t temperature_get_setpoint(uint8_t channel)
{
 800f670:	b480      	push	{r7}
 800f672:	b083      	sub	sp, #12
 800f674:	af00      	add	r7, sp, #0
 800f676:	4603      	mov	r3, r0
 800f678:	71fb      	strb	r3, [r7, #7]
	return s_Temperature_CurrentState.Temp_setpoint[channel];
 800f67a:	79fb      	ldrb	r3, [r7, #7]
 800f67c:	4a05      	ldr	r2, [pc, #20]	@ (800f694 <temperature_get_setpoint+0x24>)
 800f67e:	005b      	lsls	r3, r3, #1
 800f680:	4413      	add	r3, r2
 800f682:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 800f686:	4618      	mov	r0, r3
 800f688:	370c      	adds	r7, #12
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr
 800f692:	bf00      	nop
 800f694:	20002348 	.word	0x20002348

0800f698 <temperature_set_tec_vol>:
{
	return s_Temperature_CurrentState.NTC_temp[channel];
}

void temperature_set_tec_vol(uint8_t channel, uint16_t voltage)
{
 800f698:	b490      	push	{r4, r7}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	4604      	mov	r4, r0
 800f6a0:	4608      	mov	r0, r1
 800f6a2:	4621      	mov	r1, r4
 800f6a4:	71f9      	strb	r1, [r7, #7]
 800f6a6:	4601      	mov	r1, r0
 800f6a8:	80b9      	strh	r1, [r7, #4]
	s_Temperature_CurrentState.Temp_change_flag = 1;
 800f6aa:	490f      	ldr	r1, [pc, #60]	@ (800f6e8 <temperature_set_tec_vol+0x50>)
 800f6ac:	2001      	movs	r0, #1
 800f6ae:	7008      	strb	r0, [r1, #0]
	if (voltage > 3000) voltage = 3000;
 800f6b0:	88b9      	ldrh	r1, [r7, #4]
 800f6b2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800f6b6:	4281      	cmp	r1, r0
 800f6b8:	d902      	bls.n	800f6c0 <temperature_set_tec_vol+0x28>
 800f6ba:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800f6be:	80b9      	strh	r1, [r7, #4]
	s_Temperature_CurrentState.Tec_vol[channel] = voltage*1000000;
 800f6c0:	88b9      	ldrh	r1, [r7, #4]
 800f6c2:	480a      	ldr	r0, [pc, #40]	@ (800f6ec <temperature_set_tec_vol+0x54>)
 800f6c4:	fb00 f101 	mul.w	r1, r0, r1
 800f6c8:	79f8      	ldrb	r0, [r7, #7]
 800f6ca:	17cc      	asrs	r4, r1, #31
 800f6cc:	460a      	mov	r2, r1
 800f6ce:	4623      	mov	r3, r4
 800f6d0:	4c05      	ldr	r4, [pc, #20]	@ (800f6e8 <temperature_set_tec_vol+0x50>)
 800f6d2:	1c81      	adds	r1, r0, #2
 800f6d4:	00c9      	lsls	r1, r1, #3
 800f6d6:	4421      	add	r1, r4
 800f6d8:	e9c1 2300 	strd	r2, r3, [r1]
}
 800f6dc:	bf00      	nop
 800f6de:	3708      	adds	r7, #8
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bc90      	pop	{r4, r7}
 800f6e4:	4770      	bx	lr
 800f6e6:	bf00      	nop
 800f6e8:	20002348 	.word	0x20002348
 800f6ec:	000f4240 	.word	0x000f4240

0800f6f0 <temperature_get_tec_vol>:

uint16_t temperature_get_tec_vol(uint8_t channel)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Tec_vol[channel]/1000000);
 800f6fa:	79fb      	ldrb	r3, [r7, #7]
 800f6fc:	4a08      	ldr	r2, [pc, #32]	@ (800f720 <temperature_get_tec_vol+0x30>)
 800f6fe:	3302      	adds	r3, #2
 800f700:	00db      	lsls	r3, r3, #3
 800f702:	4413      	add	r3, r2
 800f704:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f708:	4a06      	ldr	r2, [pc, #24]	@ (800f724 <temperature_get_tec_vol+0x34>)
 800f70a:	f04f 0300 	mov.w	r3, #0
 800f70e:	f7f8 fdc7 	bl	80082a0 <__aeabi_ldivmod>
 800f712:	4602      	mov	r2, r0
 800f714:	460b      	mov	r3, r1
 800f716:	b293      	uxth	r3, r2
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3708      	adds	r7, #8
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}
 800f720:	20002348 	.word	0x20002348
 800f724:	000f4240 	.word	0x000f4240

0800f728 <temperature_set_heater_duty>:

void temperature_set_heater_duty(uint8_t channel, uint8_t duty)
{
 800f728:	b480      	push	{r7}
 800f72a:	b083      	sub	sp, #12
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	4603      	mov	r3, r0
 800f730:	460a      	mov	r2, r1
 800f732:	71fb      	strb	r3, [r7, #7]
 800f734:	4613      	mov	r3, r2
 800f736:	71bb      	strb	r3, [r7, #6]
	s_Temperature_CurrentState.Temp_change_flag = 1;
 800f738:	4b0e      	ldr	r3, [pc, #56]	@ (800f774 <temperature_set_heater_duty+0x4c>)
 800f73a:	2201      	movs	r2, #1
 800f73c:	701a      	strb	r2, [r3, #0]
    if (duty > 100) duty = 100;
 800f73e:	79bb      	ldrb	r3, [r7, #6]
 800f740:	2b64      	cmp	r3, #100	@ 0x64
 800f742:	d901      	bls.n	800f748 <temperature_set_heater_duty+0x20>
 800f744:	2364      	movs	r3, #100	@ 0x64
 800f746:	71bb      	strb	r3, [r7, #6]
	s_Temperature_CurrentState.Heater_duty[channel] = duty*10;
 800f748:	79bb      	ldrb	r3, [r7, #6]
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	461a      	mov	r2, r3
 800f74e:	0092      	lsls	r2, r2, #2
 800f750:	4413      	add	r3, r2
 800f752:	005b      	lsls	r3, r3, #1
 800f754:	b29a      	uxth	r2, r3
 800f756:	79fb      	ldrb	r3, [r7, #7]
 800f758:	b211      	sxth	r1, r2
 800f75a:	4a06      	ldr	r2, [pc, #24]	@ (800f774 <temperature_set_heater_duty+0x4c>)
 800f75c:	3318      	adds	r3, #24
 800f75e:	005b      	lsls	r3, r3, #1
 800f760:	4413      	add	r3, r2
 800f762:	460a      	mov	r2, r1
 800f764:	805a      	strh	r2, [r3, #2]
}
 800f766:	bf00      	nop
 800f768:	370c      	adds	r7, #12
 800f76a:	46bd      	mov	sp, r7
 800f76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f770:	4770      	bx	lr
 800f772:	bf00      	nop
 800f774:	20002348 	.word	0x20002348

0800f778 <temperature_get_heater_duty>:
uint8_t temperature_get_heater_duty(uint8_t channel)
{
 800f778:	b480      	push	{r7}
 800f77a:	b083      	sub	sp, #12
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	4603      	mov	r3, r0
 800f780:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Heater_duty[channel]/10);
 800f782:	79fb      	ldrb	r3, [r7, #7]
 800f784:	4a09      	ldr	r2, [pc, #36]	@ (800f7ac <temperature_get_heater_duty+0x34>)
 800f786:	3318      	adds	r3, #24
 800f788:	005b      	lsls	r3, r3, #1
 800f78a:	4413      	add	r3, r2
 800f78c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f790:	4a07      	ldr	r2, [pc, #28]	@ (800f7b0 <temperature_get_heater_duty+0x38>)
 800f792:	fb82 1203 	smull	r1, r2, r2, r3
 800f796:	1092      	asrs	r2, r2, #2
 800f798:	17db      	asrs	r3, r3, #31
 800f79a:	1ad3      	subs	r3, r2, r3
 800f79c:	b21b      	sxth	r3, r3
 800f79e:	b2db      	uxtb	r3, r3
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	370c      	adds	r7, #12
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr
 800f7ac:	20002348 	.word	0x20002348
 800f7b0:	66666667 	.word	0x66666667

0800f7b4 <temperature_set_auto_ctrl>:

void temperature_set_auto_ctrl(uint8_t auto_0, uint8_t auto_1, uint8_t auto_2, uint8_t auto_3)
{
 800f7b4:	b590      	push	{r4, r7, lr}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	4604      	mov	r4, r0
 800f7bc:	4608      	mov	r0, r1
 800f7be:	4611      	mov	r1, r2
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	4623      	mov	r3, r4
 800f7c4:	71fb      	strb	r3, [r7, #7]
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	71bb      	strb	r3, [r7, #6]
 800f7ca:	460b      	mov	r3, r1
 800f7cc:	717b      	strb	r3, [r7, #5]
 800f7ce:	4613      	mov	r3, r2
 800f7d0:	713b      	strb	r3, [r7, #4]
    s_Temperature_CurrentState.Temp_auto = (auto_0 << TEMP0_AUTO) | (auto_1 << TEMP1_AUTO) | (auto_2 << TEMP2_AUTO) | (auto_3 << TEMP3_AUTO);
 800f7d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f7d6:	005b      	lsls	r3, r3, #1
 800f7d8:	b25a      	sxtb	r2, r3
 800f7da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	b25a      	sxtb	r2, r3
 800f7e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800f7e6:	009b      	lsls	r3, r3, #2
 800f7e8:	b25b      	sxtb	r3, r3
 800f7ea:	4313      	orrs	r3, r2
 800f7ec:	b25a      	sxtb	r2, r3
 800f7ee:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800f7f2:	00db      	lsls	r3, r3, #3
 800f7f4:	b25b      	sxtb	r3, r3
 800f7f6:	4313      	orrs	r3, r2
 800f7f8:	b25b      	sxtb	r3, r3
 800f7fa:	b2da      	uxtb	r2, r3
 800f7fc:	4b13      	ldr	r3, [pc, #76]	@ (800f84c <temperature_set_auto_ctrl+0x98>)
 800f7fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	lt8722_set_swen_req(0, LT8722_SWEN_REQ_DISABLED);
 800f802:	2100      	movs	r1, #0
 800f804:	2000      	movs	r0, #0
 800f806:	f7fd fa46 	bl	800cc96 <lt8722_set_swen_req>
	heater_set_duty_pwm_channel(0, 0);
 800f80a:	2100      	movs	r1, #0
 800f80c:	2000      	movs	r0, #0
 800f80e:	f7fc fbf1 	bl	800bff4 <heater_set_duty_pwm_channel>
	lt8722_set_swen_req(1, LT8722_SWEN_REQ_DISABLED);
 800f812:	2100      	movs	r1, #0
 800f814:	2001      	movs	r0, #1
 800f816:	f7fd fa3e 	bl	800cc96 <lt8722_set_swen_req>
	heater_set_duty_pwm_channel(1, 0);
 800f81a:	2100      	movs	r1, #0
 800f81c:	2001      	movs	r0, #1
 800f81e:	f7fc fbe9 	bl	800bff4 <heater_set_duty_pwm_channel>
	lt8722_set_swen_req(2, LT8722_SWEN_REQ_DISABLED);
 800f822:	2100      	movs	r1, #0
 800f824:	2002      	movs	r0, #2
 800f826:	f7fd fa36 	bl	800cc96 <lt8722_set_swen_req>
	heater_set_duty_pwm_channel(2, 0);
 800f82a:	2100      	movs	r1, #0
 800f82c:	2002      	movs	r0, #2
 800f82e:	f7fc fbe1 	bl	800bff4 <heater_set_duty_pwm_channel>
	lt8722_set_swen_req(3, LT8722_SWEN_REQ_DISABLED);
 800f832:	2100      	movs	r1, #0
 800f834:	2003      	movs	r0, #3
 800f836:	f7fd fa2e 	bl	800cc96 <lt8722_set_swen_req>
	heater_set_duty_pwm_channel(3, 0);
 800f83a:	2100      	movs	r1, #0
 800f83c:	2003      	movs	r0, #3
 800f83e:	f7fc fbd9 	bl	800bff4 <heater_set_duty_pwm_channel>
    return;
 800f842:	bf00      	nop
}
 800f844:	370c      	adds	r7, #12
 800f846:	46bd      	mov	sp, r7
 800f848:	bd90      	pop	{r4, r7, pc}
 800f84a:	bf00      	nop
 800f84c:	20002348 	.word	0x20002348

0800f850 <tec_set_dir>:

void tec_set_dir(tec_dir_t dir_0, tec_dir_t dir_1, tec_dir_t dir_2, tec_dir_t dir_3)
{
 800f850:	b490      	push	{r4, r7}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	4604      	mov	r4, r0
 800f858:	4608      	mov	r0, r1
 800f85a:	4611      	mov	r1, r2
 800f85c:	461a      	mov	r2, r3
 800f85e:	4623      	mov	r3, r4
 800f860:	71fb      	strb	r3, [r7, #7]
 800f862:	4603      	mov	r3, r0
 800f864:	71bb      	strb	r3, [r7, #6]
 800f866:	460b      	mov	r3, r1
 800f868:	717b      	strb	r3, [r7, #5]
 800f86a:	4613      	mov	r3, r2
 800f86c:	713b      	strb	r3, [r7, #4]
    s_Temperature_CurrentState.Temp_change_flag = 1;
 800f86e:	4b10      	ldr	r3, [pc, #64]	@ (800f8b0 <tec_set_dir+0x60>)
 800f870:	2201      	movs	r2, #1
 800f872:	701a      	strb	r2, [r3, #0]
    s_Temperature_CurrentState.Tec_dir = (dir_0 << TEC0_DIR) | (dir_1 << TEC1_DIR) | (dir_2 << TEC2_DIR) | (dir_3 << TEC3_DIR);
 800f874:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f878:	005b      	lsls	r3, r3, #1
 800f87a:	b25a      	sxtb	r2, r3
 800f87c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f880:	4313      	orrs	r3, r2
 800f882:	b25a      	sxtb	r2, r3
 800f884:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	b25b      	sxtb	r3, r3
 800f88c:	4313      	orrs	r3, r2
 800f88e:	b25a      	sxtb	r2, r3
 800f890:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800f894:	00db      	lsls	r3, r3, #3
 800f896:	b25b      	sxtb	r3, r3
 800f898:	4313      	orrs	r3, r2
 800f89a:	b25b      	sxtb	r3, r3
 800f89c:	b2da      	uxtb	r2, r3
 800f89e:	4b04      	ldr	r3, [pc, #16]	@ (800f8b0 <tec_set_dir+0x60>)
 800f8a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return;
 800f8a4:	bf00      	nop
}
 800f8a6:	3708      	adds	r7, #8
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bc90      	pop	{r4, r7}
 800f8ac:	4770      	bx	lr
 800f8ae:	bf00      	nop
 800f8b0:	20002348 	.word	0x20002348

0800f8b4 <LL_GPIO_SetOutputPin>:
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b083      	sub	sp, #12
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	683a      	ldr	r2, [r7, #0]
 800f8c2:	619a      	str	r2, [r3, #24]
}
 800f8c4:	bf00      	nop
 800f8c6:	370c      	adds	r7, #12
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ce:	4770      	bx	lr

0800f8d0 <LL_GPIO_ResetOutputPin>:
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b083      	sub	sp, #12
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	041a      	lsls	r2, r3, #16
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	619a      	str	r2, [r3, #24]
}
 800f8e2:	bf00      	nop
 800f8e4:	370c      	adds	r7, #12
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr
	...

0800f8f0 <Ex_Watchdog_Init>:
		181
	}
};

void Ex_Watchdog_Init(void)
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 800f8f4:	4b03      	ldr	r3, [pc, #12]	@ (800f904 <Ex_Watchdog_Init+0x14>)
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	701a      	strb	r2, [r3, #0]
}
 800f8fa:	bf00      	nop
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f902:	4770      	bx	lr
 800f904:	20003674 	.word	0x20003674

0800f908 <Ex_Watchdog_CreateTask>:

void Ex_Watchdog_CreateTask(void)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 800f90c:	4902      	ldr	r1, [pc, #8]	@ (800f918 <Ex_Watchdog_CreateTask+0x10>)
 800f90e:	4803      	ldr	r0, [pc, #12]	@ (800f91c <Ex_Watchdog_CreateTask+0x14>)
 800f910:	f003 fb6a 	bl	8012fe8 <SCH_TASK_CreateTask>
}
 800f914:	bf00      	nop
 800f916:	bd80      	pop	{r7, pc}
 800f918:	2000239c 	.word	0x2000239c
 800f91c:	20002398 	.word	0x20002398

0800f920 <status_wdt_update>:

void status_wdt_update(void)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	af00      	add	r7, sp, #0
	if (WDT_Current)
 800f924:	4b14      	ldr	r3, [pc, #80]	@ (800f978 <status_wdt_update+0x58>)
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d012      	beq.n	800f952 <status_wdt_update+0x32>
	{
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800f92c:	2001      	movs	r0, #1
 800f92e:	f003 fb45 	bl	8012fbc <SCH_TIM_HasCompleted>
 800f932:	4603      	mov	r3, r0
 800f934:	2b00      	cmp	r3, #0
 800f936:	d01d      	beq.n	800f974 <status_wdt_update+0x54>
		{
			WDT_Current = 0;
 800f938:	4b0f      	ldr	r3, [pc, #60]	@ (800f978 <status_wdt_update+0x58>)
 800f93a:	2200      	movs	r2, #0
 800f93c:	701a      	strb	r2, [r3, #0]
			LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800f93e:	2102      	movs	r1, #2
 800f940:	480e      	ldr	r0, [pc, #56]	@ (800f97c <status_wdt_update+0x5c>)
 800f942:	f7ff ffc5 	bl	800f8d0 <LL_GPIO_ResetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 800f946:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800f94a:	2001      	movs	r0, #1
 800f94c:	f003 fb20 	bl	8012f90 <SCH_TIM_Start>
			WDT_Current = 1;
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
		}
	}
}
 800f950:	e010      	b.n	800f974 <status_wdt_update+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800f952:	2001      	movs	r0, #1
 800f954:	f003 fb32 	bl	8012fbc <SCH_TIM_HasCompleted>
 800f958:	4603      	mov	r3, r0
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d00a      	beq.n	800f974 <status_wdt_update+0x54>
			WDT_Current = 1;
 800f95e:	4b06      	ldr	r3, [pc, #24]	@ (800f978 <status_wdt_update+0x58>)
 800f960:	2201      	movs	r2, #1
 800f962:	701a      	strb	r2, [r3, #0]
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800f964:	2102      	movs	r1, #2
 800f966:	4805      	ldr	r0, [pc, #20]	@ (800f97c <status_wdt_update+0x5c>)
 800f968:	f7ff ffa4 	bl	800f8b4 <LL_GPIO_SetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 800f96c:	21c8      	movs	r1, #200	@ 0xc8
 800f96e:	2001      	movs	r0, #1
 800f970:	f003 fb0e 	bl	8012f90 <SCH_TIM_Start>
}
 800f974:	bf00      	nop
 800f976:	bd80      	pop	{r7, pc}
 800f978:	20003674 	.word	0x20003674
 800f97c:	40020000 	.word	0x40020000

0800f980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f984:	4b0e      	ldr	r3, [pc, #56]	@ (800f9c0 <HAL_Init+0x40>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a0d      	ldr	r2, [pc, #52]	@ (800f9c0 <HAL_Init+0x40>)
 800f98a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800f98e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800f990:	4b0b      	ldr	r3, [pc, #44]	@ (800f9c0 <HAL_Init+0x40>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	4a0a      	ldr	r2, [pc, #40]	@ (800f9c0 <HAL_Init+0x40>)
 800f996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800f99a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f99c:	4b08      	ldr	r3, [pc, #32]	@ (800f9c0 <HAL_Init+0x40>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4a07      	ldr	r2, [pc, #28]	@ (800f9c0 <HAL_Init+0x40>)
 800f9a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f9a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f9a8:	2003      	movs	r0, #3
 800f9aa:	f000 fb6f 	bl	801008c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800f9ae:	200f      	movs	r0, #15
 800f9b0:	f000 f808 	bl	800f9c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800f9b4:	f7ff fb06 	bl	800efc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800f9b8:	2300      	movs	r3, #0
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	40023c00 	.word	0x40023c00

0800f9c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800f9cc:	4b12      	ldr	r3, [pc, #72]	@ (800fa18 <HAL_InitTick+0x54>)
 800f9ce:	681a      	ldr	r2, [r3, #0]
 800f9d0:	4b12      	ldr	r3, [pc, #72]	@ (800fa1c <HAL_InitTick+0x58>)
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f9da:	fbb3 f3f1 	udiv	r3, r3, r1
 800f9de:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f000 fb79 	bl	80100da <HAL_SYSTICK_Config>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d001      	beq.n	800f9f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	e00e      	b.n	800fa10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2b0f      	cmp	r3, #15
 800f9f6:	d80a      	bhi.n	800fa0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	6879      	ldr	r1, [r7, #4]
 800f9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800fa00:	f000 fb4f 	bl	80100a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800fa04:	4a06      	ldr	r2, [pc, #24]	@ (800fa20 <HAL_InitTick+0x5c>)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	e000      	b.n	800fa10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800fa0e:	2301      	movs	r3, #1
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	3708      	adds	r7, #8
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}
 800fa18:	2000232c 	.word	0x2000232c
 800fa1c:	200023b0 	.word	0x200023b0
 800fa20:	200023ac 	.word	0x200023ac

0800fa24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800fa24:	b480      	push	{r7}
 800fa26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800fa28:	4b06      	ldr	r3, [pc, #24]	@ (800fa44 <HAL_IncTick+0x20>)
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	4b06      	ldr	r3, [pc, #24]	@ (800fa48 <HAL_IncTick+0x24>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	4413      	add	r3, r2
 800fa34:	4a04      	ldr	r2, [pc, #16]	@ (800fa48 <HAL_IncTick+0x24>)
 800fa36:	6013      	str	r3, [r2, #0]
}
 800fa38:	bf00      	nop
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop
 800fa44:	200023b0 	.word	0x200023b0
 800fa48:	20003678 	.word	0x20003678

0800fa4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	af00      	add	r7, sp, #0
  return uwTick;
 800fa50:	4b03      	ldr	r3, [pc, #12]	@ (800fa60 <HAL_GetTick+0x14>)
 800fa52:	681b      	ldr	r3, [r3, #0]
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	46bd      	mov	sp, r7
 800fa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5c:	4770      	bx	lr
 800fa5e:	bf00      	nop
 800fa60:	20003678 	.word	0x20003678

0800fa64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d101      	bne.n	800fa7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800fa76:	2301      	movs	r3, #1
 800fa78:	e033      	b.n	800fae2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d109      	bne.n	800fa96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f7ff fac6 	bl	800f014 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2200      	movs	r2, #0
 800fa92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa9a:	f003 0310 	and.w	r3, r3, #16
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d118      	bne.n	800fad4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faa6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800faaa:	f023 0302 	bic.w	r3, r3, #2
 800faae:	f043 0202 	orr.w	r2, r3, #2
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f000 f93a 	bl	800fd30 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2200      	movs	r2, #0
 800fac0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fac6:	f023 0303 	bic.w	r3, r3, #3
 800faca:	f043 0201 	orr.w	r2, r3, #1
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	641a      	str	r2, [r3, #64]	@ 0x40
 800fad2:	e001      	b.n	800fad8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800fad4:	2301      	movs	r3, #1
 800fad6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2200      	movs	r2, #0
 800fadc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800fae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3710      	adds	r7, #16
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
	...

0800faec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800faec:	b480      	push	{r7}
 800faee:	b085      	sub	sp, #20
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800faf6:	2300      	movs	r3, #0
 800faf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fb00:	2b01      	cmp	r3, #1
 800fb02:	d101      	bne.n	800fb08 <HAL_ADC_ConfigChannel+0x1c>
 800fb04:	2302      	movs	r3, #2
 800fb06:	e105      	b.n	800fd14 <HAL_ADC_ConfigChannel+0x228>
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	2b09      	cmp	r3, #9
 800fb16:	d925      	bls.n	800fb64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	68d9      	ldr	r1, [r3, #12]
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	b29b      	uxth	r3, r3
 800fb24:	461a      	mov	r2, r3
 800fb26:	4613      	mov	r3, r2
 800fb28:	005b      	lsls	r3, r3, #1
 800fb2a:	4413      	add	r3, r2
 800fb2c:	3b1e      	subs	r3, #30
 800fb2e:	2207      	movs	r2, #7
 800fb30:	fa02 f303 	lsl.w	r3, r2, r3
 800fb34:	43da      	mvns	r2, r3
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	400a      	ands	r2, r1
 800fb3c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	68d9      	ldr	r1, [r3, #12]
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	689a      	ldr	r2, [r3, #8]
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	b29b      	uxth	r3, r3
 800fb4e:	4618      	mov	r0, r3
 800fb50:	4603      	mov	r3, r0
 800fb52:	005b      	lsls	r3, r3, #1
 800fb54:	4403      	add	r3, r0
 800fb56:	3b1e      	subs	r3, #30
 800fb58:	409a      	lsls	r2, r3
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	430a      	orrs	r2, r1
 800fb60:	60da      	str	r2, [r3, #12]
 800fb62:	e022      	b.n	800fbaa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	6919      	ldr	r1, [r3, #16]
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	b29b      	uxth	r3, r3
 800fb70:	461a      	mov	r2, r3
 800fb72:	4613      	mov	r3, r2
 800fb74:	005b      	lsls	r3, r3, #1
 800fb76:	4413      	add	r3, r2
 800fb78:	2207      	movs	r2, #7
 800fb7a:	fa02 f303 	lsl.w	r3, r2, r3
 800fb7e:	43da      	mvns	r2, r3
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	400a      	ands	r2, r1
 800fb86:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	6919      	ldr	r1, [r3, #16]
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	689a      	ldr	r2, [r3, #8]
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	4618      	mov	r0, r3
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	005b      	lsls	r3, r3, #1
 800fb9e:	4403      	add	r3, r0
 800fba0:	409a      	lsls	r2, r3
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	430a      	orrs	r2, r1
 800fba8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	685b      	ldr	r3, [r3, #4]
 800fbae:	2b06      	cmp	r3, #6
 800fbb0:	d824      	bhi.n	800fbfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	685a      	ldr	r2, [r3, #4]
 800fbbc:	4613      	mov	r3, r2
 800fbbe:	009b      	lsls	r3, r3, #2
 800fbc0:	4413      	add	r3, r2
 800fbc2:	3b05      	subs	r3, #5
 800fbc4:	221f      	movs	r2, #31
 800fbc6:	fa02 f303 	lsl.w	r3, r2, r3
 800fbca:	43da      	mvns	r2, r3
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	400a      	ands	r2, r1
 800fbd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	b29b      	uxth	r3, r3
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	685a      	ldr	r2, [r3, #4]
 800fbe6:	4613      	mov	r3, r2
 800fbe8:	009b      	lsls	r3, r3, #2
 800fbea:	4413      	add	r3, r2
 800fbec:	3b05      	subs	r3, #5
 800fbee:	fa00 f203 	lsl.w	r2, r0, r3
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	430a      	orrs	r2, r1
 800fbf8:	635a      	str	r2, [r3, #52]	@ 0x34
 800fbfa:	e04c      	b.n	800fc96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	2b0c      	cmp	r3, #12
 800fc02:	d824      	bhi.n	800fc4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	685a      	ldr	r2, [r3, #4]
 800fc0e:	4613      	mov	r3, r2
 800fc10:	009b      	lsls	r3, r3, #2
 800fc12:	4413      	add	r3, r2
 800fc14:	3b23      	subs	r3, #35	@ 0x23
 800fc16:	221f      	movs	r2, #31
 800fc18:	fa02 f303 	lsl.w	r3, r2, r3
 800fc1c:	43da      	mvns	r2, r3
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	400a      	ands	r2, r1
 800fc24:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	4618      	mov	r0, r3
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	685a      	ldr	r2, [r3, #4]
 800fc38:	4613      	mov	r3, r2
 800fc3a:	009b      	lsls	r3, r3, #2
 800fc3c:	4413      	add	r3, r2
 800fc3e:	3b23      	subs	r3, #35	@ 0x23
 800fc40:	fa00 f203 	lsl.w	r2, r0, r3
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	430a      	orrs	r2, r1
 800fc4a:	631a      	str	r2, [r3, #48]	@ 0x30
 800fc4c:	e023      	b.n	800fc96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	685a      	ldr	r2, [r3, #4]
 800fc58:	4613      	mov	r3, r2
 800fc5a:	009b      	lsls	r3, r3, #2
 800fc5c:	4413      	add	r3, r2
 800fc5e:	3b41      	subs	r3, #65	@ 0x41
 800fc60:	221f      	movs	r2, #31
 800fc62:	fa02 f303 	lsl.w	r3, r2, r3
 800fc66:	43da      	mvns	r2, r3
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	400a      	ands	r2, r1
 800fc6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	b29b      	uxth	r3, r3
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	685a      	ldr	r2, [r3, #4]
 800fc82:	4613      	mov	r3, r2
 800fc84:	009b      	lsls	r3, r3, #2
 800fc86:	4413      	add	r3, r2
 800fc88:	3b41      	subs	r3, #65	@ 0x41
 800fc8a:	fa00 f203 	lsl.w	r2, r0, r3
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	430a      	orrs	r2, r1
 800fc94:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800fc96:	4b22      	ldr	r3, [pc, #136]	@ (800fd20 <HAL_ADC_ConfigChannel+0x234>)
 800fc98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	4a21      	ldr	r2, [pc, #132]	@ (800fd24 <HAL_ADC_ConfigChannel+0x238>)
 800fca0:	4293      	cmp	r3, r2
 800fca2:	d109      	bne.n	800fcb8 <HAL_ADC_ConfigChannel+0x1cc>
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	2b12      	cmp	r3, #18
 800fcaa:	d105      	bne.n	800fcb8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	685b      	ldr	r3, [r3, #4]
 800fcb0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	4a19      	ldr	r2, [pc, #100]	@ (800fd24 <HAL_ADC_ConfigChannel+0x238>)
 800fcbe:	4293      	cmp	r3, r2
 800fcc0:	d123      	bne.n	800fd0a <HAL_ADC_ConfigChannel+0x21e>
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	2b10      	cmp	r3, #16
 800fcc8:	d003      	beq.n	800fcd2 <HAL_ADC_ConfigChannel+0x1e6>
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	2b11      	cmp	r3, #17
 800fcd0:	d11b      	bne.n	800fd0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	685b      	ldr	r3, [r3, #4]
 800fcd6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	2b10      	cmp	r3, #16
 800fce4:	d111      	bne.n	800fd0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800fce6:	4b10      	ldr	r3, [pc, #64]	@ (800fd28 <HAL_ADC_ConfigChannel+0x23c>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4a10      	ldr	r2, [pc, #64]	@ (800fd2c <HAL_ADC_ConfigChannel+0x240>)
 800fcec:	fba2 2303 	umull	r2, r3, r2, r3
 800fcf0:	0c9a      	lsrs	r2, r3, #18
 800fcf2:	4613      	mov	r3, r2
 800fcf4:	009b      	lsls	r3, r3, #2
 800fcf6:	4413      	add	r3, r2
 800fcf8:	005b      	lsls	r3, r3, #1
 800fcfa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800fcfc:	e002      	b.n	800fd04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	3b01      	subs	r3, #1
 800fd02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d1f9      	bne.n	800fcfe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800fd12:	2300      	movs	r3, #0
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3714      	adds	r7, #20
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr
 800fd20:	40012300 	.word	0x40012300
 800fd24:	40012000 	.word	0x40012000
 800fd28:	2000232c 	.word	0x2000232c
 800fd2c:	431bde83 	.word	0x431bde83

0800fd30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800fd30:	b480      	push	{r7}
 800fd32:	b085      	sub	sp, #20
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800fd38:	4b79      	ldr	r3, [pc, #484]	@ (800ff20 <ADC_Init+0x1f0>)
 800fd3a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	685a      	ldr	r2, [r3, #4]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	431a      	orrs	r2, r3
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	685a      	ldr	r2, [r3, #4]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800fd64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	6859      	ldr	r1, [r3, #4]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	691b      	ldr	r3, [r3, #16]
 800fd70:	021a      	lsls	r2, r3, #8
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	430a      	orrs	r2, r1
 800fd78:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	685a      	ldr	r2, [r3, #4]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800fd88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	6859      	ldr	r1, [r3, #4]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	689a      	ldr	r2, [r3, #8]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	430a      	orrs	r2, r1
 800fd9a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	689a      	ldr	r2, [r3, #8]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800fdaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	6899      	ldr	r1, [r3, #8]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	68da      	ldr	r2, [r3, #12]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	430a      	orrs	r2, r1
 800fdbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdc2:	4a58      	ldr	r2, [pc, #352]	@ (800ff24 <ADC_Init+0x1f4>)
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	d022      	beq.n	800fe0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	689a      	ldr	r2, [r3, #8]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800fdd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	6899      	ldr	r1, [r3, #8]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	430a      	orrs	r2, r1
 800fde8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	689a      	ldr	r2, [r3, #8]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800fdf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	6899      	ldr	r1, [r3, #8]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	430a      	orrs	r2, r1
 800fe0a:	609a      	str	r2, [r3, #8]
 800fe0c:	e00f      	b.n	800fe2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	689a      	ldr	r2, [r3, #8]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800fe1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	689a      	ldr	r2, [r3, #8]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800fe2c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	689a      	ldr	r2, [r3, #8]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	f022 0202 	bic.w	r2, r2, #2
 800fe3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	6899      	ldr	r1, [r3, #8]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	7e1b      	ldrb	r3, [r3, #24]
 800fe48:	005a      	lsls	r2, r3, #1
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	430a      	orrs	r2, r1
 800fe50:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d01b      	beq.n	800fe94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	685a      	ldr	r2, [r3, #4]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fe6a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	685a      	ldr	r2, [r3, #4]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800fe7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	6859      	ldr	r1, [r3, #4]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe86:	3b01      	subs	r3, #1
 800fe88:	035a      	lsls	r2, r3, #13
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	430a      	orrs	r2, r1
 800fe90:	605a      	str	r2, [r3, #4]
 800fe92:	e007      	b.n	800fea4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	685a      	ldr	r2, [r3, #4]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800fea2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800feb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	69db      	ldr	r3, [r3, #28]
 800febe:	3b01      	subs	r3, #1
 800fec0:	051a      	lsls	r2, r3, #20
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	430a      	orrs	r2, r1
 800fec8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	689a      	ldr	r2, [r3, #8]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800fed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	6899      	ldr	r1, [r3, #8]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fee6:	025a      	lsls	r2, r3, #9
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	430a      	orrs	r2, r1
 800feee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	689a      	ldr	r2, [r3, #8]
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fefe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	6899      	ldr	r1, [r3, #8]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	695b      	ldr	r3, [r3, #20]
 800ff0a:	029a      	lsls	r2, r3, #10
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	430a      	orrs	r2, r1
 800ff12:	609a      	str	r2, [r3, #8]
}
 800ff14:	bf00      	nop
 800ff16:	3714      	adds	r7, #20
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr
 800ff20:	40012300 	.word	0x40012300
 800ff24:	0f000001 	.word	0x0f000001

0800ff28 <__NVIC_SetPriorityGrouping>:
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b085      	sub	sp, #20
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f003 0307 	and.w	r3, r3, #7
 800ff36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ff38:	4b0c      	ldr	r3, [pc, #48]	@ (800ff6c <__NVIC_SetPriorityGrouping+0x44>)
 800ff3a:	68db      	ldr	r3, [r3, #12]
 800ff3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ff3e:	68ba      	ldr	r2, [r7, #8]
 800ff40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800ff44:	4013      	ands	r3, r2
 800ff46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ff50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800ff54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ff58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ff5a:	4a04      	ldr	r2, [pc, #16]	@ (800ff6c <__NVIC_SetPriorityGrouping+0x44>)
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	60d3      	str	r3, [r2, #12]
}
 800ff60:	bf00      	nop
 800ff62:	3714      	adds	r7, #20
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr
 800ff6c:	e000ed00 	.word	0xe000ed00

0800ff70 <__NVIC_GetPriorityGrouping>:
{
 800ff70:	b480      	push	{r7}
 800ff72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ff74:	4b04      	ldr	r3, [pc, #16]	@ (800ff88 <__NVIC_GetPriorityGrouping+0x18>)
 800ff76:	68db      	ldr	r3, [r3, #12]
 800ff78:	0a1b      	lsrs	r3, r3, #8
 800ff7a:	f003 0307 	and.w	r3, r3, #7
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr
 800ff88:	e000ed00 	.word	0xe000ed00

0800ff8c <__NVIC_SetPriority>:
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b083      	sub	sp, #12
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	4603      	mov	r3, r0
 800ff94:	6039      	str	r1, [r7, #0]
 800ff96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ff98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	db0a      	blt.n	800ffb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	b2da      	uxtb	r2, r3
 800ffa4:	490c      	ldr	r1, [pc, #48]	@ (800ffd8 <__NVIC_SetPriority+0x4c>)
 800ffa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffaa:	0112      	lsls	r2, r2, #4
 800ffac:	b2d2      	uxtb	r2, r2
 800ffae:	440b      	add	r3, r1
 800ffb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ffb4:	e00a      	b.n	800ffcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	b2da      	uxtb	r2, r3
 800ffba:	4908      	ldr	r1, [pc, #32]	@ (800ffdc <__NVIC_SetPriority+0x50>)
 800ffbc:	79fb      	ldrb	r3, [r7, #7]
 800ffbe:	f003 030f 	and.w	r3, r3, #15
 800ffc2:	3b04      	subs	r3, #4
 800ffc4:	0112      	lsls	r2, r2, #4
 800ffc6:	b2d2      	uxtb	r2, r2
 800ffc8:	440b      	add	r3, r1
 800ffca:	761a      	strb	r2, [r3, #24]
}
 800ffcc:	bf00      	nop
 800ffce:	370c      	adds	r7, #12
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr
 800ffd8:	e000e100 	.word	0xe000e100
 800ffdc:	e000ed00 	.word	0xe000ed00

0800ffe0 <NVIC_EncodePriority>:
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b089      	sub	sp, #36	@ 0x24
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f003 0307 	and.w	r3, r3, #7
 800fff2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800fff4:	69fb      	ldr	r3, [r7, #28]
 800fff6:	f1c3 0307 	rsb	r3, r3, #7
 800fffa:	2b04      	cmp	r3, #4
 800fffc:	bf28      	it	cs
 800fffe:	2304      	movcs	r3, #4
 8010000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010002:	69fb      	ldr	r3, [r7, #28]
 8010004:	3304      	adds	r3, #4
 8010006:	2b06      	cmp	r3, #6
 8010008:	d902      	bls.n	8010010 <NVIC_EncodePriority+0x30>
 801000a:	69fb      	ldr	r3, [r7, #28]
 801000c:	3b03      	subs	r3, #3
 801000e:	e000      	b.n	8010012 <NVIC_EncodePriority+0x32>
 8010010:	2300      	movs	r3, #0
 8010012:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010014:	f04f 32ff 	mov.w	r2, #4294967295
 8010018:	69bb      	ldr	r3, [r7, #24]
 801001a:	fa02 f303 	lsl.w	r3, r2, r3
 801001e:	43da      	mvns	r2, r3
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	401a      	ands	r2, r3
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010028:	f04f 31ff 	mov.w	r1, #4294967295
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	fa01 f303 	lsl.w	r3, r1, r3
 8010032:	43d9      	mvns	r1, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010038:	4313      	orrs	r3, r2
}
 801003a:	4618      	mov	r0, r3
 801003c:	3724      	adds	r7, #36	@ 0x24
 801003e:	46bd      	mov	sp, r7
 8010040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010044:	4770      	bx	lr
	...

08010048 <SysTick_Config>:
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	3b01      	subs	r3, #1
 8010054:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010058:	d301      	bcc.n	801005e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 801005a:	2301      	movs	r3, #1
 801005c:	e00f      	b.n	801007e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801005e:	4a0a      	ldr	r2, [pc, #40]	@ (8010088 <SysTick_Config+0x40>)
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	3b01      	subs	r3, #1
 8010064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010066:	210f      	movs	r1, #15
 8010068:	f04f 30ff 	mov.w	r0, #4294967295
 801006c:	f7ff ff8e 	bl	800ff8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010070:	4b05      	ldr	r3, [pc, #20]	@ (8010088 <SysTick_Config+0x40>)
 8010072:	2200      	movs	r2, #0
 8010074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010076:	4b04      	ldr	r3, [pc, #16]	@ (8010088 <SysTick_Config+0x40>)
 8010078:	2207      	movs	r2, #7
 801007a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 801007c:	2300      	movs	r3, #0
}
 801007e:	4618      	mov	r0, r3
 8010080:	3708      	adds	r7, #8
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
 8010086:	bf00      	nop
 8010088:	e000e010 	.word	0xe000e010

0801008c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f7ff ff47 	bl	800ff28 <__NVIC_SetPriorityGrouping>
}
 801009a:	bf00      	nop
 801009c:	3708      	adds	r7, #8
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}

080100a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80100a2:	b580      	push	{r7, lr}
 80100a4:	b086      	sub	sp, #24
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	4603      	mov	r3, r0
 80100aa:	60b9      	str	r1, [r7, #8]
 80100ac:	607a      	str	r2, [r7, #4]
 80100ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80100b0:	2300      	movs	r3, #0
 80100b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80100b4:	f7ff ff5c 	bl	800ff70 <__NVIC_GetPriorityGrouping>
 80100b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80100ba:	687a      	ldr	r2, [r7, #4]
 80100bc:	68b9      	ldr	r1, [r7, #8]
 80100be:	6978      	ldr	r0, [r7, #20]
 80100c0:	f7ff ff8e 	bl	800ffe0 <NVIC_EncodePriority>
 80100c4:	4602      	mov	r2, r0
 80100c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100ca:	4611      	mov	r1, r2
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7ff ff5d 	bl	800ff8c <__NVIC_SetPriority>
}
 80100d2:	bf00      	nop
 80100d4:	3718      	adds	r7, #24
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}

080100da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80100da:	b580      	push	{r7, lr}
 80100dc:	b082      	sub	sp, #8
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f7ff ffb0 	bl	8010048 <SysTick_Config>
 80100e8:	4603      	mov	r3, r0
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3708      	adds	r7, #8
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}
	...

080100f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b089      	sub	sp, #36	@ 0x24
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80100fe:	2300      	movs	r3, #0
 8010100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010102:	2300      	movs	r3, #0
 8010104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010106:	2300      	movs	r3, #0
 8010108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801010a:	2300      	movs	r3, #0
 801010c:	61fb      	str	r3, [r7, #28]
 801010e:	e16b      	b.n	80103e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010110:	2201      	movs	r2, #1
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	fa02 f303 	lsl.w	r3, r2, r3
 8010118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	697a      	ldr	r2, [r7, #20]
 8010120:	4013      	ands	r3, r2
 8010122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010124:	693a      	ldr	r2, [r7, #16]
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	429a      	cmp	r2, r3
 801012a:	f040 815a 	bne.w	80103e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	f003 0303 	and.w	r3, r3, #3
 8010136:	2b01      	cmp	r3, #1
 8010138:	d005      	beq.n	8010146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	685b      	ldr	r3, [r3, #4]
 801013e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010142:	2b02      	cmp	r3, #2
 8010144:	d130      	bne.n	80101a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	689b      	ldr	r3, [r3, #8]
 801014a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801014c:	69fb      	ldr	r3, [r7, #28]
 801014e:	005b      	lsls	r3, r3, #1
 8010150:	2203      	movs	r2, #3
 8010152:	fa02 f303 	lsl.w	r3, r2, r3
 8010156:	43db      	mvns	r3, r3
 8010158:	69ba      	ldr	r2, [r7, #24]
 801015a:	4013      	ands	r3, r2
 801015c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	68da      	ldr	r2, [r3, #12]
 8010162:	69fb      	ldr	r3, [r7, #28]
 8010164:	005b      	lsls	r3, r3, #1
 8010166:	fa02 f303 	lsl.w	r3, r2, r3
 801016a:	69ba      	ldr	r2, [r7, #24]
 801016c:	4313      	orrs	r3, r2
 801016e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	69ba      	ldr	r2, [r7, #24]
 8010174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	685b      	ldr	r3, [r3, #4]
 801017a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801017c:	2201      	movs	r2, #1
 801017e:	69fb      	ldr	r3, [r7, #28]
 8010180:	fa02 f303 	lsl.w	r3, r2, r3
 8010184:	43db      	mvns	r3, r3
 8010186:	69ba      	ldr	r2, [r7, #24]
 8010188:	4013      	ands	r3, r2
 801018a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	685b      	ldr	r3, [r3, #4]
 8010190:	091b      	lsrs	r3, r3, #4
 8010192:	f003 0201 	and.w	r2, r3, #1
 8010196:	69fb      	ldr	r3, [r7, #28]
 8010198:	fa02 f303 	lsl.w	r3, r2, r3
 801019c:	69ba      	ldr	r2, [r7, #24]
 801019e:	4313      	orrs	r3, r2
 80101a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	69ba      	ldr	r2, [r7, #24]
 80101a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	f003 0303 	and.w	r3, r3, #3
 80101b0:	2b03      	cmp	r3, #3
 80101b2:	d017      	beq.n	80101e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	68db      	ldr	r3, [r3, #12]
 80101b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80101ba:	69fb      	ldr	r3, [r7, #28]
 80101bc:	005b      	lsls	r3, r3, #1
 80101be:	2203      	movs	r2, #3
 80101c0:	fa02 f303 	lsl.w	r3, r2, r3
 80101c4:	43db      	mvns	r3, r3
 80101c6:	69ba      	ldr	r2, [r7, #24]
 80101c8:	4013      	ands	r3, r2
 80101ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	689a      	ldr	r2, [r3, #8]
 80101d0:	69fb      	ldr	r3, [r7, #28]
 80101d2:	005b      	lsls	r3, r3, #1
 80101d4:	fa02 f303 	lsl.w	r3, r2, r3
 80101d8:	69ba      	ldr	r2, [r7, #24]
 80101da:	4313      	orrs	r3, r2
 80101dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	69ba      	ldr	r2, [r7, #24]
 80101e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	f003 0303 	and.w	r3, r3, #3
 80101ec:	2b02      	cmp	r3, #2
 80101ee:	d123      	bne.n	8010238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80101f0:	69fb      	ldr	r3, [r7, #28]
 80101f2:	08da      	lsrs	r2, r3, #3
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	3208      	adds	r2, #8
 80101f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80101fe:	69fb      	ldr	r3, [r7, #28]
 8010200:	f003 0307 	and.w	r3, r3, #7
 8010204:	009b      	lsls	r3, r3, #2
 8010206:	220f      	movs	r2, #15
 8010208:	fa02 f303 	lsl.w	r3, r2, r3
 801020c:	43db      	mvns	r3, r3
 801020e:	69ba      	ldr	r2, [r7, #24]
 8010210:	4013      	ands	r3, r2
 8010212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	691a      	ldr	r2, [r3, #16]
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	f003 0307 	and.w	r3, r3, #7
 801021e:	009b      	lsls	r3, r3, #2
 8010220:	fa02 f303 	lsl.w	r3, r2, r3
 8010224:	69ba      	ldr	r2, [r7, #24]
 8010226:	4313      	orrs	r3, r2
 8010228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801022a:	69fb      	ldr	r3, [r7, #28]
 801022c:	08da      	lsrs	r2, r3, #3
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	3208      	adds	r2, #8
 8010232:	69b9      	ldr	r1, [r7, #24]
 8010234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801023e:	69fb      	ldr	r3, [r7, #28]
 8010240:	005b      	lsls	r3, r3, #1
 8010242:	2203      	movs	r2, #3
 8010244:	fa02 f303 	lsl.w	r3, r2, r3
 8010248:	43db      	mvns	r3, r3
 801024a:	69ba      	ldr	r2, [r7, #24]
 801024c:	4013      	ands	r3, r2
 801024e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	685b      	ldr	r3, [r3, #4]
 8010254:	f003 0203 	and.w	r2, r3, #3
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	005b      	lsls	r3, r3, #1
 801025c:	fa02 f303 	lsl.w	r3, r2, r3
 8010260:	69ba      	ldr	r2, [r7, #24]
 8010262:	4313      	orrs	r3, r2
 8010264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	69ba      	ldr	r2, [r7, #24]
 801026a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	685b      	ldr	r3, [r3, #4]
 8010270:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8010274:	2b00      	cmp	r3, #0
 8010276:	f000 80b4 	beq.w	80103e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801027a:	2300      	movs	r3, #0
 801027c:	60fb      	str	r3, [r7, #12]
 801027e:	4b60      	ldr	r3, [pc, #384]	@ (8010400 <HAL_GPIO_Init+0x30c>)
 8010280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010282:	4a5f      	ldr	r2, [pc, #380]	@ (8010400 <HAL_GPIO_Init+0x30c>)
 8010284:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010288:	6453      	str	r3, [r2, #68]	@ 0x44
 801028a:	4b5d      	ldr	r3, [pc, #372]	@ (8010400 <HAL_GPIO_Init+0x30c>)
 801028c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801028e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010292:	60fb      	str	r3, [r7, #12]
 8010294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010296:	4a5b      	ldr	r2, [pc, #364]	@ (8010404 <HAL_GPIO_Init+0x310>)
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	089b      	lsrs	r3, r3, #2
 801029c:	3302      	adds	r3, #2
 801029e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	f003 0303 	and.w	r3, r3, #3
 80102aa:	009b      	lsls	r3, r3, #2
 80102ac:	220f      	movs	r2, #15
 80102ae:	fa02 f303 	lsl.w	r3, r2, r3
 80102b2:	43db      	mvns	r3, r3
 80102b4:	69ba      	ldr	r2, [r7, #24]
 80102b6:	4013      	ands	r3, r2
 80102b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	4a52      	ldr	r2, [pc, #328]	@ (8010408 <HAL_GPIO_Init+0x314>)
 80102be:	4293      	cmp	r3, r2
 80102c0:	d02b      	beq.n	801031a <HAL_GPIO_Init+0x226>
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	4a51      	ldr	r2, [pc, #324]	@ (801040c <HAL_GPIO_Init+0x318>)
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d025      	beq.n	8010316 <HAL_GPIO_Init+0x222>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	4a50      	ldr	r2, [pc, #320]	@ (8010410 <HAL_GPIO_Init+0x31c>)
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d01f      	beq.n	8010312 <HAL_GPIO_Init+0x21e>
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	4a4f      	ldr	r2, [pc, #316]	@ (8010414 <HAL_GPIO_Init+0x320>)
 80102d6:	4293      	cmp	r3, r2
 80102d8:	d019      	beq.n	801030e <HAL_GPIO_Init+0x21a>
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	4a4e      	ldr	r2, [pc, #312]	@ (8010418 <HAL_GPIO_Init+0x324>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	d013      	beq.n	801030a <HAL_GPIO_Init+0x216>
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	4a4d      	ldr	r2, [pc, #308]	@ (801041c <HAL_GPIO_Init+0x328>)
 80102e6:	4293      	cmp	r3, r2
 80102e8:	d00d      	beq.n	8010306 <HAL_GPIO_Init+0x212>
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4a4c      	ldr	r2, [pc, #304]	@ (8010420 <HAL_GPIO_Init+0x32c>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d007      	beq.n	8010302 <HAL_GPIO_Init+0x20e>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	4a4b      	ldr	r2, [pc, #300]	@ (8010424 <HAL_GPIO_Init+0x330>)
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d101      	bne.n	80102fe <HAL_GPIO_Init+0x20a>
 80102fa:	2307      	movs	r3, #7
 80102fc:	e00e      	b.n	801031c <HAL_GPIO_Init+0x228>
 80102fe:	2308      	movs	r3, #8
 8010300:	e00c      	b.n	801031c <HAL_GPIO_Init+0x228>
 8010302:	2306      	movs	r3, #6
 8010304:	e00a      	b.n	801031c <HAL_GPIO_Init+0x228>
 8010306:	2305      	movs	r3, #5
 8010308:	e008      	b.n	801031c <HAL_GPIO_Init+0x228>
 801030a:	2304      	movs	r3, #4
 801030c:	e006      	b.n	801031c <HAL_GPIO_Init+0x228>
 801030e:	2303      	movs	r3, #3
 8010310:	e004      	b.n	801031c <HAL_GPIO_Init+0x228>
 8010312:	2302      	movs	r3, #2
 8010314:	e002      	b.n	801031c <HAL_GPIO_Init+0x228>
 8010316:	2301      	movs	r3, #1
 8010318:	e000      	b.n	801031c <HAL_GPIO_Init+0x228>
 801031a:	2300      	movs	r3, #0
 801031c:	69fa      	ldr	r2, [r7, #28]
 801031e:	f002 0203 	and.w	r2, r2, #3
 8010322:	0092      	lsls	r2, r2, #2
 8010324:	4093      	lsls	r3, r2
 8010326:	69ba      	ldr	r2, [r7, #24]
 8010328:	4313      	orrs	r3, r2
 801032a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801032c:	4935      	ldr	r1, [pc, #212]	@ (8010404 <HAL_GPIO_Init+0x310>)
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	089b      	lsrs	r3, r3, #2
 8010332:	3302      	adds	r3, #2
 8010334:	69ba      	ldr	r2, [r7, #24]
 8010336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801033a:	4b3b      	ldr	r3, [pc, #236]	@ (8010428 <HAL_GPIO_Init+0x334>)
 801033c:	689b      	ldr	r3, [r3, #8]
 801033e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	43db      	mvns	r3, r3
 8010344:	69ba      	ldr	r2, [r7, #24]
 8010346:	4013      	ands	r3, r2
 8010348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010352:	2b00      	cmp	r3, #0
 8010354:	d003      	beq.n	801035e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8010356:	69ba      	ldr	r2, [r7, #24]
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	4313      	orrs	r3, r2
 801035c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801035e:	4a32      	ldr	r2, [pc, #200]	@ (8010428 <HAL_GPIO_Init+0x334>)
 8010360:	69bb      	ldr	r3, [r7, #24]
 8010362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010364:	4b30      	ldr	r3, [pc, #192]	@ (8010428 <HAL_GPIO_Init+0x334>)
 8010366:	68db      	ldr	r3, [r3, #12]
 8010368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	43db      	mvns	r3, r3
 801036e:	69ba      	ldr	r2, [r7, #24]
 8010370:	4013      	ands	r3, r2
 8010372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801037c:	2b00      	cmp	r3, #0
 801037e:	d003      	beq.n	8010388 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8010380:	69ba      	ldr	r2, [r7, #24]
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	4313      	orrs	r3, r2
 8010386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010388:	4a27      	ldr	r2, [pc, #156]	@ (8010428 <HAL_GPIO_Init+0x334>)
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801038e:	4b26      	ldr	r3, [pc, #152]	@ (8010428 <HAL_GPIO_Init+0x334>)
 8010390:	685b      	ldr	r3, [r3, #4]
 8010392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	43db      	mvns	r3, r3
 8010398:	69ba      	ldr	r2, [r7, #24]
 801039a:	4013      	ands	r3, r2
 801039c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d003      	beq.n	80103b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80103aa:	69ba      	ldr	r2, [r7, #24]
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	4313      	orrs	r3, r2
 80103b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80103b2:	4a1d      	ldr	r2, [pc, #116]	@ (8010428 <HAL_GPIO_Init+0x334>)
 80103b4:	69bb      	ldr	r3, [r7, #24]
 80103b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80103b8:	4b1b      	ldr	r3, [pc, #108]	@ (8010428 <HAL_GPIO_Init+0x334>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	43db      	mvns	r3, r3
 80103c2:	69ba      	ldr	r2, [r7, #24]
 80103c4:	4013      	ands	r3, r2
 80103c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d003      	beq.n	80103dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80103d4:	69ba      	ldr	r2, [r7, #24]
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	4313      	orrs	r3, r2
 80103da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80103dc:	4a12      	ldr	r2, [pc, #72]	@ (8010428 <HAL_GPIO_Init+0x334>)
 80103de:	69bb      	ldr	r3, [r7, #24]
 80103e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80103e2:	69fb      	ldr	r3, [r7, #28]
 80103e4:	3301      	adds	r3, #1
 80103e6:	61fb      	str	r3, [r7, #28]
 80103e8:	69fb      	ldr	r3, [r7, #28]
 80103ea:	2b0f      	cmp	r3, #15
 80103ec:	f67f ae90 	bls.w	8010110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80103f0:	bf00      	nop
 80103f2:	bf00      	nop
 80103f4:	3724      	adds	r7, #36	@ 0x24
 80103f6:	46bd      	mov	sp, r7
 80103f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop
 8010400:	40023800 	.word	0x40023800
 8010404:	40013800 	.word	0x40013800
 8010408:	40020000 	.word	0x40020000
 801040c:	40020400 	.word	0x40020400
 8010410:	40020800 	.word	0x40020800
 8010414:	40020c00 	.word	0x40020c00
 8010418:	40021000 	.word	0x40021000
 801041c:	40021400 	.word	0x40021400
 8010420:	40021800 	.word	0x40021800
 8010424:	40021c00 	.word	0x40021c00
 8010428:	40013c00 	.word	0x40013c00

0801042c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b082      	sub	sp, #8
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d101      	bne.n	801043e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801043a:	2301      	movs	r3, #1
 801043c:	e07b      	b.n	8010536 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010442:	2b00      	cmp	r3, #0
 8010444:	d108      	bne.n	8010458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	685b      	ldr	r3, [r3, #4]
 801044a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801044e:	d009      	beq.n	8010464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2200      	movs	r2, #0
 8010454:	61da      	str	r2, [r3, #28]
 8010456:	e005      	b.n	8010464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2200      	movs	r2, #0
 801045c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2200      	movs	r2, #0
 8010462:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2200      	movs	r2, #0
 8010468:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010470:	b2db      	uxtb	r3, r3
 8010472:	2b00      	cmp	r3, #0
 8010474:	d106      	bne.n	8010484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2200      	movs	r2, #0
 801047a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f7fe fe0c 	bl	800f09c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2202      	movs	r2, #2
 8010488:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	681a      	ldr	r2, [r3, #0]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801049a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	689b      	ldr	r3, [r3, #8]
 80104a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80104ac:	431a      	orrs	r2, r3
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	68db      	ldr	r3, [r3, #12]
 80104b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80104b6:	431a      	orrs	r2, r3
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	691b      	ldr	r3, [r3, #16]
 80104bc:	f003 0302 	and.w	r3, r3, #2
 80104c0:	431a      	orrs	r2, r3
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	695b      	ldr	r3, [r3, #20]
 80104c6:	f003 0301 	and.w	r3, r3, #1
 80104ca:	431a      	orrs	r2, r3
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	699b      	ldr	r3, [r3, #24]
 80104d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80104d4:	431a      	orrs	r2, r3
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	69db      	ldr	r3, [r3, #28]
 80104da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80104de:	431a      	orrs	r2, r3
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6a1b      	ldr	r3, [r3, #32]
 80104e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104e8:	ea42 0103 	orr.w	r1, r2, r3
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	430a      	orrs	r2, r1
 80104fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	699b      	ldr	r3, [r3, #24]
 8010500:	0c1b      	lsrs	r3, r3, #16
 8010502:	f003 0104 	and.w	r1, r3, #4
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801050a:	f003 0210 	and.w	r2, r3, #16
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	430a      	orrs	r2, r1
 8010514:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	69da      	ldr	r2, [r3, #28]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8010524:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2200      	movs	r2, #0
 801052a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2201      	movs	r2, #1
 8010530:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8010534:	2300      	movs	r3, #0
}
 8010536:	4618      	mov	r0, r3
 8010538:	3708      	adds	r7, #8
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}

0801053e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801053e:	b580      	push	{r7, lr}
 8010540:	b088      	sub	sp, #32
 8010542:	af00      	add	r7, sp, #0
 8010544:	60f8      	str	r0, [r7, #12]
 8010546:	60b9      	str	r1, [r7, #8]
 8010548:	603b      	str	r3, [r7, #0]
 801054a:	4613      	mov	r3, r2
 801054c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801054e:	f7ff fa7d 	bl	800fa4c <HAL_GetTick>
 8010552:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8010554:	88fb      	ldrh	r3, [r7, #6]
 8010556:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801055e:	b2db      	uxtb	r3, r3
 8010560:	2b01      	cmp	r3, #1
 8010562:	d001      	beq.n	8010568 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8010564:	2302      	movs	r3, #2
 8010566:	e12a      	b.n	80107be <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d002      	beq.n	8010574 <HAL_SPI_Transmit+0x36>
 801056e:	88fb      	ldrh	r3, [r7, #6]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d101      	bne.n	8010578 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8010574:	2301      	movs	r3, #1
 8010576:	e122      	b.n	80107be <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801057e:	2b01      	cmp	r3, #1
 8010580:	d101      	bne.n	8010586 <HAL_SPI_Transmit+0x48>
 8010582:	2302      	movs	r3, #2
 8010584:	e11b      	b.n	80107be <HAL_SPI_Transmit+0x280>
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	2201      	movs	r2, #1
 801058a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	2203      	movs	r2, #3
 8010592:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2200      	movs	r2, #0
 801059a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	68ba      	ldr	r2, [r7, #8]
 80105a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	88fa      	ldrh	r2, [r7, #6]
 80105a6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	88fa      	ldrh	r2, [r7, #6]
 80105ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2200      	movs	r2, #0
 80105b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	2200      	movs	r2, #0
 80105b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	2200      	movs	r2, #0
 80105be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	2200      	movs	r2, #0
 80105c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2200      	movs	r2, #0
 80105ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	689b      	ldr	r3, [r3, #8]
 80105d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80105d4:	d10f      	bne.n	80105f6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	681a      	ldr	r2, [r3, #0]
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80105e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	681a      	ldr	r2, [r3, #0]
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80105f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010600:	2b40      	cmp	r3, #64	@ 0x40
 8010602:	d007      	beq.n	8010614 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	681a      	ldr	r2, [r3, #0]
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010612:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	68db      	ldr	r3, [r3, #12]
 8010618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801061c:	d152      	bne.n	80106c4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d002      	beq.n	801062c <HAL_SPI_Transmit+0xee>
 8010626:	8b7b      	ldrh	r3, [r7, #26]
 8010628:	2b01      	cmp	r3, #1
 801062a:	d145      	bne.n	80106b8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010630:	881a      	ldrh	r2, [r3, #0]
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801063c:	1c9a      	adds	r2, r3, #2
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010646:	b29b      	uxth	r3, r3
 8010648:	3b01      	subs	r3, #1
 801064a:	b29a      	uxth	r2, r3
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010650:	e032      	b.n	80106b8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	689b      	ldr	r3, [r3, #8]
 8010658:	f003 0302 	and.w	r3, r3, #2
 801065c:	2b02      	cmp	r3, #2
 801065e:	d112      	bne.n	8010686 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010664:	881a      	ldrh	r2, [r3, #0]
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010670:	1c9a      	adds	r2, r3, #2
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801067a:	b29b      	uxth	r3, r3
 801067c:	3b01      	subs	r3, #1
 801067e:	b29a      	uxth	r2, r3
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	86da      	strh	r2, [r3, #54]	@ 0x36
 8010684:	e018      	b.n	80106b8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010686:	f7ff f9e1 	bl	800fa4c <HAL_GetTick>
 801068a:	4602      	mov	r2, r0
 801068c:	69fb      	ldr	r3, [r7, #28]
 801068e:	1ad3      	subs	r3, r2, r3
 8010690:	683a      	ldr	r2, [r7, #0]
 8010692:	429a      	cmp	r2, r3
 8010694:	d803      	bhi.n	801069e <HAL_SPI_Transmit+0x160>
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	f1b3 3fff 	cmp.w	r3, #4294967295
 801069c:	d102      	bne.n	80106a4 <HAL_SPI_Transmit+0x166>
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d109      	bne.n	80106b8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2201      	movs	r2, #1
 80106a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	2200      	movs	r2, #0
 80106b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80106b4:	2303      	movs	r3, #3
 80106b6:	e082      	b.n	80107be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80106bc:	b29b      	uxth	r3, r3
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d1c7      	bne.n	8010652 <HAL_SPI_Transmit+0x114>
 80106c2:	e053      	b.n	801076c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d002      	beq.n	80106d2 <HAL_SPI_Transmit+0x194>
 80106cc:	8b7b      	ldrh	r3, [r7, #26]
 80106ce:	2b01      	cmp	r3, #1
 80106d0:	d147      	bne.n	8010762 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	330c      	adds	r3, #12
 80106dc:	7812      	ldrb	r2, [r2, #0]
 80106de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106e4:	1c5a      	adds	r2, r3, #1
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80106ee:	b29b      	uxth	r3, r3
 80106f0:	3b01      	subs	r3, #1
 80106f2:	b29a      	uxth	r2, r3
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80106f8:	e033      	b.n	8010762 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	689b      	ldr	r3, [r3, #8]
 8010700:	f003 0302 	and.w	r3, r3, #2
 8010704:	2b02      	cmp	r3, #2
 8010706:	d113      	bne.n	8010730 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	330c      	adds	r3, #12
 8010712:	7812      	ldrb	r2, [r2, #0]
 8010714:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801071a:	1c5a      	adds	r2, r3, #1
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010724:	b29b      	uxth	r3, r3
 8010726:	3b01      	subs	r3, #1
 8010728:	b29a      	uxth	r2, r3
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	86da      	strh	r2, [r3, #54]	@ 0x36
 801072e:	e018      	b.n	8010762 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010730:	f7ff f98c 	bl	800fa4c <HAL_GetTick>
 8010734:	4602      	mov	r2, r0
 8010736:	69fb      	ldr	r3, [r7, #28]
 8010738:	1ad3      	subs	r3, r2, r3
 801073a:	683a      	ldr	r2, [r7, #0]
 801073c:	429a      	cmp	r2, r3
 801073e:	d803      	bhi.n	8010748 <HAL_SPI_Transmit+0x20a>
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010746:	d102      	bne.n	801074e <HAL_SPI_Transmit+0x210>
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d109      	bne.n	8010762 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	2201      	movs	r2, #1
 8010752:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	2200      	movs	r2, #0
 801075a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 801075e:	2303      	movs	r3, #3
 8010760:	e02d      	b.n	80107be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010766:	b29b      	uxth	r3, r3
 8010768:	2b00      	cmp	r3, #0
 801076a:	d1c6      	bne.n	80106fa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801076c:	69fa      	ldr	r2, [r7, #28]
 801076e:	6839      	ldr	r1, [r7, #0]
 8010770:	68f8      	ldr	r0, [r7, #12]
 8010772:	f000 fbd9 	bl	8010f28 <SPI_EndRxTxTransaction>
 8010776:	4603      	mov	r3, r0
 8010778:	2b00      	cmp	r3, #0
 801077a:	d002      	beq.n	8010782 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2220      	movs	r2, #32
 8010780:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	689b      	ldr	r3, [r3, #8]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d10a      	bne.n	80107a0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801078a:	2300      	movs	r3, #0
 801078c:	617b      	str	r3, [r7, #20]
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	68db      	ldr	r3, [r3, #12]
 8010794:	617b      	str	r3, [r7, #20]
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	689b      	ldr	r3, [r3, #8]
 801079c:	617b      	str	r3, [r7, #20]
 801079e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	2201      	movs	r2, #1
 80107a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2200      	movs	r2, #0
 80107ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d001      	beq.n	80107bc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80107b8:	2301      	movs	r3, #1
 80107ba:	e000      	b.n	80107be <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80107bc:	2300      	movs	r3, #0
  }
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3720      	adds	r7, #32
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}

080107c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80107c6:	b580      	push	{r7, lr}
 80107c8:	b088      	sub	sp, #32
 80107ca:	af02      	add	r7, sp, #8
 80107cc:	60f8      	str	r0, [r7, #12]
 80107ce:	60b9      	str	r1, [r7, #8]
 80107d0:	603b      	str	r3, [r7, #0]
 80107d2:	4613      	mov	r3, r2
 80107d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80107dc:	b2db      	uxtb	r3, r3
 80107de:	2b01      	cmp	r3, #1
 80107e0:	d001      	beq.n	80107e6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80107e2:	2302      	movs	r3, #2
 80107e4:	e104      	b.n	80109f0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	685b      	ldr	r3, [r3, #4]
 80107ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80107ee:	d112      	bne.n	8010816 <HAL_SPI_Receive+0x50>
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	689b      	ldr	r3, [r3, #8]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d10e      	bne.n	8010816 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2204      	movs	r2, #4
 80107fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010800:	88fa      	ldrh	r2, [r7, #6]
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	9300      	str	r3, [sp, #0]
 8010806:	4613      	mov	r3, r2
 8010808:	68ba      	ldr	r2, [r7, #8]
 801080a:	68b9      	ldr	r1, [r7, #8]
 801080c:	68f8      	ldr	r0, [r7, #12]
 801080e:	f000 f8f3 	bl	80109f8 <HAL_SPI_TransmitReceive>
 8010812:	4603      	mov	r3, r0
 8010814:	e0ec      	b.n	80109f0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010816:	f7ff f919 	bl	800fa4c <HAL_GetTick>
 801081a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d002      	beq.n	8010828 <HAL_SPI_Receive+0x62>
 8010822:	88fb      	ldrh	r3, [r7, #6]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d101      	bne.n	801082c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8010828:	2301      	movs	r3, #1
 801082a:	e0e1      	b.n	80109f0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010832:	2b01      	cmp	r3, #1
 8010834:	d101      	bne.n	801083a <HAL_SPI_Receive+0x74>
 8010836:	2302      	movs	r3, #2
 8010838:	e0da      	b.n	80109f0 <HAL_SPI_Receive+0x22a>
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	2201      	movs	r2, #1
 801083e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2204      	movs	r2, #4
 8010846:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	2200      	movs	r2, #0
 801084e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	68ba      	ldr	r2, [r7, #8]
 8010854:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	88fa      	ldrh	r2, [r7, #6]
 801085a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	88fa      	ldrh	r2, [r7, #6]
 8010860:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2200      	movs	r2, #0
 8010866:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2200      	movs	r2, #0
 801086c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	2200      	movs	r2, #0
 8010872:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	2200      	movs	r2, #0
 8010878:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2200      	movs	r2, #0
 801087e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	689b      	ldr	r3, [r3, #8]
 8010884:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010888:	d10f      	bne.n	80108aa <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	681a      	ldr	r2, [r3, #0]
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010898:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	681a      	ldr	r2, [r3, #0]
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80108a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108b4:	2b40      	cmp	r3, #64	@ 0x40
 80108b6:	d007      	beq.n	80108c8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	681a      	ldr	r2, [r3, #0]
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80108c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	68db      	ldr	r3, [r3, #12]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d170      	bne.n	80109b2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80108d0:	e035      	b.n	801093e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	689b      	ldr	r3, [r3, #8]
 80108d8:	f003 0301 	and.w	r3, r3, #1
 80108dc:	2b01      	cmp	r3, #1
 80108de:	d115      	bne.n	801090c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f103 020c 	add.w	r2, r3, #12
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108ec:	7812      	ldrb	r2, [r2, #0]
 80108ee:	b2d2      	uxtb	r2, r2
 80108f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108f6:	1c5a      	adds	r2, r3, #1
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010900:	b29b      	uxth	r3, r3
 8010902:	3b01      	subs	r3, #1
 8010904:	b29a      	uxth	r2, r3
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801090a:	e018      	b.n	801093e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801090c:	f7ff f89e 	bl	800fa4c <HAL_GetTick>
 8010910:	4602      	mov	r2, r0
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	1ad3      	subs	r3, r2, r3
 8010916:	683a      	ldr	r2, [r7, #0]
 8010918:	429a      	cmp	r2, r3
 801091a:	d803      	bhi.n	8010924 <HAL_SPI_Receive+0x15e>
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010922:	d102      	bne.n	801092a <HAL_SPI_Receive+0x164>
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d109      	bne.n	801093e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	2201      	movs	r2, #1
 801092e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	2200      	movs	r2, #0
 8010936:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 801093a:	2303      	movs	r3, #3
 801093c:	e058      	b.n	80109f0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010942:	b29b      	uxth	r3, r3
 8010944:	2b00      	cmp	r3, #0
 8010946:	d1c4      	bne.n	80108d2 <HAL_SPI_Receive+0x10c>
 8010948:	e038      	b.n	80109bc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	689b      	ldr	r3, [r3, #8]
 8010950:	f003 0301 	and.w	r3, r3, #1
 8010954:	2b01      	cmp	r3, #1
 8010956:	d113      	bne.n	8010980 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	68da      	ldr	r2, [r3, #12]
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010962:	b292      	uxth	r2, r2
 8010964:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801096a:	1c9a      	adds	r2, r3, #2
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010974:	b29b      	uxth	r3, r3
 8010976:	3b01      	subs	r3, #1
 8010978:	b29a      	uxth	r2, r3
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801097e:	e018      	b.n	80109b2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010980:	f7ff f864 	bl	800fa4c <HAL_GetTick>
 8010984:	4602      	mov	r2, r0
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	1ad3      	subs	r3, r2, r3
 801098a:	683a      	ldr	r2, [r7, #0]
 801098c:	429a      	cmp	r2, r3
 801098e:	d803      	bhi.n	8010998 <HAL_SPI_Receive+0x1d2>
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010996:	d102      	bne.n	801099e <HAL_SPI_Receive+0x1d8>
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d109      	bne.n	80109b2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	2201      	movs	r2, #1
 80109a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2200      	movs	r2, #0
 80109aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80109ae:	2303      	movs	r3, #3
 80109b0:	e01e      	b.n	80109f0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d1c6      	bne.n	801094a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80109bc:	697a      	ldr	r2, [r7, #20]
 80109be:	6839      	ldr	r1, [r7, #0]
 80109c0:	68f8      	ldr	r0, [r7, #12]
 80109c2:	f000 fa4b 	bl	8010e5c <SPI_EndRxTransaction>
 80109c6:	4603      	mov	r3, r0
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d002      	beq.n	80109d2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	2220      	movs	r2, #32
 80109d0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	2201      	movs	r2, #1
 80109d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	2200      	movs	r2, #0
 80109de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d001      	beq.n	80109ee <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80109ea:	2301      	movs	r3, #1
 80109ec:	e000      	b.n	80109f0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80109ee:	2300      	movs	r3, #0
  }
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3718      	adds	r7, #24
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b08a      	sub	sp, #40	@ 0x28
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	60f8      	str	r0, [r7, #12]
 8010a00:	60b9      	str	r1, [r7, #8]
 8010a02:	607a      	str	r2, [r7, #4]
 8010a04:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010a06:	2301      	movs	r3, #1
 8010a08:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010a0a:	f7ff f81f 	bl	800fa4c <HAL_GetTick>
 8010a0e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010a16:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	685b      	ldr	r3, [r3, #4]
 8010a1c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8010a1e:	887b      	ldrh	r3, [r7, #2]
 8010a20:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010a22:	7ffb      	ldrb	r3, [r7, #31]
 8010a24:	2b01      	cmp	r3, #1
 8010a26:	d00c      	beq.n	8010a42 <HAL_SPI_TransmitReceive+0x4a>
 8010a28:	69bb      	ldr	r3, [r7, #24]
 8010a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010a2e:	d106      	bne.n	8010a3e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	689b      	ldr	r3, [r3, #8]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d102      	bne.n	8010a3e <HAL_SPI_TransmitReceive+0x46>
 8010a38:	7ffb      	ldrb	r3, [r7, #31]
 8010a3a:	2b04      	cmp	r3, #4
 8010a3c:	d001      	beq.n	8010a42 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8010a3e:	2302      	movs	r3, #2
 8010a40:	e17f      	b.n	8010d42 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d005      	beq.n	8010a54 <HAL_SPI_TransmitReceive+0x5c>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d002      	beq.n	8010a54 <HAL_SPI_TransmitReceive+0x5c>
 8010a4e:	887b      	ldrh	r3, [r7, #2]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d101      	bne.n	8010a58 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8010a54:	2301      	movs	r3, #1
 8010a56:	e174      	b.n	8010d42 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010a5e:	2b01      	cmp	r3, #1
 8010a60:	d101      	bne.n	8010a66 <HAL_SPI_TransmitReceive+0x6e>
 8010a62:	2302      	movs	r3, #2
 8010a64:	e16d      	b.n	8010d42 <HAL_SPI_TransmitReceive+0x34a>
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	2201      	movs	r2, #1
 8010a6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010a74:	b2db      	uxtb	r3, r3
 8010a76:	2b04      	cmp	r3, #4
 8010a78:	d003      	beq.n	8010a82 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	2205      	movs	r2, #5
 8010a7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	2200      	movs	r2, #0
 8010a86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	687a      	ldr	r2, [r7, #4]
 8010a8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	887a      	ldrh	r2, [r7, #2]
 8010a92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	887a      	ldrh	r2, [r7, #2]
 8010a98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	68ba      	ldr	r2, [r7, #8]
 8010a9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	887a      	ldrh	r2, [r7, #2]
 8010aa4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	887a      	ldrh	r2, [r7, #2]
 8010aaa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ac2:	2b40      	cmp	r3, #64	@ 0x40
 8010ac4:	d007      	beq.n	8010ad6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	681a      	ldr	r2, [r3, #0]
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010ad4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	68db      	ldr	r3, [r3, #12]
 8010ada:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010ade:	d17e      	bne.n	8010bde <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	685b      	ldr	r3, [r3, #4]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d002      	beq.n	8010aee <HAL_SPI_TransmitReceive+0xf6>
 8010ae8:	8afb      	ldrh	r3, [r7, #22]
 8010aea:	2b01      	cmp	r3, #1
 8010aec:	d16c      	bne.n	8010bc8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010af2:	881a      	ldrh	r2, [r3, #0]
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010afe:	1c9a      	adds	r2, r3, #2
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010b08:	b29b      	uxth	r3, r3
 8010b0a:	3b01      	subs	r3, #1
 8010b0c:	b29a      	uxth	r2, r3
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010b12:	e059      	b.n	8010bc8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	689b      	ldr	r3, [r3, #8]
 8010b1a:	f003 0302 	and.w	r3, r3, #2
 8010b1e:	2b02      	cmp	r3, #2
 8010b20:	d11b      	bne.n	8010b5a <HAL_SPI_TransmitReceive+0x162>
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010b26:	b29b      	uxth	r3, r3
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d016      	beq.n	8010b5a <HAL_SPI_TransmitReceive+0x162>
 8010b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b2e:	2b01      	cmp	r3, #1
 8010b30:	d113      	bne.n	8010b5a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b36:	881a      	ldrh	r2, [r3, #0]
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b42:	1c9a      	adds	r2, r3, #2
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010b4c:	b29b      	uxth	r3, r3
 8010b4e:	3b01      	subs	r3, #1
 8010b50:	b29a      	uxth	r2, r3
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010b56:	2300      	movs	r3, #0
 8010b58:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	689b      	ldr	r3, [r3, #8]
 8010b60:	f003 0301 	and.w	r3, r3, #1
 8010b64:	2b01      	cmp	r3, #1
 8010b66:	d119      	bne.n	8010b9c <HAL_SPI_TransmitReceive+0x1a4>
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d014      	beq.n	8010b9c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	68da      	ldr	r2, [r3, #12]
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b7c:	b292      	uxth	r2, r2
 8010b7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b84:	1c9a      	adds	r2, r3, #2
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	3b01      	subs	r3, #1
 8010b92:	b29a      	uxth	r2, r3
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010b98:	2301      	movs	r3, #1
 8010b9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010b9c:	f7fe ff56 	bl	800fa4c <HAL_GetTick>
 8010ba0:	4602      	mov	r2, r0
 8010ba2:	6a3b      	ldr	r3, [r7, #32]
 8010ba4:	1ad3      	subs	r3, r2, r3
 8010ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d80d      	bhi.n	8010bc8 <HAL_SPI_TransmitReceive+0x1d0>
 8010bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bb2:	d009      	beq.n	8010bc8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	2201      	movs	r2, #1
 8010bb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8010bc4:	2303      	movs	r3, #3
 8010bc6:	e0bc      	b.n	8010d42 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010bcc:	b29b      	uxth	r3, r3
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d1a0      	bne.n	8010b14 <HAL_SPI_TransmitReceive+0x11c>
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d19b      	bne.n	8010b14 <HAL_SPI_TransmitReceive+0x11c>
 8010bdc:	e082      	b.n	8010ce4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	685b      	ldr	r3, [r3, #4]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d002      	beq.n	8010bec <HAL_SPI_TransmitReceive+0x1f4>
 8010be6:	8afb      	ldrh	r3, [r7, #22]
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d171      	bne.n	8010cd0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	330c      	adds	r3, #12
 8010bf6:	7812      	ldrb	r2, [r2, #0]
 8010bf8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010bfe:	1c5a      	adds	r2, r3, #1
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	3b01      	subs	r3, #1
 8010c0c:	b29a      	uxth	r2, r3
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010c12:	e05d      	b.n	8010cd0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	689b      	ldr	r3, [r3, #8]
 8010c1a:	f003 0302 	and.w	r3, r3, #2
 8010c1e:	2b02      	cmp	r3, #2
 8010c20:	d11c      	bne.n	8010c5c <HAL_SPI_TransmitReceive+0x264>
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010c26:	b29b      	uxth	r3, r3
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d017      	beq.n	8010c5c <HAL_SPI_TransmitReceive+0x264>
 8010c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c2e:	2b01      	cmp	r3, #1
 8010c30:	d114      	bne.n	8010c5c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	330c      	adds	r3, #12
 8010c3c:	7812      	ldrb	r2, [r2, #0]
 8010c3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c44:	1c5a      	adds	r2, r3, #1
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	3b01      	subs	r3, #1
 8010c52:	b29a      	uxth	r2, r3
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	689b      	ldr	r3, [r3, #8]
 8010c62:	f003 0301 	and.w	r3, r3, #1
 8010c66:	2b01      	cmp	r3, #1
 8010c68:	d119      	bne.n	8010c9e <HAL_SPI_TransmitReceive+0x2a6>
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010c6e:	b29b      	uxth	r3, r3
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d014      	beq.n	8010c9e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	68da      	ldr	r2, [r3, #12]
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c7e:	b2d2      	uxtb	r2, r2
 8010c80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c86:	1c5a      	adds	r2, r3, #1
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	3b01      	subs	r3, #1
 8010c94:	b29a      	uxth	r2, r3
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010c9e:	f7fe fed5 	bl	800fa4c <HAL_GetTick>
 8010ca2:	4602      	mov	r2, r0
 8010ca4:	6a3b      	ldr	r3, [r7, #32]
 8010ca6:	1ad3      	subs	r3, r2, r3
 8010ca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d803      	bhi.n	8010cb6 <HAL_SPI_TransmitReceive+0x2be>
 8010cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cb4:	d102      	bne.n	8010cbc <HAL_SPI_TransmitReceive+0x2c4>
 8010cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d109      	bne.n	8010cd0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8010ccc:	2303      	movs	r3, #3
 8010cce:	e038      	b.n	8010d42 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010cd4:	b29b      	uxth	r3, r3
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d19c      	bne.n	8010c14 <HAL_SPI_TransmitReceive+0x21c>
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d197      	bne.n	8010c14 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010ce4:	6a3a      	ldr	r2, [r7, #32]
 8010ce6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010ce8:	68f8      	ldr	r0, [r7, #12]
 8010cea:	f000 f91d 	bl	8010f28 <SPI_EndRxTxTransaction>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d008      	beq.n	8010d06 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	2220      	movs	r2, #32
 8010cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8010d02:	2301      	movs	r3, #1
 8010d04:	e01d      	b.n	8010d42 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	689b      	ldr	r3, [r3, #8]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d10a      	bne.n	8010d24 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010d0e:	2300      	movs	r3, #0
 8010d10:	613b      	str	r3, [r7, #16]
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	68db      	ldr	r3, [r3, #12]
 8010d18:	613b      	str	r3, [r7, #16]
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	689b      	ldr	r3, [r3, #8]
 8010d20:	613b      	str	r3, [r7, #16]
 8010d22:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	2201      	movs	r2, #1
 8010d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d001      	beq.n	8010d40 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	e000      	b.n	8010d42 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8010d40:	2300      	movs	r3, #0
  }
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3728      	adds	r7, #40	@ 0x28
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
	...

08010d4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b088      	sub	sp, #32
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	60f8      	str	r0, [r7, #12]
 8010d54:	60b9      	str	r1, [r7, #8]
 8010d56:	603b      	str	r3, [r7, #0]
 8010d58:	4613      	mov	r3, r2
 8010d5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010d5c:	f7fe fe76 	bl	800fa4c <HAL_GetTick>
 8010d60:	4602      	mov	r2, r0
 8010d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d64:	1a9b      	subs	r3, r3, r2
 8010d66:	683a      	ldr	r2, [r7, #0]
 8010d68:	4413      	add	r3, r2
 8010d6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010d6c:	f7fe fe6e 	bl	800fa4c <HAL_GetTick>
 8010d70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010d72:	4b39      	ldr	r3, [pc, #228]	@ (8010e58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	015b      	lsls	r3, r3, #5
 8010d78:	0d1b      	lsrs	r3, r3, #20
 8010d7a:	69fa      	ldr	r2, [r7, #28]
 8010d7c:	fb02 f303 	mul.w	r3, r2, r3
 8010d80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010d82:	e054      	b.n	8010e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d8a:	d050      	beq.n	8010e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010d8c:	f7fe fe5e 	bl	800fa4c <HAL_GetTick>
 8010d90:	4602      	mov	r2, r0
 8010d92:	69bb      	ldr	r3, [r7, #24]
 8010d94:	1ad3      	subs	r3, r2, r3
 8010d96:	69fa      	ldr	r2, [r7, #28]
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	d902      	bls.n	8010da2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8010d9c:	69fb      	ldr	r3, [r7, #28]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d13d      	bne.n	8010e1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	685a      	ldr	r2, [r3, #4]
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010db0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010dba:	d111      	bne.n	8010de0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	689b      	ldr	r3, [r3, #8]
 8010dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010dc4:	d004      	beq.n	8010dd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	689b      	ldr	r3, [r3, #8]
 8010dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010dce:	d107      	bne.n	8010de0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	681a      	ldr	r2, [r3, #0]
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010dde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010de4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010de8:	d10f      	bne.n	8010e0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	681a      	ldr	r2, [r3, #0]
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010df8:	601a      	str	r2, [r3, #0]
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	681a      	ldr	r2, [r3, #0]
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010e08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	2201      	movs	r2, #1
 8010e0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	2200      	movs	r2, #0
 8010e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8010e1a:	2303      	movs	r3, #3
 8010e1c:	e017      	b.n	8010e4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d101      	bne.n	8010e28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010e24:	2300      	movs	r3, #0
 8010e26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	3b01      	subs	r3, #1
 8010e2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	689a      	ldr	r2, [r3, #8]
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	4013      	ands	r3, r2
 8010e38:	68ba      	ldr	r2, [r7, #8]
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	bf0c      	ite	eq
 8010e3e:	2301      	moveq	r3, #1
 8010e40:	2300      	movne	r3, #0
 8010e42:	b2db      	uxtb	r3, r3
 8010e44:	461a      	mov	r2, r3
 8010e46:	79fb      	ldrb	r3, [r7, #7]
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	d19b      	bne.n	8010d84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010e4c:	2300      	movs	r3, #0
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3720      	adds	r7, #32
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}
 8010e56:	bf00      	nop
 8010e58:	2000232c 	.word	0x2000232c

08010e5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b086      	sub	sp, #24
 8010e60:	af02      	add	r7, sp, #8
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	685b      	ldr	r3, [r3, #4]
 8010e6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010e70:	d111      	bne.n	8010e96 <SPI_EndRxTransaction+0x3a>
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	689b      	ldr	r3, [r3, #8]
 8010e76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010e7a:	d004      	beq.n	8010e86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	689b      	ldr	r3, [r3, #8]
 8010e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010e84:	d107      	bne.n	8010e96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	681a      	ldr	r2, [r3, #0]
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010e94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010e9e:	d12a      	bne.n	8010ef6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	689b      	ldr	r3, [r3, #8]
 8010ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010ea8:	d012      	beq.n	8010ed0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	9300      	str	r3, [sp, #0]
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	2180      	movs	r1, #128	@ 0x80
 8010eb4:	68f8      	ldr	r0, [r7, #12]
 8010eb6:	f7ff ff49 	bl	8010d4c <SPI_WaitFlagStateUntilTimeout>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d02d      	beq.n	8010f1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ec4:	f043 0220 	orr.w	r2, r3, #32
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8010ecc:	2303      	movs	r3, #3
 8010ece:	e026      	b.n	8010f1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	9300      	str	r3, [sp, #0]
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	2101      	movs	r1, #1
 8010eda:	68f8      	ldr	r0, [r7, #12]
 8010edc:	f7ff ff36 	bl	8010d4c <SPI_WaitFlagStateUntilTimeout>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d01a      	beq.n	8010f1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010eea:	f043 0220 	orr.w	r2, r3, #32
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8010ef2:	2303      	movs	r3, #3
 8010ef4:	e013      	b.n	8010f1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	9300      	str	r3, [sp, #0]
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	2200      	movs	r2, #0
 8010efe:	2101      	movs	r1, #1
 8010f00:	68f8      	ldr	r0, [r7, #12]
 8010f02:	f7ff ff23 	bl	8010d4c <SPI_WaitFlagStateUntilTimeout>
 8010f06:	4603      	mov	r3, r0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d007      	beq.n	8010f1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f10:	f043 0220 	orr.w	r2, r3, #32
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8010f18:	2303      	movs	r3, #3
 8010f1a:	e000      	b.n	8010f1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8010f1c:	2300      	movs	r3, #0
}
 8010f1e:	4618      	mov	r0, r3
 8010f20:	3710      	adds	r7, #16
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd80      	pop	{r7, pc}
	...

08010f28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b088      	sub	sp, #32
 8010f2c:	af02      	add	r7, sp, #8
 8010f2e:	60f8      	str	r0, [r7, #12]
 8010f30:	60b9      	str	r1, [r7, #8]
 8010f32:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	9300      	str	r3, [sp, #0]
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	2201      	movs	r2, #1
 8010f3c:	2102      	movs	r1, #2
 8010f3e:	68f8      	ldr	r0, [r7, #12]
 8010f40:	f7ff ff04 	bl	8010d4c <SPI_WaitFlagStateUntilTimeout>
 8010f44:	4603      	mov	r3, r0
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d007      	beq.n	8010f5a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f4e:	f043 0220 	orr.w	r2, r3, #32
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8010f56:	2303      	movs	r3, #3
 8010f58:	e032      	b.n	8010fc0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8010fc8 <SPI_EndRxTxTransaction+0xa0>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8010fcc <SPI_EndRxTxTransaction+0xa4>)
 8010f60:	fba2 2303 	umull	r2, r3, r2, r3
 8010f64:	0d5b      	lsrs	r3, r3, #21
 8010f66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010f6a:	fb02 f303 	mul.w	r3, r2, r3
 8010f6e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	685b      	ldr	r3, [r3, #4]
 8010f74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010f78:	d112      	bne.n	8010fa0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	9300      	str	r3, [sp, #0]
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	2200      	movs	r2, #0
 8010f82:	2180      	movs	r1, #128	@ 0x80
 8010f84:	68f8      	ldr	r0, [r7, #12]
 8010f86:	f7ff fee1 	bl	8010d4c <SPI_WaitFlagStateUntilTimeout>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d016      	beq.n	8010fbe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f94:	f043 0220 	orr.w	r2, r3, #32
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8010f9c:	2303      	movs	r3, #3
 8010f9e:	e00f      	b.n	8010fc0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d00a      	beq.n	8010fbc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	3b01      	subs	r3, #1
 8010faa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	689b      	ldr	r3, [r3, #8]
 8010fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010fb6:	2b80      	cmp	r3, #128	@ 0x80
 8010fb8:	d0f2      	beq.n	8010fa0 <SPI_EndRxTxTransaction+0x78>
 8010fba:	e000      	b.n	8010fbe <SPI_EndRxTxTransaction+0x96>
        break;
 8010fbc:	bf00      	nop
  }

  return HAL_OK;
 8010fbe:	2300      	movs	r3, #0
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3718      	adds	r7, #24
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}
 8010fc8:	2000232c 	.word	0x2000232c
 8010fcc:	165e9f81 	.word	0x165e9f81

08010fd0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d101      	bne.n	8010fe2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8010fde:	2301      	movs	r3, #1
 8010fe0:	e041      	b.n	8011066 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010fe8:	b2db      	uxtb	r3, r3
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d106      	bne.n	8010ffc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f7fe f898 	bl	800f12c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2202      	movs	r2, #2
 8011000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	3304      	adds	r3, #4
 801100c:	4619      	mov	r1, r3
 801100e:	4610      	mov	r0, r2
 8011010:	f000 f88a 	bl	8011128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2201      	movs	r2, #1
 8011018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2201      	movs	r2, #1
 8011020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2201      	movs	r2, #1
 8011028:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2201      	movs	r2, #1
 8011030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2201      	movs	r2, #1
 8011038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2201      	movs	r2, #1
 8011040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2201      	movs	r2, #1
 8011048:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2201      	movs	r2, #1
 8011050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2201      	movs	r2, #1
 8011058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2201      	movs	r2, #1
 8011060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011064:	2300      	movs	r3, #0
}
 8011066:	4618      	mov	r0, r3
 8011068:	3708      	adds	r7, #8
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
	...

08011070 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b086      	sub	sp, #24
 8011074:	af00      	add	r7, sp, #0
 8011076:	60f8      	str	r0, [r7, #12]
 8011078:	60b9      	str	r1, [r7, #8]
 801107a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801107c:	2300      	movs	r3, #0
 801107e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011086:	2b01      	cmp	r3, #1
 8011088:	d101      	bne.n	801108e <HAL_TIM_OC_ConfigChannel+0x1e>
 801108a:	2302      	movs	r3, #2
 801108c:	e048      	b.n	8011120 <HAL_TIM_OC_ConfigChannel+0xb0>
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	2201      	movs	r2, #1
 8011092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	2b0c      	cmp	r3, #12
 801109a:	d839      	bhi.n	8011110 <HAL_TIM_OC_ConfigChannel+0xa0>
 801109c:	a201      	add	r2, pc, #4	@ (adr r2, 80110a4 <HAL_TIM_OC_ConfigChannel+0x34>)
 801109e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110a2:	bf00      	nop
 80110a4:	080110d9 	.word	0x080110d9
 80110a8:	08011111 	.word	0x08011111
 80110ac:	08011111 	.word	0x08011111
 80110b0:	08011111 	.word	0x08011111
 80110b4:	080110e7 	.word	0x080110e7
 80110b8:	08011111 	.word	0x08011111
 80110bc:	08011111 	.word	0x08011111
 80110c0:	08011111 	.word	0x08011111
 80110c4:	080110f5 	.word	0x080110f5
 80110c8:	08011111 	.word	0x08011111
 80110cc:	08011111 	.word	0x08011111
 80110d0:	08011111 	.word	0x08011111
 80110d4:	08011103 	.word	0x08011103
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	68b9      	ldr	r1, [r7, #8]
 80110de:	4618      	mov	r0, r3
 80110e0:	f000 f8ce 	bl	8011280 <TIM_OC1_SetConfig>
      break;
 80110e4:	e017      	b.n	8011116 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	68b9      	ldr	r1, [r7, #8]
 80110ec:	4618      	mov	r0, r3
 80110ee:	f000 f937 	bl	8011360 <TIM_OC2_SetConfig>
      break;
 80110f2:	e010      	b.n	8011116 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	68b9      	ldr	r1, [r7, #8]
 80110fa:	4618      	mov	r0, r3
 80110fc:	f000 f9a6 	bl	801144c <TIM_OC3_SetConfig>
      break;
 8011100:	e009      	b.n	8011116 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	68b9      	ldr	r1, [r7, #8]
 8011108:	4618      	mov	r0, r3
 801110a:	f000 fa13 	bl	8011534 <TIM_OC4_SetConfig>
      break;
 801110e:	e002      	b.n	8011116 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8011110:	2301      	movs	r3, #1
 8011112:	75fb      	strb	r3, [r7, #23]
      break;
 8011114:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	2200      	movs	r2, #0
 801111a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801111e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011120:	4618      	mov	r0, r3
 8011122:	3718      	adds	r7, #24
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011128:	b480      	push	{r7}
 801112a:	b085      	sub	sp, #20
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	4a46      	ldr	r2, [pc, #280]	@ (8011254 <TIM_Base_SetConfig+0x12c>)
 801113c:	4293      	cmp	r3, r2
 801113e:	d013      	beq.n	8011168 <TIM_Base_SetConfig+0x40>
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011146:	d00f      	beq.n	8011168 <TIM_Base_SetConfig+0x40>
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	4a43      	ldr	r2, [pc, #268]	@ (8011258 <TIM_Base_SetConfig+0x130>)
 801114c:	4293      	cmp	r3, r2
 801114e:	d00b      	beq.n	8011168 <TIM_Base_SetConfig+0x40>
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	4a42      	ldr	r2, [pc, #264]	@ (801125c <TIM_Base_SetConfig+0x134>)
 8011154:	4293      	cmp	r3, r2
 8011156:	d007      	beq.n	8011168 <TIM_Base_SetConfig+0x40>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	4a41      	ldr	r2, [pc, #260]	@ (8011260 <TIM_Base_SetConfig+0x138>)
 801115c:	4293      	cmp	r3, r2
 801115e:	d003      	beq.n	8011168 <TIM_Base_SetConfig+0x40>
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	4a40      	ldr	r2, [pc, #256]	@ (8011264 <TIM_Base_SetConfig+0x13c>)
 8011164:	4293      	cmp	r3, r2
 8011166:	d108      	bne.n	801117a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801116e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	685b      	ldr	r3, [r3, #4]
 8011174:	68fa      	ldr	r2, [r7, #12]
 8011176:	4313      	orrs	r3, r2
 8011178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	4a35      	ldr	r2, [pc, #212]	@ (8011254 <TIM_Base_SetConfig+0x12c>)
 801117e:	4293      	cmp	r3, r2
 8011180:	d02b      	beq.n	80111da <TIM_Base_SetConfig+0xb2>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011188:	d027      	beq.n	80111da <TIM_Base_SetConfig+0xb2>
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	4a32      	ldr	r2, [pc, #200]	@ (8011258 <TIM_Base_SetConfig+0x130>)
 801118e:	4293      	cmp	r3, r2
 8011190:	d023      	beq.n	80111da <TIM_Base_SetConfig+0xb2>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	4a31      	ldr	r2, [pc, #196]	@ (801125c <TIM_Base_SetConfig+0x134>)
 8011196:	4293      	cmp	r3, r2
 8011198:	d01f      	beq.n	80111da <TIM_Base_SetConfig+0xb2>
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	4a30      	ldr	r2, [pc, #192]	@ (8011260 <TIM_Base_SetConfig+0x138>)
 801119e:	4293      	cmp	r3, r2
 80111a0:	d01b      	beq.n	80111da <TIM_Base_SetConfig+0xb2>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	4a2f      	ldr	r2, [pc, #188]	@ (8011264 <TIM_Base_SetConfig+0x13c>)
 80111a6:	4293      	cmp	r3, r2
 80111a8:	d017      	beq.n	80111da <TIM_Base_SetConfig+0xb2>
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	4a2e      	ldr	r2, [pc, #184]	@ (8011268 <TIM_Base_SetConfig+0x140>)
 80111ae:	4293      	cmp	r3, r2
 80111b0:	d013      	beq.n	80111da <TIM_Base_SetConfig+0xb2>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	4a2d      	ldr	r2, [pc, #180]	@ (801126c <TIM_Base_SetConfig+0x144>)
 80111b6:	4293      	cmp	r3, r2
 80111b8:	d00f      	beq.n	80111da <TIM_Base_SetConfig+0xb2>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	4a2c      	ldr	r2, [pc, #176]	@ (8011270 <TIM_Base_SetConfig+0x148>)
 80111be:	4293      	cmp	r3, r2
 80111c0:	d00b      	beq.n	80111da <TIM_Base_SetConfig+0xb2>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	4a2b      	ldr	r2, [pc, #172]	@ (8011274 <TIM_Base_SetConfig+0x14c>)
 80111c6:	4293      	cmp	r3, r2
 80111c8:	d007      	beq.n	80111da <TIM_Base_SetConfig+0xb2>
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4a2a      	ldr	r2, [pc, #168]	@ (8011278 <TIM_Base_SetConfig+0x150>)
 80111ce:	4293      	cmp	r3, r2
 80111d0:	d003      	beq.n	80111da <TIM_Base_SetConfig+0xb2>
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	4a29      	ldr	r2, [pc, #164]	@ (801127c <TIM_Base_SetConfig+0x154>)
 80111d6:	4293      	cmp	r3, r2
 80111d8:	d108      	bne.n	80111ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80111e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	68db      	ldr	r3, [r3, #12]
 80111e6:	68fa      	ldr	r2, [r7, #12]
 80111e8:	4313      	orrs	r3, r2
 80111ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	695b      	ldr	r3, [r3, #20]
 80111f6:	4313      	orrs	r3, r2
 80111f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	68fa      	ldr	r2, [r7, #12]
 80111fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	689a      	ldr	r2, [r3, #8]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	681a      	ldr	r2, [r3, #0]
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	4a10      	ldr	r2, [pc, #64]	@ (8011254 <TIM_Base_SetConfig+0x12c>)
 8011214:	4293      	cmp	r3, r2
 8011216:	d003      	beq.n	8011220 <TIM_Base_SetConfig+0xf8>
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	4a12      	ldr	r2, [pc, #72]	@ (8011264 <TIM_Base_SetConfig+0x13c>)
 801121c:	4293      	cmp	r3, r2
 801121e:	d103      	bne.n	8011228 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	691a      	ldr	r2, [r3, #16]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2201      	movs	r2, #1
 801122c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	691b      	ldr	r3, [r3, #16]
 8011232:	f003 0301 	and.w	r3, r3, #1
 8011236:	2b01      	cmp	r3, #1
 8011238:	d105      	bne.n	8011246 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	691b      	ldr	r3, [r3, #16]
 801123e:	f023 0201 	bic.w	r2, r3, #1
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	611a      	str	r2, [r3, #16]
  }
}
 8011246:	bf00      	nop
 8011248:	3714      	adds	r7, #20
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr
 8011252:	bf00      	nop
 8011254:	40010000 	.word	0x40010000
 8011258:	40000400 	.word	0x40000400
 801125c:	40000800 	.word	0x40000800
 8011260:	40000c00 	.word	0x40000c00
 8011264:	40010400 	.word	0x40010400
 8011268:	40014000 	.word	0x40014000
 801126c:	40014400 	.word	0x40014400
 8011270:	40014800 	.word	0x40014800
 8011274:	40001800 	.word	0x40001800
 8011278:	40001c00 	.word	0x40001c00
 801127c:	40002000 	.word	0x40002000

08011280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011280:	b480      	push	{r7}
 8011282:	b087      	sub	sp, #28
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6a1b      	ldr	r3, [r3, #32]
 801128e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6a1b      	ldr	r3, [r3, #32]
 8011294:	f023 0201 	bic.w	r2, r3, #1
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	685b      	ldr	r3, [r3, #4]
 80112a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	699b      	ldr	r3, [r3, #24]
 80112a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80112ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	f023 0303 	bic.w	r3, r3, #3
 80112b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	68fa      	ldr	r2, [r7, #12]
 80112be:	4313      	orrs	r3, r2
 80112c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	f023 0302 	bic.w	r3, r3, #2
 80112c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	689b      	ldr	r3, [r3, #8]
 80112ce:	697a      	ldr	r2, [r7, #20]
 80112d0:	4313      	orrs	r3, r2
 80112d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	4a20      	ldr	r2, [pc, #128]	@ (8011358 <TIM_OC1_SetConfig+0xd8>)
 80112d8:	4293      	cmp	r3, r2
 80112da:	d003      	beq.n	80112e4 <TIM_OC1_SetConfig+0x64>
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	4a1f      	ldr	r2, [pc, #124]	@ (801135c <TIM_OC1_SetConfig+0xdc>)
 80112e0:	4293      	cmp	r3, r2
 80112e2:	d10c      	bne.n	80112fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	f023 0308 	bic.w	r3, r3, #8
 80112ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	68db      	ldr	r3, [r3, #12]
 80112f0:	697a      	ldr	r2, [r7, #20]
 80112f2:	4313      	orrs	r3, r2
 80112f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	f023 0304 	bic.w	r3, r3, #4
 80112fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	4a15      	ldr	r2, [pc, #84]	@ (8011358 <TIM_OC1_SetConfig+0xd8>)
 8011302:	4293      	cmp	r3, r2
 8011304:	d003      	beq.n	801130e <TIM_OC1_SetConfig+0x8e>
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	4a14      	ldr	r2, [pc, #80]	@ (801135c <TIM_OC1_SetConfig+0xdc>)
 801130a:	4293      	cmp	r3, r2
 801130c:	d111      	bne.n	8011332 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801131c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	695b      	ldr	r3, [r3, #20]
 8011322:	693a      	ldr	r2, [r7, #16]
 8011324:	4313      	orrs	r3, r2
 8011326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	699b      	ldr	r3, [r3, #24]
 801132c:	693a      	ldr	r2, [r7, #16]
 801132e:	4313      	orrs	r3, r2
 8011330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	693a      	ldr	r2, [r7, #16]
 8011336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	68fa      	ldr	r2, [r7, #12]
 801133c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	685a      	ldr	r2, [r3, #4]
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	697a      	ldr	r2, [r7, #20]
 801134a:	621a      	str	r2, [r3, #32]
}
 801134c:	bf00      	nop
 801134e:	371c      	adds	r7, #28
 8011350:	46bd      	mov	sp, r7
 8011352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011356:	4770      	bx	lr
 8011358:	40010000 	.word	0x40010000
 801135c:	40010400 	.word	0x40010400

08011360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011360:	b480      	push	{r7}
 8011362:	b087      	sub	sp, #28
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6a1b      	ldr	r3, [r3, #32]
 801136e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6a1b      	ldr	r3, [r3, #32]
 8011374:	f023 0210 	bic.w	r2, r3, #16
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	685b      	ldr	r3, [r3, #4]
 8011380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	699b      	ldr	r3, [r3, #24]
 8011386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801138e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	021b      	lsls	r3, r3, #8
 801139e:	68fa      	ldr	r2, [r7, #12]
 80113a0:	4313      	orrs	r3, r2
 80113a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	f023 0320 	bic.w	r3, r3, #32
 80113aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	689b      	ldr	r3, [r3, #8]
 80113b0:	011b      	lsls	r3, r3, #4
 80113b2:	697a      	ldr	r2, [r7, #20]
 80113b4:	4313      	orrs	r3, r2
 80113b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	4a22      	ldr	r2, [pc, #136]	@ (8011444 <TIM_OC2_SetConfig+0xe4>)
 80113bc:	4293      	cmp	r3, r2
 80113be:	d003      	beq.n	80113c8 <TIM_OC2_SetConfig+0x68>
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	4a21      	ldr	r2, [pc, #132]	@ (8011448 <TIM_OC2_SetConfig+0xe8>)
 80113c4:	4293      	cmp	r3, r2
 80113c6:	d10d      	bne.n	80113e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80113ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	68db      	ldr	r3, [r3, #12]
 80113d4:	011b      	lsls	r3, r3, #4
 80113d6:	697a      	ldr	r2, [r7, #20]
 80113d8:	4313      	orrs	r3, r2
 80113da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80113e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	4a17      	ldr	r2, [pc, #92]	@ (8011444 <TIM_OC2_SetConfig+0xe4>)
 80113e8:	4293      	cmp	r3, r2
 80113ea:	d003      	beq.n	80113f4 <TIM_OC2_SetConfig+0x94>
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	4a16      	ldr	r2, [pc, #88]	@ (8011448 <TIM_OC2_SetConfig+0xe8>)
 80113f0:	4293      	cmp	r3, r2
 80113f2:	d113      	bne.n	801141c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80113f4:	693b      	ldr	r3, [r7, #16]
 80113f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80113fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80113fc:	693b      	ldr	r3, [r7, #16]
 80113fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	695b      	ldr	r3, [r3, #20]
 8011408:	009b      	lsls	r3, r3, #2
 801140a:	693a      	ldr	r2, [r7, #16]
 801140c:	4313      	orrs	r3, r2
 801140e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	699b      	ldr	r3, [r3, #24]
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	693a      	ldr	r2, [r7, #16]
 8011418:	4313      	orrs	r3, r2
 801141a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	693a      	ldr	r2, [r7, #16]
 8011420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	68fa      	ldr	r2, [r7, #12]
 8011426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	685a      	ldr	r2, [r3, #4]
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	697a      	ldr	r2, [r7, #20]
 8011434:	621a      	str	r2, [r3, #32]
}
 8011436:	bf00      	nop
 8011438:	371c      	adds	r7, #28
 801143a:	46bd      	mov	sp, r7
 801143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011440:	4770      	bx	lr
 8011442:	bf00      	nop
 8011444:	40010000 	.word	0x40010000
 8011448:	40010400 	.word	0x40010400

0801144c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801144c:	b480      	push	{r7}
 801144e:	b087      	sub	sp, #28
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
 8011454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6a1b      	ldr	r3, [r3, #32]
 801145a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	6a1b      	ldr	r3, [r3, #32]
 8011460:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	69db      	ldr	r3, [r3, #28]
 8011472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801147a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	f023 0303 	bic.w	r3, r3, #3
 8011482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	68fa      	ldr	r2, [r7, #12]
 801148a:	4313      	orrs	r3, r2
 801148c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	689b      	ldr	r3, [r3, #8]
 801149a:	021b      	lsls	r3, r3, #8
 801149c:	697a      	ldr	r2, [r7, #20]
 801149e:	4313      	orrs	r3, r2
 80114a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	4a21      	ldr	r2, [pc, #132]	@ (801152c <TIM_OC3_SetConfig+0xe0>)
 80114a6:	4293      	cmp	r3, r2
 80114a8:	d003      	beq.n	80114b2 <TIM_OC3_SetConfig+0x66>
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	4a20      	ldr	r2, [pc, #128]	@ (8011530 <TIM_OC3_SetConfig+0xe4>)
 80114ae:	4293      	cmp	r3, r2
 80114b0:	d10d      	bne.n	80114ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80114b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	021b      	lsls	r3, r3, #8
 80114c0:	697a      	ldr	r2, [r7, #20]
 80114c2:	4313      	orrs	r3, r2
 80114c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80114cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	4a16      	ldr	r2, [pc, #88]	@ (801152c <TIM_OC3_SetConfig+0xe0>)
 80114d2:	4293      	cmp	r3, r2
 80114d4:	d003      	beq.n	80114de <TIM_OC3_SetConfig+0x92>
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	4a15      	ldr	r2, [pc, #84]	@ (8011530 <TIM_OC3_SetConfig+0xe4>)
 80114da:	4293      	cmp	r3, r2
 80114dc:	d113      	bne.n	8011506 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80114e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80114e6:	693b      	ldr	r3, [r7, #16]
 80114e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80114ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	695b      	ldr	r3, [r3, #20]
 80114f2:	011b      	lsls	r3, r3, #4
 80114f4:	693a      	ldr	r2, [r7, #16]
 80114f6:	4313      	orrs	r3, r2
 80114f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	699b      	ldr	r3, [r3, #24]
 80114fe:	011b      	lsls	r3, r3, #4
 8011500:	693a      	ldr	r2, [r7, #16]
 8011502:	4313      	orrs	r3, r2
 8011504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	693a      	ldr	r2, [r7, #16]
 801150a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	68fa      	ldr	r2, [r7, #12]
 8011510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	685a      	ldr	r2, [r3, #4]
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	697a      	ldr	r2, [r7, #20]
 801151e:	621a      	str	r2, [r3, #32]
}
 8011520:	bf00      	nop
 8011522:	371c      	adds	r7, #28
 8011524:	46bd      	mov	sp, r7
 8011526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152a:	4770      	bx	lr
 801152c:	40010000 	.word	0x40010000
 8011530:	40010400 	.word	0x40010400

08011534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011534:	b480      	push	{r7}
 8011536:	b087      	sub	sp, #28
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
 801153c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6a1b      	ldr	r3, [r3, #32]
 8011542:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6a1b      	ldr	r3, [r3, #32]
 8011548:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	69db      	ldr	r3, [r3, #28]
 801155a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801156a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	021b      	lsls	r3, r3, #8
 8011572:	68fa      	ldr	r2, [r7, #12]
 8011574:	4313      	orrs	r3, r2
 8011576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011578:	693b      	ldr	r3, [r7, #16]
 801157a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801157e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	689b      	ldr	r3, [r3, #8]
 8011584:	031b      	lsls	r3, r3, #12
 8011586:	693a      	ldr	r2, [r7, #16]
 8011588:	4313      	orrs	r3, r2
 801158a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	4a12      	ldr	r2, [pc, #72]	@ (80115d8 <TIM_OC4_SetConfig+0xa4>)
 8011590:	4293      	cmp	r3, r2
 8011592:	d003      	beq.n	801159c <TIM_OC4_SetConfig+0x68>
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	4a11      	ldr	r2, [pc, #68]	@ (80115dc <TIM_OC4_SetConfig+0xa8>)
 8011598:	4293      	cmp	r3, r2
 801159a:	d109      	bne.n	80115b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80115a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	695b      	ldr	r3, [r3, #20]
 80115a8:	019b      	lsls	r3, r3, #6
 80115aa:	697a      	ldr	r2, [r7, #20]
 80115ac:	4313      	orrs	r3, r2
 80115ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	697a      	ldr	r2, [r7, #20]
 80115b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	68fa      	ldr	r2, [r7, #12]
 80115ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	685a      	ldr	r2, [r3, #4]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	693a      	ldr	r2, [r7, #16]
 80115c8:	621a      	str	r2, [r3, #32]
}
 80115ca:	bf00      	nop
 80115cc:	371c      	adds	r7, #28
 80115ce:	46bd      	mov	sp, r7
 80115d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d4:	4770      	bx	lr
 80115d6:	bf00      	nop
 80115d8:	40010000 	.word	0x40010000
 80115dc:	40010400 	.word	0x40010400

080115e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80115e0:	b480      	push	{r7}
 80115e2:	b085      	sub	sp, #20
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
 80115e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80115f0:	2b01      	cmp	r3, #1
 80115f2:	d101      	bne.n	80115f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80115f4:	2302      	movs	r3, #2
 80115f6:	e05a      	b.n	80116ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	2201      	movs	r2, #1
 80115fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2202      	movs	r2, #2
 8011604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	685b      	ldr	r3, [r3, #4]
 801160e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	689b      	ldr	r3, [r3, #8]
 8011616:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801161e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	68fa      	ldr	r2, [r7, #12]
 8011626:	4313      	orrs	r3, r2
 8011628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	68fa      	ldr	r2, [r7, #12]
 8011630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	4a21      	ldr	r2, [pc, #132]	@ (80116bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8011638:	4293      	cmp	r3, r2
 801163a:	d022      	beq.n	8011682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011644:	d01d      	beq.n	8011682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	4a1d      	ldr	r2, [pc, #116]	@ (80116c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801164c:	4293      	cmp	r3, r2
 801164e:	d018      	beq.n	8011682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	4a1b      	ldr	r2, [pc, #108]	@ (80116c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8011656:	4293      	cmp	r3, r2
 8011658:	d013      	beq.n	8011682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	4a1a      	ldr	r2, [pc, #104]	@ (80116c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011660:	4293      	cmp	r3, r2
 8011662:	d00e      	beq.n	8011682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	4a18      	ldr	r2, [pc, #96]	@ (80116cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801166a:	4293      	cmp	r3, r2
 801166c:	d009      	beq.n	8011682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	4a17      	ldr	r2, [pc, #92]	@ (80116d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011674:	4293      	cmp	r3, r2
 8011676:	d004      	beq.n	8011682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	4a15      	ldr	r2, [pc, #84]	@ (80116d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801167e:	4293      	cmp	r3, r2
 8011680:	d10c      	bne.n	801169c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	685b      	ldr	r3, [r3, #4]
 801168e:	68ba      	ldr	r2, [r7, #8]
 8011690:	4313      	orrs	r3, r2
 8011692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	68ba      	ldr	r2, [r7, #8]
 801169a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2201      	movs	r2, #1
 80116a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2200      	movs	r2, #0
 80116a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80116ac:	2300      	movs	r3, #0
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3714      	adds	r7, #20
 80116b2:	46bd      	mov	sp, r7
 80116b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b8:	4770      	bx	lr
 80116ba:	bf00      	nop
 80116bc:	40010000 	.word	0x40010000
 80116c0:	40000400 	.word	0x40000400
 80116c4:	40000800 	.word	0x40000800
 80116c8:	40000c00 	.word	0x40000c00
 80116cc:	40010400 	.word	0x40010400
 80116d0:	40014000 	.word	0x40014000
 80116d4:	40001800 	.word	0x40001800

080116d8 <LL_ADC_REG_SetSequencerLength>:
{
 80116d8:	b480      	push	{r7}
 80116da:	b083      	sub	sp, #12
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
 80116e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116e6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	431a      	orrs	r2, r3
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80116f2:	bf00      	nop
 80116f4:	370c      	adds	r7, #12
 80116f6:	46bd      	mov	sp, r7
 80116f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fc:	4770      	bx	lr

080116fe <LL_ADC_IsEnabled>:
{
 80116fe:	b480      	push	{r7}
 8011700:	b083      	sub	sp, #12
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	689b      	ldr	r3, [r3, #8]
 801170a:	f003 0301 	and.w	r3, r3, #1
 801170e:	2b01      	cmp	r3, #1
 8011710:	bf0c      	ite	eq
 8011712:	2301      	moveq	r3, #1
 8011714:	2300      	movne	r3, #0
 8011716:	b2db      	uxtb	r3, r3
}
 8011718:	4618      	mov	r0, r3
 801171a:	370c      	adds	r7, #12
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr

08011724 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8011724:	b590      	push	{r4, r7, lr}
 8011726:	b085      	sub	sp, #20
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
 801172c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 801172e:	2300      	movs	r3, #0
 8011730:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8011732:	481c      	ldr	r0, [pc, #112]	@ (80117a4 <LL_ADC_CommonInit+0x80>)
 8011734:	f7ff ffe3 	bl	80116fe <LL_ADC_IsEnabled>
 8011738:	4604      	mov	r4, r0
 801173a:	481b      	ldr	r0, [pc, #108]	@ (80117a8 <LL_ADC_CommonInit+0x84>)
 801173c:	f7ff ffdf 	bl	80116fe <LL_ADC_IsEnabled>
 8011740:	4603      	mov	r3, r0
 8011742:	431c      	orrs	r4, r3
 8011744:	4819      	ldr	r0, [pc, #100]	@ (80117ac <LL_ADC_CommonInit+0x88>)
 8011746:	f7ff ffda 	bl	80116fe <LL_ADC_IsEnabled>
 801174a:	4603      	mov	r3, r0
 801174c:	4323      	orrs	r3, r4
 801174e:	2b00      	cmp	r3, #0
 8011750:	d120      	bne.n	8011794 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d012      	beq.n	8011780 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	685a      	ldr	r2, [r3, #4]
 801175e:	4b14      	ldr	r3, [pc, #80]	@ (80117b0 <LL_ADC_CommonInit+0x8c>)
 8011760:	4013      	ands	r3, r2
 8011762:	683a      	ldr	r2, [r7, #0]
 8011764:	6811      	ldr	r1, [r2, #0]
 8011766:	683a      	ldr	r2, [r7, #0]
 8011768:	6852      	ldr	r2, [r2, #4]
 801176a:	4311      	orrs	r1, r2
 801176c:	683a      	ldr	r2, [r7, #0]
 801176e:	6892      	ldr	r2, [r2, #8]
 8011770:	4311      	orrs	r1, r2
 8011772:	683a      	ldr	r2, [r7, #0]
 8011774:	68d2      	ldr	r2, [r2, #12]
 8011776:	430a      	orrs	r2, r1
 8011778:	431a      	orrs	r2, r3
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	605a      	str	r2, [r3, #4]
 801177e:	e00b      	b.n	8011798 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	685a      	ldr	r2, [r3, #4]
 8011784:	4b0a      	ldr	r3, [pc, #40]	@ (80117b0 <LL_ADC_CommonInit+0x8c>)
 8011786:	4013      	ands	r3, r2
 8011788:	683a      	ldr	r2, [r7, #0]
 801178a:	6812      	ldr	r2, [r2, #0]
 801178c:	431a      	orrs	r2, r3
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	605a      	str	r2, [r3, #4]
 8011792:	e001      	b.n	8011798 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8011794:	2301      	movs	r3, #1
 8011796:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011798:	7bfb      	ldrb	r3, [r7, #15]
}
 801179a:	4618      	mov	r0, r3
 801179c:	3714      	adds	r7, #20
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd90      	pop	{r4, r7, pc}
 80117a2:	bf00      	nop
 80117a4:	40012000 	.word	0x40012000
 80117a8:	40012100 	.word	0x40012100
 80117ac:	40012200 	.word	0x40012200
 80117b0:	fffc10e0 	.word	0xfffc10e0

080117b4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b084      	sub	sp, #16
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80117be:	2300      	movs	r3, #0
 80117c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f7ff ff9b 	bl	80116fe <LL_ADC_IsEnabled>
 80117c8:	4603      	mov	r3, r0
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d117      	bne.n	80117fe <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80117d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80117da:	683a      	ldr	r2, [r7, #0]
 80117dc:	6811      	ldr	r1, [r2, #0]
 80117de:	683a      	ldr	r2, [r7, #0]
 80117e0:	6892      	ldr	r2, [r2, #8]
 80117e2:	430a      	orrs	r2, r1
 80117e4:	431a      	orrs	r2, r3
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	689b      	ldr	r3, [r3, #8]
 80117ee:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	685b      	ldr	r3, [r3, #4]
 80117f6:	431a      	orrs	r2, r3
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	609a      	str	r2, [r3, #8]
 80117fc:	e001      	b.n	8011802 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80117fe:	2301      	movs	r3, #1
 8011800:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8011802:	7bfb      	ldrb	r3, [r7, #15]
}
 8011804:	4618      	mov	r0, r3
 8011806:	3710      	adds	r7, #16
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}

0801180c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b084      	sub	sp, #16
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8011816:	2300      	movs	r3, #0
 8011818:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f7ff ff6f 	bl	80116fe <LL_ADC_IsEnabled>
 8011820:	4603      	mov	r3, r0
 8011822:	2b00      	cmp	r3, #0
 8011824:	d12b      	bne.n	801187e <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d009      	beq.n	8011842 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	689b      	ldr	r3, [r3, #8]
 801183a:	431a      	orrs	r2, r3
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	605a      	str	r2, [r3, #4]
 8011840:	e005      	b.n	801184e <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	685b      	ldr	r3, [r3, #4]
 8011846:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	689a      	ldr	r2, [r3, #8]
 8011852:	4b0e      	ldr	r3, [pc, #56]	@ (801188c <LL_ADC_REG_Init+0x80>)
 8011854:	4013      	ands	r3, r2
 8011856:	683a      	ldr	r2, [r7, #0]
 8011858:	6812      	ldr	r2, [r2, #0]
 801185a:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 801185e:	683a      	ldr	r2, [r7, #0]
 8011860:	68d2      	ldr	r2, [r2, #12]
 8011862:	4311      	orrs	r1, r2
 8011864:	683a      	ldr	r2, [r7, #0]
 8011866:	6912      	ldr	r2, [r2, #16]
 8011868:	430a      	orrs	r2, r1
 801186a:	431a      	orrs	r2, r3
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	685b      	ldr	r3, [r3, #4]
 8011874:	4619      	mov	r1, r3
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f7ff ff2e 	bl	80116d8 <LL_ADC_REG_SetSequencerLength>
 801187c:	e001      	b.n	8011882 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 801187e:	2301      	movs	r3, #1
 8011880:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8011882:	7bfb      	ldrb	r3, [r7, #15]
}
 8011884:	4618      	mov	r0, r3
 8011886:	3710      	adds	r7, #16
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}
 801188c:	c0fffcfd 	.word	0xc0fffcfd

08011890 <LL_GPIO_SetPinMode>:
{
 8011890:	b480      	push	{r7}
 8011892:	b08b      	sub	sp, #44	@ 0x2c
 8011894:	af00      	add	r7, sp, #0
 8011896:	60f8      	str	r0, [r7, #12]
 8011898:	60b9      	str	r1, [r7, #8]
 801189a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	681a      	ldr	r2, [r3, #0]
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	fa93 f3a3 	rbit	r3, r3
 80118aa:	613b      	str	r3, [r7, #16]
  return result;
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80118b0:	69bb      	ldr	r3, [r7, #24]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d101      	bne.n	80118ba <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80118b6:	2320      	movs	r3, #32
 80118b8:	e003      	b.n	80118c2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80118ba:	69bb      	ldr	r3, [r7, #24]
 80118bc:	fab3 f383 	clz	r3, r3
 80118c0:	b2db      	uxtb	r3, r3
 80118c2:	005b      	lsls	r3, r3, #1
 80118c4:	2103      	movs	r1, #3
 80118c6:	fa01 f303 	lsl.w	r3, r1, r3
 80118ca:	43db      	mvns	r3, r3
 80118cc:	401a      	ands	r2, r3
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80118d2:	6a3b      	ldr	r3, [r7, #32]
 80118d4:	fa93 f3a3 	rbit	r3, r3
 80118d8:	61fb      	str	r3, [r7, #28]
  return result;
 80118da:	69fb      	ldr	r3, [r7, #28]
 80118dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80118de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d101      	bne.n	80118e8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80118e4:	2320      	movs	r3, #32
 80118e6:	e003      	b.n	80118f0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80118e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118ea:	fab3 f383 	clz	r3, r3
 80118ee:	b2db      	uxtb	r3, r3
 80118f0:	005b      	lsls	r3, r3, #1
 80118f2:	6879      	ldr	r1, [r7, #4]
 80118f4:	fa01 f303 	lsl.w	r3, r1, r3
 80118f8:	431a      	orrs	r2, r3
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	601a      	str	r2, [r3, #0]
}
 80118fe:	bf00      	nop
 8011900:	372c      	adds	r7, #44	@ 0x2c
 8011902:	46bd      	mov	sp, r7
 8011904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011908:	4770      	bx	lr

0801190a <LL_GPIO_SetPinOutputType>:
{
 801190a:	b480      	push	{r7}
 801190c:	b085      	sub	sp, #20
 801190e:	af00      	add	r7, sp, #0
 8011910:	60f8      	str	r0, [r7, #12]
 8011912:	60b9      	str	r1, [r7, #8]
 8011914:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	685a      	ldr	r2, [r3, #4]
 801191a:	68bb      	ldr	r3, [r7, #8]
 801191c:	43db      	mvns	r3, r3
 801191e:	401a      	ands	r2, r3
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	6879      	ldr	r1, [r7, #4]
 8011924:	fb01 f303 	mul.w	r3, r1, r3
 8011928:	431a      	orrs	r2, r3
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	605a      	str	r2, [r3, #4]
}
 801192e:	bf00      	nop
 8011930:	3714      	adds	r7, #20
 8011932:	46bd      	mov	sp, r7
 8011934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011938:	4770      	bx	lr

0801193a <LL_GPIO_SetPinSpeed>:
{
 801193a:	b480      	push	{r7}
 801193c:	b08b      	sub	sp, #44	@ 0x2c
 801193e:	af00      	add	r7, sp, #0
 8011940:	60f8      	str	r0, [r7, #12]
 8011942:	60b9      	str	r1, [r7, #8]
 8011944:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	689a      	ldr	r2, [r3, #8]
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	fa93 f3a3 	rbit	r3, r3
 8011954:	613b      	str	r3, [r7, #16]
  return result;
 8011956:	693b      	ldr	r3, [r7, #16]
 8011958:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801195a:	69bb      	ldr	r3, [r7, #24]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d101      	bne.n	8011964 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8011960:	2320      	movs	r3, #32
 8011962:	e003      	b.n	801196c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8011964:	69bb      	ldr	r3, [r7, #24]
 8011966:	fab3 f383 	clz	r3, r3
 801196a:	b2db      	uxtb	r3, r3
 801196c:	005b      	lsls	r3, r3, #1
 801196e:	2103      	movs	r1, #3
 8011970:	fa01 f303 	lsl.w	r3, r1, r3
 8011974:	43db      	mvns	r3, r3
 8011976:	401a      	ands	r2, r3
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801197c:	6a3b      	ldr	r3, [r7, #32]
 801197e:	fa93 f3a3 	rbit	r3, r3
 8011982:	61fb      	str	r3, [r7, #28]
  return result;
 8011984:	69fb      	ldr	r3, [r7, #28]
 8011986:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8011988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801198a:	2b00      	cmp	r3, #0
 801198c:	d101      	bne.n	8011992 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 801198e:	2320      	movs	r3, #32
 8011990:	e003      	b.n	801199a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8011992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011994:	fab3 f383 	clz	r3, r3
 8011998:	b2db      	uxtb	r3, r3
 801199a:	005b      	lsls	r3, r3, #1
 801199c:	6879      	ldr	r1, [r7, #4]
 801199e:	fa01 f303 	lsl.w	r3, r1, r3
 80119a2:	431a      	orrs	r2, r3
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	609a      	str	r2, [r3, #8]
}
 80119a8:	bf00      	nop
 80119aa:	372c      	adds	r7, #44	@ 0x2c
 80119ac:	46bd      	mov	sp, r7
 80119ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b2:	4770      	bx	lr

080119b4 <LL_GPIO_SetPinPull>:
{
 80119b4:	b480      	push	{r7}
 80119b6:	b08b      	sub	sp, #44	@ 0x2c
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	60f8      	str	r0, [r7, #12]
 80119bc:	60b9      	str	r1, [r7, #8]
 80119be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	68da      	ldr	r2, [r3, #12]
 80119c4:	68bb      	ldr	r3, [r7, #8]
 80119c6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80119c8:	697b      	ldr	r3, [r7, #20]
 80119ca:	fa93 f3a3 	rbit	r3, r3
 80119ce:	613b      	str	r3, [r7, #16]
  return result;
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80119d4:	69bb      	ldr	r3, [r7, #24]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d101      	bne.n	80119de <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80119da:	2320      	movs	r3, #32
 80119dc:	e003      	b.n	80119e6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80119de:	69bb      	ldr	r3, [r7, #24]
 80119e0:	fab3 f383 	clz	r3, r3
 80119e4:	b2db      	uxtb	r3, r3
 80119e6:	005b      	lsls	r3, r3, #1
 80119e8:	2103      	movs	r1, #3
 80119ea:	fa01 f303 	lsl.w	r3, r1, r3
 80119ee:	43db      	mvns	r3, r3
 80119f0:	401a      	ands	r2, r3
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80119f6:	6a3b      	ldr	r3, [r7, #32]
 80119f8:	fa93 f3a3 	rbit	r3, r3
 80119fc:	61fb      	str	r3, [r7, #28]
  return result;
 80119fe:	69fb      	ldr	r3, [r7, #28]
 8011a00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8011a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d101      	bne.n	8011a0c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8011a08:	2320      	movs	r3, #32
 8011a0a:	e003      	b.n	8011a14 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8011a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a0e:	fab3 f383 	clz	r3, r3
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	005b      	lsls	r3, r3, #1
 8011a16:	6879      	ldr	r1, [r7, #4]
 8011a18:	fa01 f303 	lsl.w	r3, r1, r3
 8011a1c:	431a      	orrs	r2, r3
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	60da      	str	r2, [r3, #12]
}
 8011a22:	bf00      	nop
 8011a24:	372c      	adds	r7, #44	@ 0x2c
 8011a26:	46bd      	mov	sp, r7
 8011a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2c:	4770      	bx	lr

08011a2e <LL_GPIO_SetAFPin_0_7>:
{
 8011a2e:	b480      	push	{r7}
 8011a30:	b08b      	sub	sp, #44	@ 0x2c
 8011a32:	af00      	add	r7, sp, #0
 8011a34:	60f8      	str	r0, [r7, #12]
 8011a36:	60b9      	str	r1, [r7, #8]
 8011a38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	6a1a      	ldr	r2, [r3, #32]
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	fa93 f3a3 	rbit	r3, r3
 8011a48:	613b      	str	r3, [r7, #16]
  return result;
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8011a4e:	69bb      	ldr	r3, [r7, #24]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d101      	bne.n	8011a58 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8011a54:	2320      	movs	r3, #32
 8011a56:	e003      	b.n	8011a60 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8011a58:	69bb      	ldr	r3, [r7, #24]
 8011a5a:	fab3 f383 	clz	r3, r3
 8011a5e:	b2db      	uxtb	r3, r3
 8011a60:	009b      	lsls	r3, r3, #2
 8011a62:	210f      	movs	r1, #15
 8011a64:	fa01 f303 	lsl.w	r3, r1, r3
 8011a68:	43db      	mvns	r3, r3
 8011a6a:	401a      	ands	r2, r3
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011a70:	6a3b      	ldr	r3, [r7, #32]
 8011a72:	fa93 f3a3 	rbit	r3, r3
 8011a76:	61fb      	str	r3, [r7, #28]
  return result;
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8011a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d101      	bne.n	8011a86 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8011a82:	2320      	movs	r3, #32
 8011a84:	e003      	b.n	8011a8e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8011a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a88:	fab3 f383 	clz	r3, r3
 8011a8c:	b2db      	uxtb	r3, r3
 8011a8e:	009b      	lsls	r3, r3, #2
 8011a90:	6879      	ldr	r1, [r7, #4]
 8011a92:	fa01 f303 	lsl.w	r3, r1, r3
 8011a96:	431a      	orrs	r2, r3
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	621a      	str	r2, [r3, #32]
}
 8011a9c:	bf00      	nop
 8011a9e:	372c      	adds	r7, #44	@ 0x2c
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr

08011aa8 <LL_GPIO_SetAFPin_8_15>:
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b08b      	sub	sp, #44	@ 0x2c
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	60f8      	str	r0, [r7, #12]
 8011ab0:	60b9      	str	r1, [r7, #8]
 8011ab2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	0a1b      	lsrs	r3, r3, #8
 8011abc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	fa93 f3a3 	rbit	r3, r3
 8011ac4:	613b      	str	r3, [r7, #16]
  return result;
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8011aca:	69bb      	ldr	r3, [r7, #24]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d101      	bne.n	8011ad4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8011ad0:	2320      	movs	r3, #32
 8011ad2:	e003      	b.n	8011adc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8011ad4:	69bb      	ldr	r3, [r7, #24]
 8011ad6:	fab3 f383 	clz	r3, r3
 8011ada:	b2db      	uxtb	r3, r3
 8011adc:	009b      	lsls	r3, r3, #2
 8011ade:	210f      	movs	r1, #15
 8011ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8011ae4:	43db      	mvns	r3, r3
 8011ae6:	401a      	ands	r2, r3
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	0a1b      	lsrs	r3, r3, #8
 8011aec:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011aee:	6a3b      	ldr	r3, [r7, #32]
 8011af0:	fa93 f3a3 	rbit	r3, r3
 8011af4:	61fb      	str	r3, [r7, #28]
  return result;
 8011af6:	69fb      	ldr	r3, [r7, #28]
 8011af8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8011afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d101      	bne.n	8011b04 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8011b00:	2320      	movs	r3, #32
 8011b02:	e003      	b.n	8011b0c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8011b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b06:	fab3 f383 	clz	r3, r3
 8011b0a:	b2db      	uxtb	r3, r3
 8011b0c:	009b      	lsls	r3, r3, #2
 8011b0e:	6879      	ldr	r1, [r7, #4]
 8011b10:	fa01 f303 	lsl.w	r3, r1, r3
 8011b14:	431a      	orrs	r2, r3
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8011b1a:	bf00      	nop
 8011b1c:	372c      	adds	r7, #44	@ 0x2c
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr

08011b26 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8011b26:	b580      	push	{r7, lr}
 8011b28:	b08a      	sub	sp, #40	@ 0x28
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	6078      	str	r0, [r7, #4]
 8011b2e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8011b30:	2300      	movs	r3, #0
 8011b32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8011b34:	2300      	movs	r3, #0
 8011b36:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011b3e:	69bb      	ldr	r3, [r7, #24]
 8011b40:	fa93 f3a3 	rbit	r3, r3
 8011b44:	617b      	str	r3, [r7, #20]
  return result;
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8011b4a:	69fb      	ldr	r3, [r7, #28]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d101      	bne.n	8011b54 <LL_GPIO_Init+0x2e>
    return 32U;
 8011b50:	2320      	movs	r3, #32
 8011b52:	e003      	b.n	8011b5c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8011b54:	69fb      	ldr	r3, [r7, #28]
 8011b56:	fab3 f383 	clz	r3, r3
 8011b5a:	b2db      	uxtb	r3, r3
 8011b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8011b5e:	e057      	b.n	8011c10 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	681a      	ldr	r2, [r3, #0]
 8011b64:	2101      	movs	r1, #1
 8011b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b68:	fa01 f303 	lsl.w	r3, r1, r3
 8011b6c:	4013      	ands	r3, r2
 8011b6e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8011b70:	6a3b      	ldr	r3, [r7, #32]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d049      	beq.n	8011c0a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	685b      	ldr	r3, [r3, #4]
 8011b7a:	2b01      	cmp	r3, #1
 8011b7c:	d003      	beq.n	8011b86 <LL_GPIO_Init+0x60>
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	685b      	ldr	r3, [r3, #4]
 8011b82:	2b02      	cmp	r3, #2
 8011b84:	d10d      	bne.n	8011ba2 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	689b      	ldr	r3, [r3, #8]
 8011b8a:	461a      	mov	r2, r3
 8011b8c:	6a39      	ldr	r1, [r7, #32]
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f7ff fed3 	bl	801193a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	461a      	mov	r2, r3
 8011b9a:	6a39      	ldr	r1, [r7, #32]
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f7ff feb4 	bl	801190a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	691b      	ldr	r3, [r3, #16]
 8011ba6:	461a      	mov	r2, r3
 8011ba8:	6a39      	ldr	r1, [r7, #32]
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	f7ff ff02 	bl	80119b4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	685b      	ldr	r3, [r3, #4]
 8011bb4:	2b02      	cmp	r3, #2
 8011bb6:	d121      	bne.n	8011bfc <LL_GPIO_Init+0xd6>
 8011bb8:	6a3b      	ldr	r3, [r7, #32]
 8011bba:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	fa93 f3a3 	rbit	r3, r3
 8011bc2:	60bb      	str	r3, [r7, #8]
  return result;
 8011bc4:	68bb      	ldr	r3, [r7, #8]
 8011bc6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d101      	bne.n	8011bd2 <LL_GPIO_Init+0xac>
    return 32U;
 8011bce:	2320      	movs	r3, #32
 8011bd0:	e003      	b.n	8011bda <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8011bd2:	693b      	ldr	r3, [r7, #16]
 8011bd4:	fab3 f383 	clz	r3, r3
 8011bd8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8011bda:	2b07      	cmp	r3, #7
 8011bdc:	d807      	bhi.n	8011bee <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	695b      	ldr	r3, [r3, #20]
 8011be2:	461a      	mov	r2, r3
 8011be4:	6a39      	ldr	r1, [r7, #32]
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	f7ff ff21 	bl	8011a2e <LL_GPIO_SetAFPin_0_7>
 8011bec:	e006      	b.n	8011bfc <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	695b      	ldr	r3, [r3, #20]
 8011bf2:	461a      	mov	r2, r3
 8011bf4:	6a39      	ldr	r1, [r7, #32]
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f7ff ff56 	bl	8011aa8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	685b      	ldr	r3, [r3, #4]
 8011c00:	461a      	mov	r2, r3
 8011c02:	6a39      	ldr	r1, [r7, #32]
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f7ff fe43 	bl	8011890 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8011c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c0c:	3301      	adds	r3, #1
 8011c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	681a      	ldr	r2, [r3, #0]
 8011c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c16:	fa22 f303 	lsr.w	r3, r2, r3
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d1a0      	bne.n	8011b60 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8011c1e:	2300      	movs	r3, #0
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3728      	adds	r7, #40	@ 0x28
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}

08011c28 <LL_I2C_Enable>:
{
 8011c28:	b480      	push	{r7}
 8011c2a:	b083      	sub	sp, #12
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	f043 0201 	orr.w	r2, r3, #1
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	601a      	str	r2, [r3, #0]
}
 8011c3c:	bf00      	nop
 8011c3e:	370c      	adds	r7, #12
 8011c40:	46bd      	mov	sp, r7
 8011c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c46:	4770      	bx	lr

08011c48 <LL_I2C_Disable>:
{
 8011c48:	b480      	push	{r7}
 8011c4a:	b083      	sub	sp, #12
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	f023 0201 	bic.w	r2, r3, #1
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	601a      	str	r2, [r3, #0]
}
 8011c5c:	bf00      	nop
 8011c5e:	370c      	adds	r7, #12
 8011c60:	46bd      	mov	sp, r7
 8011c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c66:	4770      	bx	lr

08011c68 <LL_I2C_SetOwnAddress1>:
{
 8011c68:	b480      	push	{r7}
 8011c6a:	b085      	sub	sp, #20
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	60f8      	str	r0, [r7, #12]
 8011c70:	60b9      	str	r1, [r7, #8]
 8011c72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	689b      	ldr	r3, [r3, #8]
 8011c78:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8011c7c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011c80:	68b9      	ldr	r1, [r7, #8]
 8011c82:	687a      	ldr	r2, [r7, #4]
 8011c84:	430a      	orrs	r2, r1
 8011c86:	431a      	orrs	r2, r3
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	609a      	str	r2, [r3, #8]
}
 8011c8c:	bf00      	nop
 8011c8e:	3714      	adds	r7, #20
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr

08011c98 <LL_I2C_ConfigSpeed>:
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b087      	sub	sp, #28
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	60f8      	str	r0, [r7, #12]
 8011ca0:	60b9      	str	r1, [r7, #8]
 8011ca2:	607a      	str	r2, [r7, #4]
 8011ca4:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8011caa:	2300      	movs	r3, #0
 8011cac:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	4a42      	ldr	r2, [pc, #264]	@ (8011dbc <LL_I2C_ConfigSpeed+0x124>)
 8011cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8011cb6:	0c9b      	lsrs	r3, r3, #18
 8011cb8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8011cc2:	693b      	ldr	r3, [r7, #16]
 8011cc4:	431a      	orrs	r2, r3
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	6a1b      	ldr	r3, [r3, #32]
 8011cce:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	493a      	ldr	r1, [pc, #232]	@ (8011dc0 <LL_I2C_ConfigSpeed+0x128>)
 8011cd6:	428b      	cmp	r3, r1
 8011cd8:	d802      	bhi.n	8011ce0 <LL_I2C_ConfigSpeed+0x48>
 8011cda:	693b      	ldr	r3, [r7, #16]
 8011cdc:	3301      	adds	r3, #1
 8011cde:	e009      	b.n	8011cf4 <LL_I2C_ConfigSpeed+0x5c>
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8011ce6:	fb01 f303 	mul.w	r3, r1, r3
 8011cea:	4936      	ldr	r1, [pc, #216]	@ (8011dc4 <LL_I2C_ConfigSpeed+0x12c>)
 8011cec:	fba1 1303 	umull	r1, r3, r1, r3
 8011cf0:	099b      	lsrs	r3, r3, #6
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	431a      	orrs	r2, r3
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	4a30      	ldr	r2, [pc, #192]	@ (8011dc0 <LL_I2C_ConfigSpeed+0x128>)
 8011cfe:	4293      	cmp	r3, r2
 8011d00:	d939      	bls.n	8011d76 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d117      	bne.n	8011d38 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8011d08:	687a      	ldr	r2, [r7, #4]
 8011d0a:	4613      	mov	r3, r2
 8011d0c:	005b      	lsls	r3, r3, #1
 8011d0e:	4413      	add	r3, r2
 8011d10:	68ba      	ldr	r2, [r7, #8]
 8011d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d009      	beq.n	8011d32 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8011d1e:	687a      	ldr	r2, [r7, #4]
 8011d20:	4613      	mov	r3, r2
 8011d22:	005b      	lsls	r3, r3, #1
 8011d24:	4413      	add	r3, r2
 8011d26:	68ba      	ldr	r2, [r7, #8]
 8011d28:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8011d2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d30:	e01d      	b.n	8011d6e <LL_I2C_ConfigSpeed+0xd6>
 8011d32:	f248 0301 	movw	r3, #32769	@ 0x8001
 8011d36:	e01a      	b.n	8011d6e <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8011d38:	687a      	ldr	r2, [r7, #4]
 8011d3a:	4613      	mov	r3, r2
 8011d3c:	009b      	lsls	r3, r3, #2
 8011d3e:	4413      	add	r3, r2
 8011d40:	009a      	lsls	r2, r3, #2
 8011d42:	4413      	add	r3, r2
 8011d44:	68ba      	ldr	r2, [r7, #8]
 8011d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d00b      	beq.n	8011d6a <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8011d52:	687a      	ldr	r2, [r7, #4]
 8011d54:	4613      	mov	r3, r2
 8011d56:	009b      	lsls	r3, r3, #2
 8011d58:	4413      	add	r3, r2
 8011d5a:	009a      	lsls	r2, r3, #2
 8011d5c:	4413      	add	r3, r2
 8011d5e:	68ba      	ldr	r2, [r7, #8]
 8011d60:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8011d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d68:	e001      	b.n	8011d6e <LL_I2C_ConfigSpeed+0xd6>
 8011d6a:	f248 0301 	movw	r3, #32769	@ 0x8001
 8011d6e:	683a      	ldr	r2, [r7, #0]
 8011d70:	4313      	orrs	r3, r2
 8011d72:	617b      	str	r3, [r7, #20]
 8011d74:	e011      	b.n	8011d9a <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	005b      	lsls	r3, r3, #1
 8011d7a:	68ba      	ldr	r2, [r7, #8]
 8011d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011d80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8011d84:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d005      	beq.n	8011d96 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8011d8e:	68ba      	ldr	r2, [r7, #8]
 8011d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d94:	e000      	b.n	8011d98 <LL_I2C_ConfigSpeed+0x100>
 8011d96:	2304      	movs	r3, #4
 8011d98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	69db      	ldr	r3, [r3, #28]
 8011d9e:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8011da2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011da6:	697a      	ldr	r2, [r7, #20]
 8011da8:	431a      	orrs	r2, r3
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	61da      	str	r2, [r3, #28]
}
 8011dae:	bf00      	nop
 8011db0:	371c      	adds	r7, #28
 8011db2:	46bd      	mov	sp, r7
 8011db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db8:	4770      	bx	lr
 8011dba:	bf00      	nop
 8011dbc:	431bde83 	.word	0x431bde83
 8011dc0:	000186a0 	.word	0x000186a0
 8011dc4:	10624dd3 	.word	0x10624dd3

08011dc8 <LL_I2C_SetMode>:
{
 8011dc8:	b480      	push	{r7}
 8011dca:	b083      	sub	sp, #12
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	f023 021a 	bic.w	r2, r3, #26
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	431a      	orrs	r2, r3
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	601a      	str	r2, [r3, #0]
}
 8011de2:	bf00      	nop
 8011de4:	370c      	adds	r7, #12
 8011de6:	46bd      	mov	sp, r7
 8011de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dec:	4770      	bx	lr

08011dee <LL_I2C_AcknowledgeNextData>:
{
 8011dee:	b480      	push	{r7}
 8011df0:	b083      	sub	sp, #12
 8011df2:	af00      	add	r7, sp, #0
 8011df4:	6078      	str	r0, [r7, #4]
 8011df6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	431a      	orrs	r2, r3
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	601a      	str	r2, [r3, #0]
}
 8011e08:	bf00      	nop
 8011e0a:	370c      	adds	r7, #12
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e12:	4770      	bx	lr

08011e14 <LL_APB1_GRP1_ForceReset>:
{
 8011e14:	b480      	push	{r7}
 8011e16:	b083      	sub	sp, #12
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR, Periphs);
 8011e1c:	4b05      	ldr	r3, [pc, #20]	@ (8011e34 <LL_APB1_GRP1_ForceReset+0x20>)
 8011e1e:	6a1a      	ldr	r2, [r3, #32]
 8011e20:	4904      	ldr	r1, [pc, #16]	@ (8011e34 <LL_APB1_GRP1_ForceReset+0x20>)
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	4313      	orrs	r3, r2
 8011e26:	620b      	str	r3, [r1, #32]
}
 8011e28:	bf00      	nop
 8011e2a:	370c      	adds	r7, #12
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e32:	4770      	bx	lr
 8011e34:	40023800 	.word	0x40023800

08011e38 <LL_APB1_GRP1_ReleaseReset>:
{
 8011e38:	b480      	push	{r7}
 8011e3a:	b083      	sub	sp, #12
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 8011e40:	4b06      	ldr	r3, [pc, #24]	@ (8011e5c <LL_APB1_GRP1_ReleaseReset+0x24>)
 8011e42:	6a1a      	ldr	r2, [r3, #32]
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	43db      	mvns	r3, r3
 8011e48:	4904      	ldr	r1, [pc, #16]	@ (8011e5c <LL_APB1_GRP1_ReleaseReset+0x24>)
 8011e4a:	4013      	ands	r3, r2
 8011e4c:	620b      	str	r3, [r1, #32]
}
 8011e4e:	bf00      	nop
 8011e50:	370c      	adds	r7, #12
 8011e52:	46bd      	mov	sp, r7
 8011e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e58:	4770      	bx	lr
 8011e5a:	bf00      	nop
 8011e5c:	40023800 	.word	0x40023800

08011e60 <LL_I2C_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are de-initialized
  *          - ERROR  I2C registers are not de-initialized
  */
uint32_t LL_I2C_DeInit(I2C_TypeDef *I2Cx)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b084      	sub	sp, #16
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	73fb      	strb	r3, [r7, #15]

  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));

  if (I2Cx == I2C1)
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	4a16      	ldr	r2, [pc, #88]	@ (8011ec8 <LL_I2C_DeInit+0x68>)
 8011e70:	4293      	cmp	r3, r2
 8011e72:	d108      	bne.n	8011e86 <LL_I2C_DeInit+0x26>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C1);
 8011e74:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8011e78:	f7ff ffcc 	bl	8011e14 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C1);
 8011e7c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8011e80:	f7ff ffda 	bl	8011e38 <LL_APB1_GRP1_ReleaseReset>
 8011e84:	e01b      	b.n	8011ebe <LL_I2C_DeInit+0x5e>
  }
  else if (I2Cx == I2C2)
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	4a10      	ldr	r2, [pc, #64]	@ (8011ecc <LL_I2C_DeInit+0x6c>)
 8011e8a:	4293      	cmp	r3, r2
 8011e8c:	d108      	bne.n	8011ea0 <LL_I2C_DeInit+0x40>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C2);
 8011e8e:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8011e92:	f7ff ffbf 	bl	8011e14 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C2);
 8011e96:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8011e9a:	f7ff ffcd 	bl	8011e38 <LL_APB1_GRP1_ReleaseReset>
 8011e9e:	e00e      	b.n	8011ebe <LL_I2C_DeInit+0x5e>

  }
#if defined(I2C3)
  else if (I2Cx == I2C3)
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8011ed0 <LL_I2C_DeInit+0x70>)
 8011ea4:	4293      	cmp	r3, r2
 8011ea6:	d108      	bne.n	8011eba <LL_I2C_DeInit+0x5a>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C3);
 8011ea8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8011eac:	f7ff ffb2 	bl	8011e14 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C3);
 8011eb0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8011eb4:	f7ff ffc0 	bl	8011e38 <LL_APB1_GRP1_ReleaseReset>
 8011eb8:	e001      	b.n	8011ebe <LL_I2C_DeInit+0x5e>
  }
#endif
  else
  {
    status = ERROR;
 8011eba:	2301      	movs	r3, #1
 8011ebc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3710      	adds	r7, #16
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}
 8011ec8:	40005400 	.word	0x40005400
 8011ecc:	40005800 	.word	0x40005800
 8011ed0:	40005c00 	.word	0x40005c00

08011ed4 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b086      	sub	sp, #24
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
 8011edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8011ede:	6878      	ldr	r0, [r7, #4]
 8011ee0:	f7ff feb2 	bl	8011c48 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8011ee4:	f107 0308 	add.w	r3, r7, #8
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f000 f895 	bl	8012018 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8011eee:	6939      	ldr	r1, [r7, #16]
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	685a      	ldr	r2, [r3, #4]
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	689b      	ldr	r3, [r3, #8]
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f7ff fecd 	bl	8011c98 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	68d9      	ldr	r1, [r3, #12]
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	695b      	ldr	r3, [r3, #20]
 8011f06:	461a      	mov	r2, r3
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f7ff fead 	bl	8011c68 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	4619      	mov	r1, r3
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f7ff ff57 	bl	8011dc8 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	f7ff fe84 	bl	8011c28 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	691b      	ldr	r3, [r3, #16]
 8011f24:	4619      	mov	r1, r3
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f7ff ff61 	bl	8011dee <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8011f2c:	2300      	movs	r3, #0
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3718      	adds	r7, #24
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}
	...

08011f38 <LL_RCC_GetSysClkSource>:
{
 8011f38:	b480      	push	{r7}
 8011f3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8011f3c:	4b04      	ldr	r3, [pc, #16]	@ (8011f50 <LL_RCC_GetSysClkSource+0x18>)
 8011f3e:	689b      	ldr	r3, [r3, #8]
 8011f40:	f003 030c 	and.w	r3, r3, #12
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	46bd      	mov	sp, r7
 8011f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4c:	4770      	bx	lr
 8011f4e:	bf00      	nop
 8011f50:	40023800 	.word	0x40023800

08011f54 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8011f54:	b480      	push	{r7}
 8011f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8011f58:	4b04      	ldr	r3, [pc, #16]	@ (8011f6c <LL_RCC_GetAHBPrescaler+0x18>)
 8011f5a:	689b      	ldr	r3, [r3, #8]
 8011f5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	46bd      	mov	sp, r7
 8011f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f68:	4770      	bx	lr
 8011f6a:	bf00      	nop
 8011f6c:	40023800 	.word	0x40023800

08011f70 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8011f70:	b480      	push	{r7}
 8011f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8011f74:	4b04      	ldr	r3, [pc, #16]	@ (8011f88 <LL_RCC_GetAPB1Prescaler+0x18>)
 8011f76:	689b      	ldr	r3, [r3, #8]
 8011f78:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f84:	4770      	bx	lr
 8011f86:	bf00      	nop
 8011f88:	40023800 	.word	0x40023800

08011f8c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8011f8c:	b480      	push	{r7}
 8011f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8011f90:	4b04      	ldr	r3, [pc, #16]	@ (8011fa4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8011f92:	689b      	ldr	r3, [r3, #8]
 8011f94:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa0:	4770      	bx	lr
 8011fa2:	bf00      	nop
 8011fa4:	40023800 	.word	0x40023800

08011fa8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8011fa8:	b480      	push	{r7}
 8011faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8011fac:	4b04      	ldr	r3, [pc, #16]	@ (8011fc0 <LL_RCC_PLL_GetMainSource+0x18>)
 8011fae:	685b      	ldr	r3, [r3, #4]
 8011fb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbc:	4770      	bx	lr
 8011fbe:	bf00      	nop
 8011fc0:	40023800 	.word	0x40023800

08011fc4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8011fc4:	b480      	push	{r7}
 8011fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8011fc8:	4b04      	ldr	r3, [pc, #16]	@ (8011fdc <LL_RCC_PLL_GetN+0x18>)
 8011fca:	685b      	ldr	r3, [r3, #4]
 8011fcc:	099b      	lsrs	r3, r3, #6
 8011fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fda:	4770      	bx	lr
 8011fdc:	40023800 	.word	0x40023800

08011fe0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8011fe4:	4b04      	ldr	r3, [pc, #16]	@ (8011ff8 <LL_RCC_PLL_GetP+0x18>)
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff4:	4770      	bx	lr
 8011ff6:	bf00      	nop
 8011ff8:	40023800 	.word	0x40023800

08011ffc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8011ffc:	b480      	push	{r7}
 8011ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8012000:	4b04      	ldr	r3, [pc, #16]	@ (8012014 <LL_RCC_PLL_GetDivider+0x18>)
 8012002:	685b      	ldr	r3, [r3, #4]
 8012004:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8012008:	4618      	mov	r0, r3
 801200a:	46bd      	mov	sp, r7
 801200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012010:	4770      	bx	lr
 8012012:	bf00      	nop
 8012014:	40023800 	.word	0x40023800

08012018 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b082      	sub	sp, #8
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8012020:	f000 f820 	bl	8012064 <RCC_GetSystemClockFreq>
 8012024:	4602      	mov	r2, r0
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	4618      	mov	r0, r3
 8012030:	f000 f840 	bl	80120b4 <RCC_GetHCLKClockFreq>
 8012034:	4602      	mov	r2, r0
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	685b      	ldr	r3, [r3, #4]
 801203e:	4618      	mov	r0, r3
 8012040:	f000 f84e 	bl	80120e0 <RCC_GetPCLK1ClockFreq>
 8012044:	4602      	mov	r2, r0
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	4618      	mov	r0, r3
 8012050:	f000 f85a 	bl	8012108 <RCC_GetPCLK2ClockFreq>
 8012054:	4602      	mov	r2, r0
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	60da      	str	r2, [r3, #12]
}
 801205a:	bf00      	nop
 801205c:	3708      	adds	r7, #8
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
	...

08012064 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b082      	sub	sp, #8
 8012068:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 801206a:	2300      	movs	r3, #0
 801206c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 801206e:	f7ff ff63 	bl	8011f38 <LL_RCC_GetSysClkSource>
 8012072:	4603      	mov	r3, r0
 8012074:	2b08      	cmp	r3, #8
 8012076:	d00c      	beq.n	8012092 <RCC_GetSystemClockFreq+0x2e>
 8012078:	2b08      	cmp	r3, #8
 801207a:	d80f      	bhi.n	801209c <RCC_GetSystemClockFreq+0x38>
 801207c:	2b00      	cmp	r3, #0
 801207e:	d002      	beq.n	8012086 <RCC_GetSystemClockFreq+0x22>
 8012080:	2b04      	cmp	r3, #4
 8012082:	d003      	beq.n	801208c <RCC_GetSystemClockFreq+0x28>
 8012084:	e00a      	b.n	801209c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8012086:	4b09      	ldr	r3, [pc, #36]	@ (80120ac <RCC_GetSystemClockFreq+0x48>)
 8012088:	607b      	str	r3, [r7, #4]
      break;
 801208a:	e00a      	b.n	80120a2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 801208c:	4b08      	ldr	r3, [pc, #32]	@ (80120b0 <RCC_GetSystemClockFreq+0x4c>)
 801208e:	607b      	str	r3, [r7, #4]
      break;
 8012090:	e007      	b.n	80120a2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8012092:	2008      	movs	r0, #8
 8012094:	f000 f84c 	bl	8012130 <RCC_PLL_GetFreqDomain_SYS>
 8012098:	6078      	str	r0, [r7, #4]
      break;
 801209a:	e002      	b.n	80120a2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 801209c:	4b03      	ldr	r3, [pc, #12]	@ (80120ac <RCC_GetSystemClockFreq+0x48>)
 801209e:	607b      	str	r3, [r7, #4]
      break;
 80120a0:	bf00      	nop
  }

  return frequency;
 80120a2:	687b      	ldr	r3, [r7, #4]
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	3708      	adds	r7, #8
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}
 80120ac:	00f42400 	.word	0x00f42400
 80120b0:	007a1200 	.word	0x007a1200

080120b4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80120bc:	f7ff ff4a 	bl	8011f54 <LL_RCC_GetAHBPrescaler>
 80120c0:	4603      	mov	r3, r0
 80120c2:	091b      	lsrs	r3, r3, #4
 80120c4:	f003 030f 	and.w	r3, r3, #15
 80120c8:	4a04      	ldr	r2, [pc, #16]	@ (80120dc <RCC_GetHCLKClockFreq+0x28>)
 80120ca:	5cd3      	ldrb	r3, [r2, r3]
 80120cc:	461a      	mov	r2, r3
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	40d3      	lsrs	r3, r2
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3708      	adds	r7, #8
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}
 80120da:	bf00      	nop
 80120dc:	080159a8 	.word	0x080159a8

080120e0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b082      	sub	sp, #8
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80120e8:	f7ff ff42 	bl	8011f70 <LL_RCC_GetAPB1Prescaler>
 80120ec:	4603      	mov	r3, r0
 80120ee:	0a9b      	lsrs	r3, r3, #10
 80120f0:	4a04      	ldr	r2, [pc, #16]	@ (8012104 <RCC_GetPCLK1ClockFreq+0x24>)
 80120f2:	5cd3      	ldrb	r3, [r2, r3]
 80120f4:	461a      	mov	r2, r3
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	40d3      	lsrs	r3, r2
}
 80120fa:	4618      	mov	r0, r3
 80120fc:	3708      	adds	r7, #8
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}
 8012102:	bf00      	nop
 8012104:	080159b8 	.word	0x080159b8

08012108 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b082      	sub	sp, #8
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8012110:	f7ff ff3c 	bl	8011f8c <LL_RCC_GetAPB2Prescaler>
 8012114:	4603      	mov	r3, r0
 8012116:	0b5b      	lsrs	r3, r3, #13
 8012118:	4a04      	ldr	r2, [pc, #16]	@ (801212c <RCC_GetPCLK2ClockFreq+0x24>)
 801211a:	5cd3      	ldrb	r3, [r2, r3]
 801211c:	461a      	mov	r2, r3
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	40d3      	lsrs	r3, r2
}
 8012122:	4618      	mov	r0, r3
 8012124:	3708      	adds	r7, #8
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}
 801212a:	bf00      	nop
 801212c:	080159b8 	.word	0x080159b8

08012130 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8012130:	b590      	push	{r4, r7, lr}
 8012132:	b087      	sub	sp, #28
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8012138:	2300      	movs	r3, #0
 801213a:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 801213c:	2300      	movs	r3, #0
 801213e:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8012140:	2300      	movs	r3, #0
 8012142:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8012144:	f7ff ff30 	bl	8011fa8 <LL_RCC_PLL_GetMainSource>
 8012148:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d004      	beq.n	801215a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012156:	d003      	beq.n	8012160 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8012158:	e005      	b.n	8012166 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 801215a:	4b12      	ldr	r3, [pc, #72]	@ (80121a4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 801215c:	617b      	str	r3, [r7, #20]
      break;
 801215e:	e005      	b.n	801216c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8012160:	4b11      	ldr	r3, [pc, #68]	@ (80121a8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8012162:	617b      	str	r3, [r7, #20]
      break;
 8012164:	e002      	b.n	801216c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8012166:	4b0f      	ldr	r3, [pc, #60]	@ (80121a4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8012168:	617b      	str	r3, [r7, #20]
      break;
 801216a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2b08      	cmp	r3, #8
 8012170:	d113      	bne.n	801219a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8012172:	f7ff ff43 	bl	8011ffc <LL_RCC_PLL_GetDivider>
 8012176:	4602      	mov	r2, r0
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	fbb3 f4f2 	udiv	r4, r3, r2
 801217e:	f7ff ff21 	bl	8011fc4 <LL_RCC_PLL_GetN>
 8012182:	4603      	mov	r3, r0
 8012184:	fb03 f404 	mul.w	r4, r3, r4
 8012188:	f7ff ff2a 	bl	8011fe0 <LL_RCC_PLL_GetP>
 801218c:	4603      	mov	r3, r0
 801218e:	0c1b      	lsrs	r3, r3, #16
 8012190:	3301      	adds	r3, #1
 8012192:	005b      	lsls	r3, r3, #1
 8012194:	fbb4 f3f3 	udiv	r3, r4, r3
 8012198:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 801219a:	693b      	ldr	r3, [r7, #16]
}
 801219c:	4618      	mov	r0, r3
 801219e:	371c      	adds	r7, #28
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd90      	pop	{r4, r7, pc}
 80121a4:	00f42400 	.word	0x00f42400
 80121a8:	007a1200 	.word	0x007a1200

080121ac <LL_SPI_IsEnabled>:
{
 80121ac:	b480      	push	{r7}
 80121ae:	b083      	sub	sp, #12
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80121bc:	2b40      	cmp	r3, #64	@ 0x40
 80121be:	d101      	bne.n	80121c4 <LL_SPI_IsEnabled+0x18>
 80121c0:	2301      	movs	r3, #1
 80121c2:	e000      	b.n	80121c6 <LL_SPI_IsEnabled+0x1a>
 80121c4:	2300      	movs	r3, #0
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	370c      	adds	r7, #12
 80121ca:	46bd      	mov	sp, r7
 80121cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d0:	4770      	bx	lr

080121d2 <LL_SPI_SetCRCPolynomial>:
{
 80121d2:	b480      	push	{r7}
 80121d4:	b083      	sub	sp, #12
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	6078      	str	r0, [r7, #4]
 80121da:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	b29b      	uxth	r3, r3
 80121e0:	461a      	mov	r2, r3
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	611a      	str	r2, [r3, #16]
}
 80121e6:	bf00      	nop
 80121e8:	370c      	adds	r7, #12
 80121ea:	46bd      	mov	sp, r7
 80121ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f0:	4770      	bx	lr

080121f2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80121f2:	b580      	push	{r7, lr}
 80121f4:	b084      	sub	sp, #16
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	6078      	str	r0, [r7, #4]
 80121fa:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80121fc:	2301      	movs	r3, #1
 80121fe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f7ff ffd3 	bl	80121ac <LL_SPI_IsEnabled>
 8012206:	4603      	mov	r3, r0
 8012208:	2b00      	cmp	r3, #0
 801220a:	d139      	bne.n	8012280 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012214:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8012218:	683a      	ldr	r2, [r7, #0]
 801221a:	6811      	ldr	r1, [r2, #0]
 801221c:	683a      	ldr	r2, [r7, #0]
 801221e:	6852      	ldr	r2, [r2, #4]
 8012220:	4311      	orrs	r1, r2
 8012222:	683a      	ldr	r2, [r7, #0]
 8012224:	6892      	ldr	r2, [r2, #8]
 8012226:	4311      	orrs	r1, r2
 8012228:	683a      	ldr	r2, [r7, #0]
 801222a:	68d2      	ldr	r2, [r2, #12]
 801222c:	4311      	orrs	r1, r2
 801222e:	683a      	ldr	r2, [r7, #0]
 8012230:	6912      	ldr	r2, [r2, #16]
 8012232:	4311      	orrs	r1, r2
 8012234:	683a      	ldr	r2, [r7, #0]
 8012236:	6952      	ldr	r2, [r2, #20]
 8012238:	4311      	orrs	r1, r2
 801223a:	683a      	ldr	r2, [r7, #0]
 801223c:	6992      	ldr	r2, [r2, #24]
 801223e:	4311      	orrs	r1, r2
 8012240:	683a      	ldr	r2, [r7, #0]
 8012242:	69d2      	ldr	r2, [r2, #28]
 8012244:	4311      	orrs	r1, r2
 8012246:	683a      	ldr	r2, [r7, #0]
 8012248:	6a12      	ldr	r2, [r2, #32]
 801224a:	430a      	orrs	r2, r1
 801224c:	431a      	orrs	r2, r3
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	685b      	ldr	r3, [r3, #4]
 8012256:	f023 0204 	bic.w	r2, r3, #4
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	695b      	ldr	r3, [r3, #20]
 801225e:	0c1b      	lsrs	r3, r3, #16
 8012260:	431a      	orrs	r2, r3
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	6a1b      	ldr	r3, [r3, #32]
 801226a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801226e:	d105      	bne.n	801227c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012274:	4619      	mov	r1, r3
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f7ff ffab 	bl	80121d2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 801227c:	2300      	movs	r3, #0
 801227e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	69db      	ldr	r3, [r3, #28]
 8012284:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	61da      	str	r2, [r3, #28]
  return status;
 801228c:	7bfb      	ldrb	r3, [r7, #15]
}
 801228e:	4618      	mov	r0, r3
 8012290:	3710      	adds	r7, #16
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}

08012296 <LL_TIM_SetPrescaler>:
{
 8012296:	b480      	push	{r7}
 8012298:	b083      	sub	sp, #12
 801229a:	af00      	add	r7, sp, #0
 801229c:	6078      	str	r0, [r7, #4]
 801229e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	683a      	ldr	r2, [r7, #0]
 80122a4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80122a6:	bf00      	nop
 80122a8:	370c      	adds	r7, #12
 80122aa:	46bd      	mov	sp, r7
 80122ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b0:	4770      	bx	lr

080122b2 <LL_TIM_SetAutoReload>:
{
 80122b2:	b480      	push	{r7}
 80122b4:	b083      	sub	sp, #12
 80122b6:	af00      	add	r7, sp, #0
 80122b8:	6078      	str	r0, [r7, #4]
 80122ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	683a      	ldr	r2, [r7, #0]
 80122c0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80122c2:	bf00      	nop
 80122c4:	370c      	adds	r7, #12
 80122c6:	46bd      	mov	sp, r7
 80122c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122cc:	4770      	bx	lr

080122ce <LL_TIM_SetRepetitionCounter>:
{
 80122ce:	b480      	push	{r7}
 80122d0:	b083      	sub	sp, #12
 80122d2:	af00      	add	r7, sp, #0
 80122d4:	6078      	str	r0, [r7, #4]
 80122d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	683a      	ldr	r2, [r7, #0]
 80122dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80122de:	bf00      	nop
 80122e0:	370c      	adds	r7, #12
 80122e2:	46bd      	mov	sp, r7
 80122e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e8:	4770      	bx	lr

080122ea <LL_TIM_OC_SetCompareCH1>:
{
 80122ea:	b480      	push	{r7}
 80122ec:	b083      	sub	sp, #12
 80122ee:	af00      	add	r7, sp, #0
 80122f0:	6078      	str	r0, [r7, #4]
 80122f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	683a      	ldr	r2, [r7, #0]
 80122f8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80122fa:	bf00      	nop
 80122fc:	370c      	adds	r7, #12
 80122fe:	46bd      	mov	sp, r7
 8012300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012304:	4770      	bx	lr

08012306 <LL_TIM_OC_SetCompareCH2>:
{
 8012306:	b480      	push	{r7}
 8012308:	b083      	sub	sp, #12
 801230a:	af00      	add	r7, sp, #0
 801230c:	6078      	str	r0, [r7, #4]
 801230e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	683a      	ldr	r2, [r7, #0]
 8012314:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8012316:	bf00      	nop
 8012318:	370c      	adds	r7, #12
 801231a:	46bd      	mov	sp, r7
 801231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012320:	4770      	bx	lr

08012322 <LL_TIM_OC_SetCompareCH3>:
{
 8012322:	b480      	push	{r7}
 8012324:	b083      	sub	sp, #12
 8012326:	af00      	add	r7, sp, #0
 8012328:	6078      	str	r0, [r7, #4]
 801232a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	683a      	ldr	r2, [r7, #0]
 8012330:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8012332:	bf00      	nop
 8012334:	370c      	adds	r7, #12
 8012336:	46bd      	mov	sp, r7
 8012338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233c:	4770      	bx	lr

0801233e <LL_TIM_OC_SetCompareCH4>:
{
 801233e:	b480      	push	{r7}
 8012340:	b083      	sub	sp, #12
 8012342:	af00      	add	r7, sp, #0
 8012344:	6078      	str	r0, [r7, #4]
 8012346:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	683a      	ldr	r2, [r7, #0]
 801234c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 801234e:	bf00      	nop
 8012350:	370c      	adds	r7, #12
 8012352:	46bd      	mov	sp, r7
 8012354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012358:	4770      	bx	lr

0801235a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 801235a:	b480      	push	{r7}
 801235c:	b083      	sub	sp, #12
 801235e:	af00      	add	r7, sp, #0
 8012360:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	695b      	ldr	r3, [r3, #20]
 8012366:	f043 0201 	orr.w	r2, r3, #1
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	615a      	str	r2, [r3, #20]
}
 801236e:	bf00      	nop
 8012370:	370c      	adds	r7, #12
 8012372:	46bd      	mov	sp, r7
 8012374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012378:	4770      	bx	lr
	...

0801237c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b084      	sub	sp, #16
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
 8012384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	4a3d      	ldr	r2, [pc, #244]	@ (8012484 <LL_TIM_Init+0x108>)
 8012390:	4293      	cmp	r3, r2
 8012392:	d013      	beq.n	80123bc <LL_TIM_Init+0x40>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801239a:	d00f      	beq.n	80123bc <LL_TIM_Init+0x40>
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	4a3a      	ldr	r2, [pc, #232]	@ (8012488 <LL_TIM_Init+0x10c>)
 80123a0:	4293      	cmp	r3, r2
 80123a2:	d00b      	beq.n	80123bc <LL_TIM_Init+0x40>
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	4a39      	ldr	r2, [pc, #228]	@ (801248c <LL_TIM_Init+0x110>)
 80123a8:	4293      	cmp	r3, r2
 80123aa:	d007      	beq.n	80123bc <LL_TIM_Init+0x40>
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	4a38      	ldr	r2, [pc, #224]	@ (8012490 <LL_TIM_Init+0x114>)
 80123b0:	4293      	cmp	r3, r2
 80123b2:	d003      	beq.n	80123bc <LL_TIM_Init+0x40>
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	4a37      	ldr	r2, [pc, #220]	@ (8012494 <LL_TIM_Init+0x118>)
 80123b8:	4293      	cmp	r3, r2
 80123ba:	d106      	bne.n	80123ca <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	685b      	ldr	r3, [r3, #4]
 80123c6:	4313      	orrs	r3, r2
 80123c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	4a2d      	ldr	r2, [pc, #180]	@ (8012484 <LL_TIM_Init+0x108>)
 80123ce:	4293      	cmp	r3, r2
 80123d0:	d02b      	beq.n	801242a <LL_TIM_Init+0xae>
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80123d8:	d027      	beq.n	801242a <LL_TIM_Init+0xae>
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	4a2a      	ldr	r2, [pc, #168]	@ (8012488 <LL_TIM_Init+0x10c>)
 80123de:	4293      	cmp	r3, r2
 80123e0:	d023      	beq.n	801242a <LL_TIM_Init+0xae>
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	4a29      	ldr	r2, [pc, #164]	@ (801248c <LL_TIM_Init+0x110>)
 80123e6:	4293      	cmp	r3, r2
 80123e8:	d01f      	beq.n	801242a <LL_TIM_Init+0xae>
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	4a28      	ldr	r2, [pc, #160]	@ (8012490 <LL_TIM_Init+0x114>)
 80123ee:	4293      	cmp	r3, r2
 80123f0:	d01b      	beq.n	801242a <LL_TIM_Init+0xae>
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	4a27      	ldr	r2, [pc, #156]	@ (8012494 <LL_TIM_Init+0x118>)
 80123f6:	4293      	cmp	r3, r2
 80123f8:	d017      	beq.n	801242a <LL_TIM_Init+0xae>
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	4a26      	ldr	r2, [pc, #152]	@ (8012498 <LL_TIM_Init+0x11c>)
 80123fe:	4293      	cmp	r3, r2
 8012400:	d013      	beq.n	801242a <LL_TIM_Init+0xae>
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	4a25      	ldr	r2, [pc, #148]	@ (801249c <LL_TIM_Init+0x120>)
 8012406:	4293      	cmp	r3, r2
 8012408:	d00f      	beq.n	801242a <LL_TIM_Init+0xae>
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	4a24      	ldr	r2, [pc, #144]	@ (80124a0 <LL_TIM_Init+0x124>)
 801240e:	4293      	cmp	r3, r2
 8012410:	d00b      	beq.n	801242a <LL_TIM_Init+0xae>
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	4a23      	ldr	r2, [pc, #140]	@ (80124a4 <LL_TIM_Init+0x128>)
 8012416:	4293      	cmp	r3, r2
 8012418:	d007      	beq.n	801242a <LL_TIM_Init+0xae>
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	4a22      	ldr	r2, [pc, #136]	@ (80124a8 <LL_TIM_Init+0x12c>)
 801241e:	4293      	cmp	r3, r2
 8012420:	d003      	beq.n	801242a <LL_TIM_Init+0xae>
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	4a21      	ldr	r2, [pc, #132]	@ (80124ac <LL_TIM_Init+0x130>)
 8012426:	4293      	cmp	r3, r2
 8012428:	d106      	bne.n	8012438 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8012430:	683b      	ldr	r3, [r7, #0]
 8012432:	68db      	ldr	r3, [r3, #12]
 8012434:	4313      	orrs	r3, r2
 8012436:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	68fa      	ldr	r2, [r7, #12]
 801243c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	689b      	ldr	r3, [r3, #8]
 8012442:	4619      	mov	r1, r3
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f7ff ff34 	bl	80122b2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	881b      	ldrh	r3, [r3, #0]
 801244e:	4619      	mov	r1, r3
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f7ff ff20 	bl	8012296 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	4a0a      	ldr	r2, [pc, #40]	@ (8012484 <LL_TIM_Init+0x108>)
 801245a:	4293      	cmp	r3, r2
 801245c:	d003      	beq.n	8012466 <LL_TIM_Init+0xea>
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	4a0c      	ldr	r2, [pc, #48]	@ (8012494 <LL_TIM_Init+0x118>)
 8012462:	4293      	cmp	r3, r2
 8012464:	d105      	bne.n	8012472 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	691b      	ldr	r3, [r3, #16]
 801246a:	4619      	mov	r1, r3
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f7ff ff2e 	bl	80122ce <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8012472:	6878      	ldr	r0, [r7, #4]
 8012474:	f7ff ff71 	bl	801235a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8012478:	2300      	movs	r3, #0
}
 801247a:	4618      	mov	r0, r3
 801247c:	3710      	adds	r7, #16
 801247e:	46bd      	mov	sp, r7
 8012480:	bd80      	pop	{r7, pc}
 8012482:	bf00      	nop
 8012484:	40010000 	.word	0x40010000
 8012488:	40000400 	.word	0x40000400
 801248c:	40000800 	.word	0x40000800
 8012490:	40000c00 	.word	0x40000c00
 8012494:	40010400 	.word	0x40010400
 8012498:	40014000 	.word	0x40014000
 801249c:	40014400 	.word	0x40014400
 80124a0:	40014800 	.word	0x40014800
 80124a4:	40001800 	.word	0x40001800
 80124a8:	40001c00 	.word	0x40001c00
 80124ac:	40002000 	.word	0x40002000

080124b0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b086      	sub	sp, #24
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	60f8      	str	r0, [r7, #12]
 80124b8:	60b9      	str	r1, [r7, #8]
 80124ba:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80124bc:	2301      	movs	r3, #1
 80124be:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80124c6:	d027      	beq.n	8012518 <LL_TIM_OC_Init+0x68>
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80124ce:	d82a      	bhi.n	8012526 <LL_TIM_OC_Init+0x76>
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80124d6:	d018      	beq.n	801250a <LL_TIM_OC_Init+0x5a>
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80124de:	d822      	bhi.n	8012526 <LL_TIM_OC_Init+0x76>
 80124e0:	68bb      	ldr	r3, [r7, #8]
 80124e2:	2b01      	cmp	r3, #1
 80124e4:	d003      	beq.n	80124ee <LL_TIM_OC_Init+0x3e>
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	2b10      	cmp	r3, #16
 80124ea:	d007      	beq.n	80124fc <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80124ec:	e01b      	b.n	8012526 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80124ee:	6879      	ldr	r1, [r7, #4]
 80124f0:	68f8      	ldr	r0, [r7, #12]
 80124f2:	f000 f861 	bl	80125b8 <OC1Config>
 80124f6:	4603      	mov	r3, r0
 80124f8:	75fb      	strb	r3, [r7, #23]
      break;
 80124fa:	e015      	b.n	8012528 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80124fc:	6879      	ldr	r1, [r7, #4]
 80124fe:	68f8      	ldr	r0, [r7, #12]
 8012500:	f000 f8c6 	bl	8012690 <OC2Config>
 8012504:	4603      	mov	r3, r0
 8012506:	75fb      	strb	r3, [r7, #23]
      break;
 8012508:	e00e      	b.n	8012528 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 801250a:	6879      	ldr	r1, [r7, #4]
 801250c:	68f8      	ldr	r0, [r7, #12]
 801250e:	f000 f92f 	bl	8012770 <OC3Config>
 8012512:	4603      	mov	r3, r0
 8012514:	75fb      	strb	r3, [r7, #23]
      break;
 8012516:	e007      	b.n	8012528 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8012518:	6879      	ldr	r1, [r7, #4]
 801251a:	68f8      	ldr	r0, [r7, #12]
 801251c:	f000 f998 	bl	8012850 <OC4Config>
 8012520:	4603      	mov	r3, r0
 8012522:	75fb      	strb	r3, [r7, #23]
      break;
 8012524:	e000      	b.n	8012528 <LL_TIM_OC_Init+0x78>
      break;
 8012526:	bf00      	nop
  }

  return result;
 8012528:	7dfb      	ldrb	r3, [r7, #23]
}
 801252a:	4618      	mov	r0, r3
 801252c:	3718      	adds	r7, #24
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}

08012532 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8012532:	b480      	push	{r7}
 8012534:	b085      	sub	sp, #20
 8012536:	af00      	add	r7, sp, #0
 8012538:	6078      	str	r0, [r7, #4]
 801253a:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 801253c:	2300      	movs	r3, #0
 801253e:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8012546:	683a      	ldr	r2, [r7, #0]
 8012548:	7b12      	ldrb	r2, [r2, #12]
 801254a:	4313      	orrs	r3, r2
 801254c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	689b      	ldr	r3, [r3, #8]
 8012558:	4313      	orrs	r3, r2
 801255a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	685b      	ldr	r3, [r3, #4]
 8012566:	4313      	orrs	r3, r2
 8012568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	4313      	orrs	r3, r2
 8012576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801257e:	683a      	ldr	r2, [r7, #0]
 8012580:	89d2      	ldrh	r2, [r2, #14]
 8012582:	4313      	orrs	r3, r2
 8012584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	691b      	ldr	r3, [r3, #16]
 8012590:	4313      	orrs	r3, r2
 8012592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	695b      	ldr	r3, [r3, #20]
 801259e:	4313      	orrs	r3, r2
 80125a0:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	68fa      	ldr	r2, [r7, #12]
 80125a6:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 80125a8:	2300      	movs	r3, #0
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	3714      	adds	r7, #20
 80125ae:	46bd      	mov	sp, r7
 80125b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b4:	4770      	bx	lr
	...

080125b8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b086      	sub	sp, #24
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	6a1b      	ldr	r3, [r3, #32]
 80125c6:	f023 0201 	bic.w	r2, r3, #1
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	6a1b      	ldr	r3, [r3, #32]
 80125d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	685b      	ldr	r3, [r3, #4]
 80125d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	699b      	ldr	r3, [r3, #24]
 80125de:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	f023 0303 	bic.w	r3, r3, #3
 80125e6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	4313      	orrs	r3, r2
 80125f4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80125f6:	697b      	ldr	r3, [r7, #20]
 80125f8:	f023 0202 	bic.w	r2, r3, #2
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	691b      	ldr	r3, [r3, #16]
 8012600:	4313      	orrs	r3, r2
 8012602:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	f023 0201 	bic.w	r2, r3, #1
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	685b      	ldr	r3, [r3, #4]
 801260e:	4313      	orrs	r3, r2
 8012610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	4a1c      	ldr	r2, [pc, #112]	@ (8012688 <OC1Config+0xd0>)
 8012616:	4293      	cmp	r3, r2
 8012618:	d003      	beq.n	8012622 <OC1Config+0x6a>
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	4a1b      	ldr	r2, [pc, #108]	@ (801268c <OC1Config+0xd4>)
 801261e:	4293      	cmp	r3, r2
 8012620:	d11e      	bne.n	8012660 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	f023 0208 	bic.w	r2, r3, #8
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	695b      	ldr	r3, [r3, #20]
 801262c:	009b      	lsls	r3, r3, #2
 801262e:	4313      	orrs	r3, r2
 8012630:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	f023 0204 	bic.w	r2, r3, #4
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	689b      	ldr	r3, [r3, #8]
 801263c:	009b      	lsls	r3, r3, #2
 801263e:	4313      	orrs	r3, r2
 8012640:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8012642:	693b      	ldr	r3, [r7, #16]
 8012644:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	699b      	ldr	r3, [r3, #24]
 801264c:	4313      	orrs	r3, r2
 801264e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8012650:	693b      	ldr	r3, [r7, #16]
 8012652:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	69db      	ldr	r3, [r3, #28]
 801265a:	005b      	lsls	r3, r3, #1
 801265c:	4313      	orrs	r3, r2
 801265e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	693a      	ldr	r2, [r7, #16]
 8012664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	68fa      	ldr	r2, [r7, #12]
 801266a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	68db      	ldr	r3, [r3, #12]
 8012670:	4619      	mov	r1, r3
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f7ff fe39 	bl	80122ea <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	697a      	ldr	r2, [r7, #20]
 801267c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 801267e:	2300      	movs	r3, #0
}
 8012680:	4618      	mov	r0, r3
 8012682:	3718      	adds	r7, #24
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}
 8012688:	40010000 	.word	0x40010000
 801268c:	40010400 	.word	0x40010400

08012690 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b086      	sub	sp, #24
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6a1b      	ldr	r3, [r3, #32]
 801269e:	f023 0210 	bic.w	r2, r3, #16
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	6a1b      	ldr	r3, [r3, #32]
 80126aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	685b      	ldr	r3, [r3, #4]
 80126b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	699b      	ldr	r3, [r3, #24]
 80126b6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80126be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	021b      	lsls	r3, r3, #8
 80126cc:	4313      	orrs	r3, r2
 80126ce:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	f023 0220 	bic.w	r2, r3, #32
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	691b      	ldr	r3, [r3, #16]
 80126da:	011b      	lsls	r3, r3, #4
 80126dc:	4313      	orrs	r3, r2
 80126de:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80126e0:	697b      	ldr	r3, [r7, #20]
 80126e2:	f023 0210 	bic.w	r2, r3, #16
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	011b      	lsls	r3, r3, #4
 80126ec:	4313      	orrs	r3, r2
 80126ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	4a1d      	ldr	r2, [pc, #116]	@ (8012768 <OC2Config+0xd8>)
 80126f4:	4293      	cmp	r3, r2
 80126f6:	d003      	beq.n	8012700 <OC2Config+0x70>
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	4a1c      	ldr	r2, [pc, #112]	@ (801276c <OC2Config+0xdc>)
 80126fc:	4293      	cmp	r3, r2
 80126fe:	d11f      	bne.n	8012740 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8012700:	697b      	ldr	r3, [r7, #20]
 8012702:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	695b      	ldr	r3, [r3, #20]
 801270a:	019b      	lsls	r3, r3, #6
 801270c:	4313      	orrs	r3, r2
 801270e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8012710:	697b      	ldr	r3, [r7, #20]
 8012712:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	689b      	ldr	r3, [r3, #8]
 801271a:	019b      	lsls	r3, r3, #6
 801271c:	4313      	orrs	r3, r2
 801271e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8012720:	693b      	ldr	r3, [r7, #16]
 8012722:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	699b      	ldr	r3, [r3, #24]
 801272a:	009b      	lsls	r3, r3, #2
 801272c:	4313      	orrs	r3, r2
 801272e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8012730:	693b      	ldr	r3, [r7, #16]
 8012732:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	69db      	ldr	r3, [r3, #28]
 801273a:	00db      	lsls	r3, r3, #3
 801273c:	4313      	orrs	r3, r2
 801273e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	693a      	ldr	r2, [r7, #16]
 8012744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	68fa      	ldr	r2, [r7, #12]
 801274a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	68db      	ldr	r3, [r3, #12]
 8012750:	4619      	mov	r1, r3
 8012752:	6878      	ldr	r0, [r7, #4]
 8012754:	f7ff fdd7 	bl	8012306 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	697a      	ldr	r2, [r7, #20]
 801275c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 801275e:	2300      	movs	r3, #0
}
 8012760:	4618      	mov	r0, r3
 8012762:	3718      	adds	r7, #24
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}
 8012768:	40010000 	.word	0x40010000
 801276c:	40010400 	.word	0x40010400

08012770 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b086      	sub	sp, #24
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	6a1b      	ldr	r3, [r3, #32]
 801277e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6a1b      	ldr	r3, [r3, #32]
 801278a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	685b      	ldr	r3, [r3, #4]
 8012790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	69db      	ldr	r3, [r3, #28]
 8012796:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	f023 0303 	bic.w	r3, r3, #3
 801279e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	4313      	orrs	r3, r2
 80127ac:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80127ae:	697b      	ldr	r3, [r7, #20]
 80127b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	691b      	ldr	r3, [r3, #16]
 80127b8:	021b      	lsls	r3, r3, #8
 80127ba:	4313      	orrs	r3, r2
 80127bc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	685b      	ldr	r3, [r3, #4]
 80127c8:	021b      	lsls	r3, r3, #8
 80127ca:	4313      	orrs	r3, r2
 80127cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	4a1d      	ldr	r2, [pc, #116]	@ (8012848 <OC3Config+0xd8>)
 80127d2:	4293      	cmp	r3, r2
 80127d4:	d003      	beq.n	80127de <OC3Config+0x6e>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	4a1c      	ldr	r2, [pc, #112]	@ (801284c <OC3Config+0xdc>)
 80127da:	4293      	cmp	r3, r2
 80127dc:	d11f      	bne.n	801281e <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	695b      	ldr	r3, [r3, #20]
 80127e8:	029b      	lsls	r3, r3, #10
 80127ea:	4313      	orrs	r3, r2
 80127ec:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80127ee:	697b      	ldr	r3, [r7, #20]
 80127f0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	689b      	ldr	r3, [r3, #8]
 80127f8:	029b      	lsls	r3, r3, #10
 80127fa:	4313      	orrs	r3, r2
 80127fc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	699b      	ldr	r3, [r3, #24]
 8012808:	011b      	lsls	r3, r3, #4
 801280a:	4313      	orrs	r3, r2
 801280c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 801280e:	693b      	ldr	r3, [r7, #16]
 8012810:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	69db      	ldr	r3, [r3, #28]
 8012818:	015b      	lsls	r3, r3, #5
 801281a:	4313      	orrs	r3, r2
 801281c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	693a      	ldr	r2, [r7, #16]
 8012822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	68fa      	ldr	r2, [r7, #12]
 8012828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	68db      	ldr	r3, [r3, #12]
 801282e:	4619      	mov	r1, r3
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f7ff fd76 	bl	8012322 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	697a      	ldr	r2, [r7, #20]
 801283a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 801283c:	2300      	movs	r3, #0
}
 801283e:	4618      	mov	r0, r3
 8012840:	3718      	adds	r7, #24
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}
 8012846:	bf00      	nop
 8012848:	40010000 	.word	0x40010000
 801284c:	40010400 	.word	0x40010400

08012850 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b086      	sub	sp, #24
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
 8012858:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	6a1b      	ldr	r3, [r3, #32]
 801285e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6a1b      	ldr	r3, [r3, #32]
 801286a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	69db      	ldr	r3, [r3, #28]
 8012876:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801287e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	021b      	lsls	r3, r3, #8
 801288c:	4313      	orrs	r3, r2
 801288e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	691b      	ldr	r3, [r3, #16]
 801289a:	031b      	lsls	r3, r3, #12
 801289c:	4313      	orrs	r3, r2
 801289e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80128a0:	693b      	ldr	r3, [r7, #16]
 80128a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	685b      	ldr	r3, [r3, #4]
 80128aa:	031b      	lsls	r3, r3, #12
 80128ac:	4313      	orrs	r3, r2
 80128ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	4a11      	ldr	r2, [pc, #68]	@ (80128f8 <OC4Config+0xa8>)
 80128b4:	4293      	cmp	r3, r2
 80128b6:	d003      	beq.n	80128c0 <OC4Config+0x70>
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	4a10      	ldr	r2, [pc, #64]	@ (80128fc <OC4Config+0xac>)
 80128bc:	4293      	cmp	r3, r2
 80128be:	d107      	bne.n	80128d0 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80128c0:	697b      	ldr	r3, [r7, #20]
 80128c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	699b      	ldr	r3, [r3, #24]
 80128ca:	019b      	lsls	r3, r3, #6
 80128cc:	4313      	orrs	r3, r2
 80128ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	697a      	ldr	r2, [r7, #20]
 80128d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	68fa      	ldr	r2, [r7, #12]
 80128da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	68db      	ldr	r3, [r3, #12]
 80128e0:	4619      	mov	r1, r3
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f7ff fd2b 	bl	801233e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	693a      	ldr	r2, [r7, #16]
 80128ec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80128ee:	2300      	movs	r3, #0
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3718      	adds	r7, #24
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}
 80128f8:	40010000 	.word	0x40010000
 80128fc:	40010400 	.word	0x40010400

08012900 <LL_USART_IsEnabled>:
{
 8012900:	b480      	push	{r7}
 8012902:	b083      	sub	sp, #12
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	68db      	ldr	r3, [r3, #12]
 801290c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012914:	bf0c      	ite	eq
 8012916:	2301      	moveq	r3, #1
 8012918:	2300      	movne	r3, #0
 801291a:	b2db      	uxtb	r3, r3
}
 801291c:	4618      	mov	r0, r3
 801291e:	370c      	adds	r7, #12
 8012920:	46bd      	mov	sp, r7
 8012922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012926:	4770      	bx	lr

08012928 <LL_USART_SetStopBitsLength>:
{
 8012928:	b480      	push	{r7}
 801292a:	b083      	sub	sp, #12
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
 8012930:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	691b      	ldr	r3, [r3, #16]
 8012936:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 801293a:	683b      	ldr	r3, [r7, #0]
 801293c:	431a      	orrs	r2, r3
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	611a      	str	r2, [r3, #16]
}
 8012942:	bf00      	nop
 8012944:	370c      	adds	r7, #12
 8012946:	46bd      	mov	sp, r7
 8012948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294c:	4770      	bx	lr

0801294e <LL_USART_SetHWFlowCtrl>:
{
 801294e:	b480      	push	{r7}
 8012950:	b083      	sub	sp, #12
 8012952:	af00      	add	r7, sp, #0
 8012954:	6078      	str	r0, [r7, #4]
 8012956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	695b      	ldr	r3, [r3, #20]
 801295c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	431a      	orrs	r2, r3
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	615a      	str	r2, [r3, #20]
}
 8012968:	bf00      	nop
 801296a:	370c      	adds	r7, #12
 801296c:	46bd      	mov	sp, r7
 801296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012972:	4770      	bx	lr

08012974 <LL_USART_SetBaudRate>:
{
 8012974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012978:	b0c0      	sub	sp, #256	@ 0x100
 801297a:	af00      	add	r7, sp, #0
 801297c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8012980:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8012984:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8012988:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 801298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012994:	f040 810c 	bne.w	8012bb0 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8012998:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801299c:	2200      	movs	r2, #0
 801299e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80129a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80129a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80129aa:	4622      	mov	r2, r4
 80129ac:	462b      	mov	r3, r5
 80129ae:	1891      	adds	r1, r2, r2
 80129b0:	6639      	str	r1, [r7, #96]	@ 0x60
 80129b2:	415b      	adcs	r3, r3
 80129b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80129b6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80129ba:	4621      	mov	r1, r4
 80129bc:	eb12 0801 	adds.w	r8, r2, r1
 80129c0:	4629      	mov	r1, r5
 80129c2:	eb43 0901 	adc.w	r9, r3, r1
 80129c6:	f04f 0200 	mov.w	r2, #0
 80129ca:	f04f 0300 	mov.w	r3, #0
 80129ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80129d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80129d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80129da:	4690      	mov	r8, r2
 80129dc:	4699      	mov	r9, r3
 80129de:	4623      	mov	r3, r4
 80129e0:	eb18 0303 	adds.w	r3, r8, r3
 80129e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80129e8:	462b      	mov	r3, r5
 80129ea:	eb49 0303 	adc.w	r3, r9, r3
 80129ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80129f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80129f6:	2200      	movs	r2, #0
 80129f8:	469a      	mov	sl, r3
 80129fa:	4693      	mov	fp, r2
 80129fc:	eb1a 030a 	adds.w	r3, sl, sl
 8012a00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012a02:	eb4b 030b 	adc.w	r3, fp, fp
 8012a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012a08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8012a0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8012a10:	f7f5 fc96 	bl	8008340 <__aeabi_uldivmod>
 8012a14:	4602      	mov	r2, r0
 8012a16:	460b      	mov	r3, r1
 8012a18:	4b64      	ldr	r3, [pc, #400]	@ (8012bac <LL_USART_SetBaudRate+0x238>)
 8012a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8012a1e:	095b      	lsrs	r3, r3, #5
 8012a20:	b29b      	uxth	r3, r3
 8012a22:	011b      	lsls	r3, r3, #4
 8012a24:	b29c      	uxth	r4, r3
 8012a26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012a30:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8012a34:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8012a38:	4642      	mov	r2, r8
 8012a3a:	464b      	mov	r3, r9
 8012a3c:	1891      	adds	r1, r2, r2
 8012a3e:	6539      	str	r1, [r7, #80]	@ 0x50
 8012a40:	415b      	adcs	r3, r3
 8012a42:	657b      	str	r3, [r7, #84]	@ 0x54
 8012a44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8012a48:	4641      	mov	r1, r8
 8012a4a:	1851      	adds	r1, r2, r1
 8012a4c:	64b9      	str	r1, [r7, #72]	@ 0x48
 8012a4e:	4649      	mov	r1, r9
 8012a50:	414b      	adcs	r3, r1
 8012a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012a54:	f04f 0200 	mov.w	r2, #0
 8012a58:	f04f 0300 	mov.w	r3, #0
 8012a5c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8012a60:	4659      	mov	r1, fp
 8012a62:	00cb      	lsls	r3, r1, #3
 8012a64:	4651      	mov	r1, sl
 8012a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012a6a:	4651      	mov	r1, sl
 8012a6c:	00ca      	lsls	r2, r1, #3
 8012a6e:	4610      	mov	r0, r2
 8012a70:	4619      	mov	r1, r3
 8012a72:	4603      	mov	r3, r0
 8012a74:	4642      	mov	r2, r8
 8012a76:	189b      	adds	r3, r3, r2
 8012a78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012a7c:	464b      	mov	r3, r9
 8012a7e:	460a      	mov	r2, r1
 8012a80:	eb42 0303 	adc.w	r3, r2, r3
 8012a84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012a88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012a92:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8012a96:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8012a9a:	460b      	mov	r3, r1
 8012a9c:	18db      	adds	r3, r3, r3
 8012a9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012aa0:	4613      	mov	r3, r2
 8012aa2:	eb42 0303 	adc.w	r3, r2, r3
 8012aa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8012aa8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8012aac:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8012ab0:	f7f5 fc46 	bl	8008340 <__aeabi_uldivmod>
 8012ab4:	4602      	mov	r2, r0
 8012ab6:	460b      	mov	r3, r1
 8012ab8:	4611      	mov	r1, r2
 8012aba:	4b3c      	ldr	r3, [pc, #240]	@ (8012bac <LL_USART_SetBaudRate+0x238>)
 8012abc:	fba3 2301 	umull	r2, r3, r3, r1
 8012ac0:	095b      	lsrs	r3, r3, #5
 8012ac2:	2264      	movs	r2, #100	@ 0x64
 8012ac4:	fb02 f303 	mul.w	r3, r2, r3
 8012ac8:	1acb      	subs	r3, r1, r3
 8012aca:	00db      	lsls	r3, r3, #3
 8012acc:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8012ad0:	4b36      	ldr	r3, [pc, #216]	@ (8012bac <LL_USART_SetBaudRate+0x238>)
 8012ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8012ad6:	095b      	lsrs	r3, r3, #5
 8012ad8:	b29b      	uxth	r3, r3
 8012ada:	005b      	lsls	r3, r3, #1
 8012adc:	b29b      	uxth	r3, r3
 8012ade:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	4423      	add	r3, r4
 8012ae6:	b29c      	uxth	r4, r3
 8012ae8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012aec:	2200      	movs	r2, #0
 8012aee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012af2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8012af6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8012afa:	4642      	mov	r2, r8
 8012afc:	464b      	mov	r3, r9
 8012afe:	1891      	adds	r1, r2, r2
 8012b00:	63b9      	str	r1, [r7, #56]	@ 0x38
 8012b02:	415b      	adcs	r3, r3
 8012b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012b06:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8012b0a:	4641      	mov	r1, r8
 8012b0c:	1851      	adds	r1, r2, r1
 8012b0e:	6339      	str	r1, [r7, #48]	@ 0x30
 8012b10:	4649      	mov	r1, r9
 8012b12:	414b      	adcs	r3, r1
 8012b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8012b16:	f04f 0200 	mov.w	r2, #0
 8012b1a:	f04f 0300 	mov.w	r3, #0
 8012b1e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8012b22:	4659      	mov	r1, fp
 8012b24:	00cb      	lsls	r3, r1, #3
 8012b26:	4651      	mov	r1, sl
 8012b28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012b2c:	4651      	mov	r1, sl
 8012b2e:	00ca      	lsls	r2, r1, #3
 8012b30:	4610      	mov	r0, r2
 8012b32:	4619      	mov	r1, r3
 8012b34:	4603      	mov	r3, r0
 8012b36:	4642      	mov	r2, r8
 8012b38:	189b      	adds	r3, r3, r2
 8012b3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012b3e:	464b      	mov	r3, r9
 8012b40:	460a      	mov	r2, r1
 8012b42:	eb42 0303 	adc.w	r3, r2, r3
 8012b46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012b4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012b4e:	2200      	movs	r2, #0
 8012b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012b54:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8012b58:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8012b5c:	460b      	mov	r3, r1
 8012b5e:	18db      	adds	r3, r3, r3
 8012b60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012b62:	4613      	mov	r3, r2
 8012b64:	eb42 0303 	adc.w	r3, r2, r3
 8012b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012b6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8012b6e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8012b72:	f7f5 fbe5 	bl	8008340 <__aeabi_uldivmod>
 8012b76:	4602      	mov	r2, r0
 8012b78:	460b      	mov	r3, r1
 8012b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8012bac <LL_USART_SetBaudRate+0x238>)
 8012b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8012b80:	095b      	lsrs	r3, r3, #5
 8012b82:	2164      	movs	r1, #100	@ 0x64
 8012b84:	fb01 f303 	mul.w	r3, r1, r3
 8012b88:	1ad3      	subs	r3, r2, r3
 8012b8a:	00db      	lsls	r3, r3, #3
 8012b8c:	3332      	adds	r3, #50	@ 0x32
 8012b8e:	4a07      	ldr	r2, [pc, #28]	@ (8012bac <LL_USART_SetBaudRate+0x238>)
 8012b90:	fba2 2303 	umull	r2, r3, r2, r3
 8012b94:	095b      	lsrs	r3, r3, #5
 8012b96:	b29b      	uxth	r3, r3
 8012b98:	f003 0307 	and.w	r3, r3, #7
 8012b9c:	b29b      	uxth	r3, r3
 8012b9e:	4423      	add	r3, r4
 8012ba0:	b29b      	uxth	r3, r3
 8012ba2:	461a      	mov	r2, r3
 8012ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012ba8:	609a      	str	r2, [r3, #8]
}
 8012baa:	e108      	b.n	8012dbe <LL_USART_SetBaudRate+0x44a>
 8012bac:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8012bb0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012bba:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8012bbe:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8012bc2:	4642      	mov	r2, r8
 8012bc4:	464b      	mov	r3, r9
 8012bc6:	1891      	adds	r1, r2, r2
 8012bc8:	6239      	str	r1, [r7, #32]
 8012bca:	415b      	adcs	r3, r3
 8012bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8012bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012bd2:	4641      	mov	r1, r8
 8012bd4:	1854      	adds	r4, r2, r1
 8012bd6:	4649      	mov	r1, r9
 8012bd8:	eb43 0501 	adc.w	r5, r3, r1
 8012bdc:	f04f 0200 	mov.w	r2, #0
 8012be0:	f04f 0300 	mov.w	r3, #0
 8012be4:	00eb      	lsls	r3, r5, #3
 8012be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012bea:	00e2      	lsls	r2, r4, #3
 8012bec:	4614      	mov	r4, r2
 8012bee:	461d      	mov	r5, r3
 8012bf0:	4643      	mov	r3, r8
 8012bf2:	18e3      	adds	r3, r4, r3
 8012bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012bf8:	464b      	mov	r3, r9
 8012bfa:	eb45 0303 	adc.w	r3, r5, r3
 8012bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012c02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012c06:	2200      	movs	r2, #0
 8012c08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012c0c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8012c10:	f04f 0200 	mov.w	r2, #0
 8012c14:	f04f 0300 	mov.w	r3, #0
 8012c18:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8012c1c:	4629      	mov	r1, r5
 8012c1e:	008b      	lsls	r3, r1, #2
 8012c20:	4621      	mov	r1, r4
 8012c22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012c26:	4621      	mov	r1, r4
 8012c28:	008a      	lsls	r2, r1, #2
 8012c2a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8012c2e:	f7f5 fb87 	bl	8008340 <__aeabi_uldivmod>
 8012c32:	4602      	mov	r2, r0
 8012c34:	460b      	mov	r3, r1
 8012c36:	4b65      	ldr	r3, [pc, #404]	@ (8012dcc <LL_USART_SetBaudRate+0x458>)
 8012c38:	fba3 2302 	umull	r2, r3, r3, r2
 8012c3c:	095b      	lsrs	r3, r3, #5
 8012c3e:	b29b      	uxth	r3, r3
 8012c40:	011b      	lsls	r3, r3, #4
 8012c42:	b29c      	uxth	r4, r3
 8012c44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012c48:	2200      	movs	r2, #0
 8012c4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012c4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8012c52:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8012c56:	4642      	mov	r2, r8
 8012c58:	464b      	mov	r3, r9
 8012c5a:	1891      	adds	r1, r2, r2
 8012c5c:	61b9      	str	r1, [r7, #24]
 8012c5e:	415b      	adcs	r3, r3
 8012c60:	61fb      	str	r3, [r7, #28]
 8012c62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012c66:	4641      	mov	r1, r8
 8012c68:	1851      	adds	r1, r2, r1
 8012c6a:	6139      	str	r1, [r7, #16]
 8012c6c:	4649      	mov	r1, r9
 8012c6e:	414b      	adcs	r3, r1
 8012c70:	617b      	str	r3, [r7, #20]
 8012c72:	f04f 0200 	mov.w	r2, #0
 8012c76:	f04f 0300 	mov.w	r3, #0
 8012c7a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012c7e:	4659      	mov	r1, fp
 8012c80:	00cb      	lsls	r3, r1, #3
 8012c82:	4651      	mov	r1, sl
 8012c84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012c88:	4651      	mov	r1, sl
 8012c8a:	00ca      	lsls	r2, r1, #3
 8012c8c:	4610      	mov	r0, r2
 8012c8e:	4619      	mov	r1, r3
 8012c90:	4603      	mov	r3, r0
 8012c92:	4642      	mov	r2, r8
 8012c94:	189b      	adds	r3, r3, r2
 8012c96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012c9a:	464b      	mov	r3, r9
 8012c9c:	460a      	mov	r2, r1
 8012c9e:	eb42 0303 	adc.w	r3, r2, r3
 8012ca2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012ca6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012caa:	2200      	movs	r2, #0
 8012cac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012cb0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8012cb4:	f04f 0200 	mov.w	r2, #0
 8012cb8:	f04f 0300 	mov.w	r3, #0
 8012cbc:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8012cc0:	4649      	mov	r1, r9
 8012cc2:	008b      	lsls	r3, r1, #2
 8012cc4:	4641      	mov	r1, r8
 8012cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012cca:	4641      	mov	r1, r8
 8012ccc:	008a      	lsls	r2, r1, #2
 8012cce:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8012cd2:	f7f5 fb35 	bl	8008340 <__aeabi_uldivmod>
 8012cd6:	4602      	mov	r2, r0
 8012cd8:	460b      	mov	r3, r1
 8012cda:	4611      	mov	r1, r2
 8012cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8012dcc <LL_USART_SetBaudRate+0x458>)
 8012cde:	fba3 2301 	umull	r2, r3, r3, r1
 8012ce2:	095b      	lsrs	r3, r3, #5
 8012ce4:	2264      	movs	r2, #100	@ 0x64
 8012ce6:	fb02 f303 	mul.w	r3, r2, r3
 8012cea:	1acb      	subs	r3, r1, r3
 8012cec:	011b      	lsls	r3, r3, #4
 8012cee:	3332      	adds	r3, #50	@ 0x32
 8012cf0:	4a36      	ldr	r2, [pc, #216]	@ (8012dcc <LL_USART_SetBaudRate+0x458>)
 8012cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8012cf6:	095b      	lsrs	r3, r3, #5
 8012cf8:	b29b      	uxth	r3, r3
 8012cfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012cfe:	b29b      	uxth	r3, r3
 8012d00:	4423      	add	r3, r4
 8012d02:	b29c      	uxth	r4, r3
 8012d04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d08:	2200      	movs	r2, #0
 8012d0a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012d0c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8012d0e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8012d12:	4642      	mov	r2, r8
 8012d14:	464b      	mov	r3, r9
 8012d16:	1891      	adds	r1, r2, r2
 8012d18:	60b9      	str	r1, [r7, #8]
 8012d1a:	415b      	adcs	r3, r3
 8012d1c:	60fb      	str	r3, [r7, #12]
 8012d1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012d22:	4641      	mov	r1, r8
 8012d24:	1851      	adds	r1, r2, r1
 8012d26:	6039      	str	r1, [r7, #0]
 8012d28:	4649      	mov	r1, r9
 8012d2a:	414b      	adcs	r3, r1
 8012d2c:	607b      	str	r3, [r7, #4]
 8012d2e:	f04f 0200 	mov.w	r2, #0
 8012d32:	f04f 0300 	mov.w	r3, #0
 8012d36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8012d3a:	4659      	mov	r1, fp
 8012d3c:	00cb      	lsls	r3, r1, #3
 8012d3e:	4651      	mov	r1, sl
 8012d40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012d44:	4651      	mov	r1, sl
 8012d46:	00ca      	lsls	r2, r1, #3
 8012d48:	4610      	mov	r0, r2
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	4642      	mov	r2, r8
 8012d50:	189b      	adds	r3, r3, r2
 8012d52:	673b      	str	r3, [r7, #112]	@ 0x70
 8012d54:	464b      	mov	r3, r9
 8012d56:	460a      	mov	r2, r1
 8012d58:	eb42 0303 	adc.w	r3, r2, r3
 8012d5c:	677b      	str	r3, [r7, #116]	@ 0x74
 8012d5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012d62:	2200      	movs	r2, #0
 8012d64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012d66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012d68:	f04f 0200 	mov.w	r2, #0
 8012d6c:	f04f 0300 	mov.w	r3, #0
 8012d70:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8012d74:	4649      	mov	r1, r9
 8012d76:	008b      	lsls	r3, r1, #2
 8012d78:	4641      	mov	r1, r8
 8012d7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012d7e:	4641      	mov	r1, r8
 8012d80:	008a      	lsls	r2, r1, #2
 8012d82:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8012d86:	f7f5 fadb 	bl	8008340 <__aeabi_uldivmod>
 8012d8a:	4602      	mov	r2, r0
 8012d8c:	460b      	mov	r3, r1
 8012d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8012dcc <LL_USART_SetBaudRate+0x458>)
 8012d90:	fba3 1302 	umull	r1, r3, r3, r2
 8012d94:	095b      	lsrs	r3, r3, #5
 8012d96:	2164      	movs	r1, #100	@ 0x64
 8012d98:	fb01 f303 	mul.w	r3, r1, r3
 8012d9c:	1ad3      	subs	r3, r2, r3
 8012d9e:	011b      	lsls	r3, r3, #4
 8012da0:	3332      	adds	r3, #50	@ 0x32
 8012da2:	4a0a      	ldr	r2, [pc, #40]	@ (8012dcc <LL_USART_SetBaudRate+0x458>)
 8012da4:	fba2 2303 	umull	r2, r3, r2, r3
 8012da8:	095b      	lsrs	r3, r3, #5
 8012daa:	b29b      	uxth	r3, r3
 8012dac:	f003 030f 	and.w	r3, r3, #15
 8012db0:	b29b      	uxth	r3, r3
 8012db2:	4423      	add	r3, r4
 8012db4:	b29b      	uxth	r3, r3
 8012db6:	461a      	mov	r2, r3
 8012db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012dbc:	609a      	str	r2, [r3, #8]
}
 8012dbe:	bf00      	nop
 8012dc0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012dca:	bf00      	nop
 8012dcc:	51eb851f 	.word	0x51eb851f

08012dd0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b088      	sub	sp, #32
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8012dda:	2301      	movs	r3, #1
 8012ddc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8012dde:	2300      	movs	r3, #0
 8012de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f7ff fd8c 	bl	8012900 <LL_USART_IsEnabled>
 8012de8:	4603      	mov	r3, r0
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d15e      	bne.n	8012eac <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	68db      	ldr	r3, [r3, #12]
 8012df2:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8012df6:	f023 030c 	bic.w	r3, r3, #12
 8012dfa:	683a      	ldr	r2, [r7, #0]
 8012dfc:	6851      	ldr	r1, [r2, #4]
 8012dfe:	683a      	ldr	r2, [r7, #0]
 8012e00:	68d2      	ldr	r2, [r2, #12]
 8012e02:	4311      	orrs	r1, r2
 8012e04:	683a      	ldr	r2, [r7, #0]
 8012e06:	6912      	ldr	r2, [r2, #16]
 8012e08:	4311      	orrs	r1, r2
 8012e0a:	683a      	ldr	r2, [r7, #0]
 8012e0c:	6992      	ldr	r2, [r2, #24]
 8012e0e:	430a      	orrs	r2, r1
 8012e10:	431a      	orrs	r2, r3
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	689b      	ldr	r3, [r3, #8]
 8012e1a:	4619      	mov	r1, r3
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f7ff fd83 	bl	8012928 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	695b      	ldr	r3, [r3, #20]
 8012e26:	4619      	mov	r1, r3
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f7ff fd90 	bl	801294e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8012e2e:	f107 0308 	add.w	r3, r7, #8
 8012e32:	4618      	mov	r0, r3
 8012e34:	f7ff f8f0 	bl	8012018 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8012eb8 <LL_USART_Init+0xe8>)
 8012e3c:	4293      	cmp	r3, r2
 8012e3e:	d102      	bne.n	8012e46 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	61bb      	str	r3, [r7, #24]
 8012e44:	e021      	b.n	8012e8a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	4a1c      	ldr	r2, [pc, #112]	@ (8012ebc <LL_USART_Init+0xec>)
 8012e4a:	4293      	cmp	r3, r2
 8012e4c:	d102      	bne.n	8012e54 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8012e4e:	693b      	ldr	r3, [r7, #16]
 8012e50:	61bb      	str	r3, [r7, #24]
 8012e52:	e01a      	b.n	8012e8a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	4a1a      	ldr	r2, [pc, #104]	@ (8012ec0 <LL_USART_Init+0xf0>)
 8012e58:	4293      	cmp	r3, r2
 8012e5a:	d102      	bne.n	8012e62 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	61bb      	str	r3, [r7, #24]
 8012e60:	e013      	b.n	8012e8a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	4a17      	ldr	r2, [pc, #92]	@ (8012ec4 <LL_USART_Init+0xf4>)
 8012e66:	4293      	cmp	r3, r2
 8012e68:	d102      	bne.n	8012e70 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8012e6a:	697b      	ldr	r3, [r7, #20]
 8012e6c:	61bb      	str	r3, [r7, #24]
 8012e6e:	e00c      	b.n	8012e8a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	4a15      	ldr	r2, [pc, #84]	@ (8012ec8 <LL_USART_Init+0xf8>)
 8012e74:	4293      	cmp	r3, r2
 8012e76:	d102      	bne.n	8012e7e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	61bb      	str	r3, [r7, #24]
 8012e7c:	e005      	b.n	8012e8a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	4a12      	ldr	r2, [pc, #72]	@ (8012ecc <LL_USART_Init+0xfc>)
 8012e82:	4293      	cmp	r3, r2
 8012e84:	d101      	bne.n	8012e8a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8012e86:	693b      	ldr	r3, [r7, #16]
 8012e88:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8012e8a:	69bb      	ldr	r3, [r7, #24]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d00d      	beq.n	8012eac <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d009      	beq.n	8012eac <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8012e98:	2300      	movs	r3, #0
 8012e9a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8012ea4:	69b9      	ldr	r1, [r7, #24]
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f7ff fd64 	bl	8012974 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8012eac:	7ffb      	ldrb	r3, [r7, #31]
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3720      	adds	r7, #32
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	40011000 	.word	0x40011000
 8012ebc:	40004400 	.word	0x40004400
 8012ec0:	40004800 	.word	0x40004800
 8012ec4:	40011400 	.word	0x40011400
 8012ec8:	40004c00 	.word	0x40004c00
 8012ecc:	40005000 	.word	0x40005000

08012ed0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8012ed0:	b480      	push	{r7}
 8012ed2:	b085      	sub	sp, #20
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8012ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8012f18 <LL_mDelay+0x48>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8012ede:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ee6:	d00c      	beq.n	8012f02 <LL_mDelay+0x32>
  {
    Delay++;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	3301      	adds	r3, #1
 8012eec:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8012eee:	e008      	b.n	8012f02 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8012ef0:	4b09      	ldr	r3, [pc, #36]	@ (8012f18 <LL_mDelay+0x48>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d002      	beq.n	8012f02 <LL_mDelay+0x32>
    {
      Delay--;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	3b01      	subs	r3, #1
 8012f00:	607b      	str	r3, [r7, #4]
  while (Delay)
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d1f3      	bne.n	8012ef0 <LL_mDelay+0x20>
    }
  }
}
 8012f08:	bf00      	nop
 8012f0a:	bf00      	nop
 8012f0c:	3714      	adds	r7, #20
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f14:	4770      	bx	lr
 8012f16:	bf00      	nop
 8012f18:	e000e010 	.word	0xe000e010

08012f1c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8012f1c:	b480      	push	{r7}
 8012f1e:	b083      	sub	sp, #12
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8012f24:	4a04      	ldr	r2, [pc, #16]	@ (8012f38 <LL_SetSystemCoreClock+0x1c>)
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	6013      	str	r3, [r2, #0]
}
 8012f2a:	bf00      	nop
 8012f2c:	370c      	adds	r7, #12
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f34:	4770      	bx	lr
 8012f36:	bf00      	nop
 8012f38:	2000232c 	.word	0x2000232c

08012f3c <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 8012f40:	4b0d      	ldr	r3, [pc, #52]	@ (8012f78 <SCH_Initialize+0x3c>)
 8012f42:	2200      	movs	r2, #0
 8012f44:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 8012f46:	4b0d      	ldr	r3, [pc, #52]	@ (8012f7c <SCH_Initialize+0x40>)
 8012f48:	2200      	movs	r2, #0
 8012f4a:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 8012f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8012f80 <SCH_Initialize+0x44>)
 8012f4e:	2200      	movs	r2, #0
 8012f50:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 8012f52:	22f0      	movs	r2, #240	@ 0xf0
 8012f54:	2100      	movs	r1, #0
 8012f56:	480b      	ldr	r0, [pc, #44]	@ (8012f84 <SCH_Initialize+0x48>)
 8012f58:	f000 fa38 	bl	80133cc <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 8012f5c:	22f0      	movs	r2, #240	@ 0xf0
 8012f5e:	2100      	movs	r1, #0
 8012f60:	4809      	ldr	r0, [pc, #36]	@ (8012f88 <SCH_Initialize+0x4c>)
 8012f62:	f000 fa33 	bl	80133cc <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 8012f66:	2238      	movs	r2, #56	@ 0x38
 8012f68:	2100      	movs	r1, #0
 8012f6a:	4808      	ldr	r0, [pc, #32]	@ (8012f8c <SCH_Initialize+0x50>)
 8012f6c:	f000 fa2e 	bl	80133cc <memset>

    // Initialize Scheduler context
  systick_timer_init();
 8012f70:	f7f5 ffb0 	bl	8008ed4 <systick_timer_init>
}
 8012f74:	bf00      	nop
 8012f76:	bd80      	pop	{r7, pc}
 8012f78:	20003864 	.word	0x20003864
 8012f7c:	2000376c 	.word	0x2000376c
 8012f80:	20003860 	.word	0x20003860
 8012f84:	2000367c 	.word	0x2000367c
 8012f88:	20003770 	.word	0x20003770
 8012f8c:	20003868 	.word	0x20003868

08012f90 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 8012f90:	b480      	push	{r7}
 8012f92:	b083      	sub	sp, #12
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	4603      	mov	r3, r0
 8012f98:	6039      	str	r1, [r7, #0]
 8012f9a:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 8012f9c:	79fb      	ldrb	r3, [r7, #7]
 8012f9e:	2b0d      	cmp	r3, #13
 8012fa0:	d804      	bhi.n	8012fac <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 8012fa2:	79fb      	ldrb	r3, [r7, #7]
 8012fa4:	4904      	ldr	r1, [pc, #16]	@ (8012fb8 <SCH_TIM_Start+0x28>)
 8012fa6:	683a      	ldr	r2, [r7, #0]
 8012fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8012fac:	bf00      	nop
 8012fae:	370c      	adds	r7, #12
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb6:	4770      	bx	lr
 8012fb8:	20003868 	.word	0x20003868

08012fbc <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 8012fbc:	b480      	push	{r7}
 8012fbe:	b083      	sub	sp, #12
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 8012fc6:	79fb      	ldrb	r3, [r7, #7]
 8012fc8:	4a06      	ldr	r2, [pc, #24]	@ (8012fe4 <SCH_TIM_HasCompleted+0x28>)
 8012fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	bf0c      	ite	eq
 8012fd2:	2301      	moveq	r3, #1
 8012fd4:	2300      	movne	r3, #0
 8012fd6:	b2db      	uxtb	r3, r3
}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	370c      	adds	r7, #12
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe2:	4770      	bx	lr
 8012fe4:	20003868 	.word	0x20003868

08012fe8 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 8012fe8:	b480      	push	{r7}
 8012fea:	b085      	sub	sp, #20
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
 8012ff0:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 8012ff2:	2301      	movs	r3, #1
 8012ff4:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d029      	beq.n	8013050 <SCH_TASK_CreateTask+0x68>
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d026      	beq.n	8013050 <SCH_TASK_CreateTask+0x68>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 8013002:	4b17      	ldr	r3, [pc, #92]	@ (8013060 <SCH_TASK_CreateTask+0x78>)
 8013004:	781b      	ldrb	r3, [r3, #0]
 8013006:	2b12      	cmp	r3, #18
 8013008:	d822      	bhi.n	8013050 <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 801300a:	4b15      	ldr	r3, [pc, #84]	@ (8013060 <SCH_TASK_CreateTask+0x78>)
 801300c:	781b      	ldrb	r3, [r3, #0]
 801300e:	461a      	mov	r2, r3
 8013010:	4613      	mov	r3, r2
 8013012:	005b      	lsls	r3, r3, #1
 8013014:	4413      	add	r3, r2
 8013016:	009b      	lsls	r3, r3, #2
 8013018:	4a12      	ldr	r2, [pc, #72]	@ (8013064 <SCH_TASK_CreateTask+0x7c>)
 801301a:	4413      	add	r3, r2
 801301c:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	683a      	ldr	r2, [r7, #0]
 8013022:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 8013024:	68bb      	ldr	r3, [r7, #8]
 8013026:	2200      	movs	r2, #0
 8013028:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = pTaskProperty->taskTick;;
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	68da      	ldr	r2, [r3, #12]
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	2201      	movs	r2, #1
 8013036:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 8013038:	4b09      	ldr	r3, [pc, #36]	@ (8013060 <SCH_TASK_CreateTask+0x78>)
 801303a:	781a      	ldrb	r2, [r3, #0]
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 8013040:	4b07      	ldr	r3, [pc, #28]	@ (8013060 <SCH_TASK_CreateTask+0x78>)
 8013042:	781b      	ldrb	r3, [r3, #0]
 8013044:	3301      	adds	r3, #1
 8013046:	b2da      	uxtb	r2, r3
 8013048:	4b05      	ldr	r3, [pc, #20]	@ (8013060 <SCH_TASK_CreateTask+0x78>)
 801304a:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 801304c:	2300      	movs	r3, #0
 801304e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8013050:	7bfb      	ldrb	r3, [r7, #15]
}
 8013052:	4618      	mov	r0, r3
 8013054:	3714      	adds	r7, #20
 8013056:	46bd      	mov	sp, r7
 8013058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305c:	4770      	bx	lr
 801305e:	bf00      	nop
 8013060:	2000376c 	.word	0x2000376c
 8013064:	2000367c 	.word	0x2000367c

08013068 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 8013068:	b480      	push	{r7}
 801306a:	b085      	sub	sp, #20
 801306c:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 801306e:	4b42      	ldr	r3, [pc, #264]	@ (8013178 <SCH_RunSystemTickTimer+0x110>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	3301      	adds	r3, #1
 8013074:	4a40      	ldr	r2, [pc, #256]	@ (8013178 <SCH_RunSystemTickTimer+0x110>)
 8013076:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8013078:	2300      	movs	r3, #0
 801307a:	73fb      	strb	r3, [r7, #15]
 801307c:	e025      	b.n	80130ca <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 801307e:	7bfa      	ldrb	r2, [r7, #15]
 8013080:	4613      	mov	r3, r2
 8013082:	005b      	lsls	r3, r3, #1
 8013084:	4413      	add	r3, r2
 8013086:	009b      	lsls	r3, r3, #2
 8013088:	4a3c      	ldr	r2, [pc, #240]	@ (801317c <SCH_RunSystemTickTimer+0x114>)
 801308a:	4413      	add	r3, r2
 801308c:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	689b      	ldr	r3, [r3, #8]
 8013092:	781b      	ldrb	r3, [r3, #0]
 8013094:	2b01      	cmp	r3, #1
 8013096:	d115      	bne.n	80130c4 <SCH_RunSystemTickTimer+0x5c>
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	781b      	ldrb	r3, [r3, #0]
 801309c:	2b01      	cmp	r3, #1
 801309e:	d111      	bne.n	80130c4 <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	1c5a      	adds	r2, r3, #1
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	685a      	ldr	r2, [r3, #4]
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	689b      	ldr	r3, [r3, #8]
 80130b2:	685b      	ldr	r3, [r3, #4]
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d305      	bcc.n	80130c4 <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2200      	movs	r2, #0
 80130bc:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2201      	movs	r2, #1
 80130c2:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80130c4:	7bfb      	ldrb	r3, [r7, #15]
 80130c6:	3301      	adds	r3, #1
 80130c8:	73fb      	strb	r3, [r7, #15]
 80130ca:	4b2d      	ldr	r3, [pc, #180]	@ (8013180 <SCH_RunSystemTickTimer+0x118>)
 80130cc:	781b      	ldrb	r3, [r3, #0]
 80130ce:	7bfa      	ldrb	r2, [r7, #15]
 80130d0:	429a      	cmp	r2, r3
 80130d2:	d3d4      	bcc.n	801307e <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80130d4:	2300      	movs	r3, #0
 80130d6:	73bb      	strb	r3, [r7, #14]
 80130d8:	e02b      	b.n	8013132 <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 80130da:	7bba      	ldrb	r2, [r7, #14]
 80130dc:	4613      	mov	r3, r2
 80130de:	005b      	lsls	r3, r3, #1
 80130e0:	4413      	add	r3, r2
 80130e2:	009b      	lsls	r3, r3, #2
 80130e4:	4a27      	ldr	r2, [pc, #156]	@ (8013184 <SCH_RunSystemTickTimer+0x11c>)
 80130e6:	4413      	add	r3, r2
 80130e8:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	781b      	ldrb	r3, [r3, #0]
 80130ee:	2b01      	cmp	r3, #1
 80130f0:	d11c      	bne.n	801312c <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	685b      	ldr	r3, [r3, #4]
 80130f6:	1c5a      	adds	r2, r3, #1
 80130f8:	68bb      	ldr	r3, [r7, #8]
 80130fa:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	685a      	ldr	r2, [r3, #4]
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	689b      	ldr	r3, [r3, #8]
 8013104:	685b      	ldr	r3, [r3, #4]
 8013106:	429a      	cmp	r2, r3
 8013108:	d310      	bcc.n	801312c <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 801310a:	68bb      	ldr	r3, [r7, #8]
 801310c:	2201      	movs	r2, #1
 801310e:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 8013110:	68bb      	ldr	r3, [r7, #8]
 8013112:	2200      	movs	r2, #0
 8013114:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	689b      	ldr	r3, [r3, #8]
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	2b02      	cmp	r3, #2
 801311e:	bf0c      	ite	eq
 8013120:	2301      	moveq	r3, #1
 8013122:	2300      	movne	r3, #0
 8013124:	b2db      	uxtb	r3, r3
 8013126:	461a      	mov	r2, r3
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 801312c:	7bbb      	ldrb	r3, [r7, #14]
 801312e:	3301      	adds	r3, #1
 8013130:	73bb      	strb	r3, [r7, #14]
 8013132:	4b15      	ldr	r3, [pc, #84]	@ (8013188 <SCH_RunSystemTickTimer+0x120>)
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	7bba      	ldrb	r2, [r7, #14]
 8013138:	429a      	cmp	r2, r3
 801313a:	d3ce      	bcc.n	80130da <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 801313c:	2300      	movs	r3, #0
 801313e:	73bb      	strb	r3, [r7, #14]
 8013140:	e010      	b.n	8013164 <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 8013142:	7bbb      	ldrb	r3, [r7, #14]
 8013144:	4a11      	ldr	r2, [pc, #68]	@ (801318c <SCH_RunSystemTickTimer+0x124>)
 8013146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d007      	beq.n	801315e <SCH_RunSystemTickTimer+0xf6>
 801314e:	7bbb      	ldrb	r3, [r7, #14]
 8013150:	4a0e      	ldr	r2, [pc, #56]	@ (801318c <SCH_RunSystemTickTimer+0x124>)
 8013152:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013156:	3a01      	subs	r2, #1
 8013158:	490c      	ldr	r1, [pc, #48]	@ (801318c <SCH_RunSystemTickTimer+0x124>)
 801315a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 801315e:	7bbb      	ldrb	r3, [r7, #14]
 8013160:	3301      	adds	r3, #1
 8013162:	73bb      	strb	r3, [r7, #14]
 8013164:	7bbb      	ldrb	r3, [r7, #14]
 8013166:	2b0d      	cmp	r3, #13
 8013168:	d9eb      	bls.n	8013142 <SCH_RunSystemTickTimer+0xda>
}
 801316a:	bf00      	nop
 801316c:	bf00      	nop
 801316e:	3714      	adds	r7, #20
 8013170:	46bd      	mov	sp, r7
 8013172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013176:	4770      	bx	lr
 8013178:	20003864 	.word	0x20003864
 801317c:	2000367c 	.word	0x2000367c
 8013180:	2000376c 	.word	0x2000376c
 8013184:	20003770 	.word	0x20003770
 8013188:	20003860 	.word	0x20003860
 801318c:	20003868 	.word	0x20003868

08013190 <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 8013194:	f7f5 fe8e 	bl	8008eb4 <systick_timer_start>
}
 8013198:	bf00      	nop
 801319a:	bd80      	pop	{r7, pc}

0801319c <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b084      	sub	sp, #16
 80131a0:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80131a2:	2300      	movs	r3, #0
 80131a4:	73fb      	strb	r3, [r7, #15]
 80131a6:	e01e      	b.n	80131e6 <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 80131a8:	7bfa      	ldrb	r2, [r7, #15]
 80131aa:	4613      	mov	r3, r2
 80131ac:	005b      	lsls	r3, r3, #1
 80131ae:	4413      	add	r3, r2
 80131b0:	009b      	lsls	r3, r3, #2
 80131b2:	4a23      	ldr	r2, [pc, #140]	@ (8013240 <SCH_HandleScheduledTask+0xa4>)
 80131b4:	4413      	add	r3, r2
 80131b6:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	885b      	ldrh	r3, [r3, #2]
 80131bc:	2b01      	cmp	r3, #1
 80131be:	d10f      	bne.n	80131e0 <SCH_HandleScheduledTask+0x44>
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	781b      	ldrb	r3, [r3, #0]
 80131c4:	2b01      	cmp	r3, #1
 80131c6:	d10b      	bne.n	80131e0 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2200      	movs	r2, #0
 80131cc:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	689b      	ldr	r3, [r3, #8]
 80131d2:	689b      	ldr	r3, [r3, #8]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d003      	beq.n	80131e0 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	689b      	ldr	r3, [r3, #8]
 80131dc:	689b      	ldr	r3, [r3, #8]
 80131de:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80131e0:	7bfb      	ldrb	r3, [r7, #15]
 80131e2:	3301      	adds	r3, #1
 80131e4:	73fb      	strb	r3, [r7, #15]
 80131e6:	4b17      	ldr	r3, [pc, #92]	@ (8013244 <SCH_HandleScheduledTask+0xa8>)
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	7bfa      	ldrb	r2, [r7, #15]
 80131ec:	429a      	cmp	r2, r3
 80131ee:	d3db      	bcc.n	80131a8 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80131f0:	2300      	movs	r3, #0
 80131f2:	73bb      	strb	r3, [r7, #14]
 80131f4:	e01a      	b.n	801322c <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 80131f6:	7bba      	ldrb	r2, [r7, #14]
 80131f8:	4613      	mov	r3, r2
 80131fa:	005b      	lsls	r3, r3, #1
 80131fc:	4413      	add	r3, r2
 80131fe:	009b      	lsls	r3, r3, #2
 8013200:	4a11      	ldr	r2, [pc, #68]	@ (8013248 <SCH_HandleScheduledTask+0xac>)
 8013202:	4413      	add	r3, r2
 8013204:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	885b      	ldrh	r3, [r3, #2]
 801320a:	2b01      	cmp	r3, #1
 801320c:	d10b      	bne.n	8013226 <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 801320e:	68bb      	ldr	r3, [r7, #8]
 8013210:	2200      	movs	r2, #0
 8013212:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	689b      	ldr	r3, [r3, #8]
 8013218:	689b      	ldr	r3, [r3, #8]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d003      	beq.n	8013226 <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	689b      	ldr	r3, [r3, #8]
 8013222:	689b      	ldr	r3, [r3, #8]
 8013224:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8013226:	7bbb      	ldrb	r3, [r7, #14]
 8013228:	3301      	adds	r3, #1
 801322a:	73bb      	strb	r3, [r7, #14]
 801322c:	4b07      	ldr	r3, [pc, #28]	@ (801324c <SCH_HandleScheduledTask+0xb0>)
 801322e:	781b      	ldrb	r3, [r3, #0]
 8013230:	7bba      	ldrb	r2, [r7, #14]
 8013232:	429a      	cmp	r2, r3
 8013234:	d3df      	bcc.n	80131f6 <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 8013236:	bf00      	nop
 8013238:	bf00      	nop
 801323a:	3710      	adds	r7, #16
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}
 8013240:	2000367c 	.word	0x2000367c
 8013244:	2000376c 	.word	0x2000376c
 8013248:	20003770 	.word	0x20003770
 801324c:	20003860 	.word	0x20003860

08013250 <atoi>:
 8013250:	220a      	movs	r2, #10
 8013252:	2100      	movs	r1, #0
 8013254:	f000 b87a 	b.w	801334c <strtol>

08013258 <_strtol_l.isra.0>:
 8013258:	2b24      	cmp	r3, #36	@ 0x24
 801325a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801325e:	4686      	mov	lr, r0
 8013260:	4690      	mov	r8, r2
 8013262:	d801      	bhi.n	8013268 <_strtol_l.isra.0+0x10>
 8013264:	2b01      	cmp	r3, #1
 8013266:	d106      	bne.n	8013276 <_strtol_l.isra.0+0x1e>
 8013268:	f000 f8b8 	bl	80133dc <__errno>
 801326c:	2316      	movs	r3, #22
 801326e:	6003      	str	r3, [r0, #0]
 8013270:	2000      	movs	r0, #0
 8013272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013276:	4834      	ldr	r0, [pc, #208]	@ (8013348 <_strtol_l.isra.0+0xf0>)
 8013278:	460d      	mov	r5, r1
 801327a:	462a      	mov	r2, r5
 801327c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013280:	5d06      	ldrb	r6, [r0, r4]
 8013282:	f016 0608 	ands.w	r6, r6, #8
 8013286:	d1f8      	bne.n	801327a <_strtol_l.isra.0+0x22>
 8013288:	2c2d      	cmp	r4, #45	@ 0x2d
 801328a:	d110      	bne.n	80132ae <_strtol_l.isra.0+0x56>
 801328c:	782c      	ldrb	r4, [r5, #0]
 801328e:	2601      	movs	r6, #1
 8013290:	1c95      	adds	r5, r2, #2
 8013292:	f033 0210 	bics.w	r2, r3, #16
 8013296:	d115      	bne.n	80132c4 <_strtol_l.isra.0+0x6c>
 8013298:	2c30      	cmp	r4, #48	@ 0x30
 801329a:	d10d      	bne.n	80132b8 <_strtol_l.isra.0+0x60>
 801329c:	782a      	ldrb	r2, [r5, #0]
 801329e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80132a2:	2a58      	cmp	r2, #88	@ 0x58
 80132a4:	d108      	bne.n	80132b8 <_strtol_l.isra.0+0x60>
 80132a6:	786c      	ldrb	r4, [r5, #1]
 80132a8:	3502      	adds	r5, #2
 80132aa:	2310      	movs	r3, #16
 80132ac:	e00a      	b.n	80132c4 <_strtol_l.isra.0+0x6c>
 80132ae:	2c2b      	cmp	r4, #43	@ 0x2b
 80132b0:	bf04      	itt	eq
 80132b2:	782c      	ldrbeq	r4, [r5, #0]
 80132b4:	1c95      	addeq	r5, r2, #2
 80132b6:	e7ec      	b.n	8013292 <_strtol_l.isra.0+0x3a>
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d1f6      	bne.n	80132aa <_strtol_l.isra.0+0x52>
 80132bc:	2c30      	cmp	r4, #48	@ 0x30
 80132be:	bf14      	ite	ne
 80132c0:	230a      	movne	r3, #10
 80132c2:	2308      	moveq	r3, #8
 80132c4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80132c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80132cc:	2200      	movs	r2, #0
 80132ce:	fbbc f9f3 	udiv	r9, ip, r3
 80132d2:	4610      	mov	r0, r2
 80132d4:	fb03 ca19 	mls	sl, r3, r9, ip
 80132d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80132dc:	2f09      	cmp	r7, #9
 80132de:	d80f      	bhi.n	8013300 <_strtol_l.isra.0+0xa8>
 80132e0:	463c      	mov	r4, r7
 80132e2:	42a3      	cmp	r3, r4
 80132e4:	dd1b      	ble.n	801331e <_strtol_l.isra.0+0xc6>
 80132e6:	1c57      	adds	r7, r2, #1
 80132e8:	d007      	beq.n	80132fa <_strtol_l.isra.0+0xa2>
 80132ea:	4581      	cmp	r9, r0
 80132ec:	d314      	bcc.n	8013318 <_strtol_l.isra.0+0xc0>
 80132ee:	d101      	bne.n	80132f4 <_strtol_l.isra.0+0x9c>
 80132f0:	45a2      	cmp	sl, r4
 80132f2:	db11      	blt.n	8013318 <_strtol_l.isra.0+0xc0>
 80132f4:	fb00 4003 	mla	r0, r0, r3, r4
 80132f8:	2201      	movs	r2, #1
 80132fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80132fe:	e7eb      	b.n	80132d8 <_strtol_l.isra.0+0x80>
 8013300:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013304:	2f19      	cmp	r7, #25
 8013306:	d801      	bhi.n	801330c <_strtol_l.isra.0+0xb4>
 8013308:	3c37      	subs	r4, #55	@ 0x37
 801330a:	e7ea      	b.n	80132e2 <_strtol_l.isra.0+0x8a>
 801330c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013310:	2f19      	cmp	r7, #25
 8013312:	d804      	bhi.n	801331e <_strtol_l.isra.0+0xc6>
 8013314:	3c57      	subs	r4, #87	@ 0x57
 8013316:	e7e4      	b.n	80132e2 <_strtol_l.isra.0+0x8a>
 8013318:	f04f 32ff 	mov.w	r2, #4294967295
 801331c:	e7ed      	b.n	80132fa <_strtol_l.isra.0+0xa2>
 801331e:	1c53      	adds	r3, r2, #1
 8013320:	d108      	bne.n	8013334 <_strtol_l.isra.0+0xdc>
 8013322:	2322      	movs	r3, #34	@ 0x22
 8013324:	f8ce 3000 	str.w	r3, [lr]
 8013328:	4660      	mov	r0, ip
 801332a:	f1b8 0f00 	cmp.w	r8, #0
 801332e:	d0a0      	beq.n	8013272 <_strtol_l.isra.0+0x1a>
 8013330:	1e69      	subs	r1, r5, #1
 8013332:	e006      	b.n	8013342 <_strtol_l.isra.0+0xea>
 8013334:	b106      	cbz	r6, 8013338 <_strtol_l.isra.0+0xe0>
 8013336:	4240      	negs	r0, r0
 8013338:	f1b8 0f00 	cmp.w	r8, #0
 801333c:	d099      	beq.n	8013272 <_strtol_l.isra.0+0x1a>
 801333e:	2a00      	cmp	r2, #0
 8013340:	d1f6      	bne.n	8013330 <_strtol_l.isra.0+0xd8>
 8013342:	f8c8 1000 	str.w	r1, [r8]
 8013346:	e794      	b.n	8013272 <_strtol_l.isra.0+0x1a>
 8013348:	080159c1 	.word	0x080159c1

0801334c <strtol>:
 801334c:	4613      	mov	r3, r2
 801334e:	460a      	mov	r2, r1
 8013350:	4601      	mov	r1, r0
 8013352:	4802      	ldr	r0, [pc, #8]	@ (801335c <strtol+0x10>)
 8013354:	6800      	ldr	r0, [r0, #0]
 8013356:	f7ff bf7f 	b.w	8013258 <_strtol_l.isra.0>
 801335a:	bf00      	nop
 801335c:	200023b4 	.word	0x200023b4

08013360 <sniprintf>:
 8013360:	b40c      	push	{r2, r3}
 8013362:	b530      	push	{r4, r5, lr}
 8013364:	4b18      	ldr	r3, [pc, #96]	@ (80133c8 <sniprintf+0x68>)
 8013366:	1e0c      	subs	r4, r1, #0
 8013368:	681d      	ldr	r5, [r3, #0]
 801336a:	b09d      	sub	sp, #116	@ 0x74
 801336c:	da08      	bge.n	8013380 <sniprintf+0x20>
 801336e:	238b      	movs	r3, #139	@ 0x8b
 8013370:	602b      	str	r3, [r5, #0]
 8013372:	f04f 30ff 	mov.w	r0, #4294967295
 8013376:	b01d      	add	sp, #116	@ 0x74
 8013378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801337c:	b002      	add	sp, #8
 801337e:	4770      	bx	lr
 8013380:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013384:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013388:	f04f 0300 	mov.w	r3, #0
 801338c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801338e:	bf14      	ite	ne
 8013390:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013394:	4623      	moveq	r3, r4
 8013396:	9304      	str	r3, [sp, #16]
 8013398:	9307      	str	r3, [sp, #28]
 801339a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801339e:	9002      	str	r0, [sp, #8]
 80133a0:	9006      	str	r0, [sp, #24]
 80133a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80133a6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80133a8:	ab21      	add	r3, sp, #132	@ 0x84
 80133aa:	a902      	add	r1, sp, #8
 80133ac:	4628      	mov	r0, r5
 80133ae:	9301      	str	r3, [sp, #4]
 80133b0:	f000 f99c 	bl	80136ec <_svfiprintf_r>
 80133b4:	1c43      	adds	r3, r0, #1
 80133b6:	bfbc      	itt	lt
 80133b8:	238b      	movlt	r3, #139	@ 0x8b
 80133ba:	602b      	strlt	r3, [r5, #0]
 80133bc:	2c00      	cmp	r4, #0
 80133be:	d0da      	beq.n	8013376 <sniprintf+0x16>
 80133c0:	9b02      	ldr	r3, [sp, #8]
 80133c2:	2200      	movs	r2, #0
 80133c4:	701a      	strb	r2, [r3, #0]
 80133c6:	e7d6      	b.n	8013376 <sniprintf+0x16>
 80133c8:	200023b4 	.word	0x200023b4

080133cc <memset>:
 80133cc:	4402      	add	r2, r0
 80133ce:	4603      	mov	r3, r0
 80133d0:	4293      	cmp	r3, r2
 80133d2:	d100      	bne.n	80133d6 <memset+0xa>
 80133d4:	4770      	bx	lr
 80133d6:	f803 1b01 	strb.w	r1, [r3], #1
 80133da:	e7f9      	b.n	80133d0 <memset+0x4>

080133dc <__errno>:
 80133dc:	4b01      	ldr	r3, [pc, #4]	@ (80133e4 <__errno+0x8>)
 80133de:	6818      	ldr	r0, [r3, #0]
 80133e0:	4770      	bx	lr
 80133e2:	bf00      	nop
 80133e4:	200023b4 	.word	0x200023b4

080133e8 <__libc_init_array>:
 80133e8:	b570      	push	{r4, r5, r6, lr}
 80133ea:	4d0d      	ldr	r5, [pc, #52]	@ (8013420 <__libc_init_array+0x38>)
 80133ec:	4c0d      	ldr	r4, [pc, #52]	@ (8013424 <__libc_init_array+0x3c>)
 80133ee:	1b64      	subs	r4, r4, r5
 80133f0:	10a4      	asrs	r4, r4, #2
 80133f2:	2600      	movs	r6, #0
 80133f4:	42a6      	cmp	r6, r4
 80133f6:	d109      	bne.n	801340c <__libc_init_array+0x24>
 80133f8:	4d0b      	ldr	r5, [pc, #44]	@ (8013428 <__libc_init_array+0x40>)
 80133fa:	4c0c      	ldr	r4, [pc, #48]	@ (801342c <__libc_init_array+0x44>)
 80133fc:	f000 fc6c 	bl	8013cd8 <_init>
 8013400:	1b64      	subs	r4, r4, r5
 8013402:	10a4      	asrs	r4, r4, #2
 8013404:	2600      	movs	r6, #0
 8013406:	42a6      	cmp	r6, r4
 8013408:	d105      	bne.n	8013416 <__libc_init_array+0x2e>
 801340a:	bd70      	pop	{r4, r5, r6, pc}
 801340c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013410:	4798      	blx	r3
 8013412:	3601      	adds	r6, #1
 8013414:	e7ee      	b.n	80133f4 <__libc_init_array+0xc>
 8013416:	f855 3b04 	ldr.w	r3, [r5], #4
 801341a:	4798      	blx	r3
 801341c:	3601      	adds	r6, #1
 801341e:	e7f2      	b.n	8013406 <__libc_init_array+0x1e>
 8013420:	08015afc 	.word	0x08015afc
 8013424:	08015afc 	.word	0x08015afc
 8013428:	08015afc 	.word	0x08015afc
 801342c:	08015b00 	.word	0x08015b00

08013430 <__retarget_lock_acquire_recursive>:
 8013430:	4770      	bx	lr

08013432 <__retarget_lock_release_recursive>:
 8013432:	4770      	bx	lr

08013434 <strcpy>:
 8013434:	4603      	mov	r3, r0
 8013436:	f811 2b01 	ldrb.w	r2, [r1], #1
 801343a:	f803 2b01 	strb.w	r2, [r3], #1
 801343e:	2a00      	cmp	r2, #0
 8013440:	d1f9      	bne.n	8013436 <strcpy+0x2>
 8013442:	4770      	bx	lr

08013444 <_free_r>:
 8013444:	b538      	push	{r3, r4, r5, lr}
 8013446:	4605      	mov	r5, r0
 8013448:	2900      	cmp	r1, #0
 801344a:	d041      	beq.n	80134d0 <_free_r+0x8c>
 801344c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013450:	1f0c      	subs	r4, r1, #4
 8013452:	2b00      	cmp	r3, #0
 8013454:	bfb8      	it	lt
 8013456:	18e4      	addlt	r4, r4, r3
 8013458:	f000 f8e0 	bl	801361c <__malloc_lock>
 801345c:	4a1d      	ldr	r2, [pc, #116]	@ (80134d4 <_free_r+0x90>)
 801345e:	6813      	ldr	r3, [r2, #0]
 8013460:	b933      	cbnz	r3, 8013470 <_free_r+0x2c>
 8013462:	6063      	str	r3, [r4, #4]
 8013464:	6014      	str	r4, [r2, #0]
 8013466:	4628      	mov	r0, r5
 8013468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801346c:	f000 b8dc 	b.w	8013628 <__malloc_unlock>
 8013470:	42a3      	cmp	r3, r4
 8013472:	d908      	bls.n	8013486 <_free_r+0x42>
 8013474:	6820      	ldr	r0, [r4, #0]
 8013476:	1821      	adds	r1, r4, r0
 8013478:	428b      	cmp	r3, r1
 801347a:	bf01      	itttt	eq
 801347c:	6819      	ldreq	r1, [r3, #0]
 801347e:	685b      	ldreq	r3, [r3, #4]
 8013480:	1809      	addeq	r1, r1, r0
 8013482:	6021      	streq	r1, [r4, #0]
 8013484:	e7ed      	b.n	8013462 <_free_r+0x1e>
 8013486:	461a      	mov	r2, r3
 8013488:	685b      	ldr	r3, [r3, #4]
 801348a:	b10b      	cbz	r3, 8013490 <_free_r+0x4c>
 801348c:	42a3      	cmp	r3, r4
 801348e:	d9fa      	bls.n	8013486 <_free_r+0x42>
 8013490:	6811      	ldr	r1, [r2, #0]
 8013492:	1850      	adds	r0, r2, r1
 8013494:	42a0      	cmp	r0, r4
 8013496:	d10b      	bne.n	80134b0 <_free_r+0x6c>
 8013498:	6820      	ldr	r0, [r4, #0]
 801349a:	4401      	add	r1, r0
 801349c:	1850      	adds	r0, r2, r1
 801349e:	4283      	cmp	r3, r0
 80134a0:	6011      	str	r1, [r2, #0]
 80134a2:	d1e0      	bne.n	8013466 <_free_r+0x22>
 80134a4:	6818      	ldr	r0, [r3, #0]
 80134a6:	685b      	ldr	r3, [r3, #4]
 80134a8:	6053      	str	r3, [r2, #4]
 80134aa:	4408      	add	r0, r1
 80134ac:	6010      	str	r0, [r2, #0]
 80134ae:	e7da      	b.n	8013466 <_free_r+0x22>
 80134b0:	d902      	bls.n	80134b8 <_free_r+0x74>
 80134b2:	230c      	movs	r3, #12
 80134b4:	602b      	str	r3, [r5, #0]
 80134b6:	e7d6      	b.n	8013466 <_free_r+0x22>
 80134b8:	6820      	ldr	r0, [r4, #0]
 80134ba:	1821      	adds	r1, r4, r0
 80134bc:	428b      	cmp	r3, r1
 80134be:	bf04      	itt	eq
 80134c0:	6819      	ldreq	r1, [r3, #0]
 80134c2:	685b      	ldreq	r3, [r3, #4]
 80134c4:	6063      	str	r3, [r4, #4]
 80134c6:	bf04      	itt	eq
 80134c8:	1809      	addeq	r1, r1, r0
 80134ca:	6021      	streq	r1, [r4, #0]
 80134cc:	6054      	str	r4, [r2, #4]
 80134ce:	e7ca      	b.n	8013466 <_free_r+0x22>
 80134d0:	bd38      	pop	{r3, r4, r5, pc}
 80134d2:	bf00      	nop
 80134d4:	200039e4 	.word	0x200039e4

080134d8 <sbrk_aligned>:
 80134d8:	b570      	push	{r4, r5, r6, lr}
 80134da:	4e0f      	ldr	r6, [pc, #60]	@ (8013518 <sbrk_aligned+0x40>)
 80134dc:	460c      	mov	r4, r1
 80134de:	6831      	ldr	r1, [r6, #0]
 80134e0:	4605      	mov	r5, r0
 80134e2:	b911      	cbnz	r1, 80134ea <sbrk_aligned+0x12>
 80134e4:	f000 fba4 	bl	8013c30 <_sbrk_r>
 80134e8:	6030      	str	r0, [r6, #0]
 80134ea:	4621      	mov	r1, r4
 80134ec:	4628      	mov	r0, r5
 80134ee:	f000 fb9f 	bl	8013c30 <_sbrk_r>
 80134f2:	1c43      	adds	r3, r0, #1
 80134f4:	d103      	bne.n	80134fe <sbrk_aligned+0x26>
 80134f6:	f04f 34ff 	mov.w	r4, #4294967295
 80134fa:	4620      	mov	r0, r4
 80134fc:	bd70      	pop	{r4, r5, r6, pc}
 80134fe:	1cc4      	adds	r4, r0, #3
 8013500:	f024 0403 	bic.w	r4, r4, #3
 8013504:	42a0      	cmp	r0, r4
 8013506:	d0f8      	beq.n	80134fa <sbrk_aligned+0x22>
 8013508:	1a21      	subs	r1, r4, r0
 801350a:	4628      	mov	r0, r5
 801350c:	f000 fb90 	bl	8013c30 <_sbrk_r>
 8013510:	3001      	adds	r0, #1
 8013512:	d1f2      	bne.n	80134fa <sbrk_aligned+0x22>
 8013514:	e7ef      	b.n	80134f6 <sbrk_aligned+0x1e>
 8013516:	bf00      	nop
 8013518:	200039e0 	.word	0x200039e0

0801351c <_malloc_r>:
 801351c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013520:	1ccd      	adds	r5, r1, #3
 8013522:	f025 0503 	bic.w	r5, r5, #3
 8013526:	3508      	adds	r5, #8
 8013528:	2d0c      	cmp	r5, #12
 801352a:	bf38      	it	cc
 801352c:	250c      	movcc	r5, #12
 801352e:	2d00      	cmp	r5, #0
 8013530:	4606      	mov	r6, r0
 8013532:	db01      	blt.n	8013538 <_malloc_r+0x1c>
 8013534:	42a9      	cmp	r1, r5
 8013536:	d904      	bls.n	8013542 <_malloc_r+0x26>
 8013538:	230c      	movs	r3, #12
 801353a:	6033      	str	r3, [r6, #0]
 801353c:	2000      	movs	r0, #0
 801353e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013542:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013618 <_malloc_r+0xfc>
 8013546:	f000 f869 	bl	801361c <__malloc_lock>
 801354a:	f8d8 3000 	ldr.w	r3, [r8]
 801354e:	461c      	mov	r4, r3
 8013550:	bb44      	cbnz	r4, 80135a4 <_malloc_r+0x88>
 8013552:	4629      	mov	r1, r5
 8013554:	4630      	mov	r0, r6
 8013556:	f7ff ffbf 	bl	80134d8 <sbrk_aligned>
 801355a:	1c43      	adds	r3, r0, #1
 801355c:	4604      	mov	r4, r0
 801355e:	d158      	bne.n	8013612 <_malloc_r+0xf6>
 8013560:	f8d8 4000 	ldr.w	r4, [r8]
 8013564:	4627      	mov	r7, r4
 8013566:	2f00      	cmp	r7, #0
 8013568:	d143      	bne.n	80135f2 <_malloc_r+0xd6>
 801356a:	2c00      	cmp	r4, #0
 801356c:	d04b      	beq.n	8013606 <_malloc_r+0xea>
 801356e:	6823      	ldr	r3, [r4, #0]
 8013570:	4639      	mov	r1, r7
 8013572:	4630      	mov	r0, r6
 8013574:	eb04 0903 	add.w	r9, r4, r3
 8013578:	f000 fb5a 	bl	8013c30 <_sbrk_r>
 801357c:	4581      	cmp	r9, r0
 801357e:	d142      	bne.n	8013606 <_malloc_r+0xea>
 8013580:	6821      	ldr	r1, [r4, #0]
 8013582:	1a6d      	subs	r5, r5, r1
 8013584:	4629      	mov	r1, r5
 8013586:	4630      	mov	r0, r6
 8013588:	f7ff ffa6 	bl	80134d8 <sbrk_aligned>
 801358c:	3001      	adds	r0, #1
 801358e:	d03a      	beq.n	8013606 <_malloc_r+0xea>
 8013590:	6823      	ldr	r3, [r4, #0]
 8013592:	442b      	add	r3, r5
 8013594:	6023      	str	r3, [r4, #0]
 8013596:	f8d8 3000 	ldr.w	r3, [r8]
 801359a:	685a      	ldr	r2, [r3, #4]
 801359c:	bb62      	cbnz	r2, 80135f8 <_malloc_r+0xdc>
 801359e:	f8c8 7000 	str.w	r7, [r8]
 80135a2:	e00f      	b.n	80135c4 <_malloc_r+0xa8>
 80135a4:	6822      	ldr	r2, [r4, #0]
 80135a6:	1b52      	subs	r2, r2, r5
 80135a8:	d420      	bmi.n	80135ec <_malloc_r+0xd0>
 80135aa:	2a0b      	cmp	r2, #11
 80135ac:	d917      	bls.n	80135de <_malloc_r+0xc2>
 80135ae:	1961      	adds	r1, r4, r5
 80135b0:	42a3      	cmp	r3, r4
 80135b2:	6025      	str	r5, [r4, #0]
 80135b4:	bf18      	it	ne
 80135b6:	6059      	strne	r1, [r3, #4]
 80135b8:	6863      	ldr	r3, [r4, #4]
 80135ba:	bf08      	it	eq
 80135bc:	f8c8 1000 	streq.w	r1, [r8]
 80135c0:	5162      	str	r2, [r4, r5]
 80135c2:	604b      	str	r3, [r1, #4]
 80135c4:	4630      	mov	r0, r6
 80135c6:	f000 f82f 	bl	8013628 <__malloc_unlock>
 80135ca:	f104 000b 	add.w	r0, r4, #11
 80135ce:	1d23      	adds	r3, r4, #4
 80135d0:	f020 0007 	bic.w	r0, r0, #7
 80135d4:	1ac2      	subs	r2, r0, r3
 80135d6:	bf1c      	itt	ne
 80135d8:	1a1b      	subne	r3, r3, r0
 80135da:	50a3      	strne	r3, [r4, r2]
 80135dc:	e7af      	b.n	801353e <_malloc_r+0x22>
 80135de:	6862      	ldr	r2, [r4, #4]
 80135e0:	42a3      	cmp	r3, r4
 80135e2:	bf0c      	ite	eq
 80135e4:	f8c8 2000 	streq.w	r2, [r8]
 80135e8:	605a      	strne	r2, [r3, #4]
 80135ea:	e7eb      	b.n	80135c4 <_malloc_r+0xa8>
 80135ec:	4623      	mov	r3, r4
 80135ee:	6864      	ldr	r4, [r4, #4]
 80135f0:	e7ae      	b.n	8013550 <_malloc_r+0x34>
 80135f2:	463c      	mov	r4, r7
 80135f4:	687f      	ldr	r7, [r7, #4]
 80135f6:	e7b6      	b.n	8013566 <_malloc_r+0x4a>
 80135f8:	461a      	mov	r2, r3
 80135fa:	685b      	ldr	r3, [r3, #4]
 80135fc:	42a3      	cmp	r3, r4
 80135fe:	d1fb      	bne.n	80135f8 <_malloc_r+0xdc>
 8013600:	2300      	movs	r3, #0
 8013602:	6053      	str	r3, [r2, #4]
 8013604:	e7de      	b.n	80135c4 <_malloc_r+0xa8>
 8013606:	230c      	movs	r3, #12
 8013608:	6033      	str	r3, [r6, #0]
 801360a:	4630      	mov	r0, r6
 801360c:	f000 f80c 	bl	8013628 <__malloc_unlock>
 8013610:	e794      	b.n	801353c <_malloc_r+0x20>
 8013612:	6005      	str	r5, [r0, #0]
 8013614:	e7d6      	b.n	80135c4 <_malloc_r+0xa8>
 8013616:	bf00      	nop
 8013618:	200039e4 	.word	0x200039e4

0801361c <__malloc_lock>:
 801361c:	4801      	ldr	r0, [pc, #4]	@ (8013624 <__malloc_lock+0x8>)
 801361e:	f7ff bf07 	b.w	8013430 <__retarget_lock_acquire_recursive>
 8013622:	bf00      	nop
 8013624:	200039dc 	.word	0x200039dc

08013628 <__malloc_unlock>:
 8013628:	4801      	ldr	r0, [pc, #4]	@ (8013630 <__malloc_unlock+0x8>)
 801362a:	f7ff bf02 	b.w	8013432 <__retarget_lock_release_recursive>
 801362e:	bf00      	nop
 8013630:	200039dc 	.word	0x200039dc

08013634 <__ssputs_r>:
 8013634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013638:	688e      	ldr	r6, [r1, #8]
 801363a:	461f      	mov	r7, r3
 801363c:	42be      	cmp	r6, r7
 801363e:	680b      	ldr	r3, [r1, #0]
 8013640:	4682      	mov	sl, r0
 8013642:	460c      	mov	r4, r1
 8013644:	4690      	mov	r8, r2
 8013646:	d82d      	bhi.n	80136a4 <__ssputs_r+0x70>
 8013648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801364c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013650:	d026      	beq.n	80136a0 <__ssputs_r+0x6c>
 8013652:	6965      	ldr	r5, [r4, #20]
 8013654:	6909      	ldr	r1, [r1, #16]
 8013656:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801365a:	eba3 0901 	sub.w	r9, r3, r1
 801365e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013662:	1c7b      	adds	r3, r7, #1
 8013664:	444b      	add	r3, r9
 8013666:	106d      	asrs	r5, r5, #1
 8013668:	429d      	cmp	r5, r3
 801366a:	bf38      	it	cc
 801366c:	461d      	movcc	r5, r3
 801366e:	0553      	lsls	r3, r2, #21
 8013670:	d527      	bpl.n	80136c2 <__ssputs_r+0x8e>
 8013672:	4629      	mov	r1, r5
 8013674:	f7ff ff52 	bl	801351c <_malloc_r>
 8013678:	4606      	mov	r6, r0
 801367a:	b360      	cbz	r0, 80136d6 <__ssputs_r+0xa2>
 801367c:	6921      	ldr	r1, [r4, #16]
 801367e:	464a      	mov	r2, r9
 8013680:	f000 fae6 	bl	8013c50 <memcpy>
 8013684:	89a3      	ldrh	r3, [r4, #12]
 8013686:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801368a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801368e:	81a3      	strh	r3, [r4, #12]
 8013690:	6126      	str	r6, [r4, #16]
 8013692:	6165      	str	r5, [r4, #20]
 8013694:	444e      	add	r6, r9
 8013696:	eba5 0509 	sub.w	r5, r5, r9
 801369a:	6026      	str	r6, [r4, #0]
 801369c:	60a5      	str	r5, [r4, #8]
 801369e:	463e      	mov	r6, r7
 80136a0:	42be      	cmp	r6, r7
 80136a2:	d900      	bls.n	80136a6 <__ssputs_r+0x72>
 80136a4:	463e      	mov	r6, r7
 80136a6:	6820      	ldr	r0, [r4, #0]
 80136a8:	4632      	mov	r2, r6
 80136aa:	4641      	mov	r1, r8
 80136ac:	f000 faa6 	bl	8013bfc <memmove>
 80136b0:	68a3      	ldr	r3, [r4, #8]
 80136b2:	1b9b      	subs	r3, r3, r6
 80136b4:	60a3      	str	r3, [r4, #8]
 80136b6:	6823      	ldr	r3, [r4, #0]
 80136b8:	4433      	add	r3, r6
 80136ba:	6023      	str	r3, [r4, #0]
 80136bc:	2000      	movs	r0, #0
 80136be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136c2:	462a      	mov	r2, r5
 80136c4:	f000 fad2 	bl	8013c6c <_realloc_r>
 80136c8:	4606      	mov	r6, r0
 80136ca:	2800      	cmp	r0, #0
 80136cc:	d1e0      	bne.n	8013690 <__ssputs_r+0x5c>
 80136ce:	6921      	ldr	r1, [r4, #16]
 80136d0:	4650      	mov	r0, sl
 80136d2:	f7ff feb7 	bl	8013444 <_free_r>
 80136d6:	230c      	movs	r3, #12
 80136d8:	f8ca 3000 	str.w	r3, [sl]
 80136dc:	89a3      	ldrh	r3, [r4, #12]
 80136de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80136e2:	81a3      	strh	r3, [r4, #12]
 80136e4:	f04f 30ff 	mov.w	r0, #4294967295
 80136e8:	e7e9      	b.n	80136be <__ssputs_r+0x8a>
	...

080136ec <_svfiprintf_r>:
 80136ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136f0:	4698      	mov	r8, r3
 80136f2:	898b      	ldrh	r3, [r1, #12]
 80136f4:	061b      	lsls	r3, r3, #24
 80136f6:	b09d      	sub	sp, #116	@ 0x74
 80136f8:	4607      	mov	r7, r0
 80136fa:	460d      	mov	r5, r1
 80136fc:	4614      	mov	r4, r2
 80136fe:	d510      	bpl.n	8013722 <_svfiprintf_r+0x36>
 8013700:	690b      	ldr	r3, [r1, #16]
 8013702:	b973      	cbnz	r3, 8013722 <_svfiprintf_r+0x36>
 8013704:	2140      	movs	r1, #64	@ 0x40
 8013706:	f7ff ff09 	bl	801351c <_malloc_r>
 801370a:	6028      	str	r0, [r5, #0]
 801370c:	6128      	str	r0, [r5, #16]
 801370e:	b930      	cbnz	r0, 801371e <_svfiprintf_r+0x32>
 8013710:	230c      	movs	r3, #12
 8013712:	603b      	str	r3, [r7, #0]
 8013714:	f04f 30ff 	mov.w	r0, #4294967295
 8013718:	b01d      	add	sp, #116	@ 0x74
 801371a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801371e:	2340      	movs	r3, #64	@ 0x40
 8013720:	616b      	str	r3, [r5, #20]
 8013722:	2300      	movs	r3, #0
 8013724:	9309      	str	r3, [sp, #36]	@ 0x24
 8013726:	2320      	movs	r3, #32
 8013728:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801372c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013730:	2330      	movs	r3, #48	@ 0x30
 8013732:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80138d0 <_svfiprintf_r+0x1e4>
 8013736:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801373a:	f04f 0901 	mov.w	r9, #1
 801373e:	4623      	mov	r3, r4
 8013740:	469a      	mov	sl, r3
 8013742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013746:	b10a      	cbz	r2, 801374c <_svfiprintf_r+0x60>
 8013748:	2a25      	cmp	r2, #37	@ 0x25
 801374a:	d1f9      	bne.n	8013740 <_svfiprintf_r+0x54>
 801374c:	ebba 0b04 	subs.w	fp, sl, r4
 8013750:	d00b      	beq.n	801376a <_svfiprintf_r+0x7e>
 8013752:	465b      	mov	r3, fp
 8013754:	4622      	mov	r2, r4
 8013756:	4629      	mov	r1, r5
 8013758:	4638      	mov	r0, r7
 801375a:	f7ff ff6b 	bl	8013634 <__ssputs_r>
 801375e:	3001      	adds	r0, #1
 8013760:	f000 80a7 	beq.w	80138b2 <_svfiprintf_r+0x1c6>
 8013764:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013766:	445a      	add	r2, fp
 8013768:	9209      	str	r2, [sp, #36]	@ 0x24
 801376a:	f89a 3000 	ldrb.w	r3, [sl]
 801376e:	2b00      	cmp	r3, #0
 8013770:	f000 809f 	beq.w	80138b2 <_svfiprintf_r+0x1c6>
 8013774:	2300      	movs	r3, #0
 8013776:	f04f 32ff 	mov.w	r2, #4294967295
 801377a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801377e:	f10a 0a01 	add.w	sl, sl, #1
 8013782:	9304      	str	r3, [sp, #16]
 8013784:	9307      	str	r3, [sp, #28]
 8013786:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801378a:	931a      	str	r3, [sp, #104]	@ 0x68
 801378c:	4654      	mov	r4, sl
 801378e:	2205      	movs	r2, #5
 8013790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013794:	484e      	ldr	r0, [pc, #312]	@ (80138d0 <_svfiprintf_r+0x1e4>)
 8013796:	f7f4 fd33 	bl	8008200 <memchr>
 801379a:	9a04      	ldr	r2, [sp, #16]
 801379c:	b9d8      	cbnz	r0, 80137d6 <_svfiprintf_r+0xea>
 801379e:	06d0      	lsls	r0, r2, #27
 80137a0:	bf44      	itt	mi
 80137a2:	2320      	movmi	r3, #32
 80137a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80137a8:	0711      	lsls	r1, r2, #28
 80137aa:	bf44      	itt	mi
 80137ac:	232b      	movmi	r3, #43	@ 0x2b
 80137ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80137b2:	f89a 3000 	ldrb.w	r3, [sl]
 80137b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80137b8:	d015      	beq.n	80137e6 <_svfiprintf_r+0xfa>
 80137ba:	9a07      	ldr	r2, [sp, #28]
 80137bc:	4654      	mov	r4, sl
 80137be:	2000      	movs	r0, #0
 80137c0:	f04f 0c0a 	mov.w	ip, #10
 80137c4:	4621      	mov	r1, r4
 80137c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80137ca:	3b30      	subs	r3, #48	@ 0x30
 80137cc:	2b09      	cmp	r3, #9
 80137ce:	d94b      	bls.n	8013868 <_svfiprintf_r+0x17c>
 80137d0:	b1b0      	cbz	r0, 8013800 <_svfiprintf_r+0x114>
 80137d2:	9207      	str	r2, [sp, #28]
 80137d4:	e014      	b.n	8013800 <_svfiprintf_r+0x114>
 80137d6:	eba0 0308 	sub.w	r3, r0, r8
 80137da:	fa09 f303 	lsl.w	r3, r9, r3
 80137de:	4313      	orrs	r3, r2
 80137e0:	9304      	str	r3, [sp, #16]
 80137e2:	46a2      	mov	sl, r4
 80137e4:	e7d2      	b.n	801378c <_svfiprintf_r+0xa0>
 80137e6:	9b03      	ldr	r3, [sp, #12]
 80137e8:	1d19      	adds	r1, r3, #4
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	9103      	str	r1, [sp, #12]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	bfbb      	ittet	lt
 80137f2:	425b      	neglt	r3, r3
 80137f4:	f042 0202 	orrlt.w	r2, r2, #2
 80137f8:	9307      	strge	r3, [sp, #28]
 80137fa:	9307      	strlt	r3, [sp, #28]
 80137fc:	bfb8      	it	lt
 80137fe:	9204      	strlt	r2, [sp, #16]
 8013800:	7823      	ldrb	r3, [r4, #0]
 8013802:	2b2e      	cmp	r3, #46	@ 0x2e
 8013804:	d10a      	bne.n	801381c <_svfiprintf_r+0x130>
 8013806:	7863      	ldrb	r3, [r4, #1]
 8013808:	2b2a      	cmp	r3, #42	@ 0x2a
 801380a:	d132      	bne.n	8013872 <_svfiprintf_r+0x186>
 801380c:	9b03      	ldr	r3, [sp, #12]
 801380e:	1d1a      	adds	r2, r3, #4
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	9203      	str	r2, [sp, #12]
 8013814:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013818:	3402      	adds	r4, #2
 801381a:	9305      	str	r3, [sp, #20]
 801381c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80138e0 <_svfiprintf_r+0x1f4>
 8013820:	7821      	ldrb	r1, [r4, #0]
 8013822:	2203      	movs	r2, #3
 8013824:	4650      	mov	r0, sl
 8013826:	f7f4 fceb 	bl	8008200 <memchr>
 801382a:	b138      	cbz	r0, 801383c <_svfiprintf_r+0x150>
 801382c:	9b04      	ldr	r3, [sp, #16]
 801382e:	eba0 000a 	sub.w	r0, r0, sl
 8013832:	2240      	movs	r2, #64	@ 0x40
 8013834:	4082      	lsls	r2, r0
 8013836:	4313      	orrs	r3, r2
 8013838:	3401      	adds	r4, #1
 801383a:	9304      	str	r3, [sp, #16]
 801383c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013840:	4824      	ldr	r0, [pc, #144]	@ (80138d4 <_svfiprintf_r+0x1e8>)
 8013842:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013846:	2206      	movs	r2, #6
 8013848:	f7f4 fcda 	bl	8008200 <memchr>
 801384c:	2800      	cmp	r0, #0
 801384e:	d036      	beq.n	80138be <_svfiprintf_r+0x1d2>
 8013850:	4b21      	ldr	r3, [pc, #132]	@ (80138d8 <_svfiprintf_r+0x1ec>)
 8013852:	bb1b      	cbnz	r3, 801389c <_svfiprintf_r+0x1b0>
 8013854:	9b03      	ldr	r3, [sp, #12]
 8013856:	3307      	adds	r3, #7
 8013858:	f023 0307 	bic.w	r3, r3, #7
 801385c:	3308      	adds	r3, #8
 801385e:	9303      	str	r3, [sp, #12]
 8013860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013862:	4433      	add	r3, r6
 8013864:	9309      	str	r3, [sp, #36]	@ 0x24
 8013866:	e76a      	b.n	801373e <_svfiprintf_r+0x52>
 8013868:	fb0c 3202 	mla	r2, ip, r2, r3
 801386c:	460c      	mov	r4, r1
 801386e:	2001      	movs	r0, #1
 8013870:	e7a8      	b.n	80137c4 <_svfiprintf_r+0xd8>
 8013872:	2300      	movs	r3, #0
 8013874:	3401      	adds	r4, #1
 8013876:	9305      	str	r3, [sp, #20]
 8013878:	4619      	mov	r1, r3
 801387a:	f04f 0c0a 	mov.w	ip, #10
 801387e:	4620      	mov	r0, r4
 8013880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013884:	3a30      	subs	r2, #48	@ 0x30
 8013886:	2a09      	cmp	r2, #9
 8013888:	d903      	bls.n	8013892 <_svfiprintf_r+0x1a6>
 801388a:	2b00      	cmp	r3, #0
 801388c:	d0c6      	beq.n	801381c <_svfiprintf_r+0x130>
 801388e:	9105      	str	r1, [sp, #20]
 8013890:	e7c4      	b.n	801381c <_svfiprintf_r+0x130>
 8013892:	fb0c 2101 	mla	r1, ip, r1, r2
 8013896:	4604      	mov	r4, r0
 8013898:	2301      	movs	r3, #1
 801389a:	e7f0      	b.n	801387e <_svfiprintf_r+0x192>
 801389c:	ab03      	add	r3, sp, #12
 801389e:	9300      	str	r3, [sp, #0]
 80138a0:	462a      	mov	r2, r5
 80138a2:	4b0e      	ldr	r3, [pc, #56]	@ (80138dc <_svfiprintf_r+0x1f0>)
 80138a4:	a904      	add	r1, sp, #16
 80138a6:	4638      	mov	r0, r7
 80138a8:	f3af 8000 	nop.w
 80138ac:	1c42      	adds	r2, r0, #1
 80138ae:	4606      	mov	r6, r0
 80138b0:	d1d6      	bne.n	8013860 <_svfiprintf_r+0x174>
 80138b2:	89ab      	ldrh	r3, [r5, #12]
 80138b4:	065b      	lsls	r3, r3, #25
 80138b6:	f53f af2d 	bmi.w	8013714 <_svfiprintf_r+0x28>
 80138ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80138bc:	e72c      	b.n	8013718 <_svfiprintf_r+0x2c>
 80138be:	ab03      	add	r3, sp, #12
 80138c0:	9300      	str	r3, [sp, #0]
 80138c2:	462a      	mov	r2, r5
 80138c4:	4b05      	ldr	r3, [pc, #20]	@ (80138dc <_svfiprintf_r+0x1f0>)
 80138c6:	a904      	add	r1, sp, #16
 80138c8:	4638      	mov	r0, r7
 80138ca:	f000 f879 	bl	80139c0 <_printf_i>
 80138ce:	e7ed      	b.n	80138ac <_svfiprintf_r+0x1c0>
 80138d0:	08015ac1 	.word	0x08015ac1
 80138d4:	08015acb 	.word	0x08015acb
 80138d8:	00000000 	.word	0x00000000
 80138dc:	08013635 	.word	0x08013635
 80138e0:	08015ac7 	.word	0x08015ac7

080138e4 <_printf_common>:
 80138e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138e8:	4616      	mov	r6, r2
 80138ea:	4698      	mov	r8, r3
 80138ec:	688a      	ldr	r2, [r1, #8]
 80138ee:	690b      	ldr	r3, [r1, #16]
 80138f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80138f4:	4293      	cmp	r3, r2
 80138f6:	bfb8      	it	lt
 80138f8:	4613      	movlt	r3, r2
 80138fa:	6033      	str	r3, [r6, #0]
 80138fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013900:	4607      	mov	r7, r0
 8013902:	460c      	mov	r4, r1
 8013904:	b10a      	cbz	r2, 801390a <_printf_common+0x26>
 8013906:	3301      	adds	r3, #1
 8013908:	6033      	str	r3, [r6, #0]
 801390a:	6823      	ldr	r3, [r4, #0]
 801390c:	0699      	lsls	r1, r3, #26
 801390e:	bf42      	ittt	mi
 8013910:	6833      	ldrmi	r3, [r6, #0]
 8013912:	3302      	addmi	r3, #2
 8013914:	6033      	strmi	r3, [r6, #0]
 8013916:	6825      	ldr	r5, [r4, #0]
 8013918:	f015 0506 	ands.w	r5, r5, #6
 801391c:	d106      	bne.n	801392c <_printf_common+0x48>
 801391e:	f104 0a19 	add.w	sl, r4, #25
 8013922:	68e3      	ldr	r3, [r4, #12]
 8013924:	6832      	ldr	r2, [r6, #0]
 8013926:	1a9b      	subs	r3, r3, r2
 8013928:	42ab      	cmp	r3, r5
 801392a:	dc26      	bgt.n	801397a <_printf_common+0x96>
 801392c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013930:	6822      	ldr	r2, [r4, #0]
 8013932:	3b00      	subs	r3, #0
 8013934:	bf18      	it	ne
 8013936:	2301      	movne	r3, #1
 8013938:	0692      	lsls	r2, r2, #26
 801393a:	d42b      	bmi.n	8013994 <_printf_common+0xb0>
 801393c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013940:	4641      	mov	r1, r8
 8013942:	4638      	mov	r0, r7
 8013944:	47c8      	blx	r9
 8013946:	3001      	adds	r0, #1
 8013948:	d01e      	beq.n	8013988 <_printf_common+0xa4>
 801394a:	6823      	ldr	r3, [r4, #0]
 801394c:	6922      	ldr	r2, [r4, #16]
 801394e:	f003 0306 	and.w	r3, r3, #6
 8013952:	2b04      	cmp	r3, #4
 8013954:	bf02      	ittt	eq
 8013956:	68e5      	ldreq	r5, [r4, #12]
 8013958:	6833      	ldreq	r3, [r6, #0]
 801395a:	1aed      	subeq	r5, r5, r3
 801395c:	68a3      	ldr	r3, [r4, #8]
 801395e:	bf0c      	ite	eq
 8013960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013964:	2500      	movne	r5, #0
 8013966:	4293      	cmp	r3, r2
 8013968:	bfc4      	itt	gt
 801396a:	1a9b      	subgt	r3, r3, r2
 801396c:	18ed      	addgt	r5, r5, r3
 801396e:	2600      	movs	r6, #0
 8013970:	341a      	adds	r4, #26
 8013972:	42b5      	cmp	r5, r6
 8013974:	d11a      	bne.n	80139ac <_printf_common+0xc8>
 8013976:	2000      	movs	r0, #0
 8013978:	e008      	b.n	801398c <_printf_common+0xa8>
 801397a:	2301      	movs	r3, #1
 801397c:	4652      	mov	r2, sl
 801397e:	4641      	mov	r1, r8
 8013980:	4638      	mov	r0, r7
 8013982:	47c8      	blx	r9
 8013984:	3001      	adds	r0, #1
 8013986:	d103      	bne.n	8013990 <_printf_common+0xac>
 8013988:	f04f 30ff 	mov.w	r0, #4294967295
 801398c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013990:	3501      	adds	r5, #1
 8013992:	e7c6      	b.n	8013922 <_printf_common+0x3e>
 8013994:	18e1      	adds	r1, r4, r3
 8013996:	1c5a      	adds	r2, r3, #1
 8013998:	2030      	movs	r0, #48	@ 0x30
 801399a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801399e:	4422      	add	r2, r4
 80139a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80139a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80139a8:	3302      	adds	r3, #2
 80139aa:	e7c7      	b.n	801393c <_printf_common+0x58>
 80139ac:	2301      	movs	r3, #1
 80139ae:	4622      	mov	r2, r4
 80139b0:	4641      	mov	r1, r8
 80139b2:	4638      	mov	r0, r7
 80139b4:	47c8      	blx	r9
 80139b6:	3001      	adds	r0, #1
 80139b8:	d0e6      	beq.n	8013988 <_printf_common+0xa4>
 80139ba:	3601      	adds	r6, #1
 80139bc:	e7d9      	b.n	8013972 <_printf_common+0x8e>
	...

080139c0 <_printf_i>:
 80139c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80139c4:	7e0f      	ldrb	r7, [r1, #24]
 80139c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80139c8:	2f78      	cmp	r7, #120	@ 0x78
 80139ca:	4691      	mov	r9, r2
 80139cc:	4680      	mov	r8, r0
 80139ce:	460c      	mov	r4, r1
 80139d0:	469a      	mov	sl, r3
 80139d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80139d6:	d807      	bhi.n	80139e8 <_printf_i+0x28>
 80139d8:	2f62      	cmp	r7, #98	@ 0x62
 80139da:	d80a      	bhi.n	80139f2 <_printf_i+0x32>
 80139dc:	2f00      	cmp	r7, #0
 80139de:	f000 80d1 	beq.w	8013b84 <_printf_i+0x1c4>
 80139e2:	2f58      	cmp	r7, #88	@ 0x58
 80139e4:	f000 80b8 	beq.w	8013b58 <_printf_i+0x198>
 80139e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80139ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80139f0:	e03a      	b.n	8013a68 <_printf_i+0xa8>
 80139f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80139f6:	2b15      	cmp	r3, #21
 80139f8:	d8f6      	bhi.n	80139e8 <_printf_i+0x28>
 80139fa:	a101      	add	r1, pc, #4	@ (adr r1, 8013a00 <_printf_i+0x40>)
 80139fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a00:	08013a59 	.word	0x08013a59
 8013a04:	08013a6d 	.word	0x08013a6d
 8013a08:	080139e9 	.word	0x080139e9
 8013a0c:	080139e9 	.word	0x080139e9
 8013a10:	080139e9 	.word	0x080139e9
 8013a14:	080139e9 	.word	0x080139e9
 8013a18:	08013a6d 	.word	0x08013a6d
 8013a1c:	080139e9 	.word	0x080139e9
 8013a20:	080139e9 	.word	0x080139e9
 8013a24:	080139e9 	.word	0x080139e9
 8013a28:	080139e9 	.word	0x080139e9
 8013a2c:	08013b6b 	.word	0x08013b6b
 8013a30:	08013a97 	.word	0x08013a97
 8013a34:	08013b25 	.word	0x08013b25
 8013a38:	080139e9 	.word	0x080139e9
 8013a3c:	080139e9 	.word	0x080139e9
 8013a40:	08013b8d 	.word	0x08013b8d
 8013a44:	080139e9 	.word	0x080139e9
 8013a48:	08013a97 	.word	0x08013a97
 8013a4c:	080139e9 	.word	0x080139e9
 8013a50:	080139e9 	.word	0x080139e9
 8013a54:	08013b2d 	.word	0x08013b2d
 8013a58:	6833      	ldr	r3, [r6, #0]
 8013a5a:	1d1a      	adds	r2, r3, #4
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	6032      	str	r2, [r6, #0]
 8013a60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013a64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013a68:	2301      	movs	r3, #1
 8013a6a:	e09c      	b.n	8013ba6 <_printf_i+0x1e6>
 8013a6c:	6833      	ldr	r3, [r6, #0]
 8013a6e:	6820      	ldr	r0, [r4, #0]
 8013a70:	1d19      	adds	r1, r3, #4
 8013a72:	6031      	str	r1, [r6, #0]
 8013a74:	0606      	lsls	r6, r0, #24
 8013a76:	d501      	bpl.n	8013a7c <_printf_i+0xbc>
 8013a78:	681d      	ldr	r5, [r3, #0]
 8013a7a:	e003      	b.n	8013a84 <_printf_i+0xc4>
 8013a7c:	0645      	lsls	r5, r0, #25
 8013a7e:	d5fb      	bpl.n	8013a78 <_printf_i+0xb8>
 8013a80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013a84:	2d00      	cmp	r5, #0
 8013a86:	da03      	bge.n	8013a90 <_printf_i+0xd0>
 8013a88:	232d      	movs	r3, #45	@ 0x2d
 8013a8a:	426d      	negs	r5, r5
 8013a8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013a90:	4858      	ldr	r0, [pc, #352]	@ (8013bf4 <_printf_i+0x234>)
 8013a92:	230a      	movs	r3, #10
 8013a94:	e011      	b.n	8013aba <_printf_i+0xfa>
 8013a96:	6821      	ldr	r1, [r4, #0]
 8013a98:	6833      	ldr	r3, [r6, #0]
 8013a9a:	0608      	lsls	r0, r1, #24
 8013a9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8013aa0:	d402      	bmi.n	8013aa8 <_printf_i+0xe8>
 8013aa2:	0649      	lsls	r1, r1, #25
 8013aa4:	bf48      	it	mi
 8013aa6:	b2ad      	uxthmi	r5, r5
 8013aa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8013aaa:	4852      	ldr	r0, [pc, #328]	@ (8013bf4 <_printf_i+0x234>)
 8013aac:	6033      	str	r3, [r6, #0]
 8013aae:	bf14      	ite	ne
 8013ab0:	230a      	movne	r3, #10
 8013ab2:	2308      	moveq	r3, #8
 8013ab4:	2100      	movs	r1, #0
 8013ab6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013aba:	6866      	ldr	r6, [r4, #4]
 8013abc:	60a6      	str	r6, [r4, #8]
 8013abe:	2e00      	cmp	r6, #0
 8013ac0:	db05      	blt.n	8013ace <_printf_i+0x10e>
 8013ac2:	6821      	ldr	r1, [r4, #0]
 8013ac4:	432e      	orrs	r6, r5
 8013ac6:	f021 0104 	bic.w	r1, r1, #4
 8013aca:	6021      	str	r1, [r4, #0]
 8013acc:	d04b      	beq.n	8013b66 <_printf_i+0x1a6>
 8013ace:	4616      	mov	r6, r2
 8013ad0:	fbb5 f1f3 	udiv	r1, r5, r3
 8013ad4:	fb03 5711 	mls	r7, r3, r1, r5
 8013ad8:	5dc7      	ldrb	r7, [r0, r7]
 8013ada:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013ade:	462f      	mov	r7, r5
 8013ae0:	42bb      	cmp	r3, r7
 8013ae2:	460d      	mov	r5, r1
 8013ae4:	d9f4      	bls.n	8013ad0 <_printf_i+0x110>
 8013ae6:	2b08      	cmp	r3, #8
 8013ae8:	d10b      	bne.n	8013b02 <_printf_i+0x142>
 8013aea:	6823      	ldr	r3, [r4, #0]
 8013aec:	07df      	lsls	r7, r3, #31
 8013aee:	d508      	bpl.n	8013b02 <_printf_i+0x142>
 8013af0:	6923      	ldr	r3, [r4, #16]
 8013af2:	6861      	ldr	r1, [r4, #4]
 8013af4:	4299      	cmp	r1, r3
 8013af6:	bfde      	ittt	le
 8013af8:	2330      	movle	r3, #48	@ 0x30
 8013afa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013afe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013b02:	1b92      	subs	r2, r2, r6
 8013b04:	6122      	str	r2, [r4, #16]
 8013b06:	f8cd a000 	str.w	sl, [sp]
 8013b0a:	464b      	mov	r3, r9
 8013b0c:	aa03      	add	r2, sp, #12
 8013b0e:	4621      	mov	r1, r4
 8013b10:	4640      	mov	r0, r8
 8013b12:	f7ff fee7 	bl	80138e4 <_printf_common>
 8013b16:	3001      	adds	r0, #1
 8013b18:	d14a      	bne.n	8013bb0 <_printf_i+0x1f0>
 8013b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8013b1e:	b004      	add	sp, #16
 8013b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b24:	6823      	ldr	r3, [r4, #0]
 8013b26:	f043 0320 	orr.w	r3, r3, #32
 8013b2a:	6023      	str	r3, [r4, #0]
 8013b2c:	4832      	ldr	r0, [pc, #200]	@ (8013bf8 <_printf_i+0x238>)
 8013b2e:	2778      	movs	r7, #120	@ 0x78
 8013b30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013b34:	6823      	ldr	r3, [r4, #0]
 8013b36:	6831      	ldr	r1, [r6, #0]
 8013b38:	061f      	lsls	r7, r3, #24
 8013b3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8013b3e:	d402      	bmi.n	8013b46 <_printf_i+0x186>
 8013b40:	065f      	lsls	r7, r3, #25
 8013b42:	bf48      	it	mi
 8013b44:	b2ad      	uxthmi	r5, r5
 8013b46:	6031      	str	r1, [r6, #0]
 8013b48:	07d9      	lsls	r1, r3, #31
 8013b4a:	bf44      	itt	mi
 8013b4c:	f043 0320 	orrmi.w	r3, r3, #32
 8013b50:	6023      	strmi	r3, [r4, #0]
 8013b52:	b11d      	cbz	r5, 8013b5c <_printf_i+0x19c>
 8013b54:	2310      	movs	r3, #16
 8013b56:	e7ad      	b.n	8013ab4 <_printf_i+0xf4>
 8013b58:	4826      	ldr	r0, [pc, #152]	@ (8013bf4 <_printf_i+0x234>)
 8013b5a:	e7e9      	b.n	8013b30 <_printf_i+0x170>
 8013b5c:	6823      	ldr	r3, [r4, #0]
 8013b5e:	f023 0320 	bic.w	r3, r3, #32
 8013b62:	6023      	str	r3, [r4, #0]
 8013b64:	e7f6      	b.n	8013b54 <_printf_i+0x194>
 8013b66:	4616      	mov	r6, r2
 8013b68:	e7bd      	b.n	8013ae6 <_printf_i+0x126>
 8013b6a:	6833      	ldr	r3, [r6, #0]
 8013b6c:	6825      	ldr	r5, [r4, #0]
 8013b6e:	6961      	ldr	r1, [r4, #20]
 8013b70:	1d18      	adds	r0, r3, #4
 8013b72:	6030      	str	r0, [r6, #0]
 8013b74:	062e      	lsls	r6, r5, #24
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	d501      	bpl.n	8013b7e <_printf_i+0x1be>
 8013b7a:	6019      	str	r1, [r3, #0]
 8013b7c:	e002      	b.n	8013b84 <_printf_i+0x1c4>
 8013b7e:	0668      	lsls	r0, r5, #25
 8013b80:	d5fb      	bpl.n	8013b7a <_printf_i+0x1ba>
 8013b82:	8019      	strh	r1, [r3, #0]
 8013b84:	2300      	movs	r3, #0
 8013b86:	6123      	str	r3, [r4, #16]
 8013b88:	4616      	mov	r6, r2
 8013b8a:	e7bc      	b.n	8013b06 <_printf_i+0x146>
 8013b8c:	6833      	ldr	r3, [r6, #0]
 8013b8e:	1d1a      	adds	r2, r3, #4
 8013b90:	6032      	str	r2, [r6, #0]
 8013b92:	681e      	ldr	r6, [r3, #0]
 8013b94:	6862      	ldr	r2, [r4, #4]
 8013b96:	2100      	movs	r1, #0
 8013b98:	4630      	mov	r0, r6
 8013b9a:	f7f4 fb31 	bl	8008200 <memchr>
 8013b9e:	b108      	cbz	r0, 8013ba4 <_printf_i+0x1e4>
 8013ba0:	1b80      	subs	r0, r0, r6
 8013ba2:	6060      	str	r0, [r4, #4]
 8013ba4:	6863      	ldr	r3, [r4, #4]
 8013ba6:	6123      	str	r3, [r4, #16]
 8013ba8:	2300      	movs	r3, #0
 8013baa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013bae:	e7aa      	b.n	8013b06 <_printf_i+0x146>
 8013bb0:	6923      	ldr	r3, [r4, #16]
 8013bb2:	4632      	mov	r2, r6
 8013bb4:	4649      	mov	r1, r9
 8013bb6:	4640      	mov	r0, r8
 8013bb8:	47d0      	blx	sl
 8013bba:	3001      	adds	r0, #1
 8013bbc:	d0ad      	beq.n	8013b1a <_printf_i+0x15a>
 8013bbe:	6823      	ldr	r3, [r4, #0]
 8013bc0:	079b      	lsls	r3, r3, #30
 8013bc2:	d413      	bmi.n	8013bec <_printf_i+0x22c>
 8013bc4:	68e0      	ldr	r0, [r4, #12]
 8013bc6:	9b03      	ldr	r3, [sp, #12]
 8013bc8:	4298      	cmp	r0, r3
 8013bca:	bfb8      	it	lt
 8013bcc:	4618      	movlt	r0, r3
 8013bce:	e7a6      	b.n	8013b1e <_printf_i+0x15e>
 8013bd0:	2301      	movs	r3, #1
 8013bd2:	4632      	mov	r2, r6
 8013bd4:	4649      	mov	r1, r9
 8013bd6:	4640      	mov	r0, r8
 8013bd8:	47d0      	blx	sl
 8013bda:	3001      	adds	r0, #1
 8013bdc:	d09d      	beq.n	8013b1a <_printf_i+0x15a>
 8013bde:	3501      	adds	r5, #1
 8013be0:	68e3      	ldr	r3, [r4, #12]
 8013be2:	9903      	ldr	r1, [sp, #12]
 8013be4:	1a5b      	subs	r3, r3, r1
 8013be6:	42ab      	cmp	r3, r5
 8013be8:	dcf2      	bgt.n	8013bd0 <_printf_i+0x210>
 8013bea:	e7eb      	b.n	8013bc4 <_printf_i+0x204>
 8013bec:	2500      	movs	r5, #0
 8013bee:	f104 0619 	add.w	r6, r4, #25
 8013bf2:	e7f5      	b.n	8013be0 <_printf_i+0x220>
 8013bf4:	08015ad2 	.word	0x08015ad2
 8013bf8:	08015ae3 	.word	0x08015ae3

08013bfc <memmove>:
 8013bfc:	4288      	cmp	r0, r1
 8013bfe:	b510      	push	{r4, lr}
 8013c00:	eb01 0402 	add.w	r4, r1, r2
 8013c04:	d902      	bls.n	8013c0c <memmove+0x10>
 8013c06:	4284      	cmp	r4, r0
 8013c08:	4623      	mov	r3, r4
 8013c0a:	d807      	bhi.n	8013c1c <memmove+0x20>
 8013c0c:	1e43      	subs	r3, r0, #1
 8013c0e:	42a1      	cmp	r1, r4
 8013c10:	d008      	beq.n	8013c24 <memmove+0x28>
 8013c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013c1a:	e7f8      	b.n	8013c0e <memmove+0x12>
 8013c1c:	4402      	add	r2, r0
 8013c1e:	4601      	mov	r1, r0
 8013c20:	428a      	cmp	r2, r1
 8013c22:	d100      	bne.n	8013c26 <memmove+0x2a>
 8013c24:	bd10      	pop	{r4, pc}
 8013c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013c2e:	e7f7      	b.n	8013c20 <memmove+0x24>

08013c30 <_sbrk_r>:
 8013c30:	b538      	push	{r3, r4, r5, lr}
 8013c32:	4d06      	ldr	r5, [pc, #24]	@ (8013c4c <_sbrk_r+0x1c>)
 8013c34:	2300      	movs	r3, #0
 8013c36:	4604      	mov	r4, r0
 8013c38:	4608      	mov	r0, r1
 8013c3a:	602b      	str	r3, [r5, #0]
 8013c3c:	f7fb fb34 	bl	800f2a8 <_sbrk>
 8013c40:	1c43      	adds	r3, r0, #1
 8013c42:	d102      	bne.n	8013c4a <_sbrk_r+0x1a>
 8013c44:	682b      	ldr	r3, [r5, #0]
 8013c46:	b103      	cbz	r3, 8013c4a <_sbrk_r+0x1a>
 8013c48:	6023      	str	r3, [r4, #0]
 8013c4a:	bd38      	pop	{r3, r4, r5, pc}
 8013c4c:	200039d8 	.word	0x200039d8

08013c50 <memcpy>:
 8013c50:	440a      	add	r2, r1
 8013c52:	4291      	cmp	r1, r2
 8013c54:	f100 33ff 	add.w	r3, r0, #4294967295
 8013c58:	d100      	bne.n	8013c5c <memcpy+0xc>
 8013c5a:	4770      	bx	lr
 8013c5c:	b510      	push	{r4, lr}
 8013c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c66:	4291      	cmp	r1, r2
 8013c68:	d1f9      	bne.n	8013c5e <memcpy+0xe>
 8013c6a:	bd10      	pop	{r4, pc}

08013c6c <_realloc_r>:
 8013c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c70:	4607      	mov	r7, r0
 8013c72:	4614      	mov	r4, r2
 8013c74:	460d      	mov	r5, r1
 8013c76:	b921      	cbnz	r1, 8013c82 <_realloc_r+0x16>
 8013c78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c7c:	4611      	mov	r1, r2
 8013c7e:	f7ff bc4d 	b.w	801351c <_malloc_r>
 8013c82:	b92a      	cbnz	r2, 8013c90 <_realloc_r+0x24>
 8013c84:	f7ff fbde 	bl	8013444 <_free_r>
 8013c88:	4625      	mov	r5, r4
 8013c8a:	4628      	mov	r0, r5
 8013c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c90:	f000 f81a 	bl	8013cc8 <_malloc_usable_size_r>
 8013c94:	4284      	cmp	r4, r0
 8013c96:	4606      	mov	r6, r0
 8013c98:	d802      	bhi.n	8013ca0 <_realloc_r+0x34>
 8013c9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013c9e:	d8f4      	bhi.n	8013c8a <_realloc_r+0x1e>
 8013ca0:	4621      	mov	r1, r4
 8013ca2:	4638      	mov	r0, r7
 8013ca4:	f7ff fc3a 	bl	801351c <_malloc_r>
 8013ca8:	4680      	mov	r8, r0
 8013caa:	b908      	cbnz	r0, 8013cb0 <_realloc_r+0x44>
 8013cac:	4645      	mov	r5, r8
 8013cae:	e7ec      	b.n	8013c8a <_realloc_r+0x1e>
 8013cb0:	42b4      	cmp	r4, r6
 8013cb2:	4622      	mov	r2, r4
 8013cb4:	4629      	mov	r1, r5
 8013cb6:	bf28      	it	cs
 8013cb8:	4632      	movcs	r2, r6
 8013cba:	f7ff ffc9 	bl	8013c50 <memcpy>
 8013cbe:	4629      	mov	r1, r5
 8013cc0:	4638      	mov	r0, r7
 8013cc2:	f7ff fbbf 	bl	8013444 <_free_r>
 8013cc6:	e7f1      	b.n	8013cac <_realloc_r+0x40>

08013cc8 <_malloc_usable_size_r>:
 8013cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ccc:	1f18      	subs	r0, r3, #4
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	bfbc      	itt	lt
 8013cd2:	580b      	ldrlt	r3, [r1, r0]
 8013cd4:	18c0      	addlt	r0, r0, r3
 8013cd6:	4770      	bx	lr

08013cd8 <_init>:
 8013cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cda:	bf00      	nop
 8013cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cde:	bc08      	pop	{r3}
 8013ce0:	469e      	mov	lr, r3
 8013ce2:	4770      	bx	lr

08013ce4 <_fini>:
 8013ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ce6:	bf00      	nop
 8013ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cea:	bc08      	pop	{r3}
 8013cec:	469e      	mov	lr, r3
 8013cee:	4770      	bx	lr
