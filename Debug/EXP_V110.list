
EXP_V110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b364  08008190  08008190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e04  080134f4  080134f4  0000c4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080152f8  080152f8  0001140c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080152f8  080152f8  0000e2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015300  08015300  0001140c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015300  08015300  0000e300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015304  08015304  0000e304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000240c  20000000  08015308  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001140c  2**0
                  CONTENTS
 10 .bss          000015d0  2000240c  2000240c  0001140c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200039dc  200039dc  0001140c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001140c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a089  00000000  00000000  0001143c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005256  00000000  00000000  0002b4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ce8  00000000  00000000  00030720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015af  00000000  00000000  00032408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bec9  00000000  00000000  000339b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002311a  00000000  00000000  0005f880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0425  00000000  00000000  0008299a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00172dbf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d4c  00000000  00000000  00172e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0017ab50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008190 <__do_global_dtors_aux>:
 8008190:	b510      	push	{r4, lr}
 8008192:	4c05      	ldr	r4, [pc, #20]	@ (80081a8 <__do_global_dtors_aux+0x18>)
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	b933      	cbnz	r3, 80081a6 <__do_global_dtors_aux+0x16>
 8008198:	4b04      	ldr	r3, [pc, #16]	@ (80081ac <__do_global_dtors_aux+0x1c>)
 800819a:	b113      	cbz	r3, 80081a2 <__do_global_dtors_aux+0x12>
 800819c:	4804      	ldr	r0, [pc, #16]	@ (80081b0 <__do_global_dtors_aux+0x20>)
 800819e:	f3af 8000 	nop.w
 80081a2:	2301      	movs	r3, #1
 80081a4:	7023      	strb	r3, [r4, #0]
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	2000240c 	.word	0x2000240c
 80081ac:	00000000 	.word	0x00000000
 80081b0:	080134dc 	.word	0x080134dc

080081b4 <frame_dummy>:
 80081b4:	b508      	push	{r3, lr}
 80081b6:	4b03      	ldr	r3, [pc, #12]	@ (80081c4 <frame_dummy+0x10>)
 80081b8:	b11b      	cbz	r3, 80081c2 <frame_dummy+0xe>
 80081ba:	4903      	ldr	r1, [pc, #12]	@ (80081c8 <frame_dummy+0x14>)
 80081bc:	4803      	ldr	r0, [pc, #12]	@ (80081cc <frame_dummy+0x18>)
 80081be:	f3af 8000 	nop.w
 80081c2:	bd08      	pop	{r3, pc}
 80081c4:	00000000 	.word	0x00000000
 80081c8:	20002410 	.word	0x20002410
 80081cc:	080134dc 	.word	0x080134dc

080081d0 <strcmp>:
 80081d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081d8:	2a01      	cmp	r2, #1
 80081da:	bf28      	it	cs
 80081dc:	429a      	cmpcs	r2, r3
 80081de:	d0f7      	beq.n	80081d0 <strcmp>
 80081e0:	1ad0      	subs	r0, r2, r3
 80081e2:	4770      	bx	lr

080081e4 <strlen>:
 80081e4:	4603      	mov	r3, r0
 80081e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ea:	2a00      	cmp	r2, #0
 80081ec:	d1fb      	bne.n	80081e6 <strlen+0x2>
 80081ee:	1a18      	subs	r0, r3, r0
 80081f0:	3801      	subs	r0, #1
 80081f2:	4770      	bx	lr
	...

08008200 <memchr>:
 8008200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008204:	2a10      	cmp	r2, #16
 8008206:	db2b      	blt.n	8008260 <memchr+0x60>
 8008208:	f010 0f07 	tst.w	r0, #7
 800820c:	d008      	beq.n	8008220 <memchr+0x20>
 800820e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008212:	3a01      	subs	r2, #1
 8008214:	428b      	cmp	r3, r1
 8008216:	d02d      	beq.n	8008274 <memchr+0x74>
 8008218:	f010 0f07 	tst.w	r0, #7
 800821c:	b342      	cbz	r2, 8008270 <memchr+0x70>
 800821e:	d1f6      	bne.n	800820e <memchr+0xe>
 8008220:	b4f0      	push	{r4, r5, r6, r7}
 8008222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800822a:	f022 0407 	bic.w	r4, r2, #7
 800822e:	f07f 0700 	mvns.w	r7, #0
 8008232:	2300      	movs	r3, #0
 8008234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008238:	3c08      	subs	r4, #8
 800823a:	ea85 0501 	eor.w	r5, r5, r1
 800823e:	ea86 0601 	eor.w	r6, r6, r1
 8008242:	fa85 f547 	uadd8	r5, r5, r7
 8008246:	faa3 f587 	sel	r5, r3, r7
 800824a:	fa86 f647 	uadd8	r6, r6, r7
 800824e:	faa5 f687 	sel	r6, r5, r7
 8008252:	b98e      	cbnz	r6, 8008278 <memchr+0x78>
 8008254:	d1ee      	bne.n	8008234 <memchr+0x34>
 8008256:	bcf0      	pop	{r4, r5, r6, r7}
 8008258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800825c:	f002 0207 	and.w	r2, r2, #7
 8008260:	b132      	cbz	r2, 8008270 <memchr+0x70>
 8008262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008266:	3a01      	subs	r2, #1
 8008268:	ea83 0301 	eor.w	r3, r3, r1
 800826c:	b113      	cbz	r3, 8008274 <memchr+0x74>
 800826e:	d1f8      	bne.n	8008262 <memchr+0x62>
 8008270:	2000      	movs	r0, #0
 8008272:	4770      	bx	lr
 8008274:	3801      	subs	r0, #1
 8008276:	4770      	bx	lr
 8008278:	2d00      	cmp	r5, #0
 800827a:	bf06      	itte	eq
 800827c:	4635      	moveq	r5, r6
 800827e:	3803      	subeq	r0, #3
 8008280:	3807      	subne	r0, #7
 8008282:	f015 0f01 	tst.w	r5, #1
 8008286:	d107      	bne.n	8008298 <memchr+0x98>
 8008288:	3001      	adds	r0, #1
 800828a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800828e:	bf02      	ittt	eq
 8008290:	3001      	addeq	r0, #1
 8008292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8008296:	3001      	addeq	r0, #1
 8008298:	bcf0      	pop	{r4, r5, r6, r7}
 800829a:	3801      	subs	r0, #1
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop

080082a0 <__aeabi_ldivmod>:
 80082a0:	b97b      	cbnz	r3, 80082c2 <__aeabi_ldivmod+0x22>
 80082a2:	b972      	cbnz	r2, 80082c2 <__aeabi_ldivmod+0x22>
 80082a4:	2900      	cmp	r1, #0
 80082a6:	bfbe      	ittt	lt
 80082a8:	2000      	movlt	r0, #0
 80082aa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80082ae:	e006      	blt.n	80082be <__aeabi_ldivmod+0x1e>
 80082b0:	bf08      	it	eq
 80082b2:	2800      	cmpeq	r0, #0
 80082b4:	bf1c      	itt	ne
 80082b6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80082ba:	f04f 30ff 	movne.w	r0, #4294967295
 80082be:	f000 b9d3 	b.w	8008668 <__aeabi_idiv0>
 80082c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80082c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082ca:	2900      	cmp	r1, #0
 80082cc:	db09      	blt.n	80082e2 <__aeabi_ldivmod+0x42>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	db1a      	blt.n	8008308 <__aeabi_ldivmod+0x68>
 80082d2:	f000 f84d 	bl	8008370 <__udivmoddi4>
 80082d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082de:	b004      	add	sp, #16
 80082e0:	4770      	bx	lr
 80082e2:	4240      	negs	r0, r0
 80082e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	db1b      	blt.n	8008324 <__aeabi_ldivmod+0x84>
 80082ec:	f000 f840 	bl	8008370 <__udivmoddi4>
 80082f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082f8:	b004      	add	sp, #16
 80082fa:	4240      	negs	r0, r0
 80082fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008300:	4252      	negs	r2, r2
 8008302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008306:	4770      	bx	lr
 8008308:	4252      	negs	r2, r2
 800830a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800830e:	f000 f82f 	bl	8008370 <__udivmoddi4>
 8008312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800831a:	b004      	add	sp, #16
 800831c:	4240      	negs	r0, r0
 800831e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008322:	4770      	bx	lr
 8008324:	4252      	negs	r2, r2
 8008326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800832a:	f000 f821 	bl	8008370 <__udivmoddi4>
 800832e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008336:	b004      	add	sp, #16
 8008338:	4252      	negs	r2, r2
 800833a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800833e:	4770      	bx	lr

08008340 <__aeabi_uldivmod>:
 8008340:	b953      	cbnz	r3, 8008358 <__aeabi_uldivmod+0x18>
 8008342:	b94a      	cbnz	r2, 8008358 <__aeabi_uldivmod+0x18>
 8008344:	2900      	cmp	r1, #0
 8008346:	bf08      	it	eq
 8008348:	2800      	cmpeq	r0, #0
 800834a:	bf1c      	itt	ne
 800834c:	f04f 31ff 	movne.w	r1, #4294967295
 8008350:	f04f 30ff 	movne.w	r0, #4294967295
 8008354:	f000 b988 	b.w	8008668 <__aeabi_idiv0>
 8008358:	f1ad 0c08 	sub.w	ip, sp, #8
 800835c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008360:	f000 f806 	bl	8008370 <__udivmoddi4>
 8008364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800836c:	b004      	add	sp, #16
 800836e:	4770      	bx	lr

08008370 <__udivmoddi4>:
 8008370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008374:	9d08      	ldr	r5, [sp, #32]
 8008376:	468e      	mov	lr, r1
 8008378:	4604      	mov	r4, r0
 800837a:	4688      	mov	r8, r1
 800837c:	2b00      	cmp	r3, #0
 800837e:	d14a      	bne.n	8008416 <__udivmoddi4+0xa6>
 8008380:	428a      	cmp	r2, r1
 8008382:	4617      	mov	r7, r2
 8008384:	d962      	bls.n	800844c <__udivmoddi4+0xdc>
 8008386:	fab2 f682 	clz	r6, r2
 800838a:	b14e      	cbz	r6, 80083a0 <__udivmoddi4+0x30>
 800838c:	f1c6 0320 	rsb	r3, r6, #32
 8008390:	fa01 f806 	lsl.w	r8, r1, r6
 8008394:	fa20 f303 	lsr.w	r3, r0, r3
 8008398:	40b7      	lsls	r7, r6
 800839a:	ea43 0808 	orr.w	r8, r3, r8
 800839e:	40b4      	lsls	r4, r6
 80083a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80083a4:	fa1f fc87 	uxth.w	ip, r7
 80083a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80083ac:	0c23      	lsrs	r3, r4, #16
 80083ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80083b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80083b6:	fb01 f20c 	mul.w	r2, r1, ip
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d909      	bls.n	80083d2 <__udivmoddi4+0x62>
 80083be:	18fb      	adds	r3, r7, r3
 80083c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80083c4:	f080 80ea 	bcs.w	800859c <__udivmoddi4+0x22c>
 80083c8:	429a      	cmp	r2, r3
 80083ca:	f240 80e7 	bls.w	800859c <__udivmoddi4+0x22c>
 80083ce:	3902      	subs	r1, #2
 80083d0:	443b      	add	r3, r7
 80083d2:	1a9a      	subs	r2, r3, r2
 80083d4:	b2a3      	uxth	r3, r4
 80083d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80083da:	fb0e 2210 	mls	r2, lr, r0, r2
 80083de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80083e6:	459c      	cmp	ip, r3
 80083e8:	d909      	bls.n	80083fe <__udivmoddi4+0x8e>
 80083ea:	18fb      	adds	r3, r7, r3
 80083ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80083f0:	f080 80d6 	bcs.w	80085a0 <__udivmoddi4+0x230>
 80083f4:	459c      	cmp	ip, r3
 80083f6:	f240 80d3 	bls.w	80085a0 <__udivmoddi4+0x230>
 80083fa:	443b      	add	r3, r7
 80083fc:	3802      	subs	r0, #2
 80083fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008402:	eba3 030c 	sub.w	r3, r3, ip
 8008406:	2100      	movs	r1, #0
 8008408:	b11d      	cbz	r5, 8008412 <__udivmoddi4+0xa2>
 800840a:	40f3      	lsrs	r3, r6
 800840c:	2200      	movs	r2, #0
 800840e:	e9c5 3200 	strd	r3, r2, [r5]
 8008412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008416:	428b      	cmp	r3, r1
 8008418:	d905      	bls.n	8008426 <__udivmoddi4+0xb6>
 800841a:	b10d      	cbz	r5, 8008420 <__udivmoddi4+0xb0>
 800841c:	e9c5 0100 	strd	r0, r1, [r5]
 8008420:	2100      	movs	r1, #0
 8008422:	4608      	mov	r0, r1
 8008424:	e7f5      	b.n	8008412 <__udivmoddi4+0xa2>
 8008426:	fab3 f183 	clz	r1, r3
 800842a:	2900      	cmp	r1, #0
 800842c:	d146      	bne.n	80084bc <__udivmoddi4+0x14c>
 800842e:	4573      	cmp	r3, lr
 8008430:	d302      	bcc.n	8008438 <__udivmoddi4+0xc8>
 8008432:	4282      	cmp	r2, r0
 8008434:	f200 8105 	bhi.w	8008642 <__udivmoddi4+0x2d2>
 8008438:	1a84      	subs	r4, r0, r2
 800843a:	eb6e 0203 	sbc.w	r2, lr, r3
 800843e:	2001      	movs	r0, #1
 8008440:	4690      	mov	r8, r2
 8008442:	2d00      	cmp	r5, #0
 8008444:	d0e5      	beq.n	8008412 <__udivmoddi4+0xa2>
 8008446:	e9c5 4800 	strd	r4, r8, [r5]
 800844a:	e7e2      	b.n	8008412 <__udivmoddi4+0xa2>
 800844c:	2a00      	cmp	r2, #0
 800844e:	f000 8090 	beq.w	8008572 <__udivmoddi4+0x202>
 8008452:	fab2 f682 	clz	r6, r2
 8008456:	2e00      	cmp	r6, #0
 8008458:	f040 80a4 	bne.w	80085a4 <__udivmoddi4+0x234>
 800845c:	1a8a      	subs	r2, r1, r2
 800845e:	0c03      	lsrs	r3, r0, #16
 8008460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008464:	b280      	uxth	r0, r0
 8008466:	b2bc      	uxth	r4, r7
 8008468:	2101      	movs	r1, #1
 800846a:	fbb2 fcfe 	udiv	ip, r2, lr
 800846e:	fb0e 221c 	mls	r2, lr, ip, r2
 8008472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008476:	fb04 f20c 	mul.w	r2, r4, ip
 800847a:	429a      	cmp	r2, r3
 800847c:	d907      	bls.n	800848e <__udivmoddi4+0x11e>
 800847e:	18fb      	adds	r3, r7, r3
 8008480:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008484:	d202      	bcs.n	800848c <__udivmoddi4+0x11c>
 8008486:	429a      	cmp	r2, r3
 8008488:	f200 80e0 	bhi.w	800864c <__udivmoddi4+0x2dc>
 800848c:	46c4      	mov	ip, r8
 800848e:	1a9b      	subs	r3, r3, r2
 8008490:	fbb3 f2fe 	udiv	r2, r3, lr
 8008494:	fb0e 3312 	mls	r3, lr, r2, r3
 8008498:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800849c:	fb02 f404 	mul.w	r4, r2, r4
 80084a0:	429c      	cmp	r4, r3
 80084a2:	d907      	bls.n	80084b4 <__udivmoddi4+0x144>
 80084a4:	18fb      	adds	r3, r7, r3
 80084a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80084aa:	d202      	bcs.n	80084b2 <__udivmoddi4+0x142>
 80084ac:	429c      	cmp	r4, r3
 80084ae:	f200 80ca 	bhi.w	8008646 <__udivmoddi4+0x2d6>
 80084b2:	4602      	mov	r2, r0
 80084b4:	1b1b      	subs	r3, r3, r4
 80084b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80084ba:	e7a5      	b.n	8008408 <__udivmoddi4+0x98>
 80084bc:	f1c1 0620 	rsb	r6, r1, #32
 80084c0:	408b      	lsls	r3, r1
 80084c2:	fa22 f706 	lsr.w	r7, r2, r6
 80084c6:	431f      	orrs	r7, r3
 80084c8:	fa0e f401 	lsl.w	r4, lr, r1
 80084cc:	fa20 f306 	lsr.w	r3, r0, r6
 80084d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80084d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80084d8:	4323      	orrs	r3, r4
 80084da:	fa00 f801 	lsl.w	r8, r0, r1
 80084de:	fa1f fc87 	uxth.w	ip, r7
 80084e2:	fbbe f0f9 	udiv	r0, lr, r9
 80084e6:	0c1c      	lsrs	r4, r3, #16
 80084e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80084ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80084f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80084f4:	45a6      	cmp	lr, r4
 80084f6:	fa02 f201 	lsl.w	r2, r2, r1
 80084fa:	d909      	bls.n	8008510 <__udivmoddi4+0x1a0>
 80084fc:	193c      	adds	r4, r7, r4
 80084fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8008502:	f080 809c 	bcs.w	800863e <__udivmoddi4+0x2ce>
 8008506:	45a6      	cmp	lr, r4
 8008508:	f240 8099 	bls.w	800863e <__udivmoddi4+0x2ce>
 800850c:	3802      	subs	r0, #2
 800850e:	443c      	add	r4, r7
 8008510:	eba4 040e 	sub.w	r4, r4, lr
 8008514:	fa1f fe83 	uxth.w	lr, r3
 8008518:	fbb4 f3f9 	udiv	r3, r4, r9
 800851c:	fb09 4413 	mls	r4, r9, r3, r4
 8008520:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8008524:	fb03 fc0c 	mul.w	ip, r3, ip
 8008528:	45a4      	cmp	ip, r4
 800852a:	d908      	bls.n	800853e <__udivmoddi4+0x1ce>
 800852c:	193c      	adds	r4, r7, r4
 800852e:	f103 3eff 	add.w	lr, r3, #4294967295
 8008532:	f080 8082 	bcs.w	800863a <__udivmoddi4+0x2ca>
 8008536:	45a4      	cmp	ip, r4
 8008538:	d97f      	bls.n	800863a <__udivmoddi4+0x2ca>
 800853a:	3b02      	subs	r3, #2
 800853c:	443c      	add	r4, r7
 800853e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008542:	eba4 040c 	sub.w	r4, r4, ip
 8008546:	fba0 ec02 	umull	lr, ip, r0, r2
 800854a:	4564      	cmp	r4, ip
 800854c:	4673      	mov	r3, lr
 800854e:	46e1      	mov	r9, ip
 8008550:	d362      	bcc.n	8008618 <__udivmoddi4+0x2a8>
 8008552:	d05f      	beq.n	8008614 <__udivmoddi4+0x2a4>
 8008554:	b15d      	cbz	r5, 800856e <__udivmoddi4+0x1fe>
 8008556:	ebb8 0203 	subs.w	r2, r8, r3
 800855a:	eb64 0409 	sbc.w	r4, r4, r9
 800855e:	fa04 f606 	lsl.w	r6, r4, r6
 8008562:	fa22 f301 	lsr.w	r3, r2, r1
 8008566:	431e      	orrs	r6, r3
 8008568:	40cc      	lsrs	r4, r1
 800856a:	e9c5 6400 	strd	r6, r4, [r5]
 800856e:	2100      	movs	r1, #0
 8008570:	e74f      	b.n	8008412 <__udivmoddi4+0xa2>
 8008572:	fbb1 fcf2 	udiv	ip, r1, r2
 8008576:	0c01      	lsrs	r1, r0, #16
 8008578:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800857c:	b280      	uxth	r0, r0
 800857e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8008582:	463b      	mov	r3, r7
 8008584:	4638      	mov	r0, r7
 8008586:	463c      	mov	r4, r7
 8008588:	46b8      	mov	r8, r7
 800858a:	46be      	mov	lr, r7
 800858c:	2620      	movs	r6, #32
 800858e:	fbb1 f1f7 	udiv	r1, r1, r7
 8008592:	eba2 0208 	sub.w	r2, r2, r8
 8008596:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800859a:	e766      	b.n	800846a <__udivmoddi4+0xfa>
 800859c:	4601      	mov	r1, r0
 800859e:	e718      	b.n	80083d2 <__udivmoddi4+0x62>
 80085a0:	4610      	mov	r0, r2
 80085a2:	e72c      	b.n	80083fe <__udivmoddi4+0x8e>
 80085a4:	f1c6 0220 	rsb	r2, r6, #32
 80085a8:	fa2e f302 	lsr.w	r3, lr, r2
 80085ac:	40b7      	lsls	r7, r6
 80085ae:	40b1      	lsls	r1, r6
 80085b0:	fa20 f202 	lsr.w	r2, r0, r2
 80085b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80085b8:	430a      	orrs	r2, r1
 80085ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80085be:	b2bc      	uxth	r4, r7
 80085c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80085c4:	0c11      	lsrs	r1, r2, #16
 80085c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80085ca:	fb08 f904 	mul.w	r9, r8, r4
 80085ce:	40b0      	lsls	r0, r6
 80085d0:	4589      	cmp	r9, r1
 80085d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80085d6:	b280      	uxth	r0, r0
 80085d8:	d93e      	bls.n	8008658 <__udivmoddi4+0x2e8>
 80085da:	1879      	adds	r1, r7, r1
 80085dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80085e0:	d201      	bcs.n	80085e6 <__udivmoddi4+0x276>
 80085e2:	4589      	cmp	r9, r1
 80085e4:	d81f      	bhi.n	8008626 <__udivmoddi4+0x2b6>
 80085e6:	eba1 0109 	sub.w	r1, r1, r9
 80085ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80085ee:	fb09 f804 	mul.w	r8, r9, r4
 80085f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80085f6:	b292      	uxth	r2, r2
 80085f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80085fc:	4542      	cmp	r2, r8
 80085fe:	d229      	bcs.n	8008654 <__udivmoddi4+0x2e4>
 8008600:	18ba      	adds	r2, r7, r2
 8008602:	f109 31ff 	add.w	r1, r9, #4294967295
 8008606:	d2c4      	bcs.n	8008592 <__udivmoddi4+0x222>
 8008608:	4542      	cmp	r2, r8
 800860a:	d2c2      	bcs.n	8008592 <__udivmoddi4+0x222>
 800860c:	f1a9 0102 	sub.w	r1, r9, #2
 8008610:	443a      	add	r2, r7
 8008612:	e7be      	b.n	8008592 <__udivmoddi4+0x222>
 8008614:	45f0      	cmp	r8, lr
 8008616:	d29d      	bcs.n	8008554 <__udivmoddi4+0x1e4>
 8008618:	ebbe 0302 	subs.w	r3, lr, r2
 800861c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8008620:	3801      	subs	r0, #1
 8008622:	46e1      	mov	r9, ip
 8008624:	e796      	b.n	8008554 <__udivmoddi4+0x1e4>
 8008626:	eba7 0909 	sub.w	r9, r7, r9
 800862a:	4449      	add	r1, r9
 800862c:	f1a8 0c02 	sub.w	ip, r8, #2
 8008630:	fbb1 f9fe 	udiv	r9, r1, lr
 8008634:	fb09 f804 	mul.w	r8, r9, r4
 8008638:	e7db      	b.n	80085f2 <__udivmoddi4+0x282>
 800863a:	4673      	mov	r3, lr
 800863c:	e77f      	b.n	800853e <__udivmoddi4+0x1ce>
 800863e:	4650      	mov	r0, sl
 8008640:	e766      	b.n	8008510 <__udivmoddi4+0x1a0>
 8008642:	4608      	mov	r0, r1
 8008644:	e6fd      	b.n	8008442 <__udivmoddi4+0xd2>
 8008646:	443b      	add	r3, r7
 8008648:	3a02      	subs	r2, #2
 800864a:	e733      	b.n	80084b4 <__udivmoddi4+0x144>
 800864c:	f1ac 0c02 	sub.w	ip, ip, #2
 8008650:	443b      	add	r3, r7
 8008652:	e71c      	b.n	800848e <__udivmoddi4+0x11e>
 8008654:	4649      	mov	r1, r9
 8008656:	e79c      	b.n	8008592 <__udivmoddi4+0x222>
 8008658:	eba1 0109 	sub.w	r1, r1, r9
 800865c:	46c4      	mov	ip, r8
 800865e:	fbb1 f9fe 	udiv	r9, r1, lr
 8008662:	fb09 f804 	mul.w	r8, r9, r4
 8008666:	e7c4      	b.n	80085f2 <__udivmoddi4+0x282>

08008668 <__aeabi_idiv0>:
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop

0800866c <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 800866c:	b480      	push	{r7}
 800866e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8008670:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800867c:	bf0c      	ite	eq
 800867e:	2301      	moveq	r3, #1
 8008680:	2300      	movne	r3, #0
 8008682:	b2db      	uxtb	r3, r3
}
 8008684:	4618      	mov	r0, r3
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	e000e010 	.word	0xe000e010

08008694 <delay_us>:
#include "delay.h"
#include "stm32f4xx_ll_utils.h"
#include "stm32f4xx_ll_cortex.h"

void delay_us(uint8_t micro_seconds)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	71fb      	strb	r3, [r7, #7]
    uint32_t ticks = micro_seconds * (SystemCoreClock / 1000000);
 800869e:	79fb      	ldrb	r3, [r7, #7]
 80086a0:	4a0c      	ldr	r2, [pc, #48]	@ (80086d4 <delay_us+0x40>)
 80086a2:	6812      	ldr	r2, [r2, #0]
 80086a4:	490c      	ldr	r1, [pc, #48]	@ (80086d8 <delay_us+0x44>)
 80086a6:	fba1 1202 	umull	r1, r2, r1, r2
 80086aa:	0c92      	lsrs	r2, r2, #18
 80086ac:	fb02 f303 	mul.w	r3, r2, r3
 80086b0:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 80086b2:	e007      	b.n	80086c4 <delay_us+0x30>
    {
        if (LL_SYSTICK_IsActiveCounterFlag())
 80086b4:	f7ff ffda 	bl	800866c <LL_SYSTICK_IsActiveCounterFlag>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <delay_us+0x30>
        {
            ticks--;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1f4      	bne.n	80086b4 <delay_us+0x20>
        }
    }
}
 80086ca:	bf00      	nop
 80086cc:	bf00      	nop
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	20002330 	.word	0x20002330
 80086d8:	431bde83 	.word	0x431bde83

080086dc <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f043 0201 	orr.w	r2, r3, #1
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	601a      	str	r2, [r3, #0]
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f023 0201 	bic.w	r2, r3, #1
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	601a      	str	r2, [r3, #0]
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	601a      	str	r2, [r3, #0]
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	601a      	str	r2, [r3, #0]
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	f023 0201 	bic.w	r2, r3, #1
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	60da      	str	r2, [r3, #12]
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <LL_I2C_EnableIT_EVT>:
  * @rmtoll CR2          ITEVTEN       LL_I2C_EnableIT_EVT
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_EVT(I2C_TypeDef *I2Cx)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	605a      	str	r2, [r3, #4]
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <LL_I2C_EnableIT_BUF>:
  * @rmtoll CR2          ITBUFEN       LL_I2C_EnableIT_BUF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_BUF(I2C_TypeDef *I2Cx)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	605a      	str	r2, [r3, #4]
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <LL_I2C_DisableIT_BUF>:
  * @rmtoll CR2          ITBUFEN       LL_I2C_DisableIT_BUF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_BUF(I2C_TypeDef *I2Cx)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	605a      	str	r2, [r3, #4]
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <LL_I2C_EnableIT_ERR>:
  * @rmtoll CR2          ITERREN       LL_I2C_EnableIT_ERR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_ERR(I2C_TypeDef *I2Cx)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	605a      	str	r2, [r3, #4]
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800880c:	2b80      	cmp	r3, #128	@ 0x80
 800880e:	bf0c      	ite	eq
 8008810:	2301      	moveq	r3, #1
 8008812:	2300      	movne	r3, #0
 8008814:	b2db      	uxtb	r3, r3
}
 8008816:	4618      	mov	r0, r3
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8008822:	b480      	push	{r7}
 8008824:	b083      	sub	sp, #12
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008832:	2b40      	cmp	r3, #64	@ 0x40
 8008834:	bf0c      	ite	eq
 8008836:	2301      	moveq	r3, #1
 8008838:	2300      	movne	r3, #0
 800883a:	b2db      	uxtb	r3, r3
}
 800883c:	4618      	mov	r0, r3
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	f003 0302 	and.w	r3, r3, #2
 8008858:	2b02      	cmp	r3, #2
 800885a:	bf0c      	ite	eq
 800885c:	2301      	moveq	r3, #1
 800885e:	2300      	movne	r3, #0
 8008860:	b2db      	uxtb	r3, r3
}
 8008862:	4618      	mov	r0, r3
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <LL_I2C_IsActiveFlag_AF>:
  * @rmtoll SR1          AF            LL_I2C_IsActiveFlag_AF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_AF(I2C_TypeDef *I2Cx)
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_AF) == (I2C_SR1_AF));
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800887e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008882:	bf0c      	ite	eq
 8008884:	2301      	moveq	r3, #1
 8008886:	2300      	movne	r3, #0
 8008888:	b2db      	uxtb	r3, r3
}
 800888a:	4618      	mov	r0, r3
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll SR1          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_STOPF) == (I2C_SR1_STOPF));
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	f003 0310 	and.w	r3, r3, #16
 80088a6:	2b10      	cmp	r3, #16
 80088a8:	bf0c      	ite	eq
 80088aa:	2301      	moveq	r3, #1
 80088ac:	2300      	movne	r3, #0
 80088ae:	b2db      	uxtb	r3, r3
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <LL_I2C_IsActiveFlag_BERR>:
  * @rmtoll SR1          BERR          LL_I2C_IsActiveFlag_BERR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BERR(I2C_TypeDef *I2Cx)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BERR) == (I2C_SR1_BERR));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088d0:	bf0c      	ite	eq
 80088d2:	2301      	moveq	r3, #1
 80088d4:	2300      	movne	r3, #0
 80088d6:	b2db      	uxtb	r3, r3
}
 80088d8:	4618      	mov	r0, r3
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <LL_I2C_IsActiveFlag_ARLO>:
  * @rmtoll SR1          ARLO          LL_I2C_IsActiveFlag_ARLO
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ARLO(I2C_TypeDef *I2Cx)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ARLO) == (I2C_SR1_ARLO));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088f8:	bf0c      	ite	eq
 80088fa:	2301      	moveq	r3, #1
 80088fc:	2300      	movne	r3, #0
 80088fe:	b2db      	uxtb	r3, r3
}
 8008900:	4618      	mov	r0, r3
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <LL_I2C_IsActiveFlag_OVR>:
  * @rmtoll SR1          OVR           LL_I2C_IsActiveFlag_OVR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_OVR(I2C_TypeDef *I2Cx)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_OVR) == (I2C_SR1_OVR));
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800891c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008920:	bf0c      	ite	eq
 8008922:	2301      	moveq	r3, #1
 8008924:	2300      	movne	r3, #0
 8008926:	b2db      	uxtb	r3, r3
}
 8008928:	4618      	mov	r0, r3
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8008942:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800894a:	68fb      	ldr	r3, [r7, #12]
}
 800894c:	bf00      	nop
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <LL_I2C_ClearFlag_AF>:
  * @rmtoll SR1          AF            LL_I2C_ClearFlag_AF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_AF(I2C_TypeDef *I2Cx)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_AF);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	615a      	str	r2, [r3, #20]
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <LL_I2C_ClearFlag_STOP>:
  *         CR1          PE            LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8008986:	68fb      	ldr	r3, [r7, #12]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f043 0201 	orr.w	r2, r3, #1
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	601a      	str	r2, [r3, #0]
}
 8008994:	bf00      	nop
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <LL_I2C_ClearFlag_BERR>:
  * @rmtoll SR1          BERR          LL_I2C_ClearFlag_BERR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_BERR(I2C_TypeDef *I2Cx)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_BERR);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	615a      	str	r2, [r3, #20]
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <LL_I2C_ClearFlag_ARLO>:
  * @rmtoll SR1          ARLO          LL_I2C_ClearFlag_ARLO
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ARLO(I2C_TypeDef *I2Cx)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_ARLO);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	615a      	str	r2, [r3, #20]
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <LL_I2C_ClearFlag_OVR>:
  * @rmtoll SR1          OVR           LL_I2C_ClearFlag_OVR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_OVR(I2C_TypeDef *I2Cx)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_OVR);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	615a      	str	r2, [r3, #20]
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <LL_I2C_GetTransferDirection>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_I2C_DIRECTION_WRITE
  *         @arg @ref LL_I2C_DIRECTION_READ
  */
__STATIC_INLINE uint32_t LL_I2C_GetTransferDirection(I2C_TypeDef *I2Cx)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I2Cx->SR2, I2C_SR2_TRA));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	f003 0304 	and.w	r3, r3, #4
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	b2db      	uxtb	r3, r3
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008a4a:	78fb      	ldrb	r3, [r7, #3]
 8008a4c:	431a      	orrs	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	611a      	str	r2, [r3, #16]
}
 8008a52:	bf00      	nop
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
	...

08008a60 <I2C_ReInit>:

    while ((SysTick->VAL - start_tick) < ticks);
}

void I2C_ReInit(void)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
    LL_I2C_Disable(I2C_slave_obj.I2Cx);
 8008a66:	4b24      	ldr	r3, [pc, #144]	@ (8008af8 <I2C_ReInit+0x98>)
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7ff fe46 	bl	80086fc <LL_I2C_Disable>
    LL_I2C_DeInit(I2C_slave_obj.I2Cx);
 8008a70:	4b21      	ldr	r3, [pc, #132]	@ (8008af8 <I2C_ReInit+0x98>)
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f008 fdf5 	bl	8011664 <LL_I2C_DeInit>

    LL_I2C_EnableClockStretching(I2C_slave_obj.I2Cx);
 8008a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8008af8 <I2C_ReInit+0x98>)
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7ff fe4c 	bl	800871c <LL_I2C_EnableClockStretching>
    LL_I2C_DisableGeneralCall(I2C_slave_obj.I2Cx);
 8008a84:	4b1c      	ldr	r3, [pc, #112]	@ (8008af8 <I2C_ReInit+0x98>)
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7ff fe57 	bl	800873c <LL_I2C_DisableGeneralCall>
    LL_I2C_DisableOwnAddress2(I2C_slave_obj.I2Cx);
 8008a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8008af8 <I2C_ReInit+0x98>)
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7ff fe62 	bl	800875c <LL_I2C_DisableOwnAddress2>

    LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8008a98:	463b      	mov	r3, r7
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	605a      	str	r2, [r3, #4]
 8008aa0:	609a      	str	r2, [r3, #8]
 8008aa2:	60da      	str	r2, [r3, #12]
 8008aa4:	611a      	str	r2, [r3, #16]
 8008aa6:	615a      	str	r2, [r3, #20]
    I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	603b      	str	r3, [r7, #0]
    I2C_InitStruct.ClockSpeed = 100000;
 8008aac:	4b13      	ldr	r3, [pc, #76]	@ (8008afc <I2C_ReInit+0x9c>)
 8008aae:	607b      	str	r3, [r7, #4]
    I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60bb      	str	r3, [r7, #8]
    I2C_InitStruct.OwnAddress1 = 36;  // 0x12
 8008ab4:	2324      	movs	r3, #36	@ 0x24
 8008ab6:	60fb      	str	r3, [r7, #12]
    I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8008ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008abc:	613b      	str	r3, [r7, #16]
    I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8008abe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008ac2:	617b      	str	r3, [r7, #20]
    LL_I2C_Init(I2C_slave_obj.I2Cx, &I2C_InitStruct);
 8008ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8008af8 <I2C_ReInit+0x98>)
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	463a      	mov	r2, r7
 8008aca:	4611      	mov	r1, r2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f008 fe03 	bl	80116d8 <LL_I2C_Init>

    LL_I2C_EnableIT_EVT(I2C_slave_obj.I2Cx);
 8008ad2:	4b09      	ldr	r3, [pc, #36]	@ (8008af8 <I2C_ReInit+0x98>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff fe50 	bl	800877c <LL_I2C_EnableIT_EVT>
    LL_I2C_EnableIT_ERR(I2C_slave_obj.I2Cx);
 8008adc:	4b06      	ldr	r3, [pc, #24]	@ (8008af8 <I2C_ReInit+0x98>)
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff fe7b 	bl	80087dc <LL_I2C_EnableIT_ERR>
    LL_I2C_Enable(I2C_slave_obj.I2Cx);
 8008ae6:	4b04      	ldr	r3, [pc, #16]	@ (8008af8 <I2C_ReInit+0x98>)
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff fdf6 	bl	80086dc <LL_I2C_Enable>
}
 8008af0:	bf00      	nop
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	20002528 	.word	0x20002528
 8008afc:	000186a0 	.word	0x000186a0

08008b00 <i2c_slave_clear>:

        rx_busy_counter = 0;
    }
}

void i2c_slave_clear(void) {
 8008b00:	b480      	push	{r7}
 8008b02:	af00      	add	r7, sp, #0
    I2C_slave_obj.reg_address = 0;
 8008b04:	4b0a      	ldr	r3, [pc, #40]	@ (8008b30 <i2c_slave_clear+0x30>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	715a      	strb	r2, [r3, #5]
    I2C_slave_obj.curr_idx = NONE;
 8008b0a:	4b09      	ldr	r3, [pc, #36]	@ (8008b30 <i2c_slave_clear+0x30>)
 8008b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b10:	601a      	str	r2, [r3, #0]
    I2C_slave_obj.reg_addr_rcvd = 0;
 8008b12:	4b07      	ldr	r3, [pc, #28]	@ (8008b30 <i2c_slave_clear+0x30>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	711a      	strb	r2, [r3, #4]
    I2C_slave_obj.ready_to_answer = 0;
 8008b18:	4b05      	ldr	r3, [pc, #20]	@ (8008b30 <i2c_slave_clear+0x30>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	719a      	strb	r2, [r3, #6]
    I2C_slave_obj.ready_to_write = 0;
 8008b1e:	4b04      	ldr	r3, [pc, #16]	@ (8008b30 <i2c_slave_clear+0x30>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	71da      	strb	r2, [r3, #7]
}
 8008b24:	bf00      	nop
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	20002528 	.word	0x20002528

08008b34 <i2c_slave_init>:

int i2c_slave_init(I2C_TypeDef *I2Cx) {
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
    I2C_slave_obj.I2Cx = I2Cx;
 8008b3c:	4a09      	ldr	r2, [pc, #36]	@ (8008b64 <i2c_slave_init+0x30>)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6093      	str	r3, [r2, #8]
    I2C_Slave_Status = I2C_Status_OK;
 8008b42:	4b09      	ldr	r3, [pc, #36]	@ (8008b68 <i2c_slave_init+0x34>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	701a      	strb	r2, [r3, #0]
    i2c_slave_clear();
 8008b48:	f7ff ffda 	bl	8008b00 <i2c_slave_clear>
    memset(external_memory, 0, sizeof(external_memory));
 8008b4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b50:	2100      	movs	r1, #0
 8008b52:	4806      	ldr	r0, [pc, #24]	@ (8008b6c <i2c_slave_init+0x38>)
 8008b54:	f00a f83c 	bl	8012bd0 <memset>

    return 0;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	20002528 	.word	0x20002528
 8008b68:	20002534 	.word	0x20002534
 8008b6c:	20002428 	.word	0x20002428

08008b70 <I2C_event_IRQ>:

//static uint8_t data_index = 0;

void I2C_event_IRQ(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b096      	sub	sp, #88	@ 0x58
 8008b74:	af00      	add	r7, sp, #0
	I2C_Slave_Status = I2C_Status_BUSY;
 8008b76:	4b78      	ldr	r3, [pc, #480]	@ (8008d58 <I2C_event_IRQ+0x1e8>)
 8008b78:	2201      	movs	r2, #1
 8008b7a:	701a      	strb	r2, [r3, #0]
    if (LL_I2C_IsActiveFlag_ADDR(I2C_slave_obj.I2Cx))
 8008b7c:	4b77      	ldr	r3, [pc, #476]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff fe61 	bl	8008848 <LL_I2C_IsActiveFlag_ADDR>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d01a      	beq.n	8008bc2 <I2C_event_IRQ+0x52>
    {
        LL_I2C_ClearFlag_ADDR(I2C_slave_obj.I2Cx);
 8008b8c:	4b73      	ldr	r3, [pc, #460]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff fecf 	bl	8008934 <LL_I2C_ClearFlag_ADDR>
        if (LL_I2C_GetTransferDirection(I2C_slave_obj.I2Cx) == LL_I2C_DIRECTION_WRITE)
 8008b96:	4b71      	ldr	r3, [pc, #452]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff ff30 	bl	8008a00 <LL_I2C_GetTransferDirection>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b04      	cmp	r3, #4
 8008ba4:	d108      	bne.n	8008bb8 <I2C_event_IRQ+0x48>
        {
            I2C_slave_obj.reg_addr_rcvd = 0;
 8008ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	711a      	strb	r2, [r3, #4]
            LL_I2C_EnableIT_BUF(I2C_slave_obj.I2Cx);
 8008bac:	4b6b      	ldr	r3, [pc, #428]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7ff fdf3 	bl	800879c <LL_I2C_EnableIT_BUF>
 8008bb6:	e004      	b.n	8008bc2 <I2C_event_IRQ+0x52>
        else
        {
//            I2C_slave_obj.curr_idx = reg_get_index(I2C_slave_obj.reg_address);
//            data_index = 0;
//	          UART_SendStringRing(UART_CMDLINE, "FREAL\r\n");
            LL_I2C_EnableIT_BUF(I2C_slave_obj.I2Cx);
 8008bb8:	4b68      	ldr	r3, [pc, #416]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff fded 	bl	800879c <LL_I2C_EnableIT_BUF>
        }
    }

    // Data Register Empty (Trans)
    if (LL_I2C_IsActiveFlag_TXE(I2C_slave_obj.I2Cx))
 8008bc2:	4b66      	ldr	r3, [pc, #408]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff fe18 	bl	80087fc <LL_I2C_IsActiveFlag_TXE>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d052      	beq.n	8008c78 <I2C_event_IRQ+0x108>
    {
        char buffer[30];
        uint8_t data_to_send = 0x00;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        snprintf(buffer, sizeof(buffer), "\r\nI2C Before Index:[%d]\r\n", I2C_slave_obj.curr_idx);
 8008bd8:	4b60      	ldr	r3, [pc, #384]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8008be0:	4a5f      	ldr	r2, [pc, #380]	@ (8008d60 <I2C_event_IRQ+0x1f0>)
 8008be2:	211e      	movs	r1, #30
 8008be4:	f009 ffbe 	bl	8012b64 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8008be8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008bec:	4619      	mov	r1, r3
 8008bee:	485d      	ldr	r0, [pc, #372]	@ (8008d64 <I2C_event_IRQ+0x1f4>)
 8008bf0:	f000 fbd8 	bl	80093a4 <UART_SendStringRing>
		snprintf(buffer, sizeof(buffer), "\r\nI2C Index:[%d]\r\n", I2C_slave_obj.curr_idx);
 8008bf4:	4b59      	ldr	r3, [pc, #356]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8008bfc:	4a5a      	ldr	r2, [pc, #360]	@ (8008d68 <I2C_event_IRQ+0x1f8>)
 8008bfe:	211e      	movs	r1, #30
 8008c00:	f009 ffb0 	bl	8012b64 <sniprintf>
		UART_SendStringRing(UART_CMDLINE,buffer);
 8008c04:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4856      	ldr	r0, [pc, #344]	@ (8008d64 <I2C_event_IRQ+0x1f4>)
 8008c0c:	f000 fbca 	bl	80093a4 <UART_SendStringRing>
		data_to_send = g_registers[I2C_slave_obj.curr_idx].value;
 8008c10:	4b52      	ldr	r3, [pc, #328]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	4955      	ldr	r1, [pc, #340]	@ (8008d6c <I2C_event_IRQ+0x1fc>)
 8008c16:	4613      	mov	r3, r2
 8008c18:	005b      	lsls	r3, r3, #1
 8008c1a:	4413      	add	r3, r2
 8008c1c:	440b      	add	r3, r1
 8008c1e:	3302      	adds	r3, #2
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		snprintf(buffer, sizeof(buffer), "\r\nI2C GetDataIndex:[%d]\r\n", data_to_send);
 8008c26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c2a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8008c2e:	4a50      	ldr	r2, [pc, #320]	@ (8008d70 <I2C_event_IRQ+0x200>)
 8008c30:	211e      	movs	r1, #30
 8008c32:	f009 ff97 	bl	8012b64 <sniprintf>
		UART_SendStringRing(UART_CMDLINE,buffer);
 8008c36:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4849      	ldr	r0, [pc, #292]	@ (8008d64 <I2C_event_IRQ+0x1f4>)
 8008c3e:	f000 fbb1 	bl	80093a4 <UART_SendStringRing>
        snprintf(buffer, sizeof(buffer), "\r\nI2C Response:[%d]\r\n", data_to_send);
 8008c42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c46:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8008c4a:	4a4a      	ldr	r2, [pc, #296]	@ (8008d74 <I2C_event_IRQ+0x204>)
 8008c4c:	211e      	movs	r1, #30
 8008c4e:	f009 ff89 	bl	8012b64 <sniprintf>
        UART_SendStringRing(UART_CMDLINE,buffer);
 8008c52:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008c56:	4619      	mov	r1, r3
 8008c58:	4842      	ldr	r0, [pc, #264]	@ (8008d64 <I2C_event_IRQ+0x1f4>)
 8008c5a:	f000 fba3 	bl	80093a4 <UART_SendStringRing>
        LL_I2C_TransmitData8(I2C_slave_obj.I2Cx, data_to_send);
 8008c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008c66:	4611      	mov	r1, r2
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff fee4 	bl	8008a36 <LL_I2C_TransmitData8>
        LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8008c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7ff fda2 	bl	80087bc <LL_I2C_DisableIT_BUF>
    }
    // Data Register Not Empty (Recv)
    if (LL_I2C_IsActiveFlag_RXNE(I2C_slave_obj.I2Cx)) {
 8008c78:	4b38      	ldr	r3, [pc, #224]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7ff fdd0 	bl	8008822 <LL_I2C_IsActiveFlag_RXNE>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d04a      	beq.n	8008d1e <I2C_event_IRQ+0x1ae>
        uint8_t received = LL_I2C_ReceiveData8(I2C_slave_obj.I2Cx);
 8008c88:	4b34      	ldr	r3, [pc, #208]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7ff fec5 	bl	8008a1c <LL_I2C_ReceiveData8>
 8008c92:	4603      	mov	r3, r0
 8008c94:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        if (!I2C_slave_obj.reg_addr_rcvd)
 8008c98:	4b30      	ldr	r3, [pc, #192]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008c9a:	791b      	ldrb	r3, [r3, #4]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d11f      	bne.n	8008ce2 <I2C_event_IRQ+0x172>
        {
            I2C_slave_obj.reg_address = received;
 8008ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008ca4:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8008ca8:	7153      	strb	r3, [r2, #5]
            char buffer[50];
            snprintf(buffer, sizeof(buffer), "Address:[%d]\r\n", received);
 8008caa:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8008cae:	1d38      	adds	r0, r7, #4
 8008cb0:	4a31      	ldr	r2, [pc, #196]	@ (8008d78 <I2C_event_IRQ+0x208>)
 8008cb2:	2132      	movs	r1, #50	@ 0x32
 8008cb4:	f009 ff56 	bl	8012b64 <sniprintf>
            UART_SendStringRing(UART_CMDLINE, buffer);
 8008cb8:	1d3b      	adds	r3, r7, #4
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4829      	ldr	r0, [pc, #164]	@ (8008d64 <I2C_event_IRQ+0x1f4>)
 8008cbe:	f000 fb71 	bl	80093a4 <UART_SendStringRing>
            I2C_slave_obj.reg_addr_rcvd = 1;
 8008cc2:	4b26      	ldr	r3, [pc, #152]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	711a      	strb	r2, [r3, #4]
            snprintf(buffer, sizeof(buffer), "GET INDEX:[%d]\r\n", I2C_slave_obj.curr_idx);
 8008cc8:	4b24      	ldr	r3, [pc, #144]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	1d38      	adds	r0, r7, #4
 8008cce:	4a2b      	ldr	r2, [pc, #172]	@ (8008d7c <I2C_event_IRQ+0x20c>)
 8008cd0:	2132      	movs	r1, #50	@ 0x32
 8008cd2:	f009 ff47 	bl	8012b64 <sniprintf>
            UART_SendStringRing(UART_CMDLINE, buffer);
 8008cd6:	1d3b      	adds	r3, r7, #4
 8008cd8:	4619      	mov	r1, r3
 8008cda:	4822      	ldr	r0, [pc, #136]	@ (8008d64 <I2C_event_IRQ+0x1f4>)
 8008cdc:	f000 fb62 	bl	80093a4 <UART_SendStringRing>
 8008ce0:	e01d      	b.n	8008d1e <I2C_event_IRQ+0x1ae>
        }
        else
        {
            if (g_registers[I2C_slave_obj.curr_idx].access == FULL_ACCESS)
 8008ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	4921      	ldr	r1, [pc, #132]	@ (8008d6c <I2C_event_IRQ+0x1fc>)
 8008ce8:	4613      	mov	r3, r2
 8008cea:	005b      	lsls	r3, r3, #1
 8008cec:	4413      	add	r3, r2
 8008cee:	440b      	add	r3, r1
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d10a      	bne.n	8008d0e <I2C_event_IRQ+0x19e>
            {
                 g_registers[I2C_slave_obj.curr_idx].value = received;
 8008cf8:	4b18      	ldr	r3, [pc, #96]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	491b      	ldr	r1, [pc, #108]	@ (8008d6c <I2C_event_IRQ+0x1fc>)
 8008cfe:	4613      	mov	r3, r2
 8008d00:	005b      	lsls	r3, r3, #1
 8008d02:	4413      	add	r3, r2
 8008d04:	440b      	add	r3, r1
 8008d06:	3302      	adds	r3, #2
 8008d08:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8008d0c:	701a      	strb	r2, [r3, #0]
            }
            I2C_slave_obj.reg_addr_rcvd = 0;
 8008d0e:	4b13      	ldr	r3, [pc, #76]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	711a      	strb	r2, [r3, #4]
            LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8008d14:	4b11      	ldr	r3, [pc, #68]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7ff fd4f 	bl	80087bc <LL_I2C_DisableIT_BUF>
        }
    }

    // STOP condition detected
    if (LL_I2C_IsActiveFlag_STOP(I2C_slave_obj.I2Cx)) {
 8008d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7ff fdb7 	bl	8008896 <LL_I2C_IsActiveFlag_STOP>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00f      	beq.n	8008d4e <I2C_event_IRQ+0x1de>
        LL_I2C_ClearFlag_STOP(I2C_slave_obj.I2Cx);
 8008d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7ff fe20 	bl	8008978 <LL_I2C_ClearFlag_STOP>
        I2C_slave_obj.reg_addr_rcvd = 0;
 8008d38:	4b08      	ldr	r3, [pc, #32]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	711a      	strb	r2, [r3, #4]
//        I2C_slave_obj.curr_idx = NONE;
//        data_index = 0;
        LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8008d3e:	4b07      	ldr	r3, [pc, #28]	@ (8008d5c <I2C_event_IRQ+0x1ec>)
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7ff fd3a 	bl	80087bc <LL_I2C_DisableIT_BUF>
        I2C_Slave_Status = I2C_Status_OK;
 8008d48:	4b03      	ldr	r3, [pc, #12]	@ (8008d58 <I2C_event_IRQ+0x1e8>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	701a      	strb	r2, [r3, #0]
    }
}
 8008d4e:	bf00      	nop
 8008d50:	3758      	adds	r7, #88	@ 0x58
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	20002534 	.word	0x20002534
 8008d5c:	20002528 	.word	0x20002528
 8008d60:	080134f4 	.word	0x080134f4
 8008d64:	40011000 	.word	0x40011000
 8008d68:	08013510 	.word	0x08013510
 8008d6c:	20002538 	.word	0x20002538
 8008d70:	08013524 	.word	0x08013524
 8008d74:	08013540 	.word	0x08013540
 8008d78:	08013558 	.word	0x08013558
 8008d7c:	08013568 	.word	0x08013568

08008d80 <I2C_error_IRQ>:

void I2C_error_IRQ(void) {
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
    // Handle errors
	UART_SendStringRing(UART_CMDLINE,"I2C ERROR!!!\r\n");
 8008d84:	4921      	ldr	r1, [pc, #132]	@ (8008e0c <I2C_error_IRQ+0x8c>)
 8008d86:	4822      	ldr	r0, [pc, #136]	@ (8008e10 <I2C_error_IRQ+0x90>)
 8008d88:	f000 fb0c 	bl	80093a4 <UART_SendStringRing>
	I2C_Slave_Status = I2C_Status_OK;
 8008d8c:	4b21      	ldr	r3, [pc, #132]	@ (8008e14 <I2C_error_IRQ+0x94>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	701a      	strb	r2, [r3, #0]
    if (LL_I2C_IsActiveFlag_BERR(I2C_slave_obj.I2Cx)) {
 8008d92:	4b21      	ldr	r3, [pc, #132]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7ff fd90 	bl	80088bc <LL_I2C_IsActiveFlag_BERR>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d004      	beq.n	8008dac <I2C_error_IRQ+0x2c>

        LL_I2C_ClearFlag_BERR(I2C_slave_obj.I2Cx);
 8008da2:	4b1d      	ldr	r3, [pc, #116]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7ff fdfa 	bl	80089a0 <LL_I2C_ClearFlag_BERR>
    }

    if (LL_I2C_IsActiveFlag_ARLO(I2C_slave_obj.I2Cx)) {
 8008dac:	4b1a      	ldr	r3, [pc, #104]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff fd97 	bl	80088e4 <LL_I2C_IsActiveFlag_ARLO>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d004      	beq.n	8008dc6 <I2C_error_IRQ+0x46>
        LL_I2C_ClearFlag_ARLO(I2C_slave_obj.I2Cx);
 8008dbc:	4b16      	ldr	r3, [pc, #88]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7ff fdfd 	bl	80089c0 <LL_I2C_ClearFlag_ARLO>
    }

    if (LL_I2C_IsActiveFlag_AF(I2C_slave_obj.I2Cx)) {
 8008dc6:	4b14      	ldr	r3, [pc, #80]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff fd4f 	bl	800886e <LL_I2C_IsActiveFlag_AF>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d004      	beq.n	8008de0 <I2C_error_IRQ+0x60>
        LL_I2C_ClearFlag_AF(I2C_slave_obj.I2Cx);
 8008dd6:	4b10      	ldr	r3, [pc, #64]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff fdbc 	bl	8008958 <LL_I2C_ClearFlag_AF>
    }

    if (LL_I2C_IsActiveFlag_OVR(I2C_slave_obj.I2Cx)) {
 8008de0:	4b0d      	ldr	r3, [pc, #52]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7ff fd91 	bl	800890c <LL_I2C_IsActiveFlag_OVR>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d004      	beq.n	8008dfa <I2C_error_IRQ+0x7a>
        LL_I2C_ClearFlag_OVR(I2C_slave_obj.I2Cx);
 8008df0:	4b09      	ldr	r3, [pc, #36]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7ff fdf3 	bl	80089e0 <LL_I2C_ClearFlag_OVR>
    }
    I2C_ReInit();
 8008dfa:	f7ff fe31 	bl	8008a60 <I2C_ReInit>
    i2c_slave_init(I2C_slave_obj.I2Cx);
 8008dfe:	4b06      	ldr	r3, [pc, #24]	@ (8008e18 <I2C_error_IRQ+0x98>)
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7ff fe96 	bl	8008b34 <i2c_slave_init>
}
 8008e08:	bf00      	nop
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	0801357c 	.word	0x0801357c
 8008e10:	40011000 	.word	0x40011000
 8008e14:	20002534 	.word	0x20002534
 8008e18:	20002528 	.word	0x20002528

08008e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4603      	mov	r3, r0
 8008e24:	6039      	str	r1, [r7, #0]
 8008e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	db0a      	blt.n	8008e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	490c      	ldr	r1, [pc, #48]	@ (8008e68 <__NVIC_SetPriority+0x4c>)
 8008e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e3a:	0112      	lsls	r2, r2, #4
 8008e3c:	b2d2      	uxtb	r2, r2
 8008e3e:	440b      	add	r3, r1
 8008e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008e44:	e00a      	b.n	8008e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	4908      	ldr	r1, [pc, #32]	@ (8008e6c <__NVIC_SetPriority+0x50>)
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	f003 030f 	and.w	r3, r3, #15
 8008e52:	3b04      	subs	r3, #4
 8008e54:	0112      	lsls	r2, r2, #4
 8008e56:	b2d2      	uxtb	r2, r2
 8008e58:	440b      	add	r3, r1
 8008e5a:	761a      	strb	r2, [r3, #24]
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	e000e100 	.word	0xe000e100
 8008e6c:	e000ed00 	.word	0xe000ed00

08008e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e80:	d301      	bcc.n	8008e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008e82:	2301      	movs	r3, #1
 8008e84:	e00f      	b.n	8008ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008e86:	4a0a      	ldr	r2, [pc, #40]	@ (8008eb0 <SysTick_Config+0x40>)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008e8e:	210f      	movs	r1, #15
 8008e90:	f04f 30ff 	mov.w	r0, #4294967295
 8008e94:	f7ff ffc2 	bl	8008e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008e98:	4b05      	ldr	r3, [pc, #20]	@ (8008eb0 <SysTick_Config+0x40>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008e9e:	4b04      	ldr	r3, [pc, #16]	@ (8008eb0 <SysTick_Config+0x40>)
 8008ea0:	2207      	movs	r2, #7
 8008ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	e000e010 	.word	0xe000e010

08008eb4 <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8008eb8:	4b05      	ldr	r3, [pc, #20]	@ (8008ed0 <systick_timer_start+0x1c>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a04      	ldr	r2, [pc, #16]	@ (8008ed0 <systick_timer_start+0x1c>)
 8008ebe:	f043 0301 	orr.w	r3, r3, #1
 8008ec2:	6013      	str	r3, [r2, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	e000e010 	.word	0xe000e010

08008ed4 <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 8008ed8:	4b05      	ldr	r3, [pc, #20]	@ (8008ef0 <systick_timer_init+0x1c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a05      	ldr	r2, [pc, #20]	@ (8008ef4 <systick_timer_init+0x20>)
 8008ede:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee2:	099b      	lsrs	r3, r3, #6
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff ffc3 	bl	8008e70 <SysTick_Config>
}
 8008eea:	bf00      	nop
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20002330 	.word	0x20002330
 8008ef4:	10624dd3 	.word	0x10624dd3

08008ef8 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0302 	and.w	r3, r3, #2
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	bf0c      	ite	eq
 8008f0c:	2301      	moveq	r3, #1
 8008f0e:	2300      	movne	r3, #0
 8008f10:	b2db      	uxtb	r3, r3
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b083      	sub	sp, #12
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0304 	and.w	r3, r3, #4
 8008f2e:	2b04      	cmp	r3, #4
 8008f30:	bf0c      	ite	eq
 8008f32:	2301      	moveq	r3, #1
 8008f34:	2300      	movne	r3, #0
 8008f36:	b2db      	uxtb	r3, r3
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	bf0c      	ite	eq
 8008f58:	2301      	moveq	r3, #1
 8008f5a:	2300      	movne	r3, #0
 8008f5c:	b2db      	uxtb	r3, r3
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0320 	and.w	r3, r3, #32
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	bf0c      	ite	eq
 8008f7e:	2301      	moveq	r3, #1
 8008f80:	2300      	movne	r3, #0
 8008f82:	b2db      	uxtb	r3, r3
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fa0:	2b80      	cmp	r3, #128	@ 0x80
 8008fa2:	bf0c      	ite	eq
 8008fa4:	2301      	moveq	r3, #1
 8008fa6:	2300      	movne	r3, #0
 8008fa8:	b2db      	uxtb	r3, r3
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b085      	sub	sp, #20
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
}
 8008fce:	bf00      	nop
 8008fd0:	3714      	adds	r7, #20
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b085      	sub	sp, #20
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
}
 8008ff2:	bf00      	nop
 8008ff4:	3714      	adds	r7, #20
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b085      	sub	sp, #20
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800900c:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8009014:	68fb      	ldr	r3, [r7, #12]
}
 8009016:	bf00      	nop
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8009022:	b480      	push	{r7}
 8009024:	b089      	sub	sp, #36	@ 0x24
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	330c      	adds	r3, #12
 800902e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	e853 3f00 	ldrex	r3, [r3]
 8009036:	60bb      	str	r3, [r7, #8]
   return(result);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	f043 0320 	orr.w	r3, r3, #32
 800903e:	61fb      	str	r3, [r7, #28]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	330c      	adds	r3, #12
 8009044:	69fa      	ldr	r2, [r7, #28]
 8009046:	61ba      	str	r2, [r7, #24]
 8009048:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	6979      	ldr	r1, [r7, #20]
 800904c:	69ba      	ldr	r2, [r7, #24]
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	613b      	str	r3, [r7, #16]
   return(result);
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e7      	bne.n	800902a <LL_USART_EnableIT_RXNE+0x8>
}
 800905a:	bf00      	nop
 800905c:	bf00      	nop
 800905e:	3724      	adds	r7, #36	@ 0x24
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8009068:	b480      	push	{r7}
 800906a:	b089      	sub	sp, #36	@ 0x24
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	330c      	adds	r3, #12
 8009074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	e853 3f00 	ldrex	r3, [r3]
 800907c:	60bb      	str	r3, [r7, #8]
   return(result);
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009084:	61fb      	str	r3, [r7, #28]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	330c      	adds	r3, #12
 800908a:	69fa      	ldr	r2, [r7, #28]
 800908c:	61ba      	str	r2, [r7, #24]
 800908e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009090:	6979      	ldr	r1, [r7, #20]
 8009092:	69ba      	ldr	r2, [r7, #24]
 8009094:	e841 2300 	strex	r3, r2, [r1]
 8009098:	613b      	str	r3, [r7, #16]
   return(result);
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1e7      	bne.n	8009070 <LL_USART_EnableIT_TXE+0x8>
}
 80090a0:	bf00      	nop
 80090a2:	bf00      	nop
 80090a4:	3724      	adds	r7, #36	@ 0x24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr

080090ae <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b089      	sub	sp, #36	@ 0x24
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	330c      	adds	r3, #12
 80090ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	e853 3f00 	ldrex	r3, [r3]
 80090c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	f023 0320 	bic.w	r3, r3, #32
 80090ca:	61fb      	str	r3, [r7, #28]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	330c      	adds	r3, #12
 80090d0:	69fa      	ldr	r2, [r7, #28]
 80090d2:	61ba      	str	r2, [r7, #24]
 80090d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d6:	6979      	ldr	r1, [r7, #20]
 80090d8:	69ba      	ldr	r2, [r7, #24]
 80090da:	e841 2300 	strex	r3, r2, [r1]
 80090de:	613b      	str	r3, [r7, #16]
   return(result);
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e7      	bne.n	80090b6 <LL_USART_DisableIT_RXNE+0x8>
}
 80090e6:	bf00      	nop
 80090e8:	bf00      	nop
 80090ea:	3724      	adds	r7, #36	@ 0x24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b089      	sub	sp, #36	@ 0x24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	330c      	adds	r3, #12
 8009100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	e853 3f00 	ldrex	r3, [r3]
 8009108:	60bb      	str	r3, [r7, #8]
   return(result);
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009110:	61fb      	str	r3, [r7, #28]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	330c      	adds	r3, #12
 8009116:	69fa      	ldr	r2, [r7, #28]
 8009118:	61ba      	str	r2, [r7, #24]
 800911a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	6979      	ldr	r1, [r7, #20]
 800911e:	69ba      	ldr	r2, [r7, #24]
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	613b      	str	r3, [r7, #16]
   return(result);
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e7      	bne.n	80090fc <LL_USART_DisableIT_TXE+0x8>
}
 800912c:	bf00      	nop
 800912e:	bf00      	nop
 8009130:	3724      	adds	r7, #36	@ 0x24
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	f003 0320 	and.w	r3, r3, #32
 800914a:	2b20      	cmp	r3, #32
 800914c:	bf0c      	ite	eq
 800914e:	2301      	moveq	r3, #1
 8009150:	2300      	movne	r3, #0
 8009152:	b2db      	uxtb	r3, r3
}
 8009154:	4618      	mov	r0, r3
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009170:	2b80      	cmp	r3, #128	@ 0x80
 8009172:	bf0c      	ite	eq
 8009174:	2301      	moveq	r3, #1
 8009176:	2300      	movne	r3, #0
 8009178:	b2db      	uxtb	r3, r3
}
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8009186:	b480      	push	{r7}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	b2db      	uxtb	r3, r3
}
 8009194:	4618      	mov	r0, r3
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80091ac:	78fa      	ldrb	r2, [r7, #3]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	605a      	str	r2, [r3, #4]
}
 80091b2:	bf00      	nop
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
	...

080091c0 <get_usart_buffer>:
    }
};

void store_char(unsigned char c, ring_buffer *buffer, USART_TypeDef *uart);

USART_Buffer* get_usart_buffer(USART_TypeDef *uart) {
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < USART_COUNT; i++) {
 80091c8:	2300      	movs	r3, #0
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	e015      	b.n	80091fa <get_usart_buffer+0x3a>
        if (usart_buffers[i].uart == uart) {
 80091ce:	4910      	ldr	r1, [pc, #64]	@ (8009210 <get_usart_buffer+0x50>)
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	4613      	mov	r3, r2
 80091d4:	00db      	lsls	r3, r3, #3
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	440b      	add	r3, r1
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d107      	bne.n	80091f4 <get_usart_buffer+0x34>
            return &usart_buffers[i];
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	4613      	mov	r3, r2
 80091e8:	00db      	lsls	r3, r3, #3
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4a08      	ldr	r2, [pc, #32]	@ (8009210 <get_usart_buffer+0x50>)
 80091f0:	4413      	add	r3, r2
 80091f2:	e006      	b.n	8009202 <get_usart_buffer+0x42>
    for (int i = 0; i < USART_COUNT; i++) {
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	3301      	adds	r3, #1
 80091f8:	60fb      	str	r3, [r7, #12]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	dde6      	ble.n	80091ce <get_usart_buffer+0xe>
        }
    }
    return NULL;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	20000000 	.word	0x20000000

08009214 <store_char>:
        LL_USART_EnableIT_ERROR(buffer->uart);
        LL_USART_EnableIT_RXNE(buffer->uart);
    }
}

void store_char(unsigned char c, ring_buffer *buffer, USART_TypeDef *uart) {
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	4603      	mov	r3, r0
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
 8009220:	73fb      	strb	r3, [r7, #15]
    int i = (buffer->head + 1) % buffer->size;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	3301      	adds	r3, #1
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	68d2      	ldr	r2, [r2, #12]
 800922c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009230:	fb01 f202 	mul.w	r2, r1, r2
 8009234:	1a9b      	subs	r3, r3, r2
 8009236:	617b      	str	r3, [r7, #20]

    if (i != buffer->tail) {
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	689a      	ldr	r2, [r3, #8]
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	429a      	cmp	r2, r3
 8009240:	d00f      	beq.n	8009262 <store_char+0x4e>
        ATOMIC_BLOCK_START(uart);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff ff33 	bl	80090ae <LL_USART_DisableIT_RXNE>
        buffer->buffer[buffer->head] = c;
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	4413      	add	r3, r2
 8009252:	7bfa      	ldrb	r2, [r7, #15]
 8009254:	701a      	strb	r2, [r3, #0]
        buffer->head = i;
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	605a      	str	r2, [r3, #4]
        ATOMIC_BLOCK_END(uart);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7ff fee0 	bl	8009022 <LL_USART_EnableIT_RXNE>
    }
}
 8009262:	bf00      	nop
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <UART_ReadRing>:

int UART_ReadRing(USART_TypeDef *uart) {
 800926a:	b580      	push	{r7, lr}
 800926c:	b086      	sub	sp, #24
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
    USART_Buffer *buffer = get_usart_buffer(uart);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff ffa4 	bl	80091c0 <get_usart_buffer>
 8009278:	6178      	str	r0, [r7, #20]
    if (!buffer) return -1;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d102      	bne.n	8009286 <UART_ReadRing+0x1c>
 8009280:	f04f 33ff 	mov.w	r3, #4294967295
 8009284:	e025      	b.n	80092d2 <UART_ReadRing+0x68>

    ring_buffer *rx_buffer = &buffer->rx_buffer;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	3304      	adds	r3, #4
 800928a:	613b      	str	r3, [r7, #16]

    if (rx_buffer->head == rx_buffer->tail) {
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	429a      	cmp	r2, r3
 8009296:	d102      	bne.n	800929e <UART_ReadRing+0x34>
        return -1;
 8009298:	f04f 33ff 	mov.w	r3, #4294967295
 800929c:	e019      	b.n	80092d2 <UART_ReadRing+0x68>
    } else {
        ATOMIC_BLOCK_START(uart);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7ff ff05 	bl	80090ae <LL_USART_DisableIT_RXNE>
        unsigned char c = rx_buffer->buffer[rx_buffer->tail];
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	4413      	add	r3, r2
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	73fb      	strb	r3, [r7, #15]
        rx_buffer->tail = (rx_buffer->tail + 1) % rx_buffer->size;
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	3301      	adds	r3, #1
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	68d2      	ldr	r2, [r2, #12]
 80092bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80092c0:	fb01 f202 	mul.w	r2, r1, r2
 80092c4:	1a9a      	subs	r2, r3, r2
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	609a      	str	r2, [r3, #8]
        ATOMIC_BLOCK_END(uart);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7ff fea9 	bl	8009022 <LL_USART_EnableIT_RXNE>
        return c;
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
    }
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3718      	adds	r7, #24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <UART_WriteRing>:

void UART_WriteRing(USART_TypeDef *uart, int c) {
 80092da:	b580      	push	{r7, lr}
 80092dc:	b086      	sub	sp, #24
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	6039      	str	r1, [r7, #0]
    USART_Buffer *buffer = get_usart_buffer(uart);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7ff ff6b 	bl	80091c0 <get_usart_buffer>
 80092ea:	6178      	str	r0, [r7, #20]
    if (!buffer || c < 0) return;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d02b      	beq.n	800934a <UART_WriteRing+0x70>
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	db28      	blt.n	800934a <UART_WriteRing+0x70>

    ring_buffer *tx_buffer = &buffer->tx_buffer;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	3314      	adds	r3, #20
 80092fc:	613b      	str	r3, [r7, #16]
    int i = (tx_buffer->head + 1) % tx_buffer->size;
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	3301      	adds	r3, #1
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	68d2      	ldr	r2, [r2, #12]
 8009308:	fbb3 f1f2 	udiv	r1, r3, r2
 800930c:	fb01 f202 	mul.w	r2, r1, r2
 8009310:	1a9b      	subs	r3, r3, r2
 8009312:	60fb      	str	r3, [r7, #12]

    ATOMIC_BLOCK_START(uart);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7ff feca 	bl	80090ae <LL_USART_DisableIT_RXNE>
    while (i == tx_buffer->tail);
 800931a:	bf00      	nop
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	689a      	ldr	r2, [r3, #8]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	429a      	cmp	r2, r3
 8009324:	d0fa      	beq.n	800931c <UART_WriteRing+0x42>

    tx_buffer->buffer[tx_buffer->head] = (uint8_t)c;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	4413      	add	r3, r2
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	b2d2      	uxtb	r2, r2
 8009334:	701a      	strb	r2, [r3, #0]
    tx_buffer->head = i;
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	605a      	str	r2, [r3, #4]
    ATOMIC_BLOCK_END(uart);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7ff fe70 	bl	8009022 <LL_USART_EnableIT_RXNE>

    LL_USART_EnableIT_TXE(uart);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff fe90 	bl	8009068 <LL_USART_EnableIT_TXE>
 8009348:	e000      	b.n	800934c <UART_WriteRing+0x72>
    if (!buffer || c < 0) return;
 800934a:	bf00      	nop
}
 800934c:	3718      	adds	r7, #24
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(USART_TypeDef *uart) {
 8009352:	b580      	push	{r7, lr}
 8009354:	b084      	sub	sp, #16
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
    USART_Buffer *buffer = get_usart_buffer(uart);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7ff ff30 	bl	80091c0 <get_usart_buffer>
 8009360:	60f8      	str	r0, [r7, #12]
    if (!buffer) return 0;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <IsDataAvailable+0x1a>
 8009368:	2300      	movs	r3, #0
 800936a:	e017      	b.n	800939c <IsDataAvailable+0x4a>

    ring_buffer *rx_buffer = &buffer->rx_buffer;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3304      	adds	r3, #4
 8009370:	60bb      	str	r3, [r7, #8]
    return (uint16_t)(rx_buffer->size + rx_buffer->head - rx_buffer->tail) % rx_buffer->size;
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	b29a      	uxth	r2, r3
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	b29b      	uxth	r3, r3
 800937e:	4413      	add	r3, r2
 8009380:	b29a      	uxth	r2, r3
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	b29b      	uxth	r3, r3
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	b29b      	uxth	r3, r3
 800938c:	461a      	mov	r2, r3
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	fbb2 f1f3 	udiv	r1, r2, r3
 8009396:	fb01 f303 	mul.w	r3, r1, r3
 800939a:	1ad3      	subs	r3, r2, r3
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <UART_SendStringRing>:
/* sends the string to the uart
 */
void UART_SendStringRing (USART_TypeDef *uart, const char *s)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
	while(*s) UART_WriteRing(uart, *s++);
 80093ae:	e007      	b.n	80093c0 <UART_SendStringRing+0x1c>
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	1c5a      	adds	r2, r3, #1
 80093b4:	603a      	str	r2, [r7, #0]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7ff ff8d 	bl	80092da <UART_WriteRing>
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1f3      	bne.n	80093b0 <UART_SendStringRing+0xc>
}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <UART_Flush_RingRx>:
//    va_end(args);
//
//    UART_SendStringRing(huart, buffer);
//}

void UART_Flush_RingRx(USART_TypeDef *uart) {
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b084      	sub	sp, #16
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
    USART_Buffer *buffer = get_usart_buffer(uart);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7ff fef0 	bl	80091c0 <get_usart_buffer>
 80093e0:	60f8      	str	r0, [r7, #12]
    if (!buffer) return;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d011      	beq.n	800940c <UART_Flush_RingRx+0x3a>

    ring_buffer *rx_buffer = &buffer->rx_buffer;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3304      	adds	r3, #4
 80093ec:	60bb      	str	r3, [r7, #8]
    memset(rx_buffer->buffer, '\0', rx_buffer->size);
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	6818      	ldr	r0, [r3, #0]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	461a      	mov	r2, r3
 80093f8:	2100      	movs	r1, #0
 80093fa:	f009 fbe9 	bl	8012bd0 <memset>
    rx_buffer->head = 0;
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2200      	movs	r2, #0
 8009402:	605a      	str	r2, [r3, #4]
    rx_buffer->tail = 0;
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2200      	movs	r2, #0
 8009408:	609a      	str	r2, [r3, #8]
 800940a:	e000      	b.n	800940e <UART_Flush_RingRx+0x3c>
    if (!buffer) return;
 800940c:	bf00      	nop
}
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <UART_Ring_ISR>:
    memset(tx_buffer->buffer, '\0', tx_buffer->size);
    tx_buffer->head = 0;
    tx_buffer->tail = 0;
}

void UART_Ring_ISR(USART_TypeDef *uart) {
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
    USART_Buffer *buffer = get_usart_buffer(uart);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff fecf 	bl	80091c0 <get_usart_buffer>
 8009422:	6178      	str	r0, [r7, #20]
    if (!buffer) return;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d068      	beq.n	80094fc <UART_Ring_ISR+0xe8>

    ring_buffer *rx_buffer = &buffer->rx_buffer;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	3304      	adds	r3, #4
 800942e:	613b      	str	r3, [r7, #16]
    ring_buffer *tx_buffer = &buffer->tx_buffer;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	3314      	adds	r3, #20
 8009434:	60fb      	str	r3, [r7, #12]

    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) && (LL_USART_IsEnabledIT_RXNE(uart) != RESET)) {
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7ff fd97 	bl	8008f6a <LL_USART_IsActiveFlag_RXNE>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d02d      	beq.n	800949e <UART_Ring_ISR+0x8a>
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7ff fe79 	bl	800913a <LL_USART_IsEnabledIT_RXNE>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d027      	beq.n	800949e <UART_Ring_ISR+0x8a>
        unsigned char data = LL_USART_ReceiveData8(uart);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7ff fe99 	bl	8009186 <LL_USART_ReceiveData8>
 8009454:	4603      	mov	r3, r0
 8009456:	72fb      	strb	r3, [r7, #11]

        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7ff fd73 	bl	8008f44 <LL_USART_IsActiveFlag_ORE>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10b      	bne.n	800947c <UART_Ring_ISR+0x68>
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7ff fd47 	bl	8008ef8 <LL_USART_IsActiveFlag_FE>
 800946a:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 800946c:	2b00      	cmp	r3, #0
 800946e:	d105      	bne.n	800947c <UART_Ring_ISR+0x68>
            (LL_USART_IsActiveFlag_NE(uart) != RESET)) {
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff fd54 	bl	8008f1e <LL_USART_IsActiveFlag_NE>
 8009476:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8009478:	2b00      	cmp	r3, #0
 800947a:	d009      	beq.n	8009490 <UART_Ring_ISR+0x7c>
            LL_USART_ClearFlag_ORE(uart);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff fdbe 	bl	8008ffe <LL_USART_ClearFlag_ORE>
            LL_USART_ClearFlag_FE(uart);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f7ff fd97 	bl	8008fb6 <LL_USART_ClearFlag_FE>
            LL_USART_ClearFlag_NE(uart);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f7ff fda6 	bl	8008fda <LL_USART_ClearFlag_NE>
        } else {
        	store_char(data, rx_buffer, uart);
        }
        return;
 800948e:	e036      	b.n	80094fe <UART_Ring_ISR+0xea>
        	store_char(data, rx_buffer, uart);
 8009490:	7afb      	ldrb	r3, [r7, #11]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	6939      	ldr	r1, [r7, #16]
 8009496:	4618      	mov	r0, r3
 8009498:	f7ff febc 	bl	8009214 <store_char>
        return;
 800949c:	e02f      	b.n	80094fe <UART_Ring_ISR+0xea>
    }

    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) && (LL_USART_IsEnabledIT_TXE(uart) != RESET)) {
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff fd76 	bl	8008f90 <LL_USART_IsActiveFlag_TXE>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d029      	beq.n	80094fe <UART_Ring_ISR+0xea>
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7ff fe58 	bl	8009160 <LL_USART_IsEnabledIT_TXE>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d023      	beq.n	80094fe <UART_Ring_ISR+0xea>
        if (tx_buffer->head == tx_buffer->tail) {
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	685a      	ldr	r2, [r3, #4]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d103      	bne.n	80094ca <UART_Ring_ISR+0xb6>
            LL_USART_DisableIT_TXE(uart);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7ff fe16 	bl	80090f4 <LL_USART_DisableIT_TXE>
 80094c8:	e019      	b.n	80094fe <UART_Ring_ISR+0xea>
        } else {
            unsigned char c = tx_buffer->buffer[tx_buffer->tail];
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	4413      	add	r3, r2
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	72bb      	strb	r3, [r7, #10]
            tx_buffer->tail = (tx_buffer->tail + 1) % tx_buffer->size;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	3301      	adds	r3, #1
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	68d2      	ldr	r2, [r2, #12]
 80094e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80094e6:	fb01 f202 	mul.w	r2, r1, r2
 80094ea:	1a9a      	subs	r2, r3, r2
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	609a      	str	r2, [r3, #8]
            LL_USART_TransmitData8(uart, c);
 80094f0:	7abb      	ldrb	r3, [r7, #10]
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff fe53 	bl	80091a0 <LL_USART_TransmitData8>
 80094fa:	e000      	b.n	80094fe <UART_Ring_ISR+0xea>
    if (!buffer) return;
 80094fc:	bf00      	nop
        }
    }
}
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <CmdLineProcess>:
//! \b CMDLINE_TOO_MANY_ARGS if there are more arguments than can be parsed.
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t CmdLineProcess(char *pcCmdLine)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 800950c:	2301      	movs	r3, #1
 800950e:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 8009510:	2300      	movs	r3, #0
 8009512:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 8009518:	e01f      	b.n	800955a <CmdLineProcess+0x56>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	2b20      	cmp	r3, #32
 8009520:	d105      	bne.n	800952e <CmdLineProcess+0x2a>
        {
            *pcChar = 0;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2200      	movs	r2, #0
 8009526:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 8009528:	2301      	movs	r3, #1
 800952a:	73fb      	strb	r3, [r7, #15]
 800952c:	e012      	b.n	8009554 <CmdLineProcess+0x50>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00f      	beq.n	8009554 <CmdLineProcess+0x50>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	2b07      	cmp	r3, #7
 8009538:	d80a      	bhi.n	8009550 <CmdLineProcess+0x4c>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 800953a:	491e      	ldr	r1, [pc, #120]	@ (80095b4 <CmdLineProcess+0xb0>)
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	3301      	adds	r3, #1
 8009548:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 800954a:	2300      	movs	r3, #0
 800954c:	73fb      	strb	r3, [r7, #15]
 800954e:	e001      	b.n	8009554 <CmdLineProcess+0x50>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 8009550:	2302      	movs	r3, #2
 8009552:	e02b      	b.n	80095ac <CmdLineProcess+0xa8>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	3301      	adds	r3, #1
 8009558:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1db      	bne.n	800951a <CmdLineProcess+0x16>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d020      	beq.n	80095aa <CmdLineProcess+0xa6>
    {
        ui8Argc++;
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	3301      	adds	r3, #1
 800956c:	613b      	str	r3, [r7, #16]
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 800956e:	4b12      	ldr	r3, [pc, #72]	@ (80095b8 <CmdLineProcess+0xb4>)
 8009570:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 8009572:	e016      	b.n	80095a2 <CmdLineProcess+0x9e>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 8009574:	4b0f      	ldr	r3, [pc, #60]	@ (80095b4 <CmdLineProcess+0xb0>)
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4619      	mov	r1, r3
 800957e:	4610      	mov	r0, r2
 8009580:	f7fe fe26 	bl	80081d0 <strcmp>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d108      	bne.n	800959c <CmdLineProcess+0x98>
            {
                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	4908      	ldr	r1, [pc, #32]	@ (80095b4 <CmdLineProcess+0xb0>)
 8009592:	4610      	mov	r0, r2
 8009594:	4798      	blx	r3
 8009596:	4603      	mov	r3, r0
 8009598:	b2db      	uxtb	r3, r3
 800959a:	e007      	b.n	80095ac <CmdLineProcess+0xa8>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	330c      	adds	r3, #12
 80095a0:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1e4      	bne.n	8009574 <CmdLineProcess+0x70>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 80095aa:	2301      	movs	r3, #1
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3718      	adds	r7, #24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20003238 	.word	0x20003238
 80095b8:	20000060 	.word	0x20000060

080095bc <__NVIC_SystemReset>:
{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80095c0:	f3bf 8f4f 	dsb	sy
}
 80095c4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80095c6:	4b06      	ldr	r3, [pc, #24]	@ (80095e0 <__NVIC_SystemReset+0x24>)
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80095ce:	4904      	ldr	r1, [pc, #16]	@ (80095e0 <__NVIC_SystemReset+0x24>)
 80095d0:	4b04      	ldr	r3, [pc, #16]	@ (80095e4 <__NVIC_SystemReset+0x28>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80095d6:	f3bf 8f4f 	dsb	sy
}
 80095da:	bf00      	nop
    __NOP();
 80095dc:	bf00      	nop
 80095de:	e7fd      	b.n	80095dc <__NVIC_SystemReset+0x20>
 80095e0:	e000ed00 	.word	0xe000ed00
 80095e4:	05fa0004 	.word	0x05fa0004

080095e8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	619a      	str	r2, [r3, #24]
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	041a      	lsls	r2, r3, #16
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	619a      	str	r2, [r3, #24]
}
 8009616:	bf00      	nop
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
	...

08009624 <LL_APB2_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800962c:	4b05      	ldr	r3, [pc, #20]	@ (8009644 <LL_APB2_GRP1_ForceReset+0x20>)
 800962e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009630:	4904      	ldr	r1, [pc, #16]	@ (8009644 <LL_APB2_GRP1_ForceReset+0x20>)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4313      	orrs	r3, r2
 8009636:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	40023800 	.word	0x40023800

08009648 <LL_APB2_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8009650:	4b06      	ldr	r3, [pc, #24]	@ (800966c <LL_APB2_GRP1_ReleaseReset+0x24>)
 8009652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	43db      	mvns	r3, r3
 8009658:	4904      	ldr	r1, [pc, #16]	@ (800966c <LL_APB2_GRP1_ReleaseReset+0x24>)
 800965a:	4013      	ands	r3, r2
 800965c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800965e:	bf00      	nop
 8009660:	370c      	adds	r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	40023800 	.word	0x40023800

08009670 <CommandLine_Init>:
		10,                      	// taskPeriodInMS;
		CommandLine_Task_Update, 	// taskFunction;
		9 }
};

void CommandLine_Init(USART_TypeDef *handle_uart) {
 8009670:	b580      	push	{r7, lr}
 8009672:	b08a      	sub	sp, #40	@ 0x28
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
	UART_CMDLINE = handle_uart;
 8009678:	4a14      	ldr	r2, [pc, #80]	@ (80096cc <CommandLine_Init+0x5c>)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6013      	str	r3, [r2, #0]
	memset((void*) s_commandBuffer, 0, sizeof(s_commandBuffer));
 800967e:	2240      	movs	r2, #64	@ 0x40
 8009680:	2100      	movs	r1, #0
 8009682:	4813      	ldr	r0, [pc, #76]	@ (80096d0 <CommandLine_Init+0x60>)
 8009684:	f009 faa4 	bl	8012bd0 <memset>
	s_commandBufferIndex = 0;
 8009688:	4b12      	ldr	r3, [pc, #72]	@ (80096d4 <CommandLine_Init+0x64>)
 800968a:	2200      	movs	r2, #0
 800968c:	701a      	strb	r2, [r3, #0]
//    Command_SendSplash();
	UART_SendStringRing(UART_CMDLINE, "\n\n\rEXP FIRMWARE V1.1.0\r\n");
 800968e:	4b0f      	ldr	r3, [pc, #60]	@ (80096cc <CommandLine_Init+0x5c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4911      	ldr	r1, [pc, #68]	@ (80096d8 <CommandLine_Init+0x68>)
 8009694:	4618      	mov	r0, r3
 8009696:	f7ff fe85 	bl	80093a4 <UART_SendStringRing>
	UART_Flush_RingRx(UART_CMDLINE);
 800969a:	4b0c      	ldr	r3, [pc, #48]	@ (80096cc <CommandLine_Init+0x5c>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4618      	mov	r0, r3
 80096a0:	f7ff fe97 	bl	80093d2 <UART_Flush_RingRx>

	char buffer[30];
	snprintf(buffer, sizeof(buffer), "\r[00:00:00]%s$ ", NAME_SHELL);
 80096a4:	f107 0008 	add.w	r0, r7, #8
 80096a8:	4b0c      	ldr	r3, [pc, #48]	@ (80096dc <CommandLine_Init+0x6c>)
 80096aa:	4a0d      	ldr	r2, [pc, #52]	@ (80096e0 <CommandLine_Init+0x70>)
 80096ac:	211e      	movs	r1, #30
 80096ae:	f009 fa59 	bl	8012b64 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 80096b2:	4b06      	ldr	r3, [pc, #24]	@ (80096cc <CommandLine_Init+0x5c>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f107 0208 	add.w	r2, r7, #8
 80096ba:	4611      	mov	r1, r2
 80096bc:	4618      	mov	r0, r3
 80096be:	f7ff fe71 	bl	80093a4 <UART_SendStringRing>
}
 80096c2:	bf00      	nop
 80096c4:	3728      	adds	r7, #40	@ 0x28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	200034a4 	.word	0x200034a4
 80096d0:	200034a8 	.word	0x200034a8
 80096d4:	200034e8 	.word	0x200034e8
 80096d8:	080140a4 	.word	0x080140a4
 80096dc:	080140c0 	.word	0x080140c0
 80096e0:	080140c8 	.word	0x080140c8

080096e4 <CommandLine_Task_Update>:

static void CommandLine_Task_Update(void) {
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
	char rxData;
	if (IsDataAvailable(UART_CMDLINE)) {
 80096ea:	4b14      	ldr	r3, [pc, #80]	@ (800973c <CommandLine_Task_Update+0x58>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7ff fe2f 	bl	8009352 <IsDataAvailable>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d01c      	beq.n	8009734 <CommandLine_Task_Update+0x50>
		rxData = UART_ReadRing(UART_CMDLINE);
 80096fa:	4b10      	ldr	r3, [pc, #64]	@ (800973c <CommandLine_Task_Update+0x58>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4618      	mov	r0, r3
 8009700:	f7ff fdb3 	bl	800926a <UART_ReadRing>
 8009704:	4603      	mov	r3, r0
 8009706:	71fb      	strb	r3, [r7, #7]
		if (rxData == 27) {
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	2b1b      	cmp	r3, #27
 800970c:	d106      	bne.n	800971c <CommandLine_Task_Update+0x38>
			UART_SendStringRing(UART_CMDLINE, "\033[2J");
 800970e:	4b0b      	ldr	r3, [pc, #44]	@ (800973c <CommandLine_Task_Update+0x58>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	490b      	ldr	r1, [pc, #44]	@ (8009740 <CommandLine_Task_Update+0x5c>)
 8009714:	4618      	mov	r0, r3
 8009716:	f7ff fe45 	bl	80093a4 <UART_SendStringRing>
 800971a:	e006      	b.n	800972a <CommandLine_Task_Update+0x46>
		} else {
			UART_WriteRing(UART_CMDLINE, rxData);
 800971c:	4b07      	ldr	r3, [pc, #28]	@ (800973c <CommandLine_Task_Update+0x58>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	79fa      	ldrb	r2, [r7, #7]
 8009722:	4611      	mov	r1, r2
 8009724:	4618      	mov	r0, r3
 8009726:	f7ff fdd8 	bl	80092da <UART_WriteRing>
		}
		process_command(rxData, &pContext);
 800972a:	79fb      	ldrb	r3, [r7, #7]
 800972c:	4905      	ldr	r1, [pc, #20]	@ (8009744 <CommandLine_Task_Update+0x60>)
 800972e:	4618      	mov	r0, r3
 8009730:	f000 f80a 	bl	8009748 <process_command>
	}
}
 8009734:	bf00      	nop
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	200034a4 	.word	0x200034a4
 8009740:	080140d8 	.word	0x080140d8
 8009744:	2000325c 	.word	0x2000325c

08009748 <process_command>:

void process_command(char rxData, CMDLine_Context *context) {
 8009748:	b580      	push	{r7, lr}
 800974a:	b0bc      	sub	sp, #240	@ 0xf0
 800974c:	af02      	add	r7, sp, #8
 800974e:	4603      	mov	r3, r0
 8009750:	6039      	str	r1, [r7, #0]
 8009752:	71fb      	strb	r3, [r7, #7]
	if (rxData == 27) {
 8009754:	79fb      	ldrb	r3, [r7, #7]
 8009756:	2b1b      	cmp	r3, #27
 8009758:	d132      	bne.n	80097c0 <process_command+0x78>
		s_DateTime rtcTime = { 0 };
 800975a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800975e:	2200      	movs	r2, #0
 8009760:	601a      	str	r2, [r3, #0]
 8009762:	809a      	strh	r2, [r3, #4]
		DateTime_GetRTC(&rtcTime);
 8009764:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8009768:	4618      	mov	r0, r3
 800976a:	f002 fc43 	bl	800bff4 <DateTime_GetRTC>
		char x_timeBuffer[30];
		snprintf(x_timeBuffer, sizeof(x_timeBuffer), "[%02u:%02u:%02u]",
				rtcTime.hour, rtcTime.minute, rtcTime.second);
 800976e:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
		snprintf(x_timeBuffer, sizeof(x_timeBuffer), "[%02u:%02u:%02u]",
 8009772:	4619      	mov	r1, r3
				rtcTime.hour, rtcTime.minute, rtcTime.second);
 8009774:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 8009778:	f897 20e1 	ldrb.w	r2, [r7, #225]	@ 0xe1
		snprintf(x_timeBuffer, sizeof(x_timeBuffer), "[%02u:%02u:%02u]",
 800977c:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 8009780:	9201      	str	r2, [sp, #4]
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	460b      	mov	r3, r1
 8009786:	4ab9      	ldr	r2, [pc, #740]	@ (8009a6c <process_command+0x324>)
 8009788:	211e      	movs	r1, #30
 800978a:	f009 f9eb 	bl	8012b64 <sniprintf>
		char buffer[60];
		snprintf(buffer, sizeof(buffer), "\r\n%s%s$ ", x_timeBuffer,
 800978e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8009792:	f107 0008 	add.w	r0, r7, #8
 8009796:	4ab6      	ldr	r2, [pc, #728]	@ (8009a70 <process_command+0x328>)
 8009798:	9200      	str	r2, [sp, #0]
 800979a:	4ab6      	ldr	r2, [pc, #728]	@ (8009a74 <process_command+0x32c>)
 800979c:	213c      	movs	r1, #60	@ 0x3c
 800979e:	f009 f9e1 	bl	8012b64 <sniprintf>
		NAME_SHELL);
		UART_SendStringRing(UART_CMDLINE, buffer);
 80097a2:	4bb5      	ldr	r3, [pc, #724]	@ (8009a78 <process_command+0x330>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f107 0208 	add.w	r2, r7, #8
 80097aa:	4611      	mov	r1, r2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7ff fdf9 	bl	80093a4 <UART_SendStringRing>
		context->commandBufferIndex = 0;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		context->commandBuffer[0] = '\0';
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	2200      	movs	r2, #0
 80097be:	701a      	strb	r2, [r3, #0]
	}

	if (rxData == 0x2D) // '-' key (history up)
 80097c0:	79fb      	ldrb	r3, [r7, #7]
 80097c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80097c4:	d16b      	bne.n	800989e <process_command+0x156>
	{
		// Get Software DateTime
		s_DateTime rtcTime = { 0 };
 80097c6:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80097ca:	2200      	movs	r2, #0
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	809a      	strh	r2, [r3, #4]
		DateTime_GetRTC(&rtcTime);
 80097d0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80097d4:	4618      	mov	r0, r3
 80097d6:	f002 fc0d 	bl	800bff4 <DateTime_GetRTC>
		char x_timeBuffer[30];
		snprintf(x_timeBuffer, sizeof(x_timeBuffer), "[%02u:%02u:%02u]",
				rtcTime.hour, rtcTime.minute, rtcTime.second);
 80097da:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
		snprintf(x_timeBuffer, sizeof(x_timeBuffer), "[%02u:%02u:%02u]",
 80097de:	4619      	mov	r1, r3
				rtcTime.hour, rtcTime.minute, rtcTime.second);
 80097e0:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 80097e4:	f897 20b9 	ldrb.w	r2, [r7, #185]	@ 0xb9
		snprintf(x_timeBuffer, sizeof(x_timeBuffer), "[%02u:%02u:%02u]",
 80097e8:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80097ec:	9201      	str	r2, [sp, #4]
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	460b      	mov	r3, r1
 80097f2:	4a9e      	ldr	r2, [pc, #632]	@ (8009a6c <process_command+0x324>)
 80097f4:	211e      	movs	r1, #30
 80097f6:	f009 f9b5 	bl	8012b64 <sniprintf>
		if (context->historyIndex > 0) {
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	f8b3 3244 	ldrh.w	r3, [r3, #580]	@ 0x244
 8009800:	2b00      	cmp	r3, #0
 8009802:	d007      	beq.n	8009814 <process_command+0xcc>
			context->historyIndex--;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	f8b3 3244 	ldrh.w	r3, [r3, #580]	@ 0x244
 800980a:	3b01      	subs	r3, #1
 800980c:	b29a      	uxth	r2, r3
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	f8a3 2244 	strh.w	r2, [r3, #580]	@ 0x244
		}

		// Load history command
		if (context->historyIndex < context->historyCount) {
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	f8b3 2244 	ldrh.w	r2, [r3, #580]	@ 0x244
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 8009820:	429a      	cmp	r2, r3
 8009822:	d215      	bcs.n	8009850 <process_command+0x108>
			strcpy(context->commandBuffer,
 8009824:	6838      	ldr	r0, [r7, #0]
					context->commandHistory[context->historyIndex]);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	f8b3 3244 	ldrh.w	r3, [r3, #580]	@ 0x244
 800982c:	3301      	adds	r3, #1
 800982e:	019b      	lsls	r3, r3, #6
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	4413      	add	r3, r2
 8009834:	3302      	adds	r3, #2
			strcpy(context->commandBuffer,
 8009836:	4619      	mov	r1, r3
 8009838:	f009 f9fe 	bl	8012c38 <strcpy>
			context->commandBufferIndex = strlen(context->commandBuffer);
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	4618      	mov	r0, r3
 8009840:	f7fe fcd0 	bl	80081e4 <strlen>
 8009844:	4603      	mov	r3, r0
 8009846:	b29a      	uxth	r2, r3
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 800984e:	e006      	b.n	800985e <process_command+0x116>
		} else {
			context->commandBuffer[0] = '\0';
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	2200      	movs	r2, #0
 8009854:	701a      	strb	r2, [r3, #0]
			context->commandBufferIndex = 0;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2200      	movs	r2, #0
 800985a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		}

		// Clear current line and display updated command
		UART_SendStringRing(UART_CMDLINE, "\033[2K"); // Clear entire line
 800985e:	4b86      	ldr	r3, [pc, #536]	@ (8009a78 <process_command+0x330>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4986      	ldr	r1, [pc, #536]	@ (8009a7c <process_command+0x334>)
 8009864:	4618      	mov	r0, r3
 8009866:	f7ff fd9d 	bl	80093a4 <UART_SendStringRing>
		char buffer[60];
		snprintf(buffer, sizeof(buffer), "\r%s%s$ ", x_timeBuffer, NAME_SHELL);
 800986a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800986e:	f107 0008 	add.w	r0, r7, #8
 8009872:	4a7f      	ldr	r2, [pc, #508]	@ (8009a70 <process_command+0x328>)
 8009874:	9200      	str	r2, [sp, #0]
 8009876:	4a82      	ldr	r2, [pc, #520]	@ (8009a80 <process_command+0x338>)
 8009878:	213c      	movs	r1, #60	@ 0x3c
 800987a:	f009 f973 	bl	8012b64 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 800987e:	4b7e      	ldr	r3, [pc, #504]	@ (8009a78 <process_command+0x330>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f107 0208 	add.w	r2, r7, #8
 8009886:	4611      	mov	r1, r2
 8009888:	4618      	mov	r0, r3
 800988a:	f7ff fd8b 	bl	80093a4 <UART_SendStringRing>
		UART_SendStringRing(UART_CMDLINE, context->commandBuffer); // Display updated command
 800988e:	4b7a      	ldr	r3, [pc, #488]	@ (8009a78 <process_command+0x330>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	4611      	mov	r1, r2
 8009896:	4618      	mov	r0, r3
 8009898:	f7ff fd84 	bl	80093a4 <UART_SendStringRing>
 800989c:	e1c8      	b.n	8009c30 <process_command+0x4e8>
		return;
	} else if (rxData == 0x3D) // '=' key (history down)
 800989e:	79fb      	ldrb	r3, [r7, #7]
 80098a0:	2b3d      	cmp	r3, #61	@ 0x3d
 80098a2:	d16e      	bne.n	8009982 <process_command+0x23a>
	{
		// Get Software DateTime
		s_DateTime rtcTime = { 0 };
 80098a4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80098a8:	2200      	movs	r2, #0
 80098aa:	601a      	str	r2, [r3, #0]
 80098ac:	809a      	strh	r2, [r3, #4]
		DateTime_GetRTC(&rtcTime);
 80098ae:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80098b2:	4618      	mov	r0, r3
 80098b4:	f002 fb9e 	bl	800bff4 <DateTime_GetRTC>
		char x_timeBuffer[30];
		snprintf(x_timeBuffer, sizeof(x_timeBuffer), "[%02u:%02u:%02u]",
				rtcTime.hour, rtcTime.minute, rtcTime.second);
 80098b8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
		snprintf(x_timeBuffer, sizeof(x_timeBuffer), "[%02u:%02u:%02u]",
 80098bc:	4619      	mov	r1, r3
				rtcTime.hour, rtcTime.minute, rtcTime.second);
 80098be:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80098c2:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
		snprintf(x_timeBuffer, sizeof(x_timeBuffer), "[%02u:%02u:%02u]",
 80098c6:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80098ca:	9201      	str	r2, [sp, #4]
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	460b      	mov	r3, r1
 80098d0:	4a66      	ldr	r2, [pc, #408]	@ (8009a6c <process_command+0x324>)
 80098d2:	211e      	movs	r1, #30
 80098d4:	f009 f946 	bl	8012b64 <sniprintf>
		if (context->historyIndex < context->historyCount) {
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	f8b3 2244 	ldrh.w	r2, [r3, #580]	@ 0x244
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d207      	bcs.n	80098f8 <process_command+0x1b0>
			context->historyIndex++;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	f8b3 3244 	ldrh.w	r3, [r3, #580]	@ 0x244
 80098ee:	3301      	adds	r3, #1
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	f8a3 2244 	strh.w	r2, [r3, #580]	@ 0x244
		}

		// Load history command
		if (context->historyIndex < context->historyCount) {
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	f8b3 2244 	ldrh.w	r2, [r3, #580]	@ 0x244
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 8009904:	429a      	cmp	r2, r3
 8009906:	d215      	bcs.n	8009934 <process_command+0x1ec>
			strcpy(context->commandBuffer,
 8009908:	6838      	ldr	r0, [r7, #0]
					context->commandHistory[context->historyIndex]);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	f8b3 3244 	ldrh.w	r3, [r3, #580]	@ 0x244
 8009910:	3301      	adds	r3, #1
 8009912:	019b      	lsls	r3, r3, #6
 8009914:	683a      	ldr	r2, [r7, #0]
 8009916:	4413      	add	r3, r2
 8009918:	3302      	adds	r3, #2
			strcpy(context->commandBuffer,
 800991a:	4619      	mov	r1, r3
 800991c:	f009 f98c 	bl	8012c38 <strcpy>
			context->commandBufferIndex = strlen(context->commandBuffer);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	4618      	mov	r0, r3
 8009924:	f7fe fc5e 	bl	80081e4 <strlen>
 8009928:	4603      	mov	r3, r0
 800992a:	b29a      	uxth	r2, r3
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8009932:	e006      	b.n	8009942 <process_command+0x1fa>
		} else {
			context->commandBuffer[0] = '\0';
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	2200      	movs	r2, #0
 8009938:	701a      	strb	r2, [r3, #0]
			context->commandBufferIndex = 0;
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	2200      	movs	r2, #0
 800993e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		}

		// Clear current line and display updated command
		UART_SendStringRing(UART_CMDLINE, "\033[2K"); // Clear entire line
 8009942:	4b4d      	ldr	r3, [pc, #308]	@ (8009a78 <process_command+0x330>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	494d      	ldr	r1, [pc, #308]	@ (8009a7c <process_command+0x334>)
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff fd2b 	bl	80093a4 <UART_SendStringRing>
		char buffer[60];
		snprintf(buffer, sizeof(buffer), "\r%s%s$ ", x_timeBuffer, NAME_SHELL);
 800994e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009952:	f107 0008 	add.w	r0, r7, #8
 8009956:	4a46      	ldr	r2, [pc, #280]	@ (8009a70 <process_command+0x328>)
 8009958:	9200      	str	r2, [sp, #0]
 800995a:	4a49      	ldr	r2, [pc, #292]	@ (8009a80 <process_command+0x338>)
 800995c:	213c      	movs	r1, #60	@ 0x3c
 800995e:	f009 f901 	bl	8012b64 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 8009962:	4b45      	ldr	r3, [pc, #276]	@ (8009a78 <process_command+0x330>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f107 0208 	add.w	r2, r7, #8
 800996a:	4611      	mov	r1, r2
 800996c:	4618      	mov	r0, r3
 800996e:	f7ff fd19 	bl	80093a4 <UART_SendStringRing>
		UART_SendStringRing(UART_CMDLINE, context->commandBuffer); // Display updated command
 8009972:	4b41      	ldr	r3, [pc, #260]	@ (8009a78 <process_command+0x330>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	4611      	mov	r1, r2
 800997a:	4618      	mov	r0, r3
 800997c:	f7ff fd12 	bl	80093a4 <UART_SendStringRing>
 8009980:	e156      	b.n	8009c30 <process_command+0x4e8>
		return;
	}

	// Handle individual key presses
	if (((rxData >= 32 && rxData <= 126) || rxData == KEY_ENTER
 8009982:	79fb      	ldrb	r3, [r7, #7]
 8009984:	2b1f      	cmp	r3, #31
 8009986:	d902      	bls.n	800998e <process_command+0x246>
 8009988:	79fb      	ldrb	r3, [r7, #7]
 800998a:	2b7e      	cmp	r3, #126	@ 0x7e
 800998c:	d906      	bls.n	800999c <process_command+0x254>
 800998e:	79fb      	ldrb	r3, [r7, #7]
 8009990:	2b0d      	cmp	r3, #13
 8009992:	d003      	beq.n	800999c <process_command+0x254>
			|| rxData == KEY_BACKSPACE) && rxData != 0x2D && rxData != 0x3D
 8009994:	79fb      	ldrb	r3, [r7, #7]
 8009996:	2b7f      	cmp	r3, #127	@ 0x7f
 8009998:	f040 814a 	bne.w	8009c30 <process_command+0x4e8>
 800999c:	79fb      	ldrb	r3, [r7, #7]
 800999e:	2b2d      	cmp	r3, #45	@ 0x2d
 80099a0:	f000 8146 	beq.w	8009c30 <process_command+0x4e8>
 80099a4:	79fb      	ldrb	r3, [r7, #7]
 80099a6:	2b3d      	cmp	r3, #61	@ 0x3d
 80099a8:	f000 8142 	beq.w	8009c30 <process_command+0x4e8>
			&& rxData != 0x5C) {
 80099ac:	79fb      	ldrb	r3, [r7, #7]
 80099ae:	2b5c      	cmp	r3, #92	@ 0x5c
 80099b0:	f000 813e 	beq.w	8009c30 <process_command+0x4e8>
		// Get Software DateTime
		s_DateTime rtcTime = { 0 };
 80099b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80099b8:	2200      	movs	r2, #0
 80099ba:	601a      	str	r2, [r3, #0]
 80099bc:	809a      	strh	r2, [r3, #4]
		DateTime_GetRTC(&rtcTime);
 80099be:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80099c2:	4618      	mov	r0, r3
 80099c4:	f002 fb16 	bl	800bff4 <DateTime_GetRTC>
		char x_timeBuffer[30];
		snprintf(x_timeBuffer, sizeof(x_timeBuffer), "[%02u:%02u:%02u]",
				rtcTime.hour, rtcTime.minute, rtcTime.second);
 80099c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
		snprintf(x_timeBuffer, sizeof(x_timeBuffer), "[%02u:%02u:%02u]",
 80099cc:	4619      	mov	r1, r3
				rtcTime.hour, rtcTime.minute, rtcTime.second);
 80099ce:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80099d2:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
		snprintf(x_timeBuffer, sizeof(x_timeBuffer), "[%02u:%02u:%02u]",
 80099d6:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80099da:	9201      	str	r2, [sp, #4]
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	460b      	mov	r3, r1
 80099e0:	4a22      	ldr	r2, [pc, #136]	@ (8009a6c <process_command+0x324>)
 80099e2:	211e      	movs	r1, #30
 80099e4:	f009 f8be 	bl	8012b64 <sniprintf>
		if (rxData == KEY_ENTER) {
 80099e8:	79fb      	ldrb	r3, [r7, #7]
 80099ea:	2b0d      	cmp	r3, #13
 80099ec:	f040 80c9 	bne.w	8009b82 <process_command+0x43a>
			if (context->commandBufferIndex > 0) {
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f000 80ae 	beq.w	8009b58 <process_command+0x410>
				context->commandBuffer[context->commandBufferIndex] = '\0';
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009a02:	461a      	mov	r2, r3
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	2100      	movs	r1, #0
 8009a08:	5499      	strb	r1, [r3, r2]
				// Save to history
				if (context->historyCount == 0
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d010      	beq.n	8009a36 <process_command+0x2ee>
						|| strcmp(
								context->commandHistory[context->historyCount
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
										- 1], context->commandBuffer) != 0) {
 8009a1a:	3b01      	subs	r3, #1
								context->commandHistory[context->historyCount
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	019b      	lsls	r3, r3, #6
 8009a20:	683a      	ldr	r2, [r7, #0]
 8009a22:	4413      	add	r3, r2
 8009a24:	3302      	adds	r3, #2
										- 1], context->commandBuffer) != 0) {
 8009a26:	683a      	ldr	r2, [r7, #0]
						|| strcmp(
 8009a28:	4611      	mov	r1, r2
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe fbd0 	bl	80081d0 <strcmp>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d04d      	beq.n	8009ad2 <process_command+0x38a>
					if (context->historyCount < MAX_HISTORY) {
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 8009a3c:	2b07      	cmp	r3, #7
 8009a3e:	d821      	bhi.n	8009a84 <process_command+0x33c>
						strcpy(context->commandHistory[context->historyCount],
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 8009a46:	3301      	adds	r3, #1
 8009a48:	019b      	lsls	r3, r3, #6
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	3302      	adds	r3, #2
								context->commandBuffer);
 8009a50:	683a      	ldr	r2, [r7, #0]
						strcpy(context->commandHistory[context->historyCount],
 8009a52:	4611      	mov	r1, r2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f009 f8ef 	bl	8012c38 <strcpy>
						context->historyCount++;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 8009a60:	3301      	adds	r3, #1
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	f8a3 2242 	strh.w	r2, [r3, #578]	@ 0x242
 8009a6a:	e032      	b.n	8009ad2 <process_command+0x38a>
 8009a6c:	080140e0 	.word	0x080140e0
 8009a70:	080140c0 	.word	0x080140c0
 8009a74:	080140f4 	.word	0x080140f4
 8009a78:	200034a4 	.word	0x200034a4
 8009a7c:	08014100 	.word	0x08014100
 8009a80:	08014108 	.word	0x08014108
					} else {
						for (int i = 0; i < MAX_HISTORY - 1; i++) {
 8009a84:	2300      	movs	r3, #0
 8009a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a8a:	e016      	b.n	8009aba <process_command+0x372>
							strcpy(context->commandHistory[i],
 8009a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a90:	3301      	adds	r3, #1
 8009a92:	019b      	lsls	r3, r3, #6
 8009a94:	683a      	ldr	r2, [r7, #0]
 8009a96:	4413      	add	r3, r2
 8009a98:	1c98      	adds	r0, r3, #2
									context->commandHistory[i + 1]);
 8009a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	019b      	lsls	r3, r3, #6
 8009aa4:	683a      	ldr	r2, [r7, #0]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	3302      	adds	r3, #2
							strcpy(context->commandHistory[i],
 8009aaa:	4619      	mov	r1, r3
 8009aac:	f009 f8c4 	bl	8012c38 <strcpy>
						for (int i = 0; i < MAX_HISTORY - 1; i++) {
 8009ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009abe:	2b06      	cmp	r3, #6
 8009ac0:	dde4      	ble.n	8009a8c <process_command+0x344>
						}
						strcpy(context->commandHistory[MAX_HISTORY - 1],
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	f203 2302 	addw	r3, r3, #514	@ 0x202
								context->commandBuffer);
 8009ac8:	683a      	ldr	r2, [r7, #0]
						strcpy(context->commandHistory[MAX_HISTORY - 1],
 8009aca:	4611      	mov	r1, r2
 8009acc:	4618      	mov	r0, r3
 8009ace:	f009 f8b3 	bl	8012c38 <strcpy>
					}
				}
				context->historyIndex = context->historyCount;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	f8b3 2242 	ldrh.w	r2, [r3, #578]	@ 0x242
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	f8a3 2244 	strh.w	r2, [r3, #580]	@ 0x244

				// Process command
				int8_t ret_val = CmdLineProcess(context->commandBuffer);
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7ff fd0f 	bl	8009504 <CmdLineProcess>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
				if (ret_val == CMDLINE_NONE_RETURN) {
 8009aec:	f997 30e3 	ldrsb.w	r3, [r7, #227]	@ 0xe3
 8009af0:	2b06      	cmp	r3, #6
 8009af2:	f000 809d 	beq.w	8009c30 <process_command+0x4e8>
				} else {
					char buffer[60];
					snprintf(buffer, sizeof(buffer), "\r\n--> Return: ");
 8009af6:	f107 0308 	add.w	r3, r7, #8
 8009afa:	4a4f      	ldr	r2, [pc, #316]	@ (8009c38 <process_command+0x4f0>)
 8009afc:	213c      	movs	r1, #60	@ 0x3c
 8009afe:	4618      	mov	r0, r3
 8009b00:	f009 f830 	bl	8012b64 <sniprintf>
					UART_SendStringRing(UART_CMDLINE, buffer);
 8009b04:	4b4d      	ldr	r3, [pc, #308]	@ (8009c3c <process_command+0x4f4>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f107 0208 	add.w	r2, r7, #8
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7ff fc48 	bl	80093a4 <UART_SendStringRing>
					UART_SendStringRing(UART_CMDLINE, ErrorCode[ret_val]); //
 8009b14:	4b49      	ldr	r3, [pc, #292]	@ (8009c3c <process_command+0x4f4>)
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	f997 30e3 	ldrsb.w	r3, [r7, #227]	@ 0xe3
 8009b1c:	4948      	ldr	r1, [pc, #288]	@ (8009c40 <process_command+0x4f8>)
 8009b1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009b22:	4619      	mov	r1, r3
 8009b24:	4610      	mov	r0, r2
 8009b26:	f7ff fc3d 	bl	80093a4 <UART_SendStringRing>
					snprintf(buffer, sizeof(buffer), "%s%s$ ", x_timeBuffer,
 8009b2a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009b2e:	f107 0008 	add.w	r0, r7, #8
 8009b32:	4a44      	ldr	r2, [pc, #272]	@ (8009c44 <process_command+0x4fc>)
 8009b34:	9200      	str	r2, [sp, #0]
 8009b36:	4a44      	ldr	r2, [pc, #272]	@ (8009c48 <process_command+0x500>)
 8009b38:	213c      	movs	r1, #60	@ 0x3c
 8009b3a:	f009 f813 	bl	8012b64 <sniprintf>
					NAME_SHELL);
					UART_SendStringRing(UART_CMDLINE, buffer);
 8009b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8009c3c <process_command+0x4f4>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f107 0208 	add.w	r2, r7, #8
 8009b46:	4611      	mov	r1, r2
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7ff fc2b 	bl	80093a4 <UART_SendStringRing>
					context->commandBufferIndex = 0;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8009b56:	e06b      	b.n	8009c30 <process_command+0x4e8>
				}
			} else {
				ResetConfig();
 8009b58:	f000 f87e 	bl	8009c58 <ResetConfig>
				char buffer[60];
				snprintf(buffer, sizeof(buffer), "\r\n%s%s$ ", x_timeBuffer,
 8009b5c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009b60:	f107 0008 	add.w	r0, r7, #8
 8009b64:	4a37      	ldr	r2, [pc, #220]	@ (8009c44 <process_command+0x4fc>)
 8009b66:	9200      	str	r2, [sp, #0]
 8009b68:	4a38      	ldr	r2, [pc, #224]	@ (8009c4c <process_command+0x504>)
 8009b6a:	213c      	movs	r1, #60	@ 0x3c
 8009b6c:	f008 fffa 	bl	8012b64 <sniprintf>
				NAME_SHELL);
				UART_SendStringRing(UART_CMDLINE, buffer);
 8009b70:	4b32      	ldr	r3, [pc, #200]	@ (8009c3c <process_command+0x4f4>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f107 0208 	add.w	r2, r7, #8
 8009b78:	4611      	mov	r1, r2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7ff fc12 	bl	80093a4 <UART_SendStringRing>
 8009b80:	e056      	b.n	8009c30 <process_command+0x4e8>
			}
		} else if (rxData == KEY_BACKSPACE) {
 8009b82:	79fb      	ldrb	r3, [r7, #7]
 8009b84:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b86:	d11b      	bne.n	8009bc0 <process_command+0x478>
			if (context->commandBufferIndex > 0) {
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00f      	beq.n	8009bb2 <process_command+0x46a>
				context->commandBufferIndex--;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
				context->commandBuffer[context->commandBufferIndex] = '\0';
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009ba8:	461a      	mov	r2, r3
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	2100      	movs	r1, #0
 8009bae:	5499      	strb	r1, [r3, r2]
 8009bb0:	e03e      	b.n	8009c30 <process_command+0x4e8>
			} else {
				UART_SendStringRing(UART_CMDLINE, " ");
 8009bb2:	4b22      	ldr	r3, [pc, #136]	@ (8009c3c <process_command+0x4f4>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4926      	ldr	r1, [pc, #152]	@ (8009c50 <process_command+0x508>)
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7ff fbf3 	bl	80093a4 <UART_SendStringRing>
 8009bbe:	e037      	b.n	8009c30 <process_command+0x4e8>
			}
		} else {
			if (context->commandBufferIndex < COMMAND_MAX_LENGTH - 1) {
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009bc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8009bc8:	d813      	bhi.n	8009bf2 <process_command+0x4aa>
				context->commandBuffer[context->commandBufferIndex++] = rxData;
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009bd0:	1c5a      	adds	r2, r3, #1
 8009bd2:	b291      	uxth	r1, r2
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 8009bda:	4619      	mov	r1, r3
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	79fa      	ldrb	r2, [r7, #7]
 8009be0:	545a      	strb	r2, [r3, r1]
				context->commandBuffer[context->commandBufferIndex] = '\0';
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009be8:	461a      	mov	r2, r3
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	2100      	movs	r1, #0
 8009bee:	5499      	strb	r1, [r3, r2]
 8009bf0:	e01e      	b.n	8009c30 <process_command+0x4e8>
			} else {
				// Command too long
				UART_SendStringRing(UART_CMDLINE,
 8009bf2:	4b12      	ldr	r3, [pc, #72]	@ (8009c3c <process_command+0x4f4>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4917      	ldr	r1, [pc, #92]	@ (8009c54 <process_command+0x50c>)
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff fbd3 	bl	80093a4 <UART_SendStringRing>
						"\r\nError: Command too long.");
				char buffer[60];
				snprintf(buffer, sizeof(buffer), "\r\n%s%s$ ", x_timeBuffer,
 8009bfe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009c02:	f107 0008 	add.w	r0, r7, #8
 8009c06:	4a0f      	ldr	r2, [pc, #60]	@ (8009c44 <process_command+0x4fc>)
 8009c08:	9200      	str	r2, [sp, #0]
 8009c0a:	4a10      	ldr	r2, [pc, #64]	@ (8009c4c <process_command+0x504>)
 8009c0c:	213c      	movs	r1, #60	@ 0x3c
 8009c0e:	f008 ffa9 	bl	8012b64 <sniprintf>
				NAME_SHELL);
				UART_SendStringRing(UART_CMDLINE, buffer);
 8009c12:	4b0a      	ldr	r3, [pc, #40]	@ (8009c3c <process_command+0x4f4>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f107 0208 	add.w	r2, r7, #8
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7ff fbc1 	bl	80093a4 <UART_SendStringRing>
				context->commandBufferIndex = 0;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
				context->commandBuffer[0] = '\0';
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8009c30:	37e8      	adds	r7, #232	@ 0xe8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	08014110 	.word	0x08014110
 8009c3c:	200034a4 	.word	0x200034a4
 8009c40:	20000048 	.word	0x20000048
 8009c44:	080140c0 	.word	0x080140c0
 8009c48:	08014120 	.word	0x08014120
 8009c4c:	080140f4 	.word	0x080140f4
 8009c50:	08014128 	.word	0x08014128
 8009c54:	0801412c 	.word	0x0801412c

08009c58 <ResetConfig>:

static void ResetConfig(void) {
 8009c58:	b480      	push	{r7}
 8009c5a:	af00      	add	r7, sp, #0
	laser_interval = 0;
 8009c5c:	4b12      	ldr	r3, [pc, #72]	@ (8009ca8 <ResetConfig+0x50>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	601a      	str	r2, [r3, #0]
	run_system = 0;
 8009c62:	4b12      	ldr	r3, [pc, #72]	@ (8009cac <ResetConfig+0x54>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	701a      	strb	r2, [r3, #0]
	run_adc = 0;
 8009c68:	4b11      	ldr	r3, [pc, #68]	@ (8009cb0 <ResetConfig+0x58>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	701a      	strb	r2, [r3, #0]
	adc_interval = 0;
 8009c6e:	4b11      	ldr	r3, [pc, #68]	@ (8009cb4 <ResetConfig+0x5c>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	601a      	str	r2, [r3, #0]
	pair_slot = 1;
 8009c74:	4b10      	ldr	r3, [pc, #64]	@ (8009cb8 <ResetConfig+0x60>)
 8009c76:	2201      	movs	r2, #1
 8009c78:	701a      	strb	r2, [r3, #0]
	current_column = 1;
 8009c7a:	4b10      	ldr	r3, [pc, #64]	@ (8009cbc <ResetConfig+0x64>)
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	701a      	strb	r2, [r3, #0]
	current_row = 1;
 8009c80:	4b0f      	ldr	r3, [pc, #60]	@ (8009cc0 <ResetConfig+0x68>)
 8009c82:	2201      	movs	r2, #1
 8009c84:	701a      	strb	r2, [r3, #0]
	user_delay = 0;
 8009c86:	4b0f      	ldr	r3, [pc, #60]	@ (8009cc4 <ResetConfig+0x6c>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	601a      	str	r2, [r3, #0]
	rest_time = 0;
 8009c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8009cc8 <ResetConfig+0x70>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	601a      	str	r2, [r3, #0]
	run_inf = 0;
 8009c92:	4b0e      	ldr	r3, [pc, #56]	@ (8009ccc <ResetConfig+0x74>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	701a      	strb	r2, [r3, #0]
	do_time = 0;
 8009c98:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd0 <ResetConfig+0x78>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	701a      	strb	r2, [r3, #0]
}
 8009c9e:	bf00      	nop
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	200034ec 	.word	0x200034ec
 8009cac:	200034f0 	.word	0x200034f0
 8009cb0:	200034f1 	.word	0x200034f1
 8009cb4:	200034f4 	.word	0x200034f4
 8009cb8:	2000022c 	.word	0x2000022c
 8009cbc:	2000022d 	.word	0x2000022d
 8009cc0:	2000022e 	.word	0x2000022e
 8009cc4:	200034f8 	.word	0x200034f8
 8009cc8:	200034fc 	.word	0x200034fc
 8009ccc:	20003501 	.word	0x20003501
 8009cd0:	20003500 	.word	0x20003500

08009cd4 <Cmd_help>:

/*-----------------------COMMAND FUNCTION LIST---------------------------*/
/* Command support */
int Cmd_help(int argc, char *argv[]) {
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b0cc      	sub	sp, #304	@ 0x130
 8009cd8:	af04      	add	r7, sp, #16
 8009cda:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009cde:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009ce2:	6018      	str	r0, [r3, #0]
 8009ce4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009ce8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8009cec:	6019      	str	r1, [r3, #0]
//	LL_SPI_TransmitData8(SPI1, 0x01);
	if (argc > 2)
 8009cee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009cf2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	dd01      	ble.n	8009d00 <Cmd_help+0x2c>
		return CMDLINE_TOO_MANY_ARGS;
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	e063      	b.n	8009dc8 <Cmd_help+0xf4>
	UART_SendStringRing(UART_CMDLINE, "\r\nAvailable commands:");
 8009d00:	4b34      	ldr	r3, [pc, #208]	@ (8009dd4 <Cmd_help+0x100>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4934      	ldr	r1, [pc, #208]	@ (8009dd8 <Cmd_help+0x104>)
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7ff fb4c 	bl	80093a4 <UART_SendStringRing>
	tCmdLineEntry *pEntry = &g_psCmdTable[0];
 8009d0c:	4b33      	ldr	r3, [pc, #204]	@ (8009ddc <Cmd_help+0x108>)
 8009d0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	size_t maxCmdLength = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	while (pEntry->pcCmd) {
 8009d18:	e016      	b.n	8009d48 <Cmd_help+0x74>
		size_t cmdLength = strlen(pEntry->pcCmd);
 8009d1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7fe fa5f 	bl	80081e4 <strlen>
 8009d26:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
		if (cmdLength > maxCmdLength) {
 8009d2a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8009d2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d903      	bls.n	8009d3e <Cmd_help+0x6a>
			maxCmdLength = cmdLength;
 8009d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d3a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
		}
		pEntry++;
 8009d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d42:	330c      	adds	r3, #12
 8009d44:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	while (pEntry->pcCmd) {
 8009d48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1e3      	bne.n	8009d1a <Cmd_help+0x46>
	}
	pEntry = &g_psCmdTable[0];
 8009d52:	4b22      	ldr	r3, [pc, #136]	@ (8009ddc <Cmd_help+0x108>)
 8009d54:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	while (pEntry->pcCmd) {
 8009d58:	e030      	b.n	8009dbc <Cmd_help+0xe8>
		char buffer[256];
		size_t cmdLength = strlen(pEntry->pcCmd);
 8009d5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fe fa3f 	bl	80081e4 <strlen>
 8009d66:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
		int padding = (int) (maxCmdLength - cmdLength + 4);
 8009d6a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	3304      	adds	r3, #4
 8009d76:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		snprintf(buffer, sizeof(buffer), "\r\n[%s]%*s: %s", pEntry->pcCmd,
 8009d7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f107 000c 	add.w	r0, r7, #12
 8009d8a:	9302      	str	r3, [sp, #8]
 8009d8c:	4b14      	ldr	r3, [pc, #80]	@ (8009de0 <Cmd_help+0x10c>)
 8009d8e:	9301      	str	r3, [sp, #4]
 8009d90:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	4613      	mov	r3, r2
 8009d98:	4a12      	ldr	r2, [pc, #72]	@ (8009de4 <Cmd_help+0x110>)
 8009d9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009d9e:	f008 fee1 	bl	8012b64 <sniprintf>
				padding, "", pEntry->pcHelp);
		UART_SendStringRing(UART_CMDLINE, buffer);
 8009da2:	4b0c      	ldr	r3, [pc, #48]	@ (8009dd4 <Cmd_help+0x100>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f107 020c 	add.w	r2, r7, #12
 8009daa:	4611      	mov	r1, r2
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7ff faf9 	bl	80093a4 <UART_SendStringRing>
		pEntry++;
 8009db2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009db6:	330c      	adds	r3, #12
 8009db8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	while (pEntry->pcCmd) {
 8009dbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1c9      	bne.n	8009d5a <Cmd_help+0x86>
	}
	return (CMDLINE_OK);
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	200034a4 	.word	0x200034a4
 8009dd8:	08014148 	.word	0x08014148
 8009ddc:	20000060 	.word	0x20000060
 8009de0:	08014170 	.word	0x08014170
 8009de4:	08014160 	.word	0x08014160

08009de8 <Cmd_system_reset>:
int Cmd_system_reset(int argc, char *argv[]) {
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009df2:	b672      	cpsid	i
}
 8009df4:	bf00      	nop
	__disable_irq();

	// Tắt tất cả các ngắt và xóa pending interrupts
	for (uint8_t i = 0; i < 8; i++) {
 8009df6:	2300      	movs	r3, #0
 8009df8:	73fb      	strb	r3, [r7, #15]
 8009dfa:	e010      	b.n	8009e1e <Cmd_system_reset+0x36>
		NVIC->ICER[i] = 0xFFFFFFFF;  // Tắt tất cả các IRQ
 8009dfc:	4a15      	ldr	r2, [pc, #84]	@ (8009e54 <Cmd_system_reset+0x6c>)
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
 8009e00:	3320      	adds	r3, #32
 8009e02:	f04f 31ff 	mov.w	r1, #4294967295
 8009e06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		NVIC->ICPR[i] = 0xFFFFFFFF;  // Xóa tất cả pending IRQ
 8009e0a:	4a12      	ldr	r2, [pc, #72]	@ (8009e54 <Cmd_system_reset+0x6c>)
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	3360      	adds	r3, #96	@ 0x60
 8009e10:	f04f 31ff 	mov.w	r1, #4294967295
 8009e14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i = 0; i < 8; i++) {
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	73fb      	strb	r3, [r7, #15]
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
 8009e20:	2b07      	cmp	r3, #7
 8009e22:	d9eb      	bls.n	8009dfc <Cmd_system_reset+0x14>
	}

	LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_USART1);
 8009e24:	2010      	movs	r0, #16
 8009e26:	f7ff fbfd 	bl	8009624 <LL_APB2_GRP1_ForceReset>
	LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_USART1);
 8009e2a:	2010      	movs	r0, #16
 8009e2c:	f7ff fc0c 	bl	8009648 <LL_APB2_GRP1_ReleaseReset>

	HAL_RCC_DeInit();
 8009e30:	f006 fc02 	bl	8010638 <HAL_RCC_DeInit>
	HAL_DeInit();
 8009e34:	f005 fe96 	bl	800fb64 <HAL_DeInit>

	SysTick->CTRL = 0;
 8009e38:	4b07      	ldr	r3, [pc, #28]	@ (8009e58 <Cmd_system_reset+0x70>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8009e3e:	4b06      	ldr	r3, [pc, #24]	@ (8009e58 <Cmd_system_reset+0x70>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;  // Đảm bảo bộ đếm cũng reset về 0
 8009e44:	4b04      	ldr	r3, [pc, #16]	@ (8009e58 <Cmd_system_reset+0x70>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8009e4a:	b662      	cpsie	i
}
 8009e4c:	bf00      	nop

	__enable_irq();
	// Tắt SysTick
	NVIC_SystemReset();
 8009e4e:	f7ff fbb5 	bl	80095bc <__NVIC_SystemReset>
 8009e52:	bf00      	nop
 8009e54:	e000e100 	.word	0xe000e100
 8009e58:	e000e010 	.word	0xe000e010

08009e5c <Cmd_alive_check>:
	return CMDLINE_OK;
}
int Cmd_alive_check(int argc, char *argv[]) {
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
	UART_SendStringRing(UART_CMDLINE, "\r\n--> EXP_110 READY <--");
 8009e66:	4b05      	ldr	r3, [pc, #20]	@ (8009e7c <Cmd_alive_check+0x20>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4905      	ldr	r1, [pc, #20]	@ (8009e80 <Cmd_alive_check+0x24>)
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7ff fa99 	bl	80093a4 <UART_SendStringRing>
	return CMDLINE_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3708      	adds	r7, #8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	200034a4 	.word	0x200034a4
 8009e80:	08014174 	.word	0x08014174

08009e84 <Cmd_ota_boot>:
int Cmd_ota_boot(int argc, char *argv[]) {
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e8e:	b672      	cpsid	i
}
 8009e90:	bf00      	nop
	__disable_irq();

	// Tắt tất cả các ngắt và xóa pending interrupts
	for (uint8_t i = 0; i < 8; i++) {
 8009e92:	2300      	movs	r3, #0
 8009e94:	73fb      	strb	r3, [r7, #15]
 8009e96:	e010      	b.n	8009eba <Cmd_ota_boot+0x36>
		NVIC->ICER[i] = 0xFFFFFFFF;  // Tắt tất cả các IRQ
 8009e98:	4a15      	ldr	r2, [pc, #84]	@ (8009ef0 <Cmd_ota_boot+0x6c>)
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
 8009e9c:	3320      	adds	r3, #32
 8009e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8009ea2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		NVIC->ICPR[i] = 0xFFFFFFFF;  // Xóa tất cả pending IRQ
 8009ea6:	4a12      	ldr	r2, [pc, #72]	@ (8009ef0 <Cmd_ota_boot+0x6c>)
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
 8009eaa:	3360      	adds	r3, #96	@ 0x60
 8009eac:	f04f 31ff 	mov.w	r1, #4294967295
 8009eb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i = 0; i < 8; i++) {
 8009eb4:	7bfb      	ldrb	r3, [r7, #15]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	73fb      	strb	r3, [r7, #15]
 8009eba:	7bfb      	ldrb	r3, [r7, #15]
 8009ebc:	2b07      	cmp	r3, #7
 8009ebe:	d9eb      	bls.n	8009e98 <Cmd_ota_boot+0x14>
	}

	LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_USART1);
 8009ec0:	2010      	movs	r0, #16
 8009ec2:	f7ff fbaf 	bl	8009624 <LL_APB2_GRP1_ForceReset>
	LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_USART1);
 8009ec6:	2010      	movs	r0, #16
 8009ec8:	f7ff fbbe 	bl	8009648 <LL_APB2_GRP1_ReleaseReset>

	HAL_RCC_DeInit();
 8009ecc:	f006 fbb4 	bl	8010638 <HAL_RCC_DeInit>
	HAL_DeInit();
 8009ed0:	f005 fe48 	bl	800fb64 <HAL_DeInit>

	SysTick->CTRL = 0;
 8009ed4:	4b07      	ldr	r3, [pc, #28]	@ (8009ef4 <Cmd_ota_boot+0x70>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8009eda:	4b06      	ldr	r3, [pc, #24]	@ (8009ef4 <Cmd_ota_boot+0x70>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;  // Đảm bảo bộ đếm cũng reset về 0
 8009ee0:	4b04      	ldr	r3, [pc, #16]	@ (8009ef4 <Cmd_ota_boot+0x70>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8009ee6:	b662      	cpsie	i
}
 8009ee8:	bf00      	nop

	__enable_irq();
	// Tắt SysTick
	NVIC_SystemReset();
 8009eea:	f7ff fb67 	bl	80095bc <__NVIC_SystemReset>
 8009eee:	bf00      	nop
 8009ef0:	e000e100 	.word	0xe000e100
 8009ef4:	e000e010 	.word	0xe000e010

08009ef8 <Cmd_temp_pw>:
	return CMDLINE_OK;
}

/* Command for power supply */
int Cmd_temp_pw(int argc, char *argv[]) {
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
	if (argc < 3)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	dc01      	bgt.n	8009f0c <Cmd_temp_pw+0x14>
		return CMDLINE_TOO_FEW_ARGS;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e017      	b.n	8009f3c <Cmd_temp_pw+0x44>
	if (argc > 3)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b03      	cmp	r3, #3
 8009f10:	dd01      	ble.n	8009f16 <Cmd_temp_pw+0x1e>
		return CMDLINE_TOO_MANY_ARGS;
 8009f12:	2302      	movs	r3, #2
 8009f14:	e012      	b.n	8009f3c <Cmd_temp_pw+0x44>
	if (atoi(argv[1]))
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	3304      	adds	r3, #4
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f008 fd99 	bl	8012a54 <atoi>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d004      	beq.n	8009f32 <Cmd_temp_pw+0x3a>
		LL_GPIO_SetOutputPin(EF_5_EN_GPIO_Port, EF_5_EN_Pin);
 8009f28:	2110      	movs	r1, #16
 8009f2a:	4806      	ldr	r0, [pc, #24]	@ (8009f44 <Cmd_temp_pw+0x4c>)
 8009f2c:	f7ff fb5c 	bl	80095e8 <LL_GPIO_SetOutputPin>
 8009f30:	e003      	b.n	8009f3a <Cmd_temp_pw+0x42>
	else
		LL_GPIO_ResetOutputPin(EF_5_EN_GPIO_Port, EF_5_EN_Pin);
 8009f32:	2110      	movs	r1, #16
 8009f34:	4803      	ldr	r0, [pc, #12]	@ (8009f44 <Cmd_temp_pw+0x4c>)
 8009f36:	f7ff fb65 	bl	8009604 <LL_GPIO_ResetOutputPin>
	return (CMDLINE_OK);
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	40020c00 	.word	0x40020c00

08009f48 <Cmd_set_temp>:

/* Command for temperature */
int Cmd_set_temp(int argc, char *argv[]) {
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b092      	sub	sp, #72	@ 0x48
 8009f4c:	af02      	add	r7, sp, #8
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
	if (argc < 6)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b05      	cmp	r3, #5
 8009f56:	dc01      	bgt.n	8009f5c <Cmd_set_temp+0x14>
		return CMDLINE_TOO_FEW_ARGS;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	e04b      	b.n	8009ff4 <Cmd_set_temp+0xac>
	if (argc > 6)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b06      	cmp	r3, #6
 8009f60:	dd01      	ble.n	8009f66 <Cmd_set_temp+0x1e>
		return CMDLINE_TOO_MANY_ARGS;
 8009f62:	2302      	movs	r3, #2
 8009f64:	e046      	b.n	8009ff4 <Cmd_set_temp+0xac>
	int16_t setpoint[4];
	char buffer[40];
	for (uint8_t i = 0; i < 4; i++) {
 8009f66:	2300      	movs	r3, #0
 8009f68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009f6c:	e03d      	b.n	8009fea <Cmd_set_temp+0xa2>
		setpoint[i] = atoi(argv[i + 1]);
 8009f6e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009f72:	3301      	adds	r3, #1
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	4413      	add	r3, r2
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f008 fd69 	bl	8012a54 <atoi>
 8009f82:	4602      	mov	r2, r0
 8009f84:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009f88:	b212      	sxth	r2, r2
 8009f8a:	005b      	lsls	r3, r3, #1
 8009f8c:	3340      	adds	r3, #64	@ 0x40
 8009f8e:	443b      	add	r3, r7
 8009f90:	f823 2c0c 	strh.w	r2, [r3, #-12]
		temperature_set_setpoint(i, setpoint[i]);
 8009f94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009f98:	005b      	lsls	r3, r3, #1
 8009f9a:	3340      	adds	r3, #64	@ 0x40
 8009f9c:	443b      	add	r3, r7
 8009f9e:	f933 2c0c 	ldrsh.w	r2, [r3, #-12]
 8009fa2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f005 fc1b 	bl	800f7e4 <temperature_set_setpoint>
		snprintf(buffer, sizeof(buffer), "\r\n--> Setpoint[%d]: %i", i,
 8009fae:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
				setpoint[i]);
 8009fb2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009fb6:	005b      	lsls	r3, r3, #1
 8009fb8:	3340      	adds	r3, #64	@ 0x40
 8009fba:	443b      	add	r3, r7
 8009fbc:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
		snprintf(buffer, sizeof(buffer), "\r\n--> Setpoint[%d]: %i", i,
 8009fc0:	f107 000c 	add.w	r0, r7, #12
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	4a0c      	ldr	r2, [pc, #48]	@ (8009ffc <Cmd_set_temp+0xb4>)
 8009fca:	2128      	movs	r1, #40	@ 0x28
 8009fcc:	f008 fdca 	bl	8012b64 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 8009fd0:	4b0b      	ldr	r3, [pc, #44]	@ (800a000 <Cmd_set_temp+0xb8>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f107 020c 	add.w	r2, r7, #12
 8009fd8:	4611      	mov	r1, r2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7ff f9e2 	bl	80093a4 <UART_SendStringRing>
	for (uint8_t i = 0; i < 4; i++) {
 8009fe0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009fea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	d9bd      	bls.n	8009f6e <Cmd_set_temp+0x26>
	}
	return CMDLINE_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3740      	adds	r7, #64	@ 0x40
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	0801418c 	.word	0x0801418c
 800a000:	200034a4 	.word	0x200034a4

0800a004 <Cmd_get_temp>:
int Cmd_get_temp(int argc, char *argv[]) {
 800a004:	b580      	push	{r7, lr}
 800a006:	b09a      	sub	sp, #104	@ 0x68
 800a008:	af02      	add	r7, sp, #8
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
	if (argc > 2)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b02      	cmp	r3, #2
 800a012:	dd01      	ble.n	800a018 <Cmd_get_temp+0x14>
		return CMDLINE_TOO_MANY_ARGS;
 800a014:	2302      	movs	r3, #2
 800a016:	e05a      	b.n	800a0ce <Cmd_get_temp+0xca>

	int16_t temp = 0;
 800a018:	2300      	movs	r3, #0
 800a01a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
	char buffer[80];

	/* Temperature from BMP390 */
	// temp = bmp390_get_temperature();
	if (temp == 0x7FFF) {
 800a01e:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 800a022:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a026:	4293      	cmp	r3, r2
 800a028:	d106      	bne.n	800a038 <Cmd_get_temp+0x34>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> BMP390 is fail");
 800a02a:	4b2b      	ldr	r3, [pc, #172]	@ (800a0d8 <Cmd_get_temp+0xd4>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	492b      	ldr	r1, [pc, #172]	@ (800a0dc <Cmd_get_temp+0xd8>)
 800a030:	4618      	mov	r0, r3
 800a032:	f7ff f9b7 	bl	80093a4 <UART_SendStringRing>
 800a036:	e00f      	b.n	800a058 <Cmd_get_temp+0x54>
	} else {
		snprintf(buffer, sizeof(buffer), "\r\n--> BMP390 temp: %i", temp);
 800a038:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 800a03c:	f107 000c 	add.w	r0, r7, #12
 800a040:	4a27      	ldr	r2, [pc, #156]	@ (800a0e0 <Cmd_get_temp+0xdc>)
 800a042:	2150      	movs	r1, #80	@ 0x50
 800a044:	f008 fd8e 	bl	8012b64 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 800a048:	4b23      	ldr	r3, [pc, #140]	@ (800a0d8 <Cmd_get_temp+0xd4>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f107 020c 	add.w	r2, r7, #12
 800a050:	4611      	mov	r1, r2
 800a052:	4618      	mov	r0, r3
 800a054:	f7ff f9a6 	bl	80093a4 <UART_SendStringRing>
	}

	/* Temperature from NTC */
	NTC_get_temperature(NTC_Temperature);
 800a058:	4822      	ldr	r0, [pc, #136]	@ (800a0e4 <Cmd_get_temp+0xe0>)
 800a05a:	f003 f939 	bl	800d2d0 <NTC_get_temperature>
	for (uint8_t channel = 0; channel < 8; channel++) {
 800a05e:	2300      	movs	r3, #0
 800a060:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a064:	e02e      	b.n	800a0c4 <Cmd_get_temp+0xc0>
		temp = NTC_Temperature[channel];
 800a066:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a06a:	4a1e      	ldr	r2, [pc, #120]	@ (800a0e4 <Cmd_get_temp+0xe0>)
 800a06c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a070:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
		if (temp == 0x7FFF) {
 800a074:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 800a078:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d108      	bne.n	800a092 <Cmd_get_temp+0x8e>
			snprintf(buffer, sizeof(buffer), "\r\n--> NTC[%d] is fail",
 800a080:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a084:	f107 000c 	add.w	r0, r7, #12
 800a088:	4a17      	ldr	r2, [pc, #92]	@ (800a0e8 <Cmd_get_temp+0xe4>)
 800a08a:	2150      	movs	r1, #80	@ 0x50
 800a08c:	f008 fd6a 	bl	8012b64 <sniprintf>
 800a090:	e00b      	b.n	800a0aa <Cmd_get_temp+0xa6>
					channel);
		} else {
			snprintf(buffer, sizeof(buffer), "\r\n--> NTC[%d]: %i", channel,
 800a092:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800a096:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 800a09a:	f107 000c 	add.w	r0, r7, #12
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	4a12      	ldr	r2, [pc, #72]	@ (800a0ec <Cmd_get_temp+0xe8>)
 800a0a4:	2150      	movs	r1, #80	@ 0x50
 800a0a6:	f008 fd5d 	bl	8012b64 <sniprintf>
					temp);
		}
		UART_SendStringRing(UART_CMDLINE, buffer);
 800a0aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d8 <Cmd_get_temp+0xd4>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f107 020c 	add.w	r2, r7, #12
 800a0b2:	4611      	mov	r1, r2
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7ff f975 	bl	80093a4 <UART_SendStringRing>
	for (uint8_t channel = 0; channel < 8; channel++) {
 800a0ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a0be:	3301      	adds	r3, #1
 800a0c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a0c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a0c8:	2b07      	cmp	r3, #7
 800a0ca:	d9cc      	bls.n	800a066 <Cmd_get_temp+0x62>
	}
	return CMDLINE_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3760      	adds	r7, #96	@ 0x60
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	200034a4 	.word	0x200034a4
 800a0dc:	080141a4 	.word	0x080141a4
 800a0e0:	080141bc 	.word	0x080141bc
 800a0e4:	20003578 	.word	0x20003578
 800a0e8:	080141d4 	.word	0x080141d4
 800a0ec:	080141ec 	.word	0x080141ec

0800a0f0 <Cmd_get_temp_setpoint>:
int Cmd_get_temp_setpoint(int argc, char *argv[]) {
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b094      	sub	sp, #80	@ 0x50
 800a0f4:	af02      	add	r7, sp, #8
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
	if (argc > 2)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	dd01      	ble.n	800a104 <Cmd_get_temp_setpoint+0x14>
		return CMDLINE_TOO_MANY_ARGS;
 800a100:	2302      	movs	r3, #2
 800a102:	e02c      	b.n	800a15e <Cmd_get_temp_setpoint+0x6e>
	int16_t setpoint = 0;
 800a104:	2300      	movs	r3, #0
 800a106:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	char buffer[60];
	for (uint8_t channel = 0; channel < 4; channel++) {
 800a10a:	2300      	movs	r3, #0
 800a10c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a110:	e020      	b.n	800a154 <Cmd_get_temp_setpoint+0x64>
		setpoint = temperature_get_setpoint(channel);
 800a112:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a116:	4618      	mov	r0, r3
 800a118:	f005 fb7a 	bl	800f810 <temperature_get_setpoint>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		snprintf(buffer, sizeof(buffer), "\r\n--> Setpoint[%d]:%i", channel,
 800a122:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a126:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800a12a:	f107 0008 	add.w	r0, r7, #8
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	4613      	mov	r3, r2
 800a132:	4a0d      	ldr	r2, [pc, #52]	@ (800a168 <Cmd_get_temp_setpoint+0x78>)
 800a134:	213c      	movs	r1, #60	@ 0x3c
 800a136:	f008 fd15 	bl	8012b64 <sniprintf>
				setpoint);
		UART_SendStringRing(UART_CMDLINE, buffer);
 800a13a:	4b0c      	ldr	r3, [pc, #48]	@ (800a16c <Cmd_get_temp_setpoint+0x7c>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f107 0208 	add.w	r2, r7, #8
 800a142:	4611      	mov	r1, r2
 800a144:	4618      	mov	r0, r3
 800a146:	f7ff f92d 	bl	80093a4 <UART_SendStringRing>
	for (uint8_t channel = 0; channel < 4; channel++) {
 800a14a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a14e:	3301      	adds	r3, #1
 800a150:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a154:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d9da      	bls.n	800a112 <Cmd_get_temp_setpoint+0x22>
	}
	return (CMDLINE_OK);
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3748      	adds	r7, #72	@ 0x48
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	08014200 	.word	0x08014200
 800a16c:	200034a4 	.word	0x200034a4

0800a170 <Cmd_tec_init>:

/* Command for TEC */
int Cmd_tec_init(int argc, char *argv[]) {
 800a170:	b580      	push	{r7, lr}
 800a172:	b094      	sub	sp, #80	@ 0x50
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
	if (argc > 3)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	dd01      	ble.n	800a184 <Cmd_tec_init+0x14>
		return CMDLINE_TOO_MANY_ARGS;
 800a180:	2302      	movs	r3, #2
 800a182:	e097      	b.n	800a2b4 <Cmd_tec_init+0x144>
	uint32_t data = 1;
 800a184:	2301      	movs	r3, #1
 800a186:	64bb      	str	r3, [r7, #72]	@ 0x48
	char buffer[60];
	int8_t tec_init_channel = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	if (argc == 2) {
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b02      	cmp	r3, #2
 800a192:	d147      	bne.n	800a224 <Cmd_tec_init+0xb4>
		for (uint8_t channel = 0; channel < 4; channel++) {
 800a194:	2300      	movs	r3, #0
 800a196:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a19a:	e03d      	b.n	800a218 <Cmd_tec_init+0xa8>
			tec_init_channel = lt8722_init(channel);
 800a19c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f002 fc85 	bl	800cab0 <lt8722_init>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
			LL_mDelay(10);
 800a1ac:	200a      	movs	r0, #10
 800a1ae:	f008 fa91 	bl	80126d4 <LL_mDelay>
			if (!tec_init_channel)
 800a1b2:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d105      	bne.n	800a1c6 <Cmd_tec_init+0x56>
				lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
 800a1ba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a1be:	2100      	movs	r1, #0
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f002 fc24 	bl	800ca0e <lt8722_set_swen_req>
			lt8722_reg_read(channel, LT8722_SPIS_STATUS, &data);
 800a1c6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a1ca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f002 fb7b 	bl	800c8cc <lt8722_reg_read>
			if (!data)
 800a1d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d108      	bne.n	800a1ee <Cmd_tec_init+0x7e>
				snprintf(buffer, sizeof(buffer), "\r\n--> Tec %d init success",
 800a1dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a1e0:	f107 000c 	add.w	r0, r7, #12
 800a1e4:	4a35      	ldr	r2, [pc, #212]	@ (800a2bc <Cmd_tec_init+0x14c>)
 800a1e6:	213c      	movs	r1, #60	@ 0x3c
 800a1e8:	f008 fcbc 	bl	8012b64 <sniprintf>
 800a1ec:	e007      	b.n	800a1fe <Cmd_tec_init+0x8e>
						channel);
			else
				snprintf(buffer, sizeof(buffer), "\r\n--> Tec %d init fail",
 800a1ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a1f2:	f107 000c 	add.w	r0, r7, #12
 800a1f6:	4a32      	ldr	r2, [pc, #200]	@ (800a2c0 <Cmd_tec_init+0x150>)
 800a1f8:	213c      	movs	r1, #60	@ 0x3c
 800a1fa:	f008 fcb3 	bl	8012b64 <sniprintf>
						channel);
			UART_SendStringRing(UART_CMDLINE, buffer);
 800a1fe:	4b31      	ldr	r3, [pc, #196]	@ (800a2c4 <Cmd_tec_init+0x154>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f107 020c 	add.w	r2, r7, #12
 800a206:	4611      	mov	r1, r2
 800a208:	4618      	mov	r0, r3
 800a20a:	f7ff f8cb 	bl	80093a4 <UART_SendStringRing>
		for (uint8_t channel = 0; channel < 4; channel++) {
 800a20e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a212:	3301      	adds	r3, #1
 800a214:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a218:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a21c:	2b03      	cmp	r3, #3
 800a21e:	d9bd      	bls.n	800a19c <Cmd_tec_init+0x2c>
		}
		return CMDLINE_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	e047      	b.n	800a2b4 <Cmd_tec_init+0x144>
	}
	if (argc == 3) {
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b03      	cmp	r3, #3
 800a228:	d143      	bne.n	800a2b2 <Cmd_tec_init+0x142>
		uint8_t channel = atoi(argv[1]);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	3304      	adds	r3, #4
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4618      	mov	r0, r3
 800a232:	f008 fc0f 	bl	8012a54 <atoi>
 800a236:	4603      	mov	r3, r0
 800a238:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
		tec_init_channel = lt8722_init(channel);
 800a23c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800a240:	4618      	mov	r0, r3
 800a242:	f002 fc35 	bl	800cab0 <lt8722_init>
 800a246:	4603      	mov	r3, r0
 800a248:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		LL_mDelay(10);
 800a24c:	200a      	movs	r0, #10
 800a24e:	f008 fa41 	bl	80126d4 <LL_mDelay>
		if (!tec_init_channel)
 800a252:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 800a256:	2b00      	cmp	r3, #0
 800a258:	d105      	bne.n	800a266 <Cmd_tec_init+0xf6>
			lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
 800a25a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800a25e:	2100      	movs	r1, #0
 800a260:	4618      	mov	r0, r3
 800a262:	f002 fbd4 	bl	800ca0e <lt8722_set_swen_req>
		lt8722_reg_read(channel, LT8722_SPIS_STATUS, &data);
 800a266:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a26a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800a26e:	2101      	movs	r1, #1
 800a270:	4618      	mov	r0, r3
 800a272:	f002 fb2b 	bl	800c8cc <lt8722_reg_read>
		if (!data)
 800a276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d108      	bne.n	800a28e <Cmd_tec_init+0x11e>
			snprintf(buffer, sizeof(buffer), "\r\n--> Tec %d init success",
 800a27c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800a280:	f107 000c 	add.w	r0, r7, #12
 800a284:	4a0d      	ldr	r2, [pc, #52]	@ (800a2bc <Cmd_tec_init+0x14c>)
 800a286:	213c      	movs	r1, #60	@ 0x3c
 800a288:	f008 fc6c 	bl	8012b64 <sniprintf>
 800a28c:	e007      	b.n	800a29e <Cmd_tec_init+0x12e>
					channel);
		else
			snprintf(buffer, sizeof(buffer), "\r\n--> Tec %d init fail",
 800a28e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800a292:	f107 000c 	add.w	r0, r7, #12
 800a296:	4a0a      	ldr	r2, [pc, #40]	@ (800a2c0 <Cmd_tec_init+0x150>)
 800a298:	213c      	movs	r1, #60	@ 0x3c
 800a29a:	f008 fc63 	bl	8012b64 <sniprintf>
					channel);
		UART_SendStringRing(UART_CMDLINE, buffer);
 800a29e:	4b09      	ldr	r3, [pc, #36]	@ (800a2c4 <Cmd_tec_init+0x154>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f107 020c 	add.w	r2, r7, #12
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7ff f87b 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e000      	b.n	800a2b4 <Cmd_tec_init+0x144>
	}
	return CMDLINE_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3750      	adds	r7, #80	@ 0x50
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	08014218 	.word	0x08014218
 800a2c0:	08014234 	.word	0x08014234
 800a2c4:	200034a4 	.word	0x200034a4

0800a2c8 <Cmd_tec_set_vol>:

int Cmd_tec_set_vol(int argc, char *argv[]) {
 800a2c8:	b590      	push	{r4, r7, lr}
 800a2ca:	b09b      	sub	sp, #108	@ 0x6c
 800a2cc:	af02      	add	r7, sp, #8
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
	if (argc < 6)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2b05      	cmp	r3, #5
 800a2d6:	dc01      	bgt.n	800a2dc <Cmd_tec_set_vol+0x14>
		return CMDLINE_TOO_FEW_ARGS;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e041      	b.n	800a360 <Cmd_tec_set_vol+0x98>
	if (argc > 6)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b06      	cmp	r3, #6
 800a2e0:	dd01      	ble.n	800a2e6 <Cmd_tec_set_vol+0x1e>
		return CMDLINE_TOO_MANY_ARGS;
 800a2e2:	2302      	movs	r3, #2
 800a2e4:	e03c      	b.n	800a360 <Cmd_tec_set_vol+0x98>
	char buffer[80];
	for (uint8_t i = 0; i < 4; i++) {
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a2ec:	e033      	b.n	800a356 <Cmd_tec_set_vol+0x8e>
		temperature_set_tec_vol(i, atoi(argv[i + 1]));
 800a2ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f008 fba9 	bl	8012a54 <atoi>
 800a302:	4603      	mov	r3, r0
 800a304:	b29a      	uxth	r2, r3
 800a306:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a30a:	4611      	mov	r1, r2
 800a30c:	4618      	mov	r0, r3
 800a30e:	f005 fa93 	bl	800f838 <temperature_set_tec_vol>
		snprintf(buffer, sizeof(buffer), "\r\n--> Tec vol[%d]: %i mV", i,
 800a312:	f897 405f 	ldrb.w	r4, [r7, #95]	@ 0x5f
				atoi(argv[i + 1]));
 800a316:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a31a:	3301      	adds	r3, #1
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	4413      	add	r3, r2
		snprintf(buffer, sizeof(buffer), "\r\n--> Tec vol[%d]: %i mV", i,
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4618      	mov	r0, r3
 800a326:	f008 fb95 	bl	8012a54 <atoi>
 800a32a:	4603      	mov	r3, r0
 800a32c:	f107 000c 	add.w	r0, r7, #12
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	4623      	mov	r3, r4
 800a334:	4a0c      	ldr	r2, [pc, #48]	@ (800a368 <Cmd_tec_set_vol+0xa0>)
 800a336:	2150      	movs	r1, #80	@ 0x50
 800a338:	f008 fc14 	bl	8012b64 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 800a33c:	4b0b      	ldr	r3, [pc, #44]	@ (800a36c <Cmd_tec_set_vol+0xa4>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f107 020c 	add.w	r2, r7, #12
 800a344:	4611      	mov	r1, r2
 800a346:	4618      	mov	r0, r3
 800a348:	f7ff f82c 	bl	80093a4 <UART_SendStringRing>
	for (uint8_t i = 0; i < 4; i++) {
 800a34c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a350:	3301      	adds	r3, #1
 800a352:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a356:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d9c7      	bls.n	800a2ee <Cmd_tec_set_vol+0x26>
	}
	return CMDLINE_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3764      	adds	r7, #100	@ 0x64
 800a364:	46bd      	mov	sp, r7
 800a366:	bd90      	pop	{r4, r7, pc}
 800a368:	0801424c 	.word	0x0801424c
 800a36c:	200034a4 	.word	0x200034a4

0800a370 <Cmd_tec_get_vol>:

int Cmd_tec_get_vol(int argc, char *argv[]) {
 800a370:	b590      	push	{r4, r7, lr}
 800a372:	b09d      	sub	sp, #116	@ 0x74
 800a374:	af02      	add	r7, sp, #8
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
	if (argc > 2)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	dd01      	ble.n	800a384 <Cmd_tec_get_vol+0x14>
		return CMDLINE_TOO_MANY_ARGS;
 800a380:	2302      	movs	r3, #2
 800a382:	e034      	b.n	800a3ee <Cmd_tec_get_vol+0x7e>
	uint16_t vol[4];
	char buffer[80];
	for (uint8_t i = 0; i < 4; i++) {
 800a384:	2300      	movs	r3, #0
 800a386:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a38a:	e02b      	b.n	800a3e4 <Cmd_tec_get_vol+0x74>
		vol[i] = temperature_get_tec_vol(i);
 800a38c:	f897 4067 	ldrb.w	r4, [r7, #103]	@ 0x67
 800a390:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a394:	4618      	mov	r0, r3
 800a396:	f005 fa7b 	bl	800f890 <temperature_get_tec_vol>
 800a39a:	4603      	mov	r3, r0
 800a39c:	461a      	mov	r2, r3
 800a39e:	0063      	lsls	r3, r4, #1
 800a3a0:	3368      	adds	r3, #104	@ 0x68
 800a3a2:	443b      	add	r3, r7
 800a3a4:	f823 2c0c 	strh.w	r2, [r3, #-12]
		snprintf(buffer, sizeof(buffer), "\r\n--> Tec voltage[%d]: %i mV", i,
 800a3a8:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
				vol[i]);
 800a3ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a3b0:	005b      	lsls	r3, r3, #1
 800a3b2:	3368      	adds	r3, #104	@ 0x68
 800a3b4:	443b      	add	r3, r7
 800a3b6:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
		snprintf(buffer, sizeof(buffer), "\r\n--> Tec voltage[%d]: %i mV", i,
 800a3ba:	f107 000c 	add.w	r0, r7, #12
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	4a0d      	ldr	r2, [pc, #52]	@ (800a3f8 <Cmd_tec_get_vol+0x88>)
 800a3c4:	2150      	movs	r1, #80	@ 0x50
 800a3c6:	f008 fbcd 	bl	8012b64 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 800a3ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a3fc <Cmd_tec_get_vol+0x8c>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f107 020c 	add.w	r2, r7, #12
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7fe ffe5 	bl	80093a4 <UART_SendStringRing>
	for (uint8_t i = 0; i < 4; i++) {
 800a3da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a3de:	3301      	adds	r3, #1
 800a3e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a3e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a3e8:	2b03      	cmp	r3, #3
 800a3ea:	d9cf      	bls.n	800a38c <Cmd_tec_get_vol+0x1c>
	}
	return CMDLINE_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	376c      	adds	r7, #108	@ 0x6c
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd90      	pop	{r4, r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	08014268 	.word	0x08014268
 800a3fc:	200034a4 	.word	0x200034a4

0800a400 <Cmd_tec_dir>:

int Cmd_tec_dir(int argc, char *argv[]) {
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
	if (argc < 6)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2b05      	cmp	r3, #5
 800a40e:	dc01      	bgt.n	800a414 <Cmd_tec_dir+0x14>
		return CMDLINE_TOO_FEW_ARGS;
 800a410:	2303      	movs	r3, #3
 800a412:	e03f      	b.n	800a494 <Cmd_tec_dir+0x94>
	if (argc > 6)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b06      	cmp	r3, #6
 800a418:	dd01      	ble.n	800a41e <Cmd_tec_dir+0x1e>
		return CMDLINE_TOO_MANY_ARGS;
 800a41a:	2302      	movs	r3, #2
 800a41c:	e03a      	b.n	800a494 <Cmd_tec_dir+0x94>
	tec_dir_t dir_0 = atoi(argv[1]) ? TEC_HEAT : TEC_COOL;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	3304      	adds	r3, #4
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4618      	mov	r0, r3
 800a426:	f008 fb15 	bl	8012a54 <atoi>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	bf14      	ite	ne
 800a430:	2301      	movne	r3, #1
 800a432:	2300      	moveq	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	73fb      	strb	r3, [r7, #15]
	tec_dir_t dir_1 = atoi(argv[2]) ? TEC_HEAT : TEC_COOL;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	3308      	adds	r3, #8
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4618      	mov	r0, r3
 800a440:	f008 fb08 	bl	8012a54 <atoi>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	bf14      	ite	ne
 800a44a:	2301      	movne	r3, #1
 800a44c:	2300      	moveq	r3, #0
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	73bb      	strb	r3, [r7, #14]
	tec_dir_t dir_2 = atoi(argv[3]) ? TEC_HEAT : TEC_COOL;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	330c      	adds	r3, #12
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4618      	mov	r0, r3
 800a45a:	f008 fafb 	bl	8012a54 <atoi>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	bf14      	ite	ne
 800a464:	2301      	movne	r3, #1
 800a466:	2300      	moveq	r3, #0
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	737b      	strb	r3, [r7, #13]
	tec_dir_t dir_3 = atoi(argv[4]) ? TEC_HEAT : TEC_COOL;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	3310      	adds	r3, #16
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4618      	mov	r0, r3
 800a474:	f008 faee 	bl	8012a54 <atoi>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	bf14      	ite	ne
 800a47e:	2301      	movne	r3, #1
 800a480:	2300      	moveq	r3, #0
 800a482:	b2db      	uxtb	r3, r3
 800a484:	733b      	strb	r3, [r7, #12]
	tec_set_dir(dir_0, dir_1, dir_2, dir_3);
 800a486:	7b3b      	ldrb	r3, [r7, #12]
 800a488:	7b7a      	ldrb	r2, [r7, #13]
 800a48a:	7bb9      	ldrb	r1, [r7, #14]
 800a48c:	7bf8      	ldrb	r0, [r7, #15]
 800a48e:	f005 faaf 	bl	800f9f0 <tec_set_dir>
	return CMDLINE_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <Cmd_tec_ctrl>:

int Cmd_tec_ctrl(int argc, char *argv[]) {
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
	if (argc < 6)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b05      	cmp	r3, #5
 800a4aa:	dc01      	bgt.n	800a4b0 <Cmd_tec_ctrl+0x14>
		return CMDLINE_TOO_FEW_ARGS;
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	e04d      	b.n	800a54c <Cmd_tec_ctrl+0xb0>
	if (argc > 6)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b06      	cmp	r3, #6
 800a4b4:	dd01      	ble.n	800a4ba <Cmd_tec_ctrl+0x1e>
		return CMDLINE_TOO_MANY_ARGS;
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	e048      	b.n	800a54c <Cmd_tec_ctrl+0xb0>
	if (atoi(argv[1]))
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	3304      	adds	r3, #4
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f008 fac7 	bl	8012a54 <atoi>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d004      	beq.n	800a4d6 <Cmd_tec_ctrl+0x3a>
		lt8722_set_swen_req(0, LT8722_SWEN_REQ_ENABLED);
 800a4cc:	2101      	movs	r1, #1
 800a4ce:	2000      	movs	r0, #0
 800a4d0:	f002 fa9d 	bl	800ca0e <lt8722_set_swen_req>
 800a4d4:	e003      	b.n	800a4de <Cmd_tec_ctrl+0x42>
	else
		lt8722_set_swen_req(0, LT8722_SWEN_REQ_DISABLED);
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	2000      	movs	r0, #0
 800a4da:	f002 fa98 	bl	800ca0e <lt8722_set_swen_req>
	if (atoi(argv[2]))
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	3308      	adds	r3, #8
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f008 fab5 	bl	8012a54 <atoi>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d004      	beq.n	800a4fa <Cmd_tec_ctrl+0x5e>
		lt8722_set_swen_req(1, LT8722_SWEN_REQ_ENABLED);
 800a4f0:	2101      	movs	r1, #1
 800a4f2:	2001      	movs	r0, #1
 800a4f4:	f002 fa8b 	bl	800ca0e <lt8722_set_swen_req>
 800a4f8:	e003      	b.n	800a502 <Cmd_tec_ctrl+0x66>
	else
		lt8722_set_swen_req(1, LT8722_SWEN_REQ_DISABLED);
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	2001      	movs	r0, #1
 800a4fe:	f002 fa86 	bl	800ca0e <lt8722_set_swen_req>
	if (atoi(argv[3]))
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	330c      	adds	r3, #12
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4618      	mov	r0, r3
 800a50a:	f008 faa3 	bl	8012a54 <atoi>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d004      	beq.n	800a51e <Cmd_tec_ctrl+0x82>
		lt8722_set_swen_req(2, LT8722_SWEN_REQ_ENABLED);
 800a514:	2101      	movs	r1, #1
 800a516:	2002      	movs	r0, #2
 800a518:	f002 fa79 	bl	800ca0e <lt8722_set_swen_req>
 800a51c:	e003      	b.n	800a526 <Cmd_tec_ctrl+0x8a>
	else
		lt8722_set_swen_req(2, LT8722_SWEN_REQ_DISABLED);
 800a51e:	2100      	movs	r1, #0
 800a520:	2002      	movs	r0, #2
 800a522:	f002 fa74 	bl	800ca0e <lt8722_set_swen_req>
	if (atoi(argv[4]))
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	3310      	adds	r3, #16
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4618      	mov	r0, r3
 800a52e:	f008 fa91 	bl	8012a54 <atoi>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d004      	beq.n	800a542 <Cmd_tec_ctrl+0xa6>
		lt8722_set_swen_req(3, LT8722_SWEN_REQ_ENABLED);
 800a538:	2101      	movs	r1, #1
 800a53a:	2003      	movs	r0, #3
 800a53c:	f002 fa67 	bl	800ca0e <lt8722_set_swen_req>
 800a540:	e003      	b.n	800a54a <Cmd_tec_ctrl+0xae>
	else
		lt8722_set_swen_req(3, LT8722_SWEN_REQ_DISABLED);
 800a542:	2100      	movs	r1, #0
 800a544:	2003      	movs	r0, #3
 800a546:	f002 fa62 	bl	800ca0e <lt8722_set_swen_req>
	return CMDLINE_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <Cmd_tec_read>:

int Cmd_tec_read(int argc, char *argv[]) {
 800a554:	b580      	push	{r7, lr}
 800a556:	b096      	sub	sp, #88	@ 0x58
 800a558:	af02      	add	r7, sp, #8
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
	uint32_t data;
	char buffer[60];
	uint8_t channel = atoi(argv[1]);
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	3304      	adds	r3, #4
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4618      	mov	r0, r3
 800a566:	f008 fa75 	bl	8012a54 <atoi>
 800a56a:	4603      	mov	r3, r0
 800a56c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	lt8722_reg_read(channel, LT8722_SPIS_COMMAND, &data);
 800a570:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a574:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a578:	2100      	movs	r1, #0
 800a57a:	4618      	mov	r0, r3
 800a57c:	f002 f9a6 	bl	800c8cc <lt8722_reg_read>
	snprintf(buffer, sizeof(buffer), "\r\nSPIS_COMMAND: 0x%lX-%lX\r\n",
 800a580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a582:	0c1a      	lsrs	r2, r3, #16
 800a584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a586:	f107 000c 	add.w	r0, r7, #12
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	4613      	mov	r3, r2
 800a58e:	4a61      	ldr	r2, [pc, #388]	@ (800a714 <Cmd_tec_read+0x1c0>)
 800a590:	213c      	movs	r1, #60	@ 0x3c
 800a592:	f008 fae7 	bl	8012b64 <sniprintf>
			data >> 16, data);
	UART_SendStringRing(UART_CMDLINE, buffer);
 800a596:	4b60      	ldr	r3, [pc, #384]	@ (800a718 <Cmd_tec_read+0x1c4>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f107 020c 	add.w	r2, r7, #12
 800a59e:	4611      	mov	r1, r2
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7fe feff 	bl	80093a4 <UART_SendStringRing>

	lt8722_reg_read(channel, LT8722_SPIS_STATUS, &data);
 800a5a6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a5aa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a5ae:	2101      	movs	r1, #1
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f002 f98b 	bl	800c8cc <lt8722_reg_read>
	snprintf(buffer, sizeof(buffer), "SPIS_STATUS: 0x%lX-%lX\r\n", data >> 16,
 800a5b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5b8:	0c1a      	lsrs	r2, r3, #16
 800a5ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5bc:	f107 000c 	add.w	r0, r7, #12
 800a5c0:	9300      	str	r3, [sp, #0]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	4a55      	ldr	r2, [pc, #340]	@ (800a71c <Cmd_tec_read+0x1c8>)
 800a5c6:	213c      	movs	r1, #60	@ 0x3c
 800a5c8:	f008 facc 	bl	8012b64 <sniprintf>
			data);
	UART_SendStringRing(UART_CMDLINE, buffer);
 800a5cc:	4b52      	ldr	r3, [pc, #328]	@ (800a718 <Cmd_tec_read+0x1c4>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f107 020c 	add.w	r2, r7, #12
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fe fee4 	bl	80093a4 <UART_SendStringRing>

	lt8722_reg_read(channel, LT8722_SPIS_DAC_ILIMN, &data);
 800a5dc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a5e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a5e4:	2102      	movs	r1, #2
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f002 f970 	bl	800c8cc <lt8722_reg_read>
	snprintf(buffer, sizeof(buffer), "SPIS_DAC_ILIMN: 0x%lX-%lX\r\n",
 800a5ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5ee:	0c1a      	lsrs	r2, r3, #16
 800a5f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5f2:	f107 000c 	add.w	r0, r7, #12
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	4a49      	ldr	r2, [pc, #292]	@ (800a720 <Cmd_tec_read+0x1cc>)
 800a5fc:	213c      	movs	r1, #60	@ 0x3c
 800a5fe:	f008 fab1 	bl	8012b64 <sniprintf>
			data >> 16, data);
	UART_SendStringRing(UART_CMDLINE, buffer);
 800a602:	4b45      	ldr	r3, [pc, #276]	@ (800a718 <Cmd_tec_read+0x1c4>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f107 020c 	add.w	r2, r7, #12
 800a60a:	4611      	mov	r1, r2
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7fe fec9 	bl	80093a4 <UART_SendStringRing>

	lt8722_reg_read(channel, LT8722_SPIS_DAC_ILIMP, &data);
 800a612:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a616:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a61a:	2103      	movs	r1, #3
 800a61c:	4618      	mov	r0, r3
 800a61e:	f002 f955 	bl	800c8cc <lt8722_reg_read>
	snprintf(buffer, sizeof(buffer), "SPIS_DAC_ILIMP: 0x%lX-%lX\r\n",
 800a622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a624:	0c1a      	lsrs	r2, r3, #16
 800a626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a628:	f107 000c 	add.w	r0, r7, #12
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	4613      	mov	r3, r2
 800a630:	4a3c      	ldr	r2, [pc, #240]	@ (800a724 <Cmd_tec_read+0x1d0>)
 800a632:	213c      	movs	r1, #60	@ 0x3c
 800a634:	f008 fa96 	bl	8012b64 <sniprintf>
			data >> 16, data);
	UART_SendStringRing(UART_CMDLINE, buffer);
 800a638:	4b37      	ldr	r3, [pc, #220]	@ (800a718 <Cmd_tec_read+0x1c4>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f107 020c 	add.w	r2, r7, #12
 800a640:	4611      	mov	r1, r2
 800a642:	4618      	mov	r0, r3
 800a644:	f7fe feae 	bl	80093a4 <UART_SendStringRing>

	lt8722_reg_read(channel, LT8722_SPIS_DAC, &data);
 800a648:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a64c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a650:	2104      	movs	r1, #4
 800a652:	4618      	mov	r0, r3
 800a654:	f002 f93a 	bl	800c8cc <lt8722_reg_read>
	snprintf(buffer, sizeof(buffer), "SPIS_DAC: 0x%lX-%lX\r\n", data >> 16,
 800a658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a65a:	0c1a      	lsrs	r2, r3, #16
 800a65c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a65e:	f107 000c 	add.w	r0, r7, #12
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	4613      	mov	r3, r2
 800a666:	4a30      	ldr	r2, [pc, #192]	@ (800a728 <Cmd_tec_read+0x1d4>)
 800a668:	213c      	movs	r1, #60	@ 0x3c
 800a66a:	f008 fa7b 	bl	8012b64 <sniprintf>
			data);
	UART_SendStringRing(UART_CMDLINE, buffer);
 800a66e:	4b2a      	ldr	r3, [pc, #168]	@ (800a718 <Cmd_tec_read+0x1c4>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f107 020c 	add.w	r2, r7, #12
 800a676:	4611      	mov	r1, r2
 800a678:	4618      	mov	r0, r3
 800a67a:	f7fe fe93 	bl	80093a4 <UART_SendStringRing>

	lt8722_reg_read(channel, LT8722_SPIS_OV_CLAMP, &data);
 800a67e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a682:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a686:	2105      	movs	r1, #5
 800a688:	4618      	mov	r0, r3
 800a68a:	f002 f91f 	bl	800c8cc <lt8722_reg_read>
	snprintf(buffer, sizeof(buffer), "SPIS_OV_CLAMP: 0x%lX\r\n", data);
 800a68e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a690:	f107 000c 	add.w	r0, r7, #12
 800a694:	4a25      	ldr	r2, [pc, #148]	@ (800a72c <Cmd_tec_read+0x1d8>)
 800a696:	213c      	movs	r1, #60	@ 0x3c
 800a698:	f008 fa64 	bl	8012b64 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800a69c:	4b1e      	ldr	r3, [pc, #120]	@ (800a718 <Cmd_tec_read+0x1c4>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f107 020c 	add.w	r2, r7, #12
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe fe7c 	bl	80093a4 <UART_SendStringRing>

	lt8722_reg_read(channel, LT8722_SPIS_UV_CLAMP, &data);
 800a6ac:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a6b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a6b4:	2106      	movs	r1, #6
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f002 f908 	bl	800c8cc <lt8722_reg_read>
	snprintf(buffer, sizeof(buffer), "SPIS_UV_CLAMP: 0x%lX\r\n", data);
 800a6bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6be:	f107 000c 	add.w	r0, r7, #12
 800a6c2:	4a1b      	ldr	r2, [pc, #108]	@ (800a730 <Cmd_tec_read+0x1dc>)
 800a6c4:	213c      	movs	r1, #60	@ 0x3c
 800a6c6:	f008 fa4d 	bl	8012b64 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800a6ca:	4b13      	ldr	r3, [pc, #76]	@ (800a718 <Cmd_tec_read+0x1c4>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f107 020c 	add.w	r2, r7, #12
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7fe fe65 	bl	80093a4 <UART_SendStringRing>

	lt8722_reg_read(channel, LT8722_SPIS_AMUX, &data);
 800a6da:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a6de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a6e2:	2107      	movs	r1, #7
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f002 f8f1 	bl	800c8cc <lt8722_reg_read>
	snprintf(buffer, sizeof(buffer), "SPIS_AMUX: 0x%lX\r\n", data);
 800a6ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6ec:	f107 000c 	add.w	r0, r7, #12
 800a6f0:	4a10      	ldr	r2, [pc, #64]	@ (800a734 <Cmd_tec_read+0x1e0>)
 800a6f2:	213c      	movs	r1, #60	@ 0x3c
 800a6f4:	f008 fa36 	bl	8012b64 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800a6f8:	4b07      	ldr	r3, [pc, #28]	@ (800a718 <Cmd_tec_read+0x1c4>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f107 020c 	add.w	r2, r7, #12
 800a700:	4611      	mov	r1, r2
 800a702:	4618      	mov	r0, r3
 800a704:	f7fe fe4e 	bl	80093a4 <UART_SendStringRing>

	return (CMDLINE_OK);
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3750      	adds	r7, #80	@ 0x50
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	08014288 	.word	0x08014288
 800a718:	200034a4 	.word	0x200034a4
 800a71c:	080142a4 	.word	0x080142a4
 800a720:	080142c0 	.word	0x080142c0
 800a724:	080142dc 	.word	0x080142dc
 800a728:	080142f8 	.word	0x080142f8
 800a72c:	08014310 	.word	0x08014310
 800a730:	08014328 	.word	0x08014328
 800a734:	08014340 	.word	0x08014340

0800a738 <Cmd_heater_set_duty>:

int Cmd_heater_set_duty(int argc, char *argv[]) {
 800a738:	b580      	push	{r7, lr}
 800a73a:	b09a      	sub	sp, #104	@ 0x68
 800a73c:	af02      	add	r7, sp, #8
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
	if (argc < 6)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2b05      	cmp	r3, #5
 800a746:	dc01      	bgt.n	800a74c <Cmd_heater_set_duty+0x14>
		return CMDLINE_TOO_FEW_ARGS;
 800a748:	2303      	movs	r3, #3
 800a74a:	e042      	b.n	800a7d2 <Cmd_heater_set_duty+0x9a>
	if (argc > 6)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b06      	cmp	r3, #6
 800a750:	dd01      	ble.n	800a756 <Cmd_heater_set_duty+0x1e>
		return CMDLINE_TOO_MANY_ARGS;
 800a752:	2302      	movs	r3, #2
 800a754:	e03d      	b.n	800a7d2 <Cmd_heater_set_duty+0x9a>
	uint8_t duty;
	char buffer[80];
	for (uint8_t i = 0; i < 4; i++) {
 800a756:	2300      	movs	r3, #0
 800a758:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 800a75c:	e034      	b.n	800a7c8 <Cmd_heater_set_duty+0x90>
		duty = atoi(argv[i + 1]);
 800a75e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800a762:	3301      	adds	r3, #1
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	683a      	ldr	r2, [r7, #0]
 800a768:	4413      	add	r3, r2
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f008 f971 	bl	8012a54 <atoi>
 800a772:	4603      	mov	r3, r0
 800a774:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (duty > 100)
 800a778:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a77c:	2b64      	cmp	r3, #100	@ 0x64
 800a77e:	d902      	bls.n	800a786 <Cmd_heater_set_duty+0x4e>
			duty = 100;
 800a780:	2364      	movs	r3, #100	@ 0x64
 800a782:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		temperature_set_heater_duty(i, duty);
 800a786:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800a78a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800a78e:	4611      	mov	r1, r2
 800a790:	4618      	mov	r0, r3
 800a792:	f005 f899 	bl	800f8c8 <temperature_set_heater_duty>
		snprintf(buffer, sizeof(buffer), "\r\n--> Heater duty[%d]: %i%%", i,
 800a796:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 800a79a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a79e:	f107 000c 	add.w	r0, r7, #12
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	4a0d      	ldr	r2, [pc, #52]	@ (800a7dc <Cmd_heater_set_duty+0xa4>)
 800a7a8:	2150      	movs	r1, #80	@ 0x50
 800a7aa:	f008 f9db 	bl	8012b64 <sniprintf>
				duty);
		UART_SendStringRing(UART_CMDLINE, buffer);
 800a7ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e0 <Cmd_heater_set_duty+0xa8>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f107 020c 	add.w	r2, r7, #12
 800a7b6:	4611      	mov	r1, r2
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7fe fdf3 	bl	80093a4 <UART_SendStringRing>
	for (uint8_t i = 0; i < 4; i++) {
 800a7be:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 800a7c8:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800a7cc:	2b03      	cmp	r3, #3
 800a7ce:	d9c6      	bls.n	800a75e <Cmd_heater_set_duty+0x26>
	}
	return CMDLINE_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3760      	adds	r7, #96	@ 0x60
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	08014354 	.word	0x08014354
 800a7e0:	200034a4 	.word	0x200034a4

0800a7e4 <Cmd_heater_get_duty>:

int Cmd_heater_get_duty(int argc, char *argv[]) {
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b09a      	sub	sp, #104	@ 0x68
 800a7e8:	af02      	add	r7, sp, #8
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
	if (argc > 2)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	dd01      	ble.n	800a7f8 <Cmd_heater_get_duty+0x14>
		return CMDLINE_TOO_MANY_ARGS;
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	e029      	b.n	800a84c <Cmd_heater_get_duty+0x68>
	uint8_t duty;
	char buffer[80];
	for (uint8_t i = 0; i < 4; i++) {
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a7fe:	e020      	b.n	800a842 <Cmd_heater_get_duty+0x5e>
		duty = temperature_get_heater_duty(i);
 800a800:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a804:	4618      	mov	r0, r3
 800a806:	f005 f887 	bl	800f918 <temperature_get_heater_duty>
 800a80a:	4603      	mov	r3, r0
 800a80c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
		snprintf(buffer, sizeof(buffer), "Heater duty[%d]: %i%%\r\n", i, duty);
 800a810:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800a814:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800a818:	f107 000c 	add.w	r0, r7, #12
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	4613      	mov	r3, r2
 800a820:	4a0c      	ldr	r2, [pc, #48]	@ (800a854 <Cmd_heater_get_duty+0x70>)
 800a822:	2150      	movs	r1, #80	@ 0x50
 800a824:	f008 f99e 	bl	8012b64 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 800a828:	4b0b      	ldr	r3, [pc, #44]	@ (800a858 <Cmd_heater_get_duty+0x74>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f107 020c 	add.w	r2, r7, #12
 800a830:	4611      	mov	r1, r2
 800a832:	4618      	mov	r0, r3
 800a834:	f7fe fdb6 	bl	80093a4 <UART_SendStringRing>
	for (uint8_t i = 0; i < 4; i++) {
 800a838:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a83c:	3301      	adds	r3, #1
 800a83e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a842:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a846:	2b03      	cmp	r3, #3
 800a848:	d9da      	bls.n	800a800 <Cmd_heater_get_duty+0x1c>
	}
	return CMDLINE_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3760      	adds	r7, #96	@ 0x60
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	08014370 	.word	0x08014370
 800a858:	200034a4 	.word	0x200034a4

0800a85c <Cmd_temp_set_auto>:

/* Command auto temperature */
int Cmd_temp_set_auto(int argc, char *argv[]) {
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
	if (argc < 6)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2b05      	cmp	r3, #5
 800a86a:	dc01      	bgt.n	800a870 <Cmd_temp_set_auto+0x14>
		return CMDLINE_TOO_FEW_ARGS;
 800a86c:	2303      	movs	r3, #3
 800a86e:	e03f      	b.n	800a8f0 <Cmd_temp_set_auto+0x94>
	if (argc > 6)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2b06      	cmp	r3, #6
 800a874:	dd01      	ble.n	800a87a <Cmd_temp_set_auto+0x1e>
		return CMDLINE_TOO_MANY_ARGS;
 800a876:	2302      	movs	r3, #2
 800a878:	e03a      	b.n	800a8f0 <Cmd_temp_set_auto+0x94>
	uint8_t auto_0 = atoi(argv[1]) ? 1 : 0;
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	3304      	adds	r3, #4
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4618      	mov	r0, r3
 800a882:	f008 f8e7 	bl	8012a54 <atoi>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	bf14      	ite	ne
 800a88c:	2301      	movne	r3, #1
 800a88e:	2300      	moveq	r3, #0
 800a890:	b2db      	uxtb	r3, r3
 800a892:	73fb      	strb	r3, [r7, #15]
	uint8_t auto_1 = atoi(argv[2]) ? 1 : 0;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	3308      	adds	r3, #8
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f008 f8da 	bl	8012a54 <atoi>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	bf14      	ite	ne
 800a8a6:	2301      	movne	r3, #1
 800a8a8:	2300      	moveq	r3, #0
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	73bb      	strb	r3, [r7, #14]
	uint8_t auto_2 = atoi(argv[3]) ? 1 : 0;
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	330c      	adds	r3, #12
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f008 f8cd 	bl	8012a54 <atoi>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	bf14      	ite	ne
 800a8c0:	2301      	movne	r3, #1
 800a8c2:	2300      	moveq	r3, #0
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	737b      	strb	r3, [r7, #13]
	uint8_t auto_3 = atoi(argv[4]) ? 1 : 0;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	3310      	adds	r3, #16
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f008 f8c0 	bl	8012a54 <atoi>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	bf14      	ite	ne
 800a8da:	2301      	movne	r3, #1
 800a8dc:	2300      	moveq	r3, #0
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	733b      	strb	r3, [r7, #12]
	temperature_set_auto_ctrl(auto_0, auto_1, auto_2, auto_3);
 800a8e2:	7b3b      	ldrb	r3, [r7, #12]
 800a8e4:	7b7a      	ldrb	r2, [r7, #13]
 800a8e6:	7bb9      	ldrb	r1, [r7, #14]
 800a8e8:	7bf8      	ldrb	r0, [r7, #15]
 800a8ea:	f005 f833 	bl	800f954 <temperature_set_auto_ctrl>
	return CMDLINE_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <Cmd_temp_auto_0>:

int Cmd_temp_auto_0(int argc, char *argv[]) {
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b0ba      	sub	sp, #232	@ 0xe8
 800a8fc:	af02      	add	r7, sp, #8
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
	if (argc < 6)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2b05      	cmp	r3, #5
 800a906:	dc01      	bgt.n	800a90c <Cmd_temp_auto_0+0x14>
		return CMDLINE_TOO_FEW_ARGS;
 800a908:	2303      	movs	r3, #3
 800a90a:	e0a8      	b.n	800aa5e <Cmd_temp_auto_0+0x166>
	if (argc > 6)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b06      	cmp	r3, #6
 800a910:	dd01      	ble.n	800a916 <Cmd_temp_auto_0+0x1e>
		return CMDLINE_TOO_MANY_ARGS;
 800a912:	2302      	movs	r3, #2
 800a914:	e0a3      	b.n	800aa5e <Cmd_temp_auto_0+0x166>
	uint8_t auto_0 = atoi(argv[1]) ? 1 : 0;
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	3304      	adds	r3, #4
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f008 f899 	bl	8012a54 <atoi>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	bf14      	ite	ne
 800a928:	2301      	movne	r3, #1
 800a92a:	2300      	moveq	r3, #0
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
	uint16_t vol_tec_0 = atoi(argv[2]);
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	3308      	adds	r3, #8
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4618      	mov	r0, r3
 800a93a:	f008 f88b 	bl	8012a54 <atoi>
 800a93e:	4603      	mov	r3, r0
 800a940:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
	uint8_t duty_heater_0 = atoi(argv[3]);
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	330c      	adds	r3, #12
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f008 f882 	bl	8012a54 <atoi>
 800a950:	4603      	mov	r3, r0
 800a952:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
	int16_t temp_setpoint_0 = atoi(argv[4]);
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	3310      	adds	r3, #16
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f008 f879 	bl	8012a54 <atoi>
 800a962:	4603      	mov	r3, r0
 800a964:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8

	uint32_t data = 1;
 800a968:	2301      	movs	r3, #1
 800a96a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	uint8_t tec_init = lt8722_init(0);
 800a96e:	2000      	movs	r0, #0
 800a970:	f002 f89e 	bl	800cab0 <lt8722_init>
 800a974:	4603      	mov	r3, r0
 800a976:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
	LL_mDelay(10);
 800a97a:	200a      	movs	r0, #10
 800a97c:	f007 feaa 	bl	80126d4 <LL_mDelay>
	if (!tec_init)
 800a980:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800a984:	2b00      	cmp	r3, #0
 800a986:	d103      	bne.n	800a990 <Cmd_temp_auto_0+0x98>
		lt8722_set_swen_req(0, LT8722_SWEN_REQ_DISABLED);
 800a988:	2100      	movs	r1, #0
 800a98a:	2000      	movs	r0, #0
 800a98c:	f002 f83f 	bl	800ca0e <lt8722_set_swen_req>
	lt8722_reg_read(0, LT8722_SPIS_STATUS, &data);
 800a990:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a994:	461a      	mov	r2, r3
 800a996:	2101      	movs	r1, #1
 800a998:	2000      	movs	r0, #0
 800a99a:	f001 ff97 	bl	800c8cc <lt8722_reg_read>
	if (!data)
 800a99e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d133      	bne.n	800aa0e <Cmd_temp_auto_0+0x116>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 0 init success");
 800a9a6:	4b30      	ldr	r3, [pc, #192]	@ (800aa68 <Cmd_temp_auto_0+0x170>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4930      	ldr	r1, [pc, #192]	@ (800aa6c <Cmd_temp_auto_0+0x174>)
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fe fcf9 	bl	80093a4 <UART_SendStringRing>
	else {
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 0 init fail");
		return CMDLINE_OK;
	}

	temperature_set_tec_vol(0, vol_tec_0);
 800a9b2:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	f004 ff3d 	bl	800f838 <temperature_set_tec_vol>
	temperature_set_heater_duty(0, duty_heater_0);
 800a9be:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	f004 ff7f 	bl	800f8c8 <temperature_set_heater_duty>
	temperature_set_setpoint(0, temp_setpoint_0);
 800a9ca:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	@ 0xd8
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	f004 ff07 	bl	800f7e4 <temperature_set_setpoint>

	char buffer[200];
	snprintf(buffer, sizeof(buffer),
 800a9d6:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	@ 0xdc
 800a9da:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a9de:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	@ 0xd8
 800a9e2:	f107 0008 	add.w	r0, r7, #8
 800a9e6:	9201      	str	r2, [sp, #4]
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4a20      	ldr	r2, [pc, #128]	@ (800aa70 <Cmd_temp_auto_0+0x178>)
 800a9ee:	21c8      	movs	r1, #200	@ 0xc8
 800a9f0:	f008 f8b8 	bl	8012b64 <sniprintf>
			"\r\n--> Tec vol[0]: %d mV \r\n--> Heater duty[0]: %d%% \r\n--> Temp_set[0]: %i",
			vol_tec_0, duty_heater_0, temp_setpoint_0);
	UART_SendStringRing(UART_CMDLINE, buffer);
 800a9f4:	4b1c      	ldr	r3, [pc, #112]	@ (800aa68 <Cmd_temp_auto_0+0x170>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f107 0208 	add.w	r2, r7, #8
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fe fcd0 	bl	80093a4 <UART_SendStringRing>
	if (auto_0) {
 800aa04:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d018      	beq.n	800aa3e <Cmd_temp_auto_0+0x146>
 800aa0c:	e007      	b.n	800aa1e <Cmd_temp_auto_0+0x126>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 0 init fail");
 800aa0e:	4b16      	ldr	r3, [pc, #88]	@ (800aa68 <Cmd_temp_auto_0+0x170>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4918      	ldr	r1, [pc, #96]	@ (800aa74 <Cmd_temp_auto_0+0x17c>)
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fe fcc5 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_OK;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	e01f      	b.n	800aa5e <Cmd_temp_auto_0+0x166>
		s_Temperature_CurrentState.Temp_auto |= 0x01;
 800aa1e:	4b16      	ldr	r3, [pc, #88]	@ (800aa78 <Cmd_temp_auto_0+0x180>)
 800aa20:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800aa24:	f043 0301 	orr.w	r3, r3, #1
 800aa28:	b2da      	uxtb	r2, r3
 800aa2a:	4b13      	ldr	r3, [pc, #76]	@ (800aa78 <Cmd_temp_auto_0+0x180>)
 800aa2c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Temp 0 is auto");
 800aa30:	4b0d      	ldr	r3, [pc, #52]	@ (800aa68 <Cmd_temp_auto_0+0x170>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4911      	ldr	r1, [pc, #68]	@ (800aa7c <Cmd_temp_auto_0+0x184>)
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fe fcb4 	bl	80093a4 <UART_SendStringRing>
 800aa3c:	e00e      	b.n	800aa5c <Cmd_temp_auto_0+0x164>
	} else {
		s_Temperature_CurrentState.Temp_auto &= ~0x01;
 800aa3e:	4b0e      	ldr	r3, [pc, #56]	@ (800aa78 <Cmd_temp_auto_0+0x180>)
 800aa40:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800aa44:	f023 0301 	bic.w	r3, r3, #1
 800aa48:	b2da      	uxtb	r2, r3
 800aa4a:	4b0b      	ldr	r3, [pc, #44]	@ (800aa78 <Cmd_temp_auto_0+0x180>)
 800aa4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Temp 0 is off");
 800aa50:	4b05      	ldr	r3, [pc, #20]	@ (800aa68 <Cmd_temp_auto_0+0x170>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	490a      	ldr	r1, [pc, #40]	@ (800aa80 <Cmd_temp_auto_0+0x188>)
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fe fca4 	bl	80093a4 <UART_SendStringRing>
	}
	return CMDLINE_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	37e0      	adds	r7, #224	@ 0xe0
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	200034a4 	.word	0x200034a4
 800aa6c:	08014388 	.word	0x08014388
 800aa70:	080143bc 	.word	0x080143bc
 800aa74:	080143a4 	.word	0x080143a4
 800aa78:	20002350 	.word	0x20002350
 800aa7c:	08014408 	.word	0x08014408
 800aa80:	08014420 	.word	0x08014420

0800aa84 <Cmd_temp_auto_1>:

int Cmd_temp_auto_1(int argc, char *argv[]) {
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b0ba      	sub	sp, #232	@ 0xe8
 800aa88:	af02      	add	r7, sp, #8
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
	if (argc < 6)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2b05      	cmp	r3, #5
 800aa92:	dc01      	bgt.n	800aa98 <Cmd_temp_auto_1+0x14>
		return CMDLINE_TOO_FEW_ARGS;
 800aa94:	2303      	movs	r3, #3
 800aa96:	e0a8      	b.n	800abea <Cmd_temp_auto_1+0x166>
	if (argc > 6)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2b06      	cmp	r3, #6
 800aa9c:	dd01      	ble.n	800aaa2 <Cmd_temp_auto_1+0x1e>
		return CMDLINE_TOO_MANY_ARGS;
 800aa9e:	2302      	movs	r3, #2
 800aaa0:	e0a3      	b.n	800abea <Cmd_temp_auto_1+0x166>

	uint8_t auto_1 = atoi(argv[1]) ? 1 : 0;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	3304      	adds	r3, #4
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f007 ffd3 	bl	8012a54 <atoi>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	bf14      	ite	ne
 800aab4:	2301      	movne	r3, #1
 800aab6:	2300      	moveq	r3, #0
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
	uint16_t vol_tec_1 = atoi(argv[2]);
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	3308      	adds	r3, #8
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4618      	mov	r0, r3
 800aac6:	f007 ffc5 	bl	8012a54 <atoi>
 800aaca:	4603      	mov	r3, r0
 800aacc:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
	uint8_t duty_heater_1 = atoi(argv[3]);
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	330c      	adds	r3, #12
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f007 ffbc 	bl	8012a54 <atoi>
 800aadc:	4603      	mov	r3, r0
 800aade:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
	int16_t temp_setpoint_1 = atoi(argv[4]);
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	3310      	adds	r3, #16
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f007 ffb3 	bl	8012a54 <atoi>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8

	uint32_t data = 1;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	uint8_t tec_init = lt8722_init(1);
 800aafa:	2001      	movs	r0, #1
 800aafc:	f001 ffd8 	bl	800cab0 <lt8722_init>
 800ab00:	4603      	mov	r3, r0
 800ab02:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
	LL_mDelay(10);
 800ab06:	200a      	movs	r0, #10
 800ab08:	f007 fde4 	bl	80126d4 <LL_mDelay>
	if (!tec_init)
 800ab0c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d103      	bne.n	800ab1c <Cmd_temp_auto_1+0x98>
		lt8722_set_swen_req(1, LT8722_SWEN_REQ_DISABLED);
 800ab14:	2100      	movs	r1, #0
 800ab16:	2001      	movs	r0, #1
 800ab18:	f001 ff79 	bl	800ca0e <lt8722_set_swen_req>
	lt8722_reg_read(1, LT8722_SPIS_STATUS, &data);
 800ab1c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800ab20:	461a      	mov	r2, r3
 800ab22:	2101      	movs	r1, #1
 800ab24:	2001      	movs	r0, #1
 800ab26:	f001 fed1 	bl	800c8cc <lt8722_reg_read>
	if (!data)
 800ab2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d133      	bne.n	800ab9a <Cmd_temp_auto_1+0x116>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 1 init success");
 800ab32:	4b30      	ldr	r3, [pc, #192]	@ (800abf4 <Cmd_temp_auto_1+0x170>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4930      	ldr	r1, [pc, #192]	@ (800abf8 <Cmd_temp_auto_1+0x174>)
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7fe fc33 	bl	80093a4 <UART_SendStringRing>
	else {
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 1 init fail");
		return CMDLINE_OK;
	}

	temperature_set_tec_vol(1, vol_tec_1);
 800ab3e:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 800ab42:	4619      	mov	r1, r3
 800ab44:	2001      	movs	r0, #1
 800ab46:	f004 fe77 	bl	800f838 <temperature_set_tec_vol>
	temperature_set_heater_duty(1, duty_heater_1);
 800ab4a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800ab4e:	4619      	mov	r1, r3
 800ab50:	2001      	movs	r0, #1
 800ab52:	f004 feb9 	bl	800f8c8 <temperature_set_heater_duty>
	temperature_set_setpoint(1, temp_setpoint_1);
 800ab56:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	@ 0xd8
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	2001      	movs	r0, #1
 800ab5e:	f004 fe41 	bl	800f7e4 <temperature_set_setpoint>
	char buffer[200];
	snprintf(buffer, sizeof(buffer),
 800ab62:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	@ 0xdc
 800ab66:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800ab6a:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	@ 0xd8
 800ab6e:	f107 0008 	add.w	r0, r7, #8
 800ab72:	9201      	str	r2, [sp, #4]
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	460b      	mov	r3, r1
 800ab78:	4a20      	ldr	r2, [pc, #128]	@ (800abfc <Cmd_temp_auto_1+0x178>)
 800ab7a:	21c8      	movs	r1, #200	@ 0xc8
 800ab7c:	f007 fff2 	bl	8012b64 <sniprintf>
			"\r\n--> Tec vol[1]: %d mV \r\n--> Heater duty[1]: %d%% \r\n--> Temp_set[1]: %i",
			vol_tec_1, duty_heater_1, temp_setpoint_1);
	UART_SendStringRing(UART_CMDLINE, buffer);
 800ab80:	4b1c      	ldr	r3, [pc, #112]	@ (800abf4 <Cmd_temp_auto_1+0x170>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f107 0208 	add.w	r2, r7, #8
 800ab88:	4611      	mov	r1, r2
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fe fc0a 	bl	80093a4 <UART_SendStringRing>
	if (auto_1) {
 800ab90:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d018      	beq.n	800abca <Cmd_temp_auto_1+0x146>
 800ab98:	e007      	b.n	800abaa <Cmd_temp_auto_1+0x126>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 1 init fail");
 800ab9a:	4b16      	ldr	r3, [pc, #88]	@ (800abf4 <Cmd_temp_auto_1+0x170>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4918      	ldr	r1, [pc, #96]	@ (800ac00 <Cmd_temp_auto_1+0x17c>)
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fe fbff 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	e01f      	b.n	800abea <Cmd_temp_auto_1+0x166>
		s_Temperature_CurrentState.Temp_auto |= (0x01 << 1);
 800abaa:	4b16      	ldr	r3, [pc, #88]	@ (800ac04 <Cmd_temp_auto_1+0x180>)
 800abac:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800abb0:	f043 0302 	orr.w	r3, r3, #2
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	4b13      	ldr	r3, [pc, #76]	@ (800ac04 <Cmd_temp_auto_1+0x180>)
 800abb8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Temp 1 is auto");
 800abbc:	4b0d      	ldr	r3, [pc, #52]	@ (800abf4 <Cmd_temp_auto_1+0x170>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4911      	ldr	r1, [pc, #68]	@ (800ac08 <Cmd_temp_auto_1+0x184>)
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fe fbee 	bl	80093a4 <UART_SendStringRing>
 800abc8:	e00e      	b.n	800abe8 <Cmd_temp_auto_1+0x164>
	} else {
		s_Temperature_CurrentState.Temp_auto &= ~(0x01 << 1);
 800abca:	4b0e      	ldr	r3, [pc, #56]	@ (800ac04 <Cmd_temp_auto_1+0x180>)
 800abcc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800abd0:	f023 0302 	bic.w	r3, r3, #2
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	4b0b      	ldr	r3, [pc, #44]	@ (800ac04 <Cmd_temp_auto_1+0x180>)
 800abd8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Temp 1 is off");
 800abdc:	4b05      	ldr	r3, [pc, #20]	@ (800abf4 <Cmd_temp_auto_1+0x170>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	490a      	ldr	r1, [pc, #40]	@ (800ac0c <Cmd_temp_auto_1+0x188>)
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7fe fbde 	bl	80093a4 <UART_SendStringRing>
	}
	return CMDLINE_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	37e0      	adds	r7, #224	@ 0xe0
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	200034a4 	.word	0x200034a4
 800abf8:	08014434 	.word	0x08014434
 800abfc:	08014468 	.word	0x08014468
 800ac00:	08014450 	.word	0x08014450
 800ac04:	20002350 	.word	0x20002350
 800ac08:	080144b4 	.word	0x080144b4
 800ac0c:	080144cc 	.word	0x080144cc

0800ac10 <Cmd_temp_auto_2>:

int Cmd_temp_auto_2(int argc, char *argv[]) {
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b0ba      	sub	sp, #232	@ 0xe8
 800ac14:	af02      	add	r7, sp, #8
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
	if (argc < 6)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b05      	cmp	r3, #5
 800ac1e:	dc01      	bgt.n	800ac24 <Cmd_temp_auto_2+0x14>
		return CMDLINE_TOO_FEW_ARGS;
 800ac20:	2303      	movs	r3, #3
 800ac22:	e0a8      	b.n	800ad76 <Cmd_temp_auto_2+0x166>
	if (argc > 6)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b06      	cmp	r3, #6
 800ac28:	dd01      	ble.n	800ac2e <Cmd_temp_auto_2+0x1e>
		return CMDLINE_TOO_MANY_ARGS;
 800ac2a:	2302      	movs	r3, #2
 800ac2c:	e0a3      	b.n	800ad76 <Cmd_temp_auto_2+0x166>

	uint8_t auto_2 = atoi(argv[1]) ? 1 : 0;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	3304      	adds	r3, #4
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4618      	mov	r0, r3
 800ac36:	f007 ff0d 	bl	8012a54 <atoi>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	bf14      	ite	ne
 800ac40:	2301      	movne	r3, #1
 800ac42:	2300      	moveq	r3, #0
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
	uint16_t vol_tec_2 = atoi(argv[2]);
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f007 feff 	bl	8012a54 <atoi>
 800ac56:	4603      	mov	r3, r0
 800ac58:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
	uint8_t duty_heater_2 = atoi(argv[3]);
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	330c      	adds	r3, #12
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4618      	mov	r0, r3
 800ac64:	f007 fef6 	bl	8012a54 <atoi>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
	int16_t temp_setpoint_2 = atoi(argv[4]);
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	3310      	adds	r3, #16
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f007 feed 	bl	8012a54 <atoi>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8

	uint32_t data = 1;
 800ac80:	2301      	movs	r3, #1
 800ac82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	uint8_t tec_init = lt8722_init(2);
 800ac86:	2002      	movs	r0, #2
 800ac88:	f001 ff12 	bl	800cab0 <lt8722_init>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
	LL_mDelay(10);
 800ac92:	200a      	movs	r0, #10
 800ac94:	f007 fd1e 	bl	80126d4 <LL_mDelay>
	if (!tec_init)
 800ac98:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d103      	bne.n	800aca8 <Cmd_temp_auto_2+0x98>
		lt8722_set_swen_req(2, LT8722_SWEN_REQ_DISABLED);
 800aca0:	2100      	movs	r1, #0
 800aca2:	2002      	movs	r0, #2
 800aca4:	f001 feb3 	bl	800ca0e <lt8722_set_swen_req>
	lt8722_reg_read(2, LT8722_SPIS_STATUS, &data);
 800aca8:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800acac:	461a      	mov	r2, r3
 800acae:	2101      	movs	r1, #1
 800acb0:	2002      	movs	r0, #2
 800acb2:	f001 fe0b 	bl	800c8cc <lt8722_reg_read>
	if (!data)
 800acb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d133      	bne.n	800ad26 <Cmd_temp_auto_2+0x116>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 2 init success");
 800acbe:	4b30      	ldr	r3, [pc, #192]	@ (800ad80 <Cmd_temp_auto_2+0x170>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4930      	ldr	r1, [pc, #192]	@ (800ad84 <Cmd_temp_auto_2+0x174>)
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7fe fb6d 	bl	80093a4 <UART_SendStringRing>
	else {
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 2 init fail");
		return CMDLINE_OK;
	}

	temperature_set_tec_vol(2, vol_tec_2);
 800acca:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 800acce:	4619      	mov	r1, r3
 800acd0:	2002      	movs	r0, #2
 800acd2:	f004 fdb1 	bl	800f838 <temperature_set_tec_vol>
	temperature_set_heater_duty(2, duty_heater_2);
 800acd6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800acda:	4619      	mov	r1, r3
 800acdc:	2002      	movs	r0, #2
 800acde:	f004 fdf3 	bl	800f8c8 <temperature_set_heater_duty>
	temperature_set_setpoint(2, temp_setpoint_2);
 800ace2:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	@ 0xd8
 800ace6:	4619      	mov	r1, r3
 800ace8:	2002      	movs	r0, #2
 800acea:	f004 fd7b 	bl	800f7e4 <temperature_set_setpoint>
	char buffer[200];
	snprintf(buffer, sizeof(buffer),
 800acee:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	@ 0xdc
 800acf2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800acf6:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	@ 0xd8
 800acfa:	f107 0008 	add.w	r0, r7, #8
 800acfe:	9201      	str	r2, [sp, #4]
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	460b      	mov	r3, r1
 800ad04:	4a20      	ldr	r2, [pc, #128]	@ (800ad88 <Cmd_temp_auto_2+0x178>)
 800ad06:	21c8      	movs	r1, #200	@ 0xc8
 800ad08:	f007 ff2c 	bl	8012b64 <sniprintf>
			"\r\n--> Tec vol[2]: %d mV \r\n--> Heater duty[2]: %d%% \r\n--> Temp_set[2]: %i",
			vol_tec_2, duty_heater_2, temp_setpoint_2);
	UART_SendStringRing(UART_CMDLINE, buffer);
 800ad0c:	4b1c      	ldr	r3, [pc, #112]	@ (800ad80 <Cmd_temp_auto_2+0x170>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f107 0208 	add.w	r2, r7, #8
 800ad14:	4611      	mov	r1, r2
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fe fb44 	bl	80093a4 <UART_SendStringRing>
	if (auto_2) {
 800ad1c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d018      	beq.n	800ad56 <Cmd_temp_auto_2+0x146>
 800ad24:	e007      	b.n	800ad36 <Cmd_temp_auto_2+0x126>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 2 init fail");
 800ad26:	4b16      	ldr	r3, [pc, #88]	@ (800ad80 <Cmd_temp_auto_2+0x170>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4918      	ldr	r1, [pc, #96]	@ (800ad8c <Cmd_temp_auto_2+0x17c>)
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7fe fb39 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	e01f      	b.n	800ad76 <Cmd_temp_auto_2+0x166>
		s_Temperature_CurrentState.Temp_auto |= (0x01 << 2);
 800ad36:	4b16      	ldr	r3, [pc, #88]	@ (800ad90 <Cmd_temp_auto_2+0x180>)
 800ad38:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800ad3c:	f043 0304 	orr.w	r3, r3, #4
 800ad40:	b2da      	uxtb	r2, r3
 800ad42:	4b13      	ldr	r3, [pc, #76]	@ (800ad90 <Cmd_temp_auto_2+0x180>)
 800ad44:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Temp 2 is auto");
 800ad48:	4b0d      	ldr	r3, [pc, #52]	@ (800ad80 <Cmd_temp_auto_2+0x170>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4911      	ldr	r1, [pc, #68]	@ (800ad94 <Cmd_temp_auto_2+0x184>)
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe fb28 	bl	80093a4 <UART_SendStringRing>
 800ad54:	e00e      	b.n	800ad74 <Cmd_temp_auto_2+0x164>
	} else {
		s_Temperature_CurrentState.Temp_auto &= ~(0x01 << 2);
 800ad56:	4b0e      	ldr	r3, [pc, #56]	@ (800ad90 <Cmd_temp_auto_2+0x180>)
 800ad58:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800ad5c:	f023 0304 	bic.w	r3, r3, #4
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	4b0b      	ldr	r3, [pc, #44]	@ (800ad90 <Cmd_temp_auto_2+0x180>)
 800ad64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Temp 2 is off");
 800ad68:	4b05      	ldr	r3, [pc, #20]	@ (800ad80 <Cmd_temp_auto_2+0x170>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	490a      	ldr	r1, [pc, #40]	@ (800ad98 <Cmd_temp_auto_2+0x188>)
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fe fb18 	bl	80093a4 <UART_SendStringRing>
	}
	return CMDLINE_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	37e0      	adds	r7, #224	@ 0xe0
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	200034a4 	.word	0x200034a4
 800ad84:	080144e0 	.word	0x080144e0
 800ad88:	08014514 	.word	0x08014514
 800ad8c:	080144fc 	.word	0x080144fc
 800ad90:	20002350 	.word	0x20002350
 800ad94:	08014560 	.word	0x08014560
 800ad98:	08014578 	.word	0x08014578

0800ad9c <Cmd_temp_auto_3>:

int Cmd_temp_auto_3(int argc, char *argv[]) {
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b0ba      	sub	sp, #232	@ 0xe8
 800ada0:	af02      	add	r7, sp, #8
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
	if (argc < 6)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2b05      	cmp	r3, #5
 800adaa:	dc01      	bgt.n	800adb0 <Cmd_temp_auto_3+0x14>
		return CMDLINE_TOO_FEW_ARGS;
 800adac:	2303      	movs	r3, #3
 800adae:	e0a8      	b.n	800af02 <Cmd_temp_auto_3+0x166>
	if (argc > 6)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b06      	cmp	r3, #6
 800adb4:	dd01      	ble.n	800adba <Cmd_temp_auto_3+0x1e>
		return CMDLINE_TOO_MANY_ARGS;
 800adb6:	2302      	movs	r3, #2
 800adb8:	e0a3      	b.n	800af02 <Cmd_temp_auto_3+0x166>

	uint8_t auto_3 = atoi(argv[1]) ? 1 : 0;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	3304      	adds	r3, #4
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f007 fe47 	bl	8012a54 <atoi>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	bf14      	ite	ne
 800adcc:	2301      	movne	r3, #1
 800adce:	2300      	moveq	r3, #0
 800add0:	b2db      	uxtb	r3, r3
 800add2:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
	uint16_t vol_tec_3 = atoi(argv[2]);
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	3308      	adds	r3, #8
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4618      	mov	r0, r3
 800adde:	f007 fe39 	bl	8012a54 <atoi>
 800ade2:	4603      	mov	r3, r0
 800ade4:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
	uint8_t duty_heater_3 = atoi(argv[3]);
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	330c      	adds	r3, #12
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4618      	mov	r0, r3
 800adf0:	f007 fe30 	bl	8012a54 <atoi>
 800adf4:	4603      	mov	r3, r0
 800adf6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
	int16_t temp_setpoint_3 = atoi(argv[4]);
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	3310      	adds	r3, #16
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4618      	mov	r0, r3
 800ae02:	f007 fe27 	bl	8012a54 <atoi>
 800ae06:	4603      	mov	r3, r0
 800ae08:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8

	uint32_t data = 1;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	uint8_t tec_init = lt8722_init(3);
 800ae12:	2003      	movs	r0, #3
 800ae14:	f001 fe4c 	bl	800cab0 <lt8722_init>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
	LL_mDelay(10);
 800ae1e:	200a      	movs	r0, #10
 800ae20:	f007 fc58 	bl	80126d4 <LL_mDelay>
	if (!tec_init)
 800ae24:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d103      	bne.n	800ae34 <Cmd_temp_auto_3+0x98>
		lt8722_set_swen_req(3, LT8722_SWEN_REQ_DISABLED);
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	2003      	movs	r0, #3
 800ae30:	f001 fded 	bl	800ca0e <lt8722_set_swen_req>
	lt8722_reg_read(3, LT8722_SPIS_STATUS, &data);
 800ae34:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800ae38:	461a      	mov	r2, r3
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	2003      	movs	r0, #3
 800ae3e:	f001 fd45 	bl	800c8cc <lt8722_reg_read>
	if (!data)
 800ae42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d133      	bne.n	800aeb2 <Cmd_temp_auto_3+0x116>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 3 init success");
 800ae4a:	4b30      	ldr	r3, [pc, #192]	@ (800af0c <Cmd_temp_auto_3+0x170>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4930      	ldr	r1, [pc, #192]	@ (800af10 <Cmd_temp_auto_3+0x174>)
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7fe faa7 	bl	80093a4 <UART_SendStringRing>
	else {
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 3 init fail");
		return CMDLINE_OK;
	}

	temperature_set_tec_vol(3, vol_tec_3);
 800ae56:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	2003      	movs	r0, #3
 800ae5e:	f004 fceb 	bl	800f838 <temperature_set_tec_vol>
	temperature_set_heater_duty(3, duty_heater_3);
 800ae62:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800ae66:	4619      	mov	r1, r3
 800ae68:	2003      	movs	r0, #3
 800ae6a:	f004 fd2d 	bl	800f8c8 <temperature_set_heater_duty>
	temperature_set_setpoint(3, temp_setpoint_3);
 800ae6e:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	@ 0xd8
 800ae72:	4619      	mov	r1, r3
 800ae74:	2003      	movs	r0, #3
 800ae76:	f004 fcb5 	bl	800f7e4 <temperature_set_setpoint>
	char buffer[200];
	snprintf(buffer, sizeof(buffer),
 800ae7a:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	@ 0xdc
 800ae7e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800ae82:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	@ 0xd8
 800ae86:	f107 0008 	add.w	r0, r7, #8
 800ae8a:	9201      	str	r2, [sp, #4]
 800ae8c:	9300      	str	r3, [sp, #0]
 800ae8e:	460b      	mov	r3, r1
 800ae90:	4a20      	ldr	r2, [pc, #128]	@ (800af14 <Cmd_temp_auto_3+0x178>)
 800ae92:	21c8      	movs	r1, #200	@ 0xc8
 800ae94:	f007 fe66 	bl	8012b64 <sniprintf>
			"\r\n--> Tec vol[3]: %d mV \r\n--> Heater duty[3]: %d%% \r\n--> Temp_set[3]: %i",
			vol_tec_3, duty_heater_3, temp_setpoint_3);
	UART_SendStringRing(UART_CMDLINE, buffer);
 800ae98:	4b1c      	ldr	r3, [pc, #112]	@ (800af0c <Cmd_temp_auto_3+0x170>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f107 0208 	add.w	r2, r7, #8
 800aea0:	4611      	mov	r1, r2
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7fe fa7e 	bl	80093a4 <UART_SendStringRing>
	if (auto_3) {
 800aea8:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d018      	beq.n	800aee2 <Cmd_temp_auto_3+0x146>
 800aeb0:	e007      	b.n	800aec2 <Cmd_temp_auto_3+0x126>
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Tec 3 init fail");
 800aeb2:	4b16      	ldr	r3, [pc, #88]	@ (800af0c <Cmd_temp_auto_3+0x170>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4918      	ldr	r1, [pc, #96]	@ (800af18 <Cmd_temp_auto_3+0x17c>)
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fe fa73 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	e01f      	b.n	800af02 <Cmd_temp_auto_3+0x166>
		s_Temperature_CurrentState.Temp_auto |= (0x01 << 3);
 800aec2:	4b16      	ldr	r3, [pc, #88]	@ (800af1c <Cmd_temp_auto_3+0x180>)
 800aec4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800aec8:	f043 0308 	orr.w	r3, r3, #8
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	4b13      	ldr	r3, [pc, #76]	@ (800af1c <Cmd_temp_auto_3+0x180>)
 800aed0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Temp 3 is auto");
 800aed4:	4b0d      	ldr	r3, [pc, #52]	@ (800af0c <Cmd_temp_auto_3+0x170>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4911      	ldr	r1, [pc, #68]	@ (800af20 <Cmd_temp_auto_3+0x184>)
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fe fa62 	bl	80093a4 <UART_SendStringRing>
 800aee0:	e00e      	b.n	800af00 <Cmd_temp_auto_3+0x164>
	} else {
		s_Temperature_CurrentState.Temp_auto &= ~(0x01 << 3);
 800aee2:	4b0e      	ldr	r3, [pc, #56]	@ (800af1c <Cmd_temp_auto_3+0x180>)
 800aee4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800aee8:	f023 0308 	bic.w	r3, r3, #8
 800aeec:	b2da      	uxtb	r2, r3
 800aeee:	4b0b      	ldr	r3, [pc, #44]	@ (800af1c <Cmd_temp_auto_3+0x180>)
 800aef0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		UART_SendStringRing(UART_CMDLINE, "\r\n--> Temp 3 is off");
 800aef4:	4b05      	ldr	r3, [pc, #20]	@ (800af0c <Cmd_temp_auto_3+0x170>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	490a      	ldr	r1, [pc, #40]	@ (800af24 <Cmd_temp_auto_3+0x188>)
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fe fa52 	bl	80093a4 <UART_SendStringRing>
	}
	return CMDLINE_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	37e0      	adds	r7, #224	@ 0xe0
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	200034a4 	.word	0x200034a4
 800af10:	0801458c 	.word	0x0801458c
 800af14:	080145c0 	.word	0x080145c0
 800af18:	080145a8 	.word	0x080145a8
 800af1c:	20002350 	.word	0x20002350
 800af20:	0801460c 	.word	0x0801460c
 800af24:	08014624 	.word	0x08014624

0800af28 <Cmd_ir_set_duty>:

/* Command for ir led */
int Cmd_ir_set_duty(int argc, char *argv[]) {
 800af28:	b580      	push	{r7, lr}
 800af2a:	b098      	sub	sp, #96	@ 0x60
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
	if (argc < 6)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b05      	cmp	r3, #5
 800af36:	dc01      	bgt.n	800af3c <Cmd_ir_set_duty+0x14>
		return CMDLINE_TOO_FEW_ARGS;
 800af38:	2303      	movs	r3, #3
 800af3a:	e02a      	b.n	800af92 <Cmd_ir_set_duty+0x6a>
	if (argc > 6)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2b06      	cmp	r3, #6
 800af40:	dd01      	ble.n	800af46 <Cmd_ir_set_duty+0x1e>
		return CMDLINE_TOO_MANY_ARGS;
 800af42:	2302      	movs	r3, #2
 800af44:	e025      	b.n	800af92 <Cmd_ir_set_duty+0x6a>
	char buffer[80];
	uint8_t duty = atoi(argv[1]);
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	3304      	adds	r3, #4
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f007 fd81 	bl	8012a54 <atoi>
 800af52:	4603      	mov	r3, r0
 800af54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (duty > 100)
 800af58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af5c:	2b64      	cmp	r3, #100	@ 0x64
 800af5e:	d902      	bls.n	800af66 <Cmd_ir_set_duty+0x3e>
		duty = 100;
 800af60:	2364      	movs	r3, #100	@ 0x64
 800af62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	ir_led_set_duty(duty);
 800af66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af6a:	4618      	mov	r0, r3
 800af6c:	f001 f8dc 	bl	800c128 <ir_led_set_duty>
	snprintf(buffer, sizeof(buffer), "IR LED duty: %i%%\r\n", duty);
 800af70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af74:	f107 000c 	add.w	r0, r7, #12
 800af78:	4a08      	ldr	r2, [pc, #32]	@ (800af9c <Cmd_ir_set_duty+0x74>)
 800af7a:	2150      	movs	r1, #80	@ 0x50
 800af7c:	f007 fdf2 	bl	8012b64 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800af80:	4b07      	ldr	r3, [pc, #28]	@ (800afa0 <Cmd_ir_set_duty+0x78>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f107 020c 	add.w	r2, r7, #12
 800af88:	4611      	mov	r1, r2
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7fe fa0a 	bl	80093a4 <UART_SendStringRing>
	return CMDLINE_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3760      	adds	r7, #96	@ 0x60
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	08014638 	.word	0x08014638
 800afa0:	200034a4 	.word	0x200034a4

0800afa4 <Cmd_ir_get_duty>:

int Cmd_ir_get_duty(int argc, char *argv[]) {
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b08e      	sub	sp, #56	@ 0x38
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
	if (argc > 2)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	dd01      	ble.n	800afb8 <Cmd_ir_get_duty+0x14>
		return CMDLINE_TOO_MANY_ARGS;
 800afb4:	2302      	movs	r3, #2
 800afb6:	e015      	b.n	800afe4 <Cmd_ir_get_duty+0x40>
	char buffer[40];
	uint8_t duty = ir_led_get_duty();
 800afb8:	f001 f8d6 	bl	800c168 <ir_led_get_duty>
 800afbc:	4603      	mov	r3, r0
 800afbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	snprintf(buffer, sizeof(buffer), "Heater duty: %i%%\r\n", duty);
 800afc2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800afc6:	f107 000c 	add.w	r0, r7, #12
 800afca:	4a08      	ldr	r2, [pc, #32]	@ (800afec <Cmd_ir_get_duty+0x48>)
 800afcc:	2128      	movs	r1, #40	@ 0x28
 800afce:	f007 fdc9 	bl	8012b64 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800afd2:	4b07      	ldr	r3, [pc, #28]	@ (800aff0 <Cmd_ir_get_duty+0x4c>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f107 020c 	add.w	r2, r7, #12
 800afda:	4611      	mov	r1, r2
 800afdc:	4618      	mov	r0, r3
 800afde:	f7fe f9e1 	bl	80093a4 <UART_SendStringRing>
	return CMDLINE_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3738      	adds	r7, #56	@ 0x38
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	0801464c 	.word	0x0801464c
 800aff0:	200034a4 	.word	0x200034a4

0800aff4 <Cmd_acceleration_gyroscope_get>:

/* Command for i2c sensor */
int Cmd_acceleration_gyroscope_get(int argc, char *argv[]) {
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
	return (CMDLINE_OK);
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <Cmd_pressure_get>:
int Cmd_pressure_get(int argc, char *argv[]) {
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
	return (CMDLINE_OK);
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <Cmd_int_ls_dac>:
//
//    return CMDLINE_OK;
//}

/* Internal laser board commands */
int Cmd_int_ls_dac(int argc, char *argv[]) {
 800b024:	b580      	push	{r7, lr}
 800b026:	b092      	sub	sp, #72	@ 0x48
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
	if (argc > 3)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2b03      	cmp	r3, #3
 800b032:	dd01      	ble.n	800b038 <Cmd_int_ls_dac+0x14>
		return CMDLINE_TOO_MANY_ARGS;
 800b034:	2302      	movs	r3, #2
 800b036:	e02b      	b.n	800b090 <Cmd_int_ls_dac+0x6c>
	if (argc < 3)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	dc01      	bgt.n	800b042 <Cmd_int_ls_dac+0x1e>
		return CMDLINE_TOO_FEW_ARGS;
 800b03e:	2303      	movs	r3, #3
 800b040:	e026      	b.n	800b090 <Cmd_int_ls_dac+0x6c>
	uint16_t voltage = atoi(argv[1]);
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	3304      	adds	r3, #4
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4618      	mov	r0, r3
 800b04a:	f007 fd03 	bl	8012a54 <atoi>
 800b04e:	4603      	mov	r3, r0
 800b050:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	if (voltage > 255)
 800b054:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b058:	2bff      	cmp	r3, #255	@ 0xff
 800b05a:	d901      	bls.n	800b060 <Cmd_int_ls_dac+0x3c>
		return CMDLINE_INVALID_ARG;
 800b05c:	2304      	movs	r3, #4
 800b05e:	e017      	b.n	800b090 <Cmd_int_ls_dac+0x6c>
	char buffer[60];
	snprintf(buffer, sizeof(buffer), "\r\n--> Int Laser DAC: %d", voltage);
 800b060:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b064:	f107 0008 	add.w	r0, r7, #8
 800b068:	4a0b      	ldr	r2, [pc, #44]	@ (800b098 <Cmd_int_ls_dac+0x74>)
 800b06a:	213c      	movs	r1, #60	@ 0x3c
 800b06c:	f007 fd7a 	bl	8012b64 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800b070:	4b0a      	ldr	r3, [pc, #40]	@ (800b09c <Cmd_int_ls_dac+0x78>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f107 0208 	add.w	r2, r7, #8
 800b078:	4611      	mov	r1, r2
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fe f992 	bl	80093a4 <UART_SendStringRing>
	MCP4902_Set_Voltage(&DAC_device, MCP4902_CHA, voltage);
 800b080:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b084:	461a      	mov	r2, r3
 800b086:	2100      	movs	r1, #0
 800b088:	4805      	ldr	r0, [pc, #20]	@ (800b0a0 <Cmd_int_ls_dac+0x7c>)
 800b08a:	f001 f9ad 	bl	800c3e8 <MCP4902_Set_Voltage>
	return CMDLINE_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3748      	adds	r7, #72	@ 0x48
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	08014660 	.word	0x08014660
 800b09c:	200034a4 	.word	0x200034a4
 800b0a0:	20003550 	.word	0x20003550

0800b0a4 <Cmd_int_ls_set>:

int Cmd_int_ls_set(int argc, char *argv[]) {
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
	if (argc > 3)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b03      	cmp	r3, #3
 800b0b2:	dd01      	ble.n	800b0b8 <Cmd_int_ls_set+0x14>
		return CMDLINE_TOO_MANY_ARGS;
 800b0b4:	2302      	movs	r3, #2
 800b0b6:	e017      	b.n	800b0e8 <Cmd_int_ls_set+0x44>
	if (argc < 3)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	dc01      	bgt.n	800b0c2 <Cmd_int_ls_set+0x1e>
		return CMDLINE_TOO_FEW_ARGS;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e012      	b.n	800b0e8 <Cmd_int_ls_set+0x44>
	uint8_t ls_slot = atoi(argv[1]);
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	3304      	adds	r3, #4
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f007 fcc3 	bl	8012a54 <atoi>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	73fb      	strb	r3, [r7, #15]
	if (ls_slot > INTERNAL_CHAIN_CHANNEL_NUM)
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
 800b0d4:	2b24      	cmp	r3, #36	@ 0x24
 800b0d6:	d901      	bls.n	800b0dc <Cmd_int_ls_set+0x38>
		return CMDLINE_INVALID_ARG;
 800b0d8:	2304      	movs	r3, #4
 800b0da:	e005      	b.n	800b0e8 <Cmd_int_ls_set+0x44>
	ADG1414_Chain_SwitchOn(&laser_int, ls_slot);
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
 800b0de:	4619      	mov	r1, r3
 800b0e0:	4803      	ldr	r0, [pc, #12]	@ (800b0f0 <Cmd_int_ls_set+0x4c>)
 800b0e2:	f000 fbbd 	bl	800b860 <ADG1414_Chain_SwitchOn>
	return CMDLINE_OK;
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	20003510 	.word	0x20003510

0800b0f4 <Cmd_int_ls_auto>:
int Cmd_int_ls_auto(int argc, char *argv[]) {
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b0a0      	sub	sp, #128	@ 0x80
 800b0f8:	af02      	add	r7, sp, #8
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
	if (argc > 8)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2b08      	cmp	r3, #8
 800b102:	dd01      	ble.n	800b108 <Cmd_int_ls_auto+0x14>
		return CMDLINE_TOO_MANY_ARGS;
 800b104:	2302      	movs	r3, #2
 800b106:	e13e      	b.n	800b386 <Cmd_int_ls_auto+0x292>
	if (argc < 8)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2b07      	cmp	r3, #7
 800b10c:	dc01      	bgt.n	800b112 <Cmd_int_ls_auto+0x1e>
		return CMDLINE_TOO_FEW_ARGS;
 800b10e:	2303      	movs	r3, #3
 800b110:	e139      	b.n	800b386 <Cmd_int_ls_auto+0x292>
	uint32_t interval = atoi(argv[1]);
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	3304      	adds	r3, #4
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4618      	mov	r0, r3
 800b11a:	f007 fc9b 	bl	8012a54 <atoi>
 800b11e:	4603      	mov	r3, r0
 800b120:	673b      	str	r3, [r7, #112]	@ 0x70
	uint32_t times = atoi(argv[2]);
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	3308      	adds	r3, #8
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4618      	mov	r0, r3
 800b12a:	f007 fc93 	bl	8012a54 <atoi>
 800b12e:	4603      	mov	r3, r0
 800b130:	66fb      	str	r3, [r7, #108]	@ 0x6c
	uint32_t udelay = atoi(argv[3]);
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	330c      	adds	r3, #12
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4618      	mov	r0, r3
 800b13a:	f007 fc8b 	bl	8012a54 <atoi>
 800b13e:	4603      	mov	r3, r0
 800b140:	66bb      	str	r3, [r7, #104]	@ 0x68
	uint8_t s_do_time = atoi(argv[4]);
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	3310      	adds	r3, #16
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4618      	mov	r0, r3
 800b14a:	f007 fc83 	bl	8012a54 <atoi>
 800b14e:	4603      	mov	r3, r0
 800b150:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t s_rest_time = atoi(argv[5]);
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	3314      	adds	r3, #20
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4618      	mov	r0, r3
 800b15c:	f007 fc7a 	bl	8012a54 <atoi>
 800b160:	4603      	mov	r3, r0
 800b162:	663b      	str	r3, [r7, #96]	@ 0x60
	uint32_t dac = atoi(argv[6]);
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	3318      	adds	r3, #24
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f007 fc72 	bl	8012a54 <atoi>
 800b170:	4603      	mov	r3, r0
 800b172:	65fb      	str	r3, [r7, #92]	@ 0x5c
	char buffer[80];
	if (interval % 100 != 0 || interval < 400) {
 800b174:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b176:	4b86      	ldr	r3, [pc, #536]	@ (800b390 <Cmd_int_ls_auto+0x29c>)
 800b178:	fba3 1302 	umull	r1, r3, r3, r2
 800b17c:	095b      	lsrs	r3, r3, #5
 800b17e:	2164      	movs	r1, #100	@ 0x64
 800b180:	fb01 f303 	mul.w	r3, r1, r3
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	2b00      	cmp	r3, #0
 800b188:	d103      	bne.n	800b192 <Cmd_int_ls_auto+0x9e>
 800b18a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b18c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800b190:	d210      	bcs.n	800b1b4 <Cmd_int_ls_auto+0xc0>
		snprintf(buffer, sizeof(buffer),
 800b192:	f107 0308 	add.w	r3, r7, #8
 800b196:	4a7f      	ldr	r2, [pc, #508]	@ (800b394 <Cmd_int_ls_auto+0x2a0>)
 800b198:	2150      	movs	r1, #80	@ 0x50
 800b19a:	4618      	mov	r0, r3
 800b19c:	f007 fce2 	bl	8012b64 <sniprintf>
				"Error: Interval must be a multiple of 100ms and > 400ms.\r\n");
		UART_SendStringRing(UART_CMDLINE, buffer);
 800b1a0:	4b7d      	ldr	r3, [pc, #500]	@ (800b398 <Cmd_int_ls_auto+0x2a4>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f107 0208 	add.w	r2, r7, #8
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fe f8fa 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_INVALID_ARG;
 800b1b0:	2304      	movs	r3, #4
 800b1b2:	e0e8      	b.n	800b386 <Cmd_int_ls_auto+0x292>
	}
	if (times < 200 || times % 100 != 0 || times > interval) {
 800b1b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1b6:	2bc7      	cmp	r3, #199	@ 0xc7
 800b1b8:	d90e      	bls.n	800b1d8 <Cmd_int_ls_auto+0xe4>
 800b1ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b1bc:	4b74      	ldr	r3, [pc, #464]	@ (800b390 <Cmd_int_ls_auto+0x29c>)
 800b1be:	fba3 1302 	umull	r1, r3, r3, r2
 800b1c2:	095b      	lsrs	r3, r3, #5
 800b1c4:	2164      	movs	r1, #100	@ 0x64
 800b1c6:	fb01 f303 	mul.w	r3, r1, r3
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d103      	bne.n	800b1d8 <Cmd_int_ls_auto+0xe4>
 800b1d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b1d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d910      	bls.n	800b1fa <Cmd_int_ls_auto+0x106>
		snprintf(buffer, sizeof(buffer),
 800b1d8:	f107 0308 	add.w	r3, r7, #8
 800b1dc:	4a6f      	ldr	r2, [pc, #444]	@ (800b39c <Cmd_int_ls_auto+0x2a8>)
 800b1de:	2150      	movs	r1, #80	@ 0x50
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f007 fcbf 	bl	8012b64 <sniprintf>
				"Error: Times must be <= interval, > 200ms, mulof100ms.\r\n");
		UART_SendStringRing(UART_CMDLINE, buffer);
 800b1e6:	4b6c      	ldr	r3, [pc, #432]	@ (800b398 <Cmd_int_ls_auto+0x2a4>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f107 0208 	add.w	r2, r7, #8
 800b1ee:	4611      	mov	r1, r2
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7fe f8d7 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_INVALID_ARG;
 800b1f6:	2304      	movs	r3, #4
 800b1f8:	e0c5      	b.n	800b386 <Cmd_int_ls_auto+0x292>
	}
	if (udelay > 500) {
 800b1fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b1fc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b200:	d910      	bls.n	800b224 <Cmd_int_ls_auto+0x130>
		snprintf(buffer, sizeof(buffer), "Error: udelay <= 500\r\n");
 800b202:	f107 0308 	add.w	r3, r7, #8
 800b206:	4a66      	ldr	r2, [pc, #408]	@ (800b3a0 <Cmd_int_ls_auto+0x2ac>)
 800b208:	2150      	movs	r1, #80	@ 0x50
 800b20a:	4618      	mov	r0, r3
 800b20c:	f007 fcaa 	bl	8012b64 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 800b210:	4b61      	ldr	r3, [pc, #388]	@ (800b398 <Cmd_int_ls_auto+0x2a4>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f107 0208 	add.w	r2, r7, #8
 800b218:	4611      	mov	r1, r2
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fe f8c2 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_INVALID_ARG;
 800b220:	2304      	movs	r3, #4
 800b222:	e0b0      	b.n	800b386 <Cmd_int_ls_auto+0x292>
	}
	if (s_do_time > 200) {
 800b224:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b228:	2bc8      	cmp	r3, #200	@ 0xc8
 800b22a:	d910      	bls.n	800b24e <Cmd_int_ls_auto+0x15a>
		snprintf(buffer, sizeof(buffer),
 800b22c:	f107 0308 	add.w	r3, r7, #8
 800b230:	4a5c      	ldr	r2, [pc, #368]	@ (800b3a4 <Cmd_int_ls_auto+0x2b0>)
 800b232:	2150      	movs	r1, #80	@ 0x50
 800b234:	4618      	mov	r0, r3
 800b236:	f007 fc95 	bl	8012b64 <sniprintf>
				"Error: Do only < 200 or = 0 to infinity\r\n");
		UART_SendStringRing(UART_CMDLINE, buffer);
 800b23a:	4b57      	ldr	r3, [pc, #348]	@ (800b398 <Cmd_int_ls_auto+0x2a4>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f107 0208 	add.w	r2, r7, #8
 800b242:	4611      	mov	r1, r2
 800b244:	4618      	mov	r0, r3
 800b246:	f7fe f8ad 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_INVALID_ARG;
 800b24a:	2304      	movs	r3, #4
 800b24c:	e09b      	b.n	800b386 <Cmd_int_ls_auto+0x292>
	}
	run_inf = (s_do_time == 0) ? 1 : 0;
 800b24e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b252:	2b00      	cmp	r3, #0
 800b254:	bf0c      	ite	eq
 800b256:	2301      	moveq	r3, #1
 800b258:	2300      	movne	r3, #0
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	461a      	mov	r2, r3
 800b25e:	4b52      	ldr	r3, [pc, #328]	@ (800b3a8 <Cmd_int_ls_auto+0x2b4>)
 800b260:	701a      	strb	r2, [r3, #0]
	if (dac > 255)
 800b262:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b264:	2bff      	cmp	r3, #255	@ 0xff
 800b266:	d901      	bls.n	800b26c <Cmd_int_ls_auto+0x178>
		return CMDLINE_INVALID_ARG;
 800b268:	2304      	movs	r3, #4
 800b26a:	e08c      	b.n	800b386 <Cmd_int_ls_auto+0x292>
	snprintf(buffer, sizeof(buffer), "DAC Point: %ld\r\n", dac);
 800b26c:	f107 0008 	add.w	r0, r7, #8
 800b270:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b272:	4a4e      	ldr	r2, [pc, #312]	@ (800b3ac <Cmd_int_ls_auto+0x2b8>)
 800b274:	2150      	movs	r1, #80	@ 0x50
 800b276:	f007 fc75 	bl	8012b64 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800b27a:	4b47      	ldr	r3, [pc, #284]	@ (800b398 <Cmd_int_ls_auto+0x2a4>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f107 0208 	add.w	r2, r7, #8
 800b282:	4611      	mov	r1, r2
 800b284:	4618      	mov	r0, r3
 800b286:	f7fe f88d 	bl	80093a4 <UART_SendStringRing>
	int16_t temp = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	if (temp == 0x7FFF) {
 800b290:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 800b294:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b298:	4293      	cmp	r3, r2
 800b29a:	d106      	bne.n	800b2aa <Cmd_int_ls_auto+0x1b6>
		UART_SendStringRing(UART_CMDLINE, "\r\nTemp BMP390 = [FAIL]\r\n");
 800b29c:	4b3e      	ldr	r3, [pc, #248]	@ (800b398 <Cmd_int_ls_auto+0x2a4>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4943      	ldr	r1, [pc, #268]	@ (800b3b0 <Cmd_int_ls_auto+0x2bc>)
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fe f87e 	bl	80093a4 <UART_SendStringRing>
 800b2a8:	e00f      	b.n	800b2ca <Cmd_int_ls_auto+0x1d6>
	} else {
		snprintf(buffer, sizeof(buffer), "\r\nTemp BMP390 = [%i]\r\n", temp);
 800b2aa:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 800b2ae:	f107 0008 	add.w	r0, r7, #8
 800b2b2:	4a40      	ldr	r2, [pc, #256]	@ (800b3b4 <Cmd_int_ls_auto+0x2c0>)
 800b2b4:	2150      	movs	r1, #80	@ 0x50
 800b2b6:	f007 fc55 	bl	8012b64 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 800b2ba:	4b37      	ldr	r3, [pc, #220]	@ (800b398 <Cmd_int_ls_auto+0x2a4>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f107 0208 	add.w	r2, r7, #8
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fe f86d 	bl	80093a4 <UART_SendStringRing>
	}
	for (uint8_t channel = 0; channel < 8; channel++) {
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800b2d0:	e02e      	b.n	800b330 <Cmd_int_ls_auto+0x23c>
		temp = NTC_Temperature[channel];
 800b2d2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b2d6:	4a38      	ldr	r2, [pc, #224]	@ (800b3b8 <Cmd_int_ls_auto+0x2c4>)
 800b2d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2dc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
		if (temp == 0x7FFF) {
 800b2e0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 800b2e4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d108      	bne.n	800b2fe <Cmd_int_ls_auto+0x20a>
			snprintf(buffer, sizeof(buffer), " | NTC[%d] = [FAIL]\r\n",
 800b2ec:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b2f0:	f107 0008 	add.w	r0, r7, #8
 800b2f4:	4a31      	ldr	r2, [pc, #196]	@ (800b3bc <Cmd_int_ls_auto+0x2c8>)
 800b2f6:	2150      	movs	r1, #80	@ 0x50
 800b2f8:	f007 fc34 	bl	8012b64 <sniprintf>
 800b2fc:	e00b      	b.n	800b316 <Cmd_int_ls_auto+0x222>
					channel);
		} else {
			snprintf(buffer, sizeof(buffer), " | NTC[%d] = [%i]\r\n", channel,
 800b2fe:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800b302:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 800b306:	f107 0008 	add.w	r0, r7, #8
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	4613      	mov	r3, r2
 800b30e:	4a2c      	ldr	r2, [pc, #176]	@ (800b3c0 <Cmd_int_ls_auto+0x2cc>)
 800b310:	2150      	movs	r1, #80	@ 0x50
 800b312:	f007 fc27 	bl	8012b64 <sniprintf>
					temp);
		}
		UART_SendStringRing(UART_CMDLINE, buffer);
 800b316:	4b20      	ldr	r3, [pc, #128]	@ (800b398 <Cmd_int_ls_auto+0x2a4>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f107 0208 	add.w	r2, r7, #8
 800b31e:	4611      	mov	r1, r2
 800b320:	4618      	mov	r0, r3
 800b322:	f7fe f83f 	bl	80093a4 <UART_SendStringRing>
	for (uint8_t channel = 0; channel < 8; channel++) {
 800b326:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b32a:	3301      	adds	r3, #1
 800b32c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800b330:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b334:	2b07      	cmp	r3, #7
 800b336:	d9cc      	bls.n	800b2d2 <Cmd_int_ls_auto+0x1de>
	}
	laser_interval = interval;
 800b338:	4a22      	ldr	r2, [pc, #136]	@ (800b3c4 <Cmd_int_ls_auto+0x2d0>)
 800b33a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b33c:	6013      	str	r3, [r2, #0]
	adc_interval = times;
 800b33e:	4a22      	ldr	r2, [pc, #136]	@ (800b3c8 <Cmd_int_ls_auto+0x2d4>)
 800b340:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b342:	6013      	str	r3, [r2, #0]
	user_delay = udelay;
 800b344:	4a21      	ldr	r2, [pc, #132]	@ (800b3cc <Cmd_int_ls_auto+0x2d8>)
 800b346:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b348:	6013      	str	r3, [r2, #0]
	rest_time = s_rest_time;
 800b34a:	4a21      	ldr	r2, [pc, #132]	@ (800b3d0 <Cmd_int_ls_auto+0x2dc>)
 800b34c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b34e:	6013      	str	r3, [r2, #0]
	do_time = s_do_time;
 800b350:	4a20      	ldr	r2, [pc, #128]	@ (800b3d4 <Cmd_int_ls_auto+0x2e0>)
 800b352:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b356:	7013      	strb	r3, [r2, #0]
	run_system = 1;
 800b358:	4b1f      	ldr	r3, [pc, #124]	@ (800b3d8 <Cmd_int_ls_auto+0x2e4>)
 800b35a:	2201      	movs	r2, #1
 800b35c:	701a      	strb	r2, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 800b35e:	f107 0008 	add.w	r0, r7, #8
 800b362:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b36c:	4a1b      	ldr	r2, [pc, #108]	@ (800b3dc <Cmd_int_ls_auto+0x2e8>)
 800b36e:	2150      	movs	r1, #80	@ 0x50
 800b370:	f007 fbf8 	bl	8012b64 <sniprintf>
			"Run system with interval: %ld ms, times: %ld, delay: %ld. Enter to End\r\n",
			interval, times, udelay);
	UART_SendStringRing(UART_CMDLINE, buffer);
 800b374:	4b08      	ldr	r3, [pc, #32]	@ (800b398 <Cmd_int_ls_auto+0x2a4>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f107 0208 	add.w	r2, r7, #8
 800b37c:	4611      	mov	r1, r2
 800b37e:	4618      	mov	r0, r3
 800b380:	f7fe f810 	bl	80093a4 <UART_SendStringRing>
	return CMDLINE_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3778      	adds	r7, #120	@ 0x78
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	51eb851f 	.word	0x51eb851f
 800b394:	08014678 	.word	0x08014678
 800b398:	200034a4 	.word	0x200034a4
 800b39c:	080146b4 	.word	0x080146b4
 800b3a0:	080146f0 	.word	0x080146f0
 800b3a4:	08014708 	.word	0x08014708
 800b3a8:	20003501 	.word	0x20003501
 800b3ac:	08014734 	.word	0x08014734
 800b3b0:	08014748 	.word	0x08014748
 800b3b4:	08014764 	.word	0x08014764
 800b3b8:	20003578 	.word	0x20003578
 800b3bc:	0801477c 	.word	0x0801477c
 800b3c0:	08014794 	.word	0x08014794
 800b3c4:	200034ec 	.word	0x200034ec
 800b3c8:	200034f4 	.word	0x200034f4
 800b3cc:	200034f8 	.word	0x200034f8
 800b3d0:	200034fc 	.word	0x200034fc
 800b3d4:	20003500 	.word	0x20003500
 800b3d8:	200034f0 	.word	0x200034f0
 800b3dc:	080147a8 	.word	0x080147a8

0800b3e0 <Cmd_ext_ls_dac>:

/* External laser board commands */
int Cmd_ext_ls_dac(int argc, char *argv[]) {
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b092      	sub	sp, #72	@ 0x48
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
	if (argc > 3)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2b03      	cmp	r3, #3
 800b3ee:	dd01      	ble.n	800b3f4 <Cmd_ext_ls_dac+0x14>
		return CMDLINE_TOO_MANY_ARGS;
 800b3f0:	2302      	movs	r3, #2
 800b3f2:	e02b      	b.n	800b44c <Cmd_ext_ls_dac+0x6c>
	if (argc < 3)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	dc01      	bgt.n	800b3fe <Cmd_ext_ls_dac+0x1e>
		return CMDLINE_TOO_FEW_ARGS;
 800b3fa:	2303      	movs	r3, #3
 800b3fc:	e026      	b.n	800b44c <Cmd_ext_ls_dac+0x6c>
	uint16_t voltage = atoi(argv[1]);
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	3304      	adds	r3, #4
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4618      	mov	r0, r3
 800b406:	f007 fb25 	bl	8012a54 <atoi>
 800b40a:	4603      	mov	r3, r0
 800b40c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	if (voltage > 210)
 800b410:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b414:	2bd2      	cmp	r3, #210	@ 0xd2
 800b416:	d901      	bls.n	800b41c <Cmd_ext_ls_dac+0x3c>
		return CMDLINE_INVALID_ARG;
 800b418:	2304      	movs	r3, #4
 800b41a:	e017      	b.n	800b44c <Cmd_ext_ls_dac+0x6c>
	char buffer[60];
	snprintf(buffer, sizeof(buffer), "\r\n--> Ext Laser DAC: %d", voltage);
 800b41c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b420:	f107 0008 	add.w	r0, r7, #8
 800b424:	4a0b      	ldr	r2, [pc, #44]	@ (800b454 <Cmd_ext_ls_dac+0x74>)
 800b426:	213c      	movs	r1, #60	@ 0x3c
 800b428:	f007 fb9c 	bl	8012b64 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800b42c:	4b0a      	ldr	r3, [pc, #40]	@ (800b458 <Cmd_ext_ls_dac+0x78>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f107 0208 	add.w	r2, r7, #8
 800b434:	4611      	mov	r1, r2
 800b436:	4618      	mov	r0, r3
 800b438:	f7fd ffb4 	bl	80093a4 <UART_SendStringRing>
	MCP4902_Set_Voltage(&DAC_device, MCP4902_CHB, voltage);
 800b43c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b440:	461a      	mov	r2, r3
 800b442:	2101      	movs	r1, #1
 800b444:	4805      	ldr	r0, [pc, #20]	@ (800b45c <Cmd_ext_ls_dac+0x7c>)
 800b446:	f000 ffcf 	bl	800c3e8 <MCP4902_Set_Voltage>
	return CMDLINE_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3748      	adds	r7, #72	@ 0x48
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	080147f4 	.word	0x080147f4
 800b458:	200034a4 	.word	0x200034a4
 800b45c:	20003550 	.word	0x20003550

0800b460 <Cmd_ext_ls_set>:
int Cmd_ext_ls_set(int argc, char *argv[]) {
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
	if (argc > 3)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2b03      	cmp	r3, #3
 800b46e:	dd01      	ble.n	800b474 <Cmd_ext_ls_set+0x14>
		return CMDLINE_TOO_MANY_ARGS;
 800b470:	2302      	movs	r3, #2
 800b472:	e017      	b.n	800b4a4 <Cmd_ext_ls_set+0x44>
	if (argc < 3)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b02      	cmp	r3, #2
 800b478:	dc01      	bgt.n	800b47e <Cmd_ext_ls_set+0x1e>
		return CMDLINE_TOO_FEW_ARGS;
 800b47a:	2303      	movs	r3, #3
 800b47c:	e012      	b.n	800b4a4 <Cmd_ext_ls_set+0x44>
	uint8_t ls_slot = atoi(argv[1]);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	3304      	adds	r3, #4
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4618      	mov	r0, r3
 800b486:	f007 fae5 	bl	8012a54 <atoi>
 800b48a:	4603      	mov	r3, r0
 800b48c:	73fb      	strb	r3, [r7, #15]
	if (ls_slot > EXTERNAL_CHAIN_CHANNEL_NUM)
 800b48e:	7bfb      	ldrb	r3, [r7, #15]
 800b490:	2b08      	cmp	r3, #8
 800b492:	d901      	bls.n	800b498 <Cmd_ext_ls_set+0x38>
		return CMDLINE_INVALID_ARG;
 800b494:	2304      	movs	r3, #4
 800b496:	e005      	b.n	800b4a4 <Cmd_ext_ls_set+0x44>
	ADG1414_Chain_SwitchOn(&laser_ext, ls_slot);
 800b498:	7bfb      	ldrb	r3, [r7, #15]
 800b49a:	4619      	mov	r1, r3
 800b49c:	4803      	ldr	r0, [pc, #12]	@ (800b4ac <Cmd_ext_ls_set+0x4c>)
 800b49e:	f000 f9df 	bl	800b860 <ADG1414_Chain_SwitchOn>
	return CMDLINE_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	20003530 	.word	0x20003530

0800b4b0 <Cmd_ext_ls_auto>:
int Cmd_ext_ls_auto(int argc, char *argv[]) {
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
	return CMDLINE_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <Cmd_pd_set>:

/* Photo board commands */
int Cmd_pd_set(int argc, char *argv[]) {
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
	if (argc > 3)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2b03      	cmp	r3, #3
 800b4d6:	dd01      	ble.n	800b4dc <Cmd_pd_set+0x14>
		return CMDLINE_TOO_MANY_ARGS;
 800b4d8:	2302      	movs	r3, #2
 800b4da:	e017      	b.n	800b50c <Cmd_pd_set+0x44>
	if (argc < 3)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	dc01      	bgt.n	800b4e6 <Cmd_pd_set+0x1e>
		return CMDLINE_TOO_FEW_ARGS;
 800b4e2:	2303      	movs	r3, #3
 800b4e4:	e012      	b.n	800b50c <Cmd_pd_set+0x44>
	uint8_t pd_slot = atoi(argv[1]);
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f007 fab1 	bl	8012a54 <atoi>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	73fb      	strb	r3, [r7, #15]
	if (pd_slot > INTERNAL_CHAIN_CHANNEL_NUM)
 800b4f6:	7bfb      	ldrb	r3, [r7, #15]
 800b4f8:	2b24      	cmp	r3, #36	@ 0x24
 800b4fa:	d901      	bls.n	800b500 <Cmd_pd_set+0x38>
		return CMDLINE_INVALID_ARG;
 800b4fc:	2304      	movs	r3, #4
 800b4fe:	e005      	b.n	800b50c <Cmd_pd_set+0x44>
	ADG1414_Chain_SwitchOn(&photo_sw, pd_slot);
 800b500:	7bfb      	ldrb	r3, [r7, #15]
 800b502:	4619      	mov	r1, r3
 800b504:	4803      	ldr	r0, [pc, #12]	@ (800b514 <Cmd_pd_set+0x4c>)
 800b506:	f000 f9ab 	bl	800b860 <ADG1414_Chain_SwitchOn>
	return CMDLINE_OK;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	20003588 	.word	0x20003588

0800b518 <Cmd_pd_get_adc>:
int Cmd_pd_get_adc(int argc, char *argv[]) {
 800b518:	b580      	push	{r7, lr}
 800b51a:	b092      	sub	sp, #72	@ 0x48
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
	if (argc > 2)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2b02      	cmp	r3, #2
 800b526:	dd01      	ble.n	800b52c <Cmd_pd_get_adc+0x14>
		return CMDLINE_TOO_MANY_ARGS;
 800b528:	2302      	movs	r3, #2
 800b52a:	e01b      	b.n	800b564 <Cmd_pd_get_adc+0x4c>
	if (argc < 2)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	dc01      	bgt.n	800b536 <Cmd_pd_get_adc+0x1e>
		return CMDLINE_TOO_FEW_ARGS;
 800b532:	2303      	movs	r3, #3
 800b534:	e016      	b.n	800b564 <Cmd_pd_get_adc+0x4c>
	uint32_t result = 0;
 800b536:	2300      	movs	r3, #0
 800b538:	647b      	str	r3, [r7, #68]	@ 0x44

	result = ADS8327_Read_Data_Polling(&photo_adc);
 800b53a:	480c      	ldr	r0, [pc, #48]	@ (800b56c <Cmd_pd_get_adc+0x54>)
 800b53c:	f002 f84a 	bl	800d5d4 <ADS8327_Read_Data_Polling>
 800b540:	4603      	mov	r3, r0
 800b542:	647b      	str	r3, [r7, #68]	@ 0x44

	char buffer[60];
	snprintf(buffer, sizeof(buffer), "\r\n--> Got ADC: %ld", result);
 800b544:	f107 0008 	add.w	r0, r7, #8
 800b548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b54a:	4a09      	ldr	r2, [pc, #36]	@ (800b570 <Cmd_pd_get_adc+0x58>)
 800b54c:	213c      	movs	r1, #60	@ 0x3c
 800b54e:	f007 fb09 	bl	8012b64 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800b552:	4b08      	ldr	r3, [pc, #32]	@ (800b574 <Cmd_pd_get_adc+0x5c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f107 0208 	add.w	r2, r7, #8
 800b55a:	4611      	mov	r1, r2
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fd ff21 	bl	80093a4 <UART_SendStringRing>
	return CMDLINE_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3748      	adds	r7, #72	@ 0x48
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	200035a8 	.word	0x200035a8
 800b570:	0801480c 	.word	0x0801480c
 800b574:	200034a4 	.word	0x200034a4

0800b578 <Cmd_pd_auto>:
int Cmd_pd_auto(int argc, char *argv[]) {
 800b578:	b580      	push	{r7, lr}
 800b57a:	b098      	sub	sp, #96	@ 0x60
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
	if (argc > 3)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2b03      	cmp	r3, #3
 800b586:	dd01      	ble.n	800b58c <Cmd_pd_auto+0x14>
		return CMDLINE_TOO_MANY_ARGS;
 800b588:	2302      	movs	r3, #2
 800b58a:	e042      	b.n	800b612 <Cmd_pd_auto+0x9a>
	if (argc < 3)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2b02      	cmp	r3, #2
 800b590:	dc01      	bgt.n	800b596 <Cmd_pd_auto+0x1e>
		return CMDLINE_TOO_FEW_ARGS;
 800b592:	2303      	movs	r3, #3
 800b594:	e03d      	b.n	800b612 <Cmd_pd_auto+0x9a>
	uint32_t interval = atoi(argv[1]);
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	3304      	adds	r3, #4
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f007 fa59 	bl	8012a54 <atoi>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	char buffer[80];
	if (interval % 100 != 0 || interval < 500) {
 800b5a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b5a8:	4b1c      	ldr	r3, [pc, #112]	@ (800b61c <Cmd_pd_auto+0xa4>)
 800b5aa:	fba3 1302 	umull	r1, r3, r3, r2
 800b5ae:	095b      	lsrs	r3, r3, #5
 800b5b0:	2164      	movs	r1, #100	@ 0x64
 800b5b2:	fb01 f303 	mul.w	r3, r1, r3
 800b5b6:	1ad3      	subs	r3, r2, r3
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d103      	bne.n	800b5c4 <Cmd_pd_auto+0x4c>
 800b5bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b5be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b5c2:	d210      	bcs.n	800b5e6 <Cmd_pd_auto+0x6e>
		snprintf(buffer, sizeof(buffer),
 800b5c4:	f107 030c 	add.w	r3, r7, #12
 800b5c8:	4a15      	ldr	r2, [pc, #84]	@ (800b620 <Cmd_pd_auto+0xa8>)
 800b5ca:	2150      	movs	r1, #80	@ 0x50
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f007 fac9 	bl	8012b64 <sniprintf>
				"Error: Interval must be a multiple of 100ms and > 500ms.\r\n");
		UART_SendStringRing(UART_CMDLINE, buffer);
 800b5d2:	4b14      	ldr	r3, [pc, #80]	@ (800b624 <Cmd_pd_auto+0xac>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f107 020c 	add.w	r2, r7, #12
 800b5da:	4611      	mov	r1, r2
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7fd fee1 	bl	80093a4 <UART_SendStringRing>
		return CMDLINE_INVALID_ARG;
 800b5e2:	2304      	movs	r3, #4
 800b5e4:	e015      	b.n	800b612 <Cmd_pd_auto+0x9a>
	}
	adc_interval = interval;
 800b5e6:	4a10      	ldr	r2, [pc, #64]	@ (800b628 <Cmd_pd_auto+0xb0>)
 800b5e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b5ea:	6013      	str	r3, [r2, #0]
	run_adc = 1;
 800b5ec:	4b0f      	ldr	r3, [pc, #60]	@ (800b62c <Cmd_pd_auto+0xb4>)
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	701a      	strb	r2, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 800b5f2:	f107 000c 	add.w	r0, r7, #12
 800b5f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b5f8:	4a0d      	ldr	r2, [pc, #52]	@ (800b630 <Cmd_pd_auto+0xb8>)
 800b5fa:	2150      	movs	r1, #80	@ 0x50
 800b5fc:	f007 fab2 	bl	8012b64 <sniprintf>
			"Run auto ADC with interval: %ld ms. Enter to End\r\n", interval);
	UART_SendStringRing(UART_CMDLINE, buffer);
 800b600:	4b08      	ldr	r3, [pc, #32]	@ (800b624 <Cmd_pd_auto+0xac>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f107 020c 	add.w	r2, r7, #12
 800b608:	4611      	mov	r1, r2
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7fd feca 	bl	80093a4 <UART_SendStringRing>
	return CMDLINE_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3760      	adds	r7, #96	@ 0x60
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	51eb851f 	.word	0x51eb851f
 800b620:	08014820 	.word	0x08014820
 800b624:	200034a4 	.word	0x200034a4
 800b628:	200034f4 	.word	0x200034f4
 800b62c:	200034f1 	.word	0x200034f1
 800b630:	0801485c 	.word	0x0801485c

0800b634 <CommandLine_CreateTask>:

void CommandLine_CreateTask(void) {
 800b634:	b580      	push	{r7, lr}
 800b636:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle,
 800b638:	4902      	ldr	r1, [pc, #8]	@ (800b644 <CommandLine_CreateTask+0x10>)
 800b63a:	4803      	ldr	r0, [pc, #12]	@ (800b648 <CommandLine_CreateTask+0x14>)
 800b63c:	f007 f8d6 	bl	80127ec <SCH_TASK_CreateTask>
			&s_CommandTaskContext.taskProperty);
}
 800b640:	bf00      	nop
 800b642:	bd80      	pop	{r7, pc}
 800b644:	20000208 	.word	0x20000208
 800b648:	20000204 	.word	0x20000204

0800b64c <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(const SPI_TypeDef *SPIx)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b65c:	2b40      	cmp	r3, #64	@ 0x40
 800b65e:	d101      	bne.n	800b664 <LL_SPI_IsEnabled+0x18>
 800b660:	2301      	movs	r3, #1
 800b662:	e000      	b.n	800b666 <LL_SPI_IsEnabled+0x1a>
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr

0800b672 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 800b672:	b480      	push	{r7}
 800b674:	b083      	sub	sp, #12
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	f003 0302 	and.w	r3, r3, #2
 800b682:	2b02      	cmp	r3, #2
 800b684:	d101      	bne.n	800b68a <LL_SPI_IsActiveFlag_TXE+0x18>
 800b686:	2301      	movs	r3, #1
 800b688:	e000      	b.n	800b68c <LL_SPI_IsActiveFlag_TXE+0x1a>
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(const SPI_TypeDef *SPIx)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6a8:	2b80      	cmp	r3, #128	@ 0x80
 800b6aa:	d101      	bne.n	800b6b0 <LL_SPI_IsActiveFlag_BSY+0x18>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e000      	b.n	800b6b2 <LL_SPI_IsActiveFlag_BSY+0x1a>
 800b6b0:	2300      	movs	r3, #0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b085      	sub	sp, #20
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	330c      	adds	r3, #12
 800b6ce:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	78fa      	ldrb	r2, [r7, #3]
 800b6d4:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800b6d6:	bf00      	nop
 800b6d8:	3714      	adds	r7, #20
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr

0800b6e2 <LL_GPIO_SetOutputPin>:
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b083      	sub	sp, #12
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	619a      	str	r2, [r3, #24]
}
 800b6f2:	bf00      	nop
 800b6f4:	370c      	adds	r7, #12
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr

0800b6fe <LL_GPIO_ResetOutputPin>:
{
 800b6fe:	b480      	push	{r7}
 800b700:	b083      	sub	sp, #12
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
 800b706:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	041a      	lsls	r2, r3, #16
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	619a      	str	r2, [r3, #24]
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <ADG1414_Chain_Write>:

#include <adg1414.h>


static void ADG1414_Chain_Write(ADG1414_Device_t *dev)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 800b724:	bf00      	nop
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7ff ffa1 	bl	800b672 <LL_SPI_IsActiveFlag_TXE>
 800b730:	4603      	mov	r3, r0
 800b732:	2b00      	cmp	r3, #0
 800b734:	d0f7      	beq.n	800b726 <ADG1414_Chain_Write+0xa>
	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	685a      	ldr	r2, [r3, #4]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	4619      	mov	r1, r3
 800b740:	4610      	mov	r0, r2
 800b742:	f7ff ffdc 	bl	800b6fe <LL_GPIO_ResetOutputPin>

    for (int i = dev->num_of_sw - 1; i >= 0; i--)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	7b1b      	ldrb	r3, [r3, #12]
 800b74a:	3b01      	subs	r3, #1
 800b74c:	60fb      	str	r3, [r7, #12]
 800b74e:	e01e      	b.n	800b78e <ADG1414_Chain_Write+0x72>
    {
        LL_SPI_TransmitData8(dev->spi, dev->switch_state[i]);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6818      	ldr	r0, [r3, #0]
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	4413      	add	r3, r2
 800b75a:	330d      	adds	r3, #13
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	4619      	mov	r1, r3
 800b760:	f7ff ffad 	bl	800b6be <LL_SPI_TransmitData8>
        while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 800b764:	bf00      	nop
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7ff ff81 	bl	800b672 <LL_SPI_IsActiveFlag_TXE>
 800b770:	4603      	mov	r3, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	d0f7      	beq.n	800b766 <ADG1414_Chain_Write+0x4a>
        while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 800b776:	bf00      	nop
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7ff ff8b 	bl	800b698 <LL_SPI_IsActiveFlag_BSY>
 800b782:	4603      	mov	r3, r0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1f7      	bne.n	800b778 <ADG1414_Chain_Write+0x5c>
    for (int i = dev->num_of_sw - 1; i >= 0; i--)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	3b01      	subs	r3, #1
 800b78c:	60fb      	str	r3, [r7, #12]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	dadd      	bge.n	800b750 <ADG1414_Chain_Write+0x34>
    }

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	685a      	ldr	r2, [r3, #4]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	4619      	mov	r1, r3
 800b79e:	4610      	mov	r0, r2
 800b7a0:	f7ff ff9f 	bl	800b6e2 <LL_GPIO_SetOutputPin>
}
 800b7a4:	bf00      	nop
 800b7a6:	3710      	adds	r7, #16
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <ADG1414_Chain_Init>:

/* Hàm khởi tạo module ADG1414 */
void ADG1414_Chain_Init(ADG1414_Device_t *dev, SPI_TypeDef *spi, GPIO_TypeDef *cs_port, uint32_t cs_pin, uint8_t num_of_sw)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b08c      	sub	sp, #48	@ 0x30
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
 800b7b8:	603b      	str	r3, [r7, #0]
	dev->spi = spi;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	68ba      	ldr	r2, [r7, #8]
 800b7be:	601a      	str	r2, [r3, #0]
	dev->num_of_sw = num_of_sw;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b7c6:	731a      	strb	r2, [r3, #12]
	dev->cs_port = cs_port;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	683a      	ldr	r2, [r7, #0]
 800b7d2:	609a      	str	r2, [r3, #8]

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7d4:	f107 0314 	add.w	r3, r7, #20
 800b7d8:	2200      	movs	r2, #0
 800b7da:	601a      	str	r2, [r3, #0]
 800b7dc:	605a      	str	r2, [r3, #4]
 800b7de:	609a      	str	r2, [r3, #8]
 800b7e0:	60da      	str	r2, [r3, #12]
 800b7e2:	611a      	str	r2, [r3, #16]
 800b7e4:	615a      	str	r2, [r3, #20]
    GPIO_InitStruct.Pin = dev->cs_pin;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800b7f0:	2302      	movs	r3, #2
 800b7f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_GPIO_Init(dev->cs_port, &GPIO_InitStruct);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	f107 0214 	add.w	r2, r7, #20
 800b804:	4611      	mov	r1, r2
 800b806:	4618      	mov	r0, r3
 800b808:	f005 fd8f 	bl	801132a <LL_GPIO_Init>

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	685a      	ldr	r2, [r3, #4]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	4619      	mov	r1, r3
 800b816:	4610      	mov	r0, r2
 800b818:	f7ff ff63 	bl	800b6e2 <LL_GPIO_SetOutputPin>

    for (int i = 0; i < dev->num_of_sw; i++)
 800b81c:	2300      	movs	r3, #0
 800b81e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b820:	e008      	b.n	800b834 <ADG1414_Chain_Init+0x88>
    {
        dev->switch_state[i] = 0x00;
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b826:	4413      	add	r3, r2
 800b828:	330d      	adds	r3, #13
 800b82a:	2200      	movs	r2, #0
 800b82c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < dev->num_of_sw; i++)
 800b82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b830:	3301      	adds	r3, #1
 800b832:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	7b1b      	ldrb	r3, [r3, #12]
 800b838:	461a      	mov	r2, r3
 800b83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b83c:	4293      	cmp	r3, r2
 800b83e:	dbf0      	blt.n	800b822 <ADG1414_Chain_Init+0x76>
    }

//    LL_SPI_Enable(dev->spi);
    while (!LL_SPI_IsEnabled(dev->spi));
 800b840:	bf00      	nop
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4618      	mov	r0, r3
 800b848:	f7ff ff00 	bl	800b64c <LL_SPI_IsEnabled>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d0f7      	beq.n	800b842 <ADG1414_Chain_Init+0x96>

    ADG1414_Chain_Write(dev);
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f7ff ff62 	bl	800b71c <ADG1414_Chain_Write>
}
 800b858:	bf00      	nop
 800b85a:	3730      	adds	r7, #48	@ 0x30
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <ADG1414_Chain_SwitchOn>:

/* Hàm bật một switch */
void ADG1414_Chain_SwitchOn(ADG1414_Device_t *dev, uint8_t channel_num)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	460b      	mov	r3, r1
 800b86a:	70fb      	strb	r3, [r7, #3]
    if ((channel_num > INTERNAL_CHAIN_CHANNEL_NUM)&&
 800b86c:	78fb      	ldrb	r3, [r7, #3]
 800b86e:	2b24      	cmp	r3, #36	@ 0x24
 800b870:	d903      	bls.n	800b87a <ADG1414_Chain_SwitchOn+0x1a>
    	(dev->num_of_sw == INTERNAL_CHAIN_SWITCH_NUM))
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	7b1b      	ldrb	r3, [r3, #12]
    if ((channel_num > INTERNAL_CHAIN_CHANNEL_NUM)&&
 800b876:	2b06      	cmp	r3, #6
 800b878:	d05a      	beq.n	800b930 <ADG1414_Chain_SwitchOn+0xd0>
    	return;  // Kiểm tra giới hạn

    if ((channel_num > EXTERNAL_CHAIN_CHANNEL_NUM)&&
 800b87a:	78fb      	ldrb	r3, [r7, #3]
 800b87c:	2b08      	cmp	r3, #8
 800b87e:	d903      	bls.n	800b888 <ADG1414_Chain_SwitchOn+0x28>
		(dev->num_of_sw == EXTERNAL_CHAIN_SWITCH_NUM))
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	7b1b      	ldrb	r3, [r3, #12]
    if ((channel_num > EXTERNAL_CHAIN_CHANNEL_NUM)&&
 800b884:	2b01      	cmp	r3, #1
 800b886:	d055      	beq.n	800b934 <ADG1414_Chain_SwitchOn+0xd4>
		return;  // Kiểm tra giới hạn

    if (dev->num_of_sw == INTERNAL_CHAIN_SWITCH_NUM)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	7b1b      	ldrb	r3, [r3, #12]
 800b88c:	2b06      	cmp	r3, #6
 800b88e:	d138      	bne.n	800b902 <ADG1414_Chain_SwitchOn+0xa2>
	{
    	for (int i = 0; i < dev->num_of_sw; i++)
 800b890:	2300      	movs	r3, #0
 800b892:	60fb      	str	r3, [r7, #12]
 800b894:	e008      	b.n	800b8a8 <ADG1414_Chain_SwitchOn+0x48>
		{
			dev->switch_state[i] = 0x00;
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	4413      	add	r3, r2
 800b89c:	330d      	adds	r3, #13
 800b89e:	2200      	movs	r2, #0
 800b8a0:	701a      	strb	r2, [r3, #0]
    	for (int i = 0; i < dev->num_of_sw; i++)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	60fb      	str	r3, [r7, #12]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	7b1b      	ldrb	r3, [r3, #12]
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	dbf0      	blt.n	800b896 <ADG1414_Chain_SwitchOn+0x36>
		}
    	if (channel_num)
 800b8b4:	78fb      	ldrb	r3, [r7, #3]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d036      	beq.n	800b928 <ADG1414_Chain_SwitchOn+0xc8>
    	{
    		uint8_t chip_idx = (channel_num-1) / 6;
 800b8ba:	78fb      	ldrb	r3, [r7, #3]
 800b8bc:	3b01      	subs	r3, #1
 800b8be:	4a1f      	ldr	r2, [pc, #124]	@ (800b93c <ADG1414_Chain_SwitchOn+0xdc>)
 800b8c0:	fb82 1203 	smull	r1, r2, r2, r3
 800b8c4:	17db      	asrs	r3, r3, #31
 800b8c6:	1ad3      	subs	r3, r2, r3
 800b8c8:	72fb      	strb	r3, [r7, #11]
			uint8_t bit_idx = (channel_num-1) % 6;
 800b8ca:	78fb      	ldrb	r3, [r7, #3]
 800b8cc:	1e5a      	subs	r2, r3, #1
 800b8ce:	4b1b      	ldr	r3, [pc, #108]	@ (800b93c <ADG1414_Chain_SwitchOn+0xdc>)
 800b8d0:	fb83 3102 	smull	r3, r1, r3, r2
 800b8d4:	17d3      	asrs	r3, r2, #31
 800b8d6:	1ac9      	subs	r1, r1, r3
 800b8d8:	460b      	mov	r3, r1
 800b8da:	005b      	lsls	r3, r3, #1
 800b8dc:	440b      	add	r3, r1
 800b8de:	005b      	lsls	r3, r3, #1
 800b8e0:	1ad1      	subs	r1, r2, r3
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	72bb      	strb	r3, [r7, #10]
			dev->switch_state[(uint8_t)chip_idx] = (1 << bit_idx)&0x3F;
 800b8e6:	7abb      	ldrb	r3, [r7, #10]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ee:	b2da      	uxtb	r2, r3
 800b8f0:	7afb      	ldrb	r3, [r7, #11]
 800b8f2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b8f6:	b2d1      	uxtb	r1, r2
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	460a      	mov	r2, r1
 800b8fe:	735a      	strb	r2, [r3, #13]
 800b900:	e012      	b.n	800b928 <ADG1414_Chain_SwitchOn+0xc8>
    	}
	}

    else if (dev->num_of_sw == EXTERNAL_CHAIN_SWITCH_NUM)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	7b1b      	ldrb	r3, [r3, #12]
 800b906:	2b01      	cmp	r3, #1
 800b908:	d10e      	bne.n	800b928 <ADG1414_Chain_SwitchOn+0xc8>
	{
    	if(channel_num)
 800b90a:	78fb      	ldrb	r3, [r7, #3]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d008      	beq.n	800b922 <ADG1414_Chain_SwitchOn+0xc2>
    	{
    		dev->switch_state[0] = (1 << (channel_num - 1));
 800b910:	78fb      	ldrb	r3, [r7, #3]
 800b912:	3b01      	subs	r3, #1
 800b914:	2201      	movs	r2, #1
 800b916:	fa02 f303 	lsl.w	r3, r2, r3
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	735a      	strb	r2, [r3, #13]
 800b920:	e002      	b.n	800b928 <ADG1414_Chain_SwitchOn+0xc8>
    	}

    	else
    	{
    		dev->switch_state[0] = 0;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	735a      	strb	r2, [r3, #13]
		}
	}

    ADG1414_Chain_Write(dev);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7ff fef7 	bl	800b71c <ADG1414_Chain_Write>
 800b92e:	e002      	b.n	800b936 <ADG1414_Chain_SwitchOn+0xd6>
    	return;  // Kiểm tra giới hạn
 800b930:	bf00      	nop
 800b932:	e000      	b.n	800b936 <ADG1414_Chain_SwitchOn+0xd6>
		return;  // Kiểm tra giới hạn
 800b934:	bf00      	nop
}
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	2aaaaaab 	.word	0x2aaaaaab

0800b940 <auto_run_task_update>:
volatile uint8_t first_rest = 1;
volatile uint8_t do_time = 0;
volatile uint8_t run_inf = 0;

static void auto_run_task_update(void)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b090      	sub	sp, #64	@ 0x40
 800b944:	af02      	add	r7, sp, #8

	if (run_adc)
 800b946:	4b98      	ldr	r3, [pc, #608]	@ (800bba8 <auto_run_task_update+0x268>)
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00d      	beq.n	800b96c <auto_run_task_update+0x2c>
	{
		if (SCH_TIM_HasCompleted(SCH_TIM_AUTO_ADC))
 800b950:	200a      	movs	r0, #10
 800b952:	f006 ff35 	bl	80127c0 <SCH_TIM_HasCompleted>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d007      	beq.n	800b96c <auto_run_task_update+0x2c>
		{
			read_adc();
 800b95c:	f000 f9ce 	bl	800bcfc <read_adc>
			SCH_TIM_Start(SCH_TIM_AUTO_ADC, adc_interval);
 800b960:	4b92      	ldr	r3, [pc, #584]	@ (800bbac <auto_run_task_update+0x26c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4619      	mov	r1, r3
 800b966:	200a      	movs	r0, #10
 800b968:	f006 ff14 	bl	8012794 <SCH_TIM_Start>
		}
	}

	if (run_system)
 800b96c:	4b90      	ldr	r3, [pc, #576]	@ (800bbb0 <auto_run_task_update+0x270>)
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	b2db      	uxtb	r3, r3
 800b972:	2b00      	cmp	r3, #0
 800b974:	f000 8114 	beq.w	800bba0 <auto_run_task_update+0x260>
	{

		if (SCH_TIM_HasCompleted(SCH_TIM_AUTO_LASER))
 800b978:	200b      	movs	r0, #11
 800b97a:	f006 ff21 	bl	80127c0 <SCH_TIM_HasCompleted>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	f000 80f3 	beq.w	800bb6c <auto_run_task_update+0x22c>
		{
			data_times = 0;
 800b986:	4b8b      	ldr	r3, [pc, #556]	@ (800bbb4 <auto_run_task_update+0x274>)
 800b988:	2200      	movs	r2, #0
 800b98a:	701a      	strb	r2, [r3, #0]

			uint8_t ld_slot = (current_column - 1) + (current_row - 1) * 6 + 1;
 800b98c:	4b8a      	ldr	r3, [pc, #552]	@ (800bbb8 <auto_run_task_update+0x278>)
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	b2db      	uxtb	r3, r3
 800b992:	461a      	mov	r2, r3
 800b994:	0052      	lsls	r2, r2, #1
 800b996:	4413      	add	r3, r2
 800b998:	005b      	lsls	r3, r3, #1
 800b99a:	b2da      	uxtb	r2, r3
 800b99c:	4b87      	ldr	r3, [pc, #540]	@ (800bbbc <auto_run_task_update+0x27c>)
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	4413      	add	r3, r2
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	3b06      	subs	r3, #6
 800b9a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if (first_time)
 800b9ac:	4b84      	ldr	r3, [pc, #528]	@ (800bbc0 <auto_run_task_update+0x280>)
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d03a      	beq.n	800ba2c <auto_run_task_update+0xec>
			{
				if (!run_inf)
 800b9b6:	4b83      	ldr	r3, [pc, #524]	@ (800bbc4 <auto_run_task_update+0x284>)
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d125      	bne.n	800ba0c <auto_run_task_update+0xcc>
				{
					if (do_time <= 0)
 800b9c0:	4b81      	ldr	r3, [pc, #516]	@ (800bbc8 <auto_run_task_update+0x288>)
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d120      	bne.n	800ba0c <auto_run_task_update+0xcc>
					{
						laser_interval = 0;
 800b9ca:	4b80      	ldr	r3, [pc, #512]	@ (800bbcc <auto_run_task_update+0x28c>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	601a      	str	r2, [r3, #0]
						run_system = 0;
 800b9d0:	4b77      	ldr	r3, [pc, #476]	@ (800bbb0 <auto_run_task_update+0x270>)
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	701a      	strb	r2, [r3, #0]
						run_adc = 0;
 800b9d6:	4b74      	ldr	r3, [pc, #464]	@ (800bba8 <auto_run_task_update+0x268>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	701a      	strb	r2, [r3, #0]
						adc_interval = 0;
 800b9dc:	4b73      	ldr	r3, [pc, #460]	@ (800bbac <auto_run_task_update+0x26c>)
 800b9de:	2200      	movs	r2, #0
 800b9e0:	601a      	str	r2, [r3, #0]
						pair_slot = 1;
 800b9e2:	4b7b      	ldr	r3, [pc, #492]	@ (800bbd0 <auto_run_task_update+0x290>)
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	701a      	strb	r2, [r3, #0]
						current_column = 1;
 800b9e8:	4b74      	ldr	r3, [pc, #464]	@ (800bbbc <auto_run_task_update+0x27c>)
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	701a      	strb	r2, [r3, #0]
						current_row = 1;
 800b9ee:	4b72      	ldr	r3, [pc, #456]	@ (800bbb8 <auto_run_task_update+0x278>)
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	701a      	strb	r2, [r3, #0]
						user_delay = 0;
 800b9f4:	4b77      	ldr	r3, [pc, #476]	@ (800bbd4 <auto_run_task_update+0x294>)
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	601a      	str	r2, [r3, #0]
						rest_time = 0;
 800b9fa:	4b77      	ldr	r3, [pc, #476]	@ (800bbd8 <auto_run_task_update+0x298>)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	601a      	str	r2, [r3, #0]
						run_inf = 0;
 800ba00:	4b70      	ldr	r3, [pc, #448]	@ (800bbc4 <auto_run_task_update+0x284>)
 800ba02:	2200      	movs	r2, #0
 800ba04:	701a      	strb	r2, [r3, #0]
						do_time = 0;
 800ba06:	4b70      	ldr	r3, [pc, #448]	@ (800bbc8 <auto_run_task_update+0x288>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	701a      	strb	r2, [r3, #0]
					}
				}

				auto_set_pd(0);
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	f000 f94d 	bl	800bcac <auto_set_pd>
				auto_set_ls(0);
 800ba12:	2000      	movs	r0, #0
 800ba14:	f000 f95e 	bl	800bcd4 <auto_set_ls>

				SCH_TIM_Start(SCH_TIM_USER_DELAY, user_delay);
 800ba18:	4b6e      	ldr	r3, [pc, #440]	@ (800bbd4 <auto_run_task_update+0x294>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	200c      	movs	r0, #12
 800ba20:	f006 feb8 	bl	8012794 <SCH_TIM_Start>
				first_time = 0;
 800ba24:	4b66      	ldr	r3, [pc, #408]	@ (800bbc0 <auto_run_task_update+0x280>)
 800ba26:	2200      	movs	r2, #0
 800ba28:	701a      	strb	r2, [r3, #0]
 800ba2a:	e098      	b.n	800bb5e <auto_run_task_update+0x21e>
			}
			else
			{
				if (SCH_TIM_HasCompleted(SCH_TIM_USER_DELAY))
 800ba2c:	200c      	movs	r0, #12
 800ba2e:	f006 fec7 	bl	80127c0 <SCH_TIM_HasCompleted>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f000 8092 	beq.w	800bb5e <auto_run_task_update+0x21e>
				{
					if (current_row == 1 && first_rest == 0)
 800ba3a:	4b5f      	ldr	r3, [pc, #380]	@ (800bbb8 <auto_run_task_update+0x278>)
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d11b      	bne.n	800ba7c <auto_run_task_update+0x13c>
 800ba44:	4b65      	ldr	r3, [pc, #404]	@ (800bbdc <auto_run_task_update+0x29c>)
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d116      	bne.n	800ba7c <auto_run_task_update+0x13c>
					{
						if (current_column == 1)
 800ba4e:	4b5b      	ldr	r3, [pc, #364]	@ (800bbbc <auto_run_task_update+0x27c>)
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d111      	bne.n	800ba7c <auto_run_task_update+0x13c>
						{
							auto_get_temp();
 800ba58:	f000 f8ca 	bl	800bbf0 <auto_get_temp>
							do_time = do_time - 1;
 800ba5c:	4b5a      	ldr	r3, [pc, #360]	@ (800bbc8 <auto_run_task_update+0x288>)
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	3b01      	subs	r3, #1
 800ba64:	b2da      	uxtb	r2, r3
 800ba66:	4b58      	ldr	r3, [pc, #352]	@ (800bbc8 <auto_run_task_update+0x288>)
 800ba68:	701a      	strb	r2, [r3, #0]
							SCH_TIM_Start(SCH_TIM_REST, rest_time);
 800ba6a:	4b5b      	ldr	r3, [pc, #364]	@ (800bbd8 <auto_run_task_update+0x298>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4619      	mov	r1, r3
 800ba70:	200d      	movs	r0, #13
 800ba72:	f006 fe8f 	bl	8012794 <SCH_TIM_Start>
							first_rest = 1;
 800ba76:	4b59      	ldr	r3, [pc, #356]	@ (800bbdc <auto_run_task_update+0x29c>)
 800ba78:	2201      	movs	r2, #1
 800ba7a:	701a      	strb	r2, [r3, #0]
						}
					}
					if (SCH_TIM_HasCompleted(SCH_TIM_REST))
 800ba7c:	200d      	movs	r0, #13
 800ba7e:	f006 fe9f 	bl	80127c0 <SCH_TIM_HasCompleted>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d061      	beq.n	800bb4c <auto_run_task_update+0x20c>
					{
						if (current_row == 1)
 800ba88:	4b4b      	ldr	r3, [pc, #300]	@ (800bbb8 <auto_run_task_update+0x278>)
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d103      	bne.n	800ba9a <auto_run_task_update+0x15a>
						{
							UART_SendStringRing(UART_CMDLINE, "\r\n");
 800ba92:	4953      	ldr	r1, [pc, #332]	@ (800bbe0 <auto_run_task_update+0x2a0>)
 800ba94:	4853      	ldr	r0, [pc, #332]	@ (800bbe4 <auto_run_task_update+0x2a4>)
 800ba96:	f7fd fc85 	bl	80093a4 <UART_SendStringRing>
						}

						auto_set_pd(ld_slot);
 800ba9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f000 f904 	bl	800bcac <auto_set_pd>
						auto_set_ls(ld_slot);
 800baa4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 f913 	bl	800bcd4 <auto_set_ls>
						char buffer[50];

						if (ld_slot < 10)
 800baae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bab2:	2b09      	cmp	r3, #9
 800bab4:	d812      	bhi.n	800badc <auto_run_task_update+0x19c>
						{
							snprintf(buffer, sizeof(buffer), "\r\nC%d-%d | [LD0%d]", current_column, current_row, ld_slot);
 800bab6:	4b41      	ldr	r3, [pc, #260]	@ (800bbbc <auto_run_task_update+0x27c>)
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	b2db      	uxtb	r3, r3
 800babc:	4619      	mov	r1, r3
 800babe:	4b3e      	ldr	r3, [pc, #248]	@ (800bbb8 <auto_run_task_update+0x278>)
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	461a      	mov	r2, r3
 800bac6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800baca:	1d38      	adds	r0, r7, #4
 800bacc:	9301      	str	r3, [sp, #4]
 800bace:	9200      	str	r2, [sp, #0]
 800bad0:	460b      	mov	r3, r1
 800bad2:	4a45      	ldr	r2, [pc, #276]	@ (800bbe8 <auto_run_task_update+0x2a8>)
 800bad4:	2132      	movs	r1, #50	@ 0x32
 800bad6:	f007 f845 	bl	8012b64 <sniprintf>
 800bada:	e011      	b.n	800bb00 <auto_run_task_update+0x1c0>
						}
						else
						{
							snprintf(buffer, sizeof(buffer), "\r\nC%d-%d | [LD%d]", current_column, current_row, ld_slot);
 800badc:	4b37      	ldr	r3, [pc, #220]	@ (800bbbc <auto_run_task_update+0x27c>)
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	4619      	mov	r1, r3
 800bae4:	4b34      	ldr	r3, [pc, #208]	@ (800bbb8 <auto_run_task_update+0x278>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	461a      	mov	r2, r3
 800baec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800baf0:	1d38      	adds	r0, r7, #4
 800baf2:	9301      	str	r3, [sp, #4]
 800baf4:	9200      	str	r2, [sp, #0]
 800baf6:	460b      	mov	r3, r1
 800baf8:	4a3c      	ldr	r2, [pc, #240]	@ (800bbec <auto_run_task_update+0x2ac>)
 800bafa:	2132      	movs	r1, #50	@ 0x32
 800bafc:	f007 f832 	bl	8012b64 <sniprintf>
						}

						UART_SendStringRing(UART_CMDLINE, buffer);
 800bb00:	1d3b      	adds	r3, r7, #4
 800bb02:	4619      	mov	r1, r3
 800bb04:	4837      	ldr	r0, [pc, #220]	@ (800bbe4 <auto_run_task_update+0x2a4>)
 800bb06:	f7fd fc4d 	bl	80093a4 <UART_SendStringRing>

						current_row++;
 800bb0a:	4b2b      	ldr	r3, [pc, #172]	@ (800bbb8 <auto_run_task_update+0x278>)
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	3301      	adds	r3, #1
 800bb12:	b2da      	uxtb	r2, r3
 800bb14:	4b28      	ldr	r3, [pc, #160]	@ (800bbb8 <auto_run_task_update+0x278>)
 800bb16:	701a      	strb	r2, [r3, #0]
						if (current_row > 6)
 800bb18:	4b27      	ldr	r3, [pc, #156]	@ (800bbb8 <auto_run_task_update+0x278>)
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b06      	cmp	r3, #6
 800bb20:	d911      	bls.n	800bb46 <auto_run_task_update+0x206>
						{
							current_row = 1;
 800bb22:	4b25      	ldr	r3, [pc, #148]	@ (800bbb8 <auto_run_task_update+0x278>)
 800bb24:	2201      	movs	r2, #1
 800bb26:	701a      	strb	r2, [r3, #0]
							current_column++;
 800bb28:	4b24      	ldr	r3, [pc, #144]	@ (800bbbc <auto_run_task_update+0x27c>)
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	3301      	adds	r3, #1
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	4b22      	ldr	r3, [pc, #136]	@ (800bbbc <auto_run_task_update+0x27c>)
 800bb34:	701a      	strb	r2, [r3, #0]
							if (current_column > 6)
 800bb36:	4b21      	ldr	r3, [pc, #132]	@ (800bbbc <auto_run_task_update+0x27c>)
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	2b06      	cmp	r3, #6
 800bb3e:	d902      	bls.n	800bb46 <auto_run_task_update+0x206>
							{
								current_column = 1;
 800bb40:	4b1e      	ldr	r3, [pc, #120]	@ (800bbbc <auto_run_task_update+0x27c>)
 800bb42:	2201      	movs	r2, #1
 800bb44:	701a      	strb	r2, [r3, #0]
							}
						}
						first_rest = 0;
 800bb46:	4b25      	ldr	r3, [pc, #148]	@ (800bbdc <auto_run_task_update+0x29c>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	701a      	strb	r2, [r3, #0]
					}
					SCH_TIM_Start(SCH_TIM_AUTO_LASER, laser_interval);
 800bb4c:	4b1f      	ldr	r3, [pc, #124]	@ (800bbcc <auto_run_task_update+0x28c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4619      	mov	r1, r3
 800bb52:	200b      	movs	r0, #11
 800bb54:	f006 fe1e 	bl	8012794 <SCH_TIM_Start>
					first_time = 1;
 800bb58:	4b19      	ldr	r3, [pc, #100]	@ (800bbc0 <auto_run_task_update+0x280>)
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	701a      	strb	r2, [r3, #0]
				}
			}
			SCH_TIM_Start(SCH_TIM_AUTO_ADC, adc_interval);
 800bb5e:	4b13      	ldr	r3, [pc, #76]	@ (800bbac <auto_run_task_update+0x26c>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4619      	mov	r1, r3
 800bb64:	200a      	movs	r0, #10
 800bb66:	f006 fe15 	bl	8012794 <SCH_TIM_Start>
					SCH_TIM_Start(SCH_TIM_AUTO_ADC, adc_interval);
				}
			}
		}
	}
}
 800bb6a:	e019      	b.n	800bba0 <auto_run_task_update+0x260>
			if (SCH_TIM_HasCompleted(SCH_TIM_REST))
 800bb6c:	200d      	movs	r0, #13
 800bb6e:	f006 fe27 	bl	80127c0 <SCH_TIM_HasCompleted>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d013      	beq.n	800bba0 <auto_run_task_update+0x260>
				if (SCH_TIM_HasCompleted(SCH_TIM_AUTO_ADC))
 800bb78:	200a      	movs	r0, #10
 800bb7a:	f006 fe21 	bl	80127c0 <SCH_TIM_HasCompleted>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00d      	beq.n	800bba0 <auto_run_task_update+0x260>
					read_adc_without_LF();
 800bb84:	f000 f914 	bl	800bdb0 <read_adc_without_LF>
					data_times++;
 800bb88:	4b0a      	ldr	r3, [pc, #40]	@ (800bbb4 <auto_run_task_update+0x274>)
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	4b08      	ldr	r3, [pc, #32]	@ (800bbb4 <auto_run_task_update+0x274>)
 800bb92:	701a      	strb	r2, [r3, #0]
					SCH_TIM_Start(SCH_TIM_AUTO_ADC, adc_interval);
 800bb94:	4b05      	ldr	r3, [pc, #20]	@ (800bbac <auto_run_task_update+0x26c>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4619      	mov	r1, r3
 800bb9a:	200a      	movs	r0, #10
 800bb9c:	f006 fdfa 	bl	8012794 <SCH_TIM_Start>
}
 800bba0:	bf00      	nop
 800bba2:	3738      	adds	r7, #56	@ 0x38
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	200034f1 	.word	0x200034f1
 800bbac:	200034f4 	.word	0x200034f4
 800bbb0:	200034f0 	.word	0x200034f0
 800bbb4:	200034e9 	.word	0x200034e9
 800bbb8:	2000022e 	.word	0x2000022e
 800bbbc:	2000022d 	.word	0x2000022d
 800bbc0:	2000022f 	.word	0x2000022f
 800bbc4:	20003501 	.word	0x20003501
 800bbc8:	20003500 	.word	0x20003500
 800bbcc:	200034ec 	.word	0x200034ec
 800bbd0:	2000022c 	.word	0x2000022c
 800bbd4:	200034f8 	.word	0x200034f8
 800bbd8:	200034fc 	.word	0x200034fc
 800bbdc:	20000230 	.word	0x20000230
 800bbe0:	080150b0 	.word	0x080150b0
 800bbe4:	40011000 	.word	0x40011000
 800bbe8:	080150b4 	.word	0x080150b4
 800bbec:	080150c8 	.word	0x080150c8

0800bbf0 <auto_get_temp>:

void auto_get_temp()
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b092      	sub	sp, #72	@ 0x48
 800bbf4:	af02      	add	r7, sp, #8
	int16_t temp = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	char buffer[60];

	if (temp == 0x7FFF)
 800bbfa:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800bbfe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d104      	bne.n	800bc10 <auto_get_temp+0x20>
	{
		UART_SendStringRing(UART_CMDLINE, "\r\nTemp BMP390 = [FAIL] \r\n");
 800bc06:	4923      	ldr	r1, [pc, #140]	@ (800bc94 <auto_get_temp+0xa4>)
 800bc08:	4823      	ldr	r0, [pc, #140]	@ (800bc98 <auto_get_temp+0xa8>)
 800bc0a:	f7fd fbcb 	bl	80093a4 <UART_SendStringRing>
 800bc0e:	e00b      	b.n	800bc28 <auto_get_temp+0x38>
	}
	else
	{
		snprintf(buffer, sizeof(buffer), "\r\nTemp BMP390 = [%i] \r\n", temp);
 800bc10:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800bc14:	4638      	mov	r0, r7
 800bc16:	4a21      	ldr	r2, [pc, #132]	@ (800bc9c <auto_get_temp+0xac>)
 800bc18:	213c      	movs	r1, #60	@ 0x3c
 800bc1a:	f006 ffa3 	bl	8012b64 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 800bc1e:	463b      	mov	r3, r7
 800bc20:	4619      	mov	r1, r3
 800bc22:	481d      	ldr	r0, [pc, #116]	@ (800bc98 <auto_get_temp+0xa8>)
 800bc24:	f7fd fbbe 	bl	80093a4 <UART_SendStringRing>
	}

	for (uint8_t channel = 0; channel < 8; channel++)
 800bc28:	2300      	movs	r3, #0
 800bc2a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bc2e:	e028      	b.n	800bc82 <auto_get_temp+0x92>
	{
		temp = NTC_Temperature[channel];
 800bc30:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bc34:	4a1a      	ldr	r2, [pc, #104]	@ (800bca0 <auto_get_temp+0xb0>)
 800bc36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc3a:	87bb      	strh	r3, [r7, #60]	@ 0x3c

		if (temp == 0x7FFF)
 800bc3c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800bc40:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d107      	bne.n	800bc58 <auto_get_temp+0x68>
		{
			snprintf(buffer, sizeof(buffer), " | NTC[%d] = [FAIL]\r\n", channel);
 800bc48:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bc4c:	4638      	mov	r0, r7
 800bc4e:	4a15      	ldr	r2, [pc, #84]	@ (800bca4 <auto_get_temp+0xb4>)
 800bc50:	213c      	movs	r1, #60	@ 0x3c
 800bc52:	f006 ff87 	bl	8012b64 <sniprintf>
 800bc56:	e00a      	b.n	800bc6e <auto_get_temp+0x7e>
		}
		else
		{
			snprintf(buffer, sizeof(buffer), " | NTC[%d] = [%i]\r\n", channel, temp);
 800bc58:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bc5c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800bc60:	4638      	mov	r0, r7
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	4613      	mov	r3, r2
 800bc66:	4a10      	ldr	r2, [pc, #64]	@ (800bca8 <auto_get_temp+0xb8>)
 800bc68:	213c      	movs	r1, #60	@ 0x3c
 800bc6a:	f006 ff7b 	bl	8012b64 <sniprintf>
		}

		UART_SendStringRing(UART_CMDLINE, buffer);
 800bc6e:	463b      	mov	r3, r7
 800bc70:	4619      	mov	r1, r3
 800bc72:	4809      	ldr	r0, [pc, #36]	@ (800bc98 <auto_get_temp+0xa8>)
 800bc74:	f7fd fb96 	bl	80093a4 <UART_SendStringRing>
	for (uint8_t channel = 0; channel < 8; channel++)
 800bc78:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bc82:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bc86:	2b07      	cmp	r3, #7
 800bc88:	d9d2      	bls.n	800bc30 <auto_get_temp+0x40>
	}
}
 800bc8a:	bf00      	nop
 800bc8c:	bf00      	nop
 800bc8e:	3740      	adds	r7, #64	@ 0x40
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	080150dc 	.word	0x080150dc
 800bc98:	40011000 	.word	0x40011000
 800bc9c:	080150f8 	.word	0x080150f8
 800bca0:	20003578 	.word	0x20003578
 800bca4:	08015110 	.word	0x08015110
 800bca8:	08015128 	.word	0x08015128

0800bcac <auto_set_pd>:

void auto_set_pd(uint8_t pd_slot)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	71fb      	strb	r3, [r7, #7]

	if (pd_slot > INTERNAL_CHAIN_CHANNEL_NUM)	return;
 800bcb6:	79fb      	ldrb	r3, [r7, #7]
 800bcb8:	2b24      	cmp	r3, #36	@ 0x24
 800bcba:	d805      	bhi.n	800bcc8 <auto_set_pd+0x1c>
	ADG1414_Chain_SwitchOn(&photo_sw, pd_slot);
 800bcbc:	79fb      	ldrb	r3, [r7, #7]
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	4803      	ldr	r0, [pc, #12]	@ (800bcd0 <auto_set_pd+0x24>)
 800bcc2:	f7ff fdcd 	bl	800b860 <ADG1414_Chain_SwitchOn>
 800bcc6:	e000      	b.n	800bcca <auto_set_pd+0x1e>
	if (pd_slot > INTERNAL_CHAIN_CHANNEL_NUM)	return;
 800bcc8:	bf00      	nop
}
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	20003588 	.word	0x20003588

0800bcd4 <auto_set_ls>:

void auto_set_ls(uint8_t ls_slot)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	4603      	mov	r3, r0
 800bcdc:	71fb      	strb	r3, [r7, #7]

	if (ls_slot > INTERNAL_CHAIN_CHANNEL_NUM)	return;
 800bcde:	79fb      	ldrb	r3, [r7, #7]
 800bce0:	2b24      	cmp	r3, #36	@ 0x24
 800bce2:	d805      	bhi.n	800bcf0 <auto_set_ls+0x1c>
	ADG1414_Chain_SwitchOn(&laser_int, ls_slot);
 800bce4:	79fb      	ldrb	r3, [r7, #7]
 800bce6:	4619      	mov	r1, r3
 800bce8:	4803      	ldr	r0, [pc, #12]	@ (800bcf8 <auto_set_ls+0x24>)
 800bcea:	f7ff fdb9 	bl	800b860 <ADG1414_Chain_SwitchOn>
 800bcee:	e000      	b.n	800bcf2 <auto_set_ls+0x1e>
	if (ls_slot > INTERNAL_CHAIN_CHANNEL_NUM)	return;
 800bcf0:	bf00      	nop
}
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	20003510 	.word	0x20003510

0800bcfc <read_adc>:

void read_adc(void)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b096      	sub	sp, #88	@ 0x58
 800bd00:	af02      	add	r7, sp, #8
	uint32_t result = 0;
 800bd02:	2300      	movs	r3, #0
 800bd04:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float voltage = 0.0;
 800bd06:	f04f 0300 	mov.w	r3, #0
 800bd0a:	64bb      	str	r3, [r7, #72]	@ 0x48
	const float vref = 3.0;
 800bd0c:	4b22      	ldr	r3, [pc, #136]	@ (800bd98 <read_adc+0x9c>)
 800bd0e:	647b      	str	r3, [r7, #68]	@ 0x44
	int32_t voltage_int = 0, voltage_frac = 0;
 800bd10:	2300      	movs	r3, #0
 800bd12:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd14:	2300      	movs	r3, #0
 800bd16:	63fb      	str	r3, [r7, #60]	@ 0x3c


	result = ADS8327_Read_Data_Polling(&photo_adc);
 800bd18:	4820      	ldr	r0, [pc, #128]	@ (800bd9c <read_adc+0xa0>)
 800bd1a:	f001 fc5b 	bl	800d5d4 <ADS8327_Read_Data_Polling>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	64fb      	str	r3, [r7, #76]	@ 0x4c
	voltage = (result / 65536.0f) * vref;
 800bd22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd24:	ee07 3a90 	vmov	s15, r3
 800bd28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bd2c:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800bda0 <read_adc+0xa4>
 800bd30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bd34:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800bd38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd3c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	voltage_int = (int32_t)voltage;
 800bd40:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800bd44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd48:	ee17 3a90 	vmov	r3, s15
 800bd4c:	643b      	str	r3, [r7, #64]	@ 0x40
	voltage_frac = (int32_t)((voltage - voltage_int) * 1000);
 800bd4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd50:	ee07 3a90 	vmov	s15, r3
 800bd54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd58:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800bd5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd60:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800bda4 <read_adc+0xa8>
 800bd64:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd6c:	ee17 3a90 	vmov	r3, s15
 800bd70:	63fb      	str	r3, [r7, #60]	@ 0x3c

	char buffer[60];
	snprintf(buffer, sizeof(buffer), "AutoADC: %ld (Vol: %ld.%03ld V)\r\n", result, voltage_int, voltage_frac);
 800bd72:	4638      	mov	r0, r7
 800bd74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd76:	9301      	str	r3, [sp, #4]
 800bd78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd7e:	4a0a      	ldr	r2, [pc, #40]	@ (800bda8 <read_adc+0xac>)
 800bd80:	213c      	movs	r1, #60	@ 0x3c
 800bd82:	f006 feef 	bl	8012b64 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800bd86:	463b      	mov	r3, r7
 800bd88:	4619      	mov	r1, r3
 800bd8a:	4808      	ldr	r0, [pc, #32]	@ (800bdac <read_adc+0xb0>)
 800bd8c:	f7fd fb0a 	bl	80093a4 <UART_SendStringRing>
}
 800bd90:	bf00      	nop
 800bd92:	3750      	adds	r7, #80	@ 0x50
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	40400000 	.word	0x40400000
 800bd9c:	200035a8 	.word	0x200035a8
 800bda0:	47800000 	.word	0x47800000
 800bda4:	447a0000 	.word	0x447a0000
 800bda8:	0801513c 	.word	0x0801513c
 800bdac:	40011000 	.word	0x40011000

0800bdb0 <read_adc_without_LF>:

void read_adc_without_LF(void)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b090      	sub	sp, #64	@ 0x40
 800bdb4:	af02      	add	r7, sp, #8
	uint16_t result = 0;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	86fb      	strh	r3, [r7, #54]	@ 0x36

	result = ADS8327_Read_Data_Polling(&photo_adc);
 800bdba:	480c      	ldr	r0, [pc, #48]	@ (800bdec <read_adc_without_LF+0x3c>)
 800bdbc:	f001 fc0a 	bl	800d5d4 <ADS8327_Read_Data_Polling>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	86fb      	strh	r3, [r7, #54]	@ 0x36

	char buffer[50];
	snprintf(buffer, sizeof(buffer), "  [T: %d]-[ADC: %d]", data_times, result);
 800bdc4:	4b0a      	ldr	r3, [pc, #40]	@ (800bdf0 <read_adc_without_LF+0x40>)
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	461a      	mov	r2, r3
 800bdca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bdcc:	1d38      	adds	r0, r7, #4
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	4a08      	ldr	r2, [pc, #32]	@ (800bdf4 <read_adc_without_LF+0x44>)
 800bdd4:	2132      	movs	r1, #50	@ 0x32
 800bdd6:	f006 fec5 	bl	8012b64 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800bdda:	1d3b      	adds	r3, r7, #4
 800bddc:	4619      	mov	r1, r3
 800bdde:	4806      	ldr	r0, [pc, #24]	@ (800bdf8 <read_adc_without_LF+0x48>)
 800bde0:	f7fd fae0 	bl	80093a4 <UART_SendStringRing>
}
 800bde4:	bf00      	nop
 800bde6:	3738      	adds	r7, #56	@ 0x38
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	200035a8 	.word	0x200035a8
 800bdf0:	200034e9 	.word	0x200034e9
 800bdf4:	08015160 	.word	0x08015160
 800bdf8:	40011000 	.word	0x40011000

0800bdfc <AutoRun_CreateTask>:

void AutoRun_CreateTask(void)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_auto_runTaskContext.taskHandle, &s_auto_runTaskContext.taskProperty);
 800be00:	4902      	ldr	r1, [pc, #8]	@ (800be0c <AutoRun_CreateTask+0x10>)
 800be02:	4803      	ldr	r0, [pc, #12]	@ (800be10 <AutoRun_CreateTask+0x14>)
 800be04:	f006 fcf2 	bl	80127ec <SCH_TASK_CreateTask>
}
 800be08:	bf00      	nop
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	2000021c 	.word	0x2000021c
 800be10:	20000218 	.word	0x20000218

0800be14 <SoftTime_Task_Update>:
		SoftTime_Task_Update,                // taskFunction;
		0							//taskTick
	},
};

void SoftTime_Task_Update(void) {
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
    s_RealTimeClock_context.second++;
 800be1a:	4b5b      	ldr	r3, [pc, #364]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be1c:	795b      	ldrb	r3, [r3, #5]
 800be1e:	3301      	adds	r3, #1
 800be20:	b2da      	uxtb	r2, r3
 800be22:	4b59      	ldr	r3, [pc, #356]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be24:	715a      	strb	r2, [r3, #5]
    if (s_RealTimeClock_context.second >= 60) {
 800be26:	4b58      	ldr	r3, [pc, #352]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be28:	795b      	ldrb	r3, [r3, #5]
 800be2a:	2b3b      	cmp	r3, #59	@ 0x3b
 800be2c:	d97a      	bls.n	800bf24 <SoftTime_Task_Update+0x110>
        s_RealTimeClock_context.second = 0;
 800be2e:	4b56      	ldr	r3, [pc, #344]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be30:	2200      	movs	r2, #0
 800be32:	715a      	strb	r2, [r3, #5]
        s_RealTimeClock_context.minute++;
 800be34:	4b54      	ldr	r3, [pc, #336]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be36:	791b      	ldrb	r3, [r3, #4]
 800be38:	3301      	adds	r3, #1
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	4b52      	ldr	r3, [pc, #328]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be3e:	711a      	strb	r2, [r3, #4]
        if (s_RealTimeClock_context.minute >= 60) {
 800be40:	4b51      	ldr	r3, [pc, #324]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be42:	791b      	ldrb	r3, [r3, #4]
 800be44:	2b3b      	cmp	r3, #59	@ 0x3b
 800be46:	d96d      	bls.n	800bf24 <SoftTime_Task_Update+0x110>
            s_RealTimeClock_context.minute = 0;
 800be48:	4b4f      	ldr	r3, [pc, #316]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	711a      	strb	r2, [r3, #4]
            s_RealTimeClock_context.hour++;
 800be4e:	4b4e      	ldr	r3, [pc, #312]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be50:	78db      	ldrb	r3, [r3, #3]
 800be52:	3301      	adds	r3, #1
 800be54:	b2da      	uxtb	r2, r3
 800be56:	4b4c      	ldr	r3, [pc, #304]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be58:	70da      	strb	r2, [r3, #3]
            if (s_RealTimeClock_context.hour >= 24) {
 800be5a:	4b4b      	ldr	r3, [pc, #300]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be5c:	78db      	ldrb	r3, [r3, #3]
 800be5e:	2b17      	cmp	r3, #23
 800be60:	d960      	bls.n	800bf24 <SoftTime_Task_Update+0x110>
                s_RealTimeClock_context.hour = 0;
 800be62:	4b49      	ldr	r3, [pc, #292]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be64:	2200      	movs	r2, #0
 800be66:	70da      	strb	r2, [r3, #3]
                s_RealTimeClock_context.day++;
 800be68:	4b47      	ldr	r3, [pc, #284]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	3301      	adds	r3, #1
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	4b45      	ldr	r3, [pc, #276]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be72:	701a      	strb	r2, [r3, #0]

                static const uint8_t daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
                uint8_t leapYear = ((s_RealTimeClock_context.year % 4 == 0) &&
 800be74:	4b44      	ldr	r3, [pc, #272]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be76:	789b      	ldrb	r3, [r3, #2]
 800be78:	f003 0303 	and.w	r3, r3, #3
 800be7c:	b2db      	uxtb	r3, r3
                                   ((s_RealTimeClock_context.year % 100 != 0) ||
                                		   (s_RealTimeClock_context.year % 400 == 0))) ? 1 : 0;
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d11e      	bne.n	800bec0 <SoftTime_Task_Update+0xac>
                                   ((s_RealTimeClock_context.year % 100 != 0) ||
 800be82:	4b41      	ldr	r3, [pc, #260]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be84:	789b      	ldrb	r3, [r3, #2]
 800be86:	4a41      	ldr	r2, [pc, #260]	@ (800bf8c <SoftTime_Task_Update+0x178>)
 800be88:	fba2 1203 	umull	r1, r2, r2, r3
 800be8c:	0952      	lsrs	r2, r2, #5
 800be8e:	2164      	movs	r1, #100	@ 0x64
 800be90:	fb01 f202 	mul.w	r2, r1, r2
 800be94:	1a9b      	subs	r3, r3, r2
 800be96:	b2db      	uxtb	r3, r3
                                		   (s_RealTimeClock_context.year % 400 == 0))) ? 1 : 0;
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10f      	bne.n	800bebc <SoftTime_Task_Update+0xa8>
 800be9c:	4b3a      	ldr	r3, [pc, #232]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800be9e:	789b      	ldrb	r3, [r3, #2]
 800bea0:	461a      	mov	r2, r3
 800bea2:	4b3a      	ldr	r3, [pc, #232]	@ (800bf8c <SoftTime_Task_Update+0x178>)
 800bea4:	fb83 1302 	smull	r1, r3, r3, r2
 800bea8:	11d9      	asrs	r1, r3, #7
 800beaa:	17d3      	asrs	r3, r2, #31
 800beac:	1acb      	subs	r3, r1, r3
 800beae:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800beb2:	fb01 f303 	mul.w	r3, r1, r3
 800beb6:	1ad3      	subs	r3, r2, r3
                                   ((s_RealTimeClock_context.year % 100 != 0) ||
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d101      	bne.n	800bec0 <SoftTime_Task_Update+0xac>
                                		   (s_RealTimeClock_context.year % 400 == 0))) ? 1 : 0;
 800bebc:	2301      	movs	r3, #1
 800bebe:	e000      	b.n	800bec2 <SoftTime_Task_Update+0xae>
 800bec0:	2300      	movs	r3, #0
                uint8_t leapYear = ((s_RealTimeClock_context.year % 4 == 0) &&
 800bec2:	71fb      	strb	r3, [r7, #7]

                uint8_t maxDays =
                		(s_RealTimeClock_context.month == 2) ? (28 + leapYear) : daysInMonth[s_RealTimeClock_context.month - 1];
 800bec4:	4b30      	ldr	r3, [pc, #192]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800bec6:	785b      	ldrb	r3, [r3, #1]
                uint8_t maxDays =
 800bec8:	2b02      	cmp	r3, #2
 800beca:	d103      	bne.n	800bed4 <SoftTime_Task_Update+0xc0>
 800becc:	79fb      	ldrb	r3, [r7, #7]
 800bece:	331c      	adds	r3, #28
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	e004      	b.n	800bede <SoftTime_Task_Update+0xca>
                		(s_RealTimeClock_context.month == 2) ? (28 + leapYear) : daysInMonth[s_RealTimeClock_context.month - 1];
 800bed4:	4b2c      	ldr	r3, [pc, #176]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800bed6:	785b      	ldrb	r3, [r3, #1]
 800bed8:	3b01      	subs	r3, #1
                uint8_t maxDays =
 800beda:	4a2d      	ldr	r2, [pc, #180]	@ (800bf90 <SoftTime_Task_Update+0x17c>)
 800bedc:	5cd3      	ldrb	r3, [r2, r3]
 800bede:	71bb      	strb	r3, [r7, #6]

                if (s_RealTimeClock_context.day > maxDays) {
 800bee0:	4b29      	ldr	r3, [pc, #164]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	79ba      	ldrb	r2, [r7, #6]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d21c      	bcs.n	800bf24 <SoftTime_Task_Update+0x110>
                    s_RealTimeClock_context.day = 1;
 800beea:	4b27      	ldr	r3, [pc, #156]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800beec:	2201      	movs	r2, #1
 800beee:	701a      	strb	r2, [r3, #0]
                    s_RealTimeClock_context.month++;
 800bef0:	4b25      	ldr	r3, [pc, #148]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800bef2:	785b      	ldrb	r3, [r3, #1]
 800bef4:	3301      	adds	r3, #1
 800bef6:	b2da      	uxtb	r2, r3
 800bef8:	4b23      	ldr	r3, [pc, #140]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800befa:	705a      	strb	r2, [r3, #1]
                    if (s_RealTimeClock_context.month > 12) {
 800befc:	4b22      	ldr	r3, [pc, #136]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800befe:	785b      	ldrb	r3, [r3, #1]
 800bf00:	2b0c      	cmp	r3, #12
 800bf02:	d90f      	bls.n	800bf24 <SoftTime_Task_Update+0x110>
                        s_RealTimeClock_context.month = 1;
 800bf04:	4b20      	ldr	r3, [pc, #128]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800bf06:	2201      	movs	r2, #1
 800bf08:	705a      	strb	r2, [r3, #1]
                        s_RealTimeClock_context.year++;
 800bf0a:	4b1f      	ldr	r3, [pc, #124]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800bf0c:	789b      	ldrb	r3, [r3, #2]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	b2da      	uxtb	r2, r3
 800bf12:	4b1d      	ldr	r3, [pc, #116]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800bf14:	709a      	strb	r2, [r3, #2]
                        if (s_RealTimeClock_context.year > 99) {
 800bf16:	4b1c      	ldr	r3, [pc, #112]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800bf18:	789b      	ldrb	r3, [r3, #2]
 800bf1a:	2b63      	cmp	r3, #99	@ 0x63
 800bf1c:	d902      	bls.n	800bf24 <SoftTime_Task_Update+0x110>
                            s_RealTimeClock_context.year = 0;
 800bf1e:	4b1a      	ldr	r3, [pc, #104]	@ (800bf88 <SoftTime_Task_Update+0x174>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	709a      	strb	r2, [r3, #2]
                }
            }
        }
    }

    s_WorkingTimeClock_context.seconds++;
 800bf24:	4b1b      	ldr	r3, [pc, #108]	@ (800bf94 <SoftTime_Task_Update+0x180>)
 800bf26:	799b      	ldrb	r3, [r3, #6]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	4b19      	ldr	r3, [pc, #100]	@ (800bf94 <SoftTime_Task_Update+0x180>)
 800bf2e:	719a      	strb	r2, [r3, #6]
    if (s_WorkingTimeClock_context.seconds >= 60) {
 800bf30:	4b18      	ldr	r3, [pc, #96]	@ (800bf94 <SoftTime_Task_Update+0x180>)
 800bf32:	799b      	ldrb	r3, [r3, #6]
 800bf34:	2b3b      	cmp	r3, #59	@ 0x3b
 800bf36:	d921      	bls.n	800bf7c <SoftTime_Task_Update+0x168>
        s_WorkingTimeClock_context.seconds = 0;
 800bf38:	4b16      	ldr	r3, [pc, #88]	@ (800bf94 <SoftTime_Task_Update+0x180>)
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	719a      	strb	r2, [r3, #6]
        s_WorkingTimeClock_context.minutes++;
 800bf3e:	4b15      	ldr	r3, [pc, #84]	@ (800bf94 <SoftTime_Task_Update+0x180>)
 800bf40:	795b      	ldrb	r3, [r3, #5]
 800bf42:	3301      	adds	r3, #1
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	4b13      	ldr	r3, [pc, #76]	@ (800bf94 <SoftTime_Task_Update+0x180>)
 800bf48:	715a      	strb	r2, [r3, #5]
        if (s_WorkingTimeClock_context.minutes >= 60) {
 800bf4a:	4b12      	ldr	r3, [pc, #72]	@ (800bf94 <SoftTime_Task_Update+0x180>)
 800bf4c:	795b      	ldrb	r3, [r3, #5]
 800bf4e:	2b3b      	cmp	r3, #59	@ 0x3b
 800bf50:	d914      	bls.n	800bf7c <SoftTime_Task_Update+0x168>
            s_WorkingTimeClock_context.minutes = 0;
 800bf52:	4b10      	ldr	r3, [pc, #64]	@ (800bf94 <SoftTime_Task_Update+0x180>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	715a      	strb	r2, [r3, #5]
            s_WorkingTimeClock_context.hours++;
 800bf58:	4b0e      	ldr	r3, [pc, #56]	@ (800bf94 <SoftTime_Task_Update+0x180>)
 800bf5a:	791b      	ldrb	r3, [r3, #4]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	b2da      	uxtb	r2, r3
 800bf60:	4b0c      	ldr	r3, [pc, #48]	@ (800bf94 <SoftTime_Task_Update+0x180>)
 800bf62:	711a      	strb	r2, [r3, #4]
            if (s_WorkingTimeClock_context.hours >= 24) {
 800bf64:	4b0b      	ldr	r3, [pc, #44]	@ (800bf94 <SoftTime_Task_Update+0x180>)
 800bf66:	791b      	ldrb	r3, [r3, #4]
 800bf68:	2b17      	cmp	r3, #23
 800bf6a:	d907      	bls.n	800bf7c <SoftTime_Task_Update+0x168>
                s_WorkingTimeClock_context.hours = 0;
 800bf6c:	4b09      	ldr	r3, [pc, #36]	@ (800bf94 <SoftTime_Task_Update+0x180>)
 800bf6e:	2200      	movs	r2, #0
 800bf70:	711a      	strb	r2, [r3, #4]
                s_WorkingTimeClock_context.days++;
 800bf72:	4b08      	ldr	r3, [pc, #32]	@ (800bf94 <SoftTime_Task_Update+0x180>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	3301      	adds	r3, #1
 800bf78:	4a06      	ldr	r2, [pc, #24]	@ (800bf94 <SoftTime_Task_Update+0x180>)
 800bf7a:	6013      	str	r3, [r2, #0]
            }
        }
    }
}
 800bf7c:	bf00      	nop
 800bf7e:	370c      	adds	r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr
 800bf88:	20000234 	.word	0x20000234
 800bf8c:	51eb851f 	.word	0x51eb851f
 800bf90:	08015180 	.word	0x08015180
 800bf94:	20003504 	.word	0x20003504

0800bf98 <SoftTime_CreateTask>:

void SoftTime_CreateTask(void) {
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	af00      	add	r7, sp, #0
    s_RealTimeClock_context.year = 0;  // 2000
 800bf9c:	4b11      	ldr	r3, [pc, #68]	@ (800bfe4 <SoftTime_CreateTask+0x4c>)
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	709a      	strb	r2, [r3, #2]
    s_RealTimeClock_context.month = 1; // January
 800bfa2:	4b10      	ldr	r3, [pc, #64]	@ (800bfe4 <SoftTime_CreateTask+0x4c>)
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	705a      	strb	r2, [r3, #1]
    s_RealTimeClock_context.day = 1;
 800bfa8:	4b0e      	ldr	r3, [pc, #56]	@ (800bfe4 <SoftTime_CreateTask+0x4c>)
 800bfaa:	2201      	movs	r2, #1
 800bfac:	701a      	strb	r2, [r3, #0]
    s_RealTimeClock_context.hour = 0;
 800bfae:	4b0d      	ldr	r3, [pc, #52]	@ (800bfe4 <SoftTime_CreateTask+0x4c>)
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	70da      	strb	r2, [r3, #3]
    s_RealTimeClock_context.minute = 0;
 800bfb4:	4b0b      	ldr	r3, [pc, #44]	@ (800bfe4 <SoftTime_CreateTask+0x4c>)
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	711a      	strb	r2, [r3, #4]
    s_RealTimeClock_context.second = 0;
 800bfba:	4b0a      	ldr	r3, [pc, #40]	@ (800bfe4 <SoftTime_CreateTask+0x4c>)
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	715a      	strb	r2, [r3, #5]

    s_WorkingTimeClock_context.days = 0;
 800bfc0:	4b09      	ldr	r3, [pc, #36]	@ (800bfe8 <SoftTime_CreateTask+0x50>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	601a      	str	r2, [r3, #0]
    s_WorkingTimeClock_context.hours = 0;
 800bfc6:	4b08      	ldr	r3, [pc, #32]	@ (800bfe8 <SoftTime_CreateTask+0x50>)
 800bfc8:	2200      	movs	r2, #0
 800bfca:	711a      	strb	r2, [r3, #4]
    s_WorkingTimeClock_context.minutes = 0;
 800bfcc:	4b06      	ldr	r3, [pc, #24]	@ (800bfe8 <SoftTime_CreateTask+0x50>)
 800bfce:	2200      	movs	r2, #0
 800bfd0:	715a      	strb	r2, [r3, #5]
    s_WorkingTimeClock_context.seconds = 0;
 800bfd2:	4b05      	ldr	r3, [pc, #20]	@ (800bfe8 <SoftTime_CreateTask+0x50>)
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	719a      	strb	r2, [r3, #6]

    SCH_TASK_CreateTask(&s_SoftTime_task_context.taskHandle, &s_SoftTime_task_context.taskProperty);
 800bfd8:	4904      	ldr	r1, [pc, #16]	@ (800bfec <SoftTime_CreateTask+0x54>)
 800bfda:	4805      	ldr	r0, [pc, #20]	@ (800bff0 <SoftTime_CreateTask+0x58>)
 800bfdc:	f006 fc06 	bl	80127ec <SCH_TASK_CreateTask>
}
 800bfe0:	bf00      	nop
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	20000234 	.word	0x20000234
 800bfe8:	20003504 	.word	0x20003504
 800bfec:	20000240 	.word	0x20000240
 800bff0:	2000023c 	.word	0x2000023c

0800bff4 <DateTime_GetRTC>:

void DateTime_GetRTC(s_DateTime *dateTime) {
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
    if (dateTime == NULL) return;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d006      	beq.n	800c010 <DateTime_GetRTC+0x1c>
    *dateTime = s_RealTimeClock_context;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	4a05      	ldr	r2, [pc, #20]	@ (800c01c <DateTime_GetRTC+0x28>)
 800c006:	6810      	ldr	r0, [r2, #0]
 800c008:	6018      	str	r0, [r3, #0]
 800c00a:	8892      	ldrh	r2, [r2, #4]
 800c00c:	809a      	strh	r2, [r3, #4]
 800c00e:	e000      	b.n	800c012 <DateTime_GetRTC+0x1e>
    if (dateTime == NULL) return;
 800c010:	bf00      	nop
}
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr
 800c01c:	20000234 	.word	0x20000234

0800c020 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	683a      	ldr	r2, [r7, #0]
 800c02e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800c030:	bf00      	nop
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	683a      	ldr	r2, [r7, #0]
 800c04a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c04c:	bf00      	nop
 800c04e:	370c      	adds	r7, #12
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	683a      	ldr	r2, [r7, #0]
 800c066:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c068:	bf00      	nop
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800c084:	bf00      	nop
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <heater_set_duty_pwm_channel>:

#include "heater.h"
#include "main.h"

void heater_set_duty_pwm_channel(uint8_t channel, uint16_t duty_pwm)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	4603      	mov	r3, r0
 800c098:	460a      	mov	r2, r1
 800c09a:	71fb      	strb	r3, [r7, #7]
 800c09c:	4613      	mov	r3, r2
 800c09e:	80bb      	strh	r3, [r7, #4]
    if (duty_pwm > 999) duty_pwm = 999;
 800c0a0:	88bb      	ldrh	r3, [r7, #4]
 800c0a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c0a6:	d302      	bcc.n	800c0ae <heater_set_duty_pwm_channel+0x1e>
 800c0a8:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800c0ac:	80bb      	strh	r3, [r7, #4]
    switch (channel)
 800c0ae:	79fb      	ldrb	r3, [r7, #7]
 800c0b0:	2b03      	cmp	r3, #3
 800c0b2:	d823      	bhi.n	800c0fc <heater_set_duty_pwm_channel+0x6c>
 800c0b4:	a201      	add	r2, pc, #4	@ (adr r2, 800c0bc <heater_set_duty_pwm_channel+0x2c>)
 800c0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ba:	bf00      	nop
 800c0bc:	0800c0cd 	.word	0x0800c0cd
 800c0c0:	0800c0d9 	.word	0x0800c0d9
 800c0c4:	0800c0e5 	.word	0x0800c0e5
 800c0c8:	0800c0f1 	.word	0x0800c0f1
    {
        case 0:
            LL_TIM_OC_SetCompareCH1(TIM1, duty_pwm);
 800c0cc:	88bb      	ldrh	r3, [r7, #4]
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	480d      	ldr	r0, [pc, #52]	@ (800c108 <heater_set_duty_pwm_channel+0x78>)
 800c0d2:	f7ff ffa5 	bl	800c020 <LL_TIM_OC_SetCompareCH1>
            break;
 800c0d6:	e012      	b.n	800c0fe <heater_set_duty_pwm_channel+0x6e>
        case 1:
            LL_TIM_OC_SetCompareCH2(TIM1, duty_pwm);
 800c0d8:	88bb      	ldrh	r3, [r7, #4]
 800c0da:	4619      	mov	r1, r3
 800c0dc:	480a      	ldr	r0, [pc, #40]	@ (800c108 <heater_set_duty_pwm_channel+0x78>)
 800c0de:	f7ff ffad 	bl	800c03c <LL_TIM_OC_SetCompareCH2>
            break;
 800c0e2:	e00c      	b.n	800c0fe <heater_set_duty_pwm_channel+0x6e>
        case 2:
            LL_TIM_OC_SetCompareCH3(TIM1, duty_pwm);
 800c0e4:	88bb      	ldrh	r3, [r7, #4]
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	4807      	ldr	r0, [pc, #28]	@ (800c108 <heater_set_duty_pwm_channel+0x78>)
 800c0ea:	f7ff ffb5 	bl	800c058 <LL_TIM_OC_SetCompareCH3>
            break;
 800c0ee:	e006      	b.n	800c0fe <heater_set_duty_pwm_channel+0x6e>
        case 3:
            LL_TIM_OC_SetCompareCH4(TIM1, duty_pwm);
 800c0f0:	88bb      	ldrh	r3, [r7, #4]
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	4804      	ldr	r0, [pc, #16]	@ (800c108 <heater_set_duty_pwm_channel+0x78>)
 800c0f6:	f7ff ffbd 	bl	800c074 <LL_TIM_OC_SetCompareCH4>
            break;
 800c0fa:	e000      	b.n	800c0fe <heater_set_duty_pwm_channel+0x6e>
        default:
            break;
 800c0fc:	bf00      	nop
    }
}
 800c0fe:	bf00      	nop
 800c100:	3708      	adds	r7, #8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	40010000 	.word	0x40010000

0800c10c <LL_TIM_OC_SetCompareCH1>:
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	683a      	ldr	r2, [r7, #0]
 800c11a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <ir_led_set_duty>:
#include "ir_led.h"

static uint16_t ir_led_duty_current = 0;

void ir_led_set_duty(uint8_t duty)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	4603      	mov	r3, r0
 800c130:	71fb      	strb	r3, [r7, #7]
	ir_led_duty_current = duty*10;
 800c132:	79fb      	ldrb	r3, [r7, #7]
 800c134:	b29b      	uxth	r3, r3
 800c136:	461a      	mov	r2, r3
 800c138:	0092      	lsls	r2, r2, #2
 800c13a:	4413      	add	r3, r2
 800c13c:	005b      	lsls	r3, r3, #1
 800c13e:	b29a      	uxth	r2, r3
 800c140:	4b07      	ldr	r3, [pc, #28]	@ (800c160 <ir_led_set_duty+0x38>)
 800c142:	801a      	strh	r2, [r3, #0]
	LL_TIM_OC_SetCompareCH1(TIM1, duty*10);
 800c144:	79fa      	ldrb	r2, [r7, #7]
 800c146:	4613      	mov	r3, r2
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	4413      	add	r3, r2
 800c14c:	005b      	lsls	r3, r3, #1
 800c14e:	4619      	mov	r1, r3
 800c150:	4804      	ldr	r0, [pc, #16]	@ (800c164 <ir_led_set_duty+0x3c>)
 800c152:	f7ff ffdb 	bl	800c10c <LL_TIM_OC_SetCompareCH1>
}
 800c156:	bf00      	nop
 800c158:	3708      	adds	r7, #8
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	2000350c 	.word	0x2000350c
 800c164:	40010000 	.word	0x40010000

0800c168 <ir_led_get_duty>:

uint8_t ir_led_get_duty(void)
{
 800c168:	b480      	push	{r7}
 800c16a:	af00      	add	r7, sp, #0
	return ir_led_duty_current/10;
 800c16c:	4b06      	ldr	r3, [pc, #24]	@ (800c188 <ir_led_get_duty+0x20>)
 800c16e:	881b      	ldrh	r3, [r3, #0]
 800c170:	4a06      	ldr	r2, [pc, #24]	@ (800c18c <ir_led_get_duty+0x24>)
 800c172:	fba2 2303 	umull	r2, r3, r2, r3
 800c176:	08db      	lsrs	r3, r3, #3
 800c178:	b29b      	uxth	r3, r3
 800c17a:	b2db      	uxtb	r3, r3
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	2000350c 	.word	0x2000350c
 800c18c:	cccccccd 	.word	0xcccccccd

0800c190 <LL_SPI_Enable>:
{
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	601a      	str	r2, [r3, #0]
}
 800c1a4:	bf00      	nop
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <LL_SPI_IsEnabled>:
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1c0:	2b40      	cmp	r3, #64	@ 0x40
 800c1c2:	d101      	bne.n	800c1c8 <LL_SPI_IsEnabled+0x18>
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e000      	b.n	800c1ca <LL_SPI_IsEnabled+0x1a>
 800c1c8:	2300      	movs	r3, #0
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	370c      	adds	r7, #12
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr

0800c1d6 <LL_SPI_IsActiveFlag_TXE>:
{
 800c1d6:	b480      	push	{r7}
 800c1d8:	b083      	sub	sp, #12
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	f003 0302 	and.w	r3, r3, #2
 800c1e6:	2b02      	cmp	r3, #2
 800c1e8:	d101      	bne.n	800c1ee <LL_SPI_IsActiveFlag_TXE+0x18>
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e000      	b.n	800c1f0 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800c1ee:	2300      	movs	r3, #0
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <LL_SPI_IsActiveFlag_BSY>:
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c20c:	2b80      	cmp	r3, #128	@ 0x80
 800c20e:	d101      	bne.n	800c214 <LL_SPI_IsActiveFlag_BSY+0x18>
 800c210:	2301      	movs	r3, #1
 800c212:	e000      	b.n	800c216 <LL_SPI_IsActiveFlag_BSY+0x1a>
 800c214:	2300      	movs	r3, #0
}
 800c216:	4618      	mov	r0, r3
 800c218:	370c      	adds	r7, #12
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <LL_SPI_TransmitData8>:
{
 800c222:	b480      	push	{r7}
 800c224:	b085      	sub	sp, #20
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
 800c22a:	460b      	mov	r3, r1
 800c22c:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	330c      	adds	r3, #12
 800c232:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	78fa      	ldrb	r2, [r7, #3]
 800c238:	701a      	strb	r2, [r3, #0]
}
 800c23a:	bf00      	nop
 800c23c:	3714      	adds	r7, #20
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr

0800c246 <LL_GPIO_SetOutputPin>:
{
 800c246:	b480      	push	{r7}
 800c248:	b083      	sub	sp, #12
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
 800c24e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	683a      	ldr	r2, [r7, #0]
 800c254:	619a      	str	r2, [r3, #24]
}
 800c256:	bf00      	nop
 800c258:	370c      	adds	r7, #12
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <LL_GPIO_ResetOutputPin>:
{
 800c262:	b480      	push	{r7}
 800c264:	b083      	sub	sp, #12
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
 800c26a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	041a      	lsls	r2, r3, #16
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	619a      	str	r2, [r3, #24]
}
 800c274:	bf00      	nop
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <v2dac>:
#include "mcp4902.h"



uint8_t v2dac(uint16_t voltage)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	4603      	mov	r3, r0
 800c288:	80fb      	strh	r3, [r7, #6]
	return (voltage * 2.55f)/_VREF_DAC;
 800c28a:	88fb      	ldrh	r3, [r7, #6]
 800c28c:	ee07 3a90 	vmov	s15, r3
 800c290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c294:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800c2bc <v2dac+0x3c>
 800c298:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c29c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800c2c0 <v2dac+0x40>
 800c2a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c2a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2a8:	edc7 7a00 	vstr	s15, [r7]
 800c2ac:	783b      	ldrb	r3, [r7, #0]
 800c2ae:	b2db      	uxtb	r3, r3
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr
 800c2bc:	40233333 	.word	0x40233333
 800c2c0:	40533333 	.word	0x40533333

0800c2c4 <MCP4902_Write>:
	return (dac*_VREF_DAC)/2.55f;
}

/* Hàm gửi dữ liệu qua SPI */
static void MCP4902_Write(MCP4902_Device_t *dev)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
	uint16_t temp;

    while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 800c2cc:	bf00      	nop
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7ff ff7f 	bl	800c1d6 <LL_SPI_IsActiveFlag_TXE>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d0f7      	beq.n	800c2ce <MCP4902_Write+0xa>


    for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 800c2de:	2300      	movs	r3, #0
 800c2e0:	60fb      	str	r3, [r7, #12]
 800c2e2:	e076      	b.n	800c3d2 <MCP4902_Write+0x10e>
    {
    	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	685a      	ldr	r2, [r3, #4]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	4610      	mov	r0, r2
 800c2f0:	f7ff ffb7 	bl	800c262 <LL_GPIO_ResetOutputPin>
    	temp = i ? ((1<<MCP4902_AB_BIT)|(1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4)):
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00c      	beq.n	800c314 <MCP4902_Write+0x50>
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	4413      	add	r3, r2
 800c300:	3314      	adds	r3, #20
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	b21b      	sxth	r3, r3
 800c306:	011b      	lsls	r3, r3, #4
 800c308:	b21a      	sxth	r2, r3
 800c30a:	4b36      	ldr	r3, [pc, #216]	@ (800c3e4 <MCP4902_Write+0x120>)
 800c30c:	4313      	orrs	r3, r2
 800c30e:	b21b      	sxth	r3, r3
 800c310:	b29b      	uxth	r3, r3
 800c312:	e00b      	b.n	800c32c <MCP4902_Write+0x68>
				   ((1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4));
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	4413      	add	r3, r2
 800c31a:	3314      	adds	r3, #20
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	b21b      	sxth	r3, r3
 800c320:	011b      	lsls	r3, r3, #4
 800c322:	b21b      	sxth	r3, r3
 800c324:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800c328:	b21b      	sxth	r3, r3
    	temp = i ? ((1<<MCP4902_AB_BIT)|(1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4)):
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	817b      	strh	r3, [r7, #10]

        LL_SPI_TransmitData8(dev->spi, (uint8_t)(temp>>8));
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	897b      	ldrh	r3, [r7, #10]
 800c334:	0a1b      	lsrs	r3, r3, #8
 800c336:	b29b      	uxth	r3, r3
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	4619      	mov	r1, r3
 800c33c:	4610      	mov	r0, r2
 800c33e:	f7ff ff70 	bl	800c222 <LL_SPI_TransmitData8>
        while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 800c342:	bf00      	nop
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4618      	mov	r0, r3
 800c34a:	f7ff ff44 	bl	800c1d6 <LL_SPI_IsActiveFlag_TXE>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d0f7      	beq.n	800c344 <MCP4902_Write+0x80>
        while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 800c354:	bf00      	nop
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7ff ff4e 	bl	800c1fc <LL_SPI_IsActiveFlag_BSY>
 800c360:	4603      	mov	r3, r0
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1f7      	bne.n	800c356 <MCP4902_Write+0x92>

        LL_SPI_TransmitData8(dev->spi, (uint8_t)temp);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	897a      	ldrh	r2, [r7, #10]
 800c36c:	b2d2      	uxtb	r2, r2
 800c36e:	4611      	mov	r1, r2
 800c370:	4618      	mov	r0, r3
 800c372:	f7ff ff56 	bl	800c222 <LL_SPI_TransmitData8>
		while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 800c376:	bf00      	nop
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7ff ff2a 	bl	800c1d6 <LL_SPI_IsActiveFlag_TXE>
 800c382:	4603      	mov	r3, r0
 800c384:	2b00      	cmp	r3, #0
 800c386:	d0f7      	beq.n	800c378 <MCP4902_Write+0xb4>
		while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 800c388:	bf00      	nop
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4618      	mov	r0, r3
 800c390:	f7ff ff34 	bl	800c1fc <LL_SPI_IsActiveFlag_BSY>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1f7      	bne.n	800c38a <MCP4902_Write+0xc6>

        LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	f7ff ff4e 	bl	800c246 <LL_GPIO_SetOutputPin>

		LL_GPIO_ResetOutputPin(dev->latch_port, dev->latch_pin);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	68da      	ldr	r2, [r3, #12]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	691b      	ldr	r3, [r3, #16]
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	f7ff ff54 	bl	800c262 <LL_GPIO_ResetOutputPin>
		__NOP();
 800c3ba:	bf00      	nop
		LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	68da      	ldr	r2, [r3, #12]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	4610      	mov	r0, r2
 800c3c8:	f7ff ff3d 	bl	800c246 <LL_GPIO_SetOutputPin>
    for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	60fb      	str	r3, [r7, #12]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	dd85      	ble.n	800c2e4 <MCP4902_Write+0x20>
    }


}
 800c3d8:	bf00      	nop
 800c3da:	bf00      	nop
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	ffffb000 	.word	0xffffb000

0800c3e8 <MCP4902_Set_Voltage>:
	dev->dac_channel[channel] = DAC_val;
	MCP4902_Write(dev);
}

void MCP4902_Set_Voltage(MCP4902_Device_t *dev, uint8_t channel, uint16_t voltage)
{
 800c3e8:	b590      	push	{r4, r7, lr}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	70fb      	strb	r3, [r7, #3]
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	803b      	strh	r3, [r7, #0]
	dev->dac_channel[channel] = v2dac(voltage);
 800c3f8:	78fc      	ldrb	r4, [r7, #3]
 800c3fa:	883b      	ldrh	r3, [r7, #0]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7ff ff3f 	bl	800c280 <v2dac>
 800c402:	4603      	mov	r3, r0
 800c404:	461a      	mov	r2, r3
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	4423      	add	r3, r4
 800c40a:	751a      	strb	r2, [r3, #20]
	MCP4902_Write(dev);
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f7ff ff59 	bl	800c2c4 <MCP4902_Write>
}
 800c412:	bf00      	nop
 800c414:	370c      	adds	r7, #12
 800c416:	46bd      	mov	sp, r7
 800c418:	bd90      	pop	{r4, r7, pc}

0800c41a <MCP4902_Device_Init>:
							SPI_TypeDef *spi,
							GPIO_TypeDef *cs_port,
							uint32_t cs_pin,
							GPIO_TypeDef *latch_port,
							uint32_t latch_pin)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b08c      	sub	sp, #48	@ 0x30
 800c41e:	af00      	add	r7, sp, #0
 800c420:	60f8      	str	r0, [r7, #12]
 800c422:	60b9      	str	r1, [r7, #8]
 800c424:	607a      	str	r2, [r7, #4]
 800c426:	603b      	str	r3, [r7, #0]
	dev->spi = spi;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	601a      	str	r2, [r3, #0]
	dev->cs_port = cs_port;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	683a      	ldr	r2, [r7, #0]
 800c438:	609a      	str	r2, [r3, #8]
	dev->latch_port = latch_port;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c43e:	60da      	str	r2, [r3, #12]
	dev->latch_pin = latch_pin;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c444:	611a      	str	r2, [r3, #16]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c446:	f107 0314 	add.w	r3, r7, #20
 800c44a:	2200      	movs	r2, #0
 800c44c:	601a      	str	r2, [r3, #0]
 800c44e:	605a      	str	r2, [r3, #4]
 800c450:	609a      	str	r2, [r3, #8]
 800c452:	60da      	str	r2, [r3, #12]
 800c454:	611a      	str	r2, [r3, #16]
 800c456:	615a      	str	r2, [r3, #20]
	GPIO_InitStruct.Pin = dev->cs_pin;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800c45e:	2301      	movs	r3, #1
 800c460:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800c462:	2302      	movs	r3, #2
 800c464:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c466:	2300      	movs	r3, #0
 800c468:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800c46a:	2300      	movs	r3, #0
 800c46c:	627b      	str	r3, [r7, #36]	@ 0x24
	LL_GPIO_Init(dev->cs_port, &GPIO_InitStruct);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	f107 0214 	add.w	r2, r7, #20
 800c476:	4611      	mov	r1, r2
 800c478:	4618      	mov	r0, r3
 800c47a:	f004 ff56 	bl	801132a <LL_GPIO_Init>

	GPIO_InitStruct.Pin = dev->latch_pin;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	691b      	ldr	r3, [r3, #16]
 800c482:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(dev->latch_port, &GPIO_InitStruct);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	f107 0214 	add.w	r2, r7, #20
 800c48c:	4611      	mov	r1, r2
 800c48e:	4618      	mov	r0, r3
 800c490:	f004 ff4b 	bl	801132a <LL_GPIO_Init>

	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	685a      	ldr	r2, [r3, #4]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	4619      	mov	r1, r3
 800c49e:	4610      	mov	r0, r2
 800c4a0:	f7ff fed1 	bl	800c246 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	68da      	ldr	r2, [r3, #12]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	691b      	ldr	r3, [r3, #16]
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	f7ff fec9 	bl	800c246 <LL_GPIO_SetOutputPin>

	for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4b8:	e008      	b.n	800c4cc <MCP4902_Device_Init+0xb2>
	{
		dev->dac_channel[i] = 0;
 800c4ba:	68fa      	ldr	r2, [r7, #12]
 800c4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4be:	4413      	add	r3, r2
 800c4c0:	3314      	adds	r3, #20
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 800c4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	ddf3      	ble.n	800c4ba <MCP4902_Device_Init+0xa0>
	}

	LL_SPI_Enable(dev->spi);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7ff fe5a 	bl	800c190 <LL_SPI_Enable>
	while (!LL_SPI_IsEnabled(dev->spi));
 800c4dc:	bf00      	nop
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7ff fe64 	bl	800c1b0 <LL_SPI_IsEnabled>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d0f7      	beq.n	800c4de <MCP4902_Device_Init+0xc4>
	MCP4902_Write(dev);
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f7ff fee8 	bl	800c2c4 <MCP4902_Write>
}
 800c4f4:	bf00      	nop
 800c4f6:	3730      	adds	r7, #48	@ 0x30
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <Laser_board_init>:
ADG1414_Device_t laser_int;
ADG1414_Device_t laser_ext;
MCP4902_Device_t DAC_device;

void Laser_board_init(void)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af02      	add	r7, sp, #8
	ADG1414_Chain_Init(&laser_int, SPI1, LASER_SW_INT_CS_GPIO_Port, LASER_SW_INT_CS_Pin, INTERNAL_CHAIN_SWITCH_NUM);
 800c502:	2306      	movs	r3, #6
 800c504:	9300      	str	r3, [sp, #0]
 800c506:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c50a:	4a0e      	ldr	r2, [pc, #56]	@ (800c544 <Laser_board_init+0x48>)
 800c50c:	490e      	ldr	r1, [pc, #56]	@ (800c548 <Laser_board_init+0x4c>)
 800c50e:	480f      	ldr	r0, [pc, #60]	@ (800c54c <Laser_board_init+0x50>)
 800c510:	f7ff f94c 	bl	800b7ac <ADG1414_Chain_Init>
	ADG1414_Chain_Init(&laser_ext, SPI1, LASER_SW_EXT_CS_GPIO_Port, LASER_SW_EXT_CS_Pin, EXTERNAL_CHAIN_SWITCH_NUM);
 800c514:	2301      	movs	r3, #1
 800c516:	9300      	str	r3, [sp, #0]
 800c518:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c51c:	4a09      	ldr	r2, [pc, #36]	@ (800c544 <Laser_board_init+0x48>)
 800c51e:	490a      	ldr	r1, [pc, #40]	@ (800c548 <Laser_board_init+0x4c>)
 800c520:	480b      	ldr	r0, [pc, #44]	@ (800c550 <Laser_board_init+0x54>)
 800c522:	f7ff f943 	bl	800b7ac <ADG1414_Chain_Init>
	MCP4902_Device_Init(&DAC_device, SPI1, LASER_DAC_CS_GPIO_Port, LASER_DAC_CS_Pin, LASER_DAC_LATCH_GPIO_Port, LASER_DAC_LATCH_Pin);
 800c526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c52a:	9301      	str	r3, [sp, #4]
 800c52c:	4b05      	ldr	r3, [pc, #20]	@ (800c544 <Laser_board_init+0x48>)
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c534:	4a03      	ldr	r2, [pc, #12]	@ (800c544 <Laser_board_init+0x48>)
 800c536:	4904      	ldr	r1, [pc, #16]	@ (800c548 <Laser_board_init+0x4c>)
 800c538:	4806      	ldr	r0, [pc, #24]	@ (800c554 <Laser_board_init+0x58>)
 800c53a:	f7ff ff6e 	bl	800c41a <MCP4902_Device_Init>
}
 800c53e:	bf00      	nop
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}
 800c544:	40021000 	.word	0x40021000
 800c548:	40013000 	.word	0x40013000
 800c54c:	20003510 	.word	0x20003510
 800c550:	20003530 	.word	0x20003530
 800c554:	20003550 	.word	0x20003550

0800c558 <LL_SPI_IsActiveFlag_RXNE>:
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	f003 0301 	and.w	r3, r3, #1
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d101      	bne.n	800c570 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800c56c:	2301      	movs	r3, #1
 800c56e:	e000      	b.n	800c572 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800c570:	2300      	movs	r3, #0
}
 800c572:	4618      	mov	r0, r3
 800c574:	370c      	adds	r7, #12
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr

0800c57e <LL_SPI_ReceiveData8>:
{
 800c57e:	b480      	push	{r7}
 800c580:	b083      	sub	sp, #12
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	330c      	adds	r3, #12
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	b2db      	uxtb	r3, r3
}
 800c58e:	4618      	mov	r0, r3
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr

0800c59a <LL_SPI_TransmitData8>:
{
 800c59a:	b480      	push	{r7}
 800c59c:	b085      	sub	sp, #20
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	330c      	adds	r3, #12
 800c5aa:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	78fa      	ldrb	r2, [r7, #3]
 800c5b0:	701a      	strb	r2, [r3, #0]
}
 800c5b2:	bf00      	nop
 800c5b4:	3714      	adds	r7, #20
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr

0800c5be <LL_GPIO_SetOutputPin>:
{
 800c5be:	b480      	push	{r7}
 800c5c0:	b083      	sub	sp, #12
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
 800c5c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	683a      	ldr	r2, [r7, #0]
 800c5cc:	619a      	str	r2, [r3, #24]
}
 800c5ce:	bf00      	nop
 800c5d0:	370c      	adds	r7, #12
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr

0800c5da <LL_GPIO_ResetOutputPin>:
{
 800c5da:	b480      	push	{r7}
 800c5dc:	b083      	sub	sp, #12
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
 800c5e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	041a      	lsls	r2, r3, #16
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	619a      	str	r2, [r3, #24]
}
 800c5ec:	bf00      	nop
 800c5ee:	370c      	adds	r7, #12
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <csLOW>:

int swen_port[4] = {(int)TEC_1_SWEN_GPIO_Port, (int)TEC_2_SWEN_GPIO_Port, (int)TEC_3_SWEN_GPIO_Port, (int)TEC_4_SWEN_GPIO_Port};
int swen_pin[4] = {TEC_1_SWEN_Pin, TEC_2_SWEN_Pin, TEC_3_SWEN_Pin, TEC_4_SWEN_Pin};

/* SPI support function --------------------------------------------------*/
static inline void csLOW(uint8_t channel) {
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	4603      	mov	r3, r0
 800c600:	71fb      	strb	r3, [r7, #7]
//	LL_GPIO_ResetOutputPin(TEC_1_CS_GPIO_Port, TEC_1_CS_Pin);
	LL_GPIO_ResetOutputPin((GPIO_TypeDef*)cs_port[channel], cs_pin[channel]);
 800c602:	79fb      	ldrb	r3, [r7, #7]
 800c604:	4a07      	ldr	r2, [pc, #28]	@ (800c624 <csLOW+0x2c>)
 800c606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c60a:	4618      	mov	r0, r3
 800c60c:	79fb      	ldrb	r3, [r7, #7]
 800c60e:	4a06      	ldr	r2, [pc, #24]	@ (800c628 <csLOW+0x30>)
 800c610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c614:	4619      	mov	r1, r3
 800c616:	f7ff ffe0 	bl	800c5da <LL_GPIO_ResetOutputPin>
}
 800c61a:	bf00      	nop
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	200002b4 	.word	0x200002b4
 800c628:	200002c4 	.word	0x200002c4

0800c62c <csHIGH>:

static inline void csHIGH(uint8_t channel) {
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	4603      	mov	r3, r0
 800c634:	71fb      	strb	r3, [r7, #7]
//	LL_GPIO_SetOutputPin(TEC_1_CS_GPIO_Port, TEC_1_CS_Pin);
	LL_GPIO_SetOutputPin((GPIO_TypeDef*)cs_port[channel], cs_pin[channel]);
 800c636:	79fb      	ldrb	r3, [r7, #7]
 800c638:	4a07      	ldr	r2, [pc, #28]	@ (800c658 <csHIGH+0x2c>)
 800c63a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c63e:	4618      	mov	r0, r3
 800c640:	79fb      	ldrb	r3, [r7, #7]
 800c642:	4a06      	ldr	r2, [pc, #24]	@ (800c65c <csHIGH+0x30>)
 800c644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c648:	4619      	mov	r1, r3
 800c64a:	f7ff ffb8 	bl	800c5be <LL_GPIO_SetOutputPin>
}
 800c64e:	bf00      	nop
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	200002b4 	.word	0x200002b4
 800c65c:	200002c4 	.word	0x200002c4

0800c660 <SPI_LL_Transmit>:

static uint8_t SPI_LL_Transmit(uint8_t data)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	4603      	mov	r3, r0
 800c668:	71fb      	strb	r3, [r7, #7]
	LL_SPI_TransmitData8(SPI_TEC, data);
 800c66a:	79fb      	ldrb	r3, [r7, #7]
 800c66c:	4619      	mov	r1, r3
 800c66e:	4809      	ldr	r0, [pc, #36]	@ (800c694 <SPI_LL_Transmit+0x34>)
 800c670:	f7ff ff93 	bl	800c59a <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI_TEC));
 800c674:	bf00      	nop
 800c676:	4807      	ldr	r0, [pc, #28]	@ (800c694 <SPI_LL_Transmit+0x34>)
 800c678:	f7ff ff6e 	bl	800c558 <LL_SPI_IsActiveFlag_RXNE>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d0f9      	beq.n	800c676 <SPI_LL_Transmit+0x16>
	return LL_SPI_ReceiveData8(SPI_TEC);
 800c682:	4804      	ldr	r0, [pc, #16]	@ (800c694 <SPI_LL_Transmit+0x34>)
 800c684:	f7ff ff7b 	bl	800c57e <LL_SPI_ReceiveData8>
 800c688:	4603      	mov	r3, r0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3708      	adds	r7, #8
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	40003c00 	.word	0x40003c00

0800c698 <SPI_write_and_read_buffer>:

uint8_t SPI_write_and_read_buffer(uint8_t channel, uint8_t *buffer, uint8_t byte_number)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	4603      	mov	r3, r0
 800c6a0:	6039      	str	r1, [r7, #0]
 800c6a2:	71fb      	strb	r3, [r7, #7]
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	71bb      	strb	r3, [r7, #6]
    uint8_t received_data = 0;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	73fb      	strb	r3, [r7, #15]
    csLOW(channel);
 800c6ac:	79fb      	ldrb	r3, [r7, #7]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7ff ffa2 	bl	800c5f8 <csLOW>
    for (uint8_t i = 0; i < byte_number; i++)
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	73bb      	strb	r3, [r7, #14]
 800c6b8:	e010      	b.n	800c6dc <SPI_write_and_read_buffer+0x44>
    {
        received_data = SPI_LL_Transmit(buffer[i]);
 800c6ba:	7bbb      	ldrb	r3, [r7, #14]
 800c6bc:	683a      	ldr	r2, [r7, #0]
 800c6be:	4413      	add	r3, r2
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7ff ffcc 	bl	800c660 <SPI_LL_Transmit>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	73fb      	strb	r3, [r7, #15]
        buffer[i] = received_data;
 800c6cc:	7bbb      	ldrb	r3, [r7, #14]
 800c6ce:	683a      	ldr	r2, [r7, #0]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	7bfa      	ldrb	r2, [r7, #15]
 800c6d4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < byte_number; i++)
 800c6d6:	7bbb      	ldrb	r3, [r7, #14]
 800c6d8:	3301      	adds	r3, #1
 800c6da:	73bb      	strb	r3, [r7, #14]
 800c6dc:	7bba      	ldrb	r2, [r7, #14]
 800c6de:	79bb      	ldrb	r3, [r7, #6]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d3ea      	bcc.n	800c6ba <SPI_write_and_read_buffer+0x22>
    }
    csHIGH(channel);
 800c6e4:	79fb      	ldrb	r3, [r7, #7]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff ffa0 	bl	800c62c <csHIGH>
    return received_data;
 800c6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3710      	adds	r7, #16
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
	...

0800c6f8 <lt8722_voltage_to_dac>:
 * @brief Convert voltage to DAC code.
 * @param voltage - Voltage value in nanovolts.
 * @return DAC code.
 */
int32_t lt8722_voltage_to_dac(int64_t voltage)
{
 800c6f8:	b5b0      	push	{r4, r5, r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	e9c7 0100 	strd	r0, r1, [r7]
	return (LT8722_DAC_OFFSET - voltage) * (1 << LT8722_DAC_RESOLUTION) / LT8722_DAC_VREF;
 800c702:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c706:	4d0e      	ldr	r5, [pc, #56]	@ (800c740 <lt8722_voltage_to_dac+0x48>)
 800c708:	2400      	movs	r4, #0
 800c70a:	1a2a      	subs	r2, r5, r0
 800c70c:	eb64 0301 	sbc.w	r3, r4, r1
 800c710:	f04f 0000 	mov.w	r0, #0
 800c714:	f04f 0100 	mov.w	r1, #0
 800c718:	0659      	lsls	r1, r3, #25
 800c71a:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 800c71e:	0650      	lsls	r0, r2, #25
 800c720:	a305      	add	r3, pc, #20	@ (adr r3, 800c738 <lt8722_voltage_to_dac+0x40>)
 800c722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c726:	f7fb fdbb 	bl	80082a0 <__aeabi_ldivmod>
 800c72a:	4602      	mov	r2, r0
 800c72c:	460b      	mov	r3, r1
 800c72e:	4613      	mov	r3, r2
}
 800c730:	4618      	mov	r0, r3
 800c732:	3708      	adds	r7, #8
 800c734:	46bd      	mov	sp, r7
 800c736:	bdb0      	pop	{r4, r5, r7, pc}
 800c738:	9502f900 	.word	0x9502f900
 800c73c:	00000000 	.word	0x00000000
 800c740:	4a817c80 	.word	0x4a817c80

0800c744 <lt8722_dac_to_voltage>:
 * @brief Convert DAC code to nanovolts.
 * @param dac - DAC code.
 * @return Voltage value in nanovolts.
 */
int64_t lt8722_dac_to_voltage(int32_t dac)
{
 800c744:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c748:	b085      	sub	sp, #20
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	60f8      	str	r0, [r7, #12]
	return LT8722_DAC_OFFSET - dac * LT8722_DAC_VREF /(1 << LT8722_DAC_RESOLUTION);
 800c74e:	68f9      	ldr	r1, [r7, #12]
 800c750:	17c8      	asrs	r0, r1, #31
 800c752:	460c      	mov	r4, r1
 800c754:	4605      	mov	r5, r0
 800c756:	491b      	ldr	r1, [pc, #108]	@ (800c7c4 <lt8722_dac_to_voltage+0x80>)
 800c758:	fb01 f005 	mul.w	r0, r1, r5
 800c75c:	2100      	movs	r1, #0
 800c75e:	fb04 f101 	mul.w	r1, r4, r1
 800c762:	4401      	add	r1, r0
 800c764:	4817      	ldr	r0, [pc, #92]	@ (800c7c4 <lt8722_dac_to_voltage+0x80>)
 800c766:	fba4 2300 	umull	r2, r3, r4, r0
 800c76a:	4419      	add	r1, r3
 800c76c:	460b      	mov	r3, r1
 800c76e:	4610      	mov	r0, r2
 800c770:	4619      	mov	r1, r3
 800c772:	2900      	cmp	r1, #0
 800c774:	da08      	bge.n	800c788 <lt8722_dac_to_voltage+0x44>
 800c776:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c77a:	18c3      	adds	r3, r0, r3
 800c77c:	603b      	str	r3, [r7, #0]
 800c77e:	f141 0300 	adc.w	r3, r1, #0
 800c782:	607b      	str	r3, [r7, #4]
 800c784:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c788:	f04f 0200 	mov.w	r2, #0
 800c78c:	f04f 0300 	mov.w	r3, #0
 800c790:	0e42      	lsrs	r2, r0, #25
 800c792:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800c796:	164b      	asrs	r3, r1, #25
 800c798:	2100      	movs	r1, #0
 800c79a:	f1d2 0a00 	rsbs	sl, r2, #0
 800c79e:	eb61 0b03 	sbc.w	fp, r1, r3
 800c7a2:	4652      	mov	r2, sl
 800c7a4:	465b      	mov	r3, fp
 800c7a6:	4908      	ldr	r1, [pc, #32]	@ (800c7c8 <lt8722_dac_to_voltage+0x84>)
 800c7a8:	eb12 0801 	adds.w	r8, r2, r1
 800c7ac:	f143 0900 	adc.w	r9, r3, #0
 800c7b0:	4642      	mov	r2, r8
 800c7b2:	464b      	mov	r3, r9
}
 800c7b4:	4610      	mov	r0, r2
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	9502f900 	.word	0x9502f900
 800c7c8:	4a817c80 	.word	0x4a817c80

0800c7cc <lt8722_transaction>:
 * @param dev - LT8722 device descriptor
 * @param packet - LT8722 packet.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_transaction(uint8_t channel, struct lt8722_packet *packet)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b086      	sub	sp, #24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	6039      	str	r1, [r7, #0]
 800c7d6:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8] = {0};
 800c7d8:	f107 030c 	add.w	r3, r7, #12
 800c7dc:	2200      	movs	r2, #0
 800c7de:	601a      	str	r2, [r3, #0]
 800c7e0:	605a      	str	r2, [r3, #4]
	buffer[0] = packet->command.byte;
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	733b      	strb	r3, [r7, #12]
	buffer[1] = packet->reg.address << 1;
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	791b      	ldrb	r3, [r3, #4]
 800c7ec:	005b      	lsls	r3, r3, #1
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	737b      	strb	r3, [r7, #13]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	2bf2      	cmp	r3, #242	@ 0xf2
 800c7f8:	d111      	bne.n	800c81e <lt8722_transaction+0x52>
	{
		put_unaligned_be32(packet->data, &buffer[2]);
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	691a      	ldr	r2, [r3, #16]
 800c7fe:	f107 030c 	add.w	r3, r7, #12
 800c802:	3302      	adds	r3, #2
 800c804:	4619      	mov	r1, r3
 800c806:	4610      	mov	r0, r2
 800c808:	f000 faea 	bl	800cde0 <put_unaligned_be32>
		buffer[6] = Calculate_CRC8(buffer, 6);
 800c80c:	f107 030c 	add.w	r3, r7, #12
 800c810:	2106      	movs	r1, #6
 800c812:	4618      	mov	r0, r3
 800c814:	f000 faa8 	bl	800cd68 <Calculate_CRC8>
 800c818:	4603      	mov	r3, r0
 800c81a:	74bb      	strb	r3, [r7, #18]
 800c81c:	e007      	b.n	800c82e <lt8722_transaction+0x62>
	} else
		buffer[2] = Calculate_CRC8(buffer, 2);
 800c81e:	f107 030c 	add.w	r3, r7, #12
 800c822:	2102      	movs	r1, #2
 800c824:	4618      	mov	r0, r3
 800c826:	f000 fa9f 	bl	800cd68 <Calculate_CRC8>
 800c82a:	4603      	mov	r3, r0
 800c82c:	73bb      	strb	r3, [r7, #14]
	SPI_write_and_read_buffer(channel, buffer, packet->command.size);
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	785a      	ldrb	r2, [r3, #1]
 800c832:	f107 010c 	add.w	r1, r7, #12
 800c836:	79fb      	ldrb	r3, [r7, #7]
 800c838:	4618      	mov	r0, r3
 800c83a:	f7ff ff2d 	bl	800c698 <SPI_write_and_read_buffer>
	packet->status = (get_unaligned_be16(&buffer[0]) & GENMASK(10, 0));
 800c83e:	f107 030c 	add.w	r3, r7, #12
 800c842:	4618      	mov	r0, r3
 800c844:	f000 fb0a 	bl	800ce5c <get_unaligned_be16>
 800c848:	4603      	mov	r3, r0
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	f04f 33ff 	mov.w	r3, #4294967295
 800c850:	617b      	str	r3, [r7, #20]
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	055b      	lsls	r3, r3, #21
 800c856:	617b      	str	r3, [r7, #20]
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	0d5b      	lsrs	r3, r3, #21
 800c85c:	617b      	str	r3, [r7, #20]
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	b29b      	uxth	r3, r3
 800c862:	4013      	ands	r3, r2
 800c864:	b29a      	uxth	r2, r3
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	82da      	strh	r2, [r3, #22]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	2bf2      	cmp	r3, #242	@ 0xf2
 800c870:	d106      	bne.n	800c880 <lt8722_transaction+0xb4>
	{
		packet->crc = buffer[2];
 800c872:	7bba      	ldrb	r2, [r7, #14]
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 800c878:	7cfa      	ldrb	r2, [r7, #19]
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	755a      	strb	r2, [r3, #21]
 800c87e:	e019      	b.n	800c8b4 <lt8722_transaction+0xe8>
	} else if (packet->command.byte == LT8722_DATA_READ_COMMAND) {
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	2bf4      	cmp	r3, #244	@ 0xf4
 800c886:	d10f      	bne.n	800c8a8 <lt8722_transaction+0xdc>
		packet->data = get_unaligned_be32(&buffer[2]);
 800c888:	f107 030c 	add.w	r3, r7, #12
 800c88c:	3302      	adds	r3, #2
 800c88e:	4618      	mov	r0, r3
 800c890:	f000 fac7 	bl	800ce22 <get_unaligned_be32>
 800c894:	4602      	mov	r2, r0
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	611a      	str	r2, [r3, #16]
		packet->crc = buffer[6];
 800c89a:	7cba      	ldrb	r2, [r7, #18]
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 800c8a0:	7cfa      	ldrb	r2, [r7, #19]
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	755a      	strb	r2, [r3, #21]
 800c8a6:	e005      	b.n	800c8b4 <lt8722_transaction+0xe8>
	} else {
		packet->crc = buffer[2];
 800c8a8:	7bba      	ldrb	r2, [r7, #14]
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[3];
 800c8ae:	7bfa      	ldrb	r2, [r7, #15]
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	755a      	strb	r2, [r3, #21]
	}
	if (packet->ack != LT8722_ACK_ACKNOWLEDGE)
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	7d5b      	ldrb	r3, [r3, #21]
 800c8b8:	2ba5      	cmp	r3, #165	@ 0xa5
 800c8ba:	d002      	beq.n	800c8c2 <lt8722_transaction+0xf6>
		return -1;
 800c8bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c0:	e000      	b.n	800c8c4 <lt8722_transaction+0xf8>
	return 0;
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <lt8722_reg_read>:
 * @param address - Register address.
 * @param data - Received data.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_read(uint8_t channel, uint8_t address, uint32_t *data)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b08a      	sub	sp, #40	@ 0x28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	603a      	str	r2, [r7, #0]
 800c8d6:	71fb      	strb	r3, [r7, #7]
 800c8d8:	460b      	mov	r3, r1
 800c8da:	71bb      	strb	r3, [r7, #6]
	int8_t ret = 0;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	struct lt8722_packet packet;
	struct lt8722_command command = {
 800c8e2:	4b15      	ldr	r3, [pc, #84]	@ (800c938 <lt8722_reg_read+0x6c>)
 800c8e4:	881b      	ldrh	r3, [r3, #0]
 800c8e6:	813b      	strh	r3, [r7, #8]
		LT8722_DATA_READ_COMMAND,
		LT8722_DATA_READ_COMMAND_SIZE
	};
	packet.command = command;
 800c8e8:	893b      	ldrh	r3, [r7, #8]
 800c8ea:	81bb      	strh	r3, [r7, #12]
	packet.reg = lt8722_regs[address];
 800c8ec:	79ba      	ldrb	r2, [r7, #6]
 800c8ee:	4913      	ldr	r1, [pc, #76]	@ (800c93c <lt8722_reg_read+0x70>)
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	005b      	lsls	r3, r3, #1
 800c8f4:	4413      	add	r3, r2
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	18ca      	adds	r2, r1, r3
 800c8fa:	f107 0310 	add.w	r3, r7, #16
 800c8fe:	ca07      	ldmia	r2, {r0, r1, r2}
 800c900:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ret = lt8722_transaction(channel, &packet);
 800c904:	f107 020c 	add.w	r2, r7, #12
 800c908:	79fb      	ldrb	r3, [r7, #7]
 800c90a:	4611      	mov	r1, r2
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7ff ff5d 	bl	800c7cc <lt8722_transaction>
 800c912:	4603      	mov	r3, r0
 800c914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (ret)
 800c918:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d002      	beq.n	800c926 <lt8722_reg_read+0x5a>
		return ret;
 800c920:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c924:	e003      	b.n	800c92e <lt8722_reg_read+0x62>
	*data = packet.data;
 800c926:	69fa      	ldr	r2, [r7, #28]
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	601a      	str	r2, [r3, #0]
	return 0;
 800c92c:	2300      	movs	r3, #0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3728      	adds	r7, #40	@ 0x28
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	08015174 	.word	0x08015174
 800c93c:	20000254 	.word	0x20000254

0800c940 <lt8722_reg_write>:
 * @param address - Register address.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write(uint8_t channel, uint8_t address, uint32_t data)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b08a      	sub	sp, #40	@ 0x28
 800c944:	af00      	add	r7, sp, #0
 800c946:	4603      	mov	r3, r0
 800c948:	603a      	str	r2, [r7, #0]
 800c94a:	71fb      	strb	r3, [r7, #7]
 800c94c:	460b      	mov	r3, r1
 800c94e:	71bb      	strb	r3, [r7, #6]
	struct lt8722_packet packet;
	struct lt8722_command command = {
 800c950:	4b0f      	ldr	r3, [pc, #60]	@ (800c990 <lt8722_reg_write+0x50>)
 800c952:	881b      	ldrh	r3, [r3, #0]
 800c954:	81bb      	strh	r3, [r7, #12]
		LT8722_DATA_WRITE_COMMAND,
		LT8722_DATA_WRITE_COMMAND_SIZE
	};
	packet.command = command;
 800c956:	89bb      	ldrh	r3, [r7, #12]
 800c958:	823b      	strh	r3, [r7, #16]
	packet.reg = lt8722_regs[address];
 800c95a:	79ba      	ldrb	r2, [r7, #6]
 800c95c:	490d      	ldr	r1, [pc, #52]	@ (800c994 <lt8722_reg_write+0x54>)
 800c95e:	4613      	mov	r3, r2
 800c960:	005b      	lsls	r3, r3, #1
 800c962:	4413      	add	r3, r2
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	18ca      	adds	r2, r1, r3
 800c968:	f107 0314 	add.w	r3, r7, #20
 800c96c:	ca07      	ldmia	r2, {r0, r1, r2}
 800c96e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	packet.data = data;
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	623b      	str	r3, [r7, #32]
	return lt8722_transaction(channel, &packet);
 800c976:	f107 0210 	add.w	r2, r7, #16
 800c97a:	79fb      	ldrb	r3, [r7, #7]
 800c97c:	4611      	mov	r1, r2
 800c97e:	4618      	mov	r0, r3
 800c980:	f7ff ff24 	bl	800c7cc <lt8722_transaction>
 800c984:	4603      	mov	r3, r0
}
 800c986:	4618      	mov	r0, r3
 800c988:	3728      	adds	r7, #40	@ 0x28
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	08015178 	.word	0x08015178
 800c994:	20000254 	.word	0x20000254

0800c998 <lt8722_reg_write_mask>:
 * @param mask - Mask to be applied.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write_mask(uint8_t channel, uint8_t address, uint32_t mask, uint32_t data)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60ba      	str	r2, [r7, #8]
 800c9a0:	607b      	str	r3, [r7, #4]
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	73fb      	strb	r3, [r7, #15]
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	73bb      	strb	r3, [r7, #14]
	uint32_t reg_data;
	lt8722_reg_read(channel, address, &reg_data);
 800c9aa:	f107 0214 	add.w	r2, r7, #20
 800c9ae:	7bb9      	ldrb	r1, [r7, #14]
 800c9b0:	7bfb      	ldrb	r3, [r7, #15]
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7ff ff8a 	bl	800c8cc <lt8722_reg_read>
	reg_data &= ~mask;
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	43da      	mvns	r2, r3
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	4013      	ands	r3, r2
 800c9c0:	617b      	str	r3, [r7, #20]
	reg_data |= field_prep(mask, data);
 800c9c2:	6879      	ldr	r1, [r7, #4]
 800c9c4:	68b8      	ldr	r0, [r7, #8]
 800c9c6:	f000 fa79 	bl	800cebc <field_prep>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	617b      	str	r3, [r7, #20]
	return lt8722_reg_write(channel, address, reg_data);
 800c9d2:	697a      	ldr	r2, [r7, #20]
 800c9d4:	7bb9      	ldrb	r1, [r7, #14]
 800c9d6:	7bfb      	ldrb	r3, [r7, #15]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7ff ffb1 	bl	800c940 <lt8722_reg_write>
 800c9de:	4603      	mov	r3, r0
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3718      	adds	r7, #24
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <lt8722_set_enable_req>:
 * @brief Set ENABLE_REQ field in LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_enable_req(uint8_t channel, bool value)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	460a      	mov	r2, r1
 800c9f2:	71fb      	strb	r3, [r7, #7]
 800c9f4:	4613      	mov	r3, r2
 800c9f6:	71bb      	strb	r3, [r7, #6]
	return lt8722_reg_write_mask(channel, LT8722_SPIS_COMMAND, LT8722_ENABLE_REQ_MASK, value);
 800c9f8:	79bb      	ldrb	r3, [r7, #6]
 800c9fa:	79f8      	ldrb	r0, [r7, #7]
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	2100      	movs	r1, #0
 800ca00:	f7ff ffca 	bl	800c998 <lt8722_reg_write_mask>
 800ca04:	4603      	mov	r3, r0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3708      	adds	r7, #8
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <lt8722_set_swen_req>:
 * @brief Set switching enable of LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_swen_req(uint8_t channel, bool value)
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b082      	sub	sp, #8
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	4603      	mov	r3, r0
 800ca16:	460a      	mov	r2, r1
 800ca18:	71fb      	strb	r3, [r7, #7]
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	71bb      	strb	r3, [r7, #6]
	return lt8722_reg_write_mask(channel, LT8722_SPIS_COMMAND, LT8722_SWEN_REQ_MASK, value);
 800ca1e:	79bb      	ldrb	r3, [r7, #6]
 800ca20:	79f8      	ldrb	r0, [r7, #7]
 800ca22:	2202      	movs	r2, #2
 800ca24:	2100      	movs	r1, #0
 800ca26:	f7ff ffb7 	bl	800c998 <lt8722_reg_write_mask>
 800ca2a:	4603      	mov	r3, r0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3708      	adds	r7, #8
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <lt8722_reset>:
/**
 * @brief Shutdown the LT8722 device.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reset(uint8_t channel)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(channel, LT8722_SPIS_COMMAND, LT8722_SPI_RST_MASK, LT8722_SPI_RST_RESET);
 800ca3e:	79f8      	ldrb	r0, [r7, #7]
 800ca40:	2301      	movs	r3, #1
 800ca42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800ca46:	2100      	movs	r1, #0
 800ca48:	f7ff ffa6 	bl	800c998 <lt8722_reg_write_mask>
 800ca4c:	4603      	mov	r3, r0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3708      	adds	r7, #8
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <lt8722_clear_faults>:
/**
 * @brief Clear LT8722 device faults.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_clear_faults(uint8_t channel)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b084      	sub	sp, #16
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(channel, LT8722_SPIS_STATUS, LT8722_FAULTS_MASK, 0);
 800ca60:	f04f 33ff 	mov.w	r3, #4294967295
 800ca64:	60fb      	str	r3, [r7, #12]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	069b      	lsls	r3, r3, #26
 800ca6a:	60fb      	str	r3, [r7, #12]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	0d5b      	lsrs	r3, r3, #21
 800ca70:	60fb      	str	r3, [r7, #12]
 800ca72:	68fa      	ldr	r2, [r7, #12]
 800ca74:	79f8      	ldrb	r0, [r7, #7]
 800ca76:	2300      	movs	r3, #0
 800ca78:	2101      	movs	r1, #1
 800ca7a:	f7ff ff8d 	bl	800c998 <lt8722_reg_write_mask>
 800ca7e:	4603      	mov	r3, r0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <lt8722_set_dac>:
 * @brief Set DAC code of LT8722 device.
 * @param value - DAC value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_dac(uint8_t channel, uint32_t value)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	4603      	mov	r3, r0
 800ca90:	6039      	str	r1, [r7, #0]
 800ca92:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(channel, LT8722_SPIS_DAC, LT8722_SPIS_DAC_MASK, value);
 800ca94:	f04f 33ff 	mov.w	r3, #4294967295
 800ca98:	60fb      	str	r3, [r7, #12]
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	79f8      	ldrb	r0, [r7, #7]
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	2104      	movs	r1, #4
 800caa2:	f7ff ff79 	bl	800c998 <lt8722_reg_write_mask>
 800caa6:	4603      	mov	r3, r0
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3710      	adds	r7, #16
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <lt8722_init>:
 * @param init_param - Initialization parameter containing information about the
 * 		LT8722 device to be initialized.
 * @return 0 in case of success, negative error code otherwise
*/
int8_t lt8722_init(uint8_t channel)
{
 800cab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab4:	b091      	sub	sp, #68	@ 0x44
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	4603      	mov	r3, r0
 800caba:	75fb      	strb	r3, [r7, #23]
	int8_t ret = 0;
 800cabc:	2300      	movs	r3, #0
 800cabe:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	int32_t dac;
	int64_t voltage;
	int64_t start_voltage;
	int64_t end_voltage;
	LL_GPIO_ResetOutputPin((GPIO_TypeDef*)en_port[channel], en_pin[channel]);
 800cac2:	7dfb      	ldrb	r3, [r7, #23]
 800cac4:	4a6b      	ldr	r2, [pc, #428]	@ (800cc74 <lt8722_init+0x1c4>)
 800cac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caca:	4618      	mov	r0, r3
 800cacc:	7dfb      	ldrb	r3, [r7, #23]
 800cace:	4a6a      	ldr	r2, [pc, #424]	@ (800cc78 <lt8722_init+0x1c8>)
 800cad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cad4:	4619      	mov	r1, r3
 800cad6:	f7ff fd80 	bl	800c5da <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin((GPIO_TypeDef*)swen_port[channel], swen_pin[channel]);
 800cada:	7dfb      	ldrb	r3, [r7, #23]
 800cadc:	4a67      	ldr	r2, [pc, #412]	@ (800cc7c <lt8722_init+0x1cc>)
 800cade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cae2:	4618      	mov	r0, r3
 800cae4:	7dfb      	ldrb	r3, [r7, #23]
 800cae6:	4a66      	ldr	r2, [pc, #408]	@ (800cc80 <lt8722_init+0x1d0>)
 800cae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caec:	4619      	mov	r1, r3
 800caee:	f7ff fd74 	bl	800c5da <LL_GPIO_ResetOutputPin>
//		LL_GPIO_ResetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
//		LL_GPIO_ResetOutputPin(TEC_1_SWEN_GPIO_Port, TEC_1_SWEN_Pin);
	/*
	 * Reset LT8722
	 */
	lt8722_reset(channel);
 800caf2:	7dfb      	ldrb	r3, [r7, #23]
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7ff ff9d 	bl	800ca34 <lt8722_reset>
	 * Start-up sequence
	 * 1. Apply proper VIN and VDDIO voltages
	 *
	 * 2. Enable VCC LDO and other LT8722 circuitry
	 */
	ret = lt8722_clear_faults(channel);
 800cafa:	7dfb      	ldrb	r3, [r7, #23]
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7ff ffaa 	bl	800ca56 <lt8722_clear_faults>
 800cb02:	4603      	mov	r3, r0
 800cb04:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	LL_GPIO_SetOutputPin((GPIO_TypeDef*)en_port[channel], en_pin[channel]);
 800cb08:	7dfb      	ldrb	r3, [r7, #23]
 800cb0a:	4a5a      	ldr	r2, [pc, #360]	@ (800cc74 <lt8722_init+0x1c4>)
 800cb0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb10:	4618      	mov	r0, r3
 800cb12:	7dfb      	ldrb	r3, [r7, #23]
 800cb14:	4a58      	ldr	r2, [pc, #352]	@ (800cc78 <lt8722_init+0x1c8>)
 800cb16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	f7ff fd4f 	bl	800c5be <LL_GPIO_SetOutputPin>

	ret = lt8722_set_enable_req(channel, LT8722_ENABLE_REQ_ENABLED);
 800cb20:	7dfb      	ldrb	r3, [r7, #23]
 800cb22:	2101      	movs	r1, #1
 800cb24:	4618      	mov	r0, r3
 800cb26:	f7ff ff5f 	bl	800c9e8 <lt8722_set_enable_req>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	ret = lt8722_reg_write(channel, LT8722_SPIS_COMMAND, 0x00003A01);
 800cb30:	7dfb      	ldrb	r3, [r7, #23]
 800cb32:	f643 2201 	movw	r2, #14849	@ 0x3a01
 800cb36:	2100      	movs	r1, #0
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7ff ff01 	bl	800c940 <lt8722_reg_write>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 3. Configure output voltage control DAC to 0xFF000000
	 */
	ret = lt8722_set_dac(channel, 0xFF000000);
 800cb44:	7dfb      	ldrb	r3, [r7, #23]
 800cb46:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7ff ff9c 	bl	800ca88 <lt8722_set_dac>
 800cb50:	4603      	mov	r3, r0
 800cb52:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 4. Write all SPIS_STATUS registers to 0
	 */
	ret = lt8722_reg_write(channel, LT8722_SPIS_STATUS, 0);
 800cb56:	7dfb      	ldrb	r3, [r7, #23]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	2101      	movs	r1, #1
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7ff feef 	bl	800c940 <lt8722_reg_write>
 800cb62:	4603      	mov	r3, r0
 800cb64:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	LL_mDelay(1);
 800cb68:	2001      	movs	r0, #1
 800cb6a:	f005 fdb3 	bl	80126d4 <LL_mDelay>
	ret = lt8722_reg_write(channel, LT8722_SPIS_COMMAND, 0x00003A01);
 800cb6e:	7dfb      	ldrb	r3, [r7, #23]
 800cb70:	f643 2201 	movw	r2, #14849	@ 0x3a01
 800cb74:	2100      	movs	r1, #0
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7ff fee2 	bl	800c940 <lt8722_reg_write>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 5. Ramp the output voltage control DAC from 0xFF000000 to 0x00000000
	 */
	start_voltage = lt8722_dac_to_voltage(0xFF000000);
 800cb82:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800cb86:	f7ff fddd 	bl	800c744 <lt8722_dac_to_voltage>
 800cb8a:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
	end_voltage = lt8722_dac_to_voltage(0x00000000);
 800cb8e:	2000      	movs	r0, #0
 800cb90:	f7ff fdd8 	bl	800c744 <lt8722_dac_to_voltage>
 800cb94:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	for (uint8_t i = 0;  i < 5; i++)
 800cb98:	2300      	movs	r3, #0
 800cb9a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cb9e:	e047      	b.n	800cc30 <lt8722_init+0x180>
	{
		voltage = (start_voltage + (end_voltage - start_voltage) * i / 4);
 800cba0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800cba4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800cba8:	1a84      	subs	r4, r0, r2
 800cbaa:	eb61 0503 	sbc.w	r5, r1, r3
 800cbae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	4698      	mov	r8, r3
 800cbb6:	4691      	mov	r9, r2
 800cbb8:	fb08 f205 	mul.w	r2, r8, r5
 800cbbc:	fb04 f309 	mul.w	r3, r4, r9
 800cbc0:	4413      	add	r3, r2
 800cbc2:	fba4 ab08 	umull	sl, fp, r4, r8
 800cbc6:	445b      	add	r3, fp
 800cbc8:	469b      	mov	fp, r3
 800cbca:	4652      	mov	r2, sl
 800cbcc:	465b      	mov	r3, fp
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	da06      	bge.n	800cbe0 <lt8722_init+0x130>
 800cbd2:	1cd1      	adds	r1, r2, #3
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	f143 0300 	adc.w	r3, r3, #0
 800cbda:	60fb      	str	r3, [r7, #12]
 800cbdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cbe0:	f04f 0000 	mov.w	r0, #0
 800cbe4:	f04f 0100 	mov.w	r1, #0
 800cbe8:	0890      	lsrs	r0, r2, #2
 800cbea:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800cbee:	1099      	asrs	r1, r3, #2
 800cbf0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800cbf4:	1816      	adds	r6, r2, r0
 800cbf6:	603e      	str	r6, [r7, #0]
 800cbf8:	414b      	adcs	r3, r1
 800cbfa:	607b      	str	r3, [r7, #4]
 800cbfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc00:	e9c7 2308 	strd	r2, r3, [r7, #32]
		dac = lt8722_voltage_to_dac(voltage);
 800cc04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cc08:	f7ff fd76 	bl	800c6f8 <lt8722_voltage_to_dac>
 800cc0c:	61f8      	str	r0, [r7, #28]
		ret = lt8722_set_dac(channel, dac);
 800cc0e:	69fa      	ldr	r2, [r7, #28]
 800cc10:	7dfb      	ldrb	r3, [r7, #23]
 800cc12:	4611      	mov	r1, r2
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7ff ff37 	bl	800ca88 <lt8722_set_dac>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		LL_mDelay(1);
 800cc20:	2001      	movs	r0, #1
 800cc22:	f005 fd57 	bl	80126d4 <LL_mDelay>
	for (uint8_t i = 0;  i < 5; i++)
 800cc26:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cc30:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cc34:	2b04      	cmp	r3, #4
 800cc36:	d9b3      	bls.n	800cba0 <lt8722_init+0xf0>
	}
	/*
	 * 6. Enable the PWM switching behavior
	 */
	LL_GPIO_SetOutputPin((GPIO_TypeDef*)swen_port[channel], swen_pin[channel]);
 800cc38:	7dfb      	ldrb	r3, [r7, #23]
 800cc3a:	4a10      	ldr	r2, [pc, #64]	@ (800cc7c <lt8722_init+0x1cc>)
 800cc3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc40:	4618      	mov	r0, r3
 800cc42:	7dfb      	ldrb	r3, [r7, #23]
 800cc44:	4a0e      	ldr	r2, [pc, #56]	@ (800cc80 <lt8722_init+0x1d0>)
 800cc46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	f7ff fcb7 	bl	800c5be <LL_GPIO_SetOutputPin>
	ret = lt8722_set_swen_req(channel, LT8722_SWEN_REQ_ENABLED);
 800cc50:	7dfb      	ldrb	r3, [r7, #23]
 800cc52:	2101      	movs	r1, #1
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7ff feda 	bl	800ca0e <lt8722_set_swen_req>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	delay_us(200);
 800cc60:	20c8      	movs	r0, #200	@ 0xc8
 800cc62:	f7fb fd17 	bl	8008694 <delay_us>
//
//		delay_us(255);
//		delay_us(255);
//
//		ret = lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
	return ret;
 800cc66:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3744      	adds	r7, #68	@ 0x44
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc74:	200002d4 	.word	0x200002d4
 800cc78:	200002e4 	.word	0x200002e4
 800cc7c:	200002f4 	.word	0x200002f4
 800cc80:	20000304 	.word	0x20000304

0800cc84 <lt8722_set_output_voltage_channel>:
 * @param channel - Channel of lt8722.
 * @param value - Output voltage value in nanovolts.
 * @return 0 in case of success, negative error code otherwise
 */
int8_t lt8722_set_output_voltage_channel(uint8_t channel, tec_dir_t dir, int64_t value)
{
 800cc84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc88:	b08c      	sub	sp, #48	@ 0x30
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800cc90:	4603      	mov	r3, r0
 800cc92:	77fb      	strb	r3, [r7, #31]
 800cc94:	460b      	mov	r3, r1
 800cc96:	77bb      	strb	r3, [r7, #30]
	uint8_t ret = 0;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int64_t vdac = 0;
 800cc9e:	f04f 0200 	mov.w	r2, #0
 800cca2:	f04f 0300 	mov.w	r3, #0
 800cca6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	int32_t dac = 0x0;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	623b      	str	r3, [r7, #32]
	if (dir == TEC_COOL)
 800ccae:	7fbb      	ldrb	r3, [r7, #30]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d124      	bne.n	800ccfe <lt8722_set_output_voltage_channel+0x7a>
		vdac = LT8722_DAC_OFFSET - value / 16;
 800ccb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ccb8:	4610      	mov	r0, r2
 800ccba:	4619      	mov	r1, r3
 800ccbc:	2900      	cmp	r1, #0
 800ccbe:	da07      	bge.n	800ccd0 <lt8722_set_output_voltage_channel+0x4c>
 800ccc0:	f110 030f 	adds.w	r3, r0, #15
 800ccc4:	60bb      	str	r3, [r7, #8]
 800ccc6:	f141 0300 	adc.w	r3, r1, #0
 800ccca:	60fb      	str	r3, [r7, #12]
 800cccc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ccd0:	f04f 0200 	mov.w	r2, #0
 800ccd4:	f04f 0300 	mov.w	r3, #0
 800ccd8:	0902      	lsrs	r2, r0, #4
 800ccda:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800ccde:	110b      	asrs	r3, r1, #4
 800cce0:	2100      	movs	r1, #0
 800cce2:	4250      	negs	r0, r2
 800cce4:	6038      	str	r0, [r7, #0]
 800cce6:	eb61 0303 	sbc.w	r3, r1, r3
 800ccea:	607b      	str	r3, [r7, #4]
 800ccec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccf0:	491c      	ldr	r1, [pc, #112]	@ (800cd64 <lt8722_set_output_voltage_channel+0xe0>)
 800ccf2:	eb12 0801 	adds.w	r8, r2, r1
 800ccf6:	f143 0900 	adc.w	r9, r3, #0
 800ccfa:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
	if (dir == TEC_HEAT)
 800ccfe:	7fbb      	ldrb	r3, [r7, #30]
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d119      	bne.n	800cd38 <lt8722_set_output_voltage_channel+0xb4>
		vdac = LT8722_DAC_OFFSET + value / 16;
 800cd04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	da05      	bge.n	800cd18 <lt8722_set_output_voltage_channel+0x94>
 800cd0c:	f112 0a0f 	adds.w	sl, r2, #15
 800cd10:	f143 0b00 	adc.w	fp, r3, #0
 800cd14:	4652      	mov	r2, sl
 800cd16:	465b      	mov	r3, fp
 800cd18:	f04f 0000 	mov.w	r0, #0
 800cd1c:	f04f 0100 	mov.w	r1, #0
 800cd20:	0910      	lsrs	r0, r2, #4
 800cd22:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800cd26:	1119      	asrs	r1, r3, #4
 800cd28:	4602      	mov	r2, r0
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	490d      	ldr	r1, [pc, #52]	@ (800cd64 <lt8722_set_output_voltage_channel+0xe0>)
 800cd2e:	1854      	adds	r4, r2, r1
 800cd30:	f143 0500 	adc.w	r5, r3, #0
 800cd34:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
	dac = lt8722_voltage_to_dac(vdac);
 800cd38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800cd3c:	f7ff fcdc 	bl	800c6f8 <lt8722_voltage_to_dac>
 800cd40:	6238      	str	r0, [r7, #32]
	ret = lt8722_set_dac(channel, dac);
 800cd42:	6a3a      	ldr	r2, [r7, #32]
 800cd44:	7ffb      	ldrb	r3, [r7, #31]
 800cd46:	4611      	mov	r1, r2
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7ff fe9d 	bl	800ca88 <lt8722_set_dac>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	return ret;
 800cd54:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3730      	adds	r7, #48	@ 0x30
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd62:	bf00      	nop
 800cd64:	4a817c80 	.word	0x4a817c80

0800cd68 <Calculate_CRC8>:

/* Private support function definition ------------------------------------*/
uint8_t Calculate_CRC8(uint8_t *data, uint8_t length)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	460b      	mov	r3, r1
 800cd72:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00;
 800cd74:	2300      	movs	r3, #0
 800cd76:	73fb      	strb	r3, [r7, #15]
    uint8_t poly = 0x07;
 800cd78:	2307      	movs	r3, #7
 800cd7a:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < length; i++)
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	73bb      	strb	r3, [r7, #14]
 800cd80:	e023      	b.n	800cdca <Calculate_CRC8+0x62>
    {
        crc ^= data[i];
 800cd82:	7bbb      	ldrb	r3, [r7, #14]
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	4413      	add	r3, r2
 800cd88:	781a      	ldrb	r2, [r3, #0]
 800cd8a:	7bfb      	ldrb	r3, [r7, #15]
 800cd8c:	4053      	eors	r3, r2
 800cd8e:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 800cd90:	2300      	movs	r3, #0
 800cd92:	737b      	strb	r3, [r7, #13]
 800cd94:	e013      	b.n	800cdbe <Calculate_CRC8+0x56>
        {
            if (crc & 0x80)
 800cd96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	da09      	bge.n	800cdb2 <Calculate_CRC8+0x4a>
                crc = (crc << 1) ^ poly;
 800cd9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cda2:	005b      	lsls	r3, r3, #1
 800cda4:	b25a      	sxtb	r2, r3
 800cda6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800cdaa:	4053      	eors	r3, r2
 800cdac:	b25b      	sxtb	r3, r3
 800cdae:	73fb      	strb	r3, [r7, #15]
 800cdb0:	e002      	b.n	800cdb8 <Calculate_CRC8+0x50>
            else
                crc <<= 1;
 800cdb2:	7bfb      	ldrb	r3, [r7, #15]
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 800cdb8:	7b7b      	ldrb	r3, [r7, #13]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	737b      	strb	r3, [r7, #13]
 800cdbe:	7b7b      	ldrb	r3, [r7, #13]
 800cdc0:	2b07      	cmp	r3, #7
 800cdc2:	d9e8      	bls.n	800cd96 <Calculate_CRC8+0x2e>
    for (uint8_t i = 0; i < length; i++)
 800cdc4:	7bbb      	ldrb	r3, [r7, #14]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	73bb      	strb	r3, [r7, #14]
 800cdca:	7bba      	ldrb	r2, [r7, #14]
 800cdcc:	78fb      	ldrb	r3, [r7, #3]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d3d7      	bcc.n	800cd82 <Calculate_CRC8+0x1a>
        }
    }
    return crc;
 800cdd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3714      	adds	r7, #20
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr

0800cde0 <put_unaligned_be32>:

void put_unaligned_be32(uint32_t val, uint8_t *buf)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b083      	sub	sp, #12
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
	buf[3] = val & 0xFF;
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	3303      	adds	r3, #3
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	b2d2      	uxtb	r2, r2
 800cdf2:	701a      	strb	r2, [r3, #0]
	buf[2] = (val >> 8) & 0xFF;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	0a1a      	lsrs	r2, r3, #8
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	3302      	adds	r3, #2
 800cdfc:	b2d2      	uxtb	r2, r2
 800cdfe:	701a      	strb	r2, [r3, #0]
	buf[1] = (val >> 16) & 0xFF;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	0c1a      	lsrs	r2, r3, #16
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	3301      	adds	r3, #1
 800ce08:	b2d2      	uxtb	r2, r2
 800ce0a:	701a      	strb	r2, [r3, #0]
	buf[0] = val >> 24;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	0e1b      	lsrs	r3, r3, #24
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	701a      	strb	r2, [r3, #0]
}
 800ce16:	bf00      	nop
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <get_unaligned_be32>:
{
	buf[1] = val & 0xFF;
	buf[0] = val >> 8;
}
uint32_t get_unaligned_be32(uint8_t *buf)
{
 800ce22:	b480      	push	{r7}
 800ce24:	b083      	sub	sp, #12
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
	return buf[3] | ((uint16_t)buf[2] << 8) | ((uint32_t)buf[1] << 16) | ((uint32_t)buf[0] << 24);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	3303      	adds	r3, #3
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	461a      	mov	r2, r3
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	3302      	adds	r3, #2
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	021b      	lsls	r3, r3, #8
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	3301      	adds	r3, #1
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	041b      	lsls	r3, r3, #16
 800ce46:	431a      	orrs	r2, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	061b      	lsls	r3, r3, #24
 800ce4e:	4313      	orrs	r3, r2
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	370c      	adds	r7, #12
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr

0800ce5c <get_unaligned_be16>:
uint32_t get_unaligned_be16(uint8_t *buf)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
	return buf[1] | ((uint16_t)buf[0] << 8);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	3301      	adds	r3, #1
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	021b      	lsls	r3, r3, #8
 800ce72:	4313      	orrs	r3, r2
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	370c      	adds	r7, #12
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr

0800ce80 <find_first_set_bit>:
uint32_t find_first_set_bit(uint32_t word)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b085      	sub	sp, #20
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
	uint32_t first_set_bit = 0;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	60fb      	str	r3, [r7, #12]
	while (word) {
 800ce8c:	e00c      	b.n	800cea8 <find_first_set_bit+0x28>
		if (word & 0x1)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f003 0301 	and.w	r3, r3, #1
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d001      	beq.n	800ce9c <find_first_set_bit+0x1c>
			return first_set_bit;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	e009      	b.n	800ceb0 <find_first_set_bit+0x30>
		word >>= 1;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	085b      	lsrs	r3, r3, #1
 800cea0:	607b      	str	r3, [r7, #4]
		first_set_bit ++;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	3301      	adds	r3, #1
 800cea6:	60fb      	str	r3, [r7, #12]
	while (word) {
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d1ef      	bne.n	800ce8e <find_first_set_bit+0xe>
	}
	return 32;
 800ceae:	2320      	movs	r3, #32
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <field_prep>:
uint32_t field_prep(uint32_t mask, uint32_t val)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
	return (val << find_first_set_bit(mask)) & mask;
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7ff ffda 	bl	800ce80 <find_first_set_bit>
 800cecc:	4602      	mov	r2, r0
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	fa03 f202 	lsl.w	r2, r3, r2
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	4013      	ands	r3, r2
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3708      	adds	r7, #8
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	689b      	ldr	r3, [r3, #8]
 800ceec:	f043 0201 	orr.w	r2, r3, #1
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	609a      	str	r2, [r3, #8]
}
 800cef4:	bf00      	nop
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	689b      	ldr	r3, [r3, #8]
 800cf0c:	f003 0301 	and.w	r3, r3, #1
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	bf0c      	ite	eq
 800cf14:	2301      	moveq	r3, #1
 800cf16:	2300      	movne	r3, #0
 800cf18:	b2db      	uxtb	r3, r3
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	370c      	adds	r7, #12
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr

0800cf26 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800cf26:	b480      	push	{r7}
 800cf28:	b083      	sub	sp, #12
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	609a      	str	r2, [r3, #8]
}
 800cf3a:	bf00      	nop
 800cf3c:	370c      	adds	r7, #12
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr
	...

0800cf48 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800cf52:	4a0c      	ldr	r2, [pc, #48]	@ (800cf84 <LL_DMA_EnableStream+0x3c>)
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	4413      	add	r3, r2
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	4413      	add	r3, r2
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	4908      	ldr	r1, [pc, #32]	@ (800cf84 <LL_DMA_EnableStream+0x3c>)
 800cf64:	683a      	ldr	r2, [r7, #0]
 800cf66:	440a      	add	r2, r1
 800cf68:	7812      	ldrb	r2, [r2, #0]
 800cf6a:	4611      	mov	r1, r2
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	440a      	add	r2, r1
 800cf70:	f043 0301 	orr.w	r3, r3, #1
 800cf74:	6013      	str	r3, [r2, #0]
}
 800cf76:	bf00      	nop
 800cf78:	370c      	adds	r7, #12
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	0801518c 	.word	0x0801518c

0800cf88 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b085      	sub	sp, #20
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800cf94:	4a0d      	ldr	r2, [pc, #52]	@ (800cfcc <LL_DMA_SetDataTransferDirection+0x44>)
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	4413      	add	r3, r2
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800cfa8:	4908      	ldr	r1, [pc, #32]	@ (800cfcc <LL_DMA_SetDataTransferDirection+0x44>)
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	440b      	add	r3, r1
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	440b      	add	r3, r1
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	600b      	str	r3, [r1, #0]
}
 800cfbe:	bf00      	nop
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop
 800cfcc:	0801518c 	.word	0x0801518c

0800cfd0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b085      	sub	sp, #20
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800cfdc:	4a0d      	ldr	r2, [pc, #52]	@ (800d014 <LL_DMA_SetMode+0x44>)
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	4413      	add	r3, r2
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 800cff0:	4908      	ldr	r1, [pc, #32]	@ (800d014 <LL_DMA_SetMode+0x44>)
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	440b      	add	r3, r1
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	4619      	mov	r1, r3
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	440b      	add	r3, r1
 800cffe:	4619      	mov	r1, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4313      	orrs	r3, r2
 800d004:	600b      	str	r3, [r1, #0]
}
 800d006:	bf00      	nop
 800d008:	3714      	adds	r7, #20
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr
 800d012:	bf00      	nop
 800d014:	0801518c 	.word	0x0801518c

0800d018 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 800d018:	b480      	push	{r7}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800d024:	4a0d      	ldr	r2, [pc, #52]	@ (800d05c <LL_DMA_SetPeriphIncMode+0x44>)
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	4413      	add	r3, r2
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	461a      	mov	r2, r3
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	4413      	add	r3, r2
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d038:	4908      	ldr	r1, [pc, #32]	@ (800d05c <LL_DMA_SetPeriphIncMode+0x44>)
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	440b      	add	r3, r1
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	4619      	mov	r1, r3
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	440b      	add	r3, r1
 800d046:	4619      	mov	r1, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	600b      	str	r3, [r1, #0]
}
 800d04e:	bf00      	nop
 800d050:	3714      	adds	r7, #20
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop
 800d05c:	0801518c 	.word	0x0801518c

0800d060 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 800d060:	b480      	push	{r7}
 800d062:	b085      	sub	sp, #20
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800d06c:	4a0d      	ldr	r2, [pc, #52]	@ (800d0a4 <LL_DMA_SetMemoryIncMode+0x44>)
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	4413      	add	r3, r2
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	461a      	mov	r2, r3
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	4413      	add	r3, r2
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d080:	4908      	ldr	r1, [pc, #32]	@ (800d0a4 <LL_DMA_SetMemoryIncMode+0x44>)
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	440b      	add	r3, r1
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	4619      	mov	r1, r3
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	440b      	add	r3, r1
 800d08e:	4619      	mov	r1, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4313      	orrs	r3, r2
 800d094:	600b      	str	r3, [r1, #0]
}
 800d096:	bf00      	nop
 800d098:	3714      	adds	r7, #20
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	0801518c 	.word	0x0801518c

0800d0a8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b085      	sub	sp, #20
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800d0b4:	4a0d      	ldr	r2, [pc, #52]	@ (800d0ec <LL_DMA_SetPeriphSize+0x44>)
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800d0c8:	4908      	ldr	r1, [pc, #32]	@ (800d0ec <LL_DMA_SetPeriphSize+0x44>)
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	440b      	add	r3, r1
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	440b      	add	r3, r1
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	600b      	str	r3, [r1, #0]
}
 800d0de:	bf00      	nop
 800d0e0:	3714      	adds	r7, #20
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	0801518c 	.word	0x0801518c

0800d0f0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b085      	sub	sp, #20
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800d0fc:	4a0d      	ldr	r2, [pc, #52]	@ (800d134 <LL_DMA_SetMemorySize+0x44>)
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	4413      	add	r3, r2
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	461a      	mov	r2, r3
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	4413      	add	r3, r2
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 800d110:	4908      	ldr	r1, [pc, #32]	@ (800d134 <LL_DMA_SetMemorySize+0x44>)
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	440b      	add	r3, r1
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	4619      	mov	r1, r3
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	440b      	add	r3, r1
 800d11e:	4619      	mov	r1, r3
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	4313      	orrs	r3, r2
 800d124:	600b      	str	r3, [r1, #0]
}
 800d126:	bf00      	nop
 800d128:	3714      	adds	r7, #20
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	0801518c 	.word	0x0801518c

0800d138 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 800d138:	b480      	push	{r7}
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800d144:	4a0d      	ldr	r2, [pc, #52]	@ (800d17c <LL_DMA_SetDataLength+0x44>)
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	4413      	add	r3, r2
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	461a      	mov	r2, r3
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	4413      	add	r3, r2
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	0c1b      	lsrs	r3, r3, #16
 800d156:	041b      	lsls	r3, r3, #16
 800d158:	4908      	ldr	r1, [pc, #32]	@ (800d17c <LL_DMA_SetDataLength+0x44>)
 800d15a:	68ba      	ldr	r2, [r7, #8]
 800d15c:	440a      	add	r2, r1
 800d15e:	7812      	ldrb	r2, [r2, #0]
 800d160:	4611      	mov	r1, r2
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	440a      	add	r2, r1
 800d166:	4611      	mov	r1, r2
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	4313      	orrs	r3, r2
 800d16c:	604b      	str	r3, [r1, #4]
}
 800d16e:	bf00      	nop
 800d170:	3714      	adds	r7, #20
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	0801518c 	.word	0x0801518c

0800d180 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 800d180:	b480      	push	{r7}
 800d182:	b085      	sub	sp, #20
 800d184:	af00      	add	r7, sp, #0
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800d18c:	4a0d      	ldr	r2, [pc, #52]	@ (800d1c4 <LL_DMA_SetChannelSelection+0x44>)
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	4413      	add	r3, r2
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	461a      	mov	r2, r3
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	4413      	add	r3, r2
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800d1a0:	4908      	ldr	r1, [pc, #32]	@ (800d1c4 <LL_DMA_SetChannelSelection+0x44>)
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	440b      	add	r3, r1
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	440b      	add	r3, r1
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	600b      	str	r3, [r1, #0]
}
 800d1b6:	bf00      	nop
 800d1b8:	3714      	adds	r7, #20
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	0801518c 	.word	0x0801518c

0800d1c8 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b085      	sub	sp, #20
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800d1d4:	4a07      	ldr	r2, [pc, #28]	@ (800d1f4 <LL_DMA_SetMemoryAddress+0x2c>)
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	4413      	add	r3, r2
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	461a      	mov	r2, r3
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	60d3      	str	r3, [r2, #12]
}
 800d1e8:	bf00      	nop
 800d1ea:	3714      	adds	r7, #20
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr
 800d1f4:	0801518c 	.word	0x0801518c

0800d1f8 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800d204:	4a07      	ldr	r2, [pc, #28]	@ (800d224 <LL_DMA_SetPeriphAddress+0x2c>)
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	4413      	add	r3, r2
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	461a      	mov	r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	4413      	add	r3, r2
 800d212:	461a      	mov	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6093      	str	r3, [r2, #8]
}
 800d218:	bf00      	nop
 800d21a:	3714      	adds	r7, #20
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr
 800d224:	0801518c 	.word	0x0801518c

0800d228 <NTC_DMA_ADC_Init>:
  3143, 3307, 3521, 3819, 4292, 5279, 6266
};


void NTC_DMA_ADC_Init(void)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	af00      	add	r7, sp, #0
    // Cấu hình DMA
    LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 800d22c:	2200      	movs	r2, #0
 800d22e:	2100      	movs	r1, #0
 800d230:	4823      	ldr	r0, [pc, #140]	@ (800d2c0 <NTC_DMA_ADC_Init+0x98>)
 800d232:	f7ff ffa5 	bl	800d180 <LL_DMA_SetChannelSelection>
    LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800d236:	2200      	movs	r2, #0
 800d238:	2100      	movs	r1, #0
 800d23a:	4821      	ldr	r0, [pc, #132]	@ (800d2c0 <NTC_DMA_ADC_Init+0x98>)
 800d23c:	f7ff fea4 	bl	800cf88 <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 800d240:	2200      	movs	r2, #0
 800d242:	2100      	movs	r1, #0
 800d244:	481e      	ldr	r0, [pc, #120]	@ (800d2c0 <NTC_DMA_ADC_Init+0x98>)
 800d246:	f7ff fee7 	bl	800d018 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 800d24a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d24e:	2100      	movs	r1, #0
 800d250:	481b      	ldr	r0, [pc, #108]	@ (800d2c0 <NTC_DMA_ADC_Init+0x98>)
 800d252:	f7ff ff05 	bl	800d060 <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 800d256:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d25a:	2100      	movs	r1, #0
 800d25c:	4818      	ldr	r0, [pc, #96]	@ (800d2c0 <NTC_DMA_ADC_Init+0x98>)
 800d25e:	f7ff ff23 	bl	800d0a8 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 800d262:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d266:	2100      	movs	r1, #0
 800d268:	4815      	ldr	r0, [pc, #84]	@ (800d2c0 <NTC_DMA_ADC_Init+0x98>)
 800d26a:	f7ff ff41 	bl	800d0f0 <LL_DMA_SetMemorySize>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_0, 8); // 8 kênh
 800d26e:	2208      	movs	r2, #8
 800d270:	2100      	movs	r1, #0
 800d272:	4813      	ldr	r0, [pc, #76]	@ (800d2c0 <NTC_DMA_ADC_Init+0x98>)
 800d274:	f7ff ff60 	bl	800d138 <LL_DMA_SetDataLength>

    // Địa chỉ của ADC data register
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_0, (uint32_t)&ADC1->DR);
 800d278:	4a12      	ldr	r2, [pc, #72]	@ (800d2c4 <NTC_DMA_ADC_Init+0x9c>)
 800d27a:	2100      	movs	r1, #0
 800d27c:	4810      	ldr	r0, [pc, #64]	@ (800d2c0 <NTC_DMA_ADC_Init+0x98>)
 800d27e:	f7ff ffbb 	bl	800d1f8 <LL_DMA_SetPeriphAddress>

    // Địa chỉ bộ nhớ DMA
    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_0, (uint32_t)NTC_ADC_value);
 800d282:	4b11      	ldr	r3, [pc, #68]	@ (800d2c8 <NTC_DMA_ADC_Init+0xa0>)
 800d284:	461a      	mov	r2, r3
 800d286:	2100      	movs	r1, #0
 800d288:	480d      	ldr	r0, [pc, #52]	@ (800d2c0 <NTC_DMA_ADC_Init+0x98>)
 800d28a:	f7ff ff9d 	bl	800d1c8 <LL_DMA_SetMemoryAddress>

    // Cấu hình DMA ở chế độ vòng lặp (Circular Mode)
    LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 800d28e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d292:	2100      	movs	r1, #0
 800d294:	480a      	ldr	r0, [pc, #40]	@ (800d2c0 <NTC_DMA_ADC_Init+0x98>)
 800d296:	f7ff fe9b 	bl	800cfd0 <LL_DMA_SetMode>

    // Bật DMA stream
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 800d29a:	2100      	movs	r1, #0
 800d29c:	4808      	ldr	r0, [pc, #32]	@ (800d2c0 <NTC_DMA_ADC_Init+0x98>)
 800d29e:	f7ff fe53 	bl	800cf48 <LL_DMA_EnableStream>

    // Bật ADC
    LL_ADC_Enable(ADC1);
 800d2a2:	480a      	ldr	r0, [pc, #40]	@ (800d2cc <NTC_DMA_ADC_Init+0xa4>)
 800d2a4:	f7ff fe1c 	bl	800cee0 <LL_ADC_Enable>
    while (!LL_ADC_IsEnabled(ADC1));
 800d2a8:	bf00      	nop
 800d2aa:	4808      	ldr	r0, [pc, #32]	@ (800d2cc <NTC_DMA_ADC_Init+0xa4>)
 800d2ac:	f7ff fe28 	bl	800cf00 <LL_ADC_IsEnabled>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d0f9      	beq.n	800d2aa <NTC_DMA_ADC_Init+0x82>

    // Bắt đầu chuyển đổi ADC
    LL_ADC_REG_StartConversionSWStart(ADC1);
 800d2b6:	4805      	ldr	r0, [pc, #20]	@ (800d2cc <NTC_DMA_ADC_Init+0xa4>)
 800d2b8:	f7ff fe35 	bl	800cf26 <LL_ADC_REG_StartConversionSWStart>
}
 800d2bc:	bf00      	nop
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	40026400 	.word	0x40026400
 800d2c4:	4001204c 	.word	0x4001204c
 800d2c8:	20003568 	.word	0x20003568
 800d2cc:	40012000 	.word	0x40012000

0800d2d0 <NTC_get_temperature>:

void NTC_get_temperature(int16_t* temp)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b085      	sub	sp, #20
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 8; i++)
 800d2d8:	2300      	movs	r3, #0
 800d2da:	73fb      	strb	r3, [r7, #15]
 800d2dc:	e028      	b.n	800d330 <NTC_get_temperature+0x60>
	{
		temp[i] = NTC_table[NTC_ADC_value[i]];
 800d2de:	7bfb      	ldrb	r3, [r7, #15]
 800d2e0:	4a18      	ldr	r2, [pc, #96]	@ (800d344 <NTC_get_temperature+0x74>)
 800d2e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ea:	005b      	lsls	r3, r3, #1
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	4a15      	ldr	r2, [pc, #84]	@ (800d348 <NTC_get_temperature+0x78>)
 800d2f2:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800d2f6:	801a      	strh	r2, [r3, #0]
		if (temp[i] < -500 || temp[i] > 2000)  temp[i] = 0x7FFF;
 800d2f8:	7bfb      	ldrb	r3, [r7, #15]
 800d2fa:	005b      	lsls	r3, r3, #1
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	4413      	add	r3, r2
 800d300:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d304:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 800d308:	db08      	blt.n	800d31c <NTC_get_temperature+0x4c>
 800d30a:	7bfb      	ldrb	r3, [r7, #15]
 800d30c:	005b      	lsls	r3, r3, #1
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	4413      	add	r3, r2
 800d312:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d316:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800d31a:	dd06      	ble.n	800d32a <NTC_get_temperature+0x5a>
 800d31c:	7bfb      	ldrb	r3, [r7, #15]
 800d31e:	005b      	lsls	r3, r3, #1
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	4413      	add	r3, r2
 800d324:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d328:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++)
 800d32a:	7bfb      	ldrb	r3, [r7, #15]
 800d32c:	3301      	adds	r3, #1
 800d32e:	73fb      	strb	r3, [r7, #15]
 800d330:	7bfb      	ldrb	r3, [r7, #15]
 800d332:	2b07      	cmp	r3, #7
 800d334:	d9d3      	bls.n	800d2de <NTC_get_temperature+0xe>
	}
};
 800d336:	bf00      	nop
 800d338:	bf00      	nop
 800d33a:	3714      	adds	r7, #20
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr
 800d344:	20003568 	.word	0x20003568
 800d348:	20000314 	.word	0x20000314

0800d34c <LL_SPI_IsEnabled>:
{
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d35c:	2b40      	cmp	r3, #64	@ 0x40
 800d35e:	d101      	bne.n	800d364 <LL_SPI_IsEnabled+0x18>
 800d360:	2301      	movs	r3, #1
 800d362:	e000      	b.n	800d366 <LL_SPI_IsEnabled+0x1a>
 800d364:	2300      	movs	r3, #0
}
 800d366:	4618      	mov	r0, r3
 800d368:	370c      	adds	r7, #12
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr

0800d372 <LL_SPI_IsActiveFlag_TXE>:
{
 800d372:	b480      	push	{r7}
 800d374:	b083      	sub	sp, #12
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	689b      	ldr	r3, [r3, #8]
 800d37e:	f003 0302 	and.w	r3, r3, #2
 800d382:	2b02      	cmp	r3, #2
 800d384:	d101      	bne.n	800d38a <LL_SPI_IsActiveFlag_TXE+0x18>
 800d386:	2301      	movs	r3, #1
 800d388:	e000      	b.n	800d38c <LL_SPI_IsActiveFlag_TXE+0x1a>
 800d38a:	2300      	movs	r3, #0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	370c      	adds	r7, #12
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <LL_SPI_IsActiveFlag_BSY>:
{
 800d398:	b480      	push	{r7}
 800d39a:	b083      	sub	sp, #12
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3a8:	2b80      	cmp	r3, #128	@ 0x80
 800d3aa:	d101      	bne.n	800d3b0 <LL_SPI_IsActiveFlag_BSY+0x18>
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	e000      	b.n	800d3b2 <LL_SPI_IsActiveFlag_BSY+0x1a>
 800d3b0:	2300      	movs	r3, #0
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	370c      	adds	r7, #12
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr

0800d3be <LL_SPI_TransmitData8>:
{
 800d3be:	b480      	push	{r7}
 800d3c0:	b085      	sub	sp, #20
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	330c      	adds	r3, #12
 800d3ce:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	78fa      	ldrb	r2, [r7, #3]
 800d3d4:	701a      	strb	r2, [r3, #0]
}
 800d3d6:	bf00      	nop
 800d3d8:	3714      	adds	r7, #20
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr

0800d3e2 <LL_GPIO_SetOutputPin>:
{
 800d3e2:	b480      	push	{r7}
 800d3e4:	b083      	sub	sp, #12
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
 800d3ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	683a      	ldr	r2, [r7, #0]
 800d3f0:	619a      	str	r2, [r3, #24]
}
 800d3f2:	bf00      	nop
 800d3f4:	370c      	adds	r7, #12
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr

0800d3fe <LL_GPIO_ResetOutputPin>:
{
 800d3fe:	b480      	push	{r7}
 800d400:	b083      	sub	sp, #12
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	041a      	lsls	r2, r3, #16
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	619a      	str	r2, [r3, #24]
}
 800d410:	bf00      	nop
 800d412:	370c      	adds	r7, #12
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <ADS8327_Transmit16>:

static uint16_t CFR_user_default = 0x0EFD;		//0000 1110 1111 1101


static void ADS8327_Transmit16(ADS8327_Device_t *dev, uint16_t data)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	460b      	mov	r3, r1
 800d426:	807b      	strh	r3, [r7, #2]
	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 800d428:	bf00      	nop
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4618      	mov	r0, r3
 800d430:	f7ff ff9f 	bl	800d372 <LL_SPI_IsActiveFlag_TXE>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d0f7      	beq.n	800d42a <ADS8327_Transmit16+0xe>

	LL_SPI_TransmitData8(dev->spi, (uint8_t)(data>>8));
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	887b      	ldrh	r3, [r7, #2]
 800d440:	0a1b      	lsrs	r3, r3, #8
 800d442:	b29b      	uxth	r3, r3
 800d444:	b2db      	uxtb	r3, r3
 800d446:	4619      	mov	r1, r3
 800d448:	4610      	mov	r0, r2
 800d44a:	f7ff ffb8 	bl	800d3be <LL_SPI_TransmitData8>
	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 800d44e:	bf00      	nop
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4618      	mov	r0, r3
 800d456:	f7ff ff8c 	bl	800d372 <LL_SPI_IsActiveFlag_TXE>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d0f7      	beq.n	800d450 <ADS8327_Transmit16+0x34>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 800d460:	bf00      	nop
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4618      	mov	r0, r3
 800d468:	f7ff ff96 	bl	800d398 <LL_SPI_IsActiveFlag_BSY>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1f7      	bne.n	800d462 <ADS8327_Transmit16+0x46>

	LL_SPI_TransmitData8(dev->spi, (uint8_t)data);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	887a      	ldrh	r2, [r7, #2]
 800d478:	b2d2      	uxtb	r2, r2
 800d47a:	4611      	mov	r1, r2
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7ff ff9e 	bl	800d3be <LL_SPI_TransmitData8>
	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 800d482:	bf00      	nop
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4618      	mov	r0, r3
 800d48a:	f7ff ff72 	bl	800d372 <LL_SPI_IsActiveFlag_TXE>
 800d48e:	4603      	mov	r3, r0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d0f7      	beq.n	800d484 <ADS8327_Transmit16+0x68>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 800d494:	bf00      	nop
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7ff ff7c 	bl	800d398 <LL_SPI_IsActiveFlag_BSY>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d1f7      	bne.n	800d496 <ADS8327_Transmit16+0x7a>

}
 800d4a6:	bf00      	nop
 800d4a8:	bf00      	nop
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <ADS8327_Wake_Up>:


void ADS8327_Wake_Up(ADS8327_Device_t *dev)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
	dev->CMD = ADS8327_CMD_WAKE_UP;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f44f 4230 	mov.w	r2, #45056	@ 0xb000
 800d4be:	839a      	strh	r2, [r3, #28]
    LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	685a      	ldr	r2, [r3, #4]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	689b      	ldr	r3, [r3, #8]
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	4610      	mov	r0, r2
 800d4cc:	f7ff ff97 	bl	800d3fe <LL_GPIO_ResetOutputPin>

    ADS8327_Transmit16(dev, dev->CMD);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	8b9b      	ldrh	r3, [r3, #28]
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f7ff ffa0 	bl	800d41c <ADS8327_Transmit16>

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	685a      	ldr	r2, [r3, #4]
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	4610      	mov	r0, r2
 800d4e8:	f7ff ff7b 	bl	800d3e2 <LL_GPIO_SetOutputPin>
}
 800d4ec:	bf00      	nop
 800d4ee:	3708      	adds	r7, #8
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <ADS8327_Write_CFR>:

void ADS8327_Write_CFR(ADS8327_Device_t *dev, uint16_t CFR)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	807b      	strh	r3, [r7, #2]
	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	685a      	ldr	r2, [r3, #4]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	689b      	ldr	r3, [r3, #8]
 800d508:	4619      	mov	r1, r3
 800d50a:	4610      	mov	r0, r2
 800d50c:	f7ff ff77 	bl	800d3fe <LL_GPIO_ResetOutputPin>

	dev->CMD = ADS8327_CMD_WRITE_CONFIG;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800d516:	839a      	strh	r2, [r3, #28]
	dev->CFR_value = CFR;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	887a      	ldrh	r2, [r7, #2]
 800d51c:	83da      	strh	r2, [r3, #30]
	uint16_t temp = (dev->CMD & 0xF000) | (dev->CFR_value & 0x0FFF);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	8b9b      	ldrh	r3, [r3, #28]
 800d522:	b21b      	sxth	r3, r3
 800d524:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d528:	f023 030f 	bic.w	r3, r3, #15
 800d52c:	b21a      	sxth	r2, r3
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	8bdb      	ldrh	r3, [r3, #30]
 800d532:	b21b      	sxth	r3, r3
 800d534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d538:	b21b      	sxth	r3, r3
 800d53a:	4313      	orrs	r3, r2
 800d53c:	b21b      	sxth	r3, r3
 800d53e:	81fb      	strh	r3, [r7, #14]

	ADS8327_Transmit16(dev, temp);
 800d540:	89fb      	ldrh	r3, [r7, #14]
 800d542:	4619      	mov	r1, r3
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7ff ff69 	bl	800d41c <ADS8327_Transmit16>

	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	685a      	ldr	r2, [r3, #4]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	689b      	ldr	r3, [r3, #8]
 800d552:	4619      	mov	r1, r3
 800d554:	4610      	mov	r0, r2
 800d556:	f7ff ff44 	bl	800d3e2 <LL_GPIO_SetOutputPin>
}
 800d55a:	bf00      	nop
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
	...

0800d564 <ADS8327_Default_CFR>:


void ADS8327_Default_CFR(ADS8327_Device_t *dev, CFR_default_t CFR_default)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	460b      	mov	r3, r1
 800d56e:	70fb      	strb	r3, [r7, #3]
	if (CFR_default == USER_DEFAULT)
 800d570:	78fb      	ldrb	r3, [r7, #3]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d106      	bne.n	800d584 <ADS8327_Default_CFR+0x20>
	{
		ADS8327_Write_CFR(dev, CFR_user_default);
 800d576:	4b16      	ldr	r3, [pc, #88]	@ (800d5d0 <ADS8327_Default_CFR+0x6c>)
 800d578:	881b      	ldrh	r3, [r3, #0]
 800d57a:	4619      	mov	r1, r3
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f7ff ffb9 	bl	800d4f4 <ADS8327_Write_CFR>
		dev->CMD = ADS8327_CMD_DEFAULT_MODE;
		dev->CFR_value = ADS8327_FACTORY_CFR_DEFAULT;
		ADS8327_Transmit16(dev, dev->CMD);
		LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
	}
}
 800d582:	e020      	b.n	800d5c6 <ADS8327_Default_CFR+0x62>
	else if (CFR_default == FACTORY_DEFAULT)
 800d584:	78fb      	ldrb	r3, [r7, #3]
 800d586:	2b01      	cmp	r3, #1
 800d588:	d11d      	bne.n	800d5c6 <ADS8327_Default_CFR+0x62>
		LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	685a      	ldr	r2, [r3, #4]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	4619      	mov	r1, r3
 800d594:	4610      	mov	r0, r2
 800d596:	f7ff ff32 	bl	800d3fe <LL_GPIO_ResetOutputPin>
		dev->CMD = ADS8327_CMD_DEFAULT_MODE;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 800d5a0:	839a      	strh	r2, [r3, #28]
		dev->CFR_value = ADS8327_FACTORY_CFR_DEFAULT;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f640 62fd 	movw	r2, #3837	@ 0xefd
 800d5a8:	83da      	strh	r2, [r3, #30]
		ADS8327_Transmit16(dev, dev->CMD);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	8b9b      	ldrh	r3, [r3, #28]
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7ff ff33 	bl	800d41c <ADS8327_Transmit16>
		LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	685a      	ldr	r2, [r3, #4]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	689b      	ldr	r3, [r3, #8]
 800d5be:	4619      	mov	r1, r3
 800d5c0:	4610      	mov	r0, r2
 800d5c2:	f7ff ff0e 	bl	800d3e2 <LL_GPIO_SetOutputPin>
}
 800d5c6:	bf00      	nop
 800d5c8:	3708      	adds	r7, #8
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	20002314 	.word	0x20002314

0800d5d4 <ADS8327_Read_Data_Polling>:


uint16_t ADS8327_Read_Data_Polling(ADS8327_Device_t *dev)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
	uint16_t data;
	LL_GPIO_ResetOutputPin(dev->convst_port, dev->convst_pin);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	68da      	ldr	r2, [r3, #12]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	691b      	ldr	r3, [r3, #16]
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	4610      	mov	r0, r2
 800d5e8:	f7ff ff09 	bl	800d3fe <LL_GPIO_ResetOutputPin>
//	data |= LL_SPI_ReceiveData8(dev->spi);
//	//ADS8327_Transmit16(dev, dev->CMD);
//	//dev->ADC_val = ADS8327_Receive16(dev);
//	while (LL_SPI_IsActiveFlag_BSY(dev->spi));
//	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
	dev->ADC_val = data;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	89fa      	ldrh	r2, [r7, #14]
 800d5f0:	841a      	strh	r2, [r3, #32]
	return dev->ADC_val;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	8c1b      	ldrh	r3, [r3, #32]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3710      	adds	r7, #16
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <ADS8327_Device_Init>:
							uint32_t cs_pin,
							GPIO_TypeDef *convst_port,
							uint32_t convst_pin,
							GPIO_TypeDef *EOC_port,
							uint32_t EOC_pin)
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b084      	sub	sp, #16
 800d602:	af00      	add	r7, sp, #0
 800d604:	60f8      	str	r0, [r7, #12]
 800d606:	60b9      	str	r1, [r7, #8]
 800d608:	607a      	str	r2, [r7, #4]
 800d60a:	603b      	str	r3, [r7, #0]

	dev->spi = spi;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	68ba      	ldr	r2, [r7, #8]
 800d610:	601a      	str	r2, [r3, #0]
	dev->cs_port = cs_port;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	683a      	ldr	r2, [r7, #0]
 800d61c:	609a      	str	r2, [r3, #8]
	dev->convst_port = convst_port;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	69ba      	ldr	r2, [r7, #24]
 800d622:	60da      	str	r2, [r3, #12]
	dev->convst_pin = convst_pin;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	69fa      	ldr	r2, [r7, #28]
 800d628:	611a      	str	r2, [r3, #16]
	dev->EOC_port = EOC_port;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	6a3a      	ldr	r2, [r7, #32]
 800d62e:	615a      	str	r2, [r3, #20]
	dev->EOC_pin = EOC_pin;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d634:	619a      	str	r2, [r3, #24]

//	LL_SPI_Enable(dev->spi);
	while (!LL_SPI_IsEnabled(dev->spi));
 800d636:	bf00      	nop
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7ff fe85 	bl	800d34c <LL_SPI_IsEnabled>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d0f7      	beq.n	800d638 <ADS8327_Device_Init+0x3a>

	ADS8327_Default_CFR(dev, USER_DEFAULT);
 800d648:	2100      	movs	r1, #0
 800d64a:	68f8      	ldr	r0, [r7, #12]
 800d64c:	f7ff ff8a 	bl	800d564 <ADS8327_Default_CFR>
	ADS8327_Wake_Up(dev);
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f7ff ff2d 	bl	800d4b0 <ADS8327_Wake_Up>
}
 800d656:	bf00      	nop
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
	...

0800d660 <Photo_board_init>:

ADG1414_Device_t photo_sw;
ADS8327_Device_t photo_adc;

void Photo_board_init(void)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af04      	add	r7, sp, #16
	ADG1414_Chain_Init(&photo_sw, SPI2, PHOTO_PD_CS_GPIO_Port, PHOTO_PD_CS_Pin, INTERNAL_CHAIN_SWITCH_NUM);
 800d666:	2306      	movs	r3, #6
 800d668:	9300      	str	r3, [sp, #0]
 800d66a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d66e:	4a0c      	ldr	r2, [pc, #48]	@ (800d6a0 <Photo_board_init+0x40>)
 800d670:	490c      	ldr	r1, [pc, #48]	@ (800d6a4 <Photo_board_init+0x44>)
 800d672:	480d      	ldr	r0, [pc, #52]	@ (800d6a8 <Photo_board_init+0x48>)
 800d674:	f7fe f89a 	bl	800b7ac <ADG1414_Chain_Init>
	ADS8327_Device_Init(&photo_adc, SPI2, PHOTO_ADC_CS_GPIO_Port, PHOTO_ADC_CS_Pin, PHOTO_ADC_CONV_GPIO_Port, PHOTO_ADC_CONV_Pin, PHOTO_ADC_EOC_GPIO_Port, PHOTO_ADC_EOC_Pin);
 800d678:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d67c:	9303      	str	r3, [sp, #12]
 800d67e:	4b0b      	ldr	r3, [pc, #44]	@ (800d6ac <Photo_board_init+0x4c>)
 800d680:	9302      	str	r3, [sp, #8]
 800d682:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d686:	9301      	str	r3, [sp, #4]
 800d688:	4b05      	ldr	r3, [pc, #20]	@ (800d6a0 <Photo_board_init+0x40>)
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d690:	4a03      	ldr	r2, [pc, #12]	@ (800d6a0 <Photo_board_init+0x40>)
 800d692:	4904      	ldr	r1, [pc, #16]	@ (800d6a4 <Photo_board_init+0x44>)
 800d694:	4806      	ldr	r0, [pc, #24]	@ (800d6b0 <Photo_board_init+0x50>)
 800d696:	f7ff ffb2 	bl	800d5fe <ADS8327_Device_Init>
}
 800d69a:	bf00      	nop
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	40020c00 	.word	0x40020c00
 800d6a4:	40003800 	.word	0x40003800
 800d6a8:	20003588 	.word	0x20003588
 800d6ac:	40020800 	.word	0x40020800
 800d6b0:	200035a8 	.word	0x200035a8

0800d6b4 <LL_GPIO_SetOutputPin>:
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	683a      	ldr	r2, [r7, #0]
 800d6c2:	619a      	str	r2, [r3, #24]
}
 800d6c4:	bf00      	nop
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <LL_GPIO_ResetOutputPin>:
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	041a      	lsls	r2, r3, #16
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	619a      	str	r2, [r3, #24]
}
 800d6e2:	bf00      	nop
 800d6e4:	370c      	adds	r7, #12
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr
	...

0800d6f0 <LED_Status_Init>:
		480									// taskTick
	},
};

void LED_Status_Init(void)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	af00      	add	r7, sp, #0
    s_led_display_status.led_green = 0;
 800d6f4:	4a0a      	ldr	r2, [pc, #40]	@ (800d720 <LED_Status_Init+0x30>)
 800d6f6:	7813      	ldrb	r3, [r2, #0]
 800d6f8:	f023 0301 	bic.w	r3, r3, #1
 800d6fc:	7013      	strb	r3, [r2, #0]
    s_led_display_status.led_blue = 0;
 800d6fe:	4a08      	ldr	r2, [pc, #32]	@ (800d720 <LED_Status_Init+0x30>)
 800d700:	7813      	ldrb	r3, [r2, #0]
 800d702:	f023 0302 	bic.w	r3, r3, #2
 800d706:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = EXP_POWERUP;
 800d708:	4a05      	ldr	r2, [pc, #20]	@ (800d720 <LED_Status_Init+0x30>)
 800d70a:	7813      	ldrb	r3, [r2, #0]
 800d70c:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 800d710:	7013      	strb	r3, [r2, #0]
	status_led_led_green_on();
 800d712:	f000 f8d5 	bl	800d8c0 <status_led_led_green_on>
	status_led_led_blue_on();
 800d716:	f000 f8eb 	bl	800d8f0 <status_led_led_blue_on>



}
 800d71a:	bf00      	nop
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	200035cc 	.word	0x200035cc

0800d724 <status_led_update>:
#include "board.h"
#include "main.h"
#include "bmp390.h"

void	status_led_update(void)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	af00      	add	r7, sp, #0
//	bmp390_temp_press_update();
//	UART_Printf(&EXP_UART, "%d %d \n", bmp390_get_press(), bmp390_get_temperature());



	switch (s_led_display_status.state) {
 800d728:	4b0c      	ldr	r3, [pc, #48]	@ (800d75c <status_led_update+0x38>)
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800d730:	b2db      	uxtb	r3, r3
 800d732:	2b02      	cmp	r3, #2
 800d734:	d00c      	beq.n	800d750 <status_led_update+0x2c>
 800d736:	2b02      	cmp	r3, #2
 800d738:	dc0d      	bgt.n	800d756 <status_led_update+0x32>
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d002      	beq.n	800d744 <status_led_update+0x20>
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d003      	beq.n	800d74a <status_led_update+0x26>
		break;
	case EXP_ERROR:
		status_led_error();
		break;
	default:
		break;
 800d742:	e008      	b.n	800d756 <status_led_update+0x32>
		status_led_powerup();
 800d744:	f000 f80c 	bl	800d760 <status_led_powerup>
		break;
 800d748:	e006      	b.n	800d758 <status_led_update+0x34>
		status_led_normal();
 800d74a:	f000 f851 	bl	800d7f0 <status_led_normal>
		break;
 800d74e:	e003      	b.n	800d758 <status_led_update+0x34>
		status_led_error();
 800d750:	f000 f870 	bl	800d834 <status_led_error>
		break;
 800d754:	e000      	b.n	800d758 <status_led_update+0x34>
		break;
 800d756:	bf00      	nop
	}
}
 800d758:	bf00      	nop
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	200035cc 	.word	0x200035cc

0800d760 <status_led_powerup>:

static void status_led_powerup(void)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 800d764:	4b21      	ldr	r3, [pc, #132]	@ (800d7ec <status_led_powerup+0x8c>)
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	f003 0301 	and.w	r3, r3, #1
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d020      	beq.n	800d7b4 <status_led_powerup+0x54>
 800d772:	4b1e      	ldr	r3, [pc, #120]	@ (800d7ec <status_led_powerup+0x8c>)
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	f003 0302 	and.w	r3, r3, #2
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d019      	beq.n	800d7b4 <status_led_powerup+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800d780:	2000      	movs	r0, #0
 800d782:	f005 f81d 	bl	80127c0 <SCH_TIM_HasCompleted>
 800d786:	4603      	mov	r3, r0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d02d      	beq.n	800d7e8 <status_led_powerup+0x88>
			s_led_display_status.led_green = 0;
 800d78c:	4a17      	ldr	r2, [pc, #92]	@ (800d7ec <status_led_powerup+0x8c>)
 800d78e:	7813      	ldrb	r3, [r2, #0]
 800d790:	f023 0301 	bic.w	r3, r3, #1
 800d794:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 800d796:	4a15      	ldr	r2, [pc, #84]	@ (800d7ec <status_led_powerup+0x8c>)
 800d798:	7813      	ldrb	r3, [r2, #0]
 800d79a:	f023 0302 	bic.w	r3, r3, #2
 800d79e:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 800d7a0:	f000 f89a 	bl	800d8d8 <status_led_led_green_off>
			status_led_led_blue_off();
 800d7a4:	f000 f8b0 	bl	800d908 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 800d7a8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	f004 fff1 	bl	8012794 <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800d7b2:	e019      	b.n	800d7e8 <status_led_powerup+0x88>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	f005 f803 	bl	80127c0 <SCH_TIM_HasCompleted>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d013      	beq.n	800d7e8 <status_led_powerup+0x88>
			s_led_display_status.led_green = 1;
 800d7c0:	4a0a      	ldr	r2, [pc, #40]	@ (800d7ec <status_led_powerup+0x8c>)
 800d7c2:	7813      	ldrb	r3, [r2, #0]
 800d7c4:	f043 0301 	orr.w	r3, r3, #1
 800d7c8:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 800d7ca:	4a08      	ldr	r2, [pc, #32]	@ (800d7ec <status_led_powerup+0x8c>)
 800d7cc:	7813      	ldrb	r3, [r2, #0]
 800d7ce:	f043 0302 	orr.w	r3, r3, #2
 800d7d2:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 800d7d4:	f000 f874 	bl	800d8c0 <status_led_led_green_on>
			status_led_led_blue_on();
 800d7d8:	f000 f88a 	bl	800d8f0 <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 800d7dc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800d7e0:	2000      	movs	r0, #0
 800d7e2:	f004 ffd7 	bl	8012794 <SCH_TIM_Start>
		}
	}
}
 800d7e6:	e7ff      	b.n	800d7e8 <status_led_powerup+0x88>
 800d7e8:	bf00      	nop
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	200035cc 	.word	0x200035cc

0800d7f0 <status_led_normal>:

static void status_led_normal(void)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	af00      	add	r7, sp, #0
	// viết tạm
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800d7f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d7f8:	480d      	ldr	r0, [pc, #52]	@ (800d830 <status_led_normal+0x40>)
 800d7fa:	f7ff ff69 	bl	800d6d0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 800d7fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d802:	480b      	ldr	r0, [pc, #44]	@ (800d830 <status_led_normal+0x40>)
 800d804:	f7ff ff56 	bl	800d6b4 <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 800d808:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800d80c:	f004 ff62 	bl	80126d4 <LL_mDelay>
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 800d810:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d814:	4806      	ldr	r0, [pc, #24]	@ (800d830 <status_led_normal+0x40>)
 800d816:	f7ff ff5b 	bl	800d6d0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800d81a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d81e:	4804      	ldr	r0, [pc, #16]	@ (800d830 <status_led_normal+0x40>)
 800d820:	f7ff ff48 	bl	800d6b4 <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 800d824:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800d828:	f004 ff54 	bl	80126d4 <LL_mDelay>
}
 800d82c:	bf00      	nop
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	40021000 	.word	0x40021000

0800d834 <status_led_error>:

static void status_led_error(void)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 800d838:	4b20      	ldr	r3, [pc, #128]	@ (800d8bc <status_led_error+0x88>)
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	f003 0301 	and.w	r3, r3, #1
 800d840:	b2db      	uxtb	r3, r3
 800d842:	2b00      	cmp	r3, #0
 800d844:	d01f      	beq.n	800d886 <status_led_error+0x52>
 800d846:	4b1d      	ldr	r3, [pc, #116]	@ (800d8bc <status_led_error+0x88>)
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	f003 0302 	and.w	r3, r3, #2
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	2b00      	cmp	r3, #0
 800d852:	d018      	beq.n	800d886 <status_led_error+0x52>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800d854:	2000      	movs	r0, #0
 800d856:	f004 ffb3 	bl	80127c0 <SCH_TIM_HasCompleted>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d02b      	beq.n	800d8b8 <status_led_error+0x84>
			s_led_display_status.led_green = 0;
 800d860:	4a16      	ldr	r2, [pc, #88]	@ (800d8bc <status_led_error+0x88>)
 800d862:	7813      	ldrb	r3, [r2, #0]
 800d864:	f023 0301 	bic.w	r3, r3, #1
 800d868:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 800d86a:	4a14      	ldr	r2, [pc, #80]	@ (800d8bc <status_led_error+0x88>)
 800d86c:	7813      	ldrb	r3, [r2, #0]
 800d86e:	f023 0302 	bic.w	r3, r3, #2
 800d872:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 800d874:	f000 f830 	bl	800d8d8 <status_led_led_green_off>
			status_led_led_blue_off();
 800d878:	f000 f846 	bl	800d908 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 800d87c:	2132      	movs	r1, #50	@ 0x32
 800d87e:	2000      	movs	r0, #0
 800d880:	f004 ff88 	bl	8012794 <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800d884:	e018      	b.n	800d8b8 <status_led_error+0x84>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800d886:	2000      	movs	r0, #0
 800d888:	f004 ff9a 	bl	80127c0 <SCH_TIM_HasCompleted>
 800d88c:	4603      	mov	r3, r0
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d012      	beq.n	800d8b8 <status_led_error+0x84>
			s_led_display_status.led_green = 1;
 800d892:	4a0a      	ldr	r2, [pc, #40]	@ (800d8bc <status_led_error+0x88>)
 800d894:	7813      	ldrb	r3, [r2, #0]
 800d896:	f043 0301 	orr.w	r3, r3, #1
 800d89a:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 800d89c:	4a07      	ldr	r2, [pc, #28]	@ (800d8bc <status_led_error+0x88>)
 800d89e:	7813      	ldrb	r3, [r2, #0]
 800d8a0:	f043 0302 	orr.w	r3, r3, #2
 800d8a4:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 800d8a6:	f000 f80b 	bl	800d8c0 <status_led_led_green_on>
			status_led_led_blue_on();
 800d8aa:	f000 f821 	bl	800d8f0 <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 800d8ae:	2132      	movs	r1, #50	@ 0x32
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	f004 ff6f 	bl	8012794 <SCH_TIM_Start>
		}
	}
}
 800d8b6:	e7ff      	b.n	800d8b8 <status_led_error+0x84>
 800d8b8:	bf00      	nop
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	200035cc 	.word	0x200035cc

0800d8c0 <status_led_led_green_on>:

static void status_led_led_green_on(void)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 800d8c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d8c8:	4802      	ldr	r0, [pc, #8]	@ (800d8d4 <status_led_led_green_on+0x14>)
 800d8ca:	f7ff fef3 	bl	800d6b4 <LL_GPIO_SetOutputPin>
}
 800d8ce:	bf00      	nop
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	40021000 	.word	0x40021000

0800d8d8 <status_led_led_green_off>:
static void status_led_led_green_off(void)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 800d8dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d8e0:	4802      	ldr	r0, [pc, #8]	@ (800d8ec <status_led_led_green_off+0x14>)
 800d8e2:	f7ff fef5 	bl	800d6d0 <LL_GPIO_ResetOutputPin>
}
 800d8e6:	bf00      	nop
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	40021000 	.word	0x40021000

0800d8f0 <status_led_led_blue_on>:
static void status_led_led_blue_on(void)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800d8f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d8f8:	4802      	ldr	r0, [pc, #8]	@ (800d904 <status_led_led_blue_on+0x14>)
 800d8fa:	f7ff fedb 	bl	800d6b4 <LL_GPIO_SetOutputPin>
}
 800d8fe:	bf00      	nop
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	40021000 	.word	0x40021000

0800d908 <status_led_led_blue_off>:
static void status_led_led_blue_off(void)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800d90c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d910:	4802      	ldr	r0, [pc, #8]	@ (800d91c <status_led_led_blue_off+0x14>)
 800d912:	f7ff fedd 	bl	800d6d0 <LL_GPIO_ResetOutputPin>
}
 800d916:	bf00      	nop
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	40021000 	.word	0x40021000

0800d920 <LED_Status_CreateTask>:

void	LED_Status_CreateTask(void)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 800d924:	4902      	ldr	r1, [pc, #8]	@ (800d930 <LED_Status_CreateTask+0x10>)
 800d926:	4803      	ldr	r0, [pc, #12]	@ (800d934 <LED_Status_CreateTask+0x14>)
 800d928:	f004 ff60 	bl	80127ec <SCH_TASK_CreateTask>
}
 800d92c:	bf00      	nop
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	2000231c 	.word	0x2000231c
 800d934:	20002318 	.word	0x20002318

0800d938 <__NVIC_GetPriorityGrouping>:
{
 800d938:	b480      	push	{r7}
 800d93a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d93c:	4b04      	ldr	r3, [pc, #16]	@ (800d950 <__NVIC_GetPriorityGrouping+0x18>)
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	0a1b      	lsrs	r3, r3, #8
 800d942:	f003 0307 	and.w	r3, r3, #7
}
 800d946:	4618      	mov	r0, r3
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr
 800d950:	e000ed00 	.word	0xe000ed00

0800d954 <__NVIC_EnableIRQ>:
{
 800d954:	b480      	push	{r7}
 800d956:	b083      	sub	sp, #12
 800d958:	af00      	add	r7, sp, #0
 800d95a:	4603      	mov	r3, r0
 800d95c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d95e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d962:	2b00      	cmp	r3, #0
 800d964:	db0b      	blt.n	800d97e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d966:	79fb      	ldrb	r3, [r7, #7]
 800d968:	f003 021f 	and.w	r2, r3, #31
 800d96c:	4907      	ldr	r1, [pc, #28]	@ (800d98c <__NVIC_EnableIRQ+0x38>)
 800d96e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d972:	095b      	lsrs	r3, r3, #5
 800d974:	2001      	movs	r0, #1
 800d976:	fa00 f202 	lsl.w	r2, r0, r2
 800d97a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d97e:	bf00      	nop
 800d980:	370c      	adds	r7, #12
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr
 800d98a:	bf00      	nop
 800d98c:	e000e100 	.word	0xe000e100

0800d990 <__NVIC_SetPriority>:
{
 800d990:	b480      	push	{r7}
 800d992:	b083      	sub	sp, #12
 800d994:	af00      	add	r7, sp, #0
 800d996:	4603      	mov	r3, r0
 800d998:	6039      	str	r1, [r7, #0]
 800d99a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d99c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	db0a      	blt.n	800d9ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	490c      	ldr	r1, [pc, #48]	@ (800d9dc <__NVIC_SetPriority+0x4c>)
 800d9aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d9ae:	0112      	lsls	r2, r2, #4
 800d9b0:	b2d2      	uxtb	r2, r2
 800d9b2:	440b      	add	r3, r1
 800d9b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d9b8:	e00a      	b.n	800d9d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	b2da      	uxtb	r2, r3
 800d9be:	4908      	ldr	r1, [pc, #32]	@ (800d9e0 <__NVIC_SetPriority+0x50>)
 800d9c0:	79fb      	ldrb	r3, [r7, #7]
 800d9c2:	f003 030f 	and.w	r3, r3, #15
 800d9c6:	3b04      	subs	r3, #4
 800d9c8:	0112      	lsls	r2, r2, #4
 800d9ca:	b2d2      	uxtb	r2, r2
 800d9cc:	440b      	add	r3, r1
 800d9ce:	761a      	strb	r2, [r3, #24]
}
 800d9d0:	bf00      	nop
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr
 800d9dc:	e000e100 	.word	0xe000e100
 800d9e0:	e000ed00 	.word	0xe000ed00

0800d9e4 <NVIC_EncodePriority>:
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b089      	sub	sp, #36	@ 0x24
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f003 0307 	and.w	r3, r3, #7
 800d9f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	f1c3 0307 	rsb	r3, r3, #7
 800d9fe:	2b04      	cmp	r3, #4
 800da00:	bf28      	it	cs
 800da02:	2304      	movcs	r3, #4
 800da04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	3304      	adds	r3, #4
 800da0a:	2b06      	cmp	r3, #6
 800da0c:	d902      	bls.n	800da14 <NVIC_EncodePriority+0x30>
 800da0e:	69fb      	ldr	r3, [r7, #28]
 800da10:	3b03      	subs	r3, #3
 800da12:	e000      	b.n	800da16 <NVIC_EncodePriority+0x32>
 800da14:	2300      	movs	r3, #0
 800da16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800da18:	f04f 32ff 	mov.w	r2, #4294967295
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	fa02 f303 	lsl.w	r3, r2, r3
 800da22:	43da      	mvns	r2, r3
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	401a      	ands	r2, r3
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800da2c:	f04f 31ff 	mov.w	r1, #4294967295
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	fa01 f303 	lsl.w	r3, r1, r3
 800da36:	43d9      	mvns	r1, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800da3c:	4313      	orrs	r3, r2
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3724      	adds	r7, #36	@ 0x24
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr

0800da4a <LL_ADC_REG_SetSequencerRanks>:
{
 800da4a:	b480      	push	{r7}
 800da4c:	b089      	sub	sp, #36	@ 0x24
 800da4e:	af00      	add	r7, sp, #0
 800da50:	60f8      	str	r0, [r7, #12]
 800da52:	60b9      	str	r1, [r7, #8]
 800da54:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	332c      	adds	r3, #44	@ 0x2c
 800da5a:	4619      	mov	r1, r3
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800da62:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800da66:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da68:	697a      	ldr	r2, [r7, #20]
 800da6a:	fa92 f2a2 	rbit	r2, r2
 800da6e:	613a      	str	r2, [r7, #16]
  return result;
 800da70:	693a      	ldr	r2, [r7, #16]
 800da72:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 800da74:	69ba      	ldr	r2, [r7, #24]
 800da76:	2a00      	cmp	r2, #0
 800da78:	d101      	bne.n	800da7e <LL_ADC_REG_SetSequencerRanks+0x34>
    return 32U;
 800da7a:	2220      	movs	r2, #32
 800da7c:	e003      	b.n	800da86 <LL_ADC_REG_SetSequencerRanks+0x3c>
  return __builtin_clz(value);
 800da7e:	69ba      	ldr	r2, [r7, #24]
 800da80:	fab2 f282 	clz	r2, r2
 800da84:	b2d2      	uxtb	r2, r2
 800da86:	40d3      	lsrs	r3, r2
 800da88:	009b      	lsls	r3, r3, #2
 800da8a:	440b      	add	r3, r1
 800da8c:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 800da8e:	69fb      	ldr	r3, [r7, #28]
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	f003 031f 	and.w	r3, r3, #31
 800da98:	211f      	movs	r1, #31
 800da9a:	fa01 f303 	lsl.w	r3, r1, r3
 800da9e:	43db      	mvns	r3, r3
 800daa0:	401a      	ands	r2, r3
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f003 011f 	and.w	r1, r3, #31
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	f003 031f 	and.w	r3, r3, #31
 800daae:	fa01 f303 	lsl.w	r3, r1, r3
 800dab2:	431a      	orrs	r2, r3
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	601a      	str	r2, [r3, #0]
}
 800dab8:	bf00      	nop
 800daba:	3724      	adds	r7, #36	@ 0x24
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr

0800dac4 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 800dac4:	b480      	push	{r7}
 800dac6:	b083      	sub	sp, #12
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	431a      	orrs	r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	609a      	str	r2, [r3, #8]
}
 800dade:	bf00      	nop
 800dae0:	370c      	adds	r7, #12
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr

0800daea <LL_ADC_SetChannelSamplingTime>:
{
 800daea:	b480      	push	{r7}
 800daec:	b08f      	sub	sp, #60	@ 0x3c
 800daee:	af00      	add	r7, sp, #0
 800daf0:	60f8      	str	r0, [r7, #12]
 800daf2:	60b9      	str	r1, [r7, #8]
 800daf4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	330c      	adds	r3, #12
 800dafa:	4619      	mov	r1, r3
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800db06:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db08:	697a      	ldr	r2, [r7, #20]
 800db0a:	fa92 f2a2 	rbit	r2, r2
 800db0e:	613a      	str	r2, [r7, #16]
  return result;
 800db10:	693a      	ldr	r2, [r7, #16]
 800db12:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 800db14:	69ba      	ldr	r2, [r7, #24]
 800db16:	2a00      	cmp	r2, #0
 800db18:	d101      	bne.n	800db1e <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 800db1a:	2220      	movs	r2, #32
 800db1c:	e003      	b.n	800db26 <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 800db1e:	69ba      	ldr	r2, [r7, #24]
 800db20:	fab2 f282 	clz	r2, r2
 800db24:	b2d2      	uxtb	r2, r2
 800db26:	40d3      	lsrs	r3, r2
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	440b      	add	r3, r1
 800db2c:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(*preg,
 800db2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800db38:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800db3c:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db3e:	6a39      	ldr	r1, [r7, #32]
 800db40:	fa91 f1a1 	rbit	r1, r1
 800db44:	61f9      	str	r1, [r7, #28]
  return result;
 800db46:	69f9      	ldr	r1, [r7, #28]
 800db48:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 800db4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800db4c:	2900      	cmp	r1, #0
 800db4e:	d101      	bne.n	800db54 <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 800db50:	2120      	movs	r1, #32
 800db52:	e003      	b.n	800db5c <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 800db54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800db56:	fab1 f181 	clz	r1, r1
 800db5a:	b2c9      	uxtb	r1, r1
 800db5c:	40cb      	lsrs	r3, r1
 800db5e:	2107      	movs	r1, #7
 800db60:	fa01 f303 	lsl.w	r3, r1, r3
 800db64:	43db      	mvns	r3, r3
 800db66:	401a      	ands	r2, r3
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800db6e:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800db72:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db76:	fa91 f1a1 	rbit	r1, r1
 800db7a:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 800db7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db7e:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 800db80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800db82:	2900      	cmp	r1, #0
 800db84:	d101      	bne.n	800db8a <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 800db86:	2120      	movs	r1, #32
 800db88:	e003      	b.n	800db92 <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 800db8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800db8c:	fab1 f181 	clz	r1, r1
 800db90:	b2c9      	uxtb	r1, r1
 800db92:	40cb      	lsrs	r3, r1
 800db94:	6879      	ldr	r1, [r7, #4]
 800db96:	fa01 f303 	lsl.w	r3, r1, r3
 800db9a:	431a      	orrs	r2, r3
 800db9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db9e:	601a      	str	r2, [r3, #0]
}
 800dba0:	bf00      	nop
 800dba2:	373c      	adds	r7, #60	@ 0x3c
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr

0800dbac <LL_DMA_SetDataTransferDirection>:
{
 800dbac:	b480      	push	{r7}
 800dbae:	b085      	sub	sp, #20
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	60b9      	str	r1, [r7, #8]
 800dbb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800dbb8:	4a0d      	ldr	r2, [pc, #52]	@ (800dbf0 <LL_DMA_SetDataTransferDirection+0x44>)
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800dbcc:	4908      	ldr	r1, [pc, #32]	@ (800dbf0 <LL_DMA_SetDataTransferDirection+0x44>)
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	440b      	add	r3, r1
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	440b      	add	r3, r1
 800dbda:	4619      	mov	r1, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	600b      	str	r3, [r1, #0]
}
 800dbe2:	bf00      	nop
 800dbe4:	3714      	adds	r7, #20
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr
 800dbee:	bf00      	nop
 800dbf0:	08015194 	.word	0x08015194

0800dbf4 <LL_DMA_SetMode>:
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b085      	sub	sp, #20
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800dc00:	4a0d      	ldr	r2, [pc, #52]	@ (800dc38 <LL_DMA_SetMode+0x44>)
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	4413      	add	r3, r2
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	461a      	mov	r2, r3
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	4413      	add	r3, r2
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 800dc14:	4908      	ldr	r1, [pc, #32]	@ (800dc38 <LL_DMA_SetMode+0x44>)
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	440b      	add	r3, r1
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	440b      	add	r3, r1
 800dc22:	4619      	mov	r1, r3
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	4313      	orrs	r3, r2
 800dc28:	600b      	str	r3, [r1, #0]
}
 800dc2a:	bf00      	nop
 800dc2c:	3714      	adds	r7, #20
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	08015194 	.word	0x08015194

0800dc3c <LL_DMA_SetPeriphIncMode>:
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b085      	sub	sp, #20
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800dc48:	4a0d      	ldr	r2, [pc, #52]	@ (800dc80 <LL_DMA_SetPeriphIncMode+0x44>)
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	461a      	mov	r2, r3
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	4413      	add	r3, r2
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800dc5c:	4908      	ldr	r1, [pc, #32]	@ (800dc80 <LL_DMA_SetPeriphIncMode+0x44>)
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	440b      	add	r3, r1
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	4619      	mov	r1, r3
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	440b      	add	r3, r1
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	600b      	str	r3, [r1, #0]
}
 800dc72:	bf00      	nop
 800dc74:	3714      	adds	r7, #20
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
 800dc7e:	bf00      	nop
 800dc80:	08015194 	.word	0x08015194

0800dc84 <LL_DMA_SetMemoryIncMode>:
{
 800dc84:	b480      	push	{r7}
 800dc86:	b085      	sub	sp, #20
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800dc90:	4a0d      	ldr	r2, [pc, #52]	@ (800dcc8 <LL_DMA_SetMemoryIncMode+0x44>)
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	4413      	add	r3, r2
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	461a      	mov	r2, r3
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800dca4:	4908      	ldr	r1, [pc, #32]	@ (800dcc8 <LL_DMA_SetMemoryIncMode+0x44>)
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	440b      	add	r3, r1
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	4619      	mov	r1, r3
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	440b      	add	r3, r1
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	600b      	str	r3, [r1, #0]
}
 800dcba:	bf00      	nop
 800dcbc:	3714      	adds	r7, #20
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop
 800dcc8:	08015194 	.word	0x08015194

0800dccc <LL_DMA_SetPeriphSize>:
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800dcd8:	4a0d      	ldr	r2, [pc, #52]	@ (800dd10 <LL_DMA_SetPeriphSize+0x44>)
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	4413      	add	r3, r2
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	461a      	mov	r2, r3
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	4413      	add	r3, r2
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800dcec:	4908      	ldr	r1, [pc, #32]	@ (800dd10 <LL_DMA_SetPeriphSize+0x44>)
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	440b      	add	r3, r1
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	440b      	add	r3, r1
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	600b      	str	r3, [r1, #0]
}
 800dd02:	bf00      	nop
 800dd04:	3714      	adds	r7, #20
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr
 800dd0e:	bf00      	nop
 800dd10:	08015194 	.word	0x08015194

0800dd14 <LL_DMA_SetMemorySize>:
{
 800dd14:	b480      	push	{r7}
 800dd16:	b085      	sub	sp, #20
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800dd20:	4a0d      	ldr	r2, [pc, #52]	@ (800dd58 <LL_DMA_SetMemorySize+0x44>)
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	4413      	add	r3, r2
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	461a      	mov	r2, r3
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 800dd34:	4908      	ldr	r1, [pc, #32]	@ (800dd58 <LL_DMA_SetMemorySize+0x44>)
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	440b      	add	r3, r1
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	4619      	mov	r1, r3
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	440b      	add	r3, r1
 800dd42:	4619      	mov	r1, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4313      	orrs	r3, r2
 800dd48:	600b      	str	r3, [r1, #0]
}
 800dd4a:	bf00      	nop
 800dd4c:	3714      	adds	r7, #20
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr
 800dd56:	bf00      	nop
 800dd58:	08015194 	.word	0x08015194

0800dd5c <LL_DMA_SetStreamPriorityLevel>:
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b085      	sub	sp, #20
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800dd68:	4a0d      	ldr	r2, [pc, #52]	@ (800dda0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	461a      	mov	r2, r3
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	4413      	add	r3, r2
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800dd7c:	4908      	ldr	r1, [pc, #32]	@ (800dda0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	440b      	add	r3, r1
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	4619      	mov	r1, r3
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	440b      	add	r3, r1
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	4313      	orrs	r3, r2
 800dd90:	600b      	str	r3, [r1, #0]
}
 800dd92:	bf00      	nop
 800dd94:	3714      	adds	r7, #20
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr
 800dd9e:	bf00      	nop
 800dda0:	08015194 	.word	0x08015194

0800dda4 <LL_DMA_SetChannelSelection>:
{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800ddb0:	4a0d      	ldr	r2, [pc, #52]	@ (800dde8 <LL_DMA_SetChannelSelection+0x44>)
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	461a      	mov	r2, r3
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800ddc4:	4908      	ldr	r1, [pc, #32]	@ (800dde8 <LL_DMA_SetChannelSelection+0x44>)
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	440b      	add	r3, r1
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	440b      	add	r3, r1
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	4313      	orrs	r3, r2
 800ddd8:	600b      	str	r3, [r1, #0]
}
 800ddda:	bf00      	nop
 800dddc:	3714      	adds	r7, #20
 800ddde:	46bd      	mov	sp, r7
 800dde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde4:	4770      	bx	lr
 800dde6:	bf00      	nop
 800dde8:	08015194 	.word	0x08015194

0800ddec <LL_DMA_DisableFifoMode>:
{
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800ddf6:	4a0c      	ldr	r2, [pc, #48]	@ (800de28 <LL_DMA_DisableFifoMode+0x3c>)
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	461a      	mov	r2, r3
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	4413      	add	r3, r2
 800de04:	695b      	ldr	r3, [r3, #20]
 800de06:	4908      	ldr	r1, [pc, #32]	@ (800de28 <LL_DMA_DisableFifoMode+0x3c>)
 800de08:	683a      	ldr	r2, [r7, #0]
 800de0a:	440a      	add	r2, r1
 800de0c:	7812      	ldrb	r2, [r2, #0]
 800de0e:	4611      	mov	r1, r2
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	440a      	add	r2, r1
 800de14:	f023 0304 	bic.w	r3, r3, #4
 800de18:	6153      	str	r3, [r2, #20]
}
 800de1a:	bf00      	nop
 800de1c:	370c      	adds	r7, #12
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	08015194 	.word	0x08015194

0800de2c <LL_I2C_Enable>:
{
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f043 0201 	orr.w	r2, r3, #1
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	601a      	str	r2, [r3, #0]
}
 800de40:	bf00      	nop
 800de42:	370c      	adds	r7, #12
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <LL_I2C_EnableClockStretching>:
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	601a      	str	r2, [r3, #0]
}
 800de60:	bf00      	nop
 800de62:	370c      	adds	r7, #12
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr

0800de6c <LL_I2C_DisableGeneralCall>:
{
 800de6c:	b480      	push	{r7}
 800de6e:	b083      	sub	sp, #12
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	601a      	str	r2, [r3, #0]
}
 800de80:	bf00      	nop
 800de82:	370c      	adds	r7, #12
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <LL_I2C_SetOwnAddress2>:
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	431a      	orrs	r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	60da      	str	r2, [r3, #12]
}
 800dea6:	bf00      	nop
 800dea8:	370c      	adds	r7, #12
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr

0800deb2 <LL_I2C_DisableOwnAddress2>:
{
 800deb2:	b480      	push	{r7}
 800deb4:	b083      	sub	sp, #12
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	f023 0201 	bic.w	r2, r3, #1
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	60da      	str	r2, [r3, #12]
}
 800dec6:	bf00      	nop
 800dec8:	370c      	adds	r7, #12
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr

0800ded2 <LL_I2C_EnableIT_EVT>:
{
 800ded2:	b480      	push	{r7}
 800ded4:	b083      	sub	sp, #12
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	605a      	str	r2, [r3, #4]
}
 800dee6:	bf00      	nop
 800dee8:	370c      	adds	r7, #12
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr
	...

0800def4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800def4:	b480      	push	{r7}
 800def6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800def8:	4b05      	ldr	r3, [pc, #20]	@ (800df10 <LL_RCC_HSE_Enable+0x1c>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4a04      	ldr	r2, [pc, #16]	@ (800df10 <LL_RCC_HSE_Enable+0x1c>)
 800defe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800df02:	6013      	str	r3, [r2, #0]
}
 800df04:	bf00      	nop
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr
 800df0e:	bf00      	nop
 800df10:	40023800 	.word	0x40023800

0800df14 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800df14:	b480      	push	{r7}
 800df16:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800df18:	4b07      	ldr	r3, [pc, #28]	@ (800df38 <LL_RCC_HSE_IsReady+0x24>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df24:	bf0c      	ite	eq
 800df26:	2301      	moveq	r3, #1
 800df28:	2300      	movne	r3, #0
 800df2a:	b2db      	uxtb	r3, r3
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	40023800 	.word	0x40023800

0800df3c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800df3c:	b480      	push	{r7}
 800df3e:	b083      	sub	sp, #12
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800df44:	4b06      	ldr	r3, [pc, #24]	@ (800df60 <LL_RCC_SetSysClkSource+0x24>)
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	f023 0203 	bic.w	r2, r3, #3
 800df4c:	4904      	ldr	r1, [pc, #16]	@ (800df60 <LL_RCC_SetSysClkSource+0x24>)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	4313      	orrs	r3, r2
 800df52:	608b      	str	r3, [r1, #8]
}
 800df54:	bf00      	nop
 800df56:	370c      	adds	r7, #12
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr
 800df60:	40023800 	.word	0x40023800

0800df64 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800df64:	b480      	push	{r7}
 800df66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800df68:	4b04      	ldr	r3, [pc, #16]	@ (800df7c <LL_RCC_GetSysClkSource+0x18>)
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	f003 030c 	and.w	r3, r3, #12
}
 800df70:	4618      	mov	r0, r3
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr
 800df7a:	bf00      	nop
 800df7c:	40023800 	.word	0x40023800

0800df80 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800df88:	4b06      	ldr	r3, [pc, #24]	@ (800dfa4 <LL_RCC_SetAHBPrescaler+0x24>)
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800df90:	4904      	ldr	r1, [pc, #16]	@ (800dfa4 <LL_RCC_SetAHBPrescaler+0x24>)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	4313      	orrs	r3, r2
 800df96:	608b      	str	r3, [r1, #8]
}
 800df98:	bf00      	nop
 800df9a:	370c      	adds	r7, #12
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr
 800dfa4:	40023800 	.word	0x40023800

0800dfa8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800dfb0:	4b06      	ldr	r3, [pc, #24]	@ (800dfcc <LL_RCC_SetAPB1Prescaler+0x24>)
 800dfb2:	689b      	ldr	r3, [r3, #8]
 800dfb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800dfb8:	4904      	ldr	r1, [pc, #16]	@ (800dfcc <LL_RCC_SetAPB1Prescaler+0x24>)
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	608b      	str	r3, [r1, #8]
}
 800dfc0:	bf00      	nop
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr
 800dfcc:	40023800 	.word	0x40023800

0800dfd0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b083      	sub	sp, #12
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800dfd8:	4b06      	ldr	r3, [pc, #24]	@ (800dff4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800dfe0:	4904      	ldr	r1, [pc, #16]	@ (800dff4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	608b      	str	r3, [r1, #8]
}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr
 800dff4:	40023800 	.word	0x40023800

0800dff8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800dff8:	b480      	push	{r7}
 800dffa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800dffc:	4b05      	ldr	r3, [pc, #20]	@ (800e014 <LL_RCC_PLL_Enable+0x1c>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4a04      	ldr	r2, [pc, #16]	@ (800e014 <LL_RCC_PLL_Enable+0x1c>)
 800e002:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e006:	6013      	str	r3, [r2, #0]
}
 800e008:	bf00      	nop
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr
 800e012:	bf00      	nop
 800e014:	40023800 	.word	0x40023800

0800e018 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800e018:	b480      	push	{r7}
 800e01a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800e01c:	4b07      	ldr	r3, [pc, #28]	@ (800e03c <LL_RCC_PLL_IsReady+0x24>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e024:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e028:	bf0c      	ite	eq
 800e02a:	2301      	moveq	r3, #1
 800e02c:	2300      	movne	r3, #0
 800e02e:	b2db      	uxtb	r3, r3
}
 800e030:	4618      	mov	r0, r3
 800e032:	46bd      	mov	sp, r7
 800e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	40023800 	.word	0x40023800

0800e040 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800e040:	b480      	push	{r7}
 800e042:	b085      	sub	sp, #20
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	607a      	str	r2, [r7, #4]
 800e04c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800e04e:	4b0d      	ldr	r3, [pc, #52]	@ (800e084 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800e050:	685a      	ldr	r2, [r3, #4]
 800e052:	4b0d      	ldr	r3, [pc, #52]	@ (800e088 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800e054:	4013      	ands	r3, r2
 800e056:	68f9      	ldr	r1, [r7, #12]
 800e058:	68ba      	ldr	r2, [r7, #8]
 800e05a:	4311      	orrs	r1, r2
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	0192      	lsls	r2, r2, #6
 800e060:	430a      	orrs	r2, r1
 800e062:	4908      	ldr	r1, [pc, #32]	@ (800e084 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800e064:	4313      	orrs	r3, r2
 800e066:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800e068:	4b06      	ldr	r3, [pc, #24]	@ (800e084 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e070:	4904      	ldr	r1, [pc, #16]	@ (800e084 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	4313      	orrs	r3, r2
 800e076:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800e078:	bf00      	nop
 800e07a:	3714      	adds	r7, #20
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr
 800e084:	40023800 	.word	0x40023800
 800e088:	ffbf8000 	.word	0xffbf8000

0800e08c <LL_AHB1_GRP1_EnableClock>:
{
 800e08c:	b480      	push	{r7}
 800e08e:	b085      	sub	sp, #20
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800e094:	4b08      	ldr	r3, [pc, #32]	@ (800e0b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800e096:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e098:	4907      	ldr	r1, [pc, #28]	@ (800e0b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4313      	orrs	r3, r2
 800e09e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800e0a0:	4b05      	ldr	r3, [pc, #20]	@ (800e0b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800e0a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	4013      	ands	r3, r2
 800e0a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
}
 800e0ac:	bf00      	nop
 800e0ae:	3714      	adds	r7, #20
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr
 800e0b8:	40023800 	.word	0x40023800

0800e0bc <LL_APB1_GRP1_EnableClock>:
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800e0c4:	4b08      	ldr	r3, [pc, #32]	@ (800e0e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800e0c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e0c8:	4907      	ldr	r1, [pc, #28]	@ (800e0e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800e0d0:	4b05      	ldr	r3, [pc, #20]	@ (800e0e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800e0d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	4013      	ands	r3, r2
 800e0d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e0da:	68fb      	ldr	r3, [r7, #12]
}
 800e0dc:	bf00      	nop
 800e0de:	3714      	adds	r7, #20
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr
 800e0e8:	40023800 	.word	0x40023800

0800e0ec <LL_APB2_GRP1_EnableClock>:
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b085      	sub	sp, #20
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800e0f4:	4b08      	ldr	r3, [pc, #32]	@ (800e118 <LL_APB2_GRP1_EnableClock+0x2c>)
 800e0f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e0f8:	4907      	ldr	r1, [pc, #28]	@ (800e118 <LL_APB2_GRP1_EnableClock+0x2c>)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800e100:	4b05      	ldr	r3, [pc, #20]	@ (800e118 <LL_APB2_GRP1_EnableClock+0x2c>)
 800e102:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	4013      	ands	r3, r2
 800e108:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e10a:	68fb      	ldr	r3, [r7, #12]
}
 800e10c:	bf00      	nop
 800e10e:	3714      	adds	r7, #20
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr
 800e118:	40023800 	.word	0x40023800

0800e11c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800e11c:	b480      	push	{r7}
 800e11e:	b083      	sub	sp, #12
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800e124:	4b06      	ldr	r3, [pc, #24]	@ (800e140 <LL_FLASH_SetLatency+0x24>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f023 0207 	bic.w	r2, r3, #7
 800e12c:	4904      	ldr	r1, [pc, #16]	@ (800e140 <LL_FLASH_SetLatency+0x24>)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	4313      	orrs	r3, r2
 800e132:	600b      	str	r3, [r1, #0]
}
 800e134:	bf00      	nop
 800e136:	370c      	adds	r7, #12
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr
 800e140:	40023c00 	.word	0x40023c00

0800e144 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800e144:	b480      	push	{r7}
 800e146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800e148:	4b04      	ldr	r3, [pc, #16]	@ (800e15c <LL_FLASH_GetLatency+0x18>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f003 0307 	and.w	r3, r3, #7
}
 800e150:	4618      	mov	r0, r3
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr
 800e15a:	bf00      	nop
 800e15c:	40023c00 	.word	0x40023c00

0800e160 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800e168:	4b06      	ldr	r3, [pc, #24]	@ (800e184 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e170:	4904      	ldr	r1, [pc, #16]	@ (800e184 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	4313      	orrs	r3, r2
 800e176:	600b      	str	r3, [r1, #0]
}
 800e178:	bf00      	nop
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr
 800e184:	40007000 	.word	0x40007000

0800e188 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 800e188:	b480      	push	{r7}
 800e18a:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 800e18c:	4b07      	ldr	r3, [pc, #28]	@ (800e1ac <LL_PWR_IsActiveFlag_VOS+0x24>)
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e194:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e198:	bf0c      	ite	eq
 800e19a:	2301      	moveq	r3, #1
 800e19c:	2300      	movne	r3, #0
 800e19e:	b2db      	uxtb	r3, r3
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr
 800e1aa:	bf00      	nop
 800e1ac:	40007000 	.word	0x40007000

0800e1b0 <LL_SPI_Enable>:
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b083      	sub	sp, #12
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	601a      	str	r2, [r3, #0]
}
 800e1c4:	bf00      	nop
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <LL_SPI_SetStandard>:
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	f023 0210 	bic.w	r2, r3, #16
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	431a      	orrs	r2, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	605a      	str	r2, [r3, #4]
}
 800e1ea:	bf00      	nop
 800e1ec:	370c      	adds	r7, #12
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr

0800e1f6 <LL_TIM_DisableARRPreload>:
{
 800e1f6:	b480      	push	{r7}
 800e1f8:	b083      	sub	sp, #12
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	601a      	str	r2, [r3, #0]
}
 800e20a:	bf00      	nop
 800e20c:	370c      	adds	r7, #12
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr
	...

0800e218 <LL_TIM_OC_DisableFast>:
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d01c      	beq.n	800e262 <LL_TIM_OC_DisableFast+0x4a>
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	2b04      	cmp	r3, #4
 800e22c:	d017      	beq.n	800e25e <LL_TIM_OC_DisableFast+0x46>
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	2b10      	cmp	r3, #16
 800e232:	d012      	beq.n	800e25a <LL_TIM_OC_DisableFast+0x42>
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	2b40      	cmp	r3, #64	@ 0x40
 800e238:	d00d      	beq.n	800e256 <LL_TIM_OC_DisableFast+0x3e>
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e240:	d007      	beq.n	800e252 <LL_TIM_OC_DisableFast+0x3a>
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e248:	d101      	bne.n	800e24e <LL_TIM_OC_DisableFast+0x36>
 800e24a:	2305      	movs	r3, #5
 800e24c:	e00a      	b.n	800e264 <LL_TIM_OC_DisableFast+0x4c>
 800e24e:	2306      	movs	r3, #6
 800e250:	e008      	b.n	800e264 <LL_TIM_OC_DisableFast+0x4c>
 800e252:	2304      	movs	r3, #4
 800e254:	e006      	b.n	800e264 <LL_TIM_OC_DisableFast+0x4c>
 800e256:	2303      	movs	r3, #3
 800e258:	e004      	b.n	800e264 <LL_TIM_OC_DisableFast+0x4c>
 800e25a:	2302      	movs	r3, #2
 800e25c:	e002      	b.n	800e264 <LL_TIM_OC_DisableFast+0x4c>
 800e25e:	2301      	movs	r3, #1
 800e260:	e000      	b.n	800e264 <LL_TIM_OC_DisableFast+0x4c>
 800e262:	2300      	movs	r3, #0
 800e264:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	3318      	adds	r3, #24
 800e26a:	4619      	mov	r1, r3
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
 800e26e:	4a0b      	ldr	r2, [pc, #44]	@ (800e29c <LL_TIM_OC_DisableFast+0x84>)
 800e270:	5cd3      	ldrb	r3, [r2, r3]
 800e272:	440b      	add	r3, r1
 800e274:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	7bfb      	ldrb	r3, [r7, #15]
 800e27c:	4908      	ldr	r1, [pc, #32]	@ (800e2a0 <LL_TIM_OC_DisableFast+0x88>)
 800e27e:	5ccb      	ldrb	r3, [r1, r3]
 800e280:	4619      	mov	r1, r3
 800e282:	2304      	movs	r3, #4
 800e284:	408b      	lsls	r3, r1
 800e286:	43db      	mvns	r3, r3
 800e288:	401a      	ands	r2, r3
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	601a      	str	r2, [r3, #0]
}
 800e28e:	bf00      	nop
 800e290:	3714      	adds	r7, #20
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr
 800e29a:	bf00      	nop
 800e29c:	0801519c 	.word	0x0801519c
 800e2a0:	080151a4 	.word	0x080151a4

0800e2a4 <LL_TIM_OC_EnablePreload>:
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b085      	sub	sp, #20
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d01c      	beq.n	800e2ee <LL_TIM_OC_EnablePreload+0x4a>
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	2b04      	cmp	r3, #4
 800e2b8:	d017      	beq.n	800e2ea <LL_TIM_OC_EnablePreload+0x46>
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	2b10      	cmp	r3, #16
 800e2be:	d012      	beq.n	800e2e6 <LL_TIM_OC_EnablePreload+0x42>
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	2b40      	cmp	r3, #64	@ 0x40
 800e2c4:	d00d      	beq.n	800e2e2 <LL_TIM_OC_EnablePreload+0x3e>
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2cc:	d007      	beq.n	800e2de <LL_TIM_OC_EnablePreload+0x3a>
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e2d4:	d101      	bne.n	800e2da <LL_TIM_OC_EnablePreload+0x36>
 800e2d6:	2305      	movs	r3, #5
 800e2d8:	e00a      	b.n	800e2f0 <LL_TIM_OC_EnablePreload+0x4c>
 800e2da:	2306      	movs	r3, #6
 800e2dc:	e008      	b.n	800e2f0 <LL_TIM_OC_EnablePreload+0x4c>
 800e2de:	2304      	movs	r3, #4
 800e2e0:	e006      	b.n	800e2f0 <LL_TIM_OC_EnablePreload+0x4c>
 800e2e2:	2303      	movs	r3, #3
 800e2e4:	e004      	b.n	800e2f0 <LL_TIM_OC_EnablePreload+0x4c>
 800e2e6:	2302      	movs	r3, #2
 800e2e8:	e002      	b.n	800e2f0 <LL_TIM_OC_EnablePreload+0x4c>
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	e000      	b.n	800e2f0 <LL_TIM_OC_EnablePreload+0x4c>
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	3318      	adds	r3, #24
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	7bfb      	ldrb	r3, [r7, #15]
 800e2fa:	4a0a      	ldr	r2, [pc, #40]	@ (800e324 <LL_TIM_OC_EnablePreload+0x80>)
 800e2fc:	5cd3      	ldrb	r3, [r2, r3]
 800e2fe:	440b      	add	r3, r1
 800e300:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	7bfb      	ldrb	r3, [r7, #15]
 800e308:	4907      	ldr	r1, [pc, #28]	@ (800e328 <LL_TIM_OC_EnablePreload+0x84>)
 800e30a:	5ccb      	ldrb	r3, [r1, r3]
 800e30c:	4619      	mov	r1, r3
 800e30e:	2308      	movs	r3, #8
 800e310:	408b      	lsls	r3, r1
 800e312:	431a      	orrs	r2, r3
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	601a      	str	r2, [r3, #0]
}
 800e318:	bf00      	nop
 800e31a:	3714      	adds	r7, #20
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr
 800e324:	0801519c 	.word	0x0801519c
 800e328:	080151a4 	.word	0x080151a4

0800e32c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	689b      	ldr	r3, [r3, #8]
 800e33a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e33e:	f023 0307 	bic.w	r3, r3, #7
 800e342:	683a      	ldr	r2, [r7, #0]
 800e344:	431a      	orrs	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	609a      	str	r2, [r3, #8]
}
 800e34a:	bf00      	nop
 800e34c:	370c      	adds	r7, #12
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr

0800e356 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800e356:	b480      	push	{r7}
 800e358:	b083      	sub	sp, #12
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
 800e35e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	431a      	orrs	r2, r3
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	605a      	str	r2, [r3, #4]
}
 800e370:	bf00      	nop
 800e372:	370c      	adds	r7, #12
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr

0800e37c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b083      	sub	sp, #12
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	689b      	ldr	r3, [r3, #8]
 800e388:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	609a      	str	r2, [r3, #8]
}
 800e390:	bf00      	nop
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <LL_USART_Enable>:
{
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	60da      	str	r2, [r3, #12]
}
 800e3b0:	bf00      	nop
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <LL_USART_ConfigAsyncMode>:
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	691b      	ldr	r3, [r3, #16]
 800e3c8:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	695b      	ldr	r3, [r3, #20]
 800e3d4:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	615a      	str	r2, [r3, #20]
}
 800e3dc:	bf00      	nop
 800e3de:	370c      	adds	r7, #12
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr

0800e3e8 <LL_GPIO_SetOutputPin>:
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	683a      	ldr	r2, [r7, #0]
 800e3f6:	619a      	str	r2, [r3, #24]
}
 800e3f8:	bf00      	nop
 800e3fa:	370c      	adds	r7, #12
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr

0800e404 <LL_GPIO_ResetOutputPin>:
{
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	041a      	lsls	r2, r3, #16
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	619a      	str	r2, [r3, #24]
}
 800e416:	bf00      	nop
 800e418:	370c      	adds	r7, #12
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr
	...

0800e424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e428:	f001 fb7a 	bl	800fb20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e42c:	f000 f83e 	bl	800e4ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e430:	f000 fdf0 	bl	800f014 <MX_GPIO_Init>
  MX_DMA_Init();
 800e434:	f000 fdd6 	bl	800efe4 <MX_DMA_Init>
  MX_SPI1_Init();
 800e438:	f000 fad0 	bl	800e9dc <MX_SPI1_Init>
  MX_ADC1_Init();
 800e43c:	f000 f884 	bl	800e548 <MX_ADC1_Init>
  MX_TIM1_Init();
 800e440:	f000 fbce 	bl	800ebe0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800e444:	f000 fc64 	bl	800ed10 <MX_TIM3_Init>
  MX_I2C2_Init();
 800e448:	f000 fa4a 	bl	800e8e0 <MX_I2C2_Init>
  MX_SPI3_Init();
 800e44c:	f000 fb72 	bl	800eb34 <MX_SPI3_Init>
  MX_SPI2_Init();
 800e450:	f000 fb1a 	bl	800ea88 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 800e454:	f000 fd66 	bl	800ef24 <MX_USART6_UART_Init>
  MX_ADC3_Init();
 800e458:	f000 f998 	bl	800e78c <MX_ADC3_Init>
  MX_TIM4_Init();
 800e45c:	f000 fc88 	bl	800ed70 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800e460:	f000 fd00 	bl	800ee64 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800e464:	f000 f9e4 	bl	800e830 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize all preset for schedule task
  Ex_Watchdog_Init();
 800e468:	f001 fb12 	bl	800fa90 <Ex_Watchdog_Init>
  LED_Status_Init();
 800e46c:	f7ff f940 	bl	800d6f0 <LED_Status_Init>
  CommandLine_Init(USART1);
 800e470:	480d      	ldr	r0, [pc, #52]	@ (800e4a8 <main+0x84>)
 800e472:	f7fb f8fd 	bl	8009670 <CommandLine_Init>
  NTC_DMA_ADC_Init();
 800e476:	f7fe fed7 	bl	800d228 <NTC_DMA_ADC_Init>
  Laser_board_init();
 800e47a:	f7fe f83f 	bl	800c4fc <Laser_board_init>
  Photo_board_init();
 800e47e:	f7ff f8ef 	bl	800d660 <Photo_board_init>
  SCH_Initialize();
 800e482:	f004 f95d 	bl	8012740 <SCH_Initialize>

  // Create task scheduler
  Ex_Watchdog_CreateTask();
 800e486:	f001 fb0f 	bl	800faa8 <Ex_Watchdog_CreateTask>
  LED_Status_CreateTask();
 800e48a:	f7ff fa49 	bl	800d920 <LED_Status_CreateTask>
  CommandLine_CreateTask();
 800e48e:	f7fd f8d1 	bl	800b634 <CommandLine_CreateTask>
  Temperature_GetSet_CreateTask();
 800e492:	f001 f99b 	bl	800f7cc <Temperature_GetSet_CreateTask>
  // sensor_i2c_create_task();
  AutoRun_CreateTask();
 800e496:	f7fd fcb1 	bl	800bdfc <AutoRun_CreateTask>
  SoftTime_CreateTask();
 800e49a:	f7fd fd7d 	bl	800bf98 <SoftTime_CreateTask>
  SCH_StartSchedular();
 800e49e:	f004 fa79 	bl	8012994 <SCH_StartSchedular>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_HandleScheduledTask();
 800e4a2:	f004 fa7d 	bl	80129a0 <SCH_HandleScheduledTask>
 800e4a6:	e7fc      	b.n	800e4a2 <main+0x7e>
 800e4a8:	40011000 	.word	0x40011000

0800e4ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800e4b0:	2000      	movs	r0, #0
 800e4b2:	f7ff fe33 	bl	800e11c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800e4b6:	bf00      	nop
 800e4b8:	f7ff fe44 	bl	800e144 <LL_FLASH_GetLatency>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d1fa      	bne.n	800e4b8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800e4c2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e4c6:	f7ff fe4b 	bl	800e160 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800e4ca:	f7ff fd13 	bl	800def4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800e4ce:	bf00      	nop
 800e4d0:	f7ff fd20 	bl	800df14 <LL_RCC_HSE_IsReady>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d1fa      	bne.n	800e4d0 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 72, LL_RCC_PLLP_DIV_6);
 800e4da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e4de:	2248      	movs	r2, #72	@ 0x48
 800e4e0:	2104      	movs	r1, #4
 800e4e2:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e4e6:	f7ff fdab 	bl	800e040 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800e4ea:	f7ff fd85 	bl	800dff8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800e4ee:	bf00      	nop
 800e4f0:	f7ff fd92 	bl	800e018 <LL_RCC_PLL_IsReady>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	d1fa      	bne.n	800e4f0 <SystemClock_Config+0x44>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 800e4fa:	bf00      	nop
 800e4fc:	f7ff fe44 	bl	800e188 <LL_PWR_IsActiveFlag_VOS>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d0fa      	beq.n	800e4fc <SystemClock_Config+0x50>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800e506:	2000      	movs	r0, #0
 800e508:	f7ff fd3a 	bl	800df80 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800e50c:	2000      	movs	r0, #0
 800e50e:	f7ff fd4b 	bl	800dfa8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800e512:	2000      	movs	r0, #0
 800e514:	f7ff fd5c 	bl	800dfd0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800e518:	2002      	movs	r0, #2
 800e51a:	f7ff fd0f 	bl	800df3c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800e51e:	bf00      	nop
 800e520:	f7ff fd20 	bl	800df64 <LL_RCC_GetSysClkSource>
 800e524:	4603      	mov	r3, r0
 800e526:	2b08      	cmp	r3, #8
 800e528:	d1fa      	bne.n	800e520 <SystemClock_Config+0x74>
  {

  }
  LL_SetSystemCoreClock(24000000);
 800e52a:	4806      	ldr	r0, [pc, #24]	@ (800e544 <SystemClock_Config+0x98>)
 800e52c:	f004 f8f8 	bl	8012720 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800e530:	200f      	movs	r0, #15
 800e532:	f001 fb4d 	bl	800fbd0 <HAL_InitTick>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d001      	beq.n	800e540 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800e53c:	f000 fe54 	bl	800f1e8 <Error_Handler>
  }
}
 800e540:	bf00      	nop
 800e542:	bd80      	pop	{r7, pc}
 800e544:	016e3600 	.word	0x016e3600

0800e548 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b092      	sub	sp, #72	@ 0x48
 800e54c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800e54e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e552:	2200      	movs	r2, #0
 800e554:	601a      	str	r2, [r3, #0]
 800e556:	605a      	str	r2, [r3, #4]
 800e558:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800e55a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e55e:	2200      	movs	r2, #0
 800e560:	601a      	str	r2, [r3, #0]
 800e562:	605a      	str	r2, [r3, #4]
 800e564:	609a      	str	r2, [r3, #8]
 800e566:	60da      	str	r2, [r3, #12]
 800e568:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800e56a:	f107 0318 	add.w	r3, r7, #24
 800e56e:	2200      	movs	r2, #0
 800e570:	601a      	str	r2, [r3, #0]
 800e572:	605a      	str	r2, [r3, #4]
 800e574:	609a      	str	r2, [r3, #8]
 800e576:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e578:	463b      	mov	r3, r7
 800e57a:	2200      	movs	r2, #0
 800e57c:	601a      	str	r2, [r3, #0]
 800e57e:	605a      	str	r2, [r3, #4]
 800e580:	609a      	str	r2, [r3, #8]
 800e582:	60da      	str	r2, [r3, #12]
 800e584:	611a      	str	r2, [r3, #16]
 800e586:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800e588:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e58c:	f7ff fdae 	bl	800e0ec <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800e590:	2004      	movs	r0, #4
 800e592:	f7ff fd7b 	bl	800e08c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800e596:	2001      	movs	r0, #1
 800e598:	f7ff fd78 	bl	800e08c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800e59c:	2002      	movs	r0, #2
 800e59e:	f7ff fd75 	bl	800e08c <LL_AHB1_GRP1_EnableClock>
  PC4   ------> ADC1_IN14
  PC5   ------> ADC1_IN15
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = ADC_TEMP1_Pin|ADC_TEMP2_Pin|ADC_TEMP3_Pin|ADC_TEMP4_Pin
 800e5a2:	233f      	movs	r3, #63	@ 0x3f
 800e5a4:	603b      	str	r3, [r7, #0]
                          |ADC_TEMP5_Pin|ADC_TEMP6_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800e5a6:	2303      	movs	r3, #3
 800e5a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e5ae:	463b      	mov	r3, r7
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	4869      	ldr	r0, [pc, #420]	@ (800e758 <MX_ADC1_Init+0x210>)
 800e5b4:	f002 feb9 	bl	801132a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_TEC_Pin;
 800e5b8:	2310      	movs	r3, #16
 800e5ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800e5bc:	2303      	movs	r3, #3
 800e5be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ADC_TEC_GPIO_Port, &GPIO_InitStruct);
 800e5c4:	463b      	mov	r3, r7
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	4864      	ldr	r0, [pc, #400]	@ (800e75c <MX_ADC1_Init+0x214>)
 800e5ca:	f002 feae 	bl	801132a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_TEMP7_Pin|ADC_TEMP8_Pin;
 800e5ce:	2303      	movs	r3, #3
 800e5d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800e5d2:	2303      	movs	r3, #3
 800e5d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e5da:	463b      	mov	r3, r7
 800e5dc:	4619      	mov	r1, r3
 800e5de:	4860      	ldr	r0, [pc, #384]	@ (800e760 <MX_ADC1_Init+0x218>)
 800e5e0:	f002 fea3 	bl	801132a <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	2100      	movs	r1, #0
 800e5e8:	485e      	ldr	r0, [pc, #376]	@ (800e764 <MX_ADC1_Init+0x21c>)
 800e5ea:	f7ff fbdb 	bl	800dda4 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	2100      	movs	r1, #0
 800e5f2:	485c      	ldr	r0, [pc, #368]	@ (800e764 <MX_ADC1_Init+0x21c>)
 800e5f4:	f7ff fada 	bl	800dbac <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_MEDIUM);
 800e5f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	4859      	ldr	r0, [pc, #356]	@ (800e764 <MX_ADC1_Init+0x21c>)
 800e600:	f7ff fbac 	bl	800dd5c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 800e604:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e608:	2100      	movs	r1, #0
 800e60a:	4856      	ldr	r0, [pc, #344]	@ (800e764 <MX_ADC1_Init+0x21c>)
 800e60c:	f7ff faf2 	bl	800dbf4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 800e610:	2200      	movs	r2, #0
 800e612:	2100      	movs	r1, #0
 800e614:	4853      	ldr	r0, [pc, #332]	@ (800e764 <MX_ADC1_Init+0x21c>)
 800e616:	f7ff fb11 	bl	800dc3c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 800e61a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e61e:	2100      	movs	r1, #0
 800e620:	4850      	ldr	r0, [pc, #320]	@ (800e764 <MX_ADC1_Init+0x21c>)
 800e622:	f7ff fb2f 	bl	800dc84 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 800e626:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e62a:	2100      	movs	r1, #0
 800e62c:	484d      	ldr	r0, [pc, #308]	@ (800e764 <MX_ADC1_Init+0x21c>)
 800e62e:	f7ff fb4d 	bl	800dccc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 800e632:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800e636:	2100      	movs	r1, #0
 800e638:	484a      	ldr	r0, [pc, #296]	@ (800e764 <MX_ADC1_Init+0x21c>)
 800e63a:	f7ff fb6b 	bl	800dd14 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 800e63e:	2100      	movs	r1, #0
 800e640:	4848      	ldr	r0, [pc, #288]	@ (800e764 <MX_ADC1_Init+0x21c>)
 800e642:	f7ff fbd3 	bl	800ddec <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800e646:	2300      	movs	r3, #0
 800e648:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800e64a:	2300      	movs	r3, #0
 800e64c:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800e64e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e652:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800e654:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e658:	4619      	mov	r1, r3
 800e65a:	4843      	ldr	r0, [pc, #268]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e65c:	f002 fcac 	bl	8010fb8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800e660:	2300      	movs	r3, #0
 800e662:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 800e664:	f44f 03e0 	mov.w	r3, #7340032	@ 0x700000
 800e668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800e66a:	2300      	movs	r3, #0
 800e66c:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800e66e:	2302      	movs	r3, #2
 800e670:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800e672:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e676:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800e678:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e67c:	4619      	mov	r1, r3
 800e67e:	483a      	ldr	r0, [pc, #232]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e680:	f002 fcc6 	bl	8011010 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 800e684:	2100      	movs	r1, #0
 800e686:	4838      	ldr	r0, [pc, #224]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e688:	f7ff fa1c 	bl	800dac4 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 800e68c:	2300      	movs	r3, #0
 800e68e:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800e690:	2300      	movs	r3, #0
 800e692:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800e694:	f107 0318 	add.w	r3, r7, #24
 800e698:	4619      	mov	r1, r3
 800e69a:	4834      	ldr	r0, [pc, #208]	@ (800e76c <MX_ADC1_Init+0x224>)
 800e69c:	f002 fc44 	bl	8010f28 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_10);
 800e6a0:	220a      	movs	r2, #10
 800e6a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e6a6:	4830      	ldr	r0, [pc, #192]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e6a8:	f7ff f9cf 	bl	800da4a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_15CYCLES);
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	210a      	movs	r1, #10
 800e6b0:	482d      	ldr	r0, [pc, #180]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e6b2:	f7ff fa1a 	bl	800daea <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_11);
 800e6b6:	4a2e      	ldr	r2, [pc, #184]	@ (800e770 <MX_ADC1_Init+0x228>)
 800e6b8:	f240 2105 	movw	r1, #517	@ 0x205
 800e6bc:	482a      	ldr	r0, [pc, #168]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e6be:	f7ff f9c4 	bl	800da4a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_15CYCLES);
 800e6c2:	2201      	movs	r2, #1
 800e6c4:	492a      	ldr	r1, [pc, #168]	@ (800e770 <MX_ADC1_Init+0x228>)
 800e6c6:	4828      	ldr	r0, [pc, #160]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e6c8:	f7ff fa0f 	bl	800daea <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_12);
 800e6cc:	4a29      	ldr	r2, [pc, #164]	@ (800e774 <MX_ADC1_Init+0x22c>)
 800e6ce:	f240 210a 	movw	r1, #522	@ 0x20a
 800e6d2:	4825      	ldr	r0, [pc, #148]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e6d4:	f7ff f9b9 	bl	800da4a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_15CYCLES);
 800e6d8:	2201      	movs	r2, #1
 800e6da:	4926      	ldr	r1, [pc, #152]	@ (800e774 <MX_ADC1_Init+0x22c>)
 800e6dc:	4822      	ldr	r0, [pc, #136]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e6de:	f7ff fa04 	bl	800daea <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_13);
 800e6e2:	4a25      	ldr	r2, [pc, #148]	@ (800e778 <MX_ADC1_Init+0x230>)
 800e6e4:	f240 210f 	movw	r1, #527	@ 0x20f
 800e6e8:	481f      	ldr	r0, [pc, #124]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e6ea:	f7ff f9ae 	bl	800da4a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SAMPLINGTIME_15CYCLES);
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	4921      	ldr	r1, [pc, #132]	@ (800e778 <MX_ADC1_Init+0x230>)
 800e6f2:	481d      	ldr	r0, [pc, #116]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e6f4:	f7ff f9f9 	bl	800daea <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_14);
 800e6f8:	4a20      	ldr	r2, [pc, #128]	@ (800e77c <MX_ADC1_Init+0x234>)
 800e6fa:	f44f 7105 	mov.w	r1, #532	@ 0x214
 800e6fe:	481a      	ldr	r0, [pc, #104]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e700:	f7ff f9a3 	bl	800da4a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_15CYCLES);
 800e704:	2201      	movs	r2, #1
 800e706:	491d      	ldr	r1, [pc, #116]	@ (800e77c <MX_ADC1_Init+0x234>)
 800e708:	4817      	ldr	r0, [pc, #92]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e70a:	f7ff f9ee 	bl	800daea <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_15);
 800e70e:	4a1c      	ldr	r2, [pc, #112]	@ (800e780 <MX_ADC1_Init+0x238>)
 800e710:	f240 2119 	movw	r1, #537	@ 0x219
 800e714:	4814      	ldr	r0, [pc, #80]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e716:	f7ff f998 	bl	800da4a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_15CYCLES);
 800e71a:	2201      	movs	r2, #1
 800e71c:	4918      	ldr	r1, [pc, #96]	@ (800e780 <MX_ADC1_Init+0x238>)
 800e71e:	4812      	ldr	r0, [pc, #72]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e720:	f7ff f9e3 	bl	800daea <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_8);
 800e724:	4a17      	ldr	r2, [pc, #92]	@ (800e784 <MX_ADC1_Init+0x23c>)
 800e726:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e72a:	480f      	ldr	r0, [pc, #60]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e72c:	f7ff f98d 	bl	800da4a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_15CYCLES);
 800e730:	2201      	movs	r2, #1
 800e732:	4914      	ldr	r1, [pc, #80]	@ (800e784 <MX_ADC1_Init+0x23c>)
 800e734:	480c      	ldr	r0, [pc, #48]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e736:	f7ff f9d8 	bl	800daea <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_9);
 800e73a:	4a13      	ldr	r2, [pc, #76]	@ (800e788 <MX_ADC1_Init+0x240>)
 800e73c:	f240 1105 	movw	r1, #261	@ 0x105
 800e740:	4809      	ldr	r0, [pc, #36]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e742:	f7ff f982 	bl	800da4a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_15CYCLES);
 800e746:	2201      	movs	r2, #1
 800e748:	490f      	ldr	r1, [pc, #60]	@ (800e788 <MX_ADC1_Init+0x240>)
 800e74a:	4807      	ldr	r0, [pc, #28]	@ (800e768 <MX_ADC1_Init+0x220>)
 800e74c:	f7ff f9cd 	bl	800daea <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800e750:	bf00      	nop
 800e752:	3748      	adds	r7, #72	@ 0x48
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}
 800e758:	40020800 	.word	0x40020800
 800e75c:	40020000 	.word	0x40020000
 800e760:	40020400 	.word	0x40020400
 800e764:	40026400 	.word	0x40026400
 800e768:	40012000 	.word	0x40012000
 800e76c:	40012300 	.word	0x40012300
 800e770:	0030000b 	.word	0x0030000b
 800e774:	0060000c 	.word	0x0060000c
 800e778:	0090000d 	.word	0x0090000d
 800e77c:	00c0000e 	.word	0x00c0000e
 800e780:	00f0000f 	.word	0x00f0000f
 800e784:	03800008 	.word	0x03800008
 800e788:	03b00009 	.word	0x03b00009

0800e78c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800e792:	463b      	mov	r3, r7
 800e794:	2200      	movs	r2, #0
 800e796:	601a      	str	r2, [r3, #0]
 800e798:	605a      	str	r2, [r3, #4]
 800e79a:	609a      	str	r2, [r3, #8]
 800e79c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800e79e:	4b21      	ldr	r3, [pc, #132]	@ (800e824 <MX_ADC3_Init+0x98>)
 800e7a0:	4a21      	ldr	r2, [pc, #132]	@ (800e828 <MX_ADC3_Init+0x9c>)
 800e7a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800e7a4:	4b1f      	ldr	r3, [pc, #124]	@ (800e824 <MX_ADC3_Init+0x98>)
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800e7aa:	4b1e      	ldr	r3, [pc, #120]	@ (800e824 <MX_ADC3_Init+0x98>)
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800e7b0:	4b1c      	ldr	r3, [pc, #112]	@ (800e824 <MX_ADC3_Init+0x98>)
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800e7b6:	4b1b      	ldr	r3, [pc, #108]	@ (800e824 <MX_ADC3_Init+0x98>)
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800e7bc:	4b19      	ldr	r3, [pc, #100]	@ (800e824 <MX_ADC3_Init+0x98>)
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e7c4:	4b17      	ldr	r3, [pc, #92]	@ (800e824 <MX_ADC3_Init+0x98>)
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e7ca:	4b16      	ldr	r3, [pc, #88]	@ (800e824 <MX_ADC3_Init+0x98>)
 800e7cc:	4a17      	ldr	r2, [pc, #92]	@ (800e82c <MX_ADC3_Init+0xa0>)
 800e7ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e7d0:	4b14      	ldr	r3, [pc, #80]	@ (800e824 <MX_ADC3_Init+0x98>)
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800e7d6:	4b13      	ldr	r3, [pc, #76]	@ (800e824 <MX_ADC3_Init+0x98>)
 800e7d8:	2201      	movs	r2, #1
 800e7da:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800e7dc:	4b11      	ldr	r3, [pc, #68]	@ (800e824 <MX_ADC3_Init+0x98>)
 800e7de:	2200      	movs	r2, #0
 800e7e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e7e4:	4b0f      	ldr	r3, [pc, #60]	@ (800e824 <MX_ADC3_Init+0x98>)
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800e7ea:	480e      	ldr	r0, [pc, #56]	@ (800e824 <MX_ADC3_Init+0x98>)
 800e7ec:	f001 fa40 	bl	800fc70 <HAL_ADC_Init>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d001      	beq.n	800e7fa <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800e7f6:	f000 fcf7 	bl	800f1e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800e7fa:	2302      	movs	r3, #2
 800e7fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e7fe:	2301      	movs	r3, #1
 800e800:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e802:	2300      	movs	r3, #0
 800e804:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800e806:	463b      	mov	r3, r7
 800e808:	4619      	mov	r1, r3
 800e80a:	4806      	ldr	r0, [pc, #24]	@ (800e824 <MX_ADC3_Init+0x98>)
 800e80c:	f001 fa74 	bl	800fcf8 <HAL_ADC_ConfigChannel>
 800e810:	4603      	mov	r3, r0
 800e812:	2b00      	cmp	r3, #0
 800e814:	d001      	beq.n	800e81a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800e816:	f000 fce7 	bl	800f1e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800e81a:	bf00      	nop
 800e81c:	3710      	adds	r7, #16
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}
 800e822:	bf00      	nop
 800e824:	200035d0 	.word	0x200035d0
 800e828:	40012200 	.word	0x40012200
 800e82c:	0f000001 	.word	0x0f000001

0800e830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b08c      	sub	sp, #48	@ 0x30
 800e834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800e836:	f107 0318 	add.w	r3, r7, #24
 800e83a:	2200      	movs	r2, #0
 800e83c:	601a      	str	r2, [r3, #0]
 800e83e:	605a      	str	r2, [r3, #4]
 800e840:	609a      	str	r2, [r3, #8]
 800e842:	60da      	str	r2, [r3, #12]
 800e844:	611a      	str	r2, [r3, #16]
 800e846:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e848:	463b      	mov	r3, r7
 800e84a:	2200      	movs	r2, #0
 800e84c:	601a      	str	r2, [r3, #0]
 800e84e:	605a      	str	r2, [r3, #4]
 800e850:	609a      	str	r2, [r3, #8]
 800e852:	60da      	str	r2, [r3, #12]
 800e854:	611a      	str	r2, [r3, #16]
 800e856:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800e858:	2002      	movs	r0, #2
 800e85a:	f7ff fc17 	bl	800e08c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = SENSOR_SCL_Pin|SENSOR_SDA_Pin;
 800e85e:	23c0      	movs	r3, #192	@ 0xc0
 800e860:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800e862:	2302      	movs	r3, #2
 800e864:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800e866:	2303      	movs	r3, #3
 800e868:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800e86a:	2301      	movs	r3, #1
 800e86c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e86e:	2300      	movs	r3, #0
 800e870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800e872:	2304      	movs	r3, #4
 800e874:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e876:	463b      	mov	r3, r7
 800e878:	4619      	mov	r1, r3
 800e87a:	4816      	ldr	r0, [pc, #88]	@ (800e8d4 <MX_I2C1_Init+0xa4>)
 800e87c:	f002 fd55 	bl	801132a <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800e880:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e884:	f7ff fc1a 	bl	800e0bc <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800e888:	4813      	ldr	r0, [pc, #76]	@ (800e8d8 <MX_I2C1_Init+0xa8>)
 800e88a:	f7ff fb12 	bl	800deb2 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800e88e:	4812      	ldr	r0, [pc, #72]	@ (800e8d8 <MX_I2C1_Init+0xa8>)
 800e890:	f7ff faec 	bl	800de6c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800e894:	4810      	ldr	r0, [pc, #64]	@ (800e8d8 <MX_I2C1_Init+0xa8>)
 800e896:	f7ff fad9 	bl	800de4c <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800e89a:	2300      	movs	r3, #0
 800e89c:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800e89e:	4b0f      	ldr	r3, [pc, #60]	@ (800e8dc <MX_I2C1_Init+0xac>)
 800e8a0:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800e8aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e8ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800e8b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e8b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800e8b6:	f107 0318 	add.w	r3, r7, #24
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	4806      	ldr	r0, [pc, #24]	@ (800e8d8 <MX_I2C1_Init+0xa8>)
 800e8be:	f002 ff0b 	bl	80116d8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800e8c2:	2100      	movs	r1, #0
 800e8c4:	4804      	ldr	r0, [pc, #16]	@ (800e8d8 <MX_I2C1_Init+0xa8>)
 800e8c6:	f7ff fae1 	bl	800de8c <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800e8ca:	bf00      	nop
 800e8cc:	3730      	adds	r7, #48	@ 0x30
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	40020400 	.word	0x40020400
 800e8d8:	40005400 	.word	0x40005400
 800e8dc:	000186a0 	.word	0x000186a0

0800e8e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b08c      	sub	sp, #48	@ 0x30
 800e8e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800e8e6:	f107 0318 	add.w	r3, r7, #24
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	601a      	str	r2, [r3, #0]
 800e8ee:	605a      	str	r2, [r3, #4]
 800e8f0:	609a      	str	r2, [r3, #8]
 800e8f2:	60da      	str	r2, [r3, #12]
 800e8f4:	611a      	str	r2, [r3, #16]
 800e8f6:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8f8:	463b      	mov	r3, r7
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	601a      	str	r2, [r3, #0]
 800e8fe:	605a      	str	r2, [r3, #4]
 800e900:	609a      	str	r2, [r3, #8]
 800e902:	60da      	str	r2, [r3, #12]
 800e904:	611a      	str	r2, [r3, #16]
 800e906:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800e908:	2002      	movs	r0, #2
 800e90a:	f7ff fbbf 	bl	800e08c <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = EXP_SCL_Pin|EXP_SDA_Pin;
 800e90e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800e912:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800e914:	2302      	movs	r3, #2
 800e916:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800e918:	2303      	movs	r3, #3
 800e91a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800e91c:	2301      	movs	r3, #1
 800e91e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e920:	2300      	movs	r3, #0
 800e922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800e924:	2304      	movs	r3, #4
 800e926:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e928:	463b      	mov	r3, r7
 800e92a:	4619      	mov	r1, r3
 800e92c:	4828      	ldr	r0, [pc, #160]	@ (800e9d0 <MX_I2C2_Init+0xf0>)
 800e92e:	f002 fcfc 	bl	801132a <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 800e932:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e936:	f7ff fbc1 	bl	800e0bc <LL_APB1_GRP1_EnableClock>

  /* I2C2 interrupt Init */
  NVIC_SetPriority(I2C2_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800e93a:	f7fe fffd 	bl	800d938 <__NVIC_GetPriorityGrouping>
 800e93e:	4603      	mov	r3, r0
 800e940:	2200      	movs	r2, #0
 800e942:	2100      	movs	r1, #0
 800e944:	4618      	mov	r0, r3
 800e946:	f7ff f84d 	bl	800d9e4 <NVIC_EncodePriority>
 800e94a:	4603      	mov	r3, r0
 800e94c:	4619      	mov	r1, r3
 800e94e:	2021      	movs	r0, #33	@ 0x21
 800e950:	f7ff f81e 	bl	800d990 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C2_EV_IRQn);
 800e954:	2021      	movs	r0, #33	@ 0x21
 800e956:	f7fe fffd 	bl	800d954 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C2_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800e95a:	f7fe ffed 	bl	800d938 <__NVIC_GetPriorityGrouping>
 800e95e:	4603      	mov	r3, r0
 800e960:	2200      	movs	r2, #0
 800e962:	2100      	movs	r1, #0
 800e964:	4618      	mov	r0, r3
 800e966:	f7ff f83d 	bl	800d9e4 <NVIC_EncodePriority>
 800e96a:	4603      	mov	r3, r0
 800e96c:	4619      	mov	r1, r3
 800e96e:	2022      	movs	r0, #34	@ 0x22
 800e970:	f7ff f80e 	bl	800d990 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C2_ER_IRQn);
 800e974:	2022      	movs	r0, #34	@ 0x22
 800e976:	f7fe ffed 	bl	800d954 <__NVIC_EnableIRQ>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 800e97a:	4816      	ldr	r0, [pc, #88]	@ (800e9d4 <MX_I2C2_Init+0xf4>)
 800e97c:	f7ff fa99 	bl	800deb2 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 800e980:	4814      	ldr	r0, [pc, #80]	@ (800e9d4 <MX_I2C2_Init+0xf4>)
 800e982:	f7ff fa73 	bl	800de6c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 800e986:	4813      	ldr	r0, [pc, #76]	@ (800e9d4 <MX_I2C2_Init+0xf4>)
 800e988:	f7ff fa60 	bl	800de4c <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800e98c:	2300      	movs	r3, #0
 800e98e:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800e990:	4b11      	ldr	r3, [pc, #68]	@ (800e9d8 <MX_I2C2_Init+0xf8>)
 800e992:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800e994:	2300      	movs	r3, #0
 800e996:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 36;
 800e998:	2324      	movs	r3, #36	@ 0x24
 800e99a:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800e99c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e9a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800e9a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e9a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 800e9a8:	f107 0318 	add.w	r3, r7, #24
 800e9ac:	4619      	mov	r1, r3
 800e9ae:	4809      	ldr	r0, [pc, #36]	@ (800e9d4 <MX_I2C2_Init+0xf4>)
 800e9b0:	f002 fe92 	bl	80116d8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	4807      	ldr	r0, [pc, #28]	@ (800e9d4 <MX_I2C2_Init+0xf4>)
 800e9b8:	f7ff fa68 	bl	800de8c <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */
  LL_I2C_EnableIT_EVT(I2C2);
 800e9bc:	4805      	ldr	r0, [pc, #20]	@ (800e9d4 <MX_I2C2_Init+0xf4>)
 800e9be:	f7ff fa88 	bl	800ded2 <LL_I2C_EnableIT_EVT>
  //  LL_I2C_EnableIT_ERR(I2C2);
  LL_I2C_Enable(I2C2);
 800e9c2:	4804      	ldr	r0, [pc, #16]	@ (800e9d4 <MX_I2C2_Init+0xf4>)
 800e9c4:	f7ff fa32 	bl	800de2c <LL_I2C_Enable>
  /* USER CODE END I2C2_Init 2 */

}
 800e9c8:	bf00      	nop
 800e9ca:	3730      	adds	r7, #48	@ 0x30
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	40020400 	.word	0x40020400
 800e9d4:	40005800 	.word	0x40005800
 800e9d8:	000186a0 	.word	0x000186a0

0800e9dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b090      	sub	sp, #64	@ 0x40
 800e9e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800e9e2:	f107 0318 	add.w	r3, r7, #24
 800e9e6:	2228      	movs	r2, #40	@ 0x28
 800e9e8:	2100      	movs	r1, #0
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f004 f8f0 	bl	8012bd0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e9f0:	463b      	mov	r3, r7
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	601a      	str	r2, [r3, #0]
 800e9f6:	605a      	str	r2, [r3, #4]
 800e9f8:	609a      	str	r2, [r3, #8]
 800e9fa:	60da      	str	r2, [r3, #12]
 800e9fc:	611a      	str	r2, [r3, #16]
 800e9fe:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800ea00:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ea04:	f7ff fb72 	bl	800e0ec <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800ea08:	2001      	movs	r0, #1
 800ea0a:	f7ff fb3f 	bl	800e08c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LASRR_SCK_Pin|LASER_MISO_Pin|LASER_MOSI_Pin;
 800ea0e:	23e0      	movs	r3, #224	@ 0xe0
 800ea10:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800ea12:	2302      	movs	r3, #2
 800ea14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800ea16:	2303      	movs	r3, #3
 800ea18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800ea22:	2305      	movs	r3, #5
 800ea24:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ea26:	463b      	mov	r3, r7
 800ea28:	4619      	mov	r1, r3
 800ea2a:	4815      	ldr	r0, [pc, #84]	@ (800ea80 <MX_SPI1_Init+0xa4>)
 800ea2c:	f002 fc7d 	bl	801132a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800ea30:	2300      	movs	r3, #0
 800ea32:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800ea34:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800ea38:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800ea42:	2301      	movs	r3, #1
 800ea44:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800ea46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ea4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 800ea4c:	2320      	movs	r3, #32
 800ea4e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800ea50:	2300      	movs	r3, #0
 800ea52:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800ea54:	2300      	movs	r3, #0
 800ea56:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 800ea58:	230a      	movs	r3, #10
 800ea5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800ea5c:	f107 0318 	add.w	r3, r7, #24
 800ea60:	4619      	mov	r1, r3
 800ea62:	4808      	ldr	r0, [pc, #32]	@ (800ea84 <MX_SPI1_Init+0xa8>)
 800ea64:	f002 ffc7 	bl	80119f6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800ea68:	2100      	movs	r1, #0
 800ea6a:	4806      	ldr	r0, [pc, #24]	@ (800ea84 <MX_SPI1_Init+0xa8>)
 800ea6c:	f7ff fbb0 	bl	800e1d0 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 800ea70:	4804      	ldr	r0, [pc, #16]	@ (800ea84 <MX_SPI1_Init+0xa8>)
 800ea72:	f7ff fb9d 	bl	800e1b0 <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 800ea76:	bf00      	nop
 800ea78:	3740      	adds	r7, #64	@ 0x40
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	40020000 	.word	0x40020000
 800ea84:	40013000 	.word	0x40013000

0800ea88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b090      	sub	sp, #64	@ 0x40
 800ea8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800ea8e:	f107 0318 	add.w	r3, r7, #24
 800ea92:	2228      	movs	r2, #40	@ 0x28
 800ea94:	2100      	movs	r1, #0
 800ea96:	4618      	mov	r0, r3
 800ea98:	f004 f89a 	bl	8012bd0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea9c:	463b      	mov	r3, r7
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	601a      	str	r2, [r3, #0]
 800eaa2:	605a      	str	r2, [r3, #4]
 800eaa4:	609a      	str	r2, [r3, #8]
 800eaa6:	60da      	str	r2, [r3, #12]
 800eaa8:	611a      	str	r2, [r3, #16]
 800eaaa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800eaac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800eab0:	f7ff fb04 	bl	800e0bc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800eab4:	2002      	movs	r0, #2
 800eab6:	f7ff fae9 	bl	800e08c <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = PHOTO_SCK_Pin|PHOTO_MISO_Pin|PHOTO_MOSI_Pin;
 800eaba:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800eabe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800eac0:	2302      	movs	r3, #2
 800eac2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800eac4:	2303      	movs	r3, #3
 800eac6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800eac8:	2300      	movs	r3, #0
 800eaca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800eacc:	2300      	movs	r3, #0
 800eace:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800ead0:	2305      	movs	r3, #5
 800ead2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ead4:	463b      	mov	r3, r7
 800ead6:	4619      	mov	r1, r3
 800ead8:	4814      	ldr	r0, [pc, #80]	@ (800eb2c <MX_SPI2_Init+0xa4>)
 800eada:	f002 fc26 	bl	801132a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800eade:	2300      	movs	r3, #0
 800eae0:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800eae2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800eae6:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800eae8:	2300      	movs	r3, #0
 800eaea:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800eaec:	2300      	movs	r3, #0
 800eaee:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800eaf4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eaf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800eafa:	2318      	movs	r3, #24
 800eafc:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800eafe:	2300      	movs	r3, #0
 800eb00:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800eb02:	2300      	movs	r3, #0
 800eb04:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 800eb06:	230a      	movs	r3, #10
 800eb08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800eb0a:	f107 0318 	add.w	r3, r7, #24
 800eb0e:	4619      	mov	r1, r3
 800eb10:	4807      	ldr	r0, [pc, #28]	@ (800eb30 <MX_SPI2_Init+0xa8>)
 800eb12:	f002 ff70 	bl	80119f6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800eb16:	2100      	movs	r1, #0
 800eb18:	4805      	ldr	r0, [pc, #20]	@ (800eb30 <MX_SPI2_Init+0xa8>)
 800eb1a:	f7ff fb59 	bl	800e1d0 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */
  LL_SPI_Enable(SPI2);
 800eb1e:	4804      	ldr	r0, [pc, #16]	@ (800eb30 <MX_SPI2_Init+0xa8>)
 800eb20:	f7ff fb46 	bl	800e1b0 <LL_SPI_Enable>
  /* USER CODE END SPI2_Init 2 */

}
 800eb24:	bf00      	nop
 800eb26:	3740      	adds	r7, #64	@ 0x40
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	40020400 	.word	0x40020400
 800eb30:	40003800 	.word	0x40003800

0800eb34 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b090      	sub	sp, #64	@ 0x40
 800eb38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800eb3a:	f107 0318 	add.w	r3, r7, #24
 800eb3e:	2228      	movs	r2, #40	@ 0x28
 800eb40:	2100      	movs	r1, #0
 800eb42:	4618      	mov	r0, r3
 800eb44:	f004 f844 	bl	8012bd0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb48:	463b      	mov	r3, r7
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	601a      	str	r2, [r3, #0]
 800eb4e:	605a      	str	r2, [r3, #4]
 800eb50:	609a      	str	r2, [r3, #8]
 800eb52:	60da      	str	r2, [r3, #12]
 800eb54:	611a      	str	r2, [r3, #16]
 800eb56:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800eb58:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800eb5c:	f7ff faae 	bl	800e0bc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800eb60:	2004      	movs	r0, #4
 800eb62:	f7ff fa93 	bl	800e08c <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = TEC_SCK_Pin|TEC_MISO_Pin|TEC_MOSI_Pin;
 800eb66:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800eb6a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800eb6c:	2302      	movs	r3, #2
 800eb6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800eb70:	2303      	movs	r3, #3
 800eb72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800eb74:	2300      	movs	r3, #0
 800eb76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800eb7c:	2306      	movs	r3, #6
 800eb7e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800eb80:	463b      	mov	r3, r7
 800eb82:	4619      	mov	r1, r3
 800eb84:	4814      	ldr	r0, [pc, #80]	@ (800ebd8 <MX_SPI3_Init+0xa4>)
 800eb86:	f002 fbd0 	bl	801132a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800eb8e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800eb92:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800eb94:	2300      	movs	r3, #0
 800eb96:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800eba0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800eba6:	2318      	movs	r3, #24
 800eba8:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 800ebb2:	230a      	movs	r3, #10
 800ebb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800ebb6:	f107 0318 	add.w	r3, r7, #24
 800ebba:	4619      	mov	r1, r3
 800ebbc:	4807      	ldr	r0, [pc, #28]	@ (800ebdc <MX_SPI3_Init+0xa8>)
 800ebbe:	f002 ff1a 	bl	80119f6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 800ebc2:	2100      	movs	r1, #0
 800ebc4:	4805      	ldr	r0, [pc, #20]	@ (800ebdc <MX_SPI3_Init+0xa8>)
 800ebc6:	f7ff fb03 	bl	800e1d0 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */
  LL_SPI_Enable(SPI3);
 800ebca:	4804      	ldr	r0, [pc, #16]	@ (800ebdc <MX_SPI3_Init+0xa8>)
 800ebcc:	f7ff faf0 	bl	800e1b0 <LL_SPI_Enable>
  /* USER CODE END SPI3_Init 2 */

}
 800ebd0:	bf00      	nop
 800ebd2:	3740      	adds	r7, #64	@ 0x40
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	40020800 	.word	0x40020800
 800ebdc:	40003c00 	.word	0x40003c00

0800ebe0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b09a      	sub	sp, #104	@ 0x68
 800ebe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800ebe6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ebea:	2200      	movs	r2, #0
 800ebec:	601a      	str	r2, [r3, #0]
 800ebee:	605a      	str	r2, [r3, #4]
 800ebf0:	609a      	str	r2, [r3, #8]
 800ebf2:	60da      	str	r2, [r3, #12]
 800ebf4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800ebf6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800ebfa:	2220      	movs	r2, #32
 800ebfc:	2100      	movs	r1, #0
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f003 ffe6 	bl	8012bd0 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 800ec04:	f107 031c 	add.w	r3, r7, #28
 800ec08:	2200      	movs	r2, #0
 800ec0a:	601a      	str	r2, [r3, #0]
 800ec0c:	605a      	str	r2, [r3, #4]
 800ec0e:	609a      	str	r2, [r3, #8]
 800ec10:	60da      	str	r2, [r3, #12]
 800ec12:	611a      	str	r2, [r3, #16]
 800ec14:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec16:	1d3b      	adds	r3, r7, #4
 800ec18:	2200      	movs	r2, #0
 800ec1a:	601a      	str	r2, [r3, #0]
 800ec1c:	605a      	str	r2, [r3, #4]
 800ec1e:	609a      	str	r2, [r3, #8]
 800ec20:	60da      	str	r2, [r3, #12]
 800ec22:	611a      	str	r2, [r3, #16]
 800ec24:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800ec26:	2001      	movs	r0, #1
 800ec28:	f7ff fa60 	bl	800e0ec <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 800ec2c:	2353      	movs	r3, #83	@ 0x53
 800ec2e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800ec32:	2300      	movs	r3, #0
 800ec34:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.Autoreload = 9999;
 800ec36:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ec3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	663b      	str	r3, [r7, #96]	@ 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 800ec40:	2300      	movs	r3, #0
 800ec42:	667b      	str	r3, [r7, #100]	@ 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800ec44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ec48:	4619      	mov	r1, r3
 800ec4a:	482f      	ldr	r0, [pc, #188]	@ (800ed08 <MX_TIM1_Init+0x128>)
 800ec4c:	f002 ff98 	bl	8011b80 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800ec50:	482d      	ldr	r0, [pc, #180]	@ (800ed08 <MX_TIM1_Init+0x128>)
 800ec52:	f7ff fad0 	bl	800e1f6 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800ec56:	2100      	movs	r1, #0
 800ec58:	482b      	ldr	r0, [pc, #172]	@ (800ed08 <MX_TIM1_Init+0x128>)
 800ec5a:	f7ff fb67 	bl	800e32c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800ec5e:	2101      	movs	r1, #1
 800ec60:	4829      	ldr	r0, [pc, #164]	@ (800ed08 <MX_TIM1_Init+0x128>)
 800ec62:	f7ff fb1f 	bl	800e2a4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800ec66:	2360      	movs	r3, #96	@ 0x60
 800ec68:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 800ec72:	2300      	movs	r3, #0
 800ec74:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800ec76:	2300      	movs	r3, #0
 800ec78:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800ec82:	2300      	movs	r3, #0
 800ec84:	653b      	str	r3, [r7, #80]	@ 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800ec86:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	2101      	movs	r1, #1
 800ec8e:	481e      	ldr	r0, [pc, #120]	@ (800ed08 <MX_TIM1_Init+0x128>)
 800ec90:	f003 f810 	bl	8011cb4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 800ec94:	2101      	movs	r1, #1
 800ec96:	481c      	ldr	r0, [pc, #112]	@ (800ed08 <MX_TIM1_Init+0x128>)
 800ec98:	f7ff fabe 	bl	800e218 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800ec9c:	2100      	movs	r1, #0
 800ec9e:	481a      	ldr	r0, [pc, #104]	@ (800ed08 <MX_TIM1_Init+0x128>)
 800eca0:	f7ff fb59 	bl	800e356 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800eca4:	4818      	ldr	r0, [pc, #96]	@ (800ed08 <MX_TIM1_Init+0x128>)
 800eca6:	f7ff fb69 	bl	800e37c <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800ecc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ecc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800ecca:	f107 031c 	add.w	r3, r7, #28
 800ecce:	4619      	mov	r1, r3
 800ecd0:	480d      	ldr	r0, [pc, #52]	@ (800ed08 <MX_TIM1_Init+0x128>)
 800ecd2:	f003 f830 	bl	8011d36 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800ecd6:	2010      	movs	r0, #16
 800ecd8:	f7ff f9d8 	bl	800e08c <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PE9   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = IR_LED_PWM_Pin;
 800ecdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ece0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800ece2:	2302      	movs	r3, #2
 800ece4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800ece6:	2300      	movs	r3, #0
 800ece8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800ecea:	2300      	movs	r3, #0
 800ecec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(IR_LED_PWM_GPIO_Port, &GPIO_InitStruct);
 800ecf6:	1d3b      	adds	r3, r7, #4
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	4804      	ldr	r0, [pc, #16]	@ (800ed0c <MX_TIM1_Init+0x12c>)
 800ecfc:	f002 fb15 	bl	801132a <LL_GPIO_Init>

}
 800ed00:	bf00      	nop
 800ed02:	3768      	adds	r7, #104	@ 0x68
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}
 800ed08:	40010000 	.word	0x40010000
 800ed0c:	40021000 	.word	0x40021000

0800ed10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800ed16:	1d3b      	adds	r3, r7, #4
 800ed18:	2200      	movs	r2, #0
 800ed1a:	601a      	str	r2, [r3, #0]
 800ed1c:	605a      	str	r2, [r3, #4]
 800ed1e:	609a      	str	r2, [r3, #8]
 800ed20:	60da      	str	r2, [r3, #12]
 800ed22:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800ed24:	2002      	movs	r0, #2
 800ed26:	f7ff f9c9 	bl	800e0bc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 800ed2a:	2353      	movs	r3, #83	@ 0x53
 800ed2c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9999;
 800ed32:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ed36:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800ed3c:	1d3b      	adds	r3, r7, #4
 800ed3e:	4619      	mov	r1, r3
 800ed40:	480a      	ldr	r0, [pc, #40]	@ (800ed6c <MX_TIM3_Init+0x5c>)
 800ed42:	f002 ff1d 	bl	8011b80 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800ed46:	4809      	ldr	r0, [pc, #36]	@ (800ed6c <MX_TIM3_Init+0x5c>)
 800ed48:	f7ff fa55 	bl	800e1f6 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800ed4c:	2100      	movs	r1, #0
 800ed4e:	4807      	ldr	r0, [pc, #28]	@ (800ed6c <MX_TIM3_Init+0x5c>)
 800ed50:	f7ff faec 	bl	800e32c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800ed54:	2100      	movs	r1, #0
 800ed56:	4805      	ldr	r0, [pc, #20]	@ (800ed6c <MX_TIM3_Init+0x5c>)
 800ed58:	f7ff fafd 	bl	800e356 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800ed5c:	4803      	ldr	r0, [pc, #12]	@ (800ed6c <MX_TIM3_Init+0x5c>)
 800ed5e:	f7ff fb0d 	bl	800e37c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800ed62:	bf00      	nop
 800ed64:	3718      	adds	r7, #24
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	40000400 	.word	0x40000400

0800ed70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b08a      	sub	sp, #40	@ 0x28
 800ed74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ed76:	f107 0320 	add.w	r3, r7, #32
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	601a      	str	r2, [r3, #0]
 800ed7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ed80:	1d3b      	adds	r3, r7, #4
 800ed82:	2200      	movs	r2, #0
 800ed84:	601a      	str	r2, [r3, #0]
 800ed86:	605a      	str	r2, [r3, #4]
 800ed88:	609a      	str	r2, [r3, #8]
 800ed8a:	60da      	str	r2, [r3, #12]
 800ed8c:	611a      	str	r2, [r3, #16]
 800ed8e:	615a      	str	r2, [r3, #20]
 800ed90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800ed92:	4b32      	ldr	r3, [pc, #200]	@ (800ee5c <MX_TIM4_Init+0xec>)
 800ed94:	4a32      	ldr	r2, [pc, #200]	@ (800ee60 <MX_TIM4_Init+0xf0>)
 800ed96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800ed98:	4b30      	ldr	r3, [pc, #192]	@ (800ee5c <MX_TIM4_Init+0xec>)
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ed9e:	4b2f      	ldr	r3, [pc, #188]	@ (800ee5c <MX_TIM4_Init+0xec>)
 800eda0:	2200      	movs	r2, #0
 800eda2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800eda4:	4b2d      	ldr	r3, [pc, #180]	@ (800ee5c <MX_TIM4_Init+0xec>)
 800eda6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800edaa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800edac:	4b2b      	ldr	r3, [pc, #172]	@ (800ee5c <MX_TIM4_Init+0xec>)
 800edae:	2200      	movs	r2, #0
 800edb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800edb2:	4b2a      	ldr	r3, [pc, #168]	@ (800ee5c <MX_TIM4_Init+0xec>)
 800edb4:	2200      	movs	r2, #0
 800edb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800edb8:	4828      	ldr	r0, [pc, #160]	@ (800ee5c <MX_TIM4_Init+0xec>)
 800edba:	f001 fd0b 	bl	80107d4 <HAL_TIM_OC_Init>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d001      	beq.n	800edc8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800edc4:	f000 fa10 	bl	800f1e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800edc8:	2300      	movs	r3, #0
 800edca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800edcc:	2300      	movs	r3, #0
 800edce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800edd0:	f107 0320 	add.w	r3, r7, #32
 800edd4:	4619      	mov	r1, r3
 800edd6:	4821      	ldr	r0, [pc, #132]	@ (800ee5c <MX_TIM4_Init+0xec>)
 800edd8:	f002 f804 	bl	8010de4 <HAL_TIMEx_MasterConfigSynchronization>
 800eddc:	4603      	mov	r3, r0
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d001      	beq.n	800ede6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800ede2:	f000 fa01 	bl	800f1e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800ede6:	2300      	movs	r3, #0
 800ede8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800edea:	2300      	movs	r3, #0
 800edec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800edee:	2300      	movs	r3, #0
 800edf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800edf2:	2300      	movs	r3, #0
 800edf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800edf6:	1d3b      	adds	r3, r7, #4
 800edf8:	2200      	movs	r2, #0
 800edfa:	4619      	mov	r1, r3
 800edfc:	4817      	ldr	r0, [pc, #92]	@ (800ee5c <MX_TIM4_Init+0xec>)
 800edfe:	f001 fd39 	bl	8010874 <HAL_TIM_OC_ConfigChannel>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d001      	beq.n	800ee0c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800ee08:	f000 f9ee 	bl	800f1e8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ee0c:	1d3b      	adds	r3, r7, #4
 800ee0e:	2204      	movs	r2, #4
 800ee10:	4619      	mov	r1, r3
 800ee12:	4812      	ldr	r0, [pc, #72]	@ (800ee5c <MX_TIM4_Init+0xec>)
 800ee14:	f001 fd2e 	bl	8010874 <HAL_TIM_OC_ConfigChannel>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d001      	beq.n	800ee22 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800ee1e:	f000 f9e3 	bl	800f1e8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800ee22:	1d3b      	adds	r3, r7, #4
 800ee24:	2208      	movs	r2, #8
 800ee26:	4619      	mov	r1, r3
 800ee28:	480c      	ldr	r0, [pc, #48]	@ (800ee5c <MX_TIM4_Init+0xec>)
 800ee2a:	f001 fd23 	bl	8010874 <HAL_TIM_OC_ConfigChannel>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d001      	beq.n	800ee38 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 800ee34:	f000 f9d8 	bl	800f1e8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ee38:	1d3b      	adds	r3, r7, #4
 800ee3a:	220c      	movs	r2, #12
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	4807      	ldr	r0, [pc, #28]	@ (800ee5c <MX_TIM4_Init+0xec>)
 800ee40:	f001 fd18 	bl	8010874 <HAL_TIM_OC_ConfigChannel>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d001      	beq.n	800ee4e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800ee4a:	f000 f9cd 	bl	800f1e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800ee4e:	4803      	ldr	r0, [pc, #12]	@ (800ee5c <MX_TIM4_Init+0xec>)
 800ee50:	f000 fa5e 	bl	800f310 <HAL_TIM_MspPostInit>

}
 800ee54:	bf00      	nop
 800ee56:	3728      	adds	r7, #40	@ 0x28
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	20003618 	.word	0x20003618
 800ee60:	40000800 	.word	0x40000800

0800ee64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b08e      	sub	sp, #56	@ 0x38
 800ee68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800ee6a:	f107 031c 	add.w	r3, r7, #28
 800ee6e:	2200      	movs	r2, #0
 800ee70:	601a      	str	r2, [r3, #0]
 800ee72:	605a      	str	r2, [r3, #4]
 800ee74:	609a      	str	r2, [r3, #8]
 800ee76:	60da      	str	r2, [r3, #12]
 800ee78:	611a      	str	r2, [r3, #16]
 800ee7a:	615a      	str	r2, [r3, #20]
 800ee7c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee7e:	1d3b      	adds	r3, r7, #4
 800ee80:	2200      	movs	r2, #0
 800ee82:	601a      	str	r2, [r3, #0]
 800ee84:	605a      	str	r2, [r3, #4]
 800ee86:	609a      	str	r2, [r3, #8]
 800ee88:	60da      	str	r2, [r3, #12]
 800ee8a:	611a      	str	r2, [r3, #16]
 800ee8c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800ee8e:	2010      	movs	r0, #16
 800ee90:	f7ff f92c 	bl	800e0ec <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800ee94:	2001      	movs	r0, #1
 800ee96:	f7ff f8f9 	bl	800e08c <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = EXP_RS485_TX_Pin|EXP_RS485_RX_Pin;
 800ee9a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800ee9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800eea0:	2302      	movs	r3, #2
 800eea2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800eea4:	2303      	movs	r3, #3
 800eea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800eeac:	2300      	movs	r3, #0
 800eeae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800eeb0:	2307      	movs	r3, #7
 800eeb2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eeb4:	1d3b      	adds	r3, r7, #4
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	4818      	ldr	r0, [pc, #96]	@ (800ef1c <MX_USART1_UART_Init+0xb8>)
 800eeba:	f002 fa36 	bl	801132a <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800eebe:	f7fe fd3b 	bl	800d938 <__NVIC_GetPriorityGrouping>
 800eec2:	4603      	mov	r3, r0
 800eec4:	2200      	movs	r2, #0
 800eec6:	2100      	movs	r1, #0
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7fe fd8b 	bl	800d9e4 <NVIC_EncodePriority>
 800eece:	4603      	mov	r3, r0
 800eed0:	4619      	mov	r1, r3
 800eed2:	2025      	movs	r0, #37	@ 0x25
 800eed4:	f7fe fd5c 	bl	800d990 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800eed8:	2025      	movs	r0, #37	@ 0x25
 800eeda:	f7fe fd3b 	bl	800d954 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800eede:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800eee2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800eee4:	2300      	movs	r3, #0
 800eee6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800eee8:	2300      	movs	r3, #0
 800eeea:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800eeec:	2300      	movs	r3, #0
 800eeee:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800eef0:	230c      	movs	r3, #12
 800eef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800eef4:	2300      	movs	r3, #0
 800eef6:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800eef8:	2300      	movs	r3, #0
 800eefa:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800eefc:	f107 031c 	add.w	r3, r7, #28
 800ef00:	4619      	mov	r1, r3
 800ef02:	4807      	ldr	r0, [pc, #28]	@ (800ef20 <MX_USART1_UART_Init+0xbc>)
 800ef04:	f003 fb66 	bl	80125d4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800ef08:	4805      	ldr	r0, [pc, #20]	@ (800ef20 <MX_USART1_UART_Init+0xbc>)
 800ef0a:	f7ff fa57 	bl	800e3bc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800ef0e:	4804      	ldr	r0, [pc, #16]	@ (800ef20 <MX_USART1_UART_Init+0xbc>)
 800ef10:	f7ff fa44 	bl	800e39c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ef14:	bf00      	nop
 800ef16:	3738      	adds	r7, #56	@ 0x38
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	40020000 	.word	0x40020000
 800ef20:	40011000 	.word	0x40011000

0800ef24 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b08e      	sub	sp, #56	@ 0x38
 800ef28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800ef2a:	f107 031c 	add.w	r3, r7, #28
 800ef2e:	2200      	movs	r2, #0
 800ef30:	601a      	str	r2, [r3, #0]
 800ef32:	605a      	str	r2, [r3, #4]
 800ef34:	609a      	str	r2, [r3, #8]
 800ef36:	60da      	str	r2, [r3, #12]
 800ef38:	611a      	str	r2, [r3, #16]
 800ef3a:	615a      	str	r2, [r3, #20]
 800ef3c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ef3e:	1d3b      	adds	r3, r7, #4
 800ef40:	2200      	movs	r2, #0
 800ef42:	601a      	str	r2, [r3, #0]
 800ef44:	605a      	str	r2, [r3, #4]
 800ef46:	609a      	str	r2, [r3, #8]
 800ef48:	60da      	str	r2, [r3, #12]
 800ef4a:	611a      	str	r2, [r3, #16]
 800ef4c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800ef4e:	2020      	movs	r0, #32
 800ef50:	f7ff f8cc 	bl	800e0ec <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800ef54:	2004      	movs	r0, #4
 800ef56:	f7ff f899 	bl	800e08c <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = EXP_UART_TX_Pin|EXP_UART_RX_Pin;
 800ef5a:	23c0      	movs	r3, #192	@ 0xc0
 800ef5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800ef5e:	2302      	movs	r3, #2
 800ef60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800ef62:	2303      	movs	r3, #3
 800ef64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800ef66:	2300      	movs	r3, #0
 800ef68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800ef6e:	2308      	movs	r3, #8
 800ef70:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ef72:	1d3b      	adds	r3, r7, #4
 800ef74:	4619      	mov	r1, r3
 800ef76:	4819      	ldr	r0, [pc, #100]	@ (800efdc <MX_USART6_UART_Init+0xb8>)
 800ef78:	f002 f9d7 	bl	801132a <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800ef7c:	f7fe fcdc 	bl	800d938 <__NVIC_GetPriorityGrouping>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2200      	movs	r2, #0
 800ef84:	2100      	movs	r1, #0
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fe fd2c 	bl	800d9e4 <NVIC_EncodePriority>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	4619      	mov	r1, r3
 800ef90:	2047      	movs	r0, #71	@ 0x47
 800ef92:	f7fe fcfd 	bl	800d990 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800ef96:	2047      	movs	r0, #71	@ 0x47
 800ef98:	f7fe fcdc 	bl	800d954 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800ef9c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800efa0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800efa2:	2300      	movs	r3, #0
 800efa4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800efa6:	2300      	movs	r3, #0
 800efa8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800efaa:	2300      	movs	r3, #0
 800efac:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800efae:	230c      	movs	r3, #12
 800efb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800efb2:	2300      	movs	r3, #0
 800efb4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800efb6:	2300      	movs	r3, #0
 800efb8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800efba:	f107 031c 	add.w	r3, r7, #28
 800efbe:	4619      	mov	r1, r3
 800efc0:	4807      	ldr	r0, [pc, #28]	@ (800efe0 <MX_USART6_UART_Init+0xbc>)
 800efc2:	f003 fb07 	bl	80125d4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800efc6:	4806      	ldr	r0, [pc, #24]	@ (800efe0 <MX_USART6_UART_Init+0xbc>)
 800efc8:	f7ff f9f8 	bl	800e3bc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800efcc:	4804      	ldr	r0, [pc, #16]	@ (800efe0 <MX_USART6_UART_Init+0xbc>)
 800efce:	f7ff f9e5 	bl	800e39c <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800efd2:	bf00      	nop
 800efd4:	3738      	adds	r7, #56	@ 0x38
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	40020800 	.word	0x40020800
 800efe0:	40011400 	.word	0x40011400

0800efe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800efe8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800efec:	f7ff f84e 	bl	800e08c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800eff0:	f7fe fca2 	bl	800d938 <__NVIC_GetPriorityGrouping>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2200      	movs	r2, #0
 800eff8:	2100      	movs	r1, #0
 800effa:	4618      	mov	r0, r3
 800effc:	f7fe fcf2 	bl	800d9e4 <NVIC_EncodePriority>
 800f000:	4603      	mov	r3, r0
 800f002:	4619      	mov	r1, r3
 800f004:	2038      	movs	r0, #56	@ 0x38
 800f006:	f7fe fcc3 	bl	800d990 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800f00a:	2038      	movs	r0, #56	@ 0x38
 800f00c:	f7fe fca2 	bl	800d954 <__NVIC_EnableIRQ>

}
 800f010:	bf00      	nop
 800f012:	bd80      	pop	{r7, pc}

0800f014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b086      	sub	sp, #24
 800f018:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f01a:	463b      	mov	r3, r7
 800f01c:	2200      	movs	r2, #0
 800f01e:	601a      	str	r2, [r3, #0]
 800f020:	605a      	str	r2, [r3, #4]
 800f022:	609a      	str	r2, [r3, #8]
 800f024:	60da      	str	r2, [r3, #12]
 800f026:	611a      	str	r2, [r3, #16]
 800f028:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800f02a:	2010      	movs	r0, #16
 800f02c:	f7ff f82e 	bl	800e08c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800f030:	2004      	movs	r0, #4
 800f032:	f7ff f82b 	bl	800e08c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800f036:	2080      	movs	r0, #128	@ 0x80
 800f038:	f7ff f828 	bl	800e08c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800f03c:	2001      	movs	r0, #1
 800f03e:	f7ff f825 	bl	800e08c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800f042:	2002      	movs	r0, #2
 800f044:	f7ff f822 	bl	800e08c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800f048:	2008      	movs	r0, #8
 800f04a:	f7ff f81f 	bl	800e08c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, TEC_3_SWEN_Pin|TEC_4_SWEN_Pin|TEC_2_SWEN_Pin|TEC_1_SWEN_Pin
 800f04e:	f640 417c 	movw	r1, #3196	@ 0xc7c
 800f052:	4860      	ldr	r0, [pc, #384]	@ (800f1d4 <MX_GPIO_Init+0x1c0>)
 800f054:	f7ff f9d6 	bl	800e404 <LL_GPIO_ResetOutputPin>
                          |TEC_1_EN_Pin|LED_G_Pin|LED_B_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, TEC_2_EN_Pin|TEC_3_EN_Pin|TEC_4_EN_Pin);
 800f058:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800f05c:	485e      	ldr	r0, [pc, #376]	@ (800f1d8 <MX_GPIO_Init+0x1c4>)
 800f05e:	f7ff f9d1 	bl	800e404 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800f062:	2102      	movs	r1, #2
 800f064:	485d      	ldr	r0, [pc, #372]	@ (800f1dc <MX_GPIO_Init+0x1c8>)
 800f066:	f7ff f9cd 	bl	800e404 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, EXP_RS485_NRE_Pin|FRAM_CS_Pin|EF_5_EN_Pin|TEC_ADC_CS_Pin);
 800f06a:	f44f 719a 	mov.w	r1, #308	@ 0x134
 800f06e:	485c      	ldr	r0, [pc, #368]	@ (800f1e0 <MX_GPIO_Init+0x1cc>)
 800f070:	f7ff f9c8 	bl	800e404 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, SENSOR2_EN_Pin|SENSOR1_EN_Pin);
 800f074:	2130      	movs	r1, #48	@ 0x30
 800f076:	485b      	ldr	r0, [pc, #364]	@ (800f1e4 <MX_GPIO_Init+0x1d0>)
 800f078:	f7ff f9c4 	bl	800e404 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, LASER_DAC_CS_Pin|LASER_SW_EXT_CS_Pin|LASER_SW_INT_CS_Pin|LASER_DAC_LATCH_Pin
 800f07c:	f24f 0103 	movw	r1, #61443	@ 0xf003
 800f080:	4854      	ldr	r0, [pc, #336]	@ (800f1d4 <MX_GPIO_Init+0x1c0>)
 800f082:	f7ff f9b1 	bl	800e3e8 <LL_GPIO_SetOutputPin>
                          |TEC_2_CS_Pin|TEC_1_CS_Pin);

  /**/
  LL_GPIO_SetOutputPin(GPIOB, EXP_RS485_DE_Pin|TEC_4_CS_Pin|TEC_3_CS_Pin);
 800f086:	f44f 5198 	mov.w	r1, #4864	@ 0x1300
 800f08a:	4856      	ldr	r0, [pc, #344]	@ (800f1e4 <MX_GPIO_Init+0x1d0>)
 800f08c:	f7ff f9ac 	bl	800e3e8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOD, PHOTO_PD_CS_Pin|PHOTO_ADC_CS_Pin|PHOTO_ADC_CONV_Pin);
 800f090:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 800f094:	4852      	ldr	r0, [pc, #328]	@ (800f1e0 <MX_GPIO_Init+0x1cc>)
 800f096:	f7ff f9a7 	bl	800e3e8 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = TEC_3_SWEN_Pin|TEC_1_SWEN_Pin;
 800f09a:	2324      	movs	r3, #36	@ 0x24
 800f09c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800f09e:	2301      	movs	r3, #1
 800f0a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800f0aa:	2302      	movs	r3, #2
 800f0ac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f0ae:	463b      	mov	r3, r7
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	4848      	ldr	r0, [pc, #288]	@ (800f1d4 <MX_GPIO_Init+0x1c0>)
 800f0b4:	f002 f939 	bl	801132a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_4_SWEN_Pin|TEC_2_SWEN_Pin|TEC_1_EN_Pin|LED_G_Pin
 800f0b8:	f64f 435b 	movw	r3, #64603	@ 0xfc5b
 800f0bc:	603b      	str	r3, [r7, #0]
                          |LED_B_Pin|LASER_DAC_CS_Pin|LASER_SW_EXT_CS_Pin|LASER_SW_INT_CS_Pin
                          |LASER_DAC_LATCH_Pin|TEC_2_CS_Pin|TEC_1_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800f0be:	2301      	movs	r3, #1
 800f0c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f0ce:	463b      	mov	r3, r7
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	4840      	ldr	r0, [pc, #256]	@ (800f1d4 <MX_GPIO_Init+0x1c0>)
 800f0d4:	f002 f929 	bl	801132a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_2_EN_Pin|TEC_3_EN_Pin|TEC_4_EN_Pin;
 800f0d8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800f0dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800f0de:	2301      	movs	r3, #1
 800f0e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f0ee:	463b      	mov	r3, r7
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	4839      	ldr	r0, [pc, #228]	@ (800f1d8 <MX_GPIO_Init+0x1c4>)
 800f0f4:	f002 f919 	bl	801132a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin;
 800f0f8:	2302      	movs	r3, #2
 800f0fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800f100:	2300      	movs	r3, #0
 800f102:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800f104:	2300      	movs	r3, #0
 800f106:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800f108:	2300      	movs	r3, #0
 800f10a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(WD_DONE_GPIO_Port, &GPIO_InitStruct);
 800f10c:	463b      	mov	r3, r7
 800f10e:	4619      	mov	r1, r3
 800f110:	4832      	ldr	r0, [pc, #200]	@ (800f1dc <MX_GPIO_Init+0x1c8>)
 800f112:	f002 f90a 	bl	801132a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_12_AUX_Pin;
 800f116:	2380      	movs	r3, #128	@ 0x80
 800f118:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800f11a:	2300      	movs	r3, #0
 800f11c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800f11e:	2300      	movs	r3, #0
 800f120:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_12_AUX_GPIO_Port, &GPIO_InitStruct);
 800f122:	463b      	mov	r3, r7
 800f124:	4619      	mov	r1, r3
 800f126:	482b      	ldr	r0, [pc, #172]	@ (800f1d4 <MX_GPIO_Init+0x1c0>)
 800f128:	f002 f8ff 	bl	801132a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EXP_RS485_DE_Pin|SENSOR2_EN_Pin|SENSOR1_EN_Pin|TEC_4_CS_Pin
 800f12c:	f241 3330 	movw	r3, #4912	@ 0x1330
 800f130:	603b      	str	r3, [r7, #0]
                          |TEC_3_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800f132:	2301      	movs	r3, #1
 800f134:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800f136:	2300      	movs	r3, #0
 800f138:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800f13a:	2300      	movs	r3, #0
 800f13c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800f13e:	2300      	movs	r3, #0
 800f140:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f142:	463b      	mov	r3, r7
 800f144:	4619      	mov	r1, r3
 800f146:	4827      	ldr	r0, [pc, #156]	@ (800f1e4 <MX_GPIO_Init+0x1d0>)
 800f148:	f002 f8ef 	bl	801132a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EXP_RS485_NRE_Pin|PHOTO_PD_CS_Pin|PHOTO_ADC_CS_Pin|PHOTO_ADC_CONV_Pin
 800f14c:	f640 7334 	movw	r3, #3892	@ 0xf34
 800f150:	603b      	str	r3, [r7, #0]
                          |FRAM_CS_Pin|EF_5_EN_Pin|TEC_ADC_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800f152:	2301      	movs	r3, #1
 800f154:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800f156:	2300      	movs	r3, #0
 800f158:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800f15a:	2300      	movs	r3, #0
 800f15c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800f15e:	2300      	movs	r3, #0
 800f160:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f162:	463b      	mov	r3, r7
 800f164:	4619      	mov	r1, r3
 800f166:	481e      	ldr	r0, [pc, #120]	@ (800f1e0 <MX_GPIO_Init+0x1cc>)
 800f168:	f002 f8df 	bl	801132a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PHOTO_ADC_EOC_Pin;
 800f16c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f170:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800f172:	2300      	movs	r3, #0
 800f174:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800f176:	2301      	movs	r3, #1
 800f178:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(PHOTO_ADC_EOC_GPIO_Port, &GPIO_InitStruct);
 800f17a:	463b      	mov	r3, r7
 800f17c:	4619      	mov	r1, r3
 800f17e:	4816      	ldr	r0, [pc, #88]	@ (800f1d8 <MX_GPIO_Init+0x1c4>)
 800f180:	f002 f8d3 	bl	801132a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IRQ1_Pin;
 800f184:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f188:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800f18a:	2300      	movs	r3, #0
 800f18c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800f18e:	2300      	movs	r3, #0
 800f190:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IRQ1_GPIO_Port, &GPIO_InitStruct);
 800f192:	463b      	mov	r3, r7
 800f194:	4619      	mov	r1, r3
 800f196:	4810      	ldr	r0, [pc, #64]	@ (800f1d8 <MX_GPIO_Init+0x1c4>)
 800f198:	f002 f8c7 	bl	801132a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IRQ0_Pin;
 800f19c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f1a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IRQ0_GPIO_Port, &GPIO_InitStruct);
 800f1aa:	463b      	mov	r3, r7
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	480b      	ldr	r0, [pc, #44]	@ (800f1dc <MX_GPIO_Init+0x1c8>)
 800f1b0:	f002 f8bb 	bl	801132a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FF_5_AUX_Pin;
 800f1b4:	2308      	movs	r3, #8
 800f1b6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FF_5_AUX_GPIO_Port, &GPIO_InitStruct);
 800f1c0:	463b      	mov	r3, r7
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	4806      	ldr	r0, [pc, #24]	@ (800f1e0 <MX_GPIO_Init+0x1cc>)
 800f1c6:	f002 f8b0 	bl	801132a <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800f1ca:	bf00      	nop
 800f1cc:	3718      	adds	r7, #24
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	40021000 	.word	0x40021000
 800f1d8:	40020800 	.word	0x40020800
 800f1dc:	40020000 	.word	0x40020000
 800f1e0:	40020c00 	.word	0x40020c00
 800f1e4:	40020400 	.word	0x40020400

0800f1e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800f1ec:	b672      	cpsid	i
}
 800f1ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800f1f0:	bf00      	nop
 800f1f2:	e7fd      	b.n	800f1f0 <Error_Handler+0x8>

0800f1f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b083      	sub	sp, #12
 800f1f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	607b      	str	r3, [r7, #4]
 800f1fe:	4b10      	ldr	r3, [pc, #64]	@ (800f240 <HAL_MspInit+0x4c>)
 800f200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f202:	4a0f      	ldr	r2, [pc, #60]	@ (800f240 <HAL_MspInit+0x4c>)
 800f204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f208:	6453      	str	r3, [r2, #68]	@ 0x44
 800f20a:	4b0d      	ldr	r3, [pc, #52]	@ (800f240 <HAL_MspInit+0x4c>)
 800f20c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f20e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f212:	607b      	str	r3, [r7, #4]
 800f214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f216:	2300      	movs	r3, #0
 800f218:	603b      	str	r3, [r7, #0]
 800f21a:	4b09      	ldr	r3, [pc, #36]	@ (800f240 <HAL_MspInit+0x4c>)
 800f21c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f21e:	4a08      	ldr	r2, [pc, #32]	@ (800f240 <HAL_MspInit+0x4c>)
 800f220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f224:	6413      	str	r3, [r2, #64]	@ 0x40
 800f226:	4b06      	ldr	r3, [pc, #24]	@ (800f240 <HAL_MspInit+0x4c>)
 800f228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f22a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f22e:	603b      	str	r3, [r7, #0]
 800f230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f232:	bf00      	nop
 800f234:	370c      	adds	r7, #12
 800f236:	46bd      	mov	sp, r7
 800f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23c:	4770      	bx	lr
 800f23e:	bf00      	nop
 800f240:	40023800 	.word	0x40023800

0800f244 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b08a      	sub	sp, #40	@ 0x28
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f24c:	f107 0314 	add.w	r3, r7, #20
 800f250:	2200      	movs	r2, #0
 800f252:	601a      	str	r2, [r3, #0]
 800f254:	605a      	str	r2, [r3, #4]
 800f256:	609a      	str	r2, [r3, #8]
 800f258:	60da      	str	r2, [r3, #12]
 800f25a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	4a17      	ldr	r2, [pc, #92]	@ (800f2c0 <HAL_ADC_MspInit+0x7c>)
 800f262:	4293      	cmp	r3, r2
 800f264:	d127      	bne.n	800f2b6 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800f266:	2300      	movs	r3, #0
 800f268:	613b      	str	r3, [r7, #16]
 800f26a:	4b16      	ldr	r3, [pc, #88]	@ (800f2c4 <HAL_ADC_MspInit+0x80>)
 800f26c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f26e:	4a15      	ldr	r2, [pc, #84]	@ (800f2c4 <HAL_ADC_MspInit+0x80>)
 800f270:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800f274:	6453      	str	r3, [r2, #68]	@ 0x44
 800f276:	4b13      	ldr	r3, [pc, #76]	@ (800f2c4 <HAL_ADC_MspInit+0x80>)
 800f278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f27a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f27e:	613b      	str	r3, [r7, #16]
 800f280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f282:	2300      	movs	r3, #0
 800f284:	60fb      	str	r3, [r7, #12]
 800f286:	4b0f      	ldr	r3, [pc, #60]	@ (800f2c4 <HAL_ADC_MspInit+0x80>)
 800f288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f28a:	4a0e      	ldr	r2, [pc, #56]	@ (800f2c4 <HAL_ADC_MspInit+0x80>)
 800f28c:	f043 0301 	orr.w	r3, r3, #1
 800f290:	6313      	str	r3, [r2, #48]	@ 0x30
 800f292:	4b0c      	ldr	r3, [pc, #48]	@ (800f2c4 <HAL_ADC_MspInit+0x80>)
 800f294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f296:	f003 0301 	and.w	r3, r3, #1
 800f29a:	60fb      	str	r3, [r7, #12]
 800f29c:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA2     ------> ADC3_IN2
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800f29e:	230c      	movs	r3, #12
 800f2a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f2a2:	2303      	movs	r3, #3
 800f2a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f2aa:	f107 0314 	add.w	r3, r7, #20
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	4805      	ldr	r0, [pc, #20]	@ (800f2c8 <HAL_ADC_MspInit+0x84>)
 800f2b2:	f001 f825 	bl	8010300 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 800f2b6:	bf00      	nop
 800f2b8:	3728      	adds	r7, #40	@ 0x28
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	40012200 	.word	0x40012200
 800f2c4:	40023800 	.word	0x40023800
 800f2c8:	40020000 	.word	0x40020000

0800f2cc <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4a0b      	ldr	r2, [pc, #44]	@ (800f308 <HAL_TIM_OC_MspInit+0x3c>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d10d      	bne.n	800f2fa <HAL_TIM_OC_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800f2de:	2300      	movs	r3, #0
 800f2e0:	60fb      	str	r3, [r7, #12]
 800f2e2:	4b0a      	ldr	r3, [pc, #40]	@ (800f30c <HAL_TIM_OC_MspInit+0x40>)
 800f2e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2e6:	4a09      	ldr	r2, [pc, #36]	@ (800f30c <HAL_TIM_OC_MspInit+0x40>)
 800f2e8:	f043 0304 	orr.w	r3, r3, #4
 800f2ec:	6413      	str	r3, [r2, #64]	@ 0x40
 800f2ee:	4b07      	ldr	r3, [pc, #28]	@ (800f30c <HAL_TIM_OC_MspInit+0x40>)
 800f2f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2f2:	f003 0304 	and.w	r3, r3, #4
 800f2f6:	60fb      	str	r3, [r7, #12]
 800f2f8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800f2fa:	bf00      	nop
 800f2fc:	3714      	adds	r7, #20
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr
 800f306:	bf00      	nop
 800f308:	40000800 	.word	0x40000800
 800f30c:	40023800 	.word	0x40023800

0800f310 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b088      	sub	sp, #32
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f318:	f107 030c 	add.w	r3, r7, #12
 800f31c:	2200      	movs	r2, #0
 800f31e:	601a      	str	r2, [r3, #0]
 800f320:	605a      	str	r2, [r3, #4]
 800f322:	609a      	str	r2, [r3, #8]
 800f324:	60da      	str	r2, [r3, #12]
 800f326:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	4a12      	ldr	r2, [pc, #72]	@ (800f378 <HAL_TIM_MspPostInit+0x68>)
 800f32e:	4293      	cmp	r3, r2
 800f330:	d11e      	bne.n	800f370 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f332:	2300      	movs	r3, #0
 800f334:	60bb      	str	r3, [r7, #8]
 800f336:	4b11      	ldr	r3, [pc, #68]	@ (800f37c <HAL_TIM_MspPostInit+0x6c>)
 800f338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f33a:	4a10      	ldr	r2, [pc, #64]	@ (800f37c <HAL_TIM_MspPostInit+0x6c>)
 800f33c:	f043 0308 	orr.w	r3, r3, #8
 800f340:	6313      	str	r3, [r2, #48]	@ 0x30
 800f342:	4b0e      	ldr	r3, [pc, #56]	@ (800f37c <HAL_TIM_MspPostInit+0x6c>)
 800f344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f346:	f003 0308 	and.w	r3, r3, #8
 800f34a:	60bb      	str	r3, [r7, #8]
 800f34c:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800f34e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800f352:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f354:	2302      	movs	r3, #2
 800f356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f358:	2300      	movs	r3, #0
 800f35a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f35c:	2300      	movs	r3, #0
 800f35e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800f360:	2302      	movs	r3, #2
 800f362:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f364:	f107 030c 	add.w	r3, r7, #12
 800f368:	4619      	mov	r1, r3
 800f36a:	4805      	ldr	r0, [pc, #20]	@ (800f380 <HAL_TIM_MspPostInit+0x70>)
 800f36c:	f000 ffc8 	bl	8010300 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800f370:	bf00      	nop
 800f372:	3720      	adds	r7, #32
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}
 800f378:	40000800 	.word	0x40000800
 800f37c:	40023800 	.word	0x40023800
 800f380:	40020c00 	.word	0x40020c00

0800f384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f384:	b480      	push	{r7}
 800f386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800f388:	bf00      	nop
 800f38a:	e7fd      	b.n	800f388 <NMI_Handler+0x4>

0800f38c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f38c:	b480      	push	{r7}
 800f38e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f390:	bf00      	nop
 800f392:	e7fd      	b.n	800f390 <HardFault_Handler+0x4>

0800f394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f394:	b480      	push	{r7}
 800f396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f398:	bf00      	nop
 800f39a:	e7fd      	b.n	800f398 <MemManage_Handler+0x4>

0800f39c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f39c:	b480      	push	{r7}
 800f39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f3a0:	bf00      	nop
 800f3a2:	e7fd      	b.n	800f3a0 <BusFault_Handler+0x4>

0800f3a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f3a8:	bf00      	nop
 800f3aa:	e7fd      	b.n	800f3a8 <UsageFault_Handler+0x4>

0800f3ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800f3b0:	bf00      	nop
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b8:	4770      	bx	lr

0800f3ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f3ba:	b480      	push	{r7}
 800f3bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f3be:	bf00      	nop
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800f3cc:	bf00      	nop
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr
	...

0800f3d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	g_systick_count++;
 800f3dc:	4b05      	ldr	r3, [pc, #20]	@ (800f3f4 <SysTick_Handler+0x1c>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	4a04      	ldr	r2, [pc, #16]	@ (800f3f4 <SysTick_Handler+0x1c>)
 800f3e4:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 800f3e6:	f003 fa41 	bl	801286c <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f3ea:	f000 fc21 	bl	800fc30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800f3ee:	bf00      	nop
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	20003660 	.word	0x20003660

0800f3f8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
	I2C_event_IRQ();
 800f3fc:	f7f9 fbb8 	bl	8008b70 <I2C_event_IRQ>
  /* USER CODE END I2C2_EV_IRQn 0 */
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800f400:	bf00      	nop
 800f402:	bd80      	pop	{r7, pc}

0800f404 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */
	I2C_error_IRQ();
 800f408:	f7f9 fcba 	bl	8008d80 <I2C_error_IRQ>
  /* USER CODE END I2C2_ER_IRQn 0 */
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800f40c:	bf00      	nop
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	UART_Ring_ISR(USART1);
 800f414:	4802      	ldr	r0, [pc, #8]	@ (800f420 <USART1_IRQHandler+0x10>)
 800f416:	f7f9 fffd 	bl	8009414 <UART_Ring_ISR>
  /* USER CODE END USART1_IRQn 1 */
}
 800f41a:	bf00      	nop
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop
 800f420:	40011000 	.word	0x40011000

0800f424 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800f424:	b480      	push	{r7}
 800f426:	af00      	add	r7, sp, #0

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800f428:	bf00      	nop
 800f42a:	46bd      	mov	sp, r7
 800f42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f430:	4770      	bx	lr
	...

0800f434 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */
	UART_Ring_ISR(USART6);
 800f438:	4802      	ldr	r0, [pc, #8]	@ (800f444 <USART6_IRQHandler+0x10>)
 800f43a:	f7f9 ffeb 	bl	8009414 <UART_Ring_ISR>
  /* USER CODE END USART6_IRQn 1 */
}
 800f43e:	bf00      	nop
 800f440:	bd80      	pop	{r7, pc}
 800f442:	bf00      	nop
 800f444:	40011400 	.word	0x40011400

0800f448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b086      	sub	sp, #24
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f450:	4a14      	ldr	r2, [pc, #80]	@ (800f4a4 <_sbrk+0x5c>)
 800f452:	4b15      	ldr	r3, [pc, #84]	@ (800f4a8 <_sbrk+0x60>)
 800f454:	1ad3      	subs	r3, r2, r3
 800f456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f45c:	4b13      	ldr	r3, [pc, #76]	@ (800f4ac <_sbrk+0x64>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d102      	bne.n	800f46a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f464:	4b11      	ldr	r3, [pc, #68]	@ (800f4ac <_sbrk+0x64>)
 800f466:	4a12      	ldr	r2, [pc, #72]	@ (800f4b0 <_sbrk+0x68>)
 800f468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f46a:	4b10      	ldr	r3, [pc, #64]	@ (800f4ac <_sbrk+0x64>)
 800f46c:	681a      	ldr	r2, [r3, #0]
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	4413      	add	r3, r2
 800f472:	693a      	ldr	r2, [r7, #16]
 800f474:	429a      	cmp	r2, r3
 800f476:	d207      	bcs.n	800f488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f478:	f003 fbb2 	bl	8012be0 <__errno>
 800f47c:	4603      	mov	r3, r0
 800f47e:	220c      	movs	r2, #12
 800f480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800f482:	f04f 33ff 	mov.w	r3, #4294967295
 800f486:	e009      	b.n	800f49c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f488:	4b08      	ldr	r3, [pc, #32]	@ (800f4ac <_sbrk+0x64>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f48e:	4b07      	ldr	r3, [pc, #28]	@ (800f4ac <_sbrk+0x64>)
 800f490:	681a      	ldr	r2, [r3, #0]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	4413      	add	r3, r2
 800f496:	4a05      	ldr	r2, [pc, #20]	@ (800f4ac <_sbrk+0x64>)
 800f498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f49a:	68fb      	ldr	r3, [r7, #12]
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3718      	adds	r7, #24
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	20020000 	.word	0x20020000
 800f4a8:	00000400 	.word	0x00000400
 800f4ac:	20003664 	.word	0x20003664
 800f4b0:	200039e0 	.word	0x200039e0

0800f4b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f4b8:	4b06      	ldr	r3, [pc, #24]	@ (800f4d4 <SystemInit+0x20>)
 800f4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f4be:	4a05      	ldr	r2, [pc, #20]	@ (800f4d4 <SystemInit+0x20>)
 800f4c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f4c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800f4c8:	bf00      	nop
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr
 800f4d2:	bf00      	nop
 800f4d4:	e000ed00 	.word	0xe000ed00

0800f4d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800f4d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800f510 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800f4dc:	f7ff ffea 	bl	800f4b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800f4e0:	480c      	ldr	r0, [pc, #48]	@ (800f514 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800f4e2:	490d      	ldr	r1, [pc, #52]	@ (800f518 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800f4e4:	4a0d      	ldr	r2, [pc, #52]	@ (800f51c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800f4e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f4e8:	e002      	b.n	800f4f0 <LoopCopyDataInit>

0800f4ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f4ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f4ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f4ee:	3304      	adds	r3, #4

0800f4f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f4f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f4f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f4f4:	d3f9      	bcc.n	800f4ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f4f6:	4a0a      	ldr	r2, [pc, #40]	@ (800f520 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800f4f8:	4c0a      	ldr	r4, [pc, #40]	@ (800f524 <LoopFillZerobss+0x22>)
  movs r3, #0
 800f4fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f4fc:	e001      	b.n	800f502 <LoopFillZerobss>

0800f4fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f4fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f500:	3204      	adds	r2, #4

0800f502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f504:	d3fb      	bcc.n	800f4fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f506:	f003 fb71 	bl	8012bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f50a:	f7fe ff8b 	bl	800e424 <main>
  bx  lr    
 800f50e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800f510:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800f514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f518:	2000240c 	.word	0x2000240c
  ldr r2, =_sidata
 800f51c:	08015308 	.word	0x08015308
  ldr r2, =_sbss
 800f520:	2000240c 	.word	0x2000240c
  ldr r4, =_ebss
 800f524:	200039dc 	.word	0x200039dc

0800f528 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f528:	e7fe      	b.n	800f528 <ADC_IRQHandler>
	...

0800f52c <temperature_update>:
	 0,								// Temp_auto; 			// xxxx temp3_auto temp2_auto temp1_auto temp0_auto (LSB)
	 0,								// Tec_Heater_status;	// heater3_on heater2_on heater1_on heater0_on tec3_on tec2_on tec1_on tec0_on
};

static void temperature_update(void)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
	if (s_Temperature_CurrentState.Temp_change_flag)
 800f532:	4b3e      	ldr	r3, [pc, #248]	@ (800f62c <temperature_update+0x100>)
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d039      	beq.n	800f5ae <temperature_update+0x82>
	{
		uint8_t Tec_dir = 0;
 800f53a:	2300      	movs	r3, #0
 800f53c:	71bb      	strb	r3, [r7, #6]
		for (uint8_t channel = 0; channel < 4; channel ++)
 800f53e:	2300      	movs	r3, #0
 800f540:	71fb      	strb	r3, [r7, #7]
 800f542:	e02e      	b.n	800f5a2 <temperature_update+0x76>
		{
			Tec_dir = ((s_Temperature_CurrentState.Tec_dir & (1 << channel)) == (1 << channel)) ? TEC_HEAT : TEC_COOL;
 800f544:	4b39      	ldr	r3, [pc, #228]	@ (800f62c <temperature_update+0x100>)
 800f546:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f54a:	4619      	mov	r1, r3
 800f54c:	79fb      	ldrb	r3, [r7, #7]
 800f54e:	2201      	movs	r2, #1
 800f550:	fa02 f303 	lsl.w	r3, r2, r3
 800f554:	ea01 0203 	and.w	r2, r1, r3
 800f558:	79fb      	ldrb	r3, [r7, #7]
 800f55a:	2101      	movs	r1, #1
 800f55c:	fa01 f303 	lsl.w	r3, r1, r3
 800f560:	429a      	cmp	r2, r3
 800f562:	bf0c      	ite	eq
 800f564:	2301      	moveq	r3, #1
 800f566:	2300      	movne	r3, #0
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	71bb      	strb	r3, [r7, #6]
			lt8722_set_output_voltage_channel(channel, Tec_dir, s_Temperature_CurrentState.Tec_vol[channel]);
 800f56c:	79fb      	ldrb	r3, [r7, #7]
 800f56e:	4a2f      	ldr	r2, [pc, #188]	@ (800f62c <temperature_update+0x100>)
 800f570:	3302      	adds	r3, #2
 800f572:	00db      	lsls	r3, r3, #3
 800f574:	4413      	add	r3, r2
 800f576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57a:	79b9      	ldrb	r1, [r7, #6]
 800f57c:	79f8      	ldrb	r0, [r7, #7]
 800f57e:	f7fd fb81 	bl	800cc84 <lt8722_set_output_voltage_channel>
			heater_set_duty_pwm_channel(channel, s_Temperature_CurrentState.Heater_duty[channel]);
 800f582:	79fb      	ldrb	r3, [r7, #7]
 800f584:	4a29      	ldr	r2, [pc, #164]	@ (800f62c <temperature_update+0x100>)
 800f586:	3318      	adds	r3, #24
 800f588:	005b      	lsls	r3, r3, #1
 800f58a:	4413      	add	r3, r2
 800f58c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f590:	b29a      	uxth	r2, r3
 800f592:	79fb      	ldrb	r3, [r7, #7]
 800f594:	4611      	mov	r1, r2
 800f596:	4618      	mov	r0, r3
 800f598:	f7fc fd7a 	bl	800c090 <heater_set_duty_pwm_channel>
		for (uint8_t channel = 0; channel < 4; channel ++)
 800f59c:	79fb      	ldrb	r3, [r7, #7]
 800f59e:	3301      	adds	r3, #1
 800f5a0:	71fb      	strb	r3, [r7, #7]
 800f5a2:	79fb      	ldrb	r3, [r7, #7]
 800f5a4:	2b03      	cmp	r3, #3
 800f5a6:	d9cd      	bls.n	800f544 <temperature_update+0x18>
		}
		s_Temperature_CurrentState.Temp_change_flag = 0;
 800f5a8:	4b20      	ldr	r3, [pc, #128]	@ (800f62c <temperature_update+0x100>)
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	701a      	strb	r2, [r3, #0]
	}
	NTC_get_temperature(s_Temperature_CurrentState.NTC_temp);
 800f5ae:	4820      	ldr	r0, [pc, #128]	@ (800f630 <temperature_update+0x104>)
 800f5b0:	f7fd fe8e 	bl	800d2d0 <NTC_get_temperature>
	if ((s_Temperature_CurrentState.Temp_auto & (1 << TEMP0_AUTO)) == (1 << TEMP0_AUTO))
 800f5b4:	4b1d      	ldr	r3, [pc, #116]	@ (800f62c <temperature_update+0x100>)
 800f5b6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800f5ba:	f003 0301 	and.w	r3, r3, #1
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d006      	beq.n	800f5d0 <temperature_update+0xa4>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temp[0], 0);
 800f5c2:	4b1a      	ldr	r3, [pc, #104]	@ (800f62c <temperature_update+0x100>)
 800f5c4:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
 800f5c8:	2100      	movs	r1, #0
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f000 f832 	bl	800f634 <temperature_auto_ctrl>
	if ((s_Temperature_CurrentState.Temp_auto & (1 << TEMP1_AUTO)) == (1 << TEMP1_AUTO))
 800f5d0:	4b16      	ldr	r3, [pc, #88]	@ (800f62c <temperature_update+0x100>)
 800f5d2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800f5d6:	f003 0302 	and.w	r3, r3, #2
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d006      	beq.n	800f5ec <temperature_update+0xc0>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temp[1], 1);
 800f5de:	4b13      	ldr	r3, [pc, #76]	@ (800f62c <temperature_update+0x100>)
 800f5e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f5e4:	2101      	movs	r1, #1
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f000 f824 	bl	800f634 <temperature_auto_ctrl>
	if ((s_Temperature_CurrentState.Temp_auto & (1 << TEMP2_AUTO)) == (1 << TEMP2_AUTO))
 800f5ec:	4b0f      	ldr	r3, [pc, #60]	@ (800f62c <temperature_update+0x100>)
 800f5ee:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800f5f2:	f003 0304 	and.w	r3, r3, #4
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d006      	beq.n	800f608 <temperature_update+0xdc>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temp[2], 2);
 800f5fa:	4b0c      	ldr	r3, [pc, #48]	@ (800f62c <temperature_update+0x100>)
 800f5fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f600:	2102      	movs	r1, #2
 800f602:	4618      	mov	r0, r3
 800f604:	f000 f816 	bl	800f634 <temperature_auto_ctrl>
	if ((s_Temperature_CurrentState.Temp_auto & (1 << TEMP3_AUTO)) == (1 << TEMP3_AUTO))
 800f608:	4b08      	ldr	r3, [pc, #32]	@ (800f62c <temperature_update+0x100>)
 800f60a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800f60e:	f003 0308 	and.w	r3, r3, #8
 800f612:	2b00      	cmp	r3, #0
 800f614:	d006      	beq.n	800f624 <temperature_update+0xf8>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temp[3], 3);
 800f616:	4b05      	ldr	r3, [pc, #20]	@ (800f62c <temperature_update+0x100>)
 800f618:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f61c:	2103      	movs	r1, #3
 800f61e:	4618      	mov	r0, r3
 800f620:	f000 f808 	bl	800f634 <temperature_auto_ctrl>
}
 800f624:	bf00      	nop
 800f626:	3708      	adds	r7, #8
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}
 800f62c:	20002350 	.word	0x20002350
 800f630:	2000238a 	.word	0x2000238a

0800f634 <temperature_auto_ctrl>:

void temperature_auto_ctrl(int16_t temperature_now, uint8_t channel)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
 800f63a:	4603      	mov	r3, r0
 800f63c:	460a      	mov	r2, r1
 800f63e:	80fb      	strh	r3, [r7, #6]
 800f640:	4613      	mov	r3, r2
 800f642:	717b      	strb	r3, [r7, #5]
	// Case: temperature is higher than expected temperature
	// Using: TEC
	if (temperature_now > s_Temperature_CurrentState.Temp_setpoint[channel] + s_Temperature_CurrentState.High_Threshold)
 800f644:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f648:	797b      	ldrb	r3, [r7, #5]
 800f64a:	495f      	ldr	r1, [pc, #380]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f64c:	005b      	lsls	r3, r3, #1
 800f64e:	440b      	add	r3, r1
 800f650:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f654:	4619      	mov	r1, r3
 800f656:	4b5c      	ldr	r3, [pc, #368]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f658:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f65c:	440b      	add	r3, r1
 800f65e:	429a      	cmp	r2, r3
 800f660:	dd47      	ble.n	800f6f2 <temperature_auto_ctrl+0xbe>
	{
		// UART_SendStringRing(UART_CMDLINE, "nhiet cao");
		// turn off heater
		heater_set_duty_pwm_channel(channel, 0);
 800f662:	797b      	ldrb	r3, [r7, #5]
 800f664:	2100      	movs	r1, #0
 800f666:	4618      	mov	r0, r3
 800f668:	f7fc fd12 	bl	800c090 <heater_set_duty_pwm_channel>
		// turn on tec with COOL
		s_Temperature_CurrentState.Tec_dir &= ~(1 << channel);
 800f66c:	4b56      	ldr	r3, [pc, #344]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f66e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f672:	b25a      	sxtb	r2, r3
 800f674:	797b      	ldrb	r3, [r7, #5]
 800f676:	2101      	movs	r1, #1
 800f678:	fa01 f303 	lsl.w	r3, r1, r3
 800f67c:	b25b      	sxtb	r3, r3
 800f67e:	43db      	mvns	r3, r3
 800f680:	b25b      	sxtb	r3, r3
 800f682:	4013      	ands	r3, r2
 800f684:	b25b      	sxtb	r3, r3
 800f686:	b2da      	uxtb	r2, r3
 800f688:	4b4f      	ldr	r3, [pc, #316]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f68a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		lt8722_set_output_voltage_channel(channel, TEC_COOL, s_Temperature_CurrentState.Tec_vol[channel]);
 800f68e:	797b      	ldrb	r3, [r7, #5]
 800f690:	4a4d      	ldr	r2, [pc, #308]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f692:	3302      	adds	r3, #2
 800f694:	00db      	lsls	r3, r3, #3
 800f696:	4413      	add	r3, r2
 800f698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69c:	7978      	ldrb	r0, [r7, #5]
 800f69e:	2100      	movs	r1, #0
 800f6a0:	f7fd faf0 	bl	800cc84 <lt8722_set_output_voltage_channel>
		lt8722_set_swen_req(channel, LT8722_SWEN_REQ_ENABLED);
 800f6a4:	797b      	ldrb	r3, [r7, #5]
 800f6a6:	2101      	movs	r1, #1
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f7fd f9b0 	bl	800ca0e <lt8722_set_swen_req>
		// update status
		s_Temperature_CurrentState.Tec_Heater_status |= (1 << channel);
 800f6ae:	4b46      	ldr	r3, [pc, #280]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f6b0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f6b4:	b25a      	sxtb	r2, r3
 800f6b6:	797b      	ldrb	r3, [r7, #5]
 800f6b8:	2101      	movs	r1, #1
 800f6ba:	fa01 f303 	lsl.w	r3, r1, r3
 800f6be:	b25b      	sxtb	r3, r3
 800f6c0:	4313      	orrs	r3, r2
 800f6c2:	b25b      	sxtb	r3, r3
 800f6c4:	b2da      	uxtb	r2, r3
 800f6c6:	4b40      	ldr	r3, [pc, #256]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f6c8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		s_Temperature_CurrentState.Tec_Heater_status &= ~(1 << (channel + 4));
 800f6cc:	4b3e      	ldr	r3, [pc, #248]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f6ce:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f6d2:	b25a      	sxtb	r2, r3
 800f6d4:	797b      	ldrb	r3, [r7, #5]
 800f6d6:	3304      	adds	r3, #4
 800f6d8:	2101      	movs	r1, #1
 800f6da:	fa01 f303 	lsl.w	r3, r1, r3
 800f6de:	b25b      	sxtb	r3, r3
 800f6e0:	43db      	mvns	r3, r3
 800f6e2:	b25b      	sxtb	r3, r3
 800f6e4:	4013      	ands	r3, r2
 800f6e6:	b25b      	sxtb	r3, r3
 800f6e8:	b2da      	uxtb	r2, r3
 800f6ea:	4b37      	ldr	r3, [pc, #220]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f6ec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
		heater_set_duty_pwm_channel(channel, 0);
		// update status
		s_Temperature_CurrentState.Tec_Heater_status &= ~((1 << (channel + 4)) | (1 << channel));
	}
	return;
 800f6f0:	e066      	b.n	800f7c0 <temperature_auto_ctrl+0x18c>
	else if (temperature_now < s_Temperature_CurrentState.Temp_setpoint[channel] - s_Temperature_CurrentState.Low_Threshold)
 800f6f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f6f6:	797b      	ldrb	r3, [r7, #5]
 800f6f8:	4933      	ldr	r1, [pc, #204]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f6fa:	005b      	lsls	r3, r3, #1
 800f6fc:	440b      	add	r3, r1
 800f6fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f702:	4619      	mov	r1, r3
 800f704:	4b30      	ldr	r3, [pc, #192]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f706:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f70a:	1acb      	subs	r3, r1, r3
 800f70c:	429a      	cmp	r2, r3
 800f70e:	da33      	bge.n	800f778 <temperature_auto_ctrl+0x144>
		lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
 800f710:	797b      	ldrb	r3, [r7, #5]
 800f712:	2100      	movs	r1, #0
 800f714:	4618      	mov	r0, r3
 800f716:	f7fd f97a 	bl	800ca0e <lt8722_set_swen_req>
		heater_set_duty_pwm_channel(channel, s_Temperature_CurrentState.Heater_duty[channel]);
 800f71a:	797b      	ldrb	r3, [r7, #5]
 800f71c:	4a2a      	ldr	r2, [pc, #168]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f71e:	3318      	adds	r3, #24
 800f720:	005b      	lsls	r3, r3, #1
 800f722:	4413      	add	r3, r2
 800f724:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f728:	b29a      	uxth	r2, r3
 800f72a:	797b      	ldrb	r3, [r7, #5]
 800f72c:	4611      	mov	r1, r2
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fc fcae 	bl	800c090 <heater_set_duty_pwm_channel>
		s_Temperature_CurrentState.Tec_Heater_status |= (1 << (channel + 4));
 800f734:	4b24      	ldr	r3, [pc, #144]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f736:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f73a:	b25a      	sxtb	r2, r3
 800f73c:	797b      	ldrb	r3, [r7, #5]
 800f73e:	3304      	adds	r3, #4
 800f740:	2101      	movs	r1, #1
 800f742:	fa01 f303 	lsl.w	r3, r1, r3
 800f746:	b25b      	sxtb	r3, r3
 800f748:	4313      	orrs	r3, r2
 800f74a:	b25b      	sxtb	r3, r3
 800f74c:	b2da      	uxtb	r2, r3
 800f74e:	4b1e      	ldr	r3, [pc, #120]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f750:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		s_Temperature_CurrentState.Tec_Heater_status &= ~(1 << channel);
 800f754:	4b1c      	ldr	r3, [pc, #112]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f756:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f75a:	b25a      	sxtb	r2, r3
 800f75c:	797b      	ldrb	r3, [r7, #5]
 800f75e:	2101      	movs	r1, #1
 800f760:	fa01 f303 	lsl.w	r3, r1, r3
 800f764:	b25b      	sxtb	r3, r3
 800f766:	43db      	mvns	r3, r3
 800f768:	b25b      	sxtb	r3, r3
 800f76a:	4013      	ands	r3, r2
 800f76c:	b25b      	sxtb	r3, r3
 800f76e:	b2da      	uxtb	r2, r3
 800f770:	4b15      	ldr	r3, [pc, #84]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f772:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	return;
 800f776:	e023      	b.n	800f7c0 <temperature_auto_ctrl+0x18c>
		lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
 800f778:	797b      	ldrb	r3, [r7, #5]
 800f77a:	2100      	movs	r1, #0
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7fd f946 	bl	800ca0e <lt8722_set_swen_req>
		heater_set_duty_pwm_channel(channel, 0);
 800f782:	797b      	ldrb	r3, [r7, #5]
 800f784:	2100      	movs	r1, #0
 800f786:	4618      	mov	r0, r3
 800f788:	f7fc fc82 	bl	800c090 <heater_set_duty_pwm_channel>
		s_Temperature_CurrentState.Tec_Heater_status &= ~((1 << (channel + 4)) | (1 << channel));
 800f78c:	4b0e      	ldr	r3, [pc, #56]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f78e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f792:	b25a      	sxtb	r2, r3
 800f794:	797b      	ldrb	r3, [r7, #5]
 800f796:	3304      	adds	r3, #4
 800f798:	2101      	movs	r1, #1
 800f79a:	fa01 f303 	lsl.w	r3, r1, r3
 800f79e:	b259      	sxtb	r1, r3
 800f7a0:	797b      	ldrb	r3, [r7, #5]
 800f7a2:	2001      	movs	r0, #1
 800f7a4:	fa00 f303 	lsl.w	r3, r0, r3
 800f7a8:	b25b      	sxtb	r3, r3
 800f7aa:	430b      	orrs	r3, r1
 800f7ac:	b25b      	sxtb	r3, r3
 800f7ae:	43db      	mvns	r3, r3
 800f7b0:	b25b      	sxtb	r3, r3
 800f7b2:	4013      	ands	r3, r2
 800f7b4:	b25b      	sxtb	r3, r3
 800f7b6:	b2da      	uxtb	r2, r3
 800f7b8:	4b03      	ldr	r3, [pc, #12]	@ (800f7c8 <temperature_auto_ctrl+0x194>)
 800f7ba:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	return;
 800f7be:	bf00      	nop
}
 800f7c0:	3708      	adds	r7, #8
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	20002350 	.word	0x20002350

0800f7cc <Temperature_GetSet_CreateTask>:
{
	return;
}

void Temperature_GetSet_CreateTask(void)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&temp_task_context.taskHandle, &temp_task_context.taskProperty);
 800f7d0:	4902      	ldr	r1, [pc, #8]	@ (800f7dc <Temperature_GetSet_CreateTask+0x10>)
 800f7d2:	4803      	ldr	r0, [pc, #12]	@ (800f7e0 <Temperature_GetSet_CreateTask+0x14>)
 800f7d4:	f003 f80a 	bl	80127ec <SCH_TASK_CreateTask>
	return;
 800f7d8:	bf00      	nop
}
 800f7da:	bd80      	pop	{r7, pc}
 800f7dc:	20002338 	.word	0x20002338
 800f7e0:	20002334 	.word	0x20002334

0800f7e4 <temperature_set_setpoint>:

void temperature_set_setpoint(uint8_t channel, int16_t setpoint)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b083      	sub	sp, #12
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	460a      	mov	r2, r1
 800f7ee:	71fb      	strb	r3, [r7, #7]
 800f7f0:	4613      	mov	r3, r2
 800f7f2:	80bb      	strh	r3, [r7, #4]
	s_Temperature_CurrentState.Temp_setpoint[channel] = setpoint;
 800f7f4:	79fb      	ldrb	r3, [r7, #7]
 800f7f6:	4a05      	ldr	r2, [pc, #20]	@ (800f80c <temperature_set_setpoint+0x28>)
 800f7f8:	005b      	lsls	r3, r3, #1
 800f7fa:	4413      	add	r3, r2
 800f7fc:	88ba      	ldrh	r2, [r7, #4]
 800f7fe:	805a      	strh	r2, [r3, #2]
	return;
 800f800:	bf00      	nop
}
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr
 800f80c:	20002350 	.word	0x20002350

0800f810 <temperature_get_setpoint>:

int16_t temperature_get_setpoint(uint8_t channel)
{
 800f810:	b480      	push	{r7}
 800f812:	b083      	sub	sp, #12
 800f814:	af00      	add	r7, sp, #0
 800f816:	4603      	mov	r3, r0
 800f818:	71fb      	strb	r3, [r7, #7]
	return s_Temperature_CurrentState.Temp_setpoint[channel];
 800f81a:	79fb      	ldrb	r3, [r7, #7]
 800f81c:	4a05      	ldr	r2, [pc, #20]	@ (800f834 <temperature_get_setpoint+0x24>)
 800f81e:	005b      	lsls	r3, r3, #1
 800f820:	4413      	add	r3, r2
 800f822:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 800f826:	4618      	mov	r0, r3
 800f828:	370c      	adds	r7, #12
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr
 800f832:	bf00      	nop
 800f834:	20002350 	.word	0x20002350

0800f838 <temperature_set_tec_vol>:
{
	return s_Temperature_CurrentState.NTC_temp[channel];
}

void temperature_set_tec_vol(uint8_t channel, uint16_t voltage)
{
 800f838:	b490      	push	{r4, r7}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	4604      	mov	r4, r0
 800f840:	4608      	mov	r0, r1
 800f842:	4621      	mov	r1, r4
 800f844:	71f9      	strb	r1, [r7, #7]
 800f846:	4601      	mov	r1, r0
 800f848:	80b9      	strh	r1, [r7, #4]
	s_Temperature_CurrentState.Temp_change_flag = 1;
 800f84a:	490f      	ldr	r1, [pc, #60]	@ (800f888 <temperature_set_tec_vol+0x50>)
 800f84c:	2001      	movs	r0, #1
 800f84e:	7008      	strb	r0, [r1, #0]
	if (voltage > 3000) voltage = 3000;
 800f850:	88b9      	ldrh	r1, [r7, #4]
 800f852:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800f856:	4281      	cmp	r1, r0
 800f858:	d902      	bls.n	800f860 <temperature_set_tec_vol+0x28>
 800f85a:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800f85e:	80b9      	strh	r1, [r7, #4]
	s_Temperature_CurrentState.Tec_vol[channel] = voltage*1000000;
 800f860:	88b9      	ldrh	r1, [r7, #4]
 800f862:	480a      	ldr	r0, [pc, #40]	@ (800f88c <temperature_set_tec_vol+0x54>)
 800f864:	fb00 f101 	mul.w	r1, r0, r1
 800f868:	79f8      	ldrb	r0, [r7, #7]
 800f86a:	17cc      	asrs	r4, r1, #31
 800f86c:	460a      	mov	r2, r1
 800f86e:	4623      	mov	r3, r4
 800f870:	4c05      	ldr	r4, [pc, #20]	@ (800f888 <temperature_set_tec_vol+0x50>)
 800f872:	1c81      	adds	r1, r0, #2
 800f874:	00c9      	lsls	r1, r1, #3
 800f876:	4421      	add	r1, r4
 800f878:	e9c1 2300 	strd	r2, r3, [r1]
}
 800f87c:	bf00      	nop
 800f87e:	3708      	adds	r7, #8
 800f880:	46bd      	mov	sp, r7
 800f882:	bc90      	pop	{r4, r7}
 800f884:	4770      	bx	lr
 800f886:	bf00      	nop
 800f888:	20002350 	.word	0x20002350
 800f88c:	000f4240 	.word	0x000f4240

0800f890 <temperature_get_tec_vol>:

uint16_t temperature_get_tec_vol(uint8_t channel)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	af00      	add	r7, sp, #0
 800f896:	4603      	mov	r3, r0
 800f898:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Tec_vol[channel]/1000000);
 800f89a:	79fb      	ldrb	r3, [r7, #7]
 800f89c:	4a08      	ldr	r2, [pc, #32]	@ (800f8c0 <temperature_get_tec_vol+0x30>)
 800f89e:	3302      	adds	r3, #2
 800f8a0:	00db      	lsls	r3, r3, #3
 800f8a2:	4413      	add	r3, r2
 800f8a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f8a8:	4a06      	ldr	r2, [pc, #24]	@ (800f8c4 <temperature_get_tec_vol+0x34>)
 800f8aa:	f04f 0300 	mov.w	r3, #0
 800f8ae:	f7f8 fcf7 	bl	80082a0 <__aeabi_ldivmod>
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	b293      	uxth	r3, r2
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3708      	adds	r7, #8
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	20002350 	.word	0x20002350
 800f8c4:	000f4240 	.word	0x000f4240

0800f8c8 <temperature_set_heater_duty>:

void temperature_set_heater_duty(uint8_t channel, uint8_t duty)
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b083      	sub	sp, #12
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	460a      	mov	r2, r1
 800f8d2:	71fb      	strb	r3, [r7, #7]
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	71bb      	strb	r3, [r7, #6]
	s_Temperature_CurrentState.Temp_change_flag = 1;
 800f8d8:	4b0e      	ldr	r3, [pc, #56]	@ (800f914 <temperature_set_heater_duty+0x4c>)
 800f8da:	2201      	movs	r2, #1
 800f8dc:	701a      	strb	r2, [r3, #0]
    if (duty > 100) duty = 100;
 800f8de:	79bb      	ldrb	r3, [r7, #6]
 800f8e0:	2b64      	cmp	r3, #100	@ 0x64
 800f8e2:	d901      	bls.n	800f8e8 <temperature_set_heater_duty+0x20>
 800f8e4:	2364      	movs	r3, #100	@ 0x64
 800f8e6:	71bb      	strb	r3, [r7, #6]
	s_Temperature_CurrentState.Heater_duty[channel] = duty*10;
 800f8e8:	79bb      	ldrb	r3, [r7, #6]
 800f8ea:	b29b      	uxth	r3, r3
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	0092      	lsls	r2, r2, #2
 800f8f0:	4413      	add	r3, r2
 800f8f2:	005b      	lsls	r3, r3, #1
 800f8f4:	b29a      	uxth	r2, r3
 800f8f6:	79fb      	ldrb	r3, [r7, #7]
 800f8f8:	b211      	sxth	r1, r2
 800f8fa:	4a06      	ldr	r2, [pc, #24]	@ (800f914 <temperature_set_heater_duty+0x4c>)
 800f8fc:	3318      	adds	r3, #24
 800f8fe:	005b      	lsls	r3, r3, #1
 800f900:	4413      	add	r3, r2
 800f902:	460a      	mov	r2, r1
 800f904:	805a      	strh	r2, [r3, #2]
}
 800f906:	bf00      	nop
 800f908:	370c      	adds	r7, #12
 800f90a:	46bd      	mov	sp, r7
 800f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f910:	4770      	bx	lr
 800f912:	bf00      	nop
 800f914:	20002350 	.word	0x20002350

0800f918 <temperature_get_heater_duty>:
uint8_t temperature_get_heater_duty(uint8_t channel)
{
 800f918:	b480      	push	{r7}
 800f91a:	b083      	sub	sp, #12
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	4603      	mov	r3, r0
 800f920:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Heater_duty[channel]/10);
 800f922:	79fb      	ldrb	r3, [r7, #7]
 800f924:	4a09      	ldr	r2, [pc, #36]	@ (800f94c <temperature_get_heater_duty+0x34>)
 800f926:	3318      	adds	r3, #24
 800f928:	005b      	lsls	r3, r3, #1
 800f92a:	4413      	add	r3, r2
 800f92c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f930:	4a07      	ldr	r2, [pc, #28]	@ (800f950 <temperature_get_heater_duty+0x38>)
 800f932:	fb82 1203 	smull	r1, r2, r2, r3
 800f936:	1092      	asrs	r2, r2, #2
 800f938:	17db      	asrs	r3, r3, #31
 800f93a:	1ad3      	subs	r3, r2, r3
 800f93c:	b21b      	sxth	r3, r3
 800f93e:	b2db      	uxtb	r3, r3
}
 800f940:	4618      	mov	r0, r3
 800f942:	370c      	adds	r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr
 800f94c:	20002350 	.word	0x20002350
 800f950:	66666667 	.word	0x66666667

0800f954 <temperature_set_auto_ctrl>:

void temperature_set_auto_ctrl(uint8_t auto_0, uint8_t auto_1, uint8_t auto_2, uint8_t auto_3)
{
 800f954:	b590      	push	{r4, r7, lr}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	4604      	mov	r4, r0
 800f95c:	4608      	mov	r0, r1
 800f95e:	4611      	mov	r1, r2
 800f960:	461a      	mov	r2, r3
 800f962:	4623      	mov	r3, r4
 800f964:	71fb      	strb	r3, [r7, #7]
 800f966:	4603      	mov	r3, r0
 800f968:	71bb      	strb	r3, [r7, #6]
 800f96a:	460b      	mov	r3, r1
 800f96c:	717b      	strb	r3, [r7, #5]
 800f96e:	4613      	mov	r3, r2
 800f970:	713b      	strb	r3, [r7, #4]
    s_Temperature_CurrentState.Temp_auto = (auto_0 << TEMP0_AUTO) | (auto_1 << TEMP1_AUTO) | (auto_2 << TEMP2_AUTO) | (auto_3 << TEMP3_AUTO);
 800f972:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f976:	005b      	lsls	r3, r3, #1
 800f978:	b25a      	sxtb	r2, r3
 800f97a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f97e:	4313      	orrs	r3, r2
 800f980:	b25a      	sxtb	r2, r3
 800f982:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800f986:	009b      	lsls	r3, r3, #2
 800f988:	b25b      	sxtb	r3, r3
 800f98a:	4313      	orrs	r3, r2
 800f98c:	b25a      	sxtb	r2, r3
 800f98e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800f992:	00db      	lsls	r3, r3, #3
 800f994:	b25b      	sxtb	r3, r3
 800f996:	4313      	orrs	r3, r2
 800f998:	b25b      	sxtb	r3, r3
 800f99a:	b2da      	uxtb	r2, r3
 800f99c:	4b13      	ldr	r3, [pc, #76]	@ (800f9ec <temperature_set_auto_ctrl+0x98>)
 800f99e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	lt8722_set_swen_req(0, LT8722_SWEN_REQ_DISABLED);
 800f9a2:	2100      	movs	r1, #0
 800f9a4:	2000      	movs	r0, #0
 800f9a6:	f7fd f832 	bl	800ca0e <lt8722_set_swen_req>
	heater_set_duty_pwm_channel(0, 0);
 800f9aa:	2100      	movs	r1, #0
 800f9ac:	2000      	movs	r0, #0
 800f9ae:	f7fc fb6f 	bl	800c090 <heater_set_duty_pwm_channel>
	lt8722_set_swen_req(1, LT8722_SWEN_REQ_DISABLED);
 800f9b2:	2100      	movs	r1, #0
 800f9b4:	2001      	movs	r0, #1
 800f9b6:	f7fd f82a 	bl	800ca0e <lt8722_set_swen_req>
	heater_set_duty_pwm_channel(1, 0);
 800f9ba:	2100      	movs	r1, #0
 800f9bc:	2001      	movs	r0, #1
 800f9be:	f7fc fb67 	bl	800c090 <heater_set_duty_pwm_channel>
	lt8722_set_swen_req(2, LT8722_SWEN_REQ_DISABLED);
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	2002      	movs	r0, #2
 800f9c6:	f7fd f822 	bl	800ca0e <lt8722_set_swen_req>
	heater_set_duty_pwm_channel(2, 0);
 800f9ca:	2100      	movs	r1, #0
 800f9cc:	2002      	movs	r0, #2
 800f9ce:	f7fc fb5f 	bl	800c090 <heater_set_duty_pwm_channel>
	lt8722_set_swen_req(3, LT8722_SWEN_REQ_DISABLED);
 800f9d2:	2100      	movs	r1, #0
 800f9d4:	2003      	movs	r0, #3
 800f9d6:	f7fd f81a 	bl	800ca0e <lt8722_set_swen_req>
	heater_set_duty_pwm_channel(3, 0);
 800f9da:	2100      	movs	r1, #0
 800f9dc:	2003      	movs	r0, #3
 800f9de:	f7fc fb57 	bl	800c090 <heater_set_duty_pwm_channel>
    return;
 800f9e2:	bf00      	nop
}
 800f9e4:	370c      	adds	r7, #12
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd90      	pop	{r4, r7, pc}
 800f9ea:	bf00      	nop
 800f9ec:	20002350 	.word	0x20002350

0800f9f0 <tec_set_dir>:

void tec_set_dir(tec_dir_t dir_0, tec_dir_t dir_1, tec_dir_t dir_2, tec_dir_t dir_3)
{
 800f9f0:	b490      	push	{r4, r7}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	4604      	mov	r4, r0
 800f9f8:	4608      	mov	r0, r1
 800f9fa:	4611      	mov	r1, r2
 800f9fc:	461a      	mov	r2, r3
 800f9fe:	4623      	mov	r3, r4
 800fa00:	71fb      	strb	r3, [r7, #7]
 800fa02:	4603      	mov	r3, r0
 800fa04:	71bb      	strb	r3, [r7, #6]
 800fa06:	460b      	mov	r3, r1
 800fa08:	717b      	strb	r3, [r7, #5]
 800fa0a:	4613      	mov	r3, r2
 800fa0c:	713b      	strb	r3, [r7, #4]
    s_Temperature_CurrentState.Temp_change_flag = 1;
 800fa0e:	4b10      	ldr	r3, [pc, #64]	@ (800fa50 <tec_set_dir+0x60>)
 800fa10:	2201      	movs	r2, #1
 800fa12:	701a      	strb	r2, [r3, #0]
    s_Temperature_CurrentState.Tec_dir = (dir_0 << TEC0_DIR) | (dir_1 << TEC1_DIR) | (dir_2 << TEC2_DIR) | (dir_3 << TEC3_DIR);
 800fa14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fa18:	005b      	lsls	r3, r3, #1
 800fa1a:	b25a      	sxtb	r2, r3
 800fa1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa20:	4313      	orrs	r3, r2
 800fa22:	b25a      	sxtb	r2, r3
 800fa24:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	b25b      	sxtb	r3, r3
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	b25a      	sxtb	r2, r3
 800fa30:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800fa34:	00db      	lsls	r3, r3, #3
 800fa36:	b25b      	sxtb	r3, r3
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	b25b      	sxtb	r3, r3
 800fa3c:	b2da      	uxtb	r2, r3
 800fa3e:	4b04      	ldr	r3, [pc, #16]	@ (800fa50 <tec_set_dir+0x60>)
 800fa40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return;
 800fa44:	bf00      	nop
}
 800fa46:	3708      	adds	r7, #8
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bc90      	pop	{r4, r7}
 800fa4c:	4770      	bx	lr
 800fa4e:	bf00      	nop
 800fa50:	20002350 	.word	0x20002350

0800fa54 <LL_GPIO_SetOutputPin>:
{
 800fa54:	b480      	push	{r7}
 800fa56:	b083      	sub	sp, #12
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	683a      	ldr	r2, [r7, #0]
 800fa62:	619a      	str	r2, [r3, #24]
}
 800fa64:	bf00      	nop
 800fa66:	370c      	adds	r7, #12
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr

0800fa70 <LL_GPIO_ResetOutputPin>:
{
 800fa70:	b480      	push	{r7}
 800fa72:	b083      	sub	sp, #12
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	041a      	lsls	r2, r3, #16
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	619a      	str	r2, [r3, #24]
}
 800fa82:	bf00      	nop
 800fa84:	370c      	adds	r7, #12
 800fa86:	46bd      	mov	sp, r7
 800fa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8c:	4770      	bx	lr
	...

0800fa90 <Ex_Watchdog_Init>:
		181
	}
};

void Ex_Watchdog_Init(void)
{
 800fa90:	b480      	push	{r7}
 800fa92:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 800fa94:	4b03      	ldr	r3, [pc, #12]	@ (800faa4 <Ex_Watchdog_Init+0x14>)
 800fa96:	2200      	movs	r2, #0
 800fa98:	701a      	strb	r2, [r3, #0]
}
 800fa9a:	bf00      	nop
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr
 800faa4:	20003668 	.word	0x20003668

0800faa8 <Ex_Watchdog_CreateTask>:

void Ex_Watchdog_CreateTask(void)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 800faac:	4902      	ldr	r1, [pc, #8]	@ (800fab8 <Ex_Watchdog_CreateTask+0x10>)
 800faae:	4803      	ldr	r0, [pc, #12]	@ (800fabc <Ex_Watchdog_CreateTask+0x14>)
 800fab0:	f002 fe9c 	bl	80127ec <SCH_TASK_CreateTask>
}
 800fab4:	bf00      	nop
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	200023a4 	.word	0x200023a4
 800fabc:	200023a0 	.word	0x200023a0

0800fac0 <status_wdt_update>:

void status_wdt_update(void)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	af00      	add	r7, sp, #0
	if (WDT_Current)
 800fac4:	4b14      	ldr	r3, [pc, #80]	@ (800fb18 <status_wdt_update+0x58>)
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d012      	beq.n	800faf2 <status_wdt_update+0x32>
	{
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800facc:	2001      	movs	r0, #1
 800face:	f002 fe77 	bl	80127c0 <SCH_TIM_HasCompleted>
 800fad2:	4603      	mov	r3, r0
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d01d      	beq.n	800fb14 <status_wdt_update+0x54>
		{
			WDT_Current = 0;
 800fad8:	4b0f      	ldr	r3, [pc, #60]	@ (800fb18 <status_wdt_update+0x58>)
 800fada:	2200      	movs	r2, #0
 800fadc:	701a      	strb	r2, [r3, #0]
			LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800fade:	2102      	movs	r1, #2
 800fae0:	480e      	ldr	r0, [pc, #56]	@ (800fb1c <status_wdt_update+0x5c>)
 800fae2:	f7ff ffc5 	bl	800fa70 <LL_GPIO_ResetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 800fae6:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800faea:	2001      	movs	r0, #1
 800faec:	f002 fe52 	bl	8012794 <SCH_TIM_Start>
			WDT_Current = 1;
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
		}
	}
}
 800faf0:	e010      	b.n	800fb14 <status_wdt_update+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800faf2:	2001      	movs	r0, #1
 800faf4:	f002 fe64 	bl	80127c0 <SCH_TIM_HasCompleted>
 800faf8:	4603      	mov	r3, r0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d00a      	beq.n	800fb14 <status_wdt_update+0x54>
			WDT_Current = 1;
 800fafe:	4b06      	ldr	r3, [pc, #24]	@ (800fb18 <status_wdt_update+0x58>)
 800fb00:	2201      	movs	r2, #1
 800fb02:	701a      	strb	r2, [r3, #0]
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800fb04:	2102      	movs	r1, #2
 800fb06:	4805      	ldr	r0, [pc, #20]	@ (800fb1c <status_wdt_update+0x5c>)
 800fb08:	f7ff ffa4 	bl	800fa54 <LL_GPIO_SetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 800fb0c:	21c8      	movs	r1, #200	@ 0xc8
 800fb0e:	2001      	movs	r0, #1
 800fb10:	f002 fe40 	bl	8012794 <SCH_TIM_Start>
}
 800fb14:	bf00      	nop
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	20003668 	.word	0x20003668
 800fb1c:	40020000 	.word	0x40020000

0800fb20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800fb24:	4b0e      	ldr	r3, [pc, #56]	@ (800fb60 <HAL_Init+0x40>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4a0d      	ldr	r2, [pc, #52]	@ (800fb60 <HAL_Init+0x40>)
 800fb2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800fb2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800fb30:	4b0b      	ldr	r3, [pc, #44]	@ (800fb60 <HAL_Init+0x40>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4a0a      	ldr	r2, [pc, #40]	@ (800fb60 <HAL_Init+0x40>)
 800fb36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800fb3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800fb3c:	4b08      	ldr	r3, [pc, #32]	@ (800fb60 <HAL_Init+0x40>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	4a07      	ldr	r2, [pc, #28]	@ (800fb60 <HAL_Init+0x40>)
 800fb42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fb46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800fb48:	2003      	movs	r0, #3
 800fb4a:	f000 fba5 	bl	8010298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800fb4e:	200f      	movs	r0, #15
 800fb50:	f000 f83e 	bl	800fbd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800fb54:	f7ff fb4e 	bl	800f1f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800fb58:	2300      	movs	r3, #0
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	bd80      	pop	{r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	40023c00 	.word	0x40023c00

0800fb64 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800fb68:	4b11      	ldr	r3, [pc, #68]	@ (800fbb0 <HAL_DeInit+0x4c>)
 800fb6a:	4a12      	ldr	r2, [pc, #72]	@ (800fbb4 <HAL_DeInit+0x50>)
 800fb6c:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800fb6e:	4b10      	ldr	r3, [pc, #64]	@ (800fbb0 <HAL_DeInit+0x4c>)
 800fb70:	2200      	movs	r2, #0
 800fb72:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800fb74:	4b0e      	ldr	r3, [pc, #56]	@ (800fbb0 <HAL_DeInit+0x4c>)
 800fb76:	4a10      	ldr	r2, [pc, #64]	@ (800fbb8 <HAL_DeInit+0x54>)
 800fb78:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800fb7a:	4b0d      	ldr	r3, [pc, #52]	@ (800fbb0 <HAL_DeInit+0x4c>)
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 800fb80:	4b0b      	ldr	r3, [pc, #44]	@ (800fbb0 <HAL_DeInit+0x4c>)
 800fb82:	4a0e      	ldr	r2, [pc, #56]	@ (800fbbc <HAL_DeInit+0x58>)
 800fb84:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800fb86:	4b0a      	ldr	r3, [pc, #40]	@ (800fbb0 <HAL_DeInit+0x4c>)
 800fb88:	2200      	movs	r2, #0
 800fb8a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800fb8c:	4b08      	ldr	r3, [pc, #32]	@ (800fbb0 <HAL_DeInit+0x4c>)
 800fb8e:	22c1      	movs	r2, #193	@ 0xc1
 800fb90:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800fb92:	4b07      	ldr	r3, [pc, #28]	@ (800fbb0 <HAL_DeInit+0x4c>)
 800fb94:	2200      	movs	r2, #0
 800fb96:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 800fb98:	4b05      	ldr	r3, [pc, #20]	@ (800fbb0 <HAL_DeInit+0x4c>)
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 800fb9e:	4b04      	ldr	r3, [pc, #16]	@ (800fbb0 <HAL_DeInit+0x4c>)
 800fba0:	2200      	movs	r2, #0
 800fba2:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800fba4:	f000 f80c 	bl	800fbc0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800fba8:	2300      	movs	r3, #0
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	40023800 	.word	0x40023800
 800fbb4:	f6fec9ff 	.word	0xf6fec9ff
 800fbb8:	04777933 	.word	0x04777933
 800fbbc:	226011ff 	.word	0x226011ff

0800fbc0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 800fbc4:	bf00      	nop
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr
	...

0800fbd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800fbd8:	4b12      	ldr	r3, [pc, #72]	@ (800fc24 <HAL_InitTick+0x54>)
 800fbda:	681a      	ldr	r2, [r3, #0]
 800fbdc:	4b12      	ldr	r3, [pc, #72]	@ (800fc28 <HAL_InitTick+0x58>)
 800fbde:	781b      	ldrb	r3, [r3, #0]
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fbe6:	fbb3 f3f1 	udiv	r3, r3, r1
 800fbea:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f000 fb79 	bl	80102e6 <HAL_SYSTICK_Config>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d001      	beq.n	800fbfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	e00e      	b.n	800fc1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2b0f      	cmp	r3, #15
 800fc02:	d80a      	bhi.n	800fc1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800fc04:	2200      	movs	r2, #0
 800fc06:	6879      	ldr	r1, [r7, #4]
 800fc08:	f04f 30ff 	mov.w	r0, #4294967295
 800fc0c:	f000 fb4f 	bl	80102ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800fc10:	4a06      	ldr	r2, [pc, #24]	@ (800fc2c <HAL_InitTick+0x5c>)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800fc16:	2300      	movs	r3, #0
 800fc18:	e000      	b.n	800fc1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800fc1a:	2301      	movs	r3, #1
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3708      	adds	r7, #8
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	20002330 	.word	0x20002330
 800fc28:	200023b8 	.word	0x200023b8
 800fc2c:	200023b4 	.word	0x200023b4

0800fc30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800fc30:	b480      	push	{r7}
 800fc32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800fc34:	4b06      	ldr	r3, [pc, #24]	@ (800fc50 <HAL_IncTick+0x20>)
 800fc36:	781b      	ldrb	r3, [r3, #0]
 800fc38:	461a      	mov	r2, r3
 800fc3a:	4b06      	ldr	r3, [pc, #24]	@ (800fc54 <HAL_IncTick+0x24>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	4413      	add	r3, r2
 800fc40:	4a04      	ldr	r2, [pc, #16]	@ (800fc54 <HAL_IncTick+0x24>)
 800fc42:	6013      	str	r3, [r2, #0]
}
 800fc44:	bf00      	nop
 800fc46:	46bd      	mov	sp, r7
 800fc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4c:	4770      	bx	lr
 800fc4e:	bf00      	nop
 800fc50:	200023b8 	.word	0x200023b8
 800fc54:	2000366c 	.word	0x2000366c

0800fc58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	af00      	add	r7, sp, #0
  return uwTick;
 800fc5c:	4b03      	ldr	r3, [pc, #12]	@ (800fc6c <HAL_GetTick+0x14>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	46bd      	mov	sp, r7
 800fc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc68:	4770      	bx	lr
 800fc6a:	bf00      	nop
 800fc6c:	2000366c 	.word	0x2000366c

0800fc70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b084      	sub	sp, #16
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fc78:	2300      	movs	r3, #0
 800fc7a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d101      	bne.n	800fc86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800fc82:	2301      	movs	r3, #1
 800fc84:	e033      	b.n	800fcee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d109      	bne.n	800fca2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f7ff fad8 	bl	800f244 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2200      	movs	r2, #0
 800fc98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fca6:	f003 0310 	and.w	r3, r3, #16
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d118      	bne.n	800fce0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcb2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800fcb6:	f023 0302 	bic.w	r3, r3, #2
 800fcba:	f043 0202 	orr.w	r2, r3, #2
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 f93a 	bl	800ff3c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2200      	movs	r2, #0
 800fccc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcd2:	f023 0303 	bic.w	r3, r3, #3
 800fcd6:	f043 0201 	orr.w	r2, r3, #1
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	641a      	str	r2, [r3, #64]	@ 0x40
 800fcde:	e001      	b.n	800fce4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800fce0:	2301      	movs	r3, #1
 800fce2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2200      	movs	r2, #0
 800fce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800fcec:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3710      	adds	r7, #16
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
	...

0800fcf8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b085      	sub	sp, #20
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800fd02:	2300      	movs	r3, #0
 800fd04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d101      	bne.n	800fd14 <HAL_ADC_ConfigChannel+0x1c>
 800fd10:	2302      	movs	r3, #2
 800fd12:	e105      	b.n	800ff20 <HAL_ADC_ConfigChannel+0x228>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2201      	movs	r2, #1
 800fd18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	2b09      	cmp	r3, #9
 800fd22:	d925      	bls.n	800fd70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	68d9      	ldr	r1, [r3, #12]
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	461a      	mov	r2, r3
 800fd32:	4613      	mov	r3, r2
 800fd34:	005b      	lsls	r3, r3, #1
 800fd36:	4413      	add	r3, r2
 800fd38:	3b1e      	subs	r3, #30
 800fd3a:	2207      	movs	r2, #7
 800fd3c:	fa02 f303 	lsl.w	r3, r2, r3
 800fd40:	43da      	mvns	r2, r3
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	400a      	ands	r2, r1
 800fd48:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	68d9      	ldr	r1, [r3, #12]
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	689a      	ldr	r2, [r3, #8]
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	005b      	lsls	r3, r3, #1
 800fd60:	4403      	add	r3, r0
 800fd62:	3b1e      	subs	r3, #30
 800fd64:	409a      	lsls	r2, r3
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	430a      	orrs	r2, r1
 800fd6c:	60da      	str	r2, [r3, #12]
 800fd6e:	e022      	b.n	800fdb6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	6919      	ldr	r1, [r3, #16]
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	b29b      	uxth	r3, r3
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	4613      	mov	r3, r2
 800fd80:	005b      	lsls	r3, r3, #1
 800fd82:	4413      	add	r3, r2
 800fd84:	2207      	movs	r2, #7
 800fd86:	fa02 f303 	lsl.w	r3, r2, r3
 800fd8a:	43da      	mvns	r2, r3
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	400a      	ands	r2, r1
 800fd92:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	6919      	ldr	r1, [r3, #16]
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	689a      	ldr	r2, [r3, #8]
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	4618      	mov	r0, r3
 800fda6:	4603      	mov	r3, r0
 800fda8:	005b      	lsls	r3, r3, #1
 800fdaa:	4403      	add	r3, r0
 800fdac:	409a      	lsls	r2, r3
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	430a      	orrs	r2, r1
 800fdb4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	685b      	ldr	r3, [r3, #4]
 800fdba:	2b06      	cmp	r3, #6
 800fdbc:	d824      	bhi.n	800fe08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	685a      	ldr	r2, [r3, #4]
 800fdc8:	4613      	mov	r3, r2
 800fdca:	009b      	lsls	r3, r3, #2
 800fdcc:	4413      	add	r3, r2
 800fdce:	3b05      	subs	r3, #5
 800fdd0:	221f      	movs	r2, #31
 800fdd2:	fa02 f303 	lsl.w	r3, r2, r3
 800fdd6:	43da      	mvns	r2, r3
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	400a      	ands	r2, r1
 800fdde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	4618      	mov	r0, r3
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	685a      	ldr	r2, [r3, #4]
 800fdf2:	4613      	mov	r3, r2
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	4413      	add	r3, r2
 800fdf8:	3b05      	subs	r3, #5
 800fdfa:	fa00 f203 	lsl.w	r2, r0, r3
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	430a      	orrs	r2, r1
 800fe04:	635a      	str	r2, [r3, #52]	@ 0x34
 800fe06:	e04c      	b.n	800fea2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	2b0c      	cmp	r3, #12
 800fe0e:	d824      	bhi.n	800fe5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	685a      	ldr	r2, [r3, #4]
 800fe1a:	4613      	mov	r3, r2
 800fe1c:	009b      	lsls	r3, r3, #2
 800fe1e:	4413      	add	r3, r2
 800fe20:	3b23      	subs	r3, #35	@ 0x23
 800fe22:	221f      	movs	r2, #31
 800fe24:	fa02 f303 	lsl.w	r3, r2, r3
 800fe28:	43da      	mvns	r2, r3
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	400a      	ands	r2, r1
 800fe30:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	4618      	mov	r0, r3
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	685a      	ldr	r2, [r3, #4]
 800fe44:	4613      	mov	r3, r2
 800fe46:	009b      	lsls	r3, r3, #2
 800fe48:	4413      	add	r3, r2
 800fe4a:	3b23      	subs	r3, #35	@ 0x23
 800fe4c:	fa00 f203 	lsl.w	r2, r0, r3
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	430a      	orrs	r2, r1
 800fe56:	631a      	str	r2, [r3, #48]	@ 0x30
 800fe58:	e023      	b.n	800fea2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	685a      	ldr	r2, [r3, #4]
 800fe64:	4613      	mov	r3, r2
 800fe66:	009b      	lsls	r3, r3, #2
 800fe68:	4413      	add	r3, r2
 800fe6a:	3b41      	subs	r3, #65	@ 0x41
 800fe6c:	221f      	movs	r2, #31
 800fe6e:	fa02 f303 	lsl.w	r3, r2, r3
 800fe72:	43da      	mvns	r2, r3
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	400a      	ands	r2, r1
 800fe7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	4618      	mov	r0, r3
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	685a      	ldr	r2, [r3, #4]
 800fe8e:	4613      	mov	r3, r2
 800fe90:	009b      	lsls	r3, r3, #2
 800fe92:	4413      	add	r3, r2
 800fe94:	3b41      	subs	r3, #65	@ 0x41
 800fe96:	fa00 f203 	lsl.w	r2, r0, r3
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	430a      	orrs	r2, r1
 800fea0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800fea2:	4b22      	ldr	r3, [pc, #136]	@ (800ff2c <HAL_ADC_ConfigChannel+0x234>)
 800fea4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	4a21      	ldr	r2, [pc, #132]	@ (800ff30 <HAL_ADC_ConfigChannel+0x238>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d109      	bne.n	800fec4 <HAL_ADC_ConfigChannel+0x1cc>
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	2b12      	cmp	r3, #18
 800feb6:	d105      	bne.n	800fec4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	4a19      	ldr	r2, [pc, #100]	@ (800ff30 <HAL_ADC_ConfigChannel+0x238>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d123      	bne.n	800ff16 <HAL_ADC_ConfigChannel+0x21e>
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	2b10      	cmp	r3, #16
 800fed4:	d003      	beq.n	800fede <HAL_ADC_ConfigChannel+0x1e6>
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	2b11      	cmp	r3, #17
 800fedc:	d11b      	bne.n	800ff16 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	2b10      	cmp	r3, #16
 800fef0:	d111      	bne.n	800ff16 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800fef2:	4b10      	ldr	r3, [pc, #64]	@ (800ff34 <HAL_ADC_ConfigChannel+0x23c>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	4a10      	ldr	r2, [pc, #64]	@ (800ff38 <HAL_ADC_ConfigChannel+0x240>)
 800fef8:	fba2 2303 	umull	r2, r3, r2, r3
 800fefc:	0c9a      	lsrs	r2, r3, #18
 800fefe:	4613      	mov	r3, r2
 800ff00:	009b      	lsls	r3, r3, #2
 800ff02:	4413      	add	r3, r2
 800ff04:	005b      	lsls	r3, r3, #1
 800ff06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800ff08:	e002      	b.n	800ff10 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	3b01      	subs	r3, #1
 800ff0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d1f9      	bne.n	800ff0a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800ff1e:	2300      	movs	r3, #0
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3714      	adds	r7, #20
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr
 800ff2c:	40012300 	.word	0x40012300
 800ff30:	40012000 	.word	0x40012000
 800ff34:	20002330 	.word	0x20002330
 800ff38:	431bde83 	.word	0x431bde83

0800ff3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b085      	sub	sp, #20
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ff44:	4b79      	ldr	r3, [pc, #484]	@ (801012c <ADC_Init+0x1f0>)
 800ff46:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	685b      	ldr	r3, [r3, #4]
 800ff4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	685a      	ldr	r2, [r3, #4]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	431a      	orrs	r2, r3
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	685a      	ldr	r2, [r3, #4]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ff70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	6859      	ldr	r1, [r3, #4]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	691b      	ldr	r3, [r3, #16]
 800ff7c:	021a      	lsls	r2, r3, #8
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	430a      	orrs	r2, r1
 800ff84:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	685a      	ldr	r2, [r3, #4]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800ff94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	6859      	ldr	r1, [r3, #4]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	689a      	ldr	r2, [r3, #8]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	430a      	orrs	r2, r1
 800ffa6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	689a      	ldr	r2, [r3, #8]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ffb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	6899      	ldr	r1, [r3, #8]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	68da      	ldr	r2, [r3, #12]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	430a      	orrs	r2, r1
 800ffc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffce:	4a58      	ldr	r2, [pc, #352]	@ (8010130 <ADC_Init+0x1f4>)
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	d022      	beq.n	801001a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	689a      	ldr	r2, [r3, #8]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ffe2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	6899      	ldr	r1, [r3, #8]
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	430a      	orrs	r2, r1
 800fff4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	689a      	ldr	r2, [r3, #8]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8010004:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	6899      	ldr	r1, [r3, #8]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	430a      	orrs	r2, r1
 8010016:	609a      	str	r2, [r3, #8]
 8010018:	e00f      	b.n	801003a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	689a      	ldr	r2, [r3, #8]
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8010028:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	689a      	ldr	r2, [r3, #8]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8010038:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	689a      	ldr	r2, [r3, #8]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	f022 0202 	bic.w	r2, r2, #2
 8010048:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	6899      	ldr	r1, [r3, #8]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	7e1b      	ldrb	r3, [r3, #24]
 8010054:	005a      	lsls	r2, r3, #1
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	430a      	orrs	r2, r1
 801005c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d01b      	beq.n	80100a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	685a      	ldr	r2, [r3, #4]
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010076:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	685a      	ldr	r2, [r3, #4]
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8010086:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	6859      	ldr	r1, [r3, #4]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010092:	3b01      	subs	r3, #1
 8010094:	035a      	lsls	r2, r3, #13
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	430a      	orrs	r2, r1
 801009c:	605a      	str	r2, [r3, #4]
 801009e:	e007      	b.n	80100b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	685a      	ldr	r2, [r3, #4]
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80100ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80100be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	69db      	ldr	r3, [r3, #28]
 80100ca:	3b01      	subs	r3, #1
 80100cc:	051a      	lsls	r2, r3, #20
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	430a      	orrs	r2, r1
 80100d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	689a      	ldr	r2, [r3, #8]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80100e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	6899      	ldr	r1, [r3, #8]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80100f2:	025a      	lsls	r2, r3, #9
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	430a      	orrs	r2, r1
 80100fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	689a      	ldr	r2, [r3, #8]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801010a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	6899      	ldr	r1, [r3, #8]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	695b      	ldr	r3, [r3, #20]
 8010116:	029a      	lsls	r2, r3, #10
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	430a      	orrs	r2, r1
 801011e:	609a      	str	r2, [r3, #8]
}
 8010120:	bf00      	nop
 8010122:	3714      	adds	r7, #20
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr
 801012c:	40012300 	.word	0x40012300
 8010130:	0f000001 	.word	0x0f000001

08010134 <__NVIC_SetPriorityGrouping>:
{
 8010134:	b480      	push	{r7}
 8010136:	b085      	sub	sp, #20
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f003 0307 	and.w	r3, r3, #7
 8010142:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010144:	4b0c      	ldr	r3, [pc, #48]	@ (8010178 <__NVIC_SetPriorityGrouping+0x44>)
 8010146:	68db      	ldr	r3, [r3, #12]
 8010148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801014a:	68ba      	ldr	r2, [r7, #8]
 801014c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8010150:	4013      	ands	r3, r2
 8010152:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801015c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8010160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010166:	4a04      	ldr	r2, [pc, #16]	@ (8010178 <__NVIC_SetPriorityGrouping+0x44>)
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	60d3      	str	r3, [r2, #12]
}
 801016c:	bf00      	nop
 801016e:	3714      	adds	r7, #20
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr
 8010178:	e000ed00 	.word	0xe000ed00

0801017c <__NVIC_GetPriorityGrouping>:
{
 801017c:	b480      	push	{r7}
 801017e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010180:	4b04      	ldr	r3, [pc, #16]	@ (8010194 <__NVIC_GetPriorityGrouping+0x18>)
 8010182:	68db      	ldr	r3, [r3, #12]
 8010184:	0a1b      	lsrs	r3, r3, #8
 8010186:	f003 0307 	and.w	r3, r3, #7
}
 801018a:	4618      	mov	r0, r3
 801018c:	46bd      	mov	sp, r7
 801018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010192:	4770      	bx	lr
 8010194:	e000ed00 	.word	0xe000ed00

08010198 <__NVIC_SetPriority>:
{
 8010198:	b480      	push	{r7}
 801019a:	b083      	sub	sp, #12
 801019c:	af00      	add	r7, sp, #0
 801019e:	4603      	mov	r3, r0
 80101a0:	6039      	str	r1, [r7, #0]
 80101a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80101a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	db0a      	blt.n	80101c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	b2da      	uxtb	r2, r3
 80101b0:	490c      	ldr	r1, [pc, #48]	@ (80101e4 <__NVIC_SetPriority+0x4c>)
 80101b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80101b6:	0112      	lsls	r2, r2, #4
 80101b8:	b2d2      	uxtb	r2, r2
 80101ba:	440b      	add	r3, r1
 80101bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80101c0:	e00a      	b.n	80101d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	b2da      	uxtb	r2, r3
 80101c6:	4908      	ldr	r1, [pc, #32]	@ (80101e8 <__NVIC_SetPriority+0x50>)
 80101c8:	79fb      	ldrb	r3, [r7, #7]
 80101ca:	f003 030f 	and.w	r3, r3, #15
 80101ce:	3b04      	subs	r3, #4
 80101d0:	0112      	lsls	r2, r2, #4
 80101d2:	b2d2      	uxtb	r2, r2
 80101d4:	440b      	add	r3, r1
 80101d6:	761a      	strb	r2, [r3, #24]
}
 80101d8:	bf00      	nop
 80101da:	370c      	adds	r7, #12
 80101dc:	46bd      	mov	sp, r7
 80101de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e2:	4770      	bx	lr
 80101e4:	e000e100 	.word	0xe000e100
 80101e8:	e000ed00 	.word	0xe000ed00

080101ec <NVIC_EncodePriority>:
{
 80101ec:	b480      	push	{r7}
 80101ee:	b089      	sub	sp, #36	@ 0x24
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f003 0307 	and.w	r3, r3, #7
 80101fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010200:	69fb      	ldr	r3, [r7, #28]
 8010202:	f1c3 0307 	rsb	r3, r3, #7
 8010206:	2b04      	cmp	r3, #4
 8010208:	bf28      	it	cs
 801020a:	2304      	movcs	r3, #4
 801020c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801020e:	69fb      	ldr	r3, [r7, #28]
 8010210:	3304      	adds	r3, #4
 8010212:	2b06      	cmp	r3, #6
 8010214:	d902      	bls.n	801021c <NVIC_EncodePriority+0x30>
 8010216:	69fb      	ldr	r3, [r7, #28]
 8010218:	3b03      	subs	r3, #3
 801021a:	e000      	b.n	801021e <NVIC_EncodePriority+0x32>
 801021c:	2300      	movs	r3, #0
 801021e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010220:	f04f 32ff 	mov.w	r2, #4294967295
 8010224:	69bb      	ldr	r3, [r7, #24]
 8010226:	fa02 f303 	lsl.w	r3, r2, r3
 801022a:	43da      	mvns	r2, r3
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	401a      	ands	r2, r3
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010234:	f04f 31ff 	mov.w	r1, #4294967295
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	fa01 f303 	lsl.w	r3, r1, r3
 801023e:	43d9      	mvns	r1, r3
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010244:	4313      	orrs	r3, r2
}
 8010246:	4618      	mov	r0, r3
 8010248:	3724      	adds	r7, #36	@ 0x24
 801024a:	46bd      	mov	sp, r7
 801024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010250:	4770      	bx	lr
	...

08010254 <SysTick_Config>:
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	3b01      	subs	r3, #1
 8010260:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010264:	d301      	bcc.n	801026a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8010266:	2301      	movs	r3, #1
 8010268:	e00f      	b.n	801028a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801026a:	4a0a      	ldr	r2, [pc, #40]	@ (8010294 <SysTick_Config+0x40>)
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	3b01      	subs	r3, #1
 8010270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010272:	210f      	movs	r1, #15
 8010274:	f04f 30ff 	mov.w	r0, #4294967295
 8010278:	f7ff ff8e 	bl	8010198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801027c:	4b05      	ldr	r3, [pc, #20]	@ (8010294 <SysTick_Config+0x40>)
 801027e:	2200      	movs	r2, #0
 8010280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010282:	4b04      	ldr	r3, [pc, #16]	@ (8010294 <SysTick_Config+0x40>)
 8010284:	2207      	movs	r2, #7
 8010286:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8010288:	2300      	movs	r3, #0
}
 801028a:	4618      	mov	r0, r3
 801028c:	3708      	adds	r7, #8
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
 8010292:	bf00      	nop
 8010294:	e000e010 	.word	0xe000e010

08010298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b082      	sub	sp, #8
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f7ff ff47 	bl	8010134 <__NVIC_SetPriorityGrouping>
}
 80102a6:	bf00      	nop
 80102a8:	3708      	adds	r7, #8
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}

080102ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80102ae:	b580      	push	{r7, lr}
 80102b0:	b086      	sub	sp, #24
 80102b2:	af00      	add	r7, sp, #0
 80102b4:	4603      	mov	r3, r0
 80102b6:	60b9      	str	r1, [r7, #8]
 80102b8:	607a      	str	r2, [r7, #4]
 80102ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80102bc:	2300      	movs	r3, #0
 80102be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80102c0:	f7ff ff5c 	bl	801017c <__NVIC_GetPriorityGrouping>
 80102c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80102c6:	687a      	ldr	r2, [r7, #4]
 80102c8:	68b9      	ldr	r1, [r7, #8]
 80102ca:	6978      	ldr	r0, [r7, #20]
 80102cc:	f7ff ff8e 	bl	80101ec <NVIC_EncodePriority>
 80102d0:	4602      	mov	r2, r0
 80102d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102d6:	4611      	mov	r1, r2
 80102d8:	4618      	mov	r0, r3
 80102da:	f7ff ff5d 	bl	8010198 <__NVIC_SetPriority>
}
 80102de:	bf00      	nop
 80102e0:	3718      	adds	r7, #24
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}

080102e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80102e6:	b580      	push	{r7, lr}
 80102e8:	b082      	sub	sp, #8
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f7ff ffb0 	bl	8010254 <SysTick_Config>
 80102f4:	4603      	mov	r3, r0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3708      	adds	r7, #8
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
	...

08010300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010300:	b480      	push	{r7}
 8010302:	b089      	sub	sp, #36	@ 0x24
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801030a:	2300      	movs	r3, #0
 801030c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801030e:	2300      	movs	r3, #0
 8010310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010312:	2300      	movs	r3, #0
 8010314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010316:	2300      	movs	r3, #0
 8010318:	61fb      	str	r3, [r7, #28]
 801031a:	e16b      	b.n	80105f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801031c:	2201      	movs	r2, #1
 801031e:	69fb      	ldr	r3, [r7, #28]
 8010320:	fa02 f303 	lsl.w	r3, r2, r3
 8010324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	697a      	ldr	r2, [r7, #20]
 801032c:	4013      	ands	r3, r2
 801032e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010330:	693a      	ldr	r2, [r7, #16]
 8010332:	697b      	ldr	r3, [r7, #20]
 8010334:	429a      	cmp	r2, r3
 8010336:	f040 815a 	bne.w	80105ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	f003 0303 	and.w	r3, r3, #3
 8010342:	2b01      	cmp	r3, #1
 8010344:	d005      	beq.n	8010352 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801034e:	2b02      	cmp	r3, #2
 8010350:	d130      	bne.n	80103b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	689b      	ldr	r3, [r3, #8]
 8010356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010358:	69fb      	ldr	r3, [r7, #28]
 801035a:	005b      	lsls	r3, r3, #1
 801035c:	2203      	movs	r2, #3
 801035e:	fa02 f303 	lsl.w	r3, r2, r3
 8010362:	43db      	mvns	r3, r3
 8010364:	69ba      	ldr	r2, [r7, #24]
 8010366:	4013      	ands	r3, r2
 8010368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	68da      	ldr	r2, [r3, #12]
 801036e:	69fb      	ldr	r3, [r7, #28]
 8010370:	005b      	lsls	r3, r3, #1
 8010372:	fa02 f303 	lsl.w	r3, r2, r3
 8010376:	69ba      	ldr	r2, [r7, #24]
 8010378:	4313      	orrs	r3, r2
 801037a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	69ba      	ldr	r2, [r7, #24]
 8010380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010388:	2201      	movs	r2, #1
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	fa02 f303 	lsl.w	r3, r2, r3
 8010390:	43db      	mvns	r3, r3
 8010392:	69ba      	ldr	r2, [r7, #24]
 8010394:	4013      	ands	r3, r2
 8010396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	091b      	lsrs	r3, r3, #4
 801039e:	f003 0201 	and.w	r2, r3, #1
 80103a2:	69fb      	ldr	r3, [r7, #28]
 80103a4:	fa02 f303 	lsl.w	r3, r2, r3
 80103a8:	69ba      	ldr	r2, [r7, #24]
 80103aa:	4313      	orrs	r3, r2
 80103ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	69ba      	ldr	r2, [r7, #24]
 80103b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	685b      	ldr	r3, [r3, #4]
 80103b8:	f003 0303 	and.w	r3, r3, #3
 80103bc:	2b03      	cmp	r3, #3
 80103be:	d017      	beq.n	80103f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	68db      	ldr	r3, [r3, #12]
 80103c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80103c6:	69fb      	ldr	r3, [r7, #28]
 80103c8:	005b      	lsls	r3, r3, #1
 80103ca:	2203      	movs	r2, #3
 80103cc:	fa02 f303 	lsl.w	r3, r2, r3
 80103d0:	43db      	mvns	r3, r3
 80103d2:	69ba      	ldr	r2, [r7, #24]
 80103d4:	4013      	ands	r3, r2
 80103d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	689a      	ldr	r2, [r3, #8]
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	005b      	lsls	r3, r3, #1
 80103e0:	fa02 f303 	lsl.w	r3, r2, r3
 80103e4:	69ba      	ldr	r2, [r7, #24]
 80103e6:	4313      	orrs	r3, r2
 80103e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	69ba      	ldr	r2, [r7, #24]
 80103ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	685b      	ldr	r3, [r3, #4]
 80103f4:	f003 0303 	and.w	r3, r3, #3
 80103f8:	2b02      	cmp	r3, #2
 80103fa:	d123      	bne.n	8010444 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80103fc:	69fb      	ldr	r3, [r7, #28]
 80103fe:	08da      	lsrs	r2, r3, #3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	3208      	adds	r2, #8
 8010404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010408:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801040a:	69fb      	ldr	r3, [r7, #28]
 801040c:	f003 0307 	and.w	r3, r3, #7
 8010410:	009b      	lsls	r3, r3, #2
 8010412:	220f      	movs	r2, #15
 8010414:	fa02 f303 	lsl.w	r3, r2, r3
 8010418:	43db      	mvns	r3, r3
 801041a:	69ba      	ldr	r2, [r7, #24]
 801041c:	4013      	ands	r3, r2
 801041e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	691a      	ldr	r2, [r3, #16]
 8010424:	69fb      	ldr	r3, [r7, #28]
 8010426:	f003 0307 	and.w	r3, r3, #7
 801042a:	009b      	lsls	r3, r3, #2
 801042c:	fa02 f303 	lsl.w	r3, r2, r3
 8010430:	69ba      	ldr	r2, [r7, #24]
 8010432:	4313      	orrs	r3, r2
 8010434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010436:	69fb      	ldr	r3, [r7, #28]
 8010438:	08da      	lsrs	r2, r3, #3
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	3208      	adds	r2, #8
 801043e:	69b9      	ldr	r1, [r7, #24]
 8010440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801044a:	69fb      	ldr	r3, [r7, #28]
 801044c:	005b      	lsls	r3, r3, #1
 801044e:	2203      	movs	r2, #3
 8010450:	fa02 f303 	lsl.w	r3, r2, r3
 8010454:	43db      	mvns	r3, r3
 8010456:	69ba      	ldr	r2, [r7, #24]
 8010458:	4013      	ands	r3, r2
 801045a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	685b      	ldr	r3, [r3, #4]
 8010460:	f003 0203 	and.w	r2, r3, #3
 8010464:	69fb      	ldr	r3, [r7, #28]
 8010466:	005b      	lsls	r3, r3, #1
 8010468:	fa02 f303 	lsl.w	r3, r2, r3
 801046c:	69ba      	ldr	r2, [r7, #24]
 801046e:	4313      	orrs	r3, r2
 8010470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	69ba      	ldr	r2, [r7, #24]
 8010476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8010480:	2b00      	cmp	r3, #0
 8010482:	f000 80b4 	beq.w	80105ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010486:	2300      	movs	r3, #0
 8010488:	60fb      	str	r3, [r7, #12]
 801048a:	4b60      	ldr	r3, [pc, #384]	@ (801060c <HAL_GPIO_Init+0x30c>)
 801048c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801048e:	4a5f      	ldr	r2, [pc, #380]	@ (801060c <HAL_GPIO_Init+0x30c>)
 8010490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010494:	6453      	str	r3, [r2, #68]	@ 0x44
 8010496:	4b5d      	ldr	r3, [pc, #372]	@ (801060c <HAL_GPIO_Init+0x30c>)
 8010498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801049a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801049e:	60fb      	str	r3, [r7, #12]
 80104a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80104a2:	4a5b      	ldr	r2, [pc, #364]	@ (8010610 <HAL_GPIO_Init+0x310>)
 80104a4:	69fb      	ldr	r3, [r7, #28]
 80104a6:	089b      	lsrs	r3, r3, #2
 80104a8:	3302      	adds	r3, #2
 80104aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	f003 0303 	and.w	r3, r3, #3
 80104b6:	009b      	lsls	r3, r3, #2
 80104b8:	220f      	movs	r2, #15
 80104ba:	fa02 f303 	lsl.w	r3, r2, r3
 80104be:	43db      	mvns	r3, r3
 80104c0:	69ba      	ldr	r2, [r7, #24]
 80104c2:	4013      	ands	r3, r2
 80104c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	4a52      	ldr	r2, [pc, #328]	@ (8010614 <HAL_GPIO_Init+0x314>)
 80104ca:	4293      	cmp	r3, r2
 80104cc:	d02b      	beq.n	8010526 <HAL_GPIO_Init+0x226>
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	4a51      	ldr	r2, [pc, #324]	@ (8010618 <HAL_GPIO_Init+0x318>)
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d025      	beq.n	8010522 <HAL_GPIO_Init+0x222>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	4a50      	ldr	r2, [pc, #320]	@ (801061c <HAL_GPIO_Init+0x31c>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d01f      	beq.n	801051e <HAL_GPIO_Init+0x21e>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	4a4f      	ldr	r2, [pc, #316]	@ (8010620 <HAL_GPIO_Init+0x320>)
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d019      	beq.n	801051a <HAL_GPIO_Init+0x21a>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	4a4e      	ldr	r2, [pc, #312]	@ (8010624 <HAL_GPIO_Init+0x324>)
 80104ea:	4293      	cmp	r3, r2
 80104ec:	d013      	beq.n	8010516 <HAL_GPIO_Init+0x216>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4a4d      	ldr	r2, [pc, #308]	@ (8010628 <HAL_GPIO_Init+0x328>)
 80104f2:	4293      	cmp	r3, r2
 80104f4:	d00d      	beq.n	8010512 <HAL_GPIO_Init+0x212>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	4a4c      	ldr	r2, [pc, #304]	@ (801062c <HAL_GPIO_Init+0x32c>)
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d007      	beq.n	801050e <HAL_GPIO_Init+0x20e>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	4a4b      	ldr	r2, [pc, #300]	@ (8010630 <HAL_GPIO_Init+0x330>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d101      	bne.n	801050a <HAL_GPIO_Init+0x20a>
 8010506:	2307      	movs	r3, #7
 8010508:	e00e      	b.n	8010528 <HAL_GPIO_Init+0x228>
 801050a:	2308      	movs	r3, #8
 801050c:	e00c      	b.n	8010528 <HAL_GPIO_Init+0x228>
 801050e:	2306      	movs	r3, #6
 8010510:	e00a      	b.n	8010528 <HAL_GPIO_Init+0x228>
 8010512:	2305      	movs	r3, #5
 8010514:	e008      	b.n	8010528 <HAL_GPIO_Init+0x228>
 8010516:	2304      	movs	r3, #4
 8010518:	e006      	b.n	8010528 <HAL_GPIO_Init+0x228>
 801051a:	2303      	movs	r3, #3
 801051c:	e004      	b.n	8010528 <HAL_GPIO_Init+0x228>
 801051e:	2302      	movs	r3, #2
 8010520:	e002      	b.n	8010528 <HAL_GPIO_Init+0x228>
 8010522:	2301      	movs	r3, #1
 8010524:	e000      	b.n	8010528 <HAL_GPIO_Init+0x228>
 8010526:	2300      	movs	r3, #0
 8010528:	69fa      	ldr	r2, [r7, #28]
 801052a:	f002 0203 	and.w	r2, r2, #3
 801052e:	0092      	lsls	r2, r2, #2
 8010530:	4093      	lsls	r3, r2
 8010532:	69ba      	ldr	r2, [r7, #24]
 8010534:	4313      	orrs	r3, r2
 8010536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010538:	4935      	ldr	r1, [pc, #212]	@ (8010610 <HAL_GPIO_Init+0x310>)
 801053a:	69fb      	ldr	r3, [r7, #28]
 801053c:	089b      	lsrs	r3, r3, #2
 801053e:	3302      	adds	r3, #2
 8010540:	69ba      	ldr	r2, [r7, #24]
 8010542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010546:	4b3b      	ldr	r3, [pc, #236]	@ (8010634 <HAL_GPIO_Init+0x334>)
 8010548:	689b      	ldr	r3, [r3, #8]
 801054a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801054c:	693b      	ldr	r3, [r7, #16]
 801054e:	43db      	mvns	r3, r3
 8010550:	69ba      	ldr	r2, [r7, #24]
 8010552:	4013      	ands	r3, r2
 8010554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	685b      	ldr	r3, [r3, #4]
 801055a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801055e:	2b00      	cmp	r3, #0
 8010560:	d003      	beq.n	801056a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8010562:	69ba      	ldr	r2, [r7, #24]
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	4313      	orrs	r3, r2
 8010568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801056a:	4a32      	ldr	r2, [pc, #200]	@ (8010634 <HAL_GPIO_Init+0x334>)
 801056c:	69bb      	ldr	r3, [r7, #24]
 801056e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010570:	4b30      	ldr	r3, [pc, #192]	@ (8010634 <HAL_GPIO_Init+0x334>)
 8010572:	68db      	ldr	r3, [r3, #12]
 8010574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	43db      	mvns	r3, r3
 801057a:	69ba      	ldr	r2, [r7, #24]
 801057c:	4013      	ands	r3, r2
 801057e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	685b      	ldr	r3, [r3, #4]
 8010584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010588:	2b00      	cmp	r3, #0
 801058a:	d003      	beq.n	8010594 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 801058c:	69ba      	ldr	r2, [r7, #24]
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	4313      	orrs	r3, r2
 8010592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010594:	4a27      	ldr	r2, [pc, #156]	@ (8010634 <HAL_GPIO_Init+0x334>)
 8010596:	69bb      	ldr	r3, [r7, #24]
 8010598:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801059a:	4b26      	ldr	r3, [pc, #152]	@ (8010634 <HAL_GPIO_Init+0x334>)
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	43db      	mvns	r3, r3
 80105a4:	69ba      	ldr	r2, [r7, #24]
 80105a6:	4013      	ands	r3, r2
 80105a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d003      	beq.n	80105be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80105b6:	69ba      	ldr	r2, [r7, #24]
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	4313      	orrs	r3, r2
 80105bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80105be:	4a1d      	ldr	r2, [pc, #116]	@ (8010634 <HAL_GPIO_Init+0x334>)
 80105c0:	69bb      	ldr	r3, [r7, #24]
 80105c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80105c4:	4b1b      	ldr	r3, [pc, #108]	@ (8010634 <HAL_GPIO_Init+0x334>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80105ca:	693b      	ldr	r3, [r7, #16]
 80105cc:	43db      	mvns	r3, r3
 80105ce:	69ba      	ldr	r2, [r7, #24]
 80105d0:	4013      	ands	r3, r2
 80105d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	685b      	ldr	r3, [r3, #4]
 80105d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d003      	beq.n	80105e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80105e0:	69ba      	ldr	r2, [r7, #24]
 80105e2:	693b      	ldr	r3, [r7, #16]
 80105e4:	4313      	orrs	r3, r2
 80105e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80105e8:	4a12      	ldr	r2, [pc, #72]	@ (8010634 <HAL_GPIO_Init+0x334>)
 80105ea:	69bb      	ldr	r3, [r7, #24]
 80105ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80105ee:	69fb      	ldr	r3, [r7, #28]
 80105f0:	3301      	adds	r3, #1
 80105f2:	61fb      	str	r3, [r7, #28]
 80105f4:	69fb      	ldr	r3, [r7, #28]
 80105f6:	2b0f      	cmp	r3, #15
 80105f8:	f67f ae90 	bls.w	801031c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80105fc:	bf00      	nop
 80105fe:	bf00      	nop
 8010600:	3724      	adds	r7, #36	@ 0x24
 8010602:	46bd      	mov	sp, r7
 8010604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010608:	4770      	bx	lr
 801060a:	bf00      	nop
 801060c:	40023800 	.word	0x40023800
 8010610:	40013800 	.word	0x40013800
 8010614:	40020000 	.word	0x40020000
 8010618:	40020400 	.word	0x40020400
 801061c:	40020800 	.word	0x40020800
 8010620:	40020c00 	.word	0x40020c00
 8010624:	40021000 	.word	0x40021000
 8010628:	40021400 	.word	0x40021400
 801062c:	40021800 	.word	0x40021800
 8010630:	40021c00 	.word	0x40021c00
 8010634:	40013c00 	.word	0x40013c00

08010638 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801063e:	f7ff fb0b 	bl	800fc58 <HAL_GetTick>
 8010642:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8010644:	4b5d      	ldr	r3, [pc, #372]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	4a5c      	ldr	r2, [pc, #368]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 801064a:	f043 0301 	orr.w	r3, r3, #1
 801064e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8010650:	e008      	b.n	8010664 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010652:	f7ff fb01 	bl	800fc58 <HAL_GetTick>
 8010656:	4602      	mov	r2, r0
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	1ad3      	subs	r3, r2, r3
 801065c:	2b02      	cmp	r3, #2
 801065e:	d901      	bls.n	8010664 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8010660:	2303      	movs	r3, #3
 8010662:	e0a7      	b.n	80107b4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8010664:	4b55      	ldr	r3, [pc, #340]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f003 0302 	and.w	r3, r3, #2
 801066c:	2b00      	cmp	r3, #0
 801066e:	d0f0      	beq.n	8010652 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8010670:	4b52      	ldr	r3, [pc, #328]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	4a51      	ldr	r2, [pc, #324]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 8010676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801067a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801067c:	f7ff faec 	bl	800fc58 <HAL_GetTick>
 8010680:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8010682:	4b4e      	ldr	r3, [pc, #312]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 8010684:	2200      	movs	r2, #0
 8010686:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8010688:	e00a      	b.n	80106a0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801068a:	f7ff fae5 	bl	800fc58 <HAL_GetTick>
 801068e:	4602      	mov	r2, r0
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	1ad3      	subs	r3, r2, r3
 8010694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010698:	4293      	cmp	r3, r2
 801069a:	d901      	bls.n	80106a0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 801069c:	2303      	movs	r3, #3
 801069e:	e089      	b.n	80107b4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80106a0:	4b46      	ldr	r3, [pc, #280]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 80106a2:	689b      	ldr	r3, [r3, #8]
 80106a4:	f003 030c 	and.w	r3, r3, #12
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d1ee      	bne.n	801068a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80106ac:	f7ff fad4 	bl	800fc58 <HAL_GetTick>
 80106b0:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80106b2:	4b42      	ldr	r3, [pc, #264]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	4a41      	ldr	r2, [pc, #260]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 80106b8:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 80106bc:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80106be:	e008      	b.n	80106d2 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80106c0:	f7ff faca 	bl	800fc58 <HAL_GetTick>
 80106c4:	4602      	mov	r2, r0
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	1ad3      	subs	r3, r2, r3
 80106ca:	2b64      	cmp	r3, #100	@ 0x64
 80106cc:	d901      	bls.n	80106d2 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80106ce:	2303      	movs	r3, #3
 80106d0:	e070      	b.n	80107b4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80106d2:	4b3a      	ldr	r3, [pc, #232]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d1f0      	bne.n	80106c0 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80106de:	f7ff fabb 	bl	800fc58 <HAL_GetTick>
 80106e2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80106e4:	4b35      	ldr	r3, [pc, #212]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	4a34      	ldr	r2, [pc, #208]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 80106ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80106ee:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80106f0:	e008      	b.n	8010704 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80106f2:	f7ff fab1 	bl	800fc58 <HAL_GetTick>
 80106f6:	4602      	mov	r2, r0
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	1ad3      	subs	r3, r2, r3
 80106fc:	2b02      	cmp	r3, #2
 80106fe:	d901      	bls.n	8010704 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8010700:	2303      	movs	r3, #3
 8010702:	e057      	b.n	80107b4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8010704:	4b2d      	ldr	r3, [pc, #180]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801070c:	2b00      	cmp	r3, #0
 801070e:	d1f0      	bne.n	80106f2 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8010710:	f7ff faa2 	bl	800fc58 <HAL_GetTick>
 8010714:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8010716:	4b29      	ldr	r3, [pc, #164]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	4a28      	ldr	r2, [pc, #160]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 801071c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010720:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8010722:	e008      	b.n	8010736 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8010724:	f7ff fa98 	bl	800fc58 <HAL_GetTick>
 8010728:	4602      	mov	r2, r0
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	1ad3      	subs	r3, r2, r3
 801072e:	2b02      	cmp	r3, #2
 8010730:	d901      	bls.n	8010736 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8010732:	2303      	movs	r3, #3
 8010734:	e03e      	b.n	80107b4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8010736:	4b21      	ldr	r3, [pc, #132]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801073e:	2b00      	cmp	r3, #0
 8010740:	d1f0      	bne.n	8010724 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8010742:	4b1e      	ldr	r3, [pc, #120]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 8010744:	4a1e      	ldr	r2, [pc, #120]	@ (80107c0 <HAL_RCC_DeInit+0x188>)
 8010746:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8010748:	4b1c      	ldr	r3, [pc, #112]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 801074a:	4a1e      	ldr	r2, [pc, #120]	@ (80107c4 <HAL_RCC_DeInit+0x18c>)
 801074c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8010750:	4b1a      	ldr	r3, [pc, #104]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 8010752:	68db      	ldr	r3, [r3, #12]
 8010754:	4a19      	ldr	r2, [pc, #100]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 8010756:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 801075a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 801075c:	4b17      	ldr	r3, [pc, #92]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 801075e:	68db      	ldr	r3, [r3, #12]
 8010760:	4a16      	ldr	r2, [pc, #88]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 8010762:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010766:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8010768:	4b14      	ldr	r3, [pc, #80]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 801076a:	68db      	ldr	r3, [r3, #12]
 801076c:	4a13      	ldr	r2, [pc, #76]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 801076e:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8010772:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8010774:	4b11      	ldr	r3, [pc, #68]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 8010776:	68db      	ldr	r3, [r3, #12]
 8010778:	4a10      	ldr	r2, [pc, #64]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 801077a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801077e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8010780:	4b0e      	ldr	r3, [pc, #56]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 8010782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010784:	4a0d      	ldr	r2, [pc, #52]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 8010786:	f023 0301 	bic.w	r3, r3, #1
 801078a:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 801078c:	4b0b      	ldr	r3, [pc, #44]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 801078e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010790:	4a0a      	ldr	r2, [pc, #40]	@ (80107bc <HAL_RCC_DeInit+0x184>)
 8010792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010796:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8010798:	4b0b      	ldr	r3, [pc, #44]	@ (80107c8 <HAL_RCC_DeInit+0x190>)
 801079a:	4a0c      	ldr	r2, [pc, #48]	@ (80107cc <HAL_RCC_DeInit+0x194>)
 801079c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801079e:	4b0c      	ldr	r3, [pc, #48]	@ (80107d0 <HAL_RCC_DeInit+0x198>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7ff fa14 	bl	800fbd0 <HAL_InitTick>
 80107a8:	4603      	mov	r3, r0
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d001      	beq.n	80107b2 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80107ae:	2301      	movs	r3, #1
 80107b0:	e000      	b.n	80107b4 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80107b2:	2300      	movs	r3, #0
  }
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3708      	adds	r7, #8
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	40023800 	.word	0x40023800
 80107c0:	04003010 	.word	0x04003010
 80107c4:	20003000 	.word	0x20003000
 80107c8:	20002330 	.word	0x20002330
 80107cc:	00f42400 	.word	0x00f42400
 80107d0:	200023b4 	.word	0x200023b4

080107d4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b082      	sub	sp, #8
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d101      	bne.n	80107e6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80107e2:	2301      	movs	r3, #1
 80107e4:	e041      	b.n	801086a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80107ec:	b2db      	uxtb	r3, r3
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d106      	bne.n	8010800 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f7fe fd66 	bl	800f2cc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2202      	movs	r2, #2
 8010804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	3304      	adds	r3, #4
 8010810:	4619      	mov	r1, r3
 8010812:	4610      	mov	r0, r2
 8010814:	f000 f88a 	bl	801092c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2201      	movs	r2, #1
 801081c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2201      	movs	r2, #1
 8010824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2201      	movs	r2, #1
 801082c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2201      	movs	r2, #1
 8010834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2201      	movs	r2, #1
 801083c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2201      	movs	r2, #1
 8010844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2201      	movs	r2, #1
 801084c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2201      	movs	r2, #1
 8010854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2201      	movs	r2, #1
 801085c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2201      	movs	r2, #1
 8010864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010868:	2300      	movs	r3, #0
}
 801086a:	4618      	mov	r0, r3
 801086c:	3708      	adds	r7, #8
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}
	...

08010874 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b086      	sub	sp, #24
 8010878:	af00      	add	r7, sp, #0
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010880:	2300      	movs	r3, #0
 8010882:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801088a:	2b01      	cmp	r3, #1
 801088c:	d101      	bne.n	8010892 <HAL_TIM_OC_ConfigChannel+0x1e>
 801088e:	2302      	movs	r3, #2
 8010890:	e048      	b.n	8010924 <HAL_TIM_OC_ConfigChannel+0xb0>
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2201      	movs	r2, #1
 8010896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2b0c      	cmp	r3, #12
 801089e:	d839      	bhi.n	8010914 <HAL_TIM_OC_ConfigChannel+0xa0>
 80108a0:	a201      	add	r2, pc, #4	@ (adr r2, 80108a8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80108a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108a6:	bf00      	nop
 80108a8:	080108dd 	.word	0x080108dd
 80108ac:	08010915 	.word	0x08010915
 80108b0:	08010915 	.word	0x08010915
 80108b4:	08010915 	.word	0x08010915
 80108b8:	080108eb 	.word	0x080108eb
 80108bc:	08010915 	.word	0x08010915
 80108c0:	08010915 	.word	0x08010915
 80108c4:	08010915 	.word	0x08010915
 80108c8:	080108f9 	.word	0x080108f9
 80108cc:	08010915 	.word	0x08010915
 80108d0:	08010915 	.word	0x08010915
 80108d4:	08010915 	.word	0x08010915
 80108d8:	08010907 	.word	0x08010907
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	68b9      	ldr	r1, [r7, #8]
 80108e2:	4618      	mov	r0, r3
 80108e4:	f000 f8ce 	bl	8010a84 <TIM_OC1_SetConfig>
      break;
 80108e8:	e017      	b.n	801091a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	68b9      	ldr	r1, [r7, #8]
 80108f0:	4618      	mov	r0, r3
 80108f2:	f000 f937 	bl	8010b64 <TIM_OC2_SetConfig>
      break;
 80108f6:	e010      	b.n	801091a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	68b9      	ldr	r1, [r7, #8]
 80108fe:	4618      	mov	r0, r3
 8010900:	f000 f9a6 	bl	8010c50 <TIM_OC3_SetConfig>
      break;
 8010904:	e009      	b.n	801091a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	68b9      	ldr	r1, [r7, #8]
 801090c:	4618      	mov	r0, r3
 801090e:	f000 fa13 	bl	8010d38 <TIM_OC4_SetConfig>
      break;
 8010912:	e002      	b.n	801091a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8010914:	2301      	movs	r3, #1
 8010916:	75fb      	strb	r3, [r7, #23]
      break;
 8010918:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	2200      	movs	r2, #0
 801091e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010922:	7dfb      	ldrb	r3, [r7, #23]
}
 8010924:	4618      	mov	r0, r3
 8010926:	3718      	adds	r7, #24
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801092c:	b480      	push	{r7}
 801092e:	b085      	sub	sp, #20
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	4a46      	ldr	r2, [pc, #280]	@ (8010a58 <TIM_Base_SetConfig+0x12c>)
 8010940:	4293      	cmp	r3, r2
 8010942:	d013      	beq.n	801096c <TIM_Base_SetConfig+0x40>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801094a:	d00f      	beq.n	801096c <TIM_Base_SetConfig+0x40>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	4a43      	ldr	r2, [pc, #268]	@ (8010a5c <TIM_Base_SetConfig+0x130>)
 8010950:	4293      	cmp	r3, r2
 8010952:	d00b      	beq.n	801096c <TIM_Base_SetConfig+0x40>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	4a42      	ldr	r2, [pc, #264]	@ (8010a60 <TIM_Base_SetConfig+0x134>)
 8010958:	4293      	cmp	r3, r2
 801095a:	d007      	beq.n	801096c <TIM_Base_SetConfig+0x40>
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	4a41      	ldr	r2, [pc, #260]	@ (8010a64 <TIM_Base_SetConfig+0x138>)
 8010960:	4293      	cmp	r3, r2
 8010962:	d003      	beq.n	801096c <TIM_Base_SetConfig+0x40>
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	4a40      	ldr	r2, [pc, #256]	@ (8010a68 <TIM_Base_SetConfig+0x13c>)
 8010968:	4293      	cmp	r3, r2
 801096a:	d108      	bne.n	801097e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	68fa      	ldr	r2, [r7, #12]
 801097a:	4313      	orrs	r3, r2
 801097c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	4a35      	ldr	r2, [pc, #212]	@ (8010a58 <TIM_Base_SetConfig+0x12c>)
 8010982:	4293      	cmp	r3, r2
 8010984:	d02b      	beq.n	80109de <TIM_Base_SetConfig+0xb2>
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801098c:	d027      	beq.n	80109de <TIM_Base_SetConfig+0xb2>
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	4a32      	ldr	r2, [pc, #200]	@ (8010a5c <TIM_Base_SetConfig+0x130>)
 8010992:	4293      	cmp	r3, r2
 8010994:	d023      	beq.n	80109de <TIM_Base_SetConfig+0xb2>
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	4a31      	ldr	r2, [pc, #196]	@ (8010a60 <TIM_Base_SetConfig+0x134>)
 801099a:	4293      	cmp	r3, r2
 801099c:	d01f      	beq.n	80109de <TIM_Base_SetConfig+0xb2>
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	4a30      	ldr	r2, [pc, #192]	@ (8010a64 <TIM_Base_SetConfig+0x138>)
 80109a2:	4293      	cmp	r3, r2
 80109a4:	d01b      	beq.n	80109de <TIM_Base_SetConfig+0xb2>
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	4a2f      	ldr	r2, [pc, #188]	@ (8010a68 <TIM_Base_SetConfig+0x13c>)
 80109aa:	4293      	cmp	r3, r2
 80109ac:	d017      	beq.n	80109de <TIM_Base_SetConfig+0xb2>
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	4a2e      	ldr	r2, [pc, #184]	@ (8010a6c <TIM_Base_SetConfig+0x140>)
 80109b2:	4293      	cmp	r3, r2
 80109b4:	d013      	beq.n	80109de <TIM_Base_SetConfig+0xb2>
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	4a2d      	ldr	r2, [pc, #180]	@ (8010a70 <TIM_Base_SetConfig+0x144>)
 80109ba:	4293      	cmp	r3, r2
 80109bc:	d00f      	beq.n	80109de <TIM_Base_SetConfig+0xb2>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	4a2c      	ldr	r2, [pc, #176]	@ (8010a74 <TIM_Base_SetConfig+0x148>)
 80109c2:	4293      	cmp	r3, r2
 80109c4:	d00b      	beq.n	80109de <TIM_Base_SetConfig+0xb2>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	4a2b      	ldr	r2, [pc, #172]	@ (8010a78 <TIM_Base_SetConfig+0x14c>)
 80109ca:	4293      	cmp	r3, r2
 80109cc:	d007      	beq.n	80109de <TIM_Base_SetConfig+0xb2>
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	4a2a      	ldr	r2, [pc, #168]	@ (8010a7c <TIM_Base_SetConfig+0x150>)
 80109d2:	4293      	cmp	r3, r2
 80109d4:	d003      	beq.n	80109de <TIM_Base_SetConfig+0xb2>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	4a29      	ldr	r2, [pc, #164]	@ (8010a80 <TIM_Base_SetConfig+0x154>)
 80109da:	4293      	cmp	r3, r2
 80109dc:	d108      	bne.n	80109f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80109e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	68db      	ldr	r3, [r3, #12]
 80109ea:	68fa      	ldr	r2, [r7, #12]
 80109ec:	4313      	orrs	r3, r2
 80109ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	695b      	ldr	r3, [r3, #20]
 80109fa:	4313      	orrs	r3, r2
 80109fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	68fa      	ldr	r2, [r7, #12]
 8010a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	689a      	ldr	r2, [r3, #8]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	4a10      	ldr	r2, [pc, #64]	@ (8010a58 <TIM_Base_SetConfig+0x12c>)
 8010a18:	4293      	cmp	r3, r2
 8010a1a:	d003      	beq.n	8010a24 <TIM_Base_SetConfig+0xf8>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	4a12      	ldr	r2, [pc, #72]	@ (8010a68 <TIM_Base_SetConfig+0x13c>)
 8010a20:	4293      	cmp	r3, r2
 8010a22:	d103      	bne.n	8010a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	691a      	ldr	r2, [r3, #16]
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2201      	movs	r2, #1
 8010a30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	691b      	ldr	r3, [r3, #16]
 8010a36:	f003 0301 	and.w	r3, r3, #1
 8010a3a:	2b01      	cmp	r3, #1
 8010a3c:	d105      	bne.n	8010a4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	691b      	ldr	r3, [r3, #16]
 8010a42:	f023 0201 	bic.w	r2, r3, #1
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	611a      	str	r2, [r3, #16]
  }
}
 8010a4a:	bf00      	nop
 8010a4c:	3714      	adds	r7, #20
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a54:	4770      	bx	lr
 8010a56:	bf00      	nop
 8010a58:	40010000 	.word	0x40010000
 8010a5c:	40000400 	.word	0x40000400
 8010a60:	40000800 	.word	0x40000800
 8010a64:	40000c00 	.word	0x40000c00
 8010a68:	40010400 	.word	0x40010400
 8010a6c:	40014000 	.word	0x40014000
 8010a70:	40014400 	.word	0x40014400
 8010a74:	40014800 	.word	0x40014800
 8010a78:	40001800 	.word	0x40001800
 8010a7c:	40001c00 	.word	0x40001c00
 8010a80:	40002000 	.word	0x40002000

08010a84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010a84:	b480      	push	{r7}
 8010a86:	b087      	sub	sp, #28
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6a1b      	ldr	r3, [r3, #32]
 8010a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6a1b      	ldr	r3, [r3, #32]
 8010a98:	f023 0201 	bic.w	r2, r3, #1
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	685b      	ldr	r3, [r3, #4]
 8010aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	699b      	ldr	r3, [r3, #24]
 8010aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	f023 0303 	bic.w	r3, r3, #3
 8010aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	68fa      	ldr	r2, [r7, #12]
 8010ac2:	4313      	orrs	r3, r2
 8010ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	f023 0302 	bic.w	r3, r3, #2
 8010acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	689b      	ldr	r3, [r3, #8]
 8010ad2:	697a      	ldr	r2, [r7, #20]
 8010ad4:	4313      	orrs	r3, r2
 8010ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	4a20      	ldr	r2, [pc, #128]	@ (8010b5c <TIM_OC1_SetConfig+0xd8>)
 8010adc:	4293      	cmp	r3, r2
 8010ade:	d003      	beq.n	8010ae8 <TIM_OC1_SetConfig+0x64>
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8010b60 <TIM_OC1_SetConfig+0xdc>)
 8010ae4:	4293      	cmp	r3, r2
 8010ae6:	d10c      	bne.n	8010b02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	f023 0308 	bic.w	r3, r3, #8
 8010aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	68db      	ldr	r3, [r3, #12]
 8010af4:	697a      	ldr	r2, [r7, #20]
 8010af6:	4313      	orrs	r3, r2
 8010af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	f023 0304 	bic.w	r3, r3, #4
 8010b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	4a15      	ldr	r2, [pc, #84]	@ (8010b5c <TIM_OC1_SetConfig+0xd8>)
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d003      	beq.n	8010b12 <TIM_OC1_SetConfig+0x8e>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	4a14      	ldr	r2, [pc, #80]	@ (8010b60 <TIM_OC1_SetConfig+0xdc>)
 8010b0e:	4293      	cmp	r3, r2
 8010b10:	d111      	bne.n	8010b36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010b1a:	693b      	ldr	r3, [r7, #16]
 8010b1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	695b      	ldr	r3, [r3, #20]
 8010b26:	693a      	ldr	r2, [r7, #16]
 8010b28:	4313      	orrs	r3, r2
 8010b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	699b      	ldr	r3, [r3, #24]
 8010b30:	693a      	ldr	r2, [r7, #16]
 8010b32:	4313      	orrs	r3, r2
 8010b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	693a      	ldr	r2, [r7, #16]
 8010b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	68fa      	ldr	r2, [r7, #12]
 8010b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	685a      	ldr	r2, [r3, #4]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	697a      	ldr	r2, [r7, #20]
 8010b4e:	621a      	str	r2, [r3, #32]
}
 8010b50:	bf00      	nop
 8010b52:	371c      	adds	r7, #28
 8010b54:	46bd      	mov	sp, r7
 8010b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5a:	4770      	bx	lr
 8010b5c:	40010000 	.word	0x40010000
 8010b60:	40010400 	.word	0x40010400

08010b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010b64:	b480      	push	{r7}
 8010b66:	b087      	sub	sp, #28
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
 8010b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6a1b      	ldr	r3, [r3, #32]
 8010b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	6a1b      	ldr	r3, [r3, #32]
 8010b78:	f023 0210 	bic.w	r2, r3, #16
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	699b      	ldr	r3, [r3, #24]
 8010b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	021b      	lsls	r3, r3, #8
 8010ba2:	68fa      	ldr	r2, [r7, #12]
 8010ba4:	4313      	orrs	r3, r2
 8010ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	f023 0320 	bic.w	r3, r3, #32
 8010bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	689b      	ldr	r3, [r3, #8]
 8010bb4:	011b      	lsls	r3, r3, #4
 8010bb6:	697a      	ldr	r2, [r7, #20]
 8010bb8:	4313      	orrs	r3, r2
 8010bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	4a22      	ldr	r2, [pc, #136]	@ (8010c48 <TIM_OC2_SetConfig+0xe4>)
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d003      	beq.n	8010bcc <TIM_OC2_SetConfig+0x68>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	4a21      	ldr	r2, [pc, #132]	@ (8010c4c <TIM_OC2_SetConfig+0xe8>)
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	d10d      	bne.n	8010be8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	68db      	ldr	r3, [r3, #12]
 8010bd8:	011b      	lsls	r3, r3, #4
 8010bda:	697a      	ldr	r2, [r7, #20]
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010be6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	4a17      	ldr	r2, [pc, #92]	@ (8010c48 <TIM_OC2_SetConfig+0xe4>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d003      	beq.n	8010bf8 <TIM_OC2_SetConfig+0x94>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	4a16      	ldr	r2, [pc, #88]	@ (8010c4c <TIM_OC2_SetConfig+0xe8>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d113      	bne.n	8010c20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	695b      	ldr	r3, [r3, #20]
 8010c0c:	009b      	lsls	r3, r3, #2
 8010c0e:	693a      	ldr	r2, [r7, #16]
 8010c10:	4313      	orrs	r3, r2
 8010c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	699b      	ldr	r3, [r3, #24]
 8010c18:	009b      	lsls	r3, r3, #2
 8010c1a:	693a      	ldr	r2, [r7, #16]
 8010c1c:	4313      	orrs	r3, r2
 8010c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	693a      	ldr	r2, [r7, #16]
 8010c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	68fa      	ldr	r2, [r7, #12]
 8010c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	685a      	ldr	r2, [r3, #4]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	697a      	ldr	r2, [r7, #20]
 8010c38:	621a      	str	r2, [r3, #32]
}
 8010c3a:	bf00      	nop
 8010c3c:	371c      	adds	r7, #28
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c44:	4770      	bx	lr
 8010c46:	bf00      	nop
 8010c48:	40010000 	.word	0x40010000
 8010c4c:	40010400 	.word	0x40010400

08010c50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b087      	sub	sp, #28
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6a1b      	ldr	r3, [r3, #32]
 8010c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6a1b      	ldr	r3, [r3, #32]
 8010c64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	69db      	ldr	r3, [r3, #28]
 8010c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	f023 0303 	bic.w	r3, r3, #3
 8010c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	68fa      	ldr	r2, [r7, #12]
 8010c8e:	4313      	orrs	r3, r2
 8010c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	689b      	ldr	r3, [r3, #8]
 8010c9e:	021b      	lsls	r3, r3, #8
 8010ca0:	697a      	ldr	r2, [r7, #20]
 8010ca2:	4313      	orrs	r3, r2
 8010ca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	4a21      	ldr	r2, [pc, #132]	@ (8010d30 <TIM_OC3_SetConfig+0xe0>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d003      	beq.n	8010cb6 <TIM_OC3_SetConfig+0x66>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	4a20      	ldr	r2, [pc, #128]	@ (8010d34 <TIM_OC3_SetConfig+0xe4>)
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d10d      	bne.n	8010cd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	68db      	ldr	r3, [r3, #12]
 8010cc2:	021b      	lsls	r3, r3, #8
 8010cc4:	697a      	ldr	r2, [r7, #20]
 8010cc6:	4313      	orrs	r3, r2
 8010cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	4a16      	ldr	r2, [pc, #88]	@ (8010d30 <TIM_OC3_SetConfig+0xe0>)
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d003      	beq.n	8010ce2 <TIM_OC3_SetConfig+0x92>
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	4a15      	ldr	r2, [pc, #84]	@ (8010d34 <TIM_OC3_SetConfig+0xe4>)
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d113      	bne.n	8010d0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010ce2:	693b      	ldr	r3, [r7, #16]
 8010ce4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010cea:	693b      	ldr	r3, [r7, #16]
 8010cec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	695b      	ldr	r3, [r3, #20]
 8010cf6:	011b      	lsls	r3, r3, #4
 8010cf8:	693a      	ldr	r2, [r7, #16]
 8010cfa:	4313      	orrs	r3, r2
 8010cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	699b      	ldr	r3, [r3, #24]
 8010d02:	011b      	lsls	r3, r3, #4
 8010d04:	693a      	ldr	r2, [r7, #16]
 8010d06:	4313      	orrs	r3, r2
 8010d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	693a      	ldr	r2, [r7, #16]
 8010d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	68fa      	ldr	r2, [r7, #12]
 8010d14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	685a      	ldr	r2, [r3, #4]
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	697a      	ldr	r2, [r7, #20]
 8010d22:	621a      	str	r2, [r3, #32]
}
 8010d24:	bf00      	nop
 8010d26:	371c      	adds	r7, #28
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr
 8010d30:	40010000 	.word	0x40010000
 8010d34:	40010400 	.word	0x40010400

08010d38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010d38:	b480      	push	{r7}
 8010d3a:	b087      	sub	sp, #28
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6a1b      	ldr	r3, [r3, #32]
 8010d46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	6a1b      	ldr	r3, [r3, #32]
 8010d4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	685b      	ldr	r3, [r3, #4]
 8010d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	69db      	ldr	r3, [r3, #28]
 8010d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	021b      	lsls	r3, r3, #8
 8010d76:	68fa      	ldr	r2, [r7, #12]
 8010d78:	4313      	orrs	r3, r2
 8010d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	689b      	ldr	r3, [r3, #8]
 8010d88:	031b      	lsls	r3, r3, #12
 8010d8a:	693a      	ldr	r2, [r7, #16]
 8010d8c:	4313      	orrs	r3, r2
 8010d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	4a12      	ldr	r2, [pc, #72]	@ (8010ddc <TIM_OC4_SetConfig+0xa4>)
 8010d94:	4293      	cmp	r3, r2
 8010d96:	d003      	beq.n	8010da0 <TIM_OC4_SetConfig+0x68>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	4a11      	ldr	r2, [pc, #68]	@ (8010de0 <TIM_OC4_SetConfig+0xa8>)
 8010d9c:	4293      	cmp	r3, r2
 8010d9e:	d109      	bne.n	8010db4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010da6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	695b      	ldr	r3, [r3, #20]
 8010dac:	019b      	lsls	r3, r3, #6
 8010dae:	697a      	ldr	r2, [r7, #20]
 8010db0:	4313      	orrs	r3, r2
 8010db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	697a      	ldr	r2, [r7, #20]
 8010db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	68fa      	ldr	r2, [r7, #12]
 8010dbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	685a      	ldr	r2, [r3, #4]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	693a      	ldr	r2, [r7, #16]
 8010dcc:	621a      	str	r2, [r3, #32]
}
 8010dce:	bf00      	nop
 8010dd0:	371c      	adds	r7, #28
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd8:	4770      	bx	lr
 8010dda:	bf00      	nop
 8010ddc:	40010000 	.word	0x40010000
 8010de0:	40010400 	.word	0x40010400

08010de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010de4:	b480      	push	{r7}
 8010de6:	b085      	sub	sp, #20
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	d101      	bne.n	8010dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010df8:	2302      	movs	r3, #2
 8010dfa:	e05a      	b.n	8010eb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2201      	movs	r2, #1
 8010e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2202      	movs	r2, #2
 8010e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	689b      	ldr	r3, [r3, #8]
 8010e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	68fa      	ldr	r2, [r7, #12]
 8010e2a:	4313      	orrs	r3, r2
 8010e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	68fa      	ldr	r2, [r7, #12]
 8010e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	4a21      	ldr	r2, [pc, #132]	@ (8010ec0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d022      	beq.n	8010e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e48:	d01d      	beq.n	8010e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8010ec4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010e50:	4293      	cmp	r3, r2
 8010e52:	d018      	beq.n	8010e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4a1b      	ldr	r2, [pc, #108]	@ (8010ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d013      	beq.n	8010e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	4a1a      	ldr	r2, [pc, #104]	@ (8010ecc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d00e      	beq.n	8010e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	4a18      	ldr	r2, [pc, #96]	@ (8010ed0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	d009      	beq.n	8010e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	4a17      	ldr	r2, [pc, #92]	@ (8010ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010e78:	4293      	cmp	r3, r2
 8010e7a:	d004      	beq.n	8010e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	4a15      	ldr	r2, [pc, #84]	@ (8010ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010e82:	4293      	cmp	r3, r2
 8010e84:	d10c      	bne.n	8010ea0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010e86:	68bb      	ldr	r3, [r7, #8]
 8010e88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	685b      	ldr	r3, [r3, #4]
 8010e92:	68ba      	ldr	r2, [r7, #8]
 8010e94:	4313      	orrs	r3, r2
 8010e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	68ba      	ldr	r2, [r7, #8]
 8010e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	2201      	movs	r2, #1
 8010ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010eb0:	2300      	movs	r3, #0
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3714      	adds	r7, #20
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebc:	4770      	bx	lr
 8010ebe:	bf00      	nop
 8010ec0:	40010000 	.word	0x40010000
 8010ec4:	40000400 	.word	0x40000400
 8010ec8:	40000800 	.word	0x40000800
 8010ecc:	40000c00 	.word	0x40000c00
 8010ed0:	40010400 	.word	0x40010400
 8010ed4:	40014000 	.word	0x40014000
 8010ed8:	40001800 	.word	0x40001800

08010edc <LL_ADC_REG_SetSequencerLength>:
{
 8010edc:	b480      	push	{r7}
 8010ede:	b083      	sub	sp, #12
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010eea:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	431a      	orrs	r2, r3
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8010ef6:	bf00      	nop
 8010ef8:	370c      	adds	r7, #12
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr

08010f02 <LL_ADC_IsEnabled>:
{
 8010f02:	b480      	push	{r7}
 8010f04:	b083      	sub	sp, #12
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	689b      	ldr	r3, [r3, #8]
 8010f0e:	f003 0301 	and.w	r3, r3, #1
 8010f12:	2b01      	cmp	r3, #1
 8010f14:	bf0c      	ite	eq
 8010f16:	2301      	moveq	r3, #1
 8010f18:	2300      	movne	r3, #0
 8010f1a:	b2db      	uxtb	r3, r3
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	370c      	adds	r7, #12
 8010f20:	46bd      	mov	sp, r7
 8010f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f26:	4770      	bx	lr

08010f28 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8010f28:	b590      	push	{r4, r7, lr}
 8010f2a:	b085      	sub	sp, #20
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8010f32:	2300      	movs	r3, #0
 8010f34:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8010f36:	481c      	ldr	r0, [pc, #112]	@ (8010fa8 <LL_ADC_CommonInit+0x80>)
 8010f38:	f7ff ffe3 	bl	8010f02 <LL_ADC_IsEnabled>
 8010f3c:	4604      	mov	r4, r0
 8010f3e:	481b      	ldr	r0, [pc, #108]	@ (8010fac <LL_ADC_CommonInit+0x84>)
 8010f40:	f7ff ffdf 	bl	8010f02 <LL_ADC_IsEnabled>
 8010f44:	4603      	mov	r3, r0
 8010f46:	431c      	orrs	r4, r3
 8010f48:	4819      	ldr	r0, [pc, #100]	@ (8010fb0 <LL_ADC_CommonInit+0x88>)
 8010f4a:	f7ff ffda 	bl	8010f02 <LL_ADC_IsEnabled>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	4323      	orrs	r3, r4
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d120      	bne.n	8010f98 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d012      	beq.n	8010f84 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	685a      	ldr	r2, [r3, #4]
 8010f62:	4b14      	ldr	r3, [pc, #80]	@ (8010fb4 <LL_ADC_CommonInit+0x8c>)
 8010f64:	4013      	ands	r3, r2
 8010f66:	683a      	ldr	r2, [r7, #0]
 8010f68:	6811      	ldr	r1, [r2, #0]
 8010f6a:	683a      	ldr	r2, [r7, #0]
 8010f6c:	6852      	ldr	r2, [r2, #4]
 8010f6e:	4311      	orrs	r1, r2
 8010f70:	683a      	ldr	r2, [r7, #0]
 8010f72:	6892      	ldr	r2, [r2, #8]
 8010f74:	4311      	orrs	r1, r2
 8010f76:	683a      	ldr	r2, [r7, #0]
 8010f78:	68d2      	ldr	r2, [r2, #12]
 8010f7a:	430a      	orrs	r2, r1
 8010f7c:	431a      	orrs	r2, r3
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	605a      	str	r2, [r3, #4]
 8010f82:	e00b      	b.n	8010f9c <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	685a      	ldr	r2, [r3, #4]
 8010f88:	4b0a      	ldr	r3, [pc, #40]	@ (8010fb4 <LL_ADC_CommonInit+0x8c>)
 8010f8a:	4013      	ands	r3, r2
 8010f8c:	683a      	ldr	r2, [r7, #0]
 8010f8e:	6812      	ldr	r2, [r2, #0]
 8010f90:	431a      	orrs	r2, r3
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	605a      	str	r2, [r3, #4]
 8010f96:	e001      	b.n	8010f9c <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3714      	adds	r7, #20
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd90      	pop	{r4, r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	40012000 	.word	0x40012000
 8010fac:	40012100 	.word	0x40012100
 8010fb0:	40012200 	.word	0x40012200
 8010fb4:	fffc10e0 	.word	0xfffc10e0

08010fb8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b084      	sub	sp, #16
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
 8010fc0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f7ff ff9b 	bl	8010f02 <LL_ADC_IsEnabled>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d117      	bne.n	8011002 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8010fda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010fde:	683a      	ldr	r2, [r7, #0]
 8010fe0:	6811      	ldr	r1, [r2, #0]
 8010fe2:	683a      	ldr	r2, [r7, #0]
 8010fe4:	6892      	ldr	r2, [r2, #8]
 8010fe6:	430a      	orrs	r2, r1
 8010fe8:	431a      	orrs	r2, r3
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	689b      	ldr	r3, [r3, #8]
 8010ff2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	685b      	ldr	r3, [r3, #4]
 8010ffa:	431a      	orrs	r2, r3
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	609a      	str	r2, [r3, #8]
 8011000:	e001      	b.n	8011006 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8011002:	2301      	movs	r3, #1
 8011004:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8011006:	7bfb      	ldrb	r3, [r7, #15]
}
 8011008:	4618      	mov	r0, r3
 801100a:	3710      	adds	r7, #16
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}

08011010 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b084      	sub	sp, #16
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 801101a:	2300      	movs	r3, #0
 801101c:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f7ff ff6f 	bl	8010f02 <LL_ADC_IsEnabled>
 8011024:	4603      	mov	r3, r0
 8011026:	2b00      	cmp	r3, #0
 8011028:	d12b      	bne.n	8011082 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	685b      	ldr	r3, [r3, #4]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d009      	beq.n	8011046 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	685b      	ldr	r3, [r3, #4]
 8011036:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	689b      	ldr	r3, [r3, #8]
 801103e:	431a      	orrs	r2, r3
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	605a      	str	r2, [r3, #4]
 8011044:	e005      	b.n	8011052 <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	689a      	ldr	r2, [r3, #8]
 8011056:	4b0e      	ldr	r3, [pc, #56]	@ (8011090 <LL_ADC_REG_Init+0x80>)
 8011058:	4013      	ands	r3, r2
 801105a:	683a      	ldr	r2, [r7, #0]
 801105c:	6812      	ldr	r2, [r2, #0]
 801105e:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 8011062:	683a      	ldr	r2, [r7, #0]
 8011064:	68d2      	ldr	r2, [r2, #12]
 8011066:	4311      	orrs	r1, r2
 8011068:	683a      	ldr	r2, [r7, #0]
 801106a:	6912      	ldr	r2, [r2, #16]
 801106c:	430a      	orrs	r2, r1
 801106e:	431a      	orrs	r2, r3
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	685b      	ldr	r3, [r3, #4]
 8011078:	4619      	mov	r1, r3
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f7ff ff2e 	bl	8010edc <LL_ADC_REG_SetSequencerLength>
 8011080:	e001      	b.n	8011086 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8011082:	2301      	movs	r3, #1
 8011084:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8011086:	7bfb      	ldrb	r3, [r7, #15]
}
 8011088:	4618      	mov	r0, r3
 801108a:	3710      	adds	r7, #16
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}
 8011090:	c0fffcfd 	.word	0xc0fffcfd

08011094 <LL_GPIO_SetPinMode>:
{
 8011094:	b480      	push	{r7}
 8011096:	b08b      	sub	sp, #44	@ 0x2c
 8011098:	af00      	add	r7, sp, #0
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	60b9      	str	r1, [r7, #8]
 801109e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	681a      	ldr	r2, [r3, #0]
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80110a8:	697b      	ldr	r3, [r7, #20]
 80110aa:	fa93 f3a3 	rbit	r3, r3
 80110ae:	613b      	str	r3, [r7, #16]
  return result;
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80110b4:	69bb      	ldr	r3, [r7, #24]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d101      	bne.n	80110be <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80110ba:	2320      	movs	r3, #32
 80110bc:	e003      	b.n	80110c6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80110be:	69bb      	ldr	r3, [r7, #24]
 80110c0:	fab3 f383 	clz	r3, r3
 80110c4:	b2db      	uxtb	r3, r3
 80110c6:	005b      	lsls	r3, r3, #1
 80110c8:	2103      	movs	r1, #3
 80110ca:	fa01 f303 	lsl.w	r3, r1, r3
 80110ce:	43db      	mvns	r3, r3
 80110d0:	401a      	ands	r2, r3
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80110d6:	6a3b      	ldr	r3, [r7, #32]
 80110d8:	fa93 f3a3 	rbit	r3, r3
 80110dc:	61fb      	str	r3, [r7, #28]
  return result;
 80110de:	69fb      	ldr	r3, [r7, #28]
 80110e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80110e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d101      	bne.n	80110ec <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80110e8:	2320      	movs	r3, #32
 80110ea:	e003      	b.n	80110f4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80110ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ee:	fab3 f383 	clz	r3, r3
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	005b      	lsls	r3, r3, #1
 80110f6:	6879      	ldr	r1, [r7, #4]
 80110f8:	fa01 f303 	lsl.w	r3, r1, r3
 80110fc:	431a      	orrs	r2, r3
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	601a      	str	r2, [r3, #0]
}
 8011102:	bf00      	nop
 8011104:	372c      	adds	r7, #44	@ 0x2c
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr

0801110e <LL_GPIO_SetPinOutputType>:
{
 801110e:	b480      	push	{r7}
 8011110:	b085      	sub	sp, #20
 8011112:	af00      	add	r7, sp, #0
 8011114:	60f8      	str	r0, [r7, #12]
 8011116:	60b9      	str	r1, [r7, #8]
 8011118:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	685a      	ldr	r2, [r3, #4]
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	43db      	mvns	r3, r3
 8011122:	401a      	ands	r2, r3
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	6879      	ldr	r1, [r7, #4]
 8011128:	fb01 f303 	mul.w	r3, r1, r3
 801112c:	431a      	orrs	r2, r3
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	605a      	str	r2, [r3, #4]
}
 8011132:	bf00      	nop
 8011134:	3714      	adds	r7, #20
 8011136:	46bd      	mov	sp, r7
 8011138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113c:	4770      	bx	lr

0801113e <LL_GPIO_SetPinSpeed>:
{
 801113e:	b480      	push	{r7}
 8011140:	b08b      	sub	sp, #44	@ 0x2c
 8011142:	af00      	add	r7, sp, #0
 8011144:	60f8      	str	r0, [r7, #12]
 8011146:	60b9      	str	r1, [r7, #8]
 8011148:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	689a      	ldr	r2, [r3, #8]
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	fa93 f3a3 	rbit	r3, r3
 8011158:	613b      	str	r3, [r7, #16]
  return result;
 801115a:	693b      	ldr	r3, [r7, #16]
 801115c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801115e:	69bb      	ldr	r3, [r7, #24]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d101      	bne.n	8011168 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8011164:	2320      	movs	r3, #32
 8011166:	e003      	b.n	8011170 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8011168:	69bb      	ldr	r3, [r7, #24]
 801116a:	fab3 f383 	clz	r3, r3
 801116e:	b2db      	uxtb	r3, r3
 8011170:	005b      	lsls	r3, r3, #1
 8011172:	2103      	movs	r1, #3
 8011174:	fa01 f303 	lsl.w	r3, r1, r3
 8011178:	43db      	mvns	r3, r3
 801117a:	401a      	ands	r2, r3
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011180:	6a3b      	ldr	r3, [r7, #32]
 8011182:	fa93 f3a3 	rbit	r3, r3
 8011186:	61fb      	str	r3, [r7, #28]
  return result;
 8011188:	69fb      	ldr	r3, [r7, #28]
 801118a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801118e:	2b00      	cmp	r3, #0
 8011190:	d101      	bne.n	8011196 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8011192:	2320      	movs	r3, #32
 8011194:	e003      	b.n	801119e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8011196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011198:	fab3 f383 	clz	r3, r3
 801119c:	b2db      	uxtb	r3, r3
 801119e:	005b      	lsls	r3, r3, #1
 80111a0:	6879      	ldr	r1, [r7, #4]
 80111a2:	fa01 f303 	lsl.w	r3, r1, r3
 80111a6:	431a      	orrs	r2, r3
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	609a      	str	r2, [r3, #8]
}
 80111ac:	bf00      	nop
 80111ae:	372c      	adds	r7, #44	@ 0x2c
 80111b0:	46bd      	mov	sp, r7
 80111b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b6:	4770      	bx	lr

080111b8 <LL_GPIO_SetPinPull>:
{
 80111b8:	b480      	push	{r7}
 80111ba:	b08b      	sub	sp, #44	@ 0x2c
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	60b9      	str	r1, [r7, #8]
 80111c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	68da      	ldr	r2, [r3, #12]
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	fa93 f3a3 	rbit	r3, r3
 80111d2:	613b      	str	r3, [r7, #16]
  return result;
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80111d8:	69bb      	ldr	r3, [r7, #24]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d101      	bne.n	80111e2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80111de:	2320      	movs	r3, #32
 80111e0:	e003      	b.n	80111ea <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80111e2:	69bb      	ldr	r3, [r7, #24]
 80111e4:	fab3 f383 	clz	r3, r3
 80111e8:	b2db      	uxtb	r3, r3
 80111ea:	005b      	lsls	r3, r3, #1
 80111ec:	2103      	movs	r1, #3
 80111ee:	fa01 f303 	lsl.w	r3, r1, r3
 80111f2:	43db      	mvns	r3, r3
 80111f4:	401a      	ands	r2, r3
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80111fa:	6a3b      	ldr	r3, [r7, #32]
 80111fc:	fa93 f3a3 	rbit	r3, r3
 8011200:	61fb      	str	r3, [r7, #28]
  return result;
 8011202:	69fb      	ldr	r3, [r7, #28]
 8011204:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8011206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011208:	2b00      	cmp	r3, #0
 801120a:	d101      	bne.n	8011210 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 801120c:	2320      	movs	r3, #32
 801120e:	e003      	b.n	8011218 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8011210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011212:	fab3 f383 	clz	r3, r3
 8011216:	b2db      	uxtb	r3, r3
 8011218:	005b      	lsls	r3, r3, #1
 801121a:	6879      	ldr	r1, [r7, #4]
 801121c:	fa01 f303 	lsl.w	r3, r1, r3
 8011220:	431a      	orrs	r2, r3
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	60da      	str	r2, [r3, #12]
}
 8011226:	bf00      	nop
 8011228:	372c      	adds	r7, #44	@ 0x2c
 801122a:	46bd      	mov	sp, r7
 801122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011230:	4770      	bx	lr

08011232 <LL_GPIO_SetAFPin_0_7>:
{
 8011232:	b480      	push	{r7}
 8011234:	b08b      	sub	sp, #44	@ 0x2c
 8011236:	af00      	add	r7, sp, #0
 8011238:	60f8      	str	r0, [r7, #12]
 801123a:	60b9      	str	r1, [r7, #8]
 801123c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	6a1a      	ldr	r2, [r3, #32]
 8011242:	68bb      	ldr	r3, [r7, #8]
 8011244:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011246:	697b      	ldr	r3, [r7, #20]
 8011248:	fa93 f3a3 	rbit	r3, r3
 801124c:	613b      	str	r3, [r7, #16]
  return result;
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8011252:	69bb      	ldr	r3, [r7, #24]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d101      	bne.n	801125c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8011258:	2320      	movs	r3, #32
 801125a:	e003      	b.n	8011264 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 801125c:	69bb      	ldr	r3, [r7, #24]
 801125e:	fab3 f383 	clz	r3, r3
 8011262:	b2db      	uxtb	r3, r3
 8011264:	009b      	lsls	r3, r3, #2
 8011266:	210f      	movs	r1, #15
 8011268:	fa01 f303 	lsl.w	r3, r1, r3
 801126c:	43db      	mvns	r3, r3
 801126e:	401a      	ands	r2, r3
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011274:	6a3b      	ldr	r3, [r7, #32]
 8011276:	fa93 f3a3 	rbit	r3, r3
 801127a:	61fb      	str	r3, [r7, #28]
  return result;
 801127c:	69fb      	ldr	r3, [r7, #28]
 801127e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8011280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011282:	2b00      	cmp	r3, #0
 8011284:	d101      	bne.n	801128a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8011286:	2320      	movs	r3, #32
 8011288:	e003      	b.n	8011292 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 801128a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801128c:	fab3 f383 	clz	r3, r3
 8011290:	b2db      	uxtb	r3, r3
 8011292:	009b      	lsls	r3, r3, #2
 8011294:	6879      	ldr	r1, [r7, #4]
 8011296:	fa01 f303 	lsl.w	r3, r1, r3
 801129a:	431a      	orrs	r2, r3
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	621a      	str	r2, [r3, #32]
}
 80112a0:	bf00      	nop
 80112a2:	372c      	adds	r7, #44	@ 0x2c
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr

080112ac <LL_GPIO_SetAFPin_8_15>:
{
 80112ac:	b480      	push	{r7}
 80112ae:	b08b      	sub	sp, #44	@ 0x2c
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	60f8      	str	r0, [r7, #12]
 80112b4:	60b9      	str	r1, [r7, #8]
 80112b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	0a1b      	lsrs	r3, r3, #8
 80112c0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	fa93 f3a3 	rbit	r3, r3
 80112c8:	613b      	str	r3, [r7, #16]
  return result;
 80112ca:	693b      	ldr	r3, [r7, #16]
 80112cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80112ce:	69bb      	ldr	r3, [r7, #24]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d101      	bne.n	80112d8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80112d4:	2320      	movs	r3, #32
 80112d6:	e003      	b.n	80112e0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80112d8:	69bb      	ldr	r3, [r7, #24]
 80112da:	fab3 f383 	clz	r3, r3
 80112de:	b2db      	uxtb	r3, r3
 80112e0:	009b      	lsls	r3, r3, #2
 80112e2:	210f      	movs	r1, #15
 80112e4:	fa01 f303 	lsl.w	r3, r1, r3
 80112e8:	43db      	mvns	r3, r3
 80112ea:	401a      	ands	r2, r3
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	0a1b      	lsrs	r3, r3, #8
 80112f0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80112f2:	6a3b      	ldr	r3, [r7, #32]
 80112f4:	fa93 f3a3 	rbit	r3, r3
 80112f8:	61fb      	str	r3, [r7, #28]
  return result;
 80112fa:	69fb      	ldr	r3, [r7, #28]
 80112fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80112fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011300:	2b00      	cmp	r3, #0
 8011302:	d101      	bne.n	8011308 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8011304:	2320      	movs	r3, #32
 8011306:	e003      	b.n	8011310 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8011308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801130a:	fab3 f383 	clz	r3, r3
 801130e:	b2db      	uxtb	r3, r3
 8011310:	009b      	lsls	r3, r3, #2
 8011312:	6879      	ldr	r1, [r7, #4]
 8011314:	fa01 f303 	lsl.w	r3, r1, r3
 8011318:	431a      	orrs	r2, r3
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801131e:	bf00      	nop
 8011320:	372c      	adds	r7, #44	@ 0x2c
 8011322:	46bd      	mov	sp, r7
 8011324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011328:	4770      	bx	lr

0801132a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801132a:	b580      	push	{r7, lr}
 801132c:	b08a      	sub	sp, #40	@ 0x28
 801132e:	af00      	add	r7, sp, #0
 8011330:	6078      	str	r0, [r7, #4]
 8011332:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8011334:	2300      	movs	r3, #0
 8011336:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8011338:	2300      	movs	r3, #0
 801133a:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011342:	69bb      	ldr	r3, [r7, #24]
 8011344:	fa93 f3a3 	rbit	r3, r3
 8011348:	617b      	str	r3, [r7, #20]
  return result;
 801134a:	697b      	ldr	r3, [r7, #20]
 801134c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d101      	bne.n	8011358 <LL_GPIO_Init+0x2e>
    return 32U;
 8011354:	2320      	movs	r3, #32
 8011356:	e003      	b.n	8011360 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8011358:	69fb      	ldr	r3, [r7, #28]
 801135a:	fab3 f383 	clz	r3, r3
 801135e:	b2db      	uxtb	r3, r3
 8011360:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8011362:	e057      	b.n	8011414 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	681a      	ldr	r2, [r3, #0]
 8011368:	2101      	movs	r1, #1
 801136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801136c:	fa01 f303 	lsl.w	r3, r1, r3
 8011370:	4013      	ands	r3, r2
 8011372:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8011374:	6a3b      	ldr	r3, [r7, #32]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d049      	beq.n	801140e <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	2b01      	cmp	r3, #1
 8011380:	d003      	beq.n	801138a <LL_GPIO_Init+0x60>
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	685b      	ldr	r3, [r3, #4]
 8011386:	2b02      	cmp	r3, #2
 8011388:	d10d      	bne.n	80113a6 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	689b      	ldr	r3, [r3, #8]
 801138e:	461a      	mov	r2, r3
 8011390:	6a39      	ldr	r1, [r7, #32]
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f7ff fed3 	bl	801113e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	68db      	ldr	r3, [r3, #12]
 801139c:	461a      	mov	r2, r3
 801139e:	6a39      	ldr	r1, [r7, #32]
 80113a0:	6878      	ldr	r0, [r7, #4]
 80113a2:	f7ff feb4 	bl	801110e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	691b      	ldr	r3, [r3, #16]
 80113aa:	461a      	mov	r2, r3
 80113ac:	6a39      	ldr	r1, [r7, #32]
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f7ff ff02 	bl	80111b8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	2b02      	cmp	r3, #2
 80113ba:	d121      	bne.n	8011400 <LL_GPIO_Init+0xd6>
 80113bc:	6a3b      	ldr	r3, [r7, #32]
 80113be:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	fa93 f3a3 	rbit	r3, r3
 80113c6:	60bb      	str	r3, [r7, #8]
  return result;
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d101      	bne.n	80113d6 <LL_GPIO_Init+0xac>
    return 32U;
 80113d2:	2320      	movs	r3, #32
 80113d4:	e003      	b.n	80113de <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	fab3 f383 	clz	r3, r3
 80113dc:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80113de:	2b07      	cmp	r3, #7
 80113e0:	d807      	bhi.n	80113f2 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	695b      	ldr	r3, [r3, #20]
 80113e6:	461a      	mov	r2, r3
 80113e8:	6a39      	ldr	r1, [r7, #32]
 80113ea:	6878      	ldr	r0, [r7, #4]
 80113ec:	f7ff ff21 	bl	8011232 <LL_GPIO_SetAFPin_0_7>
 80113f0:	e006      	b.n	8011400 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	695b      	ldr	r3, [r3, #20]
 80113f6:	461a      	mov	r2, r3
 80113f8:	6a39      	ldr	r1, [r7, #32]
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f7ff ff56 	bl	80112ac <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	461a      	mov	r2, r3
 8011406:	6a39      	ldr	r1, [r7, #32]
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f7ff fe43 	bl	8011094 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 801140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011410:	3301      	adds	r3, #1
 8011412:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	681a      	ldr	r2, [r3, #0]
 8011418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801141a:	fa22 f303 	lsr.w	r3, r2, r3
 801141e:	2b00      	cmp	r3, #0
 8011420:	d1a0      	bne.n	8011364 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8011422:	2300      	movs	r3, #0
}
 8011424:	4618      	mov	r0, r3
 8011426:	3728      	adds	r7, #40	@ 0x28
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}

0801142c <LL_I2C_Enable>:
{
 801142c:	b480      	push	{r7}
 801142e:	b083      	sub	sp, #12
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	f043 0201 	orr.w	r2, r3, #1
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	601a      	str	r2, [r3, #0]
}
 8011440:	bf00      	nop
 8011442:	370c      	adds	r7, #12
 8011444:	46bd      	mov	sp, r7
 8011446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144a:	4770      	bx	lr

0801144c <LL_I2C_Disable>:
{
 801144c:	b480      	push	{r7}
 801144e:	b083      	sub	sp, #12
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	f023 0201 	bic.w	r2, r3, #1
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	601a      	str	r2, [r3, #0]
}
 8011460:	bf00      	nop
 8011462:	370c      	adds	r7, #12
 8011464:	46bd      	mov	sp, r7
 8011466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146a:	4770      	bx	lr

0801146c <LL_I2C_SetOwnAddress1>:
{
 801146c:	b480      	push	{r7}
 801146e:	b085      	sub	sp, #20
 8011470:	af00      	add	r7, sp, #0
 8011472:	60f8      	str	r0, [r7, #12]
 8011474:	60b9      	str	r1, [r7, #8]
 8011476:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	689b      	ldr	r3, [r3, #8]
 801147c:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8011480:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011484:	68b9      	ldr	r1, [r7, #8]
 8011486:	687a      	ldr	r2, [r7, #4]
 8011488:	430a      	orrs	r2, r1
 801148a:	431a      	orrs	r2, r3
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	609a      	str	r2, [r3, #8]
}
 8011490:	bf00      	nop
 8011492:	3714      	adds	r7, #20
 8011494:	46bd      	mov	sp, r7
 8011496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149a:	4770      	bx	lr

0801149c <LL_I2C_ConfigSpeed>:
{
 801149c:	b480      	push	{r7}
 801149e:	b087      	sub	sp, #28
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	60f8      	str	r0, [r7, #12]
 80114a4:	60b9      	str	r1, [r7, #8]
 80114a6:	607a      	str	r2, [r7, #4]
 80114a8:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 80114aa:	2300      	movs	r3, #0
 80114ac:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 80114ae:	2300      	movs	r3, #0
 80114b0:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	4a42      	ldr	r2, [pc, #264]	@ (80115c0 <LL_I2C_ConfigSpeed+0x124>)
 80114b6:	fba2 2303 	umull	r2, r3, r2, r3
 80114ba:	0c9b      	lsrs	r3, r3, #18
 80114bc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	685b      	ldr	r3, [r3, #4]
 80114c2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	431a      	orrs	r2, r3
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	6a1b      	ldr	r3, [r3, #32]
 80114d2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	493a      	ldr	r1, [pc, #232]	@ (80115c4 <LL_I2C_ConfigSpeed+0x128>)
 80114da:	428b      	cmp	r3, r1
 80114dc:	d802      	bhi.n	80114e4 <LL_I2C_ConfigSpeed+0x48>
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	3301      	adds	r3, #1
 80114e2:	e009      	b.n	80114f8 <LL_I2C_ConfigSpeed+0x5c>
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80114ea:	fb01 f303 	mul.w	r3, r1, r3
 80114ee:	4936      	ldr	r1, [pc, #216]	@ (80115c8 <LL_I2C_ConfigSpeed+0x12c>)
 80114f0:	fba1 1303 	umull	r1, r3, r1, r3
 80114f4:	099b      	lsrs	r3, r3, #6
 80114f6:	3301      	adds	r3, #1
 80114f8:	431a      	orrs	r2, r3
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	4a30      	ldr	r2, [pc, #192]	@ (80115c4 <LL_I2C_ConfigSpeed+0x128>)
 8011502:	4293      	cmp	r3, r2
 8011504:	d939      	bls.n	801157a <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d117      	bne.n	801153c <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	4613      	mov	r3, r2
 8011510:	005b      	lsls	r3, r3, #1
 8011512:	4413      	add	r3, r2
 8011514:	68ba      	ldr	r2, [r7, #8]
 8011516:	fbb2 f3f3 	udiv	r3, r2, r3
 801151a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 801151e:	2b00      	cmp	r3, #0
 8011520:	d009      	beq.n	8011536 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	4613      	mov	r3, r2
 8011526:	005b      	lsls	r3, r3, #1
 8011528:	4413      	add	r3, r2
 801152a:	68ba      	ldr	r2, [r7, #8]
 801152c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8011530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011534:	e01d      	b.n	8011572 <LL_I2C_ConfigSpeed+0xd6>
 8011536:	f248 0301 	movw	r3, #32769	@ 0x8001
 801153a:	e01a      	b.n	8011572 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 801153c:	687a      	ldr	r2, [r7, #4]
 801153e:	4613      	mov	r3, r2
 8011540:	009b      	lsls	r3, r3, #2
 8011542:	4413      	add	r3, r2
 8011544:	009a      	lsls	r2, r3, #2
 8011546:	4413      	add	r3, r2
 8011548:	68ba      	ldr	r2, [r7, #8]
 801154a:	fbb2 f3f3 	udiv	r3, r2, r3
 801154e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8011552:	2b00      	cmp	r3, #0
 8011554:	d00b      	beq.n	801156e <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8011556:	687a      	ldr	r2, [r7, #4]
 8011558:	4613      	mov	r3, r2
 801155a:	009b      	lsls	r3, r3, #2
 801155c:	4413      	add	r3, r2
 801155e:	009a      	lsls	r2, r3, #2
 8011560:	4413      	add	r3, r2
 8011562:	68ba      	ldr	r2, [r7, #8]
 8011564:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8011568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801156c:	e001      	b.n	8011572 <LL_I2C_ConfigSpeed+0xd6>
 801156e:	f248 0301 	movw	r3, #32769	@ 0x8001
 8011572:	683a      	ldr	r2, [r7, #0]
 8011574:	4313      	orrs	r3, r2
 8011576:	617b      	str	r3, [r7, #20]
 8011578:	e011      	b.n	801159e <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	005b      	lsls	r3, r3, #1
 801157e:	68ba      	ldr	r2, [r7, #8]
 8011580:	fbb2 f2f3 	udiv	r2, r2, r3
 8011584:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8011588:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 801158a:	2b00      	cmp	r3, #0
 801158c:	d005      	beq.n	801159a <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8011592:	68ba      	ldr	r2, [r7, #8]
 8011594:	fbb2 f3f3 	udiv	r3, r2, r3
 8011598:	e000      	b.n	801159c <LL_I2C_ConfigSpeed+0x100>
 801159a:	2304      	movs	r3, #4
 801159c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	69db      	ldr	r3, [r3, #28]
 80115a2:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 80115a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80115aa:	697a      	ldr	r2, [r7, #20]
 80115ac:	431a      	orrs	r2, r3
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	61da      	str	r2, [r3, #28]
}
 80115b2:	bf00      	nop
 80115b4:	371c      	adds	r7, #28
 80115b6:	46bd      	mov	sp, r7
 80115b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115bc:	4770      	bx	lr
 80115be:	bf00      	nop
 80115c0:	431bde83 	.word	0x431bde83
 80115c4:	000186a0 	.word	0x000186a0
 80115c8:	10624dd3 	.word	0x10624dd3

080115cc <LL_I2C_SetMode>:
{
 80115cc:	b480      	push	{r7}
 80115ce:	b083      	sub	sp, #12
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	f023 021a 	bic.w	r2, r3, #26
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	431a      	orrs	r2, r3
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	601a      	str	r2, [r3, #0]
}
 80115e6:	bf00      	nop
 80115e8:	370c      	adds	r7, #12
 80115ea:	46bd      	mov	sp, r7
 80115ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f0:	4770      	bx	lr

080115f2 <LL_I2C_AcknowledgeNextData>:
{
 80115f2:	b480      	push	{r7}
 80115f4:	b083      	sub	sp, #12
 80115f6:	af00      	add	r7, sp, #0
 80115f8:	6078      	str	r0, [r7, #4]
 80115fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	431a      	orrs	r2, r3
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	601a      	str	r2, [r3, #0]
}
 801160c:	bf00      	nop
 801160e:	370c      	adds	r7, #12
 8011610:	46bd      	mov	sp, r7
 8011612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011616:	4770      	bx	lr

08011618 <LL_APB1_GRP1_ForceReset>:
{
 8011618:	b480      	push	{r7}
 801161a:	b083      	sub	sp, #12
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR, Periphs);
 8011620:	4b05      	ldr	r3, [pc, #20]	@ (8011638 <LL_APB1_GRP1_ForceReset+0x20>)
 8011622:	6a1a      	ldr	r2, [r3, #32]
 8011624:	4904      	ldr	r1, [pc, #16]	@ (8011638 <LL_APB1_GRP1_ForceReset+0x20>)
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	4313      	orrs	r3, r2
 801162a:	620b      	str	r3, [r1, #32]
}
 801162c:	bf00      	nop
 801162e:	370c      	adds	r7, #12
 8011630:	46bd      	mov	sp, r7
 8011632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011636:	4770      	bx	lr
 8011638:	40023800 	.word	0x40023800

0801163c <LL_APB1_GRP1_ReleaseReset>:
{
 801163c:	b480      	push	{r7}
 801163e:	b083      	sub	sp, #12
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 8011644:	4b06      	ldr	r3, [pc, #24]	@ (8011660 <LL_APB1_GRP1_ReleaseReset+0x24>)
 8011646:	6a1a      	ldr	r2, [r3, #32]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	43db      	mvns	r3, r3
 801164c:	4904      	ldr	r1, [pc, #16]	@ (8011660 <LL_APB1_GRP1_ReleaseReset+0x24>)
 801164e:	4013      	ands	r3, r2
 8011650:	620b      	str	r3, [r1, #32]
}
 8011652:	bf00      	nop
 8011654:	370c      	adds	r7, #12
 8011656:	46bd      	mov	sp, r7
 8011658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165c:	4770      	bx	lr
 801165e:	bf00      	nop
 8011660:	40023800 	.word	0x40023800

08011664 <LL_I2C_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are de-initialized
  *          - ERROR  I2C registers are not de-initialized
  */
uint32_t LL_I2C_DeInit(I2C_TypeDef *I2Cx)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b084      	sub	sp, #16
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 801166c:	2300      	movs	r3, #0
 801166e:	73fb      	strb	r3, [r7, #15]

  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));

  if (I2Cx == I2C1)
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	4a16      	ldr	r2, [pc, #88]	@ (80116cc <LL_I2C_DeInit+0x68>)
 8011674:	4293      	cmp	r3, r2
 8011676:	d108      	bne.n	801168a <LL_I2C_DeInit+0x26>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C1);
 8011678:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 801167c:	f7ff ffcc 	bl	8011618 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C1);
 8011680:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8011684:	f7ff ffda 	bl	801163c <LL_APB1_GRP1_ReleaseReset>
 8011688:	e01b      	b.n	80116c2 <LL_I2C_DeInit+0x5e>
  }
  else if (I2Cx == I2C2)
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	4a10      	ldr	r2, [pc, #64]	@ (80116d0 <LL_I2C_DeInit+0x6c>)
 801168e:	4293      	cmp	r3, r2
 8011690:	d108      	bne.n	80116a4 <LL_I2C_DeInit+0x40>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C2);
 8011692:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8011696:	f7ff ffbf 	bl	8011618 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C2);
 801169a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 801169e:	f7ff ffcd 	bl	801163c <LL_APB1_GRP1_ReleaseReset>
 80116a2:	e00e      	b.n	80116c2 <LL_I2C_DeInit+0x5e>

  }
#if defined(I2C3)
  else if (I2Cx == I2C3)
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	4a0b      	ldr	r2, [pc, #44]	@ (80116d4 <LL_I2C_DeInit+0x70>)
 80116a8:	4293      	cmp	r3, r2
 80116aa:	d108      	bne.n	80116be <LL_I2C_DeInit+0x5a>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C3);
 80116ac:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80116b0:	f7ff ffb2 	bl	8011618 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C3);
 80116b4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80116b8:	f7ff ffc0 	bl	801163c <LL_APB1_GRP1_ReleaseReset>
 80116bc:	e001      	b.n	80116c2 <LL_I2C_DeInit+0x5e>
  }
#endif
  else
  {
    status = ERROR;
 80116be:	2301      	movs	r3, #1
 80116c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80116c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3710      	adds	r7, #16
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	40005400 	.word	0x40005400
 80116d0:	40005800 	.word	0x40005800
 80116d4:	40005c00 	.word	0x40005c00

080116d8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b086      	sub	sp, #24
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
 80116e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f7ff feb2 	bl	801144c <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80116e8:	f107 0308 	add.w	r3, r7, #8
 80116ec:	4618      	mov	r0, r3
 80116ee:	f000 f895 	bl	801181c <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80116f2:	6939      	ldr	r1, [r7, #16]
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	685a      	ldr	r2, [r3, #4]
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	689b      	ldr	r3, [r3, #8]
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f7ff fecd 	bl	801149c <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	68d9      	ldr	r1, [r3, #12]
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	695b      	ldr	r3, [r3, #20]
 801170a:	461a      	mov	r2, r3
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f7ff fead 	bl	801146c <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	4619      	mov	r1, r3
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f7ff ff57 	bl	80115cc <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	f7ff fe84 	bl	801142c <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	691b      	ldr	r3, [r3, #16]
 8011728:	4619      	mov	r1, r3
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f7ff ff61 	bl	80115f2 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8011730:	2300      	movs	r3, #0
}
 8011732:	4618      	mov	r0, r3
 8011734:	3718      	adds	r7, #24
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
	...

0801173c <LL_RCC_GetSysClkSource>:
{
 801173c:	b480      	push	{r7}
 801173e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8011740:	4b04      	ldr	r3, [pc, #16]	@ (8011754 <LL_RCC_GetSysClkSource+0x18>)
 8011742:	689b      	ldr	r3, [r3, #8]
 8011744:	f003 030c 	and.w	r3, r3, #12
}
 8011748:	4618      	mov	r0, r3
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr
 8011752:	bf00      	nop
 8011754:	40023800 	.word	0x40023800

08011758 <LL_RCC_GetAHBPrescaler>:
{
 8011758:	b480      	push	{r7}
 801175a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 801175c:	4b04      	ldr	r3, [pc, #16]	@ (8011770 <LL_RCC_GetAHBPrescaler+0x18>)
 801175e:	689b      	ldr	r3, [r3, #8]
 8011760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8011764:	4618      	mov	r0, r3
 8011766:	46bd      	mov	sp, r7
 8011768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176c:	4770      	bx	lr
 801176e:	bf00      	nop
 8011770:	40023800 	.word	0x40023800

08011774 <LL_RCC_GetAPB1Prescaler>:
{
 8011774:	b480      	push	{r7}
 8011776:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8011778:	4b04      	ldr	r3, [pc, #16]	@ (801178c <LL_RCC_GetAPB1Prescaler+0x18>)
 801177a:	689b      	ldr	r3, [r3, #8]
 801177c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8011780:	4618      	mov	r0, r3
 8011782:	46bd      	mov	sp, r7
 8011784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011788:	4770      	bx	lr
 801178a:	bf00      	nop
 801178c:	40023800 	.word	0x40023800

08011790 <LL_RCC_GetAPB2Prescaler>:
{
 8011790:	b480      	push	{r7}
 8011792:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8011794:	4b04      	ldr	r3, [pc, #16]	@ (80117a8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8011796:	689b      	ldr	r3, [r3, #8]
 8011798:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 801179c:	4618      	mov	r0, r3
 801179e:	46bd      	mov	sp, r7
 80117a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a4:	4770      	bx	lr
 80117a6:	bf00      	nop
 80117a8:	40023800 	.word	0x40023800

080117ac <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80117ac:	b480      	push	{r7}
 80117ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80117b0:	4b04      	ldr	r3, [pc, #16]	@ (80117c4 <LL_RCC_PLL_GetMainSource+0x18>)
 80117b2:	685b      	ldr	r3, [r3, #4]
 80117b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	46bd      	mov	sp, r7
 80117bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c0:	4770      	bx	lr
 80117c2:	bf00      	nop
 80117c4:	40023800 	.word	0x40023800

080117c8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80117c8:	b480      	push	{r7}
 80117ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80117cc:	4b04      	ldr	r3, [pc, #16]	@ (80117e0 <LL_RCC_PLL_GetN+0x18>)
 80117ce:	685b      	ldr	r3, [r3, #4]
 80117d0:	099b      	lsrs	r3, r3, #6
 80117d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	46bd      	mov	sp, r7
 80117da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117de:	4770      	bx	lr
 80117e0:	40023800 	.word	0x40023800

080117e4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80117e4:	b480      	push	{r7}
 80117e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80117e8:	4b04      	ldr	r3, [pc, #16]	@ (80117fc <LL_RCC_PLL_GetP+0x18>)
 80117ea:	685b      	ldr	r3, [r3, #4]
 80117ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80117f0:	4618      	mov	r0, r3
 80117f2:	46bd      	mov	sp, r7
 80117f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f8:	4770      	bx	lr
 80117fa:	bf00      	nop
 80117fc:	40023800 	.word	0x40023800

08011800 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8011800:	b480      	push	{r7}
 8011802:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8011804:	4b04      	ldr	r3, [pc, #16]	@ (8011818 <LL_RCC_PLL_GetDivider+0x18>)
 8011806:	685b      	ldr	r3, [r3, #4]
 8011808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 801180c:	4618      	mov	r0, r3
 801180e:	46bd      	mov	sp, r7
 8011810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011814:	4770      	bx	lr
 8011816:	bf00      	nop
 8011818:	40023800 	.word	0x40023800

0801181c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b082      	sub	sp, #8
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8011824:	f000 f820 	bl	8011868 <RCC_GetSystemClockFreq>
 8011828:	4602      	mov	r2, r0
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	4618      	mov	r0, r3
 8011834:	f000 f840 	bl	80118b8 <RCC_GetHCLKClockFreq>
 8011838:	4602      	mov	r2, r0
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	4618      	mov	r0, r3
 8011844:	f000 f84e 	bl	80118e4 <RCC_GetPCLK1ClockFreq>
 8011848:	4602      	mov	r2, r0
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	685b      	ldr	r3, [r3, #4]
 8011852:	4618      	mov	r0, r3
 8011854:	f000 f85a 	bl	801190c <RCC_GetPCLK2ClockFreq>
 8011858:	4602      	mov	r2, r0
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	60da      	str	r2, [r3, #12]
}
 801185e:	bf00      	nop
 8011860:	3708      	adds	r7, #8
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}
	...

08011868 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b082      	sub	sp, #8
 801186c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 801186e:	2300      	movs	r3, #0
 8011870:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8011872:	f7ff ff63 	bl	801173c <LL_RCC_GetSysClkSource>
 8011876:	4603      	mov	r3, r0
 8011878:	2b08      	cmp	r3, #8
 801187a:	d00c      	beq.n	8011896 <RCC_GetSystemClockFreq+0x2e>
 801187c:	2b08      	cmp	r3, #8
 801187e:	d80f      	bhi.n	80118a0 <RCC_GetSystemClockFreq+0x38>
 8011880:	2b00      	cmp	r3, #0
 8011882:	d002      	beq.n	801188a <RCC_GetSystemClockFreq+0x22>
 8011884:	2b04      	cmp	r3, #4
 8011886:	d003      	beq.n	8011890 <RCC_GetSystemClockFreq+0x28>
 8011888:	e00a      	b.n	80118a0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 801188a:	4b09      	ldr	r3, [pc, #36]	@ (80118b0 <RCC_GetSystemClockFreq+0x48>)
 801188c:	607b      	str	r3, [r7, #4]
      break;
 801188e:	e00a      	b.n	80118a6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8011890:	4b08      	ldr	r3, [pc, #32]	@ (80118b4 <RCC_GetSystemClockFreq+0x4c>)
 8011892:	607b      	str	r3, [r7, #4]
      break;
 8011894:	e007      	b.n	80118a6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8011896:	2008      	movs	r0, #8
 8011898:	f000 f84c 	bl	8011934 <RCC_PLL_GetFreqDomain_SYS>
 801189c:	6078      	str	r0, [r7, #4]
      break;
 801189e:	e002      	b.n	80118a6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80118a0:	4b03      	ldr	r3, [pc, #12]	@ (80118b0 <RCC_GetSystemClockFreq+0x48>)
 80118a2:	607b      	str	r3, [r7, #4]
      break;
 80118a4:	bf00      	nop
  }

  return frequency;
 80118a6:	687b      	ldr	r3, [r7, #4]
}
 80118a8:	4618      	mov	r0, r3
 80118aa:	3708      	adds	r7, #8
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}
 80118b0:	00f42400 	.word	0x00f42400
 80118b4:	007a1200 	.word	0x007a1200

080118b8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b082      	sub	sp, #8
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80118c0:	f7ff ff4a 	bl	8011758 <LL_RCC_GetAHBPrescaler>
 80118c4:	4603      	mov	r3, r0
 80118c6:	091b      	lsrs	r3, r3, #4
 80118c8:	f003 030f 	and.w	r3, r3, #15
 80118cc:	4a04      	ldr	r2, [pc, #16]	@ (80118e0 <RCC_GetHCLKClockFreq+0x28>)
 80118ce:	5cd3      	ldrb	r3, [r2, r3]
 80118d0:	461a      	mov	r2, r3
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	40d3      	lsrs	r3, r2
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3708      	adds	r7, #8
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}
 80118de:	bf00      	nop
 80118e0:	080151ac 	.word	0x080151ac

080118e4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b082      	sub	sp, #8
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80118ec:	f7ff ff42 	bl	8011774 <LL_RCC_GetAPB1Prescaler>
 80118f0:	4603      	mov	r3, r0
 80118f2:	0a9b      	lsrs	r3, r3, #10
 80118f4:	4a04      	ldr	r2, [pc, #16]	@ (8011908 <RCC_GetPCLK1ClockFreq+0x24>)
 80118f6:	5cd3      	ldrb	r3, [r2, r3]
 80118f8:	461a      	mov	r2, r3
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	40d3      	lsrs	r3, r2
}
 80118fe:	4618      	mov	r0, r3
 8011900:	3708      	adds	r7, #8
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}
 8011906:	bf00      	nop
 8011908:	080151bc 	.word	0x080151bc

0801190c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b082      	sub	sp, #8
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8011914:	f7ff ff3c 	bl	8011790 <LL_RCC_GetAPB2Prescaler>
 8011918:	4603      	mov	r3, r0
 801191a:	0b5b      	lsrs	r3, r3, #13
 801191c:	4a04      	ldr	r2, [pc, #16]	@ (8011930 <RCC_GetPCLK2ClockFreq+0x24>)
 801191e:	5cd3      	ldrb	r3, [r2, r3]
 8011920:	461a      	mov	r2, r3
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	40d3      	lsrs	r3, r2
}
 8011926:	4618      	mov	r0, r3
 8011928:	3708      	adds	r7, #8
 801192a:	46bd      	mov	sp, r7
 801192c:	bd80      	pop	{r7, pc}
 801192e:	bf00      	nop
 8011930:	080151bc 	.word	0x080151bc

08011934 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8011934:	b590      	push	{r4, r7, lr}
 8011936:	b087      	sub	sp, #28
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 801193c:	2300      	movs	r3, #0
 801193e:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8011940:	2300      	movs	r3, #0
 8011942:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8011944:	2300      	movs	r3, #0
 8011946:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8011948:	f7ff ff30 	bl	80117ac <LL_RCC_PLL_GetMainSource>
 801194c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d004      	beq.n	801195e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801195a:	d003      	beq.n	8011964 <RCC_PLL_GetFreqDomain_SYS+0x30>
 801195c:	e005      	b.n	801196a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 801195e:	4b12      	ldr	r3, [pc, #72]	@ (80119a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8011960:	617b      	str	r3, [r7, #20]
      break;
 8011962:	e005      	b.n	8011970 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8011964:	4b11      	ldr	r3, [pc, #68]	@ (80119ac <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8011966:	617b      	str	r3, [r7, #20]
      break;
 8011968:	e002      	b.n	8011970 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 801196a:	4b0f      	ldr	r3, [pc, #60]	@ (80119a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 801196c:	617b      	str	r3, [r7, #20]
      break;
 801196e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2b08      	cmp	r3, #8
 8011974:	d113      	bne.n	801199e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8011976:	f7ff ff43 	bl	8011800 <LL_RCC_PLL_GetDivider>
 801197a:	4602      	mov	r2, r0
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	fbb3 f4f2 	udiv	r4, r3, r2
 8011982:	f7ff ff21 	bl	80117c8 <LL_RCC_PLL_GetN>
 8011986:	4603      	mov	r3, r0
 8011988:	fb03 f404 	mul.w	r4, r3, r4
 801198c:	f7ff ff2a 	bl	80117e4 <LL_RCC_PLL_GetP>
 8011990:	4603      	mov	r3, r0
 8011992:	0c1b      	lsrs	r3, r3, #16
 8011994:	3301      	adds	r3, #1
 8011996:	005b      	lsls	r3, r3, #1
 8011998:	fbb4 f3f3 	udiv	r3, r4, r3
 801199c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 801199e:	693b      	ldr	r3, [r7, #16]
}
 80119a0:	4618      	mov	r0, r3
 80119a2:	371c      	adds	r7, #28
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd90      	pop	{r4, r7, pc}
 80119a8:	00f42400 	.word	0x00f42400
 80119ac:	007a1200 	.word	0x007a1200

080119b0 <LL_SPI_IsEnabled>:
{
 80119b0:	b480      	push	{r7}
 80119b2:	b083      	sub	sp, #12
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119c0:	2b40      	cmp	r3, #64	@ 0x40
 80119c2:	d101      	bne.n	80119c8 <LL_SPI_IsEnabled+0x18>
 80119c4:	2301      	movs	r3, #1
 80119c6:	e000      	b.n	80119ca <LL_SPI_IsEnabled+0x1a>
 80119c8:	2300      	movs	r3, #0
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	370c      	adds	r7, #12
 80119ce:	46bd      	mov	sp, r7
 80119d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d4:	4770      	bx	lr

080119d6 <LL_SPI_SetCRCPolynomial>:
{
 80119d6:	b480      	push	{r7}
 80119d8:	b083      	sub	sp, #12
 80119da:	af00      	add	r7, sp, #0
 80119dc:	6078      	str	r0, [r7, #4]
 80119de:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	461a      	mov	r2, r3
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	611a      	str	r2, [r3, #16]
}
 80119ea:	bf00      	nop
 80119ec:	370c      	adds	r7, #12
 80119ee:	46bd      	mov	sp, r7
 80119f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f4:	4770      	bx	lr

080119f6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80119f6:	b580      	push	{r7, lr}
 80119f8:	b084      	sub	sp, #16
 80119fa:	af00      	add	r7, sp, #0
 80119fc:	6078      	str	r0, [r7, #4]
 80119fe:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8011a00:	2301      	movs	r3, #1
 8011a02:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f7ff ffd3 	bl	80119b0 <LL_SPI_IsEnabled>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d139      	bne.n	8011a84 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011a18:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8011a1c:	683a      	ldr	r2, [r7, #0]
 8011a1e:	6811      	ldr	r1, [r2, #0]
 8011a20:	683a      	ldr	r2, [r7, #0]
 8011a22:	6852      	ldr	r2, [r2, #4]
 8011a24:	4311      	orrs	r1, r2
 8011a26:	683a      	ldr	r2, [r7, #0]
 8011a28:	6892      	ldr	r2, [r2, #8]
 8011a2a:	4311      	orrs	r1, r2
 8011a2c:	683a      	ldr	r2, [r7, #0]
 8011a2e:	68d2      	ldr	r2, [r2, #12]
 8011a30:	4311      	orrs	r1, r2
 8011a32:	683a      	ldr	r2, [r7, #0]
 8011a34:	6912      	ldr	r2, [r2, #16]
 8011a36:	4311      	orrs	r1, r2
 8011a38:	683a      	ldr	r2, [r7, #0]
 8011a3a:	6952      	ldr	r2, [r2, #20]
 8011a3c:	4311      	orrs	r1, r2
 8011a3e:	683a      	ldr	r2, [r7, #0]
 8011a40:	6992      	ldr	r2, [r2, #24]
 8011a42:	4311      	orrs	r1, r2
 8011a44:	683a      	ldr	r2, [r7, #0]
 8011a46:	69d2      	ldr	r2, [r2, #28]
 8011a48:	4311      	orrs	r1, r2
 8011a4a:	683a      	ldr	r2, [r7, #0]
 8011a4c:	6a12      	ldr	r2, [r2, #32]
 8011a4e:	430a      	orrs	r2, r1
 8011a50:	431a      	orrs	r2, r3
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	685b      	ldr	r3, [r3, #4]
 8011a5a:	f023 0204 	bic.w	r2, r3, #4
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	695b      	ldr	r3, [r3, #20]
 8011a62:	0c1b      	lsrs	r3, r3, #16
 8011a64:	431a      	orrs	r2, r3
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	6a1b      	ldr	r3, [r3, #32]
 8011a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011a72:	d105      	bne.n	8011a80 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a78:	4619      	mov	r1, r3
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f7ff ffab 	bl	80119d6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8011a80:	2300      	movs	r3, #0
 8011a82:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	69db      	ldr	r3, [r3, #28]
 8011a88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	61da      	str	r2, [r3, #28]
  return status;
 8011a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3710      	adds	r7, #16
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}

08011a9a <LL_TIM_SetPrescaler>:
{
 8011a9a:	b480      	push	{r7}
 8011a9c:	b083      	sub	sp, #12
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	6078      	str	r0, [r7, #4]
 8011aa2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	683a      	ldr	r2, [r7, #0]
 8011aa8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8011aaa:	bf00      	nop
 8011aac:	370c      	adds	r7, #12
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab4:	4770      	bx	lr

08011ab6 <LL_TIM_SetAutoReload>:
{
 8011ab6:	b480      	push	{r7}
 8011ab8:	b083      	sub	sp, #12
 8011aba:	af00      	add	r7, sp, #0
 8011abc:	6078      	str	r0, [r7, #4]
 8011abe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	683a      	ldr	r2, [r7, #0]
 8011ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8011ac6:	bf00      	nop
 8011ac8:	370c      	adds	r7, #12
 8011aca:	46bd      	mov	sp, r7
 8011acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad0:	4770      	bx	lr

08011ad2 <LL_TIM_SetRepetitionCounter>:
{
 8011ad2:	b480      	push	{r7}
 8011ad4:	b083      	sub	sp, #12
 8011ad6:	af00      	add	r7, sp, #0
 8011ad8:	6078      	str	r0, [r7, #4]
 8011ada:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	683a      	ldr	r2, [r7, #0]
 8011ae0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8011ae2:	bf00      	nop
 8011ae4:	370c      	adds	r7, #12
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aec:	4770      	bx	lr

08011aee <LL_TIM_OC_SetCompareCH1>:
{
 8011aee:	b480      	push	{r7}
 8011af0:	b083      	sub	sp, #12
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	6078      	str	r0, [r7, #4]
 8011af6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	683a      	ldr	r2, [r7, #0]
 8011afc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8011afe:	bf00      	nop
 8011b00:	370c      	adds	r7, #12
 8011b02:	46bd      	mov	sp, r7
 8011b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b08:	4770      	bx	lr

08011b0a <LL_TIM_OC_SetCompareCH2>:
{
 8011b0a:	b480      	push	{r7}
 8011b0c:	b083      	sub	sp, #12
 8011b0e:	af00      	add	r7, sp, #0
 8011b10:	6078      	str	r0, [r7, #4]
 8011b12:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	683a      	ldr	r2, [r7, #0]
 8011b18:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8011b1a:	bf00      	nop
 8011b1c:	370c      	adds	r7, #12
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr

08011b26 <LL_TIM_OC_SetCompareCH3>:
{
 8011b26:	b480      	push	{r7}
 8011b28:	b083      	sub	sp, #12
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	6078      	str	r0, [r7, #4]
 8011b2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	683a      	ldr	r2, [r7, #0]
 8011b34:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8011b36:	bf00      	nop
 8011b38:	370c      	adds	r7, #12
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b40:	4770      	bx	lr

08011b42 <LL_TIM_OC_SetCompareCH4>:
{
 8011b42:	b480      	push	{r7}
 8011b44:	b083      	sub	sp, #12
 8011b46:	af00      	add	r7, sp, #0
 8011b48:	6078      	str	r0, [r7, #4]
 8011b4a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	683a      	ldr	r2, [r7, #0]
 8011b50:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8011b52:	bf00      	nop
 8011b54:	370c      	adds	r7, #12
 8011b56:	46bd      	mov	sp, r7
 8011b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5c:	4770      	bx	lr

08011b5e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8011b5e:	b480      	push	{r7}
 8011b60:	b083      	sub	sp, #12
 8011b62:	af00      	add	r7, sp, #0
 8011b64:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	695b      	ldr	r3, [r3, #20]
 8011b6a:	f043 0201 	orr.w	r2, r3, #1
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	615a      	str	r2, [r3, #20]
}
 8011b72:	bf00      	nop
 8011b74:	370c      	adds	r7, #12
 8011b76:	46bd      	mov	sp, r7
 8011b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7c:	4770      	bx	lr
	...

08011b80 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	4a3d      	ldr	r2, [pc, #244]	@ (8011c88 <LL_TIM_Init+0x108>)
 8011b94:	4293      	cmp	r3, r2
 8011b96:	d013      	beq.n	8011bc0 <LL_TIM_Init+0x40>
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011b9e:	d00f      	beq.n	8011bc0 <LL_TIM_Init+0x40>
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	4a3a      	ldr	r2, [pc, #232]	@ (8011c8c <LL_TIM_Init+0x10c>)
 8011ba4:	4293      	cmp	r3, r2
 8011ba6:	d00b      	beq.n	8011bc0 <LL_TIM_Init+0x40>
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	4a39      	ldr	r2, [pc, #228]	@ (8011c90 <LL_TIM_Init+0x110>)
 8011bac:	4293      	cmp	r3, r2
 8011bae:	d007      	beq.n	8011bc0 <LL_TIM_Init+0x40>
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	4a38      	ldr	r2, [pc, #224]	@ (8011c94 <LL_TIM_Init+0x114>)
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	d003      	beq.n	8011bc0 <LL_TIM_Init+0x40>
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	4a37      	ldr	r2, [pc, #220]	@ (8011c98 <LL_TIM_Init+0x118>)
 8011bbc:	4293      	cmp	r3, r2
 8011bbe:	d106      	bne.n	8011bce <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	4313      	orrs	r3, r2
 8011bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8011c88 <LL_TIM_Init+0x108>)
 8011bd2:	4293      	cmp	r3, r2
 8011bd4:	d02b      	beq.n	8011c2e <LL_TIM_Init+0xae>
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011bdc:	d027      	beq.n	8011c2e <LL_TIM_Init+0xae>
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	4a2a      	ldr	r2, [pc, #168]	@ (8011c8c <LL_TIM_Init+0x10c>)
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d023      	beq.n	8011c2e <LL_TIM_Init+0xae>
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	4a29      	ldr	r2, [pc, #164]	@ (8011c90 <LL_TIM_Init+0x110>)
 8011bea:	4293      	cmp	r3, r2
 8011bec:	d01f      	beq.n	8011c2e <LL_TIM_Init+0xae>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	4a28      	ldr	r2, [pc, #160]	@ (8011c94 <LL_TIM_Init+0x114>)
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	d01b      	beq.n	8011c2e <LL_TIM_Init+0xae>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	4a27      	ldr	r2, [pc, #156]	@ (8011c98 <LL_TIM_Init+0x118>)
 8011bfa:	4293      	cmp	r3, r2
 8011bfc:	d017      	beq.n	8011c2e <LL_TIM_Init+0xae>
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	4a26      	ldr	r2, [pc, #152]	@ (8011c9c <LL_TIM_Init+0x11c>)
 8011c02:	4293      	cmp	r3, r2
 8011c04:	d013      	beq.n	8011c2e <LL_TIM_Init+0xae>
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	4a25      	ldr	r2, [pc, #148]	@ (8011ca0 <LL_TIM_Init+0x120>)
 8011c0a:	4293      	cmp	r3, r2
 8011c0c:	d00f      	beq.n	8011c2e <LL_TIM_Init+0xae>
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	4a24      	ldr	r2, [pc, #144]	@ (8011ca4 <LL_TIM_Init+0x124>)
 8011c12:	4293      	cmp	r3, r2
 8011c14:	d00b      	beq.n	8011c2e <LL_TIM_Init+0xae>
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	4a23      	ldr	r2, [pc, #140]	@ (8011ca8 <LL_TIM_Init+0x128>)
 8011c1a:	4293      	cmp	r3, r2
 8011c1c:	d007      	beq.n	8011c2e <LL_TIM_Init+0xae>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	4a22      	ldr	r2, [pc, #136]	@ (8011cac <LL_TIM_Init+0x12c>)
 8011c22:	4293      	cmp	r3, r2
 8011c24:	d003      	beq.n	8011c2e <LL_TIM_Init+0xae>
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	4a21      	ldr	r2, [pc, #132]	@ (8011cb0 <LL_TIM_Init+0x130>)
 8011c2a:	4293      	cmp	r3, r2
 8011c2c:	d106      	bne.n	8011c3c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	4313      	orrs	r3, r2
 8011c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	68fa      	ldr	r2, [r7, #12]
 8011c40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	689b      	ldr	r3, [r3, #8]
 8011c46:	4619      	mov	r1, r3
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f7ff ff34 	bl	8011ab6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	881b      	ldrh	r3, [r3, #0]
 8011c52:	4619      	mov	r1, r3
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f7ff ff20 	bl	8011a9a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8011c88 <LL_TIM_Init+0x108>)
 8011c5e:	4293      	cmp	r3, r2
 8011c60:	d003      	beq.n	8011c6a <LL_TIM_Init+0xea>
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	4a0c      	ldr	r2, [pc, #48]	@ (8011c98 <LL_TIM_Init+0x118>)
 8011c66:	4293      	cmp	r3, r2
 8011c68:	d105      	bne.n	8011c76 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	691b      	ldr	r3, [r3, #16]
 8011c6e:	4619      	mov	r1, r3
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f7ff ff2e 	bl	8011ad2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f7ff ff71 	bl	8011b5e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8011c7c:	2300      	movs	r3, #0
}
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3710      	adds	r7, #16
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}
 8011c86:	bf00      	nop
 8011c88:	40010000 	.word	0x40010000
 8011c8c:	40000400 	.word	0x40000400
 8011c90:	40000800 	.word	0x40000800
 8011c94:	40000c00 	.word	0x40000c00
 8011c98:	40010400 	.word	0x40010400
 8011c9c:	40014000 	.word	0x40014000
 8011ca0:	40014400 	.word	0x40014400
 8011ca4:	40014800 	.word	0x40014800
 8011ca8:	40001800 	.word	0x40001800
 8011cac:	40001c00 	.word	0x40001c00
 8011cb0:	40002000 	.word	0x40002000

08011cb4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b086      	sub	sp, #24
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	60b9      	str	r1, [r7, #8]
 8011cbe:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011cca:	d027      	beq.n	8011d1c <LL_TIM_OC_Init+0x68>
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011cd2:	d82a      	bhi.n	8011d2a <LL_TIM_OC_Init+0x76>
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011cda:	d018      	beq.n	8011d0e <LL_TIM_OC_Init+0x5a>
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011ce2:	d822      	bhi.n	8011d2a <LL_TIM_OC_Init+0x76>
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	2b01      	cmp	r3, #1
 8011ce8:	d003      	beq.n	8011cf2 <LL_TIM_OC_Init+0x3e>
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	2b10      	cmp	r3, #16
 8011cee:	d007      	beq.n	8011d00 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8011cf0:	e01b      	b.n	8011d2a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8011cf2:	6879      	ldr	r1, [r7, #4]
 8011cf4:	68f8      	ldr	r0, [r7, #12]
 8011cf6:	f000 f861 	bl	8011dbc <OC1Config>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8011cfe:	e015      	b.n	8011d2c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8011d00:	6879      	ldr	r1, [r7, #4]
 8011d02:	68f8      	ldr	r0, [r7, #12]
 8011d04:	f000 f8c6 	bl	8011e94 <OC2Config>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8011d0c:	e00e      	b.n	8011d2c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8011d0e:	6879      	ldr	r1, [r7, #4]
 8011d10:	68f8      	ldr	r0, [r7, #12]
 8011d12:	f000 f92f 	bl	8011f74 <OC3Config>
 8011d16:	4603      	mov	r3, r0
 8011d18:	75fb      	strb	r3, [r7, #23]
      break;
 8011d1a:	e007      	b.n	8011d2c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8011d1c:	6879      	ldr	r1, [r7, #4]
 8011d1e:	68f8      	ldr	r0, [r7, #12]
 8011d20:	f000 f998 	bl	8012054 <OC4Config>
 8011d24:	4603      	mov	r3, r0
 8011d26:	75fb      	strb	r3, [r7, #23]
      break;
 8011d28:	e000      	b.n	8011d2c <LL_TIM_OC_Init+0x78>
      break;
 8011d2a:	bf00      	nop
  }

  return result;
 8011d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3718      	adds	r7, #24
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}

08011d36 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8011d36:	b480      	push	{r7}
 8011d38:	b085      	sub	sp, #20
 8011d3a:	af00      	add	r7, sp, #0
 8011d3c:	6078      	str	r0, [r7, #4]
 8011d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8011d40:	2300      	movs	r3, #0
 8011d42:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011d4a:	683a      	ldr	r2, [r7, #0]
 8011d4c:	7b12      	ldrb	r2, [r2, #12]
 8011d4e:	4313      	orrs	r3, r2
 8011d50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	689b      	ldr	r3, [r3, #8]
 8011d5c:	4313      	orrs	r3, r2
 8011d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	685b      	ldr	r3, [r3, #4]
 8011d6a:	4313      	orrs	r3, r2
 8011d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	4313      	orrs	r3, r2
 8011d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011d82:	683a      	ldr	r2, [r7, #0]
 8011d84:	89d2      	ldrh	r2, [r2, #14]
 8011d86:	4313      	orrs	r3, r2
 8011d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	691b      	ldr	r3, [r3, #16]
 8011d94:	4313      	orrs	r3, r2
 8011d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	695b      	ldr	r3, [r3, #20]
 8011da2:	4313      	orrs	r3, r2
 8011da4:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	68fa      	ldr	r2, [r7, #12]
 8011daa:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8011dac:	2300      	movs	r3, #0
}
 8011dae:	4618      	mov	r0, r3
 8011db0:	3714      	adds	r7, #20
 8011db2:	46bd      	mov	sp, r7
 8011db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db8:	4770      	bx	lr
	...

08011dbc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b086      	sub	sp, #24
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6a1b      	ldr	r3, [r3, #32]
 8011dca:	f023 0201 	bic.w	r2, r3, #1
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6a1b      	ldr	r3, [r3, #32]
 8011dd6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	685b      	ldr	r3, [r3, #4]
 8011ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	699b      	ldr	r3, [r3, #24]
 8011de2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	f023 0303 	bic.w	r3, r3, #3
 8011dea:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	4313      	orrs	r3, r2
 8011df8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	f023 0202 	bic.w	r2, r3, #2
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	691b      	ldr	r3, [r3, #16]
 8011e04:	4313      	orrs	r3, r2
 8011e06:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	f023 0201 	bic.w	r2, r3, #1
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	685b      	ldr	r3, [r3, #4]
 8011e12:	4313      	orrs	r3, r2
 8011e14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	4a1c      	ldr	r2, [pc, #112]	@ (8011e8c <OC1Config+0xd0>)
 8011e1a:	4293      	cmp	r3, r2
 8011e1c:	d003      	beq.n	8011e26 <OC1Config+0x6a>
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	4a1b      	ldr	r2, [pc, #108]	@ (8011e90 <OC1Config+0xd4>)
 8011e22:	4293      	cmp	r3, r2
 8011e24:	d11e      	bne.n	8011e64 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	f023 0208 	bic.w	r2, r3, #8
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	695b      	ldr	r3, [r3, #20]
 8011e30:	009b      	lsls	r3, r3, #2
 8011e32:	4313      	orrs	r3, r2
 8011e34:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	f023 0204 	bic.w	r2, r3, #4
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	689b      	ldr	r3, [r3, #8]
 8011e40:	009b      	lsls	r3, r3, #2
 8011e42:	4313      	orrs	r3, r2
 8011e44:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	699b      	ldr	r3, [r3, #24]
 8011e50:	4313      	orrs	r3, r2
 8011e52:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	69db      	ldr	r3, [r3, #28]
 8011e5e:	005b      	lsls	r3, r3, #1
 8011e60:	4313      	orrs	r3, r2
 8011e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	693a      	ldr	r2, [r7, #16]
 8011e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	68fa      	ldr	r2, [r7, #12]
 8011e6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	68db      	ldr	r3, [r3, #12]
 8011e74:	4619      	mov	r1, r3
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	f7ff fe39 	bl	8011aee <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	697a      	ldr	r2, [r7, #20]
 8011e80:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8011e82:	2300      	movs	r3, #0
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3718      	adds	r7, #24
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}
 8011e8c:	40010000 	.word	0x40010000
 8011e90:	40010400 	.word	0x40010400

08011e94 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b086      	sub	sp, #24
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	6a1b      	ldr	r3, [r3, #32]
 8011ea2:	f023 0210 	bic.w	r2, r3, #16
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	6a1b      	ldr	r3, [r3, #32]
 8011eae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	685b      	ldr	r3, [r3, #4]
 8011eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	699b      	ldr	r3, [r3, #24]
 8011eba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	021b      	lsls	r3, r3, #8
 8011ed0:	4313      	orrs	r3, r2
 8011ed2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	f023 0220 	bic.w	r2, r3, #32
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	691b      	ldr	r3, [r3, #16]
 8011ede:	011b      	lsls	r3, r3, #4
 8011ee0:	4313      	orrs	r3, r2
 8011ee2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	f023 0210 	bic.w	r2, r3, #16
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	685b      	ldr	r3, [r3, #4]
 8011eee:	011b      	lsls	r3, r3, #4
 8011ef0:	4313      	orrs	r3, r2
 8011ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8011f6c <OC2Config+0xd8>)
 8011ef8:	4293      	cmp	r3, r2
 8011efa:	d003      	beq.n	8011f04 <OC2Config+0x70>
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	4a1c      	ldr	r2, [pc, #112]	@ (8011f70 <OC2Config+0xdc>)
 8011f00:	4293      	cmp	r3, r2
 8011f02:	d11f      	bne.n	8011f44 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	695b      	ldr	r3, [r3, #20]
 8011f0e:	019b      	lsls	r3, r3, #6
 8011f10:	4313      	orrs	r3, r2
 8011f12:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8011f14:	697b      	ldr	r3, [r7, #20]
 8011f16:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	689b      	ldr	r3, [r3, #8]
 8011f1e:	019b      	lsls	r3, r3, #6
 8011f20:	4313      	orrs	r3, r2
 8011f22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	699b      	ldr	r3, [r3, #24]
 8011f2e:	009b      	lsls	r3, r3, #2
 8011f30:	4313      	orrs	r3, r2
 8011f32:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	69db      	ldr	r3, [r3, #28]
 8011f3e:	00db      	lsls	r3, r3, #3
 8011f40:	4313      	orrs	r3, r2
 8011f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	693a      	ldr	r2, [r7, #16]
 8011f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	68fa      	ldr	r2, [r7, #12]
 8011f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	68db      	ldr	r3, [r3, #12]
 8011f54:	4619      	mov	r1, r3
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f7ff fdd7 	bl	8011b0a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	697a      	ldr	r2, [r7, #20]
 8011f60:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8011f62:	2300      	movs	r3, #0
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3718      	adds	r7, #24
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}
 8011f6c:	40010000 	.word	0x40010000
 8011f70:	40010400 	.word	0x40010400

08011f74 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b086      	sub	sp, #24
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
 8011f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6a1b      	ldr	r3, [r3, #32]
 8011f82:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6a1b      	ldr	r3, [r3, #32]
 8011f8e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	685b      	ldr	r3, [r3, #4]
 8011f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	69db      	ldr	r3, [r3, #28]
 8011f9a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	f023 0303 	bic.w	r3, r3, #3
 8011fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011faa:	683b      	ldr	r3, [r7, #0]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4313      	orrs	r3, r2
 8011fb0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8011fb2:	697b      	ldr	r3, [r7, #20]
 8011fb4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8011fb8:	683b      	ldr	r3, [r7, #0]
 8011fba:	691b      	ldr	r3, [r3, #16]
 8011fbc:	021b      	lsls	r3, r3, #8
 8011fbe:	4313      	orrs	r3, r2
 8011fc0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8011fc2:	697b      	ldr	r3, [r7, #20]
 8011fc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	685b      	ldr	r3, [r3, #4]
 8011fcc:	021b      	lsls	r3, r3, #8
 8011fce:	4313      	orrs	r3, r2
 8011fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	4a1d      	ldr	r2, [pc, #116]	@ (801204c <OC3Config+0xd8>)
 8011fd6:	4293      	cmp	r3, r2
 8011fd8:	d003      	beq.n	8011fe2 <OC3Config+0x6e>
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8012050 <OC3Config+0xdc>)
 8011fde:	4293      	cmp	r3, r2
 8011fe0:	d11f      	bne.n	8012022 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8011fe2:	697b      	ldr	r3, [r7, #20]
 8011fe4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	695b      	ldr	r3, [r3, #20]
 8011fec:	029b      	lsls	r3, r3, #10
 8011fee:	4313      	orrs	r3, r2
 8011ff0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	689b      	ldr	r3, [r3, #8]
 8011ffc:	029b      	lsls	r3, r3, #10
 8011ffe:	4313      	orrs	r3, r2
 8012000:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8012002:	693b      	ldr	r3, [r7, #16]
 8012004:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	699b      	ldr	r3, [r3, #24]
 801200c:	011b      	lsls	r3, r3, #4
 801200e:	4313      	orrs	r3, r2
 8012010:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	69db      	ldr	r3, [r3, #28]
 801201c:	015b      	lsls	r3, r3, #5
 801201e:	4313      	orrs	r3, r2
 8012020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	693a      	ldr	r2, [r7, #16]
 8012026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	68fa      	ldr	r2, [r7, #12]
 801202c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	68db      	ldr	r3, [r3, #12]
 8012032:	4619      	mov	r1, r3
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f7ff fd76 	bl	8011b26 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	697a      	ldr	r2, [r7, #20]
 801203e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8012040:	2300      	movs	r3, #0
}
 8012042:	4618      	mov	r0, r3
 8012044:	3718      	adds	r7, #24
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}
 801204a:	bf00      	nop
 801204c:	40010000 	.word	0x40010000
 8012050:	40010400 	.word	0x40010400

08012054 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b086      	sub	sp, #24
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
 801205c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6a1b      	ldr	r3, [r3, #32]
 8012062:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6a1b      	ldr	r3, [r3, #32]
 801206e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	69db      	ldr	r3, [r3, #28]
 801207a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	021b      	lsls	r3, r3, #8
 8012090:	4313      	orrs	r3, r2
 8012092:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8012094:	693b      	ldr	r3, [r7, #16]
 8012096:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	691b      	ldr	r3, [r3, #16]
 801209e:	031b      	lsls	r3, r3, #12
 80120a0:	4313      	orrs	r3, r2
 80120a2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	685b      	ldr	r3, [r3, #4]
 80120ae:	031b      	lsls	r3, r3, #12
 80120b0:	4313      	orrs	r3, r2
 80120b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	4a11      	ldr	r2, [pc, #68]	@ (80120fc <OC4Config+0xa8>)
 80120b8:	4293      	cmp	r3, r2
 80120ba:	d003      	beq.n	80120c4 <OC4Config+0x70>
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	4a10      	ldr	r2, [pc, #64]	@ (8012100 <OC4Config+0xac>)
 80120c0:	4293      	cmp	r3, r2
 80120c2:	d107      	bne.n	80120d4 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80120ca:	683b      	ldr	r3, [r7, #0]
 80120cc:	699b      	ldr	r3, [r3, #24]
 80120ce:	019b      	lsls	r3, r3, #6
 80120d0:	4313      	orrs	r3, r2
 80120d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	697a      	ldr	r2, [r7, #20]
 80120d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	68fa      	ldr	r2, [r7, #12]
 80120de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	68db      	ldr	r3, [r3, #12]
 80120e4:	4619      	mov	r1, r3
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f7ff fd2b 	bl	8011b42 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	693a      	ldr	r2, [r7, #16]
 80120f0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80120f2:	2300      	movs	r3, #0
}
 80120f4:	4618      	mov	r0, r3
 80120f6:	3718      	adds	r7, #24
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}
 80120fc:	40010000 	.word	0x40010000
 8012100:	40010400 	.word	0x40010400

08012104 <LL_USART_IsEnabled>:
{
 8012104:	b480      	push	{r7}
 8012106:	b083      	sub	sp, #12
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	68db      	ldr	r3, [r3, #12]
 8012110:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012114:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012118:	bf0c      	ite	eq
 801211a:	2301      	moveq	r3, #1
 801211c:	2300      	movne	r3, #0
 801211e:	b2db      	uxtb	r3, r3
}
 8012120:	4618      	mov	r0, r3
 8012122:	370c      	adds	r7, #12
 8012124:	46bd      	mov	sp, r7
 8012126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212a:	4770      	bx	lr

0801212c <LL_USART_SetStopBitsLength>:
{
 801212c:	b480      	push	{r7}
 801212e:	b083      	sub	sp, #12
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
 8012134:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	691b      	ldr	r3, [r3, #16]
 801213a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	431a      	orrs	r2, r3
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	611a      	str	r2, [r3, #16]
}
 8012146:	bf00      	nop
 8012148:	370c      	adds	r7, #12
 801214a:	46bd      	mov	sp, r7
 801214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012150:	4770      	bx	lr

08012152 <LL_USART_SetHWFlowCtrl>:
{
 8012152:	b480      	push	{r7}
 8012154:	b083      	sub	sp, #12
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
 801215a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	695b      	ldr	r3, [r3, #20]
 8012160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	431a      	orrs	r2, r3
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	615a      	str	r2, [r3, #20]
}
 801216c:	bf00      	nop
 801216e:	370c      	adds	r7, #12
 8012170:	46bd      	mov	sp, r7
 8012172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012176:	4770      	bx	lr

08012178 <LL_USART_SetBaudRate>:
{
 8012178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801217c:	b0c0      	sub	sp, #256	@ 0x100
 801217e:	af00      	add	r7, sp, #0
 8012180:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8012184:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8012188:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 801218c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8012190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012194:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012198:	f040 810c 	bne.w	80123b4 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 801219c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80121a0:	2200      	movs	r2, #0
 80121a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80121a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80121aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80121ae:	4622      	mov	r2, r4
 80121b0:	462b      	mov	r3, r5
 80121b2:	1891      	adds	r1, r2, r2
 80121b4:	6639      	str	r1, [r7, #96]	@ 0x60
 80121b6:	415b      	adcs	r3, r3
 80121b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80121ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80121be:	4621      	mov	r1, r4
 80121c0:	eb12 0801 	adds.w	r8, r2, r1
 80121c4:	4629      	mov	r1, r5
 80121c6:	eb43 0901 	adc.w	r9, r3, r1
 80121ca:	f04f 0200 	mov.w	r2, #0
 80121ce:	f04f 0300 	mov.w	r3, #0
 80121d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80121d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80121da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80121de:	4690      	mov	r8, r2
 80121e0:	4699      	mov	r9, r3
 80121e2:	4623      	mov	r3, r4
 80121e4:	eb18 0303 	adds.w	r3, r8, r3
 80121e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80121ec:	462b      	mov	r3, r5
 80121ee:	eb49 0303 	adc.w	r3, r9, r3
 80121f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80121f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80121fa:	2200      	movs	r2, #0
 80121fc:	469a      	mov	sl, r3
 80121fe:	4693      	mov	fp, r2
 8012200:	eb1a 030a 	adds.w	r3, sl, sl
 8012204:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012206:	eb4b 030b 	adc.w	r3, fp, fp
 801220a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801220c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8012210:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8012214:	f7f6 f894 	bl	8008340 <__aeabi_uldivmod>
 8012218:	4602      	mov	r2, r0
 801221a:	460b      	mov	r3, r1
 801221c:	4b64      	ldr	r3, [pc, #400]	@ (80123b0 <LL_USART_SetBaudRate+0x238>)
 801221e:	fba3 2302 	umull	r2, r3, r3, r2
 8012222:	095b      	lsrs	r3, r3, #5
 8012224:	b29b      	uxth	r3, r3
 8012226:	011b      	lsls	r3, r3, #4
 8012228:	b29c      	uxth	r4, r3
 801222a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801222e:	2200      	movs	r2, #0
 8012230:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012234:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8012238:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 801223c:	4642      	mov	r2, r8
 801223e:	464b      	mov	r3, r9
 8012240:	1891      	adds	r1, r2, r2
 8012242:	6539      	str	r1, [r7, #80]	@ 0x50
 8012244:	415b      	adcs	r3, r3
 8012246:	657b      	str	r3, [r7, #84]	@ 0x54
 8012248:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 801224c:	4641      	mov	r1, r8
 801224e:	1851      	adds	r1, r2, r1
 8012250:	64b9      	str	r1, [r7, #72]	@ 0x48
 8012252:	4649      	mov	r1, r9
 8012254:	414b      	adcs	r3, r1
 8012256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012258:	f04f 0200 	mov.w	r2, #0
 801225c:	f04f 0300 	mov.w	r3, #0
 8012260:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8012264:	4659      	mov	r1, fp
 8012266:	00cb      	lsls	r3, r1, #3
 8012268:	4651      	mov	r1, sl
 801226a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801226e:	4651      	mov	r1, sl
 8012270:	00ca      	lsls	r2, r1, #3
 8012272:	4610      	mov	r0, r2
 8012274:	4619      	mov	r1, r3
 8012276:	4603      	mov	r3, r0
 8012278:	4642      	mov	r2, r8
 801227a:	189b      	adds	r3, r3, r2
 801227c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012280:	464b      	mov	r3, r9
 8012282:	460a      	mov	r2, r1
 8012284:	eb42 0303 	adc.w	r3, r2, r3
 8012288:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801228c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012290:	2200      	movs	r2, #0
 8012292:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012296:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 801229a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801229e:	460b      	mov	r3, r1
 80122a0:	18db      	adds	r3, r3, r3
 80122a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80122a4:	4613      	mov	r3, r2
 80122a6:	eb42 0303 	adc.w	r3, r2, r3
 80122aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80122ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80122b0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80122b4:	f7f6 f844 	bl	8008340 <__aeabi_uldivmod>
 80122b8:	4602      	mov	r2, r0
 80122ba:	460b      	mov	r3, r1
 80122bc:	4611      	mov	r1, r2
 80122be:	4b3c      	ldr	r3, [pc, #240]	@ (80123b0 <LL_USART_SetBaudRate+0x238>)
 80122c0:	fba3 2301 	umull	r2, r3, r3, r1
 80122c4:	095b      	lsrs	r3, r3, #5
 80122c6:	2264      	movs	r2, #100	@ 0x64
 80122c8:	fb02 f303 	mul.w	r3, r2, r3
 80122cc:	1acb      	subs	r3, r1, r3
 80122ce:	00db      	lsls	r3, r3, #3
 80122d0:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80122d4:	4b36      	ldr	r3, [pc, #216]	@ (80123b0 <LL_USART_SetBaudRate+0x238>)
 80122d6:	fba3 2302 	umull	r2, r3, r3, r2
 80122da:	095b      	lsrs	r3, r3, #5
 80122dc:	b29b      	uxth	r3, r3
 80122de:	005b      	lsls	r3, r3, #1
 80122e0:	b29b      	uxth	r3, r3
 80122e2:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80122e6:	b29b      	uxth	r3, r3
 80122e8:	4423      	add	r3, r4
 80122ea:	b29c      	uxth	r4, r3
 80122ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80122f0:	2200      	movs	r2, #0
 80122f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80122f6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80122fa:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80122fe:	4642      	mov	r2, r8
 8012300:	464b      	mov	r3, r9
 8012302:	1891      	adds	r1, r2, r2
 8012304:	63b9      	str	r1, [r7, #56]	@ 0x38
 8012306:	415b      	adcs	r3, r3
 8012308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801230a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801230e:	4641      	mov	r1, r8
 8012310:	1851      	adds	r1, r2, r1
 8012312:	6339      	str	r1, [r7, #48]	@ 0x30
 8012314:	4649      	mov	r1, r9
 8012316:	414b      	adcs	r3, r1
 8012318:	637b      	str	r3, [r7, #52]	@ 0x34
 801231a:	f04f 0200 	mov.w	r2, #0
 801231e:	f04f 0300 	mov.w	r3, #0
 8012322:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8012326:	4659      	mov	r1, fp
 8012328:	00cb      	lsls	r3, r1, #3
 801232a:	4651      	mov	r1, sl
 801232c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012330:	4651      	mov	r1, sl
 8012332:	00ca      	lsls	r2, r1, #3
 8012334:	4610      	mov	r0, r2
 8012336:	4619      	mov	r1, r3
 8012338:	4603      	mov	r3, r0
 801233a:	4642      	mov	r2, r8
 801233c:	189b      	adds	r3, r3, r2
 801233e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012342:	464b      	mov	r3, r9
 8012344:	460a      	mov	r2, r1
 8012346:	eb42 0303 	adc.w	r3, r2, r3
 801234a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801234e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012352:	2200      	movs	r2, #0
 8012354:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012358:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 801235c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8012360:	460b      	mov	r3, r1
 8012362:	18db      	adds	r3, r3, r3
 8012364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012366:	4613      	mov	r3, r2
 8012368:	eb42 0303 	adc.w	r3, r2, r3
 801236c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801236e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8012372:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8012376:	f7f5 ffe3 	bl	8008340 <__aeabi_uldivmod>
 801237a:	4602      	mov	r2, r0
 801237c:	460b      	mov	r3, r1
 801237e:	4b0c      	ldr	r3, [pc, #48]	@ (80123b0 <LL_USART_SetBaudRate+0x238>)
 8012380:	fba3 1302 	umull	r1, r3, r3, r2
 8012384:	095b      	lsrs	r3, r3, #5
 8012386:	2164      	movs	r1, #100	@ 0x64
 8012388:	fb01 f303 	mul.w	r3, r1, r3
 801238c:	1ad3      	subs	r3, r2, r3
 801238e:	00db      	lsls	r3, r3, #3
 8012390:	3332      	adds	r3, #50	@ 0x32
 8012392:	4a07      	ldr	r2, [pc, #28]	@ (80123b0 <LL_USART_SetBaudRate+0x238>)
 8012394:	fba2 2303 	umull	r2, r3, r2, r3
 8012398:	095b      	lsrs	r3, r3, #5
 801239a:	b29b      	uxth	r3, r3
 801239c:	f003 0307 	and.w	r3, r3, #7
 80123a0:	b29b      	uxth	r3, r3
 80123a2:	4423      	add	r3, r4
 80123a4:	b29b      	uxth	r3, r3
 80123a6:	461a      	mov	r2, r3
 80123a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80123ac:	609a      	str	r2, [r3, #8]
}
 80123ae:	e108      	b.n	80125c2 <LL_USART_SetBaudRate+0x44a>
 80123b0:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80123b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80123b8:	2200      	movs	r2, #0
 80123ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80123be:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80123c2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80123c6:	4642      	mov	r2, r8
 80123c8:	464b      	mov	r3, r9
 80123ca:	1891      	adds	r1, r2, r2
 80123cc:	6239      	str	r1, [r7, #32]
 80123ce:	415b      	adcs	r3, r3
 80123d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80123d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80123d6:	4641      	mov	r1, r8
 80123d8:	1854      	adds	r4, r2, r1
 80123da:	4649      	mov	r1, r9
 80123dc:	eb43 0501 	adc.w	r5, r3, r1
 80123e0:	f04f 0200 	mov.w	r2, #0
 80123e4:	f04f 0300 	mov.w	r3, #0
 80123e8:	00eb      	lsls	r3, r5, #3
 80123ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80123ee:	00e2      	lsls	r2, r4, #3
 80123f0:	4614      	mov	r4, r2
 80123f2:	461d      	mov	r5, r3
 80123f4:	4643      	mov	r3, r8
 80123f6:	18e3      	adds	r3, r4, r3
 80123f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80123fc:	464b      	mov	r3, r9
 80123fe:	eb45 0303 	adc.w	r3, r5, r3
 8012402:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012406:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801240a:	2200      	movs	r2, #0
 801240c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012410:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8012414:	f04f 0200 	mov.w	r2, #0
 8012418:	f04f 0300 	mov.w	r3, #0
 801241c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8012420:	4629      	mov	r1, r5
 8012422:	008b      	lsls	r3, r1, #2
 8012424:	4621      	mov	r1, r4
 8012426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801242a:	4621      	mov	r1, r4
 801242c:	008a      	lsls	r2, r1, #2
 801242e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8012432:	f7f5 ff85 	bl	8008340 <__aeabi_uldivmod>
 8012436:	4602      	mov	r2, r0
 8012438:	460b      	mov	r3, r1
 801243a:	4b65      	ldr	r3, [pc, #404]	@ (80125d0 <LL_USART_SetBaudRate+0x458>)
 801243c:	fba3 2302 	umull	r2, r3, r3, r2
 8012440:	095b      	lsrs	r3, r3, #5
 8012442:	b29b      	uxth	r3, r3
 8012444:	011b      	lsls	r3, r3, #4
 8012446:	b29c      	uxth	r4, r3
 8012448:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801244c:	2200      	movs	r2, #0
 801244e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012452:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8012456:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 801245a:	4642      	mov	r2, r8
 801245c:	464b      	mov	r3, r9
 801245e:	1891      	adds	r1, r2, r2
 8012460:	61b9      	str	r1, [r7, #24]
 8012462:	415b      	adcs	r3, r3
 8012464:	61fb      	str	r3, [r7, #28]
 8012466:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801246a:	4641      	mov	r1, r8
 801246c:	1851      	adds	r1, r2, r1
 801246e:	6139      	str	r1, [r7, #16]
 8012470:	4649      	mov	r1, r9
 8012472:	414b      	adcs	r3, r1
 8012474:	617b      	str	r3, [r7, #20]
 8012476:	f04f 0200 	mov.w	r2, #0
 801247a:	f04f 0300 	mov.w	r3, #0
 801247e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012482:	4659      	mov	r1, fp
 8012484:	00cb      	lsls	r3, r1, #3
 8012486:	4651      	mov	r1, sl
 8012488:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801248c:	4651      	mov	r1, sl
 801248e:	00ca      	lsls	r2, r1, #3
 8012490:	4610      	mov	r0, r2
 8012492:	4619      	mov	r1, r3
 8012494:	4603      	mov	r3, r0
 8012496:	4642      	mov	r2, r8
 8012498:	189b      	adds	r3, r3, r2
 801249a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801249e:	464b      	mov	r3, r9
 80124a0:	460a      	mov	r2, r1
 80124a2:	eb42 0303 	adc.w	r3, r2, r3
 80124a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80124aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80124ae:	2200      	movs	r2, #0
 80124b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80124b4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80124b8:	f04f 0200 	mov.w	r2, #0
 80124bc:	f04f 0300 	mov.w	r3, #0
 80124c0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80124c4:	4649      	mov	r1, r9
 80124c6:	008b      	lsls	r3, r1, #2
 80124c8:	4641      	mov	r1, r8
 80124ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80124ce:	4641      	mov	r1, r8
 80124d0:	008a      	lsls	r2, r1, #2
 80124d2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80124d6:	f7f5 ff33 	bl	8008340 <__aeabi_uldivmod>
 80124da:	4602      	mov	r2, r0
 80124dc:	460b      	mov	r3, r1
 80124de:	4611      	mov	r1, r2
 80124e0:	4b3b      	ldr	r3, [pc, #236]	@ (80125d0 <LL_USART_SetBaudRate+0x458>)
 80124e2:	fba3 2301 	umull	r2, r3, r3, r1
 80124e6:	095b      	lsrs	r3, r3, #5
 80124e8:	2264      	movs	r2, #100	@ 0x64
 80124ea:	fb02 f303 	mul.w	r3, r2, r3
 80124ee:	1acb      	subs	r3, r1, r3
 80124f0:	011b      	lsls	r3, r3, #4
 80124f2:	3332      	adds	r3, #50	@ 0x32
 80124f4:	4a36      	ldr	r2, [pc, #216]	@ (80125d0 <LL_USART_SetBaudRate+0x458>)
 80124f6:	fba2 2303 	umull	r2, r3, r2, r3
 80124fa:	095b      	lsrs	r3, r3, #5
 80124fc:	b29b      	uxth	r3, r3
 80124fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012502:	b29b      	uxth	r3, r3
 8012504:	4423      	add	r3, r4
 8012506:	b29c      	uxth	r4, r3
 8012508:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801250c:	2200      	movs	r2, #0
 801250e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012510:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8012512:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8012516:	4642      	mov	r2, r8
 8012518:	464b      	mov	r3, r9
 801251a:	1891      	adds	r1, r2, r2
 801251c:	60b9      	str	r1, [r7, #8]
 801251e:	415b      	adcs	r3, r3
 8012520:	60fb      	str	r3, [r7, #12]
 8012522:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012526:	4641      	mov	r1, r8
 8012528:	1851      	adds	r1, r2, r1
 801252a:	6039      	str	r1, [r7, #0]
 801252c:	4649      	mov	r1, r9
 801252e:	414b      	adcs	r3, r1
 8012530:	607b      	str	r3, [r7, #4]
 8012532:	f04f 0200 	mov.w	r2, #0
 8012536:	f04f 0300 	mov.w	r3, #0
 801253a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801253e:	4659      	mov	r1, fp
 8012540:	00cb      	lsls	r3, r1, #3
 8012542:	4651      	mov	r1, sl
 8012544:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012548:	4651      	mov	r1, sl
 801254a:	00ca      	lsls	r2, r1, #3
 801254c:	4610      	mov	r0, r2
 801254e:	4619      	mov	r1, r3
 8012550:	4603      	mov	r3, r0
 8012552:	4642      	mov	r2, r8
 8012554:	189b      	adds	r3, r3, r2
 8012556:	673b      	str	r3, [r7, #112]	@ 0x70
 8012558:	464b      	mov	r3, r9
 801255a:	460a      	mov	r2, r1
 801255c:	eb42 0303 	adc.w	r3, r2, r3
 8012560:	677b      	str	r3, [r7, #116]	@ 0x74
 8012562:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012566:	2200      	movs	r2, #0
 8012568:	66bb      	str	r3, [r7, #104]	@ 0x68
 801256a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801256c:	f04f 0200 	mov.w	r2, #0
 8012570:	f04f 0300 	mov.w	r3, #0
 8012574:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8012578:	4649      	mov	r1, r9
 801257a:	008b      	lsls	r3, r1, #2
 801257c:	4641      	mov	r1, r8
 801257e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012582:	4641      	mov	r1, r8
 8012584:	008a      	lsls	r2, r1, #2
 8012586:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 801258a:	f7f5 fed9 	bl	8008340 <__aeabi_uldivmod>
 801258e:	4602      	mov	r2, r0
 8012590:	460b      	mov	r3, r1
 8012592:	4b0f      	ldr	r3, [pc, #60]	@ (80125d0 <LL_USART_SetBaudRate+0x458>)
 8012594:	fba3 1302 	umull	r1, r3, r3, r2
 8012598:	095b      	lsrs	r3, r3, #5
 801259a:	2164      	movs	r1, #100	@ 0x64
 801259c:	fb01 f303 	mul.w	r3, r1, r3
 80125a0:	1ad3      	subs	r3, r2, r3
 80125a2:	011b      	lsls	r3, r3, #4
 80125a4:	3332      	adds	r3, #50	@ 0x32
 80125a6:	4a0a      	ldr	r2, [pc, #40]	@ (80125d0 <LL_USART_SetBaudRate+0x458>)
 80125a8:	fba2 2303 	umull	r2, r3, r2, r3
 80125ac:	095b      	lsrs	r3, r3, #5
 80125ae:	b29b      	uxth	r3, r3
 80125b0:	f003 030f 	and.w	r3, r3, #15
 80125b4:	b29b      	uxth	r3, r3
 80125b6:	4423      	add	r3, r4
 80125b8:	b29b      	uxth	r3, r3
 80125ba:	461a      	mov	r2, r3
 80125bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80125c0:	609a      	str	r2, [r3, #8]
}
 80125c2:	bf00      	nop
 80125c4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80125c8:	46bd      	mov	sp, r7
 80125ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80125ce:	bf00      	nop
 80125d0:	51eb851f 	.word	0x51eb851f

080125d4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b088      	sub	sp, #32
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
 80125dc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80125de:	2301      	movs	r3, #1
 80125e0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80125e2:	2300      	movs	r3, #0
 80125e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f7ff fd8c 	bl	8012104 <LL_USART_IsEnabled>
 80125ec:	4603      	mov	r3, r0
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d15e      	bne.n	80126b0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	68db      	ldr	r3, [r3, #12]
 80125f6:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80125fa:	f023 030c 	bic.w	r3, r3, #12
 80125fe:	683a      	ldr	r2, [r7, #0]
 8012600:	6851      	ldr	r1, [r2, #4]
 8012602:	683a      	ldr	r2, [r7, #0]
 8012604:	68d2      	ldr	r2, [r2, #12]
 8012606:	4311      	orrs	r1, r2
 8012608:	683a      	ldr	r2, [r7, #0]
 801260a:	6912      	ldr	r2, [r2, #16]
 801260c:	4311      	orrs	r1, r2
 801260e:	683a      	ldr	r2, [r7, #0]
 8012610:	6992      	ldr	r2, [r2, #24]
 8012612:	430a      	orrs	r2, r1
 8012614:	431a      	orrs	r2, r3
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	689b      	ldr	r3, [r3, #8]
 801261e:	4619      	mov	r1, r3
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f7ff fd83 	bl	801212c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	695b      	ldr	r3, [r3, #20]
 801262a:	4619      	mov	r1, r3
 801262c:	6878      	ldr	r0, [r7, #4]
 801262e:	f7ff fd90 	bl	8012152 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8012632:	f107 0308 	add.w	r3, r7, #8
 8012636:	4618      	mov	r0, r3
 8012638:	f7ff f8f0 	bl	801181c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	4a1f      	ldr	r2, [pc, #124]	@ (80126bc <LL_USART_Init+0xe8>)
 8012640:	4293      	cmp	r3, r2
 8012642:	d102      	bne.n	801264a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8012644:	697b      	ldr	r3, [r7, #20]
 8012646:	61bb      	str	r3, [r7, #24]
 8012648:	e021      	b.n	801268e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	4a1c      	ldr	r2, [pc, #112]	@ (80126c0 <LL_USART_Init+0xec>)
 801264e:	4293      	cmp	r3, r2
 8012650:	d102      	bne.n	8012658 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8012652:	693b      	ldr	r3, [r7, #16]
 8012654:	61bb      	str	r3, [r7, #24]
 8012656:	e01a      	b.n	801268e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	4a1a      	ldr	r2, [pc, #104]	@ (80126c4 <LL_USART_Init+0xf0>)
 801265c:	4293      	cmp	r3, r2
 801265e:	d102      	bne.n	8012666 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8012660:	693b      	ldr	r3, [r7, #16]
 8012662:	61bb      	str	r3, [r7, #24]
 8012664:	e013      	b.n	801268e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	4a17      	ldr	r2, [pc, #92]	@ (80126c8 <LL_USART_Init+0xf4>)
 801266a:	4293      	cmp	r3, r2
 801266c:	d102      	bne.n	8012674 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	61bb      	str	r3, [r7, #24]
 8012672:	e00c      	b.n	801268e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	4a15      	ldr	r2, [pc, #84]	@ (80126cc <LL_USART_Init+0xf8>)
 8012678:	4293      	cmp	r3, r2
 801267a:	d102      	bne.n	8012682 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 801267c:	693b      	ldr	r3, [r7, #16]
 801267e:	61bb      	str	r3, [r7, #24]
 8012680:	e005      	b.n	801268e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	4a12      	ldr	r2, [pc, #72]	@ (80126d0 <LL_USART_Init+0xfc>)
 8012686:	4293      	cmp	r3, r2
 8012688:	d101      	bne.n	801268e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 801268e:	69bb      	ldr	r3, [r7, #24]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d00d      	beq.n	80126b0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d009      	beq.n	80126b0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 801269c:	2300      	movs	r3, #0
 801269e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80126a8:	69b9      	ldr	r1, [r7, #24]
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f7ff fd64 	bl	8012178 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80126b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3720      	adds	r7, #32
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}
 80126ba:	bf00      	nop
 80126bc:	40011000 	.word	0x40011000
 80126c0:	40004400 	.word	0x40004400
 80126c4:	40004800 	.word	0x40004800
 80126c8:	40011400 	.word	0x40011400
 80126cc:	40004c00 	.word	0x40004c00
 80126d0:	40005000 	.word	0x40005000

080126d4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80126d4:	b480      	push	{r7}
 80126d6:	b085      	sub	sp, #20
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80126dc:	4b0f      	ldr	r3, [pc, #60]	@ (801271c <LL_mDelay+0x48>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80126e2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126ea:	d00c      	beq.n	8012706 <LL_mDelay+0x32>
  {
    Delay++;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	3301      	adds	r3, #1
 80126f0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80126f2:	e008      	b.n	8012706 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80126f4:	4b09      	ldr	r3, [pc, #36]	@ (801271c <LL_mDelay+0x48>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d002      	beq.n	8012706 <LL_mDelay+0x32>
    {
      Delay--;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	3b01      	subs	r3, #1
 8012704:	607b      	str	r3, [r7, #4]
  while (Delay)
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d1f3      	bne.n	80126f4 <LL_mDelay+0x20>
    }
  }
}
 801270c:	bf00      	nop
 801270e:	bf00      	nop
 8012710:	3714      	adds	r7, #20
 8012712:	46bd      	mov	sp, r7
 8012714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012718:	4770      	bx	lr
 801271a:	bf00      	nop
 801271c:	e000e010 	.word	0xe000e010

08012720 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8012720:	b480      	push	{r7}
 8012722:	b083      	sub	sp, #12
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8012728:	4a04      	ldr	r2, [pc, #16]	@ (801273c <LL_SetSystemCoreClock+0x1c>)
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	6013      	str	r3, [r2, #0]
}
 801272e:	bf00      	nop
 8012730:	370c      	adds	r7, #12
 8012732:	46bd      	mov	sp, r7
 8012734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012738:	4770      	bx	lr
 801273a:	bf00      	nop
 801273c:	20002330 	.word	0x20002330

08012740 <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 8012744:	4b0d      	ldr	r3, [pc, #52]	@ (801277c <SCH_Initialize+0x3c>)
 8012746:	2200      	movs	r2, #0
 8012748:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 801274a:	4b0d      	ldr	r3, [pc, #52]	@ (8012780 <SCH_Initialize+0x40>)
 801274c:	2200      	movs	r2, #0
 801274e:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 8012750:	4b0c      	ldr	r3, [pc, #48]	@ (8012784 <SCH_Initialize+0x44>)
 8012752:	2200      	movs	r2, #0
 8012754:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 8012756:	22f0      	movs	r2, #240	@ 0xf0
 8012758:	2100      	movs	r1, #0
 801275a:	480b      	ldr	r0, [pc, #44]	@ (8012788 <SCH_Initialize+0x48>)
 801275c:	f000 fa38 	bl	8012bd0 <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 8012760:	22f0      	movs	r2, #240	@ 0xf0
 8012762:	2100      	movs	r1, #0
 8012764:	4809      	ldr	r0, [pc, #36]	@ (801278c <SCH_Initialize+0x4c>)
 8012766:	f000 fa33 	bl	8012bd0 <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 801276a:	2238      	movs	r2, #56	@ 0x38
 801276c:	2100      	movs	r1, #0
 801276e:	4808      	ldr	r0, [pc, #32]	@ (8012790 <SCH_Initialize+0x50>)
 8012770:	f000 fa2e 	bl	8012bd0 <memset>

    // Initialize Scheduler context
  systick_timer_init();
 8012774:	f7f6 fbae 	bl	8008ed4 <systick_timer_init>
}
 8012778:	bf00      	nop
 801277a:	bd80      	pop	{r7, pc}
 801277c:	20003858 	.word	0x20003858
 8012780:	20003760 	.word	0x20003760
 8012784:	20003854 	.word	0x20003854
 8012788:	20003670 	.word	0x20003670
 801278c:	20003764 	.word	0x20003764
 8012790:	2000385c 	.word	0x2000385c

08012794 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 8012794:	b480      	push	{r7}
 8012796:	b083      	sub	sp, #12
 8012798:	af00      	add	r7, sp, #0
 801279a:	4603      	mov	r3, r0
 801279c:	6039      	str	r1, [r7, #0]
 801279e:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 80127a0:	79fb      	ldrb	r3, [r7, #7]
 80127a2:	2b0d      	cmp	r3, #13
 80127a4:	d804      	bhi.n	80127b0 <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 80127a6:	79fb      	ldrb	r3, [r7, #7]
 80127a8:	4904      	ldr	r1, [pc, #16]	@ (80127bc <SCH_TIM_Start+0x28>)
 80127aa:	683a      	ldr	r2, [r7, #0]
 80127ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80127b0:	bf00      	nop
 80127b2:	370c      	adds	r7, #12
 80127b4:	46bd      	mov	sp, r7
 80127b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ba:	4770      	bx	lr
 80127bc:	2000385c 	.word	0x2000385c

080127c0 <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 80127c0:	b480      	push	{r7}
 80127c2:	b083      	sub	sp, #12
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	4603      	mov	r3, r0
 80127c8:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 80127ca:	79fb      	ldrb	r3, [r7, #7]
 80127cc:	4a06      	ldr	r2, [pc, #24]	@ (80127e8 <SCH_TIM_HasCompleted+0x28>)
 80127ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	bf0c      	ite	eq
 80127d6:	2301      	moveq	r3, #1
 80127d8:	2300      	movne	r3, #0
 80127da:	b2db      	uxtb	r3, r3
}
 80127dc:	4618      	mov	r0, r3
 80127de:	370c      	adds	r7, #12
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr
 80127e8:	2000385c 	.word	0x2000385c

080127ec <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 80127ec:	b480      	push	{r7}
 80127ee:	b085      	sub	sp, #20
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 80127f6:	2301      	movs	r3, #1
 80127f8:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d029      	beq.n	8012854 <SCH_TASK_CreateTask+0x68>
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d026      	beq.n	8012854 <SCH_TASK_CreateTask+0x68>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 8012806:	4b17      	ldr	r3, [pc, #92]	@ (8012864 <SCH_TASK_CreateTask+0x78>)
 8012808:	781b      	ldrb	r3, [r3, #0]
 801280a:	2b12      	cmp	r3, #18
 801280c:	d822      	bhi.n	8012854 <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 801280e:	4b15      	ldr	r3, [pc, #84]	@ (8012864 <SCH_TASK_CreateTask+0x78>)
 8012810:	781b      	ldrb	r3, [r3, #0]
 8012812:	461a      	mov	r2, r3
 8012814:	4613      	mov	r3, r2
 8012816:	005b      	lsls	r3, r3, #1
 8012818:	4413      	add	r3, r2
 801281a:	009b      	lsls	r3, r3, #2
 801281c:	4a12      	ldr	r2, [pc, #72]	@ (8012868 <SCH_TASK_CreateTask+0x7c>)
 801281e:	4413      	add	r3, r2
 8012820:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 8012822:	68bb      	ldr	r3, [r7, #8]
 8012824:	683a      	ldr	r2, [r7, #0]
 8012826:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	2200      	movs	r2, #0
 801282c:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = pTaskProperty->taskTick;;
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	68da      	ldr	r2, [r3, #12]
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 8012836:	68bb      	ldr	r3, [r7, #8]
 8012838:	2201      	movs	r2, #1
 801283a:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 801283c:	4b09      	ldr	r3, [pc, #36]	@ (8012864 <SCH_TASK_CreateTask+0x78>)
 801283e:	781a      	ldrb	r2, [r3, #0]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 8012844:	4b07      	ldr	r3, [pc, #28]	@ (8012864 <SCH_TASK_CreateTask+0x78>)
 8012846:	781b      	ldrb	r3, [r3, #0]
 8012848:	3301      	adds	r3, #1
 801284a:	b2da      	uxtb	r2, r3
 801284c:	4b05      	ldr	r3, [pc, #20]	@ (8012864 <SCH_TASK_CreateTask+0x78>)
 801284e:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 8012850:	2300      	movs	r3, #0
 8012852:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8012854:	7bfb      	ldrb	r3, [r7, #15]
}
 8012856:	4618      	mov	r0, r3
 8012858:	3714      	adds	r7, #20
 801285a:	46bd      	mov	sp, r7
 801285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012860:	4770      	bx	lr
 8012862:	bf00      	nop
 8012864:	20003760 	.word	0x20003760
 8012868:	20003670 	.word	0x20003670

0801286c <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 801286c:	b480      	push	{r7}
 801286e:	b085      	sub	sp, #20
 8012870:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 8012872:	4b42      	ldr	r3, [pc, #264]	@ (801297c <SCH_RunSystemTickTimer+0x110>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	3301      	adds	r3, #1
 8012878:	4a40      	ldr	r2, [pc, #256]	@ (801297c <SCH_RunSystemTickTimer+0x110>)
 801287a:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 801287c:	2300      	movs	r3, #0
 801287e:	73fb      	strb	r3, [r7, #15]
 8012880:	e025      	b.n	80128ce <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8012882:	7bfa      	ldrb	r2, [r7, #15]
 8012884:	4613      	mov	r3, r2
 8012886:	005b      	lsls	r3, r3, #1
 8012888:	4413      	add	r3, r2
 801288a:	009b      	lsls	r3, r3, #2
 801288c:	4a3c      	ldr	r2, [pc, #240]	@ (8012980 <SCH_RunSystemTickTimer+0x114>)
 801288e:	4413      	add	r3, r2
 8012890:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	689b      	ldr	r3, [r3, #8]
 8012896:	781b      	ldrb	r3, [r3, #0]
 8012898:	2b01      	cmp	r3, #1
 801289a:	d115      	bne.n	80128c8 <SCH_RunSystemTickTimer+0x5c>
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	781b      	ldrb	r3, [r3, #0]
 80128a0:	2b01      	cmp	r3, #1
 80128a2:	d111      	bne.n	80128c8 <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	685b      	ldr	r3, [r3, #4]
 80128a8:	1c5a      	adds	r2, r3, #1
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	685a      	ldr	r2, [r3, #4]
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	689b      	ldr	r3, [r3, #8]
 80128b6:	685b      	ldr	r3, [r3, #4]
 80128b8:	429a      	cmp	r2, r3
 80128ba:	d305      	bcc.n	80128c8 <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2200      	movs	r2, #0
 80128c0:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	2201      	movs	r2, #1
 80128c6:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80128c8:	7bfb      	ldrb	r3, [r7, #15]
 80128ca:	3301      	adds	r3, #1
 80128cc:	73fb      	strb	r3, [r7, #15]
 80128ce:	4b2d      	ldr	r3, [pc, #180]	@ (8012984 <SCH_RunSystemTickTimer+0x118>)
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	7bfa      	ldrb	r2, [r7, #15]
 80128d4:	429a      	cmp	r2, r3
 80128d6:	d3d4      	bcc.n	8012882 <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80128d8:	2300      	movs	r3, #0
 80128da:	73bb      	strb	r3, [r7, #14]
 80128dc:	e02b      	b.n	8012936 <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 80128de:	7bba      	ldrb	r2, [r7, #14]
 80128e0:	4613      	mov	r3, r2
 80128e2:	005b      	lsls	r3, r3, #1
 80128e4:	4413      	add	r3, r2
 80128e6:	009b      	lsls	r3, r3, #2
 80128e8:	4a27      	ldr	r2, [pc, #156]	@ (8012988 <SCH_RunSystemTickTimer+0x11c>)
 80128ea:	4413      	add	r3, r2
 80128ec:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 80128ee:	68bb      	ldr	r3, [r7, #8]
 80128f0:	781b      	ldrb	r3, [r3, #0]
 80128f2:	2b01      	cmp	r3, #1
 80128f4:	d11c      	bne.n	8012930 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	685b      	ldr	r3, [r3, #4]
 80128fa:	1c5a      	adds	r2, r3, #1
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	685a      	ldr	r2, [r3, #4]
 8012904:	68bb      	ldr	r3, [r7, #8]
 8012906:	689b      	ldr	r3, [r3, #8]
 8012908:	685b      	ldr	r3, [r3, #4]
 801290a:	429a      	cmp	r2, r3
 801290c:	d310      	bcc.n	8012930 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	2201      	movs	r2, #1
 8012912:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	2200      	movs	r2, #0
 8012918:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 801291a:	68bb      	ldr	r3, [r7, #8]
 801291c:	689b      	ldr	r3, [r3, #8]
 801291e:	781b      	ldrb	r3, [r3, #0]
 8012920:	2b02      	cmp	r3, #2
 8012922:	bf0c      	ite	eq
 8012924:	2301      	moveq	r3, #1
 8012926:	2300      	movne	r3, #0
 8012928:	b2db      	uxtb	r3, r3
 801292a:	461a      	mov	r2, r3
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8012930:	7bbb      	ldrb	r3, [r7, #14]
 8012932:	3301      	adds	r3, #1
 8012934:	73bb      	strb	r3, [r7, #14]
 8012936:	4b15      	ldr	r3, [pc, #84]	@ (801298c <SCH_RunSystemTickTimer+0x120>)
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	7bba      	ldrb	r2, [r7, #14]
 801293c:	429a      	cmp	r2, r3
 801293e:	d3ce      	bcc.n	80128de <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8012940:	2300      	movs	r3, #0
 8012942:	73bb      	strb	r3, [r7, #14]
 8012944:	e010      	b.n	8012968 <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 8012946:	7bbb      	ldrb	r3, [r7, #14]
 8012948:	4a11      	ldr	r2, [pc, #68]	@ (8012990 <SCH_RunSystemTickTimer+0x124>)
 801294a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d007      	beq.n	8012962 <SCH_RunSystemTickTimer+0xf6>
 8012952:	7bbb      	ldrb	r3, [r7, #14]
 8012954:	4a0e      	ldr	r2, [pc, #56]	@ (8012990 <SCH_RunSystemTickTimer+0x124>)
 8012956:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801295a:	3a01      	subs	r2, #1
 801295c:	490c      	ldr	r1, [pc, #48]	@ (8012990 <SCH_RunSystemTickTimer+0x124>)
 801295e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8012962:	7bbb      	ldrb	r3, [r7, #14]
 8012964:	3301      	adds	r3, #1
 8012966:	73bb      	strb	r3, [r7, #14]
 8012968:	7bbb      	ldrb	r3, [r7, #14]
 801296a:	2b0d      	cmp	r3, #13
 801296c:	d9eb      	bls.n	8012946 <SCH_RunSystemTickTimer+0xda>
}
 801296e:	bf00      	nop
 8012970:	bf00      	nop
 8012972:	3714      	adds	r7, #20
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr
 801297c:	20003858 	.word	0x20003858
 8012980:	20003670 	.word	0x20003670
 8012984:	20003760 	.word	0x20003760
 8012988:	20003764 	.word	0x20003764
 801298c:	20003854 	.word	0x20003854
 8012990:	2000385c 	.word	0x2000385c

08012994 <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 8012998:	f7f6 fa8c 	bl	8008eb4 <systick_timer_start>
}
 801299c:	bf00      	nop
 801299e:	bd80      	pop	{r7, pc}

080129a0 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b084      	sub	sp, #16
 80129a4:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80129a6:	2300      	movs	r3, #0
 80129a8:	73fb      	strb	r3, [r7, #15]
 80129aa:	e01e      	b.n	80129ea <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 80129ac:	7bfa      	ldrb	r2, [r7, #15]
 80129ae:	4613      	mov	r3, r2
 80129b0:	005b      	lsls	r3, r3, #1
 80129b2:	4413      	add	r3, r2
 80129b4:	009b      	lsls	r3, r3, #2
 80129b6:	4a23      	ldr	r2, [pc, #140]	@ (8012a44 <SCH_HandleScheduledTask+0xa4>)
 80129b8:	4413      	add	r3, r2
 80129ba:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	885b      	ldrh	r3, [r3, #2]
 80129c0:	2b01      	cmp	r3, #1
 80129c2:	d10f      	bne.n	80129e4 <SCH_HandleScheduledTask+0x44>
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	781b      	ldrb	r3, [r3, #0]
 80129c8:	2b01      	cmp	r3, #1
 80129ca:	d10b      	bne.n	80129e4 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2200      	movs	r2, #0
 80129d0:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	689b      	ldr	r3, [r3, #8]
 80129d6:	689b      	ldr	r3, [r3, #8]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d003      	beq.n	80129e4 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	689b      	ldr	r3, [r3, #8]
 80129e0:	689b      	ldr	r3, [r3, #8]
 80129e2:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80129e4:	7bfb      	ldrb	r3, [r7, #15]
 80129e6:	3301      	adds	r3, #1
 80129e8:	73fb      	strb	r3, [r7, #15]
 80129ea:	4b17      	ldr	r3, [pc, #92]	@ (8012a48 <SCH_HandleScheduledTask+0xa8>)
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	7bfa      	ldrb	r2, [r7, #15]
 80129f0:	429a      	cmp	r2, r3
 80129f2:	d3db      	bcc.n	80129ac <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80129f4:	2300      	movs	r3, #0
 80129f6:	73bb      	strb	r3, [r7, #14]
 80129f8:	e01a      	b.n	8012a30 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 80129fa:	7bba      	ldrb	r2, [r7, #14]
 80129fc:	4613      	mov	r3, r2
 80129fe:	005b      	lsls	r3, r3, #1
 8012a00:	4413      	add	r3, r2
 8012a02:	009b      	lsls	r3, r3, #2
 8012a04:	4a11      	ldr	r2, [pc, #68]	@ (8012a4c <SCH_HandleScheduledTask+0xac>)
 8012a06:	4413      	add	r3, r2
 8012a08:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	885b      	ldrh	r3, [r3, #2]
 8012a0e:	2b01      	cmp	r3, #1
 8012a10:	d10b      	bne.n	8012a2a <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 8012a12:	68bb      	ldr	r3, [r7, #8]
 8012a14:	2200      	movs	r2, #0
 8012a16:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	689b      	ldr	r3, [r3, #8]
 8012a1c:	689b      	ldr	r3, [r3, #8]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d003      	beq.n	8012a2a <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	689b      	ldr	r3, [r3, #8]
 8012a26:	689b      	ldr	r3, [r3, #8]
 8012a28:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8012a2a:	7bbb      	ldrb	r3, [r7, #14]
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	73bb      	strb	r3, [r7, #14]
 8012a30:	4b07      	ldr	r3, [pc, #28]	@ (8012a50 <SCH_HandleScheduledTask+0xb0>)
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	7bba      	ldrb	r2, [r7, #14]
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d3df      	bcc.n	80129fa <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 8012a3a:	bf00      	nop
 8012a3c:	bf00      	nop
 8012a3e:	3710      	adds	r7, #16
 8012a40:	46bd      	mov	sp, r7
 8012a42:	bd80      	pop	{r7, pc}
 8012a44:	20003670 	.word	0x20003670
 8012a48:	20003760 	.word	0x20003760
 8012a4c:	20003764 	.word	0x20003764
 8012a50:	20003854 	.word	0x20003854

08012a54 <atoi>:
 8012a54:	220a      	movs	r2, #10
 8012a56:	2100      	movs	r1, #0
 8012a58:	f000 b87a 	b.w	8012b50 <strtol>

08012a5c <_strtol_l.isra.0>:
 8012a5c:	2b24      	cmp	r3, #36	@ 0x24
 8012a5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a62:	4686      	mov	lr, r0
 8012a64:	4690      	mov	r8, r2
 8012a66:	d801      	bhi.n	8012a6c <_strtol_l.isra.0+0x10>
 8012a68:	2b01      	cmp	r3, #1
 8012a6a:	d106      	bne.n	8012a7a <_strtol_l.isra.0+0x1e>
 8012a6c:	f000 f8b8 	bl	8012be0 <__errno>
 8012a70:	2316      	movs	r3, #22
 8012a72:	6003      	str	r3, [r0, #0]
 8012a74:	2000      	movs	r0, #0
 8012a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a7a:	4834      	ldr	r0, [pc, #208]	@ (8012b4c <_strtol_l.isra.0+0xf0>)
 8012a7c:	460d      	mov	r5, r1
 8012a7e:	462a      	mov	r2, r5
 8012a80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012a84:	5d06      	ldrb	r6, [r0, r4]
 8012a86:	f016 0608 	ands.w	r6, r6, #8
 8012a8a:	d1f8      	bne.n	8012a7e <_strtol_l.isra.0+0x22>
 8012a8c:	2c2d      	cmp	r4, #45	@ 0x2d
 8012a8e:	d110      	bne.n	8012ab2 <_strtol_l.isra.0+0x56>
 8012a90:	782c      	ldrb	r4, [r5, #0]
 8012a92:	2601      	movs	r6, #1
 8012a94:	1c95      	adds	r5, r2, #2
 8012a96:	f033 0210 	bics.w	r2, r3, #16
 8012a9a:	d115      	bne.n	8012ac8 <_strtol_l.isra.0+0x6c>
 8012a9c:	2c30      	cmp	r4, #48	@ 0x30
 8012a9e:	d10d      	bne.n	8012abc <_strtol_l.isra.0+0x60>
 8012aa0:	782a      	ldrb	r2, [r5, #0]
 8012aa2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012aa6:	2a58      	cmp	r2, #88	@ 0x58
 8012aa8:	d108      	bne.n	8012abc <_strtol_l.isra.0+0x60>
 8012aaa:	786c      	ldrb	r4, [r5, #1]
 8012aac:	3502      	adds	r5, #2
 8012aae:	2310      	movs	r3, #16
 8012ab0:	e00a      	b.n	8012ac8 <_strtol_l.isra.0+0x6c>
 8012ab2:	2c2b      	cmp	r4, #43	@ 0x2b
 8012ab4:	bf04      	itt	eq
 8012ab6:	782c      	ldrbeq	r4, [r5, #0]
 8012ab8:	1c95      	addeq	r5, r2, #2
 8012aba:	e7ec      	b.n	8012a96 <_strtol_l.isra.0+0x3a>
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d1f6      	bne.n	8012aae <_strtol_l.isra.0+0x52>
 8012ac0:	2c30      	cmp	r4, #48	@ 0x30
 8012ac2:	bf14      	ite	ne
 8012ac4:	230a      	movne	r3, #10
 8012ac6:	2308      	moveq	r3, #8
 8012ac8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012acc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	fbbc f9f3 	udiv	r9, ip, r3
 8012ad6:	4610      	mov	r0, r2
 8012ad8:	fb03 ca19 	mls	sl, r3, r9, ip
 8012adc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012ae0:	2f09      	cmp	r7, #9
 8012ae2:	d80f      	bhi.n	8012b04 <_strtol_l.isra.0+0xa8>
 8012ae4:	463c      	mov	r4, r7
 8012ae6:	42a3      	cmp	r3, r4
 8012ae8:	dd1b      	ble.n	8012b22 <_strtol_l.isra.0+0xc6>
 8012aea:	1c57      	adds	r7, r2, #1
 8012aec:	d007      	beq.n	8012afe <_strtol_l.isra.0+0xa2>
 8012aee:	4581      	cmp	r9, r0
 8012af0:	d314      	bcc.n	8012b1c <_strtol_l.isra.0+0xc0>
 8012af2:	d101      	bne.n	8012af8 <_strtol_l.isra.0+0x9c>
 8012af4:	45a2      	cmp	sl, r4
 8012af6:	db11      	blt.n	8012b1c <_strtol_l.isra.0+0xc0>
 8012af8:	fb00 4003 	mla	r0, r0, r3, r4
 8012afc:	2201      	movs	r2, #1
 8012afe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b02:	e7eb      	b.n	8012adc <_strtol_l.isra.0+0x80>
 8012b04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012b08:	2f19      	cmp	r7, #25
 8012b0a:	d801      	bhi.n	8012b10 <_strtol_l.isra.0+0xb4>
 8012b0c:	3c37      	subs	r4, #55	@ 0x37
 8012b0e:	e7ea      	b.n	8012ae6 <_strtol_l.isra.0+0x8a>
 8012b10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012b14:	2f19      	cmp	r7, #25
 8012b16:	d804      	bhi.n	8012b22 <_strtol_l.isra.0+0xc6>
 8012b18:	3c57      	subs	r4, #87	@ 0x57
 8012b1a:	e7e4      	b.n	8012ae6 <_strtol_l.isra.0+0x8a>
 8012b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8012b20:	e7ed      	b.n	8012afe <_strtol_l.isra.0+0xa2>
 8012b22:	1c53      	adds	r3, r2, #1
 8012b24:	d108      	bne.n	8012b38 <_strtol_l.isra.0+0xdc>
 8012b26:	2322      	movs	r3, #34	@ 0x22
 8012b28:	f8ce 3000 	str.w	r3, [lr]
 8012b2c:	4660      	mov	r0, ip
 8012b2e:	f1b8 0f00 	cmp.w	r8, #0
 8012b32:	d0a0      	beq.n	8012a76 <_strtol_l.isra.0+0x1a>
 8012b34:	1e69      	subs	r1, r5, #1
 8012b36:	e006      	b.n	8012b46 <_strtol_l.isra.0+0xea>
 8012b38:	b106      	cbz	r6, 8012b3c <_strtol_l.isra.0+0xe0>
 8012b3a:	4240      	negs	r0, r0
 8012b3c:	f1b8 0f00 	cmp.w	r8, #0
 8012b40:	d099      	beq.n	8012a76 <_strtol_l.isra.0+0x1a>
 8012b42:	2a00      	cmp	r2, #0
 8012b44:	d1f6      	bne.n	8012b34 <_strtol_l.isra.0+0xd8>
 8012b46:	f8c8 1000 	str.w	r1, [r8]
 8012b4a:	e794      	b.n	8012a76 <_strtol_l.isra.0+0x1a>
 8012b4c:	080151c5 	.word	0x080151c5

08012b50 <strtol>:
 8012b50:	4613      	mov	r3, r2
 8012b52:	460a      	mov	r2, r1
 8012b54:	4601      	mov	r1, r0
 8012b56:	4802      	ldr	r0, [pc, #8]	@ (8012b60 <strtol+0x10>)
 8012b58:	6800      	ldr	r0, [r0, #0]
 8012b5a:	f7ff bf7f 	b.w	8012a5c <_strtol_l.isra.0>
 8012b5e:	bf00      	nop
 8012b60:	200023bc 	.word	0x200023bc

08012b64 <sniprintf>:
 8012b64:	b40c      	push	{r2, r3}
 8012b66:	b530      	push	{r4, r5, lr}
 8012b68:	4b18      	ldr	r3, [pc, #96]	@ (8012bcc <sniprintf+0x68>)
 8012b6a:	1e0c      	subs	r4, r1, #0
 8012b6c:	681d      	ldr	r5, [r3, #0]
 8012b6e:	b09d      	sub	sp, #116	@ 0x74
 8012b70:	da08      	bge.n	8012b84 <sniprintf+0x20>
 8012b72:	238b      	movs	r3, #139	@ 0x8b
 8012b74:	602b      	str	r3, [r5, #0]
 8012b76:	f04f 30ff 	mov.w	r0, #4294967295
 8012b7a:	b01d      	add	sp, #116	@ 0x74
 8012b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b80:	b002      	add	sp, #8
 8012b82:	4770      	bx	lr
 8012b84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012b88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012b8c:	f04f 0300 	mov.w	r3, #0
 8012b90:	931b      	str	r3, [sp, #108]	@ 0x6c
 8012b92:	bf14      	ite	ne
 8012b94:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012b98:	4623      	moveq	r3, r4
 8012b9a:	9304      	str	r3, [sp, #16]
 8012b9c:	9307      	str	r3, [sp, #28]
 8012b9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012ba2:	9002      	str	r0, [sp, #8]
 8012ba4:	9006      	str	r0, [sp, #24]
 8012ba6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012baa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012bac:	ab21      	add	r3, sp, #132	@ 0x84
 8012bae:	a902      	add	r1, sp, #8
 8012bb0:	4628      	mov	r0, r5
 8012bb2:	9301      	str	r3, [sp, #4]
 8012bb4:	f000 f99c 	bl	8012ef0 <_svfiprintf_r>
 8012bb8:	1c43      	adds	r3, r0, #1
 8012bba:	bfbc      	itt	lt
 8012bbc:	238b      	movlt	r3, #139	@ 0x8b
 8012bbe:	602b      	strlt	r3, [r5, #0]
 8012bc0:	2c00      	cmp	r4, #0
 8012bc2:	d0da      	beq.n	8012b7a <sniprintf+0x16>
 8012bc4:	9b02      	ldr	r3, [sp, #8]
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	701a      	strb	r2, [r3, #0]
 8012bca:	e7d6      	b.n	8012b7a <sniprintf+0x16>
 8012bcc:	200023bc 	.word	0x200023bc

08012bd0 <memset>:
 8012bd0:	4402      	add	r2, r0
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	4293      	cmp	r3, r2
 8012bd6:	d100      	bne.n	8012bda <memset+0xa>
 8012bd8:	4770      	bx	lr
 8012bda:	f803 1b01 	strb.w	r1, [r3], #1
 8012bde:	e7f9      	b.n	8012bd4 <memset+0x4>

08012be0 <__errno>:
 8012be0:	4b01      	ldr	r3, [pc, #4]	@ (8012be8 <__errno+0x8>)
 8012be2:	6818      	ldr	r0, [r3, #0]
 8012be4:	4770      	bx	lr
 8012be6:	bf00      	nop
 8012be8:	200023bc 	.word	0x200023bc

08012bec <__libc_init_array>:
 8012bec:	b570      	push	{r4, r5, r6, lr}
 8012bee:	4d0d      	ldr	r5, [pc, #52]	@ (8012c24 <__libc_init_array+0x38>)
 8012bf0:	4c0d      	ldr	r4, [pc, #52]	@ (8012c28 <__libc_init_array+0x3c>)
 8012bf2:	1b64      	subs	r4, r4, r5
 8012bf4:	10a4      	asrs	r4, r4, #2
 8012bf6:	2600      	movs	r6, #0
 8012bf8:	42a6      	cmp	r6, r4
 8012bfa:	d109      	bne.n	8012c10 <__libc_init_array+0x24>
 8012bfc:	4d0b      	ldr	r5, [pc, #44]	@ (8012c2c <__libc_init_array+0x40>)
 8012bfe:	4c0c      	ldr	r4, [pc, #48]	@ (8012c30 <__libc_init_array+0x44>)
 8012c00:	f000 fc6c 	bl	80134dc <_init>
 8012c04:	1b64      	subs	r4, r4, r5
 8012c06:	10a4      	asrs	r4, r4, #2
 8012c08:	2600      	movs	r6, #0
 8012c0a:	42a6      	cmp	r6, r4
 8012c0c:	d105      	bne.n	8012c1a <__libc_init_array+0x2e>
 8012c0e:	bd70      	pop	{r4, r5, r6, pc}
 8012c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c14:	4798      	blx	r3
 8012c16:	3601      	adds	r6, #1
 8012c18:	e7ee      	b.n	8012bf8 <__libc_init_array+0xc>
 8012c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c1e:	4798      	blx	r3
 8012c20:	3601      	adds	r6, #1
 8012c22:	e7f2      	b.n	8012c0a <__libc_init_array+0x1e>
 8012c24:	08015300 	.word	0x08015300
 8012c28:	08015300 	.word	0x08015300
 8012c2c:	08015300 	.word	0x08015300
 8012c30:	08015304 	.word	0x08015304

08012c34 <__retarget_lock_acquire_recursive>:
 8012c34:	4770      	bx	lr

08012c36 <__retarget_lock_release_recursive>:
 8012c36:	4770      	bx	lr

08012c38 <strcpy>:
 8012c38:	4603      	mov	r3, r0
 8012c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c3e:	f803 2b01 	strb.w	r2, [r3], #1
 8012c42:	2a00      	cmp	r2, #0
 8012c44:	d1f9      	bne.n	8012c3a <strcpy+0x2>
 8012c46:	4770      	bx	lr

08012c48 <_free_r>:
 8012c48:	b538      	push	{r3, r4, r5, lr}
 8012c4a:	4605      	mov	r5, r0
 8012c4c:	2900      	cmp	r1, #0
 8012c4e:	d041      	beq.n	8012cd4 <_free_r+0x8c>
 8012c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c54:	1f0c      	subs	r4, r1, #4
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	bfb8      	it	lt
 8012c5a:	18e4      	addlt	r4, r4, r3
 8012c5c:	f000 f8e0 	bl	8012e20 <__malloc_lock>
 8012c60:	4a1d      	ldr	r2, [pc, #116]	@ (8012cd8 <_free_r+0x90>)
 8012c62:	6813      	ldr	r3, [r2, #0]
 8012c64:	b933      	cbnz	r3, 8012c74 <_free_r+0x2c>
 8012c66:	6063      	str	r3, [r4, #4]
 8012c68:	6014      	str	r4, [r2, #0]
 8012c6a:	4628      	mov	r0, r5
 8012c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c70:	f000 b8dc 	b.w	8012e2c <__malloc_unlock>
 8012c74:	42a3      	cmp	r3, r4
 8012c76:	d908      	bls.n	8012c8a <_free_r+0x42>
 8012c78:	6820      	ldr	r0, [r4, #0]
 8012c7a:	1821      	adds	r1, r4, r0
 8012c7c:	428b      	cmp	r3, r1
 8012c7e:	bf01      	itttt	eq
 8012c80:	6819      	ldreq	r1, [r3, #0]
 8012c82:	685b      	ldreq	r3, [r3, #4]
 8012c84:	1809      	addeq	r1, r1, r0
 8012c86:	6021      	streq	r1, [r4, #0]
 8012c88:	e7ed      	b.n	8012c66 <_free_r+0x1e>
 8012c8a:	461a      	mov	r2, r3
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	b10b      	cbz	r3, 8012c94 <_free_r+0x4c>
 8012c90:	42a3      	cmp	r3, r4
 8012c92:	d9fa      	bls.n	8012c8a <_free_r+0x42>
 8012c94:	6811      	ldr	r1, [r2, #0]
 8012c96:	1850      	adds	r0, r2, r1
 8012c98:	42a0      	cmp	r0, r4
 8012c9a:	d10b      	bne.n	8012cb4 <_free_r+0x6c>
 8012c9c:	6820      	ldr	r0, [r4, #0]
 8012c9e:	4401      	add	r1, r0
 8012ca0:	1850      	adds	r0, r2, r1
 8012ca2:	4283      	cmp	r3, r0
 8012ca4:	6011      	str	r1, [r2, #0]
 8012ca6:	d1e0      	bne.n	8012c6a <_free_r+0x22>
 8012ca8:	6818      	ldr	r0, [r3, #0]
 8012caa:	685b      	ldr	r3, [r3, #4]
 8012cac:	6053      	str	r3, [r2, #4]
 8012cae:	4408      	add	r0, r1
 8012cb0:	6010      	str	r0, [r2, #0]
 8012cb2:	e7da      	b.n	8012c6a <_free_r+0x22>
 8012cb4:	d902      	bls.n	8012cbc <_free_r+0x74>
 8012cb6:	230c      	movs	r3, #12
 8012cb8:	602b      	str	r3, [r5, #0]
 8012cba:	e7d6      	b.n	8012c6a <_free_r+0x22>
 8012cbc:	6820      	ldr	r0, [r4, #0]
 8012cbe:	1821      	adds	r1, r4, r0
 8012cc0:	428b      	cmp	r3, r1
 8012cc2:	bf04      	itt	eq
 8012cc4:	6819      	ldreq	r1, [r3, #0]
 8012cc6:	685b      	ldreq	r3, [r3, #4]
 8012cc8:	6063      	str	r3, [r4, #4]
 8012cca:	bf04      	itt	eq
 8012ccc:	1809      	addeq	r1, r1, r0
 8012cce:	6021      	streq	r1, [r4, #0]
 8012cd0:	6054      	str	r4, [r2, #4]
 8012cd2:	e7ca      	b.n	8012c6a <_free_r+0x22>
 8012cd4:	bd38      	pop	{r3, r4, r5, pc}
 8012cd6:	bf00      	nop
 8012cd8:	200039d8 	.word	0x200039d8

08012cdc <sbrk_aligned>:
 8012cdc:	b570      	push	{r4, r5, r6, lr}
 8012cde:	4e0f      	ldr	r6, [pc, #60]	@ (8012d1c <sbrk_aligned+0x40>)
 8012ce0:	460c      	mov	r4, r1
 8012ce2:	6831      	ldr	r1, [r6, #0]
 8012ce4:	4605      	mov	r5, r0
 8012ce6:	b911      	cbnz	r1, 8012cee <sbrk_aligned+0x12>
 8012ce8:	f000 fba4 	bl	8013434 <_sbrk_r>
 8012cec:	6030      	str	r0, [r6, #0]
 8012cee:	4621      	mov	r1, r4
 8012cf0:	4628      	mov	r0, r5
 8012cf2:	f000 fb9f 	bl	8013434 <_sbrk_r>
 8012cf6:	1c43      	adds	r3, r0, #1
 8012cf8:	d103      	bne.n	8012d02 <sbrk_aligned+0x26>
 8012cfa:	f04f 34ff 	mov.w	r4, #4294967295
 8012cfe:	4620      	mov	r0, r4
 8012d00:	bd70      	pop	{r4, r5, r6, pc}
 8012d02:	1cc4      	adds	r4, r0, #3
 8012d04:	f024 0403 	bic.w	r4, r4, #3
 8012d08:	42a0      	cmp	r0, r4
 8012d0a:	d0f8      	beq.n	8012cfe <sbrk_aligned+0x22>
 8012d0c:	1a21      	subs	r1, r4, r0
 8012d0e:	4628      	mov	r0, r5
 8012d10:	f000 fb90 	bl	8013434 <_sbrk_r>
 8012d14:	3001      	adds	r0, #1
 8012d16:	d1f2      	bne.n	8012cfe <sbrk_aligned+0x22>
 8012d18:	e7ef      	b.n	8012cfa <sbrk_aligned+0x1e>
 8012d1a:	bf00      	nop
 8012d1c:	200039d4 	.word	0x200039d4

08012d20 <_malloc_r>:
 8012d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d24:	1ccd      	adds	r5, r1, #3
 8012d26:	f025 0503 	bic.w	r5, r5, #3
 8012d2a:	3508      	adds	r5, #8
 8012d2c:	2d0c      	cmp	r5, #12
 8012d2e:	bf38      	it	cc
 8012d30:	250c      	movcc	r5, #12
 8012d32:	2d00      	cmp	r5, #0
 8012d34:	4606      	mov	r6, r0
 8012d36:	db01      	blt.n	8012d3c <_malloc_r+0x1c>
 8012d38:	42a9      	cmp	r1, r5
 8012d3a:	d904      	bls.n	8012d46 <_malloc_r+0x26>
 8012d3c:	230c      	movs	r3, #12
 8012d3e:	6033      	str	r3, [r6, #0]
 8012d40:	2000      	movs	r0, #0
 8012d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012e1c <_malloc_r+0xfc>
 8012d4a:	f000 f869 	bl	8012e20 <__malloc_lock>
 8012d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8012d52:	461c      	mov	r4, r3
 8012d54:	bb44      	cbnz	r4, 8012da8 <_malloc_r+0x88>
 8012d56:	4629      	mov	r1, r5
 8012d58:	4630      	mov	r0, r6
 8012d5a:	f7ff ffbf 	bl	8012cdc <sbrk_aligned>
 8012d5e:	1c43      	adds	r3, r0, #1
 8012d60:	4604      	mov	r4, r0
 8012d62:	d158      	bne.n	8012e16 <_malloc_r+0xf6>
 8012d64:	f8d8 4000 	ldr.w	r4, [r8]
 8012d68:	4627      	mov	r7, r4
 8012d6a:	2f00      	cmp	r7, #0
 8012d6c:	d143      	bne.n	8012df6 <_malloc_r+0xd6>
 8012d6e:	2c00      	cmp	r4, #0
 8012d70:	d04b      	beq.n	8012e0a <_malloc_r+0xea>
 8012d72:	6823      	ldr	r3, [r4, #0]
 8012d74:	4639      	mov	r1, r7
 8012d76:	4630      	mov	r0, r6
 8012d78:	eb04 0903 	add.w	r9, r4, r3
 8012d7c:	f000 fb5a 	bl	8013434 <_sbrk_r>
 8012d80:	4581      	cmp	r9, r0
 8012d82:	d142      	bne.n	8012e0a <_malloc_r+0xea>
 8012d84:	6821      	ldr	r1, [r4, #0]
 8012d86:	1a6d      	subs	r5, r5, r1
 8012d88:	4629      	mov	r1, r5
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	f7ff ffa6 	bl	8012cdc <sbrk_aligned>
 8012d90:	3001      	adds	r0, #1
 8012d92:	d03a      	beq.n	8012e0a <_malloc_r+0xea>
 8012d94:	6823      	ldr	r3, [r4, #0]
 8012d96:	442b      	add	r3, r5
 8012d98:	6023      	str	r3, [r4, #0]
 8012d9a:	f8d8 3000 	ldr.w	r3, [r8]
 8012d9e:	685a      	ldr	r2, [r3, #4]
 8012da0:	bb62      	cbnz	r2, 8012dfc <_malloc_r+0xdc>
 8012da2:	f8c8 7000 	str.w	r7, [r8]
 8012da6:	e00f      	b.n	8012dc8 <_malloc_r+0xa8>
 8012da8:	6822      	ldr	r2, [r4, #0]
 8012daa:	1b52      	subs	r2, r2, r5
 8012dac:	d420      	bmi.n	8012df0 <_malloc_r+0xd0>
 8012dae:	2a0b      	cmp	r2, #11
 8012db0:	d917      	bls.n	8012de2 <_malloc_r+0xc2>
 8012db2:	1961      	adds	r1, r4, r5
 8012db4:	42a3      	cmp	r3, r4
 8012db6:	6025      	str	r5, [r4, #0]
 8012db8:	bf18      	it	ne
 8012dba:	6059      	strne	r1, [r3, #4]
 8012dbc:	6863      	ldr	r3, [r4, #4]
 8012dbe:	bf08      	it	eq
 8012dc0:	f8c8 1000 	streq.w	r1, [r8]
 8012dc4:	5162      	str	r2, [r4, r5]
 8012dc6:	604b      	str	r3, [r1, #4]
 8012dc8:	4630      	mov	r0, r6
 8012dca:	f000 f82f 	bl	8012e2c <__malloc_unlock>
 8012dce:	f104 000b 	add.w	r0, r4, #11
 8012dd2:	1d23      	adds	r3, r4, #4
 8012dd4:	f020 0007 	bic.w	r0, r0, #7
 8012dd8:	1ac2      	subs	r2, r0, r3
 8012dda:	bf1c      	itt	ne
 8012ddc:	1a1b      	subne	r3, r3, r0
 8012dde:	50a3      	strne	r3, [r4, r2]
 8012de0:	e7af      	b.n	8012d42 <_malloc_r+0x22>
 8012de2:	6862      	ldr	r2, [r4, #4]
 8012de4:	42a3      	cmp	r3, r4
 8012de6:	bf0c      	ite	eq
 8012de8:	f8c8 2000 	streq.w	r2, [r8]
 8012dec:	605a      	strne	r2, [r3, #4]
 8012dee:	e7eb      	b.n	8012dc8 <_malloc_r+0xa8>
 8012df0:	4623      	mov	r3, r4
 8012df2:	6864      	ldr	r4, [r4, #4]
 8012df4:	e7ae      	b.n	8012d54 <_malloc_r+0x34>
 8012df6:	463c      	mov	r4, r7
 8012df8:	687f      	ldr	r7, [r7, #4]
 8012dfa:	e7b6      	b.n	8012d6a <_malloc_r+0x4a>
 8012dfc:	461a      	mov	r2, r3
 8012dfe:	685b      	ldr	r3, [r3, #4]
 8012e00:	42a3      	cmp	r3, r4
 8012e02:	d1fb      	bne.n	8012dfc <_malloc_r+0xdc>
 8012e04:	2300      	movs	r3, #0
 8012e06:	6053      	str	r3, [r2, #4]
 8012e08:	e7de      	b.n	8012dc8 <_malloc_r+0xa8>
 8012e0a:	230c      	movs	r3, #12
 8012e0c:	6033      	str	r3, [r6, #0]
 8012e0e:	4630      	mov	r0, r6
 8012e10:	f000 f80c 	bl	8012e2c <__malloc_unlock>
 8012e14:	e794      	b.n	8012d40 <_malloc_r+0x20>
 8012e16:	6005      	str	r5, [r0, #0]
 8012e18:	e7d6      	b.n	8012dc8 <_malloc_r+0xa8>
 8012e1a:	bf00      	nop
 8012e1c:	200039d8 	.word	0x200039d8

08012e20 <__malloc_lock>:
 8012e20:	4801      	ldr	r0, [pc, #4]	@ (8012e28 <__malloc_lock+0x8>)
 8012e22:	f7ff bf07 	b.w	8012c34 <__retarget_lock_acquire_recursive>
 8012e26:	bf00      	nop
 8012e28:	200039d0 	.word	0x200039d0

08012e2c <__malloc_unlock>:
 8012e2c:	4801      	ldr	r0, [pc, #4]	@ (8012e34 <__malloc_unlock+0x8>)
 8012e2e:	f7ff bf02 	b.w	8012c36 <__retarget_lock_release_recursive>
 8012e32:	bf00      	nop
 8012e34:	200039d0 	.word	0x200039d0

08012e38 <__ssputs_r>:
 8012e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e3c:	688e      	ldr	r6, [r1, #8]
 8012e3e:	461f      	mov	r7, r3
 8012e40:	42be      	cmp	r6, r7
 8012e42:	680b      	ldr	r3, [r1, #0]
 8012e44:	4682      	mov	sl, r0
 8012e46:	460c      	mov	r4, r1
 8012e48:	4690      	mov	r8, r2
 8012e4a:	d82d      	bhi.n	8012ea8 <__ssputs_r+0x70>
 8012e4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012e50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012e54:	d026      	beq.n	8012ea4 <__ssputs_r+0x6c>
 8012e56:	6965      	ldr	r5, [r4, #20]
 8012e58:	6909      	ldr	r1, [r1, #16]
 8012e5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012e5e:	eba3 0901 	sub.w	r9, r3, r1
 8012e62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012e66:	1c7b      	adds	r3, r7, #1
 8012e68:	444b      	add	r3, r9
 8012e6a:	106d      	asrs	r5, r5, #1
 8012e6c:	429d      	cmp	r5, r3
 8012e6e:	bf38      	it	cc
 8012e70:	461d      	movcc	r5, r3
 8012e72:	0553      	lsls	r3, r2, #21
 8012e74:	d527      	bpl.n	8012ec6 <__ssputs_r+0x8e>
 8012e76:	4629      	mov	r1, r5
 8012e78:	f7ff ff52 	bl	8012d20 <_malloc_r>
 8012e7c:	4606      	mov	r6, r0
 8012e7e:	b360      	cbz	r0, 8012eda <__ssputs_r+0xa2>
 8012e80:	6921      	ldr	r1, [r4, #16]
 8012e82:	464a      	mov	r2, r9
 8012e84:	f000 fae6 	bl	8013454 <memcpy>
 8012e88:	89a3      	ldrh	r3, [r4, #12]
 8012e8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012e92:	81a3      	strh	r3, [r4, #12]
 8012e94:	6126      	str	r6, [r4, #16]
 8012e96:	6165      	str	r5, [r4, #20]
 8012e98:	444e      	add	r6, r9
 8012e9a:	eba5 0509 	sub.w	r5, r5, r9
 8012e9e:	6026      	str	r6, [r4, #0]
 8012ea0:	60a5      	str	r5, [r4, #8]
 8012ea2:	463e      	mov	r6, r7
 8012ea4:	42be      	cmp	r6, r7
 8012ea6:	d900      	bls.n	8012eaa <__ssputs_r+0x72>
 8012ea8:	463e      	mov	r6, r7
 8012eaa:	6820      	ldr	r0, [r4, #0]
 8012eac:	4632      	mov	r2, r6
 8012eae:	4641      	mov	r1, r8
 8012eb0:	f000 faa6 	bl	8013400 <memmove>
 8012eb4:	68a3      	ldr	r3, [r4, #8]
 8012eb6:	1b9b      	subs	r3, r3, r6
 8012eb8:	60a3      	str	r3, [r4, #8]
 8012eba:	6823      	ldr	r3, [r4, #0]
 8012ebc:	4433      	add	r3, r6
 8012ebe:	6023      	str	r3, [r4, #0]
 8012ec0:	2000      	movs	r0, #0
 8012ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ec6:	462a      	mov	r2, r5
 8012ec8:	f000 fad2 	bl	8013470 <_realloc_r>
 8012ecc:	4606      	mov	r6, r0
 8012ece:	2800      	cmp	r0, #0
 8012ed0:	d1e0      	bne.n	8012e94 <__ssputs_r+0x5c>
 8012ed2:	6921      	ldr	r1, [r4, #16]
 8012ed4:	4650      	mov	r0, sl
 8012ed6:	f7ff feb7 	bl	8012c48 <_free_r>
 8012eda:	230c      	movs	r3, #12
 8012edc:	f8ca 3000 	str.w	r3, [sl]
 8012ee0:	89a3      	ldrh	r3, [r4, #12]
 8012ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ee6:	81a3      	strh	r3, [r4, #12]
 8012ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8012eec:	e7e9      	b.n	8012ec2 <__ssputs_r+0x8a>
	...

08012ef0 <_svfiprintf_r>:
 8012ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ef4:	4698      	mov	r8, r3
 8012ef6:	898b      	ldrh	r3, [r1, #12]
 8012ef8:	061b      	lsls	r3, r3, #24
 8012efa:	b09d      	sub	sp, #116	@ 0x74
 8012efc:	4607      	mov	r7, r0
 8012efe:	460d      	mov	r5, r1
 8012f00:	4614      	mov	r4, r2
 8012f02:	d510      	bpl.n	8012f26 <_svfiprintf_r+0x36>
 8012f04:	690b      	ldr	r3, [r1, #16]
 8012f06:	b973      	cbnz	r3, 8012f26 <_svfiprintf_r+0x36>
 8012f08:	2140      	movs	r1, #64	@ 0x40
 8012f0a:	f7ff ff09 	bl	8012d20 <_malloc_r>
 8012f0e:	6028      	str	r0, [r5, #0]
 8012f10:	6128      	str	r0, [r5, #16]
 8012f12:	b930      	cbnz	r0, 8012f22 <_svfiprintf_r+0x32>
 8012f14:	230c      	movs	r3, #12
 8012f16:	603b      	str	r3, [r7, #0]
 8012f18:	f04f 30ff 	mov.w	r0, #4294967295
 8012f1c:	b01d      	add	sp, #116	@ 0x74
 8012f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f22:	2340      	movs	r3, #64	@ 0x40
 8012f24:	616b      	str	r3, [r5, #20]
 8012f26:	2300      	movs	r3, #0
 8012f28:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f2a:	2320      	movs	r3, #32
 8012f2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012f30:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f34:	2330      	movs	r3, #48	@ 0x30
 8012f36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80130d4 <_svfiprintf_r+0x1e4>
 8012f3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012f3e:	f04f 0901 	mov.w	r9, #1
 8012f42:	4623      	mov	r3, r4
 8012f44:	469a      	mov	sl, r3
 8012f46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f4a:	b10a      	cbz	r2, 8012f50 <_svfiprintf_r+0x60>
 8012f4c:	2a25      	cmp	r2, #37	@ 0x25
 8012f4e:	d1f9      	bne.n	8012f44 <_svfiprintf_r+0x54>
 8012f50:	ebba 0b04 	subs.w	fp, sl, r4
 8012f54:	d00b      	beq.n	8012f6e <_svfiprintf_r+0x7e>
 8012f56:	465b      	mov	r3, fp
 8012f58:	4622      	mov	r2, r4
 8012f5a:	4629      	mov	r1, r5
 8012f5c:	4638      	mov	r0, r7
 8012f5e:	f7ff ff6b 	bl	8012e38 <__ssputs_r>
 8012f62:	3001      	adds	r0, #1
 8012f64:	f000 80a7 	beq.w	80130b6 <_svfiprintf_r+0x1c6>
 8012f68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012f6a:	445a      	add	r2, fp
 8012f6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8012f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	f000 809f 	beq.w	80130b6 <_svfiprintf_r+0x1c6>
 8012f78:	2300      	movs	r3, #0
 8012f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f82:	f10a 0a01 	add.w	sl, sl, #1
 8012f86:	9304      	str	r3, [sp, #16]
 8012f88:	9307      	str	r3, [sp, #28]
 8012f8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012f8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012f90:	4654      	mov	r4, sl
 8012f92:	2205      	movs	r2, #5
 8012f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f98:	484e      	ldr	r0, [pc, #312]	@ (80130d4 <_svfiprintf_r+0x1e4>)
 8012f9a:	f7f5 f931 	bl	8008200 <memchr>
 8012f9e:	9a04      	ldr	r2, [sp, #16]
 8012fa0:	b9d8      	cbnz	r0, 8012fda <_svfiprintf_r+0xea>
 8012fa2:	06d0      	lsls	r0, r2, #27
 8012fa4:	bf44      	itt	mi
 8012fa6:	2320      	movmi	r3, #32
 8012fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012fac:	0711      	lsls	r1, r2, #28
 8012fae:	bf44      	itt	mi
 8012fb0:	232b      	movmi	r3, #43	@ 0x2b
 8012fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8012fba:	2b2a      	cmp	r3, #42	@ 0x2a
 8012fbc:	d015      	beq.n	8012fea <_svfiprintf_r+0xfa>
 8012fbe:	9a07      	ldr	r2, [sp, #28]
 8012fc0:	4654      	mov	r4, sl
 8012fc2:	2000      	movs	r0, #0
 8012fc4:	f04f 0c0a 	mov.w	ip, #10
 8012fc8:	4621      	mov	r1, r4
 8012fca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012fce:	3b30      	subs	r3, #48	@ 0x30
 8012fd0:	2b09      	cmp	r3, #9
 8012fd2:	d94b      	bls.n	801306c <_svfiprintf_r+0x17c>
 8012fd4:	b1b0      	cbz	r0, 8013004 <_svfiprintf_r+0x114>
 8012fd6:	9207      	str	r2, [sp, #28]
 8012fd8:	e014      	b.n	8013004 <_svfiprintf_r+0x114>
 8012fda:	eba0 0308 	sub.w	r3, r0, r8
 8012fde:	fa09 f303 	lsl.w	r3, r9, r3
 8012fe2:	4313      	orrs	r3, r2
 8012fe4:	9304      	str	r3, [sp, #16]
 8012fe6:	46a2      	mov	sl, r4
 8012fe8:	e7d2      	b.n	8012f90 <_svfiprintf_r+0xa0>
 8012fea:	9b03      	ldr	r3, [sp, #12]
 8012fec:	1d19      	adds	r1, r3, #4
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	9103      	str	r1, [sp, #12]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	bfbb      	ittet	lt
 8012ff6:	425b      	neglt	r3, r3
 8012ff8:	f042 0202 	orrlt.w	r2, r2, #2
 8012ffc:	9307      	strge	r3, [sp, #28]
 8012ffe:	9307      	strlt	r3, [sp, #28]
 8013000:	bfb8      	it	lt
 8013002:	9204      	strlt	r2, [sp, #16]
 8013004:	7823      	ldrb	r3, [r4, #0]
 8013006:	2b2e      	cmp	r3, #46	@ 0x2e
 8013008:	d10a      	bne.n	8013020 <_svfiprintf_r+0x130>
 801300a:	7863      	ldrb	r3, [r4, #1]
 801300c:	2b2a      	cmp	r3, #42	@ 0x2a
 801300e:	d132      	bne.n	8013076 <_svfiprintf_r+0x186>
 8013010:	9b03      	ldr	r3, [sp, #12]
 8013012:	1d1a      	adds	r2, r3, #4
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	9203      	str	r2, [sp, #12]
 8013018:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801301c:	3402      	adds	r4, #2
 801301e:	9305      	str	r3, [sp, #20]
 8013020:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80130e4 <_svfiprintf_r+0x1f4>
 8013024:	7821      	ldrb	r1, [r4, #0]
 8013026:	2203      	movs	r2, #3
 8013028:	4650      	mov	r0, sl
 801302a:	f7f5 f8e9 	bl	8008200 <memchr>
 801302e:	b138      	cbz	r0, 8013040 <_svfiprintf_r+0x150>
 8013030:	9b04      	ldr	r3, [sp, #16]
 8013032:	eba0 000a 	sub.w	r0, r0, sl
 8013036:	2240      	movs	r2, #64	@ 0x40
 8013038:	4082      	lsls	r2, r0
 801303a:	4313      	orrs	r3, r2
 801303c:	3401      	adds	r4, #1
 801303e:	9304      	str	r3, [sp, #16]
 8013040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013044:	4824      	ldr	r0, [pc, #144]	@ (80130d8 <_svfiprintf_r+0x1e8>)
 8013046:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801304a:	2206      	movs	r2, #6
 801304c:	f7f5 f8d8 	bl	8008200 <memchr>
 8013050:	2800      	cmp	r0, #0
 8013052:	d036      	beq.n	80130c2 <_svfiprintf_r+0x1d2>
 8013054:	4b21      	ldr	r3, [pc, #132]	@ (80130dc <_svfiprintf_r+0x1ec>)
 8013056:	bb1b      	cbnz	r3, 80130a0 <_svfiprintf_r+0x1b0>
 8013058:	9b03      	ldr	r3, [sp, #12]
 801305a:	3307      	adds	r3, #7
 801305c:	f023 0307 	bic.w	r3, r3, #7
 8013060:	3308      	adds	r3, #8
 8013062:	9303      	str	r3, [sp, #12]
 8013064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013066:	4433      	add	r3, r6
 8013068:	9309      	str	r3, [sp, #36]	@ 0x24
 801306a:	e76a      	b.n	8012f42 <_svfiprintf_r+0x52>
 801306c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013070:	460c      	mov	r4, r1
 8013072:	2001      	movs	r0, #1
 8013074:	e7a8      	b.n	8012fc8 <_svfiprintf_r+0xd8>
 8013076:	2300      	movs	r3, #0
 8013078:	3401      	adds	r4, #1
 801307a:	9305      	str	r3, [sp, #20]
 801307c:	4619      	mov	r1, r3
 801307e:	f04f 0c0a 	mov.w	ip, #10
 8013082:	4620      	mov	r0, r4
 8013084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013088:	3a30      	subs	r2, #48	@ 0x30
 801308a:	2a09      	cmp	r2, #9
 801308c:	d903      	bls.n	8013096 <_svfiprintf_r+0x1a6>
 801308e:	2b00      	cmp	r3, #0
 8013090:	d0c6      	beq.n	8013020 <_svfiprintf_r+0x130>
 8013092:	9105      	str	r1, [sp, #20]
 8013094:	e7c4      	b.n	8013020 <_svfiprintf_r+0x130>
 8013096:	fb0c 2101 	mla	r1, ip, r1, r2
 801309a:	4604      	mov	r4, r0
 801309c:	2301      	movs	r3, #1
 801309e:	e7f0      	b.n	8013082 <_svfiprintf_r+0x192>
 80130a0:	ab03      	add	r3, sp, #12
 80130a2:	9300      	str	r3, [sp, #0]
 80130a4:	462a      	mov	r2, r5
 80130a6:	4b0e      	ldr	r3, [pc, #56]	@ (80130e0 <_svfiprintf_r+0x1f0>)
 80130a8:	a904      	add	r1, sp, #16
 80130aa:	4638      	mov	r0, r7
 80130ac:	f3af 8000 	nop.w
 80130b0:	1c42      	adds	r2, r0, #1
 80130b2:	4606      	mov	r6, r0
 80130b4:	d1d6      	bne.n	8013064 <_svfiprintf_r+0x174>
 80130b6:	89ab      	ldrh	r3, [r5, #12]
 80130b8:	065b      	lsls	r3, r3, #25
 80130ba:	f53f af2d 	bmi.w	8012f18 <_svfiprintf_r+0x28>
 80130be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80130c0:	e72c      	b.n	8012f1c <_svfiprintf_r+0x2c>
 80130c2:	ab03      	add	r3, sp, #12
 80130c4:	9300      	str	r3, [sp, #0]
 80130c6:	462a      	mov	r2, r5
 80130c8:	4b05      	ldr	r3, [pc, #20]	@ (80130e0 <_svfiprintf_r+0x1f0>)
 80130ca:	a904      	add	r1, sp, #16
 80130cc:	4638      	mov	r0, r7
 80130ce:	f000 f879 	bl	80131c4 <_printf_i>
 80130d2:	e7ed      	b.n	80130b0 <_svfiprintf_r+0x1c0>
 80130d4:	080152c5 	.word	0x080152c5
 80130d8:	080152cf 	.word	0x080152cf
 80130dc:	00000000 	.word	0x00000000
 80130e0:	08012e39 	.word	0x08012e39
 80130e4:	080152cb 	.word	0x080152cb

080130e8 <_printf_common>:
 80130e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130ec:	4616      	mov	r6, r2
 80130ee:	4698      	mov	r8, r3
 80130f0:	688a      	ldr	r2, [r1, #8]
 80130f2:	690b      	ldr	r3, [r1, #16]
 80130f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80130f8:	4293      	cmp	r3, r2
 80130fa:	bfb8      	it	lt
 80130fc:	4613      	movlt	r3, r2
 80130fe:	6033      	str	r3, [r6, #0]
 8013100:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013104:	4607      	mov	r7, r0
 8013106:	460c      	mov	r4, r1
 8013108:	b10a      	cbz	r2, 801310e <_printf_common+0x26>
 801310a:	3301      	adds	r3, #1
 801310c:	6033      	str	r3, [r6, #0]
 801310e:	6823      	ldr	r3, [r4, #0]
 8013110:	0699      	lsls	r1, r3, #26
 8013112:	bf42      	ittt	mi
 8013114:	6833      	ldrmi	r3, [r6, #0]
 8013116:	3302      	addmi	r3, #2
 8013118:	6033      	strmi	r3, [r6, #0]
 801311a:	6825      	ldr	r5, [r4, #0]
 801311c:	f015 0506 	ands.w	r5, r5, #6
 8013120:	d106      	bne.n	8013130 <_printf_common+0x48>
 8013122:	f104 0a19 	add.w	sl, r4, #25
 8013126:	68e3      	ldr	r3, [r4, #12]
 8013128:	6832      	ldr	r2, [r6, #0]
 801312a:	1a9b      	subs	r3, r3, r2
 801312c:	42ab      	cmp	r3, r5
 801312e:	dc26      	bgt.n	801317e <_printf_common+0x96>
 8013130:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013134:	6822      	ldr	r2, [r4, #0]
 8013136:	3b00      	subs	r3, #0
 8013138:	bf18      	it	ne
 801313a:	2301      	movne	r3, #1
 801313c:	0692      	lsls	r2, r2, #26
 801313e:	d42b      	bmi.n	8013198 <_printf_common+0xb0>
 8013140:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013144:	4641      	mov	r1, r8
 8013146:	4638      	mov	r0, r7
 8013148:	47c8      	blx	r9
 801314a:	3001      	adds	r0, #1
 801314c:	d01e      	beq.n	801318c <_printf_common+0xa4>
 801314e:	6823      	ldr	r3, [r4, #0]
 8013150:	6922      	ldr	r2, [r4, #16]
 8013152:	f003 0306 	and.w	r3, r3, #6
 8013156:	2b04      	cmp	r3, #4
 8013158:	bf02      	ittt	eq
 801315a:	68e5      	ldreq	r5, [r4, #12]
 801315c:	6833      	ldreq	r3, [r6, #0]
 801315e:	1aed      	subeq	r5, r5, r3
 8013160:	68a3      	ldr	r3, [r4, #8]
 8013162:	bf0c      	ite	eq
 8013164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013168:	2500      	movne	r5, #0
 801316a:	4293      	cmp	r3, r2
 801316c:	bfc4      	itt	gt
 801316e:	1a9b      	subgt	r3, r3, r2
 8013170:	18ed      	addgt	r5, r5, r3
 8013172:	2600      	movs	r6, #0
 8013174:	341a      	adds	r4, #26
 8013176:	42b5      	cmp	r5, r6
 8013178:	d11a      	bne.n	80131b0 <_printf_common+0xc8>
 801317a:	2000      	movs	r0, #0
 801317c:	e008      	b.n	8013190 <_printf_common+0xa8>
 801317e:	2301      	movs	r3, #1
 8013180:	4652      	mov	r2, sl
 8013182:	4641      	mov	r1, r8
 8013184:	4638      	mov	r0, r7
 8013186:	47c8      	blx	r9
 8013188:	3001      	adds	r0, #1
 801318a:	d103      	bne.n	8013194 <_printf_common+0xac>
 801318c:	f04f 30ff 	mov.w	r0, #4294967295
 8013190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013194:	3501      	adds	r5, #1
 8013196:	e7c6      	b.n	8013126 <_printf_common+0x3e>
 8013198:	18e1      	adds	r1, r4, r3
 801319a:	1c5a      	adds	r2, r3, #1
 801319c:	2030      	movs	r0, #48	@ 0x30
 801319e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80131a2:	4422      	add	r2, r4
 80131a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80131a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80131ac:	3302      	adds	r3, #2
 80131ae:	e7c7      	b.n	8013140 <_printf_common+0x58>
 80131b0:	2301      	movs	r3, #1
 80131b2:	4622      	mov	r2, r4
 80131b4:	4641      	mov	r1, r8
 80131b6:	4638      	mov	r0, r7
 80131b8:	47c8      	blx	r9
 80131ba:	3001      	adds	r0, #1
 80131bc:	d0e6      	beq.n	801318c <_printf_common+0xa4>
 80131be:	3601      	adds	r6, #1
 80131c0:	e7d9      	b.n	8013176 <_printf_common+0x8e>
	...

080131c4 <_printf_i>:
 80131c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80131c8:	7e0f      	ldrb	r7, [r1, #24]
 80131ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80131cc:	2f78      	cmp	r7, #120	@ 0x78
 80131ce:	4691      	mov	r9, r2
 80131d0:	4680      	mov	r8, r0
 80131d2:	460c      	mov	r4, r1
 80131d4:	469a      	mov	sl, r3
 80131d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80131da:	d807      	bhi.n	80131ec <_printf_i+0x28>
 80131dc:	2f62      	cmp	r7, #98	@ 0x62
 80131de:	d80a      	bhi.n	80131f6 <_printf_i+0x32>
 80131e0:	2f00      	cmp	r7, #0
 80131e2:	f000 80d1 	beq.w	8013388 <_printf_i+0x1c4>
 80131e6:	2f58      	cmp	r7, #88	@ 0x58
 80131e8:	f000 80b8 	beq.w	801335c <_printf_i+0x198>
 80131ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80131f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80131f4:	e03a      	b.n	801326c <_printf_i+0xa8>
 80131f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80131fa:	2b15      	cmp	r3, #21
 80131fc:	d8f6      	bhi.n	80131ec <_printf_i+0x28>
 80131fe:	a101      	add	r1, pc, #4	@ (adr r1, 8013204 <_printf_i+0x40>)
 8013200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013204:	0801325d 	.word	0x0801325d
 8013208:	08013271 	.word	0x08013271
 801320c:	080131ed 	.word	0x080131ed
 8013210:	080131ed 	.word	0x080131ed
 8013214:	080131ed 	.word	0x080131ed
 8013218:	080131ed 	.word	0x080131ed
 801321c:	08013271 	.word	0x08013271
 8013220:	080131ed 	.word	0x080131ed
 8013224:	080131ed 	.word	0x080131ed
 8013228:	080131ed 	.word	0x080131ed
 801322c:	080131ed 	.word	0x080131ed
 8013230:	0801336f 	.word	0x0801336f
 8013234:	0801329b 	.word	0x0801329b
 8013238:	08013329 	.word	0x08013329
 801323c:	080131ed 	.word	0x080131ed
 8013240:	080131ed 	.word	0x080131ed
 8013244:	08013391 	.word	0x08013391
 8013248:	080131ed 	.word	0x080131ed
 801324c:	0801329b 	.word	0x0801329b
 8013250:	080131ed 	.word	0x080131ed
 8013254:	080131ed 	.word	0x080131ed
 8013258:	08013331 	.word	0x08013331
 801325c:	6833      	ldr	r3, [r6, #0]
 801325e:	1d1a      	adds	r2, r3, #4
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	6032      	str	r2, [r6, #0]
 8013264:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013268:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801326c:	2301      	movs	r3, #1
 801326e:	e09c      	b.n	80133aa <_printf_i+0x1e6>
 8013270:	6833      	ldr	r3, [r6, #0]
 8013272:	6820      	ldr	r0, [r4, #0]
 8013274:	1d19      	adds	r1, r3, #4
 8013276:	6031      	str	r1, [r6, #0]
 8013278:	0606      	lsls	r6, r0, #24
 801327a:	d501      	bpl.n	8013280 <_printf_i+0xbc>
 801327c:	681d      	ldr	r5, [r3, #0]
 801327e:	e003      	b.n	8013288 <_printf_i+0xc4>
 8013280:	0645      	lsls	r5, r0, #25
 8013282:	d5fb      	bpl.n	801327c <_printf_i+0xb8>
 8013284:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013288:	2d00      	cmp	r5, #0
 801328a:	da03      	bge.n	8013294 <_printf_i+0xd0>
 801328c:	232d      	movs	r3, #45	@ 0x2d
 801328e:	426d      	negs	r5, r5
 8013290:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013294:	4858      	ldr	r0, [pc, #352]	@ (80133f8 <_printf_i+0x234>)
 8013296:	230a      	movs	r3, #10
 8013298:	e011      	b.n	80132be <_printf_i+0xfa>
 801329a:	6821      	ldr	r1, [r4, #0]
 801329c:	6833      	ldr	r3, [r6, #0]
 801329e:	0608      	lsls	r0, r1, #24
 80132a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80132a4:	d402      	bmi.n	80132ac <_printf_i+0xe8>
 80132a6:	0649      	lsls	r1, r1, #25
 80132a8:	bf48      	it	mi
 80132aa:	b2ad      	uxthmi	r5, r5
 80132ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80132ae:	4852      	ldr	r0, [pc, #328]	@ (80133f8 <_printf_i+0x234>)
 80132b0:	6033      	str	r3, [r6, #0]
 80132b2:	bf14      	ite	ne
 80132b4:	230a      	movne	r3, #10
 80132b6:	2308      	moveq	r3, #8
 80132b8:	2100      	movs	r1, #0
 80132ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80132be:	6866      	ldr	r6, [r4, #4]
 80132c0:	60a6      	str	r6, [r4, #8]
 80132c2:	2e00      	cmp	r6, #0
 80132c4:	db05      	blt.n	80132d2 <_printf_i+0x10e>
 80132c6:	6821      	ldr	r1, [r4, #0]
 80132c8:	432e      	orrs	r6, r5
 80132ca:	f021 0104 	bic.w	r1, r1, #4
 80132ce:	6021      	str	r1, [r4, #0]
 80132d0:	d04b      	beq.n	801336a <_printf_i+0x1a6>
 80132d2:	4616      	mov	r6, r2
 80132d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80132d8:	fb03 5711 	mls	r7, r3, r1, r5
 80132dc:	5dc7      	ldrb	r7, [r0, r7]
 80132de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80132e2:	462f      	mov	r7, r5
 80132e4:	42bb      	cmp	r3, r7
 80132e6:	460d      	mov	r5, r1
 80132e8:	d9f4      	bls.n	80132d4 <_printf_i+0x110>
 80132ea:	2b08      	cmp	r3, #8
 80132ec:	d10b      	bne.n	8013306 <_printf_i+0x142>
 80132ee:	6823      	ldr	r3, [r4, #0]
 80132f0:	07df      	lsls	r7, r3, #31
 80132f2:	d508      	bpl.n	8013306 <_printf_i+0x142>
 80132f4:	6923      	ldr	r3, [r4, #16]
 80132f6:	6861      	ldr	r1, [r4, #4]
 80132f8:	4299      	cmp	r1, r3
 80132fa:	bfde      	ittt	le
 80132fc:	2330      	movle	r3, #48	@ 0x30
 80132fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013302:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013306:	1b92      	subs	r2, r2, r6
 8013308:	6122      	str	r2, [r4, #16]
 801330a:	f8cd a000 	str.w	sl, [sp]
 801330e:	464b      	mov	r3, r9
 8013310:	aa03      	add	r2, sp, #12
 8013312:	4621      	mov	r1, r4
 8013314:	4640      	mov	r0, r8
 8013316:	f7ff fee7 	bl	80130e8 <_printf_common>
 801331a:	3001      	adds	r0, #1
 801331c:	d14a      	bne.n	80133b4 <_printf_i+0x1f0>
 801331e:	f04f 30ff 	mov.w	r0, #4294967295
 8013322:	b004      	add	sp, #16
 8013324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013328:	6823      	ldr	r3, [r4, #0]
 801332a:	f043 0320 	orr.w	r3, r3, #32
 801332e:	6023      	str	r3, [r4, #0]
 8013330:	4832      	ldr	r0, [pc, #200]	@ (80133fc <_printf_i+0x238>)
 8013332:	2778      	movs	r7, #120	@ 0x78
 8013334:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013338:	6823      	ldr	r3, [r4, #0]
 801333a:	6831      	ldr	r1, [r6, #0]
 801333c:	061f      	lsls	r7, r3, #24
 801333e:	f851 5b04 	ldr.w	r5, [r1], #4
 8013342:	d402      	bmi.n	801334a <_printf_i+0x186>
 8013344:	065f      	lsls	r7, r3, #25
 8013346:	bf48      	it	mi
 8013348:	b2ad      	uxthmi	r5, r5
 801334a:	6031      	str	r1, [r6, #0]
 801334c:	07d9      	lsls	r1, r3, #31
 801334e:	bf44      	itt	mi
 8013350:	f043 0320 	orrmi.w	r3, r3, #32
 8013354:	6023      	strmi	r3, [r4, #0]
 8013356:	b11d      	cbz	r5, 8013360 <_printf_i+0x19c>
 8013358:	2310      	movs	r3, #16
 801335a:	e7ad      	b.n	80132b8 <_printf_i+0xf4>
 801335c:	4826      	ldr	r0, [pc, #152]	@ (80133f8 <_printf_i+0x234>)
 801335e:	e7e9      	b.n	8013334 <_printf_i+0x170>
 8013360:	6823      	ldr	r3, [r4, #0]
 8013362:	f023 0320 	bic.w	r3, r3, #32
 8013366:	6023      	str	r3, [r4, #0]
 8013368:	e7f6      	b.n	8013358 <_printf_i+0x194>
 801336a:	4616      	mov	r6, r2
 801336c:	e7bd      	b.n	80132ea <_printf_i+0x126>
 801336e:	6833      	ldr	r3, [r6, #0]
 8013370:	6825      	ldr	r5, [r4, #0]
 8013372:	6961      	ldr	r1, [r4, #20]
 8013374:	1d18      	adds	r0, r3, #4
 8013376:	6030      	str	r0, [r6, #0]
 8013378:	062e      	lsls	r6, r5, #24
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	d501      	bpl.n	8013382 <_printf_i+0x1be>
 801337e:	6019      	str	r1, [r3, #0]
 8013380:	e002      	b.n	8013388 <_printf_i+0x1c4>
 8013382:	0668      	lsls	r0, r5, #25
 8013384:	d5fb      	bpl.n	801337e <_printf_i+0x1ba>
 8013386:	8019      	strh	r1, [r3, #0]
 8013388:	2300      	movs	r3, #0
 801338a:	6123      	str	r3, [r4, #16]
 801338c:	4616      	mov	r6, r2
 801338e:	e7bc      	b.n	801330a <_printf_i+0x146>
 8013390:	6833      	ldr	r3, [r6, #0]
 8013392:	1d1a      	adds	r2, r3, #4
 8013394:	6032      	str	r2, [r6, #0]
 8013396:	681e      	ldr	r6, [r3, #0]
 8013398:	6862      	ldr	r2, [r4, #4]
 801339a:	2100      	movs	r1, #0
 801339c:	4630      	mov	r0, r6
 801339e:	f7f4 ff2f 	bl	8008200 <memchr>
 80133a2:	b108      	cbz	r0, 80133a8 <_printf_i+0x1e4>
 80133a4:	1b80      	subs	r0, r0, r6
 80133a6:	6060      	str	r0, [r4, #4]
 80133a8:	6863      	ldr	r3, [r4, #4]
 80133aa:	6123      	str	r3, [r4, #16]
 80133ac:	2300      	movs	r3, #0
 80133ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80133b2:	e7aa      	b.n	801330a <_printf_i+0x146>
 80133b4:	6923      	ldr	r3, [r4, #16]
 80133b6:	4632      	mov	r2, r6
 80133b8:	4649      	mov	r1, r9
 80133ba:	4640      	mov	r0, r8
 80133bc:	47d0      	blx	sl
 80133be:	3001      	adds	r0, #1
 80133c0:	d0ad      	beq.n	801331e <_printf_i+0x15a>
 80133c2:	6823      	ldr	r3, [r4, #0]
 80133c4:	079b      	lsls	r3, r3, #30
 80133c6:	d413      	bmi.n	80133f0 <_printf_i+0x22c>
 80133c8:	68e0      	ldr	r0, [r4, #12]
 80133ca:	9b03      	ldr	r3, [sp, #12]
 80133cc:	4298      	cmp	r0, r3
 80133ce:	bfb8      	it	lt
 80133d0:	4618      	movlt	r0, r3
 80133d2:	e7a6      	b.n	8013322 <_printf_i+0x15e>
 80133d4:	2301      	movs	r3, #1
 80133d6:	4632      	mov	r2, r6
 80133d8:	4649      	mov	r1, r9
 80133da:	4640      	mov	r0, r8
 80133dc:	47d0      	blx	sl
 80133de:	3001      	adds	r0, #1
 80133e0:	d09d      	beq.n	801331e <_printf_i+0x15a>
 80133e2:	3501      	adds	r5, #1
 80133e4:	68e3      	ldr	r3, [r4, #12]
 80133e6:	9903      	ldr	r1, [sp, #12]
 80133e8:	1a5b      	subs	r3, r3, r1
 80133ea:	42ab      	cmp	r3, r5
 80133ec:	dcf2      	bgt.n	80133d4 <_printf_i+0x210>
 80133ee:	e7eb      	b.n	80133c8 <_printf_i+0x204>
 80133f0:	2500      	movs	r5, #0
 80133f2:	f104 0619 	add.w	r6, r4, #25
 80133f6:	e7f5      	b.n	80133e4 <_printf_i+0x220>
 80133f8:	080152d6 	.word	0x080152d6
 80133fc:	080152e7 	.word	0x080152e7

08013400 <memmove>:
 8013400:	4288      	cmp	r0, r1
 8013402:	b510      	push	{r4, lr}
 8013404:	eb01 0402 	add.w	r4, r1, r2
 8013408:	d902      	bls.n	8013410 <memmove+0x10>
 801340a:	4284      	cmp	r4, r0
 801340c:	4623      	mov	r3, r4
 801340e:	d807      	bhi.n	8013420 <memmove+0x20>
 8013410:	1e43      	subs	r3, r0, #1
 8013412:	42a1      	cmp	r1, r4
 8013414:	d008      	beq.n	8013428 <memmove+0x28>
 8013416:	f811 2b01 	ldrb.w	r2, [r1], #1
 801341a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801341e:	e7f8      	b.n	8013412 <memmove+0x12>
 8013420:	4402      	add	r2, r0
 8013422:	4601      	mov	r1, r0
 8013424:	428a      	cmp	r2, r1
 8013426:	d100      	bne.n	801342a <memmove+0x2a>
 8013428:	bd10      	pop	{r4, pc}
 801342a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801342e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013432:	e7f7      	b.n	8013424 <memmove+0x24>

08013434 <_sbrk_r>:
 8013434:	b538      	push	{r3, r4, r5, lr}
 8013436:	4d06      	ldr	r5, [pc, #24]	@ (8013450 <_sbrk_r+0x1c>)
 8013438:	2300      	movs	r3, #0
 801343a:	4604      	mov	r4, r0
 801343c:	4608      	mov	r0, r1
 801343e:	602b      	str	r3, [r5, #0]
 8013440:	f7fc f802 	bl	800f448 <_sbrk>
 8013444:	1c43      	adds	r3, r0, #1
 8013446:	d102      	bne.n	801344e <_sbrk_r+0x1a>
 8013448:	682b      	ldr	r3, [r5, #0]
 801344a:	b103      	cbz	r3, 801344e <_sbrk_r+0x1a>
 801344c:	6023      	str	r3, [r4, #0]
 801344e:	bd38      	pop	{r3, r4, r5, pc}
 8013450:	200039cc 	.word	0x200039cc

08013454 <memcpy>:
 8013454:	440a      	add	r2, r1
 8013456:	4291      	cmp	r1, r2
 8013458:	f100 33ff 	add.w	r3, r0, #4294967295
 801345c:	d100      	bne.n	8013460 <memcpy+0xc>
 801345e:	4770      	bx	lr
 8013460:	b510      	push	{r4, lr}
 8013462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013466:	f803 4f01 	strb.w	r4, [r3, #1]!
 801346a:	4291      	cmp	r1, r2
 801346c:	d1f9      	bne.n	8013462 <memcpy+0xe>
 801346e:	bd10      	pop	{r4, pc}

08013470 <_realloc_r>:
 8013470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013474:	4607      	mov	r7, r0
 8013476:	4614      	mov	r4, r2
 8013478:	460d      	mov	r5, r1
 801347a:	b921      	cbnz	r1, 8013486 <_realloc_r+0x16>
 801347c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013480:	4611      	mov	r1, r2
 8013482:	f7ff bc4d 	b.w	8012d20 <_malloc_r>
 8013486:	b92a      	cbnz	r2, 8013494 <_realloc_r+0x24>
 8013488:	f7ff fbde 	bl	8012c48 <_free_r>
 801348c:	4625      	mov	r5, r4
 801348e:	4628      	mov	r0, r5
 8013490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013494:	f000 f81a 	bl	80134cc <_malloc_usable_size_r>
 8013498:	4284      	cmp	r4, r0
 801349a:	4606      	mov	r6, r0
 801349c:	d802      	bhi.n	80134a4 <_realloc_r+0x34>
 801349e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80134a2:	d8f4      	bhi.n	801348e <_realloc_r+0x1e>
 80134a4:	4621      	mov	r1, r4
 80134a6:	4638      	mov	r0, r7
 80134a8:	f7ff fc3a 	bl	8012d20 <_malloc_r>
 80134ac:	4680      	mov	r8, r0
 80134ae:	b908      	cbnz	r0, 80134b4 <_realloc_r+0x44>
 80134b0:	4645      	mov	r5, r8
 80134b2:	e7ec      	b.n	801348e <_realloc_r+0x1e>
 80134b4:	42b4      	cmp	r4, r6
 80134b6:	4622      	mov	r2, r4
 80134b8:	4629      	mov	r1, r5
 80134ba:	bf28      	it	cs
 80134bc:	4632      	movcs	r2, r6
 80134be:	f7ff ffc9 	bl	8013454 <memcpy>
 80134c2:	4629      	mov	r1, r5
 80134c4:	4638      	mov	r0, r7
 80134c6:	f7ff fbbf 	bl	8012c48 <_free_r>
 80134ca:	e7f1      	b.n	80134b0 <_realloc_r+0x40>

080134cc <_malloc_usable_size_r>:
 80134cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134d0:	1f18      	subs	r0, r3, #4
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	bfbc      	itt	lt
 80134d6:	580b      	ldrlt	r3, [r1, r0]
 80134d8:	18c0      	addlt	r0, r0, r3
 80134da:	4770      	bx	lr

080134dc <_init>:
 80134dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134de:	bf00      	nop
 80134e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134e2:	bc08      	pop	{r3}
 80134e4:	469e      	mov	lr, r3
 80134e6:	4770      	bx	lr

080134e8 <_fini>:
 80134e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ea:	bf00      	nop
 80134ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134ee:	bc08      	pop	{r3}
 80134f0:	469e      	mov	lr, r3
 80134f2:	4770      	bx	lr
