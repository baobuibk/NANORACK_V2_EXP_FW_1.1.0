
EXP_V110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017ec  0800b240  0800b240  0000c240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca2c  0800ca2c  0001039c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ca2c  0800ca2c  0000da2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca34  0800ca34  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca34  0800ca34  0000da34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca38  0800ca38  0000da38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000239c  20000000  0800ca3c  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001039c  2**0
                  CONTENTS
 10 .bss          0000158c  2000239c  2000239c  0001039c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003928  20003928  0001039c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001039c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019e48  00000000  00000000  000103cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c8b  00000000  00000000  0002a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cf8  00000000  00000000  0002eea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015dc  00000000  00000000  00030b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b619  00000000  00000000  00032174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021881  00000000  00000000  0005d78d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f14c9  00000000  00000000  0007f00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001704d7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f2c  00000000  00000000  0017051c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  00178448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000239c 	.word	0x2000239c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b228 	.word	0x0800b228

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200023a0 	.word	0x200023a0
 80001cc:	0800b228 	.word	0x0800b228

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295
 80002be:	f000 b9d3 	b.w	8000668 <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295
 8000350:	f04f 30ff 	movne.w	r0, #4294967295
 8000354:	f000 b988 	b.w	8000668 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	468e      	mov	lr, r1
 8000378:	4604      	mov	r4, r0
 800037a:	4688      	mov	r8, r1
 800037c:	2b00      	cmp	r3, #0
 800037e:	d14a      	bne.n	8000416 <__udivmoddi4+0xa6>
 8000380:	428a      	cmp	r2, r1
 8000382:	4617      	mov	r7, r2
 8000384:	d962      	bls.n	800044c <__udivmoddi4+0xdc>
 8000386:	fab2 f682 	clz	r6, r2
 800038a:	b14e      	cbz	r6, 80003a0 <__udivmoddi4+0x30>
 800038c:	f1c6 0320 	rsb	r3, r6, #32
 8000390:	fa01 f806 	lsl.w	r8, r1, r6
 8000394:	fa20 f303 	lsr.w	r3, r0, r3
 8000398:	40b7      	lsls	r7, r6
 800039a:	ea43 0808 	orr.w	r8, r3, r8
 800039e:	40b4      	lsls	r4, r6
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ac:	0c23      	lsrs	r3, r4, #16
 80003ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80003b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003b6:	fb01 f20c 	mul.w	r2, r1, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x62>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003c4:	f080 80ea 	bcs.w	800059c <__udivmoddi4+0x22c>
 80003c8:	429a      	cmp	r2, r3
 80003ca:	f240 80e7 	bls.w	800059c <__udivmoddi4+0x22c>
 80003ce:	3902      	subs	r1, #2
 80003d0:	443b      	add	r3, r7
 80003d2:	1a9a      	subs	r2, r3, r2
 80003d4:	b2a3      	uxth	r3, r4
 80003d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003da:	fb0e 2210 	mls	r2, lr, r0, r2
 80003de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003e6:	459c      	cmp	ip, r3
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x8e>
 80003ea:	18fb      	adds	r3, r7, r3
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	f080 80d6 	bcs.w	80005a0 <__udivmoddi4+0x230>
 80003f4:	459c      	cmp	ip, r3
 80003f6:	f240 80d3 	bls.w	80005a0 <__udivmoddi4+0x230>
 80003fa:	443b      	add	r3, r7
 80003fc:	3802      	subs	r0, #2
 80003fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000402:	eba3 030c 	sub.w	r3, r3, ip
 8000406:	2100      	movs	r1, #0
 8000408:	b11d      	cbz	r5, 8000412 <__udivmoddi4+0xa2>
 800040a:	40f3      	lsrs	r3, r6
 800040c:	2200      	movs	r2, #0
 800040e:	e9c5 3200 	strd	r3, r2, [r5]
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	428b      	cmp	r3, r1
 8000418:	d905      	bls.n	8000426 <__udivmoddi4+0xb6>
 800041a:	b10d      	cbz	r5, 8000420 <__udivmoddi4+0xb0>
 800041c:	e9c5 0100 	strd	r0, r1, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	4608      	mov	r0, r1
 8000424:	e7f5      	b.n	8000412 <__udivmoddi4+0xa2>
 8000426:	fab3 f183 	clz	r1, r3
 800042a:	2900      	cmp	r1, #0
 800042c:	d146      	bne.n	80004bc <__udivmoddi4+0x14c>
 800042e:	4573      	cmp	r3, lr
 8000430:	d302      	bcc.n	8000438 <__udivmoddi4+0xc8>
 8000432:	4282      	cmp	r2, r0
 8000434:	f200 8105 	bhi.w	8000642 <__udivmoddi4+0x2d2>
 8000438:	1a84      	subs	r4, r0, r2
 800043a:	eb6e 0203 	sbc.w	r2, lr, r3
 800043e:	2001      	movs	r0, #1
 8000440:	4690      	mov	r8, r2
 8000442:	2d00      	cmp	r5, #0
 8000444:	d0e5      	beq.n	8000412 <__udivmoddi4+0xa2>
 8000446:	e9c5 4800 	strd	r4, r8, [r5]
 800044a:	e7e2      	b.n	8000412 <__udivmoddi4+0xa2>
 800044c:	2a00      	cmp	r2, #0
 800044e:	f000 8090 	beq.w	8000572 <__udivmoddi4+0x202>
 8000452:	fab2 f682 	clz	r6, r2
 8000456:	2e00      	cmp	r6, #0
 8000458:	f040 80a4 	bne.w	80005a4 <__udivmoddi4+0x234>
 800045c:	1a8a      	subs	r2, r1, r2
 800045e:	0c03      	lsrs	r3, r0, #16
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	b280      	uxth	r0, r0
 8000466:	b2bc      	uxth	r4, r7
 8000468:	2101      	movs	r1, #1
 800046a:	fbb2 fcfe 	udiv	ip, r2, lr
 800046e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000476:	fb04 f20c 	mul.w	r2, r4, ip
 800047a:	429a      	cmp	r2, r3
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x11e>
 800047e:	18fb      	adds	r3, r7, r3
 8000480:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x11c>
 8000486:	429a      	cmp	r2, r3
 8000488:	f200 80e0 	bhi.w	800064c <__udivmoddi4+0x2dc>
 800048c:	46c4      	mov	ip, r8
 800048e:	1a9b      	subs	r3, r3, r2
 8000490:	fbb3 f2fe 	udiv	r2, r3, lr
 8000494:	fb0e 3312 	mls	r3, lr, r2, r3
 8000498:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800049c:	fb02 f404 	mul.w	r4, r2, r4
 80004a0:	429c      	cmp	r4, r3
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x144>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x142>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f200 80ca 	bhi.w	8000646 <__udivmoddi4+0x2d6>
 80004b2:	4602      	mov	r2, r0
 80004b4:	1b1b      	subs	r3, r3, r4
 80004b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004ba:	e7a5      	b.n	8000408 <__udivmoddi4+0x98>
 80004bc:	f1c1 0620 	rsb	r6, r1, #32
 80004c0:	408b      	lsls	r3, r1
 80004c2:	fa22 f706 	lsr.w	r7, r2, r6
 80004c6:	431f      	orrs	r7, r3
 80004c8:	fa0e f401 	lsl.w	r4, lr, r1
 80004cc:	fa20 f306 	lsr.w	r3, r0, r6
 80004d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004d8:	4323      	orrs	r3, r4
 80004da:	fa00 f801 	lsl.w	r8, r0, r1
 80004de:	fa1f fc87 	uxth.w	ip, r7
 80004e2:	fbbe f0f9 	udiv	r0, lr, r9
 80004e6:	0c1c      	lsrs	r4, r3, #16
 80004e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004f4:	45a6      	cmp	lr, r4
 80004f6:	fa02 f201 	lsl.w	r2, r2, r1
 80004fa:	d909      	bls.n	8000510 <__udivmoddi4+0x1a0>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000502:	f080 809c 	bcs.w	800063e <__udivmoddi4+0x2ce>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f240 8099 	bls.w	800063e <__udivmoddi4+0x2ce>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	eba4 040e 	sub.w	r4, r4, lr
 8000514:	fa1f fe83 	uxth.w	lr, r3
 8000518:	fbb4 f3f9 	udiv	r3, r4, r9
 800051c:	fb09 4413 	mls	r4, r9, r3, r4
 8000520:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000524:	fb03 fc0c 	mul.w	ip, r3, ip
 8000528:	45a4      	cmp	ip, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x1ce>
 800052c:	193c      	adds	r4, r7, r4
 800052e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000532:	f080 8082 	bcs.w	800063a <__udivmoddi4+0x2ca>
 8000536:	45a4      	cmp	ip, r4
 8000538:	d97f      	bls.n	800063a <__udivmoddi4+0x2ca>
 800053a:	3b02      	subs	r3, #2
 800053c:	443c      	add	r4, r7
 800053e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000542:	eba4 040c 	sub.w	r4, r4, ip
 8000546:	fba0 ec02 	umull	lr, ip, r0, r2
 800054a:	4564      	cmp	r4, ip
 800054c:	4673      	mov	r3, lr
 800054e:	46e1      	mov	r9, ip
 8000550:	d362      	bcc.n	8000618 <__udivmoddi4+0x2a8>
 8000552:	d05f      	beq.n	8000614 <__udivmoddi4+0x2a4>
 8000554:	b15d      	cbz	r5, 800056e <__udivmoddi4+0x1fe>
 8000556:	ebb8 0203 	subs.w	r2, r8, r3
 800055a:	eb64 0409 	sbc.w	r4, r4, r9
 800055e:	fa04 f606 	lsl.w	r6, r4, r6
 8000562:	fa22 f301 	lsr.w	r3, r2, r1
 8000566:	431e      	orrs	r6, r3
 8000568:	40cc      	lsrs	r4, r1
 800056a:	e9c5 6400 	strd	r6, r4, [r5]
 800056e:	2100      	movs	r1, #0
 8000570:	e74f      	b.n	8000412 <__udivmoddi4+0xa2>
 8000572:	fbb1 fcf2 	udiv	ip, r1, r2
 8000576:	0c01      	lsrs	r1, r0, #16
 8000578:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800057c:	b280      	uxth	r0, r0
 800057e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000582:	463b      	mov	r3, r7
 8000584:	4638      	mov	r0, r7
 8000586:	463c      	mov	r4, r7
 8000588:	46b8      	mov	r8, r7
 800058a:	46be      	mov	lr, r7
 800058c:	2620      	movs	r6, #32
 800058e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000592:	eba2 0208 	sub.w	r2, r2, r8
 8000596:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800059a:	e766      	b.n	800046a <__udivmoddi4+0xfa>
 800059c:	4601      	mov	r1, r0
 800059e:	e718      	b.n	80003d2 <__udivmoddi4+0x62>
 80005a0:	4610      	mov	r0, r2
 80005a2:	e72c      	b.n	80003fe <__udivmoddi4+0x8e>
 80005a4:	f1c6 0220 	rsb	r2, r6, #32
 80005a8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	40b1      	lsls	r1, r6
 80005b0:	fa20 f202 	lsr.w	r2, r0, r2
 80005b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005b8:	430a      	orrs	r2, r1
 80005ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80005be:	b2bc      	uxth	r4, r7
 80005c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80005c4:	0c11      	lsrs	r1, r2, #16
 80005c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ca:	fb08 f904 	mul.w	r9, r8, r4
 80005ce:	40b0      	lsls	r0, r6
 80005d0:	4589      	cmp	r9, r1
 80005d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005d6:	b280      	uxth	r0, r0
 80005d8:	d93e      	bls.n	8000658 <__udivmoddi4+0x2e8>
 80005da:	1879      	adds	r1, r7, r1
 80005dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80005e0:	d201      	bcs.n	80005e6 <__udivmoddi4+0x276>
 80005e2:	4589      	cmp	r9, r1
 80005e4:	d81f      	bhi.n	8000626 <__udivmoddi4+0x2b6>
 80005e6:	eba1 0109 	sub.w	r1, r1, r9
 80005ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ee:	fb09 f804 	mul.w	r8, r9, r4
 80005f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005f6:	b292      	uxth	r2, r2
 80005f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005fc:	4542      	cmp	r2, r8
 80005fe:	d229      	bcs.n	8000654 <__udivmoddi4+0x2e4>
 8000600:	18ba      	adds	r2, r7, r2
 8000602:	f109 31ff 	add.w	r1, r9, #4294967295
 8000606:	d2c4      	bcs.n	8000592 <__udivmoddi4+0x222>
 8000608:	4542      	cmp	r2, r8
 800060a:	d2c2      	bcs.n	8000592 <__udivmoddi4+0x222>
 800060c:	f1a9 0102 	sub.w	r1, r9, #2
 8000610:	443a      	add	r2, r7
 8000612:	e7be      	b.n	8000592 <__udivmoddi4+0x222>
 8000614:	45f0      	cmp	r8, lr
 8000616:	d29d      	bcs.n	8000554 <__udivmoddi4+0x1e4>
 8000618:	ebbe 0302 	subs.w	r3, lr, r2
 800061c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000620:	3801      	subs	r0, #1
 8000622:	46e1      	mov	r9, ip
 8000624:	e796      	b.n	8000554 <__udivmoddi4+0x1e4>
 8000626:	eba7 0909 	sub.w	r9, r7, r9
 800062a:	4449      	add	r1, r9
 800062c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000630:	fbb1 f9fe 	udiv	r9, r1, lr
 8000634:	fb09 f804 	mul.w	r8, r9, r4
 8000638:	e7db      	b.n	80005f2 <__udivmoddi4+0x282>
 800063a:	4673      	mov	r3, lr
 800063c:	e77f      	b.n	800053e <__udivmoddi4+0x1ce>
 800063e:	4650      	mov	r0, sl
 8000640:	e766      	b.n	8000510 <__udivmoddi4+0x1a0>
 8000642:	4608      	mov	r0, r1
 8000644:	e6fd      	b.n	8000442 <__udivmoddi4+0xd2>
 8000646:	443b      	add	r3, r7
 8000648:	3a02      	subs	r2, #2
 800064a:	e733      	b.n	80004b4 <__udivmoddi4+0x144>
 800064c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000650:	443b      	add	r3, r7
 8000652:	e71c      	b.n	800048e <__udivmoddi4+0x11e>
 8000654:	4649      	mov	r1, r9
 8000656:	e79c      	b.n	8000592 <__udivmoddi4+0x222>
 8000658:	eba1 0109 	sub.w	r1, r1, r9
 800065c:	46c4      	mov	ip, r8
 800065e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000662:	fb09 f804 	mul.w	r8, r9, r4
 8000666:	e7c4      	b.n	80005f2 <__udivmoddi4+0x282>

08000668 <__aeabi_idiv0>:
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8000670:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800067c:	bf0c      	ite	eq
 800067e:	2301      	moveq	r3, #1
 8000680:	2300      	movne	r3, #0
 8000682:	b2db      	uxtb	r3, r3
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e010 	.word	0xe000e010

08000694 <delay_us>:
#include "delay.h"
#include "stm32f4xx_ll_utils.h"
#include "stm32f4xx_ll_cortex.h"

void delay_us(uint8_t micro_seconds)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
    uint32_t ticks = micro_seconds * (SystemCoreClock / 1000000);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	4a0c      	ldr	r2, [pc, #48]	@ (80006d4 <delay_us+0x40>)
 80006a2:	6812      	ldr	r2, [r2, #0]
 80006a4:	490c      	ldr	r1, [pc, #48]	@ (80006d8 <delay_us+0x44>)
 80006a6:	fba1 1202 	umull	r1, r2, r1, r2
 80006aa:	0c92      	lsrs	r2, r2, #18
 80006ac:	fb02 f303 	mul.w	r3, r2, r3
 80006b0:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 80006b2:	e007      	b.n	80006c4 <delay_us+0x30>
    {
        if (LL_SYSTICK_IsActiveCounterFlag())
 80006b4:	f7ff ffda 	bl	800066c <LL_SYSTICK_IsActiveCounterFlag>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d002      	beq.n	80006c4 <delay_us+0x30>
        {
            ticks--;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3b01      	subs	r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1f4      	bne.n	80006b4 <delay_us+0x20>
        }
    }
}
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200022c0 	.word	0x200022c0
 80006d8:	431bde83 	.word	0x431bde83

080006dc <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f043 0201 	orr.w	r2, r3, #1
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f023 0201 	bic.w	r2, r3, #1
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	601a      	str	r2, [r3, #0]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	601a      	str	r2, [r3, #0]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	f023 0201 	bic.w	r2, r3, #1
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	60da      	str	r2, [r3, #12]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <LL_I2C_EnableIT_EVT>:
  * @rmtoll CR2          ITEVTEN       LL_I2C_EnableIT_EVT
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_EVT(I2C_TypeDef *I2Cx)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	605a      	str	r2, [r3, #4]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <LL_I2C_EnableIT_BUF>:
  * @rmtoll CR2          ITBUFEN       LL_I2C_EnableIT_BUF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_BUF(I2C_TypeDef *I2Cx)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	605a      	str	r2, [r3, #4]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <LL_I2C_DisableIT_BUF>:
  * @rmtoll CR2          ITBUFEN       LL_I2C_DisableIT_BUF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_BUF(I2C_TypeDef *I2Cx)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	605a      	str	r2, [r3, #4]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <LL_I2C_EnableIT_ERR>:
  * @rmtoll CR2          ITERREN       LL_I2C_EnableIT_ERR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_ERR(I2C_TypeDef *I2Cx)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	605a      	str	r2, [r3, #4]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080c:	2b80      	cmp	r3, #128	@ 0x80
 800080e:	bf0c      	ite	eq
 8000810:	2301      	moveq	r3, #1
 8000812:	2300      	movne	r3, #0
 8000814:	b2db      	uxtb	r3, r3
}
 8000816:	4618      	mov	r0, r3
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000832:	2b40      	cmp	r3, #64	@ 0x40
 8000834:	bf0c      	ite	eq
 8000836:	2301      	moveq	r3, #1
 8000838:	2300      	movne	r3, #0
 800083a:	b2db      	uxtb	r3, r3
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	f003 0302 	and.w	r3, r3, #2
 8000858:	2b02      	cmp	r3, #2
 800085a:	bf0c      	ite	eq
 800085c:	2301      	moveq	r3, #1
 800085e:	2300      	movne	r3, #0
 8000860:	b2db      	uxtb	r3, r3
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <LL_I2C_IsActiveFlag_AF>:
  * @rmtoll SR1          AF            LL_I2C_IsActiveFlag_AF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_AF(I2C_TypeDef *I2Cx)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_AF) == (I2C_SR1_AF));
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800087e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000882:	bf0c      	ite	eq
 8000884:	2301      	moveq	r3, #1
 8000886:	2300      	movne	r3, #0
 8000888:	b2db      	uxtb	r3, r3
}
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll SR1          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_STOPF) == (I2C_SR1_STOPF));
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	2b10      	cmp	r3, #16
 80008a8:	bf0c      	ite	eq
 80008aa:	2301      	moveq	r3, #1
 80008ac:	2300      	movne	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <LL_I2C_IsActiveFlag_BERR>:
  * @rmtoll SR1          BERR          LL_I2C_IsActiveFlag_BERR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BERR(I2C_TypeDef *I2Cx)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BERR) == (I2C_SR1_BERR));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008d0:	bf0c      	ite	eq
 80008d2:	2301      	moveq	r3, #1
 80008d4:	2300      	movne	r3, #0
 80008d6:	b2db      	uxtb	r3, r3
}
 80008d8:	4618      	mov	r0, r3
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <LL_I2C_IsActiveFlag_ARLO>:
  * @rmtoll SR1          ARLO          LL_I2C_IsActiveFlag_ARLO
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ARLO(I2C_TypeDef *I2Cx)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ARLO) == (I2C_SR1_ARLO));
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008f8:	bf0c      	ite	eq
 80008fa:	2301      	moveq	r3, #1
 80008fc:	2300      	movne	r3, #0
 80008fe:	b2db      	uxtb	r3, r3
}
 8000900:	4618      	mov	r0, r3
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <LL_I2C_IsActiveFlag_OVR>:
  * @rmtoll SR1          OVR           LL_I2C_IsActiveFlag_OVR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_OVR(I2C_TypeDef *I2Cx)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_OVR) == (I2C_SR1_OVR));
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800091c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000920:	bf0c      	ite	eq
 8000922:	2301      	moveq	r3, #1
 8000924:	2300      	movne	r3, #0
 8000926:	b2db      	uxtb	r3, r3
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000942:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <LL_I2C_ClearFlag_AF>:
  * @rmtoll SR1          AF            LL_I2C_ClearFlag_AF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_AF(I2C_TypeDef *I2Cx)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_AF);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	615a      	str	r2, [r3, #20]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <LL_I2C_ClearFlag_STOP>:
  *         CR1          PE            LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000986:	68fb      	ldr	r3, [r7, #12]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f043 0201 	orr.w	r2, r3, #1
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <LL_I2C_ClearFlag_BERR>:
  * @rmtoll SR1          BERR          LL_I2C_ClearFlag_BERR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_BERR(I2C_TypeDef *I2Cx)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_BERR);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	615a      	str	r2, [r3, #20]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <LL_I2C_ClearFlag_ARLO>:
  * @rmtoll SR1          ARLO          LL_I2C_ClearFlag_ARLO
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ARLO(I2C_TypeDef *I2Cx)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_ARLO);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	615a      	str	r2, [r3, #20]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <LL_I2C_ClearFlag_OVR>:
  * @rmtoll SR1          OVR           LL_I2C_ClearFlag_OVR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_OVR(I2C_TypeDef *I2Cx)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_OVR);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	615a      	str	r2, [r3, #20]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <LL_I2C_GetTransferDirection>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_I2C_DIRECTION_WRITE
  *         @arg @ref LL_I2C_DIRECTION_READ
  */
__STATIC_INLINE uint32_t LL_I2C_GetTransferDirection(I2C_TypeDef *I2Cx)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I2Cx->SR2, I2C_SR2_TRA));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	691b      	ldr	r3, [r3, #16]
 8000a28:	b2db      	uxtb	r3, r3
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	460b      	mov	r3, r1
 8000a40:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	691b      	ldr	r3, [r3, #16]
 8000a46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8000a4a:	78fb      	ldrb	r3, [r7, #3]
 8000a4c:	431a      	orrs	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	611a      	str	r2, [r3, #16]
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
	...

08000a60 <I2C_ReInit>:

    while ((SysTick->VAL - start_tick) < ticks);
}

void I2C_ReInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
    LL_I2C_Disable(I2C_slave_obj.I2Cx);
 8000a66:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <I2C_ReInit+0x98>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fe46 	bl	80006fc <LL_I2C_Disable>
    LL_I2C_DeInit(I2C_slave_obj.I2Cx);
 8000a70:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <I2C_ReInit+0x98>)
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f008 fc9b 	bl	80093b0 <LL_I2C_DeInit>

    LL_I2C_EnableClockStretching(I2C_slave_obj.I2Cx);
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <I2C_ReInit+0x98>)
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fe4c 	bl	800071c <LL_I2C_EnableClockStretching>
    LL_I2C_DisableGeneralCall(I2C_slave_obj.I2Cx);
 8000a84:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <I2C_ReInit+0x98>)
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fe57 	bl	800073c <LL_I2C_DisableGeneralCall>
    LL_I2C_DisableOwnAddress2(I2C_slave_obj.I2Cx);
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <I2C_ReInit+0x98>)
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fe62 	bl	800075c <LL_I2C_DisableOwnAddress2>

    LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000a98:	463b      	mov	r3, r7
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
 8000aa6:	615a      	str	r2, [r3, #20]
    I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
    I2C_InitStruct.ClockSpeed = 100000;
 8000aac:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <I2C_ReInit+0x9c>)
 8000aae:	607b      	str	r3, [r7, #4]
    I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
    I2C_InitStruct.OwnAddress1 = 36;  // 0x12
 8000ab4:	2324      	movs	r3, #36	@ 0x24
 8000ab6:	60fb      	str	r3, [r7, #12]
    I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000abc:	613b      	str	r3, [r7, #16]
    I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000abe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ac2:	617b      	str	r3, [r7, #20]
    LL_I2C_Init(I2C_slave_obj.I2Cx, &I2C_InitStruct);
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <I2C_ReInit+0x98>)
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	463a      	mov	r2, r7
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f008 fca9 	bl	8009424 <LL_I2C_Init>

    LL_I2C_EnableIT_EVT(I2C_slave_obj.I2Cx);
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <I2C_ReInit+0x98>)
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fe50 	bl	800077c <LL_I2C_EnableIT_EVT>
    LL_I2C_EnableIT_ERR(I2C_slave_obj.I2Cx);
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <I2C_ReInit+0x98>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fe7b 	bl	80007dc <LL_I2C_EnableIT_ERR>
    LL_I2C_Enable(I2C_slave_obj.I2Cx);
 8000ae6:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <I2C_ReInit+0x98>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fdf6 	bl	80006dc <LL_I2C_Enable>
}
 8000af0:	bf00      	nop
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200024b8 	.word	0x200024b8
 8000afc:	000186a0 	.word	0x000186a0

08000b00 <i2c_slave_clear>:

        rx_busy_counter = 0;
    }
}

void i2c_slave_clear(void) {
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
    I2C_slave_obj.reg_address = 0;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <i2c_slave_clear+0x30>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	715a      	strb	r2, [r3, #5]
    I2C_slave_obj.curr_idx = NONE;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <i2c_slave_clear+0x30>)
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b10:	601a      	str	r2, [r3, #0]
    I2C_slave_obj.reg_addr_rcvd = 0;
 8000b12:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <i2c_slave_clear+0x30>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	711a      	strb	r2, [r3, #4]
    I2C_slave_obj.ready_to_answer = 0;
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <i2c_slave_clear+0x30>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	719a      	strb	r2, [r3, #6]
    I2C_slave_obj.ready_to_write = 0;
 8000b1e:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <i2c_slave_clear+0x30>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	71da      	strb	r2, [r3, #7]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200024b8 	.word	0x200024b8

08000b34 <i2c_slave_init>:

int i2c_slave_init(I2C_TypeDef *I2Cx) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
    I2C_slave_obj.I2Cx = I2Cx;
 8000b3c:	4a09      	ldr	r2, [pc, #36]	@ (8000b64 <i2c_slave_init+0x30>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6093      	str	r3, [r2, #8]
    I2C_Slave_Status = I2C_Status_OK;
 8000b42:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <i2c_slave_init+0x34>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
    i2c_slave_clear();
 8000b48:	f7ff ffda 	bl	8000b00 <i2c_slave_clear>
    memset(external_memory, 0, sizeof(external_memory));
 8000b4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b50:	2100      	movs	r1, #0
 8000b52:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <i2c_slave_init+0x38>)
 8000b54:	f009 fee2 	bl	800a91c <memset>

    return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200024b8 	.word	0x200024b8
 8000b68:	200024c4 	.word	0x200024c4
 8000b6c:	200023b8 	.word	0x200023b8

08000b70 <I2C_event_IRQ>:

//static uint8_t data_index = 0;

void I2C_event_IRQ(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b096      	sub	sp, #88	@ 0x58
 8000b74:	af00      	add	r7, sp, #0
	I2C_Slave_Status = I2C_Status_BUSY;
 8000b76:	4b78      	ldr	r3, [pc, #480]	@ (8000d58 <I2C_event_IRQ+0x1e8>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
    if (LL_I2C_IsActiveFlag_ADDR(I2C_slave_obj.I2Cx))
 8000b7c:	4b77      	ldr	r3, [pc, #476]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fe61 	bl	8000848 <LL_I2C_IsActiveFlag_ADDR>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d01a      	beq.n	8000bc2 <I2C_event_IRQ+0x52>
    {
        LL_I2C_ClearFlag_ADDR(I2C_slave_obj.I2Cx);
 8000b8c:	4b73      	ldr	r3, [pc, #460]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fecf 	bl	8000934 <LL_I2C_ClearFlag_ADDR>
        if (LL_I2C_GetTransferDirection(I2C_slave_obj.I2Cx) == LL_I2C_DIRECTION_WRITE)
 8000b96:	4b71      	ldr	r3, [pc, #452]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff30 	bl	8000a00 <LL_I2C_GetTransferDirection>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	d108      	bne.n	8000bb8 <I2C_event_IRQ+0x48>
        {
            I2C_slave_obj.reg_addr_rcvd = 0;
 8000ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	711a      	strb	r2, [r3, #4]
            LL_I2C_EnableIT_BUF(I2C_slave_obj.I2Cx);
 8000bac:	4b6b      	ldr	r3, [pc, #428]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fdf3 	bl	800079c <LL_I2C_EnableIT_BUF>
 8000bb6:	e004      	b.n	8000bc2 <I2C_event_IRQ+0x52>
        else
        {
//            I2C_slave_obj.curr_idx = reg_get_index(I2C_slave_obj.reg_address);
//            data_index = 0;
//	          UART_SendStringRing(UART_CMDLINE, "FREAL\r\n");
            LL_I2C_EnableIT_BUF(I2C_slave_obj.I2Cx);
 8000bb8:	4b68      	ldr	r3, [pc, #416]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fded 	bl	800079c <LL_I2C_EnableIT_BUF>
        }
    }

    // Data Register Empty (Trans)
    if (LL_I2C_IsActiveFlag_TXE(I2C_slave_obj.I2Cx))
 8000bc2:	4b66      	ldr	r3, [pc, #408]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fe18 	bl	80007fc <LL_I2C_IsActiveFlag_TXE>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d052      	beq.n	8000c78 <I2C_event_IRQ+0x108>
    {
        char buffer[30];
        uint8_t data_to_send = 0x00;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        snprintf(buffer, sizeof(buffer), "\r\nI2C Before Index:[%d]\r\n", I2C_slave_obj.curr_idx);
 8000bd8:	4b60      	ldr	r3, [pc, #384]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000be0:	4a5f      	ldr	r2, [pc, #380]	@ (8000d60 <I2C_event_IRQ+0x1f0>)
 8000be2:	211e      	movs	r1, #30
 8000be4:	f009 fe64 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8000be8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bec:	4619      	mov	r1, r3
 8000bee:	485d      	ldr	r0, [pc, #372]	@ (8000d64 <I2C_event_IRQ+0x1f4>)
 8000bf0:	f000 fbd8 	bl	80013a4 <UART_SendStringRing>
		snprintf(buffer, sizeof(buffer), "\r\nI2C Index:[%d]\r\n", I2C_slave_obj.curr_idx);
 8000bf4:	4b59      	ldr	r3, [pc, #356]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000bfc:	4a5a      	ldr	r2, [pc, #360]	@ (8000d68 <I2C_event_IRQ+0x1f8>)
 8000bfe:	211e      	movs	r1, #30
 8000c00:	f009 fe56 	bl	800a8b0 <sniprintf>
		UART_SendStringRing(UART_CMDLINE,buffer);
 8000c04:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4856      	ldr	r0, [pc, #344]	@ (8000d64 <I2C_event_IRQ+0x1f4>)
 8000c0c:	f000 fbca 	bl	80013a4 <UART_SendStringRing>
		data_to_send = g_registers[I2C_slave_obj.curr_idx].value;
 8000c10:	4b52      	ldr	r3, [pc, #328]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4955      	ldr	r1, [pc, #340]	@ (8000d6c <I2C_event_IRQ+0x1fc>)
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	3302      	adds	r3, #2
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		snprintf(buffer, sizeof(buffer), "\r\nI2C GetDataIndex:[%d]\r\n", data_to_send);
 8000c26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000c2a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000c2e:	4a50      	ldr	r2, [pc, #320]	@ (8000d70 <I2C_event_IRQ+0x200>)
 8000c30:	211e      	movs	r1, #30
 8000c32:	f009 fe3d 	bl	800a8b0 <sniprintf>
		UART_SendStringRing(UART_CMDLINE,buffer);
 8000c36:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4849      	ldr	r0, [pc, #292]	@ (8000d64 <I2C_event_IRQ+0x1f4>)
 8000c3e:	f000 fbb1 	bl	80013a4 <UART_SendStringRing>
        snprintf(buffer, sizeof(buffer), "\r\nI2C Response:[%d]\r\n", data_to_send);
 8000c42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000c46:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000c4a:	4a4a      	ldr	r2, [pc, #296]	@ (8000d74 <I2C_event_IRQ+0x204>)
 8000c4c:	211e      	movs	r1, #30
 8000c4e:	f009 fe2f 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE,buffer);
 8000c52:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c56:	4619      	mov	r1, r3
 8000c58:	4842      	ldr	r0, [pc, #264]	@ (8000d64 <I2C_event_IRQ+0x1f4>)
 8000c5a:	f000 fba3 	bl	80013a4 <UART_SendStringRing>
        LL_I2C_TransmitData8(I2C_slave_obj.I2Cx, data_to_send);
 8000c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fee4 	bl	8000a36 <LL_I2C_TransmitData8>
        LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8000c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fda2 	bl	80007bc <LL_I2C_DisableIT_BUF>
    }
    // Data Register Not Empty (Recv)
    if (LL_I2C_IsActiveFlag_RXNE(I2C_slave_obj.I2Cx)) {
 8000c78:	4b38      	ldr	r3, [pc, #224]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fdd0 	bl	8000822 <LL_I2C_IsActiveFlag_RXNE>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d04a      	beq.n	8000d1e <I2C_event_IRQ+0x1ae>
        uint8_t received = LL_I2C_ReceiveData8(I2C_slave_obj.I2Cx);
 8000c88:	4b34      	ldr	r3, [pc, #208]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fec5 	bl	8000a1c <LL_I2C_ReceiveData8>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        if (!I2C_slave_obj.reg_addr_rcvd)
 8000c98:	4b30      	ldr	r3, [pc, #192]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000c9a:	791b      	ldrb	r3, [r3, #4]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d11f      	bne.n	8000ce2 <I2C_event_IRQ+0x172>
        {
            I2C_slave_obj.reg_address = received;
 8000ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000ca4:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000ca8:	7153      	strb	r3, [r2, #5]
            char buffer[50];
            snprintf(buffer, sizeof(buffer), "Address:[%d]\r\n", received);
 8000caa:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000cae:	1d38      	adds	r0, r7, #4
 8000cb0:	4a31      	ldr	r2, [pc, #196]	@ (8000d78 <I2C_event_IRQ+0x208>)
 8000cb2:	2132      	movs	r1, #50	@ 0x32
 8000cb4:	f009 fdfc 	bl	800a8b0 <sniprintf>
            UART_SendStringRing(UART_CMDLINE, buffer);
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4829      	ldr	r0, [pc, #164]	@ (8000d64 <I2C_event_IRQ+0x1f4>)
 8000cbe:	f000 fb71 	bl	80013a4 <UART_SendStringRing>
            I2C_slave_obj.reg_addr_rcvd = 1;
 8000cc2:	4b26      	ldr	r3, [pc, #152]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	711a      	strb	r2, [r3, #4]
            snprintf(buffer, sizeof(buffer), "GET INDEX:[%d]\r\n", I2C_slave_obj.curr_idx);
 8000cc8:	4b24      	ldr	r3, [pc, #144]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	1d38      	adds	r0, r7, #4
 8000cce:	4a2b      	ldr	r2, [pc, #172]	@ (8000d7c <I2C_event_IRQ+0x20c>)
 8000cd0:	2132      	movs	r1, #50	@ 0x32
 8000cd2:	f009 fded 	bl	800a8b0 <sniprintf>
            UART_SendStringRing(UART_CMDLINE, buffer);
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4822      	ldr	r0, [pc, #136]	@ (8000d64 <I2C_event_IRQ+0x1f4>)
 8000cdc:	f000 fb62 	bl	80013a4 <UART_SendStringRing>
 8000ce0:	e01d      	b.n	8000d1e <I2C_event_IRQ+0x1ae>
        }
        else
        {
            if (g_registers[I2C_slave_obj.curr_idx].access == FULL_ACCESS)
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	4921      	ldr	r1, [pc, #132]	@ (8000d6c <I2C_event_IRQ+0x1fc>)
 8000ce8:	4613      	mov	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4413      	add	r3, r2
 8000cee:	440b      	add	r3, r1
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d10a      	bne.n	8000d0e <I2C_event_IRQ+0x19e>
            {
                 g_registers[I2C_slave_obj.curr_idx].value = received;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	491b      	ldr	r1, [pc, #108]	@ (8000d6c <I2C_event_IRQ+0x1fc>)
 8000cfe:	4613      	mov	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4413      	add	r3, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	3302      	adds	r3, #2
 8000d08:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8000d0c:	701a      	strb	r2, [r3, #0]
            }
            I2C_slave_obj.reg_addr_rcvd = 0;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	711a      	strb	r2, [r3, #4]
            LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fd4f 	bl	80007bc <LL_I2C_DisableIT_BUF>
        }
    }

    // STOP condition detected
    if (LL_I2C_IsActiveFlag_STOP(I2C_slave_obj.I2Cx)) {
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fdb7 	bl	8000896 <LL_I2C_IsActiveFlag_STOP>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00f      	beq.n	8000d4e <I2C_event_IRQ+0x1de>
        LL_I2C_ClearFlag_STOP(I2C_slave_obj.I2Cx);
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fe20 	bl	8000978 <LL_I2C_ClearFlag_STOP>
        I2C_slave_obj.reg_addr_rcvd = 0;
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	711a      	strb	r2, [r3, #4]
//        I2C_slave_obj.curr_idx = NONE;
//        data_index = 0;
        LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <I2C_event_IRQ+0x1ec>)
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fd3a 	bl	80007bc <LL_I2C_DisableIT_BUF>
        I2C_Slave_Status = I2C_Status_OK;
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <I2C_event_IRQ+0x1e8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
    }
}
 8000d4e:	bf00      	nop
 8000d50:	3758      	adds	r7, #88	@ 0x58
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200024c4 	.word	0x200024c4
 8000d5c:	200024b8 	.word	0x200024b8
 8000d60:	0800b240 	.word	0x0800b240
 8000d64:	40011000 	.word	0x40011000
 8000d68:	0800b25c 	.word	0x0800b25c
 8000d6c:	200024c8 	.word	0x200024c8
 8000d70:	0800b270 	.word	0x0800b270
 8000d74:	0800b28c 	.word	0x0800b28c
 8000d78:	0800b2a4 	.word	0x0800b2a4
 8000d7c:	0800b2b4 	.word	0x0800b2b4

08000d80 <I2C_error_IRQ>:

void I2C_error_IRQ(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    // Handle errors
	UART_SendStringRing(UART_CMDLINE,"I2C ERROR!!!\r\n");
 8000d84:	4921      	ldr	r1, [pc, #132]	@ (8000e0c <I2C_error_IRQ+0x8c>)
 8000d86:	4822      	ldr	r0, [pc, #136]	@ (8000e10 <I2C_error_IRQ+0x90>)
 8000d88:	f000 fb0c 	bl	80013a4 <UART_SendStringRing>
	I2C_Slave_Status = I2C_Status_OK;
 8000d8c:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <I2C_error_IRQ+0x94>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
    if (LL_I2C_IsActiveFlag_BERR(I2C_slave_obj.I2Cx)) {
 8000d92:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <I2C_error_IRQ+0x98>)
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fd90 	bl	80008bc <LL_I2C_IsActiveFlag_BERR>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d004      	beq.n	8000dac <I2C_error_IRQ+0x2c>

        LL_I2C_ClearFlag_BERR(I2C_slave_obj.I2Cx);
 8000da2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <I2C_error_IRQ+0x98>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fdfa 	bl	80009a0 <LL_I2C_ClearFlag_BERR>
    }

    if (LL_I2C_IsActiveFlag_ARLO(I2C_slave_obj.I2Cx)) {
 8000dac:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <I2C_error_IRQ+0x98>)
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fd97 	bl	80008e4 <LL_I2C_IsActiveFlag_ARLO>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d004      	beq.n	8000dc6 <I2C_error_IRQ+0x46>
        LL_I2C_ClearFlag_ARLO(I2C_slave_obj.I2Cx);
 8000dbc:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <I2C_error_IRQ+0x98>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fdfd 	bl	80009c0 <LL_I2C_ClearFlag_ARLO>
    }

    if (LL_I2C_IsActiveFlag_AF(I2C_slave_obj.I2Cx)) {
 8000dc6:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <I2C_error_IRQ+0x98>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fd4f 	bl	800086e <LL_I2C_IsActiveFlag_AF>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d004      	beq.n	8000de0 <I2C_error_IRQ+0x60>
        LL_I2C_ClearFlag_AF(I2C_slave_obj.I2Cx);
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <I2C_error_IRQ+0x98>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fdbc 	bl	8000958 <LL_I2C_ClearFlag_AF>
    }

    if (LL_I2C_IsActiveFlag_OVR(I2C_slave_obj.I2Cx)) {
 8000de0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <I2C_error_IRQ+0x98>)
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fd91 	bl	800090c <LL_I2C_IsActiveFlag_OVR>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d004      	beq.n	8000dfa <I2C_error_IRQ+0x7a>
        LL_I2C_ClearFlag_OVR(I2C_slave_obj.I2Cx);
 8000df0:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <I2C_error_IRQ+0x98>)
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fdf3 	bl	80009e0 <LL_I2C_ClearFlag_OVR>
    }
    I2C_ReInit();
 8000dfa:	f7ff fe31 	bl	8000a60 <I2C_ReInit>
    i2c_slave_init(I2C_slave_obj.I2Cx);
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <I2C_error_IRQ+0x98>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fe96 	bl	8000b34 <i2c_slave_init>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	0800b2c8 	.word	0x0800b2c8
 8000e10:	40011000 	.word	0x40011000
 8000e14:	200024c4 	.word	0x200024c4
 8000e18:	200024b8 	.word	0x200024b8

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	@ (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	@ (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f7ff ffc2 	bl	8000e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <systick_timer_start+0x1c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <systick_timer_start+0x1c>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <systick_timer_init+0x1c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <systick_timer_init+0x20>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	099b      	lsrs	r3, r3, #6
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ffc3 	bl	8000e70 <SysTick_Config>
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200022c0 	.word	0x200022c0
 8000ef4:	10624dd3 	.word	0x10624dd3

08000ef8 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	bf0c      	ite	eq
 8000f0c:	2301      	moveq	r3, #1
 8000f0e:	2300      	movne	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf0c      	ite	eq
 8000f32:	2301      	moveq	r3, #1
 8000f34:	2300      	movne	r3, #0
 8000f36:	b2db      	uxtb	r3, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0308 	and.w	r3, r3, #8
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	bf0c      	ite	eq
 8000f58:	2301      	moveq	r3, #1
 8000f5a:	2300      	movne	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0320 	and.w	r3, r3, #32
 8000f7a:	2b20      	cmp	r3, #32
 8000f7c:	bf0c      	ite	eq
 8000f7e:	2301      	moveq	r3, #1
 8000f80:	2300      	movne	r3, #0
 8000f82:	b2db      	uxtb	r3, r3
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fa0:	2b80      	cmp	r3, #128	@ 0x80
 8000fa2:	bf0c      	ite	eq
 8000fa4:	2301      	moveq	r3, #1
 8000fa6:	2300      	movne	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b085      	sub	sp, #20
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
}
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b085      	sub	sp, #20
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800100c:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001014:	68fb      	ldr	r3, [r7, #12]
}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001022:	b480      	push	{r7}
 8001024:	b089      	sub	sp, #36	@ 0x24
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	330c      	adds	r3, #12
 800102e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	e853 3f00 	ldrex	r3, [r3]
 8001036:	60bb      	str	r3, [r7, #8]
   return(result);
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	f043 0320 	orr.w	r3, r3, #32
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	330c      	adds	r3, #12
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	61ba      	str	r2, [r7, #24]
 8001048:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800104a:	6979      	ldr	r1, [r7, #20]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	e841 2300 	strex	r3, r2, [r1]
 8001052:	613b      	str	r3, [r7, #16]
   return(result);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1e7      	bne.n	800102a <LL_USART_EnableIT_RXNE+0x8>
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	3724      	adds	r7, #36	@ 0x24
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	@ 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	330c      	adds	r3, #12
 8001074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	e853 3f00 	ldrex	r3, [r3]
 800107c:	60bb      	str	r3, [r7, #8]
   return(result);
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	330c      	adds	r3, #12
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	61ba      	str	r2, [r7, #24]
 800108e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001090:	6979      	ldr	r1, [r7, #20]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	e841 2300 	strex	r3, r2, [r1]
 8001098:	613b      	str	r3, [r7, #16]
   return(result);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1e7      	bne.n	8001070 <LL_USART_EnableIT_TXE+0x8>
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3724      	adds	r7, #36	@ 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b089      	sub	sp, #36	@ 0x24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	330c      	adds	r3, #12
 80010ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	e853 3f00 	ldrex	r3, [r3]
 80010c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	f023 0320 	bic.w	r3, r3, #32
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	330c      	adds	r3, #12
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	61ba      	str	r2, [r7, #24]
 80010d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010d6:	6979      	ldr	r1, [r7, #20]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	e841 2300 	strex	r3, r2, [r1]
 80010de:	613b      	str	r3, [r7, #16]
   return(result);
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1e7      	bne.n	80010b6 <LL_USART_DisableIT_RXNE+0x8>
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	3724      	adds	r7, #36	@ 0x24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	330c      	adds	r3, #12
 8001100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	e853 3f00 	ldrex	r3, [r3]
 8001108:	60bb      	str	r3, [r7, #8]
   return(result);
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	330c      	adds	r3, #12
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	61ba      	str	r2, [r7, #24]
 800111a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800111c:	6979      	ldr	r1, [r7, #20]
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	e841 2300 	strex	r3, r2, [r1]
 8001124:	613b      	str	r3, [r7, #16]
   return(result);
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1e7      	bne.n	80010fc <LL_USART_DisableIT_TXE+0x8>
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3724      	adds	r7, #36	@ 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	f003 0320 	and.w	r3, r3, #32
 800114a:	2b20      	cmp	r3, #32
 800114c:	bf0c      	ite	eq
 800114e:	2301      	moveq	r3, #1
 8001150:	2300      	movne	r3, #0
 8001152:	b2db      	uxtb	r3, r3
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001170:	2b80      	cmp	r3, #128	@ 0x80
 8001172:	bf0c      	ite	eq
 8001174:	2301      	moveq	r3, #1
 8001176:	2300      	movne	r3, #0
 8001178:	b2db      	uxtb	r3, r3
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	b2db      	uxtb	r3, r3
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80011ac:	78fa      	ldrb	r2, [r7, #3]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	605a      	str	r2, [r3, #4]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <get_usart_buffer>:
    }
};

void store_char(unsigned char c, ring_buffer *buffer, USART_TypeDef *uart);

USART_Buffer* get_usart_buffer(USART_TypeDef *uart) {
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < USART_COUNT; i++) {
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	e015      	b.n	80011fa <get_usart_buffer+0x3a>
        if (usart_buffers[i].uart == uart) {
 80011ce:	4910      	ldr	r1, [pc, #64]	@ (8001210 <get_usart_buffer+0x50>)
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	4613      	mov	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4413      	add	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d107      	bne.n	80011f4 <get_usart_buffer+0x34>
            return &usart_buffers[i];
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	4613      	mov	r3, r2
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	4413      	add	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4a08      	ldr	r2, [pc, #32]	@ (8001210 <get_usart_buffer+0x50>)
 80011f0:	4413      	add	r3, r2
 80011f2:	e006      	b.n	8001202 <get_usart_buffer+0x42>
    for (int i = 0; i < USART_COUNT; i++) {
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3301      	adds	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	dde6      	ble.n	80011ce <get_usart_buffer+0xe>
        }
    }
    return NULL;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000000 	.word	0x20000000

08001214 <store_char>:
        LL_USART_EnableIT_ERROR(buffer->uart);
        LL_USART_EnableIT_RXNE(buffer->uart);
    }
}

void store_char(unsigned char c, ring_buffer *buffer, USART_TypeDef *uart) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	73fb      	strb	r3, [r7, #15]
    int i = (buffer->head + 1) % buffer->size;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	3301      	adds	r3, #1
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	68d2      	ldr	r2, [r2, #12]
 800122c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001230:	fb01 f202 	mul.w	r2, r1, r2
 8001234:	1a9b      	subs	r3, r3, r2
 8001236:	617b      	str	r3, [r7, #20]

    if (i != buffer->tail) {
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	429a      	cmp	r2, r3
 8001240:	d00f      	beq.n	8001262 <store_char+0x4e>
        ATOMIC_BLOCK_START(uart);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ff33 	bl	80010ae <LL_USART_DisableIT_RXNE>
        buffer->buffer[buffer->head] = c;
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4413      	add	r3, r2
 8001252:	7bfa      	ldrb	r2, [r7, #15]
 8001254:	701a      	strb	r2, [r3, #0]
        buffer->head = i;
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	605a      	str	r2, [r3, #4]
        ATOMIC_BLOCK_END(uart);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff fee0 	bl	8001022 <LL_USART_EnableIT_RXNE>
    }
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <UART_ReadRing>:

int UART_ReadRing(USART_TypeDef *uart) {
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
    USART_Buffer *buffer = get_usart_buffer(uart);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ffa4 	bl	80011c0 <get_usart_buffer>
 8001278:	6178      	str	r0, [r7, #20]
    if (!buffer) return -1;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <UART_ReadRing+0x1c>
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
 8001284:	e025      	b.n	80012d2 <UART_ReadRing+0x68>

    ring_buffer *rx_buffer = &buffer->rx_buffer;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3304      	adds	r3, #4
 800128a:	613b      	str	r3, [r7, #16]

    if (rx_buffer->head == rx_buffer->tail) {
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	429a      	cmp	r2, r3
 8001296:	d102      	bne.n	800129e <UART_ReadRing+0x34>
        return -1;
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
 800129c:	e019      	b.n	80012d2 <UART_ReadRing+0x68>
    } else {
        ATOMIC_BLOCK_START(uart);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ff05 	bl	80010ae <LL_USART_DisableIT_RXNE>
        unsigned char c = rx_buffer->buffer[rx_buffer->tail];
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	4413      	add	r3, r2
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	73fb      	strb	r3, [r7, #15]
        rx_buffer->tail = (rx_buffer->tail + 1) % rx_buffer->size;
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	3301      	adds	r3, #1
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68d2      	ldr	r2, [r2, #12]
 80012bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80012c0:	fb01 f202 	mul.w	r2, r1, r2
 80012c4:	1a9a      	subs	r2, r3, r2
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	609a      	str	r2, [r3, #8]
        ATOMIC_BLOCK_END(uart);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fea9 	bl	8001022 <LL_USART_EnableIT_RXNE>
        return c;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
    }
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <UART_WriteRing>:

void UART_WriteRing(USART_TypeDef *uart, int c) {
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
    USART_Buffer *buffer = get_usart_buffer(uart);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff6b 	bl	80011c0 <get_usart_buffer>
 80012ea:	6178      	str	r0, [r7, #20]
    if (!buffer || c < 0) return;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d02b      	beq.n	800134a <UART_WriteRing+0x70>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	db28      	blt.n	800134a <UART_WriteRing+0x70>

    ring_buffer *tx_buffer = &buffer->tx_buffer;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	3314      	adds	r3, #20
 80012fc:	613b      	str	r3, [r7, #16]
    int i = (tx_buffer->head + 1) % tx_buffer->size;
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	3301      	adds	r3, #1
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	68d2      	ldr	r2, [r2, #12]
 8001308:	fbb3 f1f2 	udiv	r1, r3, r2
 800130c:	fb01 f202 	mul.w	r2, r1, r2
 8001310:	1a9b      	subs	r3, r3, r2
 8001312:	60fb      	str	r3, [r7, #12]

    ATOMIC_BLOCK_START(uart);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff feca 	bl	80010ae <LL_USART_DisableIT_RXNE>
    while (i == tx_buffer->tail);
 800131a:	bf00      	nop
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	429a      	cmp	r2, r3
 8001324:	d0fa      	beq.n	800131c <UART_WriteRing+0x42>

    tx_buffer->buffer[tx_buffer->head] = (uint8_t)c;
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4413      	add	r3, r2
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	701a      	strb	r2, [r3, #0]
    tx_buffer->head = i;
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	605a      	str	r2, [r3, #4]
    ATOMIC_BLOCK_END(uart);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fe70 	bl	8001022 <LL_USART_EnableIT_RXNE>

    LL_USART_EnableIT_TXE(uart);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fe90 	bl	8001068 <LL_USART_EnableIT_TXE>
 8001348:	e000      	b.n	800134c <UART_WriteRing+0x72>
    if (!buffer || c < 0) return;
 800134a:	bf00      	nop
}
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(USART_TypeDef *uart) {
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
    USART_Buffer *buffer = get_usart_buffer(uart);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ff30 	bl	80011c0 <get_usart_buffer>
 8001360:	60f8      	str	r0, [r7, #12]
    if (!buffer) return 0;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <IsDataAvailable+0x1a>
 8001368:	2300      	movs	r3, #0
 800136a:	e017      	b.n	800139c <IsDataAvailable+0x4a>

    ring_buffer *rx_buffer = &buffer->rx_buffer;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3304      	adds	r3, #4
 8001370:	60bb      	str	r3, [r7, #8]
    return (uint16_t)(rx_buffer->size + rx_buffer->head - rx_buffer->tail) % rx_buffer->size;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	b29a      	uxth	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	b29b      	uxth	r3, r3
 800137e:	4413      	add	r3, r2
 8001380:	b29a      	uxth	r2, r3
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	b29b      	uxth	r3, r3
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	b29b      	uxth	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	fbb2 f1f3 	udiv	r1, r2, r3
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	1ad3      	subs	r3, r2, r3
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <UART_SendStringRing>:
/* sends the string to the uart
 */
void UART_SendStringRing (USART_TypeDef *uart, const char *s)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
	while(*s) UART_WriteRing(uart, *s++);
 80013ae:	e007      	b.n	80013c0 <UART_SendStringRing+0x1c>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	603a      	str	r2, [r7, #0]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ff8d 	bl	80012da <UART_WriteRing>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f3      	bne.n	80013b0 <UART_SendStringRing+0xc>
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <UART_Flush_RingRx>:
//    va_end(args);
//
//    UART_SendStringRing(huart, buffer);
//}

void UART_Flush_RingRx(USART_TypeDef *uart) {
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
    USART_Buffer *buffer = get_usart_buffer(uart);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff fef0 	bl	80011c0 <get_usart_buffer>
 80013e0:	60f8      	str	r0, [r7, #12]
    if (!buffer) return;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d011      	beq.n	800140c <UART_Flush_RingRx+0x3a>

    ring_buffer *rx_buffer = &buffer->rx_buffer;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3304      	adds	r3, #4
 80013ec:	60bb      	str	r3, [r7, #8]
    memset(rx_buffer->buffer, '\0', rx_buffer->size);
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	461a      	mov	r2, r3
 80013f8:	2100      	movs	r1, #0
 80013fa:	f009 fa8f 	bl	800a91c <memset>
    rx_buffer->head = 0;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
    rx_buffer->tail = 0;
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	e000      	b.n	800140e <UART_Flush_RingRx+0x3c>
    if (!buffer) return;
 800140c:	bf00      	nop
}
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <UART_Ring_ISR>:
    memset(tx_buffer->buffer, '\0', tx_buffer->size);
    tx_buffer->head = 0;
    tx_buffer->tail = 0;
}

void UART_Ring_ISR(USART_TypeDef *uart) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
    USART_Buffer *buffer = get_usart_buffer(uart);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fecf 	bl	80011c0 <get_usart_buffer>
 8001422:	6178      	str	r0, [r7, #20]
    if (!buffer) return;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d068      	beq.n	80014fc <UART_Ring_ISR+0xe8>

    ring_buffer *rx_buffer = &buffer->rx_buffer;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3304      	adds	r3, #4
 800142e:	613b      	str	r3, [r7, #16]
    ring_buffer *tx_buffer = &buffer->tx_buffer;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3314      	adds	r3, #20
 8001434:	60fb      	str	r3, [r7, #12]

    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) && (LL_USART_IsEnabledIT_RXNE(uart) != RESET)) {
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fd97 	bl	8000f6a <LL_USART_IsActiveFlag_RXNE>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d02d      	beq.n	800149e <UART_Ring_ISR+0x8a>
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fe79 	bl	800113a <LL_USART_IsEnabledIT_RXNE>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d027      	beq.n	800149e <UART_Ring_ISR+0x8a>
        unsigned char data = LL_USART_ReceiveData8(uart);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fe99 	bl	8001186 <LL_USART_ReceiveData8>
 8001454:	4603      	mov	r3, r0
 8001456:	72fb      	strb	r3, [r7, #11]

        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fd73 	bl	8000f44 <LL_USART_IsActiveFlag_ORE>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10b      	bne.n	800147c <UART_Ring_ISR+0x68>
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fd47 	bl	8000ef8 <LL_USART_IsActiveFlag_FE>
 800146a:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 800146c:	2b00      	cmp	r3, #0
 800146e:	d105      	bne.n	800147c <UART_Ring_ISR+0x68>
            (LL_USART_IsActiveFlag_NE(uart) != RESET)) {
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff fd54 	bl	8000f1e <LL_USART_IsActiveFlag_NE>
 8001476:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8001478:	2b00      	cmp	r3, #0
 800147a:	d009      	beq.n	8001490 <UART_Ring_ISR+0x7c>
            LL_USART_ClearFlag_ORE(uart);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fdbe 	bl	8000ffe <LL_USART_ClearFlag_ORE>
            LL_USART_ClearFlag_FE(uart);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fd97 	bl	8000fb6 <LL_USART_ClearFlag_FE>
            LL_USART_ClearFlag_NE(uart);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff fda6 	bl	8000fda <LL_USART_ClearFlag_NE>
        } else {
        	store_char(data, rx_buffer, uart);
        }
        return;
 800148e:	e036      	b.n	80014fe <UART_Ring_ISR+0xea>
        	store_char(data, rx_buffer, uart);
 8001490:	7afb      	ldrb	r3, [r7, #11]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6939      	ldr	r1, [r7, #16]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff febc 	bl	8001214 <store_char>
        return;
 800149c:	e02f      	b.n	80014fe <UART_Ring_ISR+0xea>
    }

    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) && (LL_USART_IsEnabledIT_TXE(uart) != RESET)) {
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fd76 	bl	8000f90 <LL_USART_IsActiveFlag_TXE>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d029      	beq.n	80014fe <UART_Ring_ISR+0xea>
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fe58 	bl	8001160 <LL_USART_IsEnabledIT_TXE>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d023      	beq.n	80014fe <UART_Ring_ISR+0xea>
        if (tx_buffer->head == tx_buffer->tail) {
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d103      	bne.n	80014ca <UART_Ring_ISR+0xb6>
            LL_USART_DisableIT_TXE(uart);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff fe16 	bl	80010f4 <LL_USART_DisableIT_TXE>
 80014c8:	e019      	b.n	80014fe <UART_Ring_ISR+0xea>
        } else {
            unsigned char c = tx_buffer->buffer[tx_buffer->tail];
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	72bb      	strb	r3, [r7, #10]
            tx_buffer->tail = (tx_buffer->tail + 1) % tx_buffer->size;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	3301      	adds	r3, #1
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	68d2      	ldr	r2, [r2, #12]
 80014e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80014e6:	fb01 f202 	mul.w	r2, r1, r2
 80014ea:	1a9a      	subs	r2, r3, r2
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	609a      	str	r2, [r3, #8]
            LL_USART_TransmitData8(uart, c);
 80014f0:	7abb      	ldrb	r3, [r7, #10]
 80014f2:	4619      	mov	r1, r3
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff fe53 	bl	80011a0 <LL_USART_TransmitData8>
 80014fa:	e000      	b.n	80014fe <UART_Ring_ISR+0xea>
    if (!buffer) return;
 80014fc:	bf00      	nop
        }
    }
}
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <CmdLineProcess>:
//! \b CMDLINE_TOO_MANY_ARGS if there are more arguments than can be parsed.
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t CmdLineProcess(char *pcCmdLine)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 800150c:	2301      	movs	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 8001518:	e01f      	b.n	800155a <CmdLineProcess+0x56>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b20      	cmp	r3, #32
 8001520:	d105      	bne.n	800152e <CmdLineProcess+0x2a>
        {
            *pcChar = 0;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e012      	b.n	8001554 <CmdLineProcess+0x50>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00f      	beq.n	8001554 <CmdLineProcess+0x50>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	2b07      	cmp	r3, #7
 8001538:	d80a      	bhi.n	8001550 <CmdLineProcess+0x4c>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 800153a:	491e      	ldr	r1, [pc, #120]	@ (80015b4 <CmdLineProcess+0xb0>)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	3301      	adds	r3, #1
 8001548:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
 800154e:	e001      	b.n	8001554 <CmdLineProcess+0x50>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 8001550:	2302      	movs	r3, #2
 8001552:	e02b      	b.n	80015ac <CmdLineProcess+0xa8>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	3301      	adds	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1db      	bne.n	800151a <CmdLineProcess+0x16>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d020      	beq.n	80015aa <CmdLineProcess+0xa6>
    {
        ui8Argc++;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	3301      	adds	r3, #1
 800156c:	613b      	str	r3, [r7, #16]
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 800156e:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <CmdLineProcess+0xb4>)
 8001570:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 8001572:	e016      	b.n	80015a2 <CmdLineProcess+0x9e>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 8001574:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <CmdLineProcess+0xb0>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	4610      	mov	r0, r2
 8001580:	f7fe fe26 	bl	80001d0 <strcmp>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d108      	bne.n	800159c <CmdLineProcess+0x98>
            {
                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4908      	ldr	r1, [pc, #32]	@ (80015b4 <CmdLineProcess+0xb0>)
 8001592:	4610      	mov	r0, r2
 8001594:	4798      	blx	r3
 8001596:	4603      	mov	r3, r0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	e007      	b.n	80015ac <CmdLineProcess+0xa8>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	330c      	adds	r3, #12
 80015a0:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1e4      	bne.n	8001574 <CmdLineProcess+0x70>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200031c8 	.word	0x200031c8
 80015b8:	20000060 	.word	0x20000060

080015bc <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d101      	bne.n	80015d4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(const SPI_TypeDef *SPIx)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015f2:	2b80      	cmp	r3, #128	@ 0x80
 80015f4:	d101      	bne.n	80015fa <LL_SPI_IsActiveFlag_BSY+0x18>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <LL_SPI_IsActiveFlag_BSY+0x1a>
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	330c      	adds	r3, #12
 8001618:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	78fa      	ldrb	r2, [r7, #3]
 800161e:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	619a      	str	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	041a      	lsls	r2, r3, #16
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	619a      	str	r2, [r3, #24]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <CommandLine_Init>:
		9
	}
};

void CommandLine_Init(USART_TypeDef *handle_uart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
    UART_CMDLINE = handle_uart;
 8001670:	4a16      	ldr	r2, [pc, #88]	@ (80016cc <CommandLine_Init+0x64>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
    memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
 8001676:	2240      	movs	r2, #64	@ 0x40
 8001678:	2100      	movs	r1, #0
 800167a:	4815      	ldr	r0, [pc, #84]	@ (80016d0 <CommandLine_Init+0x68>)
 800167c:	f009 f94e 	bl	800a91c <memset>
    s_commandBufferIndex = 0;
 8001680:	4b14      	ldr	r3, [pc, #80]	@ (80016d4 <CommandLine_Init+0x6c>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
    Command_SendSplash();
 8001686:	f001 fca9 	bl	8002fdc <Command_SendSplash>
    UART_SendStringRing(UART_CMDLINE, "EXP FIRMWARE V1.1.0\r\n");
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <CommandLine_Init+0x64>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4912      	ldr	r1, [pc, #72]	@ (80016d8 <CommandLine_Init+0x70>)
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe87 	bl	80013a4 <UART_SendStringRing>
    UART_SendStringRing(UART_CMDLINE, "DAC Set to [100]\r\n");
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <CommandLine_Init+0x64>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4910      	ldr	r1, [pc, #64]	@ (80016dc <CommandLine_Init+0x74>)
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fe81 	bl	80013a4 <UART_SendStringRing>
    UART_Flush_RingRx(UART_CMDLINE);
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <CommandLine_Init+0x64>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fe93 	bl	80013d2 <UART_Flush_RingRx>
    DAC_Write(0, 100);
 80016ac:	2164      	movs	r1, #100	@ 0x64
 80016ae:	2000      	movs	r0, #0
 80016b0:	f002 f8f2 	bl	8003898 <DAC_Write>
    HAL_Delay(100);
 80016b4:	2064      	movs	r0, #100	@ 0x64
 80016b6:	f005 fc59 	bl	8006f6c <HAL_Delay>
    DAC_Write(0, 100);
 80016ba:	2164      	movs	r1, #100	@ 0x64
 80016bc:	2000      	movs	r0, #0
 80016be:	f002 f8eb 	bl	8003898 <DAC_Write>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20003434 	.word	0x20003434
 80016d0:	20003438 	.word	0x20003438
 80016d4:	20003478 	.word	0x20003478
 80016d8:	0800baec 	.word	0x0800baec
 80016dc:	0800bb04 	.word	0x0800bb04

080016e0 <CommandLine_Task_Update>:

static void CommandLine_Task_Update(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
    char rxData;
    if (IsDataAvailable(UART_CMDLINE))
 80016e6:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <CommandLine_Task_Update+0x58>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fe31 	bl	8001352 <IsDataAvailable>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d01c      	beq.n	8001730 <CommandLine_Task_Update+0x50>
    {
        rxData = UART_ReadRing(UART_CMDLINE);
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <CommandLine_Task_Update+0x58>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fdb5 	bl	800126a <UART_ReadRing>
 8001700:	4603      	mov	r3, r0
 8001702:	71fb      	strb	r3, [r7, #7]

        if (rxData == 27)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	2b1b      	cmp	r3, #27
 8001708:	d106      	bne.n	8001718 <CommandLine_Task_Update+0x38>
        {
            UART_SendStringRing(UART_CMDLINE, "\033[2J");
 800170a:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <CommandLine_Task_Update+0x58>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	490b      	ldr	r1, [pc, #44]	@ (800173c <CommandLine_Task_Update+0x5c>)
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fe47 	bl	80013a4 <UART_SendStringRing>
 8001716:	e006      	b.n	8001726 <CommandLine_Task_Update+0x46>
        }
        else
        {
            UART_WriteRing(UART_CMDLINE, rxData);
 8001718:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <CommandLine_Task_Update+0x58>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	79fa      	ldrb	r2, [r7, #7]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fdda 	bl	80012da <UART_WriteRing>
        }
        process_command(rxData, &pContext);
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	4905      	ldr	r1, [pc, #20]	@ (8001740 <CommandLine_Task_Update+0x60>)
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f80a 	bl	8001744 <process_command>
    }
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20003434 	.word	0x20003434
 800173c:	0800bb18 	.word	0x0800bb18
 8001740:	200031ec 	.word	0x200031ec

08001744 <process_command>:

void process_command(char rxData, CMDLine_Context *context)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b0bc      	sub	sp, #240	@ 0xf0
 8001748:	af02      	add	r7, sp, #8
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
    if (rxData == 27)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b1b      	cmp	r3, #27
 8001754:	d132      	bne.n	80017bc <process_command+0x78>
    {
        s_DateTime rtcTime = {0};
 8001756:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	809a      	strh	r2, [r3, #4]
        DateTime_GetRTC(&rtcTime);
 8001760:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001764:	4618      	mov	r0, r3
 8001766:	f002 f9ef 	bl	8003b48 <DateTime_GetRTC>
        char x_timeBuffer[30];
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
                 "[%02u:%02u:%02u]",
                 rtcTime.hour, rtcTime.minute, rtcTime.second);
 800176a:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
 800176e:	4619      	mov	r1, r3
                 rtcTime.hour, rtcTime.minute, rtcTime.second);
 8001770:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 8001774:	f897 20e1 	ldrb.w	r2, [r7, #225]	@ 0xe1
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
 8001778:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 800177c:	9201      	str	r2, [sp, #4]
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	460b      	mov	r3, r1
 8001782:	4ab9      	ldr	r2, [pc, #740]	@ (8001a68 <process_command+0x324>)
 8001784:	211e      	movs	r1, #30
 8001786:	f009 f893 	bl	800a8b0 <sniprintf>
        char buffer[60];
        snprintf(buffer, sizeof(buffer), "\r\n%s%s$ ", x_timeBuffer, NAME_SHELL);
 800178a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800178e:	f107 0008 	add.w	r0, r7, #8
 8001792:	4ab6      	ldr	r2, [pc, #728]	@ (8001a6c <process_command+0x328>)
 8001794:	9200      	str	r2, [sp, #0]
 8001796:	4ab6      	ldr	r2, [pc, #728]	@ (8001a70 <process_command+0x32c>)
 8001798:	213c      	movs	r1, #60	@ 0x3c
 800179a:	f009 f889 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 800179e:	4bb5      	ldr	r3, [pc, #724]	@ (8001a74 <process_command+0x330>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f107 0208 	add.w	r2, r7, #8
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fdfb 	bl	80013a4 <UART_SendStringRing>
        context->commandBufferIndex = 0;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        context->commandBuffer[0] = '\0';
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
    }

    if (rxData == 0x2D) // '-' key (history up)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b2d      	cmp	r3, #45	@ 0x2d
 80017c0:	d16b      	bne.n	800189a <process_command+0x156>
    {
        // Get Software DateTime
        s_DateTime rtcTime = {0};
 80017c2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	809a      	strh	r2, [r3, #4]
        DateTime_GetRTC(&rtcTime);
 80017cc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 f9b9 	bl	8003b48 <DateTime_GetRTC>
        char x_timeBuffer[30];
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
                 "[%02u:%02u:%02u]",
                 rtcTime.hour, rtcTime.minute, rtcTime.second);
 80017d6:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
 80017da:	4619      	mov	r1, r3
                 rtcTime.hour, rtcTime.minute, rtcTime.second);
 80017dc:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 80017e0:	f897 20b9 	ldrb.w	r2, [r7, #185]	@ 0xb9
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
 80017e4:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80017e8:	9201      	str	r2, [sp, #4]
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	460b      	mov	r3, r1
 80017ee:	4a9e      	ldr	r2, [pc, #632]	@ (8001a68 <process_command+0x324>)
 80017f0:	211e      	movs	r1, #30
 80017f2:	f009 f85d 	bl	800a8b0 <sniprintf>
        if (context->historyIndex > 0)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	f8b3 3244 	ldrh.w	r3, [r3, #580]	@ 0x244
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d007      	beq.n	8001810 <process_command+0xcc>
        {
            context->historyIndex--;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	f8b3 3244 	ldrh.w	r3, [r3, #580]	@ 0x244
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	f8a3 2244 	strh.w	r2, [r3, #580]	@ 0x244
        }

        // Load history command
        if (context->historyIndex < context->historyCount)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f8b3 2244 	ldrh.w	r2, [r3, #580]	@ 0x244
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 800181c:	429a      	cmp	r2, r3
 800181e:	d215      	bcs.n	800184c <process_command+0x108>
        {
            strcpy(context->commandBuffer, context->commandHistory[context->historyIndex]);
 8001820:	6838      	ldr	r0, [r7, #0]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	f8b3 3244 	ldrh.w	r3, [r3, #580]	@ 0x244
 8001828:	3301      	adds	r3, #1
 800182a:	019b      	lsls	r3, r3, #6
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	4413      	add	r3, r2
 8001830:	3302      	adds	r3, #2
 8001832:	4619      	mov	r1, r3
 8001834:	f009 f8a6 	bl	800a984 <strcpy>
            context->commandBufferIndex = strlen(context->commandBuffer);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fcd2 	bl	80001e4 <strlen>
 8001840:	4603      	mov	r3, r0
 8001842:	b29a      	uxth	r2, r3
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 800184a:	e006      	b.n	800185a <process_command+0x116>
        }
        else
        {
            context->commandBuffer[0] = '\0';
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
            context->commandBufferIndex = 0;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2200      	movs	r2, #0
 8001856:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        }

        // Clear current line and display updated command
        UART_SendStringRing(UART_CMDLINE, "\033[2K"); // Clear entire line
 800185a:	4b86      	ldr	r3, [pc, #536]	@ (8001a74 <process_command+0x330>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4986      	ldr	r1, [pc, #536]	@ (8001a78 <process_command+0x334>)
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fd9f 	bl	80013a4 <UART_SendStringRing>
        char buffer[60];
        snprintf(buffer, sizeof(buffer), "\r%s%s$ ", x_timeBuffer, NAME_SHELL);
 8001866:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800186a:	f107 0008 	add.w	r0, r7, #8
 800186e:	4a7f      	ldr	r2, [pc, #508]	@ (8001a6c <process_command+0x328>)
 8001870:	9200      	str	r2, [sp, #0]
 8001872:	4a82      	ldr	r2, [pc, #520]	@ (8001a7c <process_command+0x338>)
 8001874:	213c      	movs	r1, #60	@ 0x3c
 8001876:	f009 f81b 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 800187a:	4b7e      	ldr	r3, [pc, #504]	@ (8001a74 <process_command+0x330>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f107 0208 	add.w	r2, r7, #8
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fd8d 	bl	80013a4 <UART_SendStringRing>
        UART_SendStringRing(UART_CMDLINE, context->commandBuffer); // Display updated command
 800188a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a74 <process_command+0x330>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fd86 	bl	80013a4 <UART_SendStringRing>
 8001898:	e1c8      	b.n	8001c2c <process_command+0x4e8>
        return;
    }
    else if (rxData == 0x3D) // '=' key (history down)
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	2b3d      	cmp	r3, #61	@ 0x3d
 800189e:	d16e      	bne.n	800197e <process_command+0x23a>
    {
        // Get Software DateTime
        s_DateTime rtcTime = {0};
 80018a0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	809a      	strh	r2, [r3, #4]
        DateTime_GetRTC(&rtcTime);
 80018aa:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 f94a 	bl	8003b48 <DateTime_GetRTC>
        char x_timeBuffer[30];
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
                 "[%02u:%02u:%02u]",
                 rtcTime.hour, rtcTime.minute, rtcTime.second);
 80018b4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
 80018b8:	4619      	mov	r1, r3
                 rtcTime.hour, rtcTime.minute, rtcTime.second);
 80018ba:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80018be:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
 80018c2:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80018c6:	9201      	str	r2, [sp, #4]
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	460b      	mov	r3, r1
 80018cc:	4a66      	ldr	r2, [pc, #408]	@ (8001a68 <process_command+0x324>)
 80018ce:	211e      	movs	r1, #30
 80018d0:	f008 ffee 	bl	800a8b0 <sniprintf>
        if (context->historyIndex < context->historyCount)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f8b3 2244 	ldrh.w	r2, [r3, #580]	@ 0x244
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <process_command+0x1b0>
        {
            context->historyIndex++;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	f8b3 3244 	ldrh.w	r3, [r3, #580]	@ 0x244
 80018ea:	3301      	adds	r3, #1
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	f8a3 2244 	strh.w	r2, [r3, #580]	@ 0x244
        }

        // Load history command
        if (context->historyIndex < context->historyCount)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	f8b3 2244 	ldrh.w	r2, [r3, #580]	@ 0x244
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 8001900:	429a      	cmp	r2, r3
 8001902:	d215      	bcs.n	8001930 <process_command+0x1ec>
        {
            strcpy(context->commandBuffer, context->commandHistory[context->historyIndex]);
 8001904:	6838      	ldr	r0, [r7, #0]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	f8b3 3244 	ldrh.w	r3, [r3, #580]	@ 0x244
 800190c:	3301      	adds	r3, #1
 800190e:	019b      	lsls	r3, r3, #6
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	4413      	add	r3, r2
 8001914:	3302      	adds	r3, #2
 8001916:	4619      	mov	r1, r3
 8001918:	f009 f834 	bl	800a984 <strcpy>
            context->commandBufferIndex = strlen(context->commandBuffer);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fc60 	bl	80001e4 <strlen>
 8001924:	4603      	mov	r3, r0
 8001926:	b29a      	uxth	r2, r3
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 800192e:	e006      	b.n	800193e <process_command+0x1fa>
        }
        else
        {
            context->commandBuffer[0] = '\0';
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
            context->commandBufferIndex = 0;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	2200      	movs	r2, #0
 800193a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        }

        // Clear current line and display updated command
        UART_SendStringRing(UART_CMDLINE, "\033[2K"); // Clear entire line
 800193e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a74 <process_command+0x330>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	494d      	ldr	r1, [pc, #308]	@ (8001a78 <process_command+0x334>)
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fd2d 	bl	80013a4 <UART_SendStringRing>
        char buffer[60];
        snprintf(buffer, sizeof(buffer), "\r%s%s$ ", x_timeBuffer, NAME_SHELL);
 800194a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800194e:	f107 0008 	add.w	r0, r7, #8
 8001952:	4a46      	ldr	r2, [pc, #280]	@ (8001a6c <process_command+0x328>)
 8001954:	9200      	str	r2, [sp, #0]
 8001956:	4a49      	ldr	r2, [pc, #292]	@ (8001a7c <process_command+0x338>)
 8001958:	213c      	movs	r1, #60	@ 0x3c
 800195a:	f008 ffa9 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 800195e:	4b45      	ldr	r3, [pc, #276]	@ (8001a74 <process_command+0x330>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f107 0208 	add.w	r2, r7, #8
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fd1b 	bl	80013a4 <UART_SendStringRing>
        UART_SendStringRing(UART_CMDLINE, context->commandBuffer); // Display updated command
 800196e:	4b41      	ldr	r3, [pc, #260]	@ (8001a74 <process_command+0x330>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fd14 	bl	80013a4 <UART_SendStringRing>
 800197c:	e156      	b.n	8001c2c <process_command+0x4e8>
        return;
    }

    // Handle individual key presses
    if (((rxData >= 32 && rxData <= 126) || rxData == KEY_ENTER || rxData == KEY_BACKSPACE) && rxData != 0x2D && rxData != 0x3D && rxData != 0x5C)
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	2b1f      	cmp	r3, #31
 8001982:	d902      	bls.n	800198a <process_command+0x246>
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	2b7e      	cmp	r3, #126	@ 0x7e
 8001988:	d906      	bls.n	8001998 <process_command+0x254>
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b0d      	cmp	r3, #13
 800198e:	d003      	beq.n	8001998 <process_command+0x254>
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	2b7f      	cmp	r3, #127	@ 0x7f
 8001994:	f040 814a 	bne.w	8001c2c <process_command+0x4e8>
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	2b2d      	cmp	r3, #45	@ 0x2d
 800199c:	f000 8146 	beq.w	8001c2c <process_command+0x4e8>
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	2b3d      	cmp	r3, #61	@ 0x3d
 80019a4:	f000 8142 	beq.w	8001c2c <process_command+0x4e8>
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	2b5c      	cmp	r3, #92	@ 0x5c
 80019ac:	f000 813e 	beq.w	8001c2c <process_command+0x4e8>
    {
        // Get Software DateTime
        s_DateTime rtcTime = {0};
 80019b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	809a      	strh	r2, [r3, #4]
        DateTime_GetRTC(&rtcTime);
 80019ba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019be:	4618      	mov	r0, r3
 80019c0:	f002 f8c2 	bl	8003b48 <DateTime_GetRTC>
        char x_timeBuffer[30];
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
                 "[%02u:%02u:%02u]",
                 rtcTime.hour, rtcTime.minute, rtcTime.second);
 80019c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
 80019c8:	4619      	mov	r1, r3
                 rtcTime.hour, rtcTime.minute, rtcTime.second);
 80019ca:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80019ce:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
        snprintf(x_timeBuffer, sizeof(x_timeBuffer),
 80019d2:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80019d6:	9201      	str	r2, [sp, #4]
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	460b      	mov	r3, r1
 80019dc:	4a22      	ldr	r2, [pc, #136]	@ (8001a68 <process_command+0x324>)
 80019de:	211e      	movs	r1, #30
 80019e0:	f008 ff66 	bl	800a8b0 <sniprintf>
        if (rxData == KEY_ENTER)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2b0d      	cmp	r3, #13
 80019e8:	f040 80c9 	bne.w	8001b7e <process_command+0x43a>
        {
            if (context->commandBufferIndex > 0)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 80ae 	beq.w	8001b54 <process_command+0x410>
            {
                context->commandBuffer[context->commandBufferIndex] = '\0';
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019fe:	461a      	mov	r2, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2100      	movs	r1, #0
 8001a04:	5499      	strb	r1, [r3, r2]
                // Save to history
                if (context->historyCount == 0 ||
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d010      	beq.n	8001a32 <process_command+0x2ee>
                    strcmp(context->commandHistory[context->historyCount - 1], context->commandBuffer) != 0)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 8001a16:	3b01      	subs	r3, #1
 8001a18:	3301      	adds	r3, #1
 8001a1a:	019b      	lsls	r3, r3, #6
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	3302      	adds	r3, #2
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	4611      	mov	r1, r2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fbd2 	bl	80001d0 <strcmp>
 8001a2c:	4603      	mov	r3, r0
                if (context->historyCount == 0 ||
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d04d      	beq.n	8001ace <process_command+0x38a>
                {
                    if (context->historyCount < MAX_HISTORY)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 8001a38:	2b07      	cmp	r3, #7
 8001a3a:	d821      	bhi.n	8001a80 <process_command+0x33c>
                    {
                        strcpy(context->commandHistory[context->historyCount], context->commandBuffer);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 8001a42:	3301      	adds	r3, #1
 8001a44:	019b      	lsls	r3, r3, #6
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f008 ff97 	bl	800a984 <strcpy>
                        context->historyCount++;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	f8b3 3242 	ldrh.w	r3, [r3, #578]	@ 0x242
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	f8a3 2242 	strh.w	r2, [r3, #578]	@ 0x242
 8001a66:	e032      	b.n	8001ace <process_command+0x38a>
 8001a68:	0800bb20 	.word	0x0800bb20
 8001a6c:	0800bb40 	.word	0x0800bb40
 8001a70:	0800bb34 	.word	0x0800bb34
 8001a74:	20003434 	.word	0x20003434
 8001a78:	0800bb48 	.word	0x0800bb48
 8001a7c:	0800bb50 	.word	0x0800bb50
                    }
                    else
                    {
                        for (int i = 0; i < MAX_HISTORY - 1; i++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001a86:	e016      	b.n	8001ab6 <process_command+0x372>
                        {
                            strcpy(context->commandHistory[i], context->commandHistory[i + 1]);
 8001a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	019b      	lsls	r3, r3, #6
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	1c98      	adds	r0, r3, #2
 8001a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	019b      	lsls	r3, r3, #6
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f008 ff6c 	bl	800a984 <strcpy>
                        for (int i = 0; i < MAX_HISTORY - 1; i++)
 8001aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	dde4      	ble.n	8001a88 <process_command+0x344>
                        }
                        strcpy(context->commandHistory[MAX_HISTORY - 1], context->commandBuffer);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	f203 2302 	addw	r3, r3, #514	@ 0x202
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f008 ff5b 	bl	800a984 <strcpy>
                    }
                }
                context->historyIndex = context->historyCount;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	f8b3 2242 	ldrh.w	r2, [r3, #578]	@ 0x242
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f8a3 2244 	strh.w	r2, [r3, #580]	@ 0x244

                // Process command
                int8_t ret_val = CmdLineProcess(context->commandBuffer);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fd11 	bl	8001504 <CmdLineProcess>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
                if (ret_val == CMDLINE_NONE_RETURN)
 8001ae8:	f997 30e3 	ldrsb.w	r3, [r7, #227]	@ 0xe3
 8001aec:	2b06      	cmp	r3, #6
 8001aee:	f000 809d 	beq.w	8001c2c <process_command+0x4e8>
                {
                }
                else
                {
                    char buffer[60];
                    snprintf(buffer, sizeof(buffer), "\r\n--> Return: ");
 8001af2:	f107 0308 	add.w	r3, r7, #8
 8001af6:	4a4f      	ldr	r2, [pc, #316]	@ (8001c34 <process_command+0x4f0>)
 8001af8:	213c      	movs	r1, #60	@ 0x3c
 8001afa:	4618      	mov	r0, r3
 8001afc:	f008 fed8 	bl	800a8b0 <sniprintf>
                    UART_SendStringRing(UART_CMDLINE, buffer);
 8001b00:	4b4d      	ldr	r3, [pc, #308]	@ (8001c38 <process_command+0x4f4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f107 0208 	add.w	r2, r7, #8
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fc4a 	bl	80013a4 <UART_SendStringRing>
                    UART_SendStringRing(UART_CMDLINE, ErrorCode[ret_val]); //
 8001b10:	4b49      	ldr	r3, [pc, #292]	@ (8001c38 <process_command+0x4f4>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	f997 30e3 	ldrsb.w	r3, [r7, #227]	@ 0xe3
 8001b18:	4948      	ldr	r1, [pc, #288]	@ (8001c3c <process_command+0x4f8>)
 8001b1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f7ff fc3f 	bl	80013a4 <UART_SendStringRing>
                    snprintf(buffer, sizeof(buffer), "%s%s$ ", x_timeBuffer, NAME_SHELL);
 8001b26:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b2a:	f107 0008 	add.w	r0, r7, #8
 8001b2e:	4a44      	ldr	r2, [pc, #272]	@ (8001c40 <process_command+0x4fc>)
 8001b30:	9200      	str	r2, [sp, #0]
 8001b32:	4a44      	ldr	r2, [pc, #272]	@ (8001c44 <process_command+0x500>)
 8001b34:	213c      	movs	r1, #60	@ 0x3c
 8001b36:	f008 febb 	bl	800a8b0 <sniprintf>
                    UART_SendStringRing(UART_CMDLINE, buffer);
 8001b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c38 <process_command+0x4f4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f107 0208 	add.w	r2, r7, #8
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fc2d 	bl	80013a4 <UART_SendStringRing>
                    context->commandBufferIndex = 0;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8001b52:	e06b      	b.n	8001c2c <process_command+0x4e8>
                }
            }
            else
            {
                ResetConfig();
 8001b54:	f000 f87e 	bl	8001c54 <ResetConfig>
                char buffer[60];
                snprintf(buffer, sizeof(buffer), "\r\n%s%s$ ", x_timeBuffer, NAME_SHELL);
 8001b58:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b5c:	f107 0008 	add.w	r0, r7, #8
 8001b60:	4a37      	ldr	r2, [pc, #220]	@ (8001c40 <process_command+0x4fc>)
 8001b62:	9200      	str	r2, [sp, #0]
 8001b64:	4a38      	ldr	r2, [pc, #224]	@ (8001c48 <process_command+0x504>)
 8001b66:	213c      	movs	r1, #60	@ 0x3c
 8001b68:	f008 fea2 	bl	800a8b0 <sniprintf>
                UART_SendStringRing(UART_CMDLINE, buffer);
 8001b6c:	4b32      	ldr	r3, [pc, #200]	@ (8001c38 <process_command+0x4f4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f107 0208 	add.w	r2, r7, #8
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fc14 	bl	80013a4 <UART_SendStringRing>
 8001b7c:	e056      	b.n	8001c2c <process_command+0x4e8>
            }
        }
        else if (rxData == KEY_BACKSPACE)
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b82:	d11b      	bne.n	8001bbc <process_command+0x478>
        {
            if (context->commandBufferIndex > 0)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00f      	beq.n	8001bae <process_command+0x46a>
            {
                context->commandBufferIndex--;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
                context->commandBuffer[context->commandBufferIndex] = '\0';
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2100      	movs	r1, #0
 8001baa:	5499      	strb	r1, [r3, r2]
 8001bac:	e03e      	b.n	8001c2c <process_command+0x4e8>
            }
            else
            {
                UART_SendStringRing(UART_CMDLINE, " ");
 8001bae:	4b22      	ldr	r3, [pc, #136]	@ (8001c38 <process_command+0x4f4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4926      	ldr	r1, [pc, #152]	@ (8001c4c <process_command+0x508>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fbf5 	bl	80013a4 <UART_SendStringRing>
 8001bba:	e037      	b.n	8001c2c <process_command+0x4e8>
            }
        }
        else
        {
            if (context->commandBufferIndex < COMMAND_MAX_LENGTH - 1)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001bc2:	2b3e      	cmp	r3, #62	@ 0x3e
 8001bc4:	d813      	bhi.n	8001bee <process_command+0x4aa>
            {
                context->commandBuffer[context->commandBufferIndex++] = rxData;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	b291      	uxth	r1, r2
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	79fa      	ldrb	r2, [r7, #7]
 8001bdc:	545a      	strb	r2, [r3, r1]
                context->commandBuffer[context->commandBufferIndex] = '\0';
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001be4:	461a      	mov	r2, r3
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2100      	movs	r1, #0
 8001bea:	5499      	strb	r1, [r3, r2]
 8001bec:	e01e      	b.n	8001c2c <process_command+0x4e8>
            }
            else
            {
                // Command too long
                UART_SendStringRing(UART_CMDLINE, "\r\nError: Command too long.");
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <process_command+0x4f4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4917      	ldr	r1, [pc, #92]	@ (8001c50 <process_command+0x50c>)
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fbd5 	bl	80013a4 <UART_SendStringRing>
                char buffer[60];
                snprintf(buffer, sizeof(buffer), "\r\n%s%s$ ", x_timeBuffer, NAME_SHELL);
 8001bfa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001bfe:	f107 0008 	add.w	r0, r7, #8
 8001c02:	4a0f      	ldr	r2, [pc, #60]	@ (8001c40 <process_command+0x4fc>)
 8001c04:	9200      	str	r2, [sp, #0]
 8001c06:	4a10      	ldr	r2, [pc, #64]	@ (8001c48 <process_command+0x504>)
 8001c08:	213c      	movs	r1, #60	@ 0x3c
 8001c0a:	f008 fe51 	bl	800a8b0 <sniprintf>
                UART_SendStringRing(UART_CMDLINE, buffer);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <process_command+0x4f4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f107 0208 	add.w	r2, r7, #8
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fbc3 	bl	80013a4 <UART_SendStringRing>
                context->commandBufferIndex = 0;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
                context->commandBuffer[0] = '\0';
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 8001c2c:	37e8      	adds	r7, #232	@ 0xe8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	0800bb58 	.word	0x0800bb58
 8001c38:	20003434 	.word	0x20003434
 8001c3c:	20000048 	.word	0x20000048
 8001c40:	0800bb40 	.word	0x0800bb40
 8001c44:	0800bb68 	.word	0x0800bb68
 8001c48:	0800bb34 	.word	0x0800bb34
 8001c4c:	0800bb70 	.word	0x0800bb70
 8001c50:	0800bb74 	.word	0x0800bb74

08001c54 <ResetConfig>:

static void ResetConfig(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
    laser_interval = 0;
 8001c58:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <ResetConfig+0x50>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
    run_system = 0;
 8001c5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ca8 <ResetConfig+0x54>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
    run_adc = 0;
 8001c64:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <ResetConfig+0x58>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
    adc_interval = 0;
 8001c6a:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <ResetConfig+0x5c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
    pair_slot = 1;
 8001c70:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <ResetConfig+0x60>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
    current_column = 1;
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <ResetConfig+0x64>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
    current_row = 1;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <ResetConfig+0x68>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]
    user_delay = 0;
 8001c82:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <ResetConfig+0x6c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
    rest_time = 0;
 8001c88:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <ResetConfig+0x70>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
    run_inf = 0;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc8 <ResetConfig+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
    do_time = 0;
 8001c94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ccc <ResetConfig+0x78>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	2000347c 	.word	0x2000347c
 8001ca8:	20003480 	.word	0x20003480
 8001cac:	20003481 	.word	0x20003481
 8001cb0:	20003484 	.word	0x20003484
 8001cb4:	200001c0 	.word	0x200001c0
 8001cb8:	200001c1 	.word	0x200001c1
 8001cbc:	200001c2 	.word	0x200001c2
 8001cc0:	20003488 	.word	0x20003488
 8001cc4:	2000348c 	.word	0x2000348c
 8001cc8:	20003491 	.word	0x20003491
 8001ccc:	20003490 	.word	0x20003490

08001cd0 <Cmd_help>:

/*-----------------------COMMAND FUNCTION LIST---------------------------*/
/* Command support */
int Cmd_help(int argc, char *argv[])
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b0cc      	sub	sp, #304	@ 0x130
 8001cd4:	af04      	add	r7, sp, #16
 8001cd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cda:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001cde:	6018      	str	r0, [r3, #0]
 8001ce0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ce4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ce8:	6019      	str	r1, [r3, #0]
    if (argc > 2)
 8001cea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	dd01      	ble.n	8001cfc <Cmd_help+0x2c>
        return CMDLINE_TOO_MANY_ARGS;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e063      	b.n	8001dc4 <Cmd_help+0xf4>

    UART_SendStringRing(UART_CMDLINE, "\r\nAvailable commands:");
 8001cfc:	4b34      	ldr	r3, [pc, #208]	@ (8001dd0 <Cmd_help+0x100>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4934      	ldr	r1, [pc, #208]	@ (8001dd4 <Cmd_help+0x104>)
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fb4e 	bl	80013a4 <UART_SendStringRing>

    tCmdLineEntry *pEntry = &g_psCmdTable[0];
 8001d08:	4b33      	ldr	r3, [pc, #204]	@ (8001dd8 <Cmd_help+0x108>)
 8001d0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    size_t maxCmdLength = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    while (pEntry->pcCmd)
 8001d14:	e016      	b.n	8001d44 <Cmd_help+0x74>
    {
        size_t cmdLength = strlen(pEntry->pcCmd);
 8001d16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fa61 	bl	80001e4 <strlen>
 8001d22:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
        if (cmdLength > maxCmdLength)
 8001d26:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8001d2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d903      	bls.n	8001d3a <Cmd_help+0x6a>
        {
            maxCmdLength = cmdLength;
 8001d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001d36:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
        }
        pEntry++;
 8001d3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001d3e:	330c      	adds	r3, #12
 8001d40:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    while (pEntry->pcCmd)
 8001d44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1e3      	bne.n	8001d16 <Cmd_help+0x46>
    }
    pEntry = &g_psCmdTable[0];
 8001d4e:	4b22      	ldr	r3, [pc, #136]	@ (8001dd8 <Cmd_help+0x108>)
 8001d50:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    while (pEntry->pcCmd)
 8001d54:	e030      	b.n	8001db8 <Cmd_help+0xe8>
    {
        char buffer[256];
        size_t cmdLength = strlen(pEntry->pcCmd);
 8001d56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fa41 	bl	80001e4 <strlen>
 8001d62:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
        int padding = (int)(maxCmdLength - cmdLength + 4);
 8001d66:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	3304      	adds	r3, #4
 8001d72:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        snprintf(buffer, sizeof(buffer), "\r\n[%s]%*s: %s",
 8001d76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f107 000c 	add.w	r0, r7, #12
 8001d86:	9302      	str	r3, [sp, #8]
 8001d88:	4b14      	ldr	r3, [pc, #80]	@ (8001ddc <Cmd_help+0x10c>)
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	4613      	mov	r3, r2
 8001d94:	4a12      	ldr	r2, [pc, #72]	@ (8001de0 <Cmd_help+0x110>)
 8001d96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d9a:	f008 fd89 	bl	800a8b0 <sniprintf>
                 pEntry->pcCmd, padding, "", pEntry->pcHelp);

        UART_SendStringRing(UART_CMDLINE, buffer);
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <Cmd_help+0x100>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f107 020c 	add.w	r2, r7, #12
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fafb 	bl	80013a4 <UART_SendStringRing>
        pEntry++;
 8001dae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001db2:	330c      	adds	r3, #12
 8001db4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    while (pEntry->pcCmd)
 8001db8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1c9      	bne.n	8001d56 <Cmd_help+0x86>
    }

    return (CMDLINE_OK);
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20003434 	.word	0x20003434
 8001dd4:	0800bb90 	.word	0x0800bb90
 8001dd8:	20000060 	.word	0x20000060
 8001ddc:	0800bbb8 	.word	0x0800bbb8
 8001de0:	0800bba8 	.word	0x0800bba8

08001de4 <Cmd_temp_pw>:

/* Command for power supply */
int Cmd_temp_pw(int argc, char *argv[])
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
    if (argc < 3)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	dc01      	bgt.n	8001df8 <Cmd_temp_pw+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e017      	b.n	8001e28 <Cmd_temp_pw+0x44>
    if (argc > 3)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	dd01      	ble.n	8001e02 <Cmd_temp_pw+0x1e>
        return CMDLINE_TOO_MANY_ARGS;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e012      	b.n	8001e28 <Cmd_temp_pw+0x44>
    if (atoi(argv[1]))
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	3304      	adds	r3, #4
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f008 fcc9 	bl	800a7a0 <atoi>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d004      	beq.n	8001e1e <Cmd_temp_pw+0x3a>
        LL_GPIO_SetOutputPin(EF_5_EN_GPIO_Port, EF_5_EN_Pin);
 8001e14:	2110      	movs	r1, #16
 8001e16:	4806      	ldr	r0, [pc, #24]	@ (8001e30 <Cmd_temp_pw+0x4c>)
 8001e18:	f7ff fc08 	bl	800162c <LL_GPIO_SetOutputPin>
 8001e1c:	e003      	b.n	8001e26 <Cmd_temp_pw+0x42>
    else
        LL_GPIO_ResetOutputPin(EF_5_EN_GPIO_Port, EF_5_EN_Pin);
 8001e1e:	2110      	movs	r1, #16
 8001e20:	4803      	ldr	r0, [pc, #12]	@ (8001e30 <Cmd_temp_pw+0x4c>)
 8001e22:	f7ff fc11 	bl	8001648 <LL_GPIO_ResetOutputPin>
    return (CMDLINE_OK);
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40020c00 	.word	0x40020c00

08001e34 <Cmd_set_temp>:
/* Command for temperature */
int Cmd_set_temp(int argc, char *argv[])
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b092      	sub	sp, #72	@ 0x48
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	dc01      	bgt.n	8001e48 <Cmd_set_temp+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e04b      	b.n	8001ee0 <Cmd_set_temp+0xac>
    if (argc > 6)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	dd01      	ble.n	8001e52 <Cmd_set_temp+0x1e>
        return CMDLINE_TOO_MANY_ARGS;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e046      	b.n	8001ee0 <Cmd_set_temp+0xac>
    int16_t setpoint[4];
    char buffer[40];
    for (uint8_t i = 0; i < 4; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001e58:	e03d      	b.n	8001ed6 <Cmd_set_temp+0xa2>
    {
        setpoint[i] = atoi(argv[i + 1]);
 8001e5a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001e5e:	3301      	adds	r3, #1
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f008 fc99 	bl	800a7a0 <atoi>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001e74:	b212      	sxth	r2, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	3340      	adds	r3, #64	@ 0x40
 8001e7a:	443b      	add	r3, r7
 8001e7c:	f823 2c0c 	strh.w	r2, [r3, #-12]
        temperature_set_setpoint(i, setpoint[i]);
 8001e80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	3340      	adds	r3, #64	@ 0x40
 8001e88:	443b      	add	r3, r7
 8001e8a:	f933 2c0c 	ldrsh.w	r2, [r3, #-12]
 8001e8e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 fe67 	bl	8006b68 <temperature_set_setpoint>
        snprintf(buffer, sizeof(buffer), "\r\n--> Setpoint[%d]: %i", i, setpoint[i]);
 8001e9a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001e9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	3340      	adds	r3, #64	@ 0x40
 8001ea6:	443b      	add	r3, r7
 8001ea8:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8001eac:	f107 000c 	add.w	r0, r7, #12
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee8 <Cmd_set_temp+0xb4>)
 8001eb6:	2128      	movs	r1, #40	@ 0x28
 8001eb8:	f008 fcfa 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <Cmd_set_temp+0xb8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f107 020c 	add.w	r2, r7, #12
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fa6c 	bl	80013a4 <UART_SendStringRing>
    for (uint8_t i = 0; i < 4; i++)
 8001ecc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001ed6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d9bd      	bls.n	8001e5a <Cmd_set_temp+0x26>
    }
    return CMDLINE_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3740      	adds	r7, #64	@ 0x40
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	0800bbbc 	.word	0x0800bbbc
 8001eec:	20003434 	.word	0x20003434

08001ef0 <Cmd_get_temp>:

int Cmd_get_temp(int argc, char *argv[])
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b09a      	sub	sp, #104	@ 0x68
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
    if (argc > 2)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	dd01      	ble.n	8001f04 <Cmd_get_temp+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 8001f00:	2302      	movs	r3, #2
 8001f02:	e05a      	b.n	8001fba <Cmd_get_temp+0xca>

    int16_t temp = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    char buffer[80];

    /* Temperature from BMP390 */
    // temp = bmp390_get_temperature();
    if (temp == 0x7FFF)
 8001f0a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8001f0e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d106      	bne.n	8001f24 <Cmd_get_temp+0x34>
    {
        UART_SendStringRing(UART_CMDLINE, "\r\n--> BMP390 is fail");
 8001f16:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc4 <Cmd_get_temp+0xd4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	492b      	ldr	r1, [pc, #172]	@ (8001fc8 <Cmd_get_temp+0xd8>)
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fa41 	bl	80013a4 <UART_SendStringRing>
 8001f22:	e00f      	b.n	8001f44 <Cmd_get_temp+0x54>
    }
    else
    {
        snprintf(buffer, sizeof(buffer), "\r\n--> BMP390 temp: %i", temp);
 8001f24:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8001f28:	f107 000c 	add.w	r0, r7, #12
 8001f2c:	4a27      	ldr	r2, [pc, #156]	@ (8001fcc <Cmd_get_temp+0xdc>)
 8001f2e:	2150      	movs	r1, #80	@ 0x50
 8001f30:	f008 fcbe 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8001f34:	4b23      	ldr	r3, [pc, #140]	@ (8001fc4 <Cmd_get_temp+0xd4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f107 020c 	add.w	r2, r7, #12
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fa30 	bl	80013a4 <UART_SendStringRing>
    }

    /* Temperature from NTC */
    NTC_get_temperature(NTC_Temperature);
 8001f44:	4822      	ldr	r0, [pc, #136]	@ (8001fd0 <Cmd_get_temp+0xe0>)
 8001f46:	f002 fd8b 	bl	8004a60 <NTC_get_temperature>
    for (uint8_t channel = 0; channel < 8; channel++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001f50:	e02e      	b.n	8001fb0 <Cmd_get_temp+0xc0>
    {
        temp = NTC_Temperature[channel];
 8001f52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001f56:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd0 <Cmd_get_temp+0xe0>)
 8001f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f5c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
        if (temp == 0x7FFF)
 8001f60:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8001f64:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d108      	bne.n	8001f7e <Cmd_get_temp+0x8e>
        {
            snprintf(buffer, sizeof(buffer), "\r\n--> NTC[%d] is fail", channel);
 8001f6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001f70:	f107 000c 	add.w	r0, r7, #12
 8001f74:	4a17      	ldr	r2, [pc, #92]	@ (8001fd4 <Cmd_get_temp+0xe4>)
 8001f76:	2150      	movs	r1, #80	@ 0x50
 8001f78:	f008 fc9a 	bl	800a8b0 <sniprintf>
 8001f7c:	e00b      	b.n	8001f96 <Cmd_get_temp+0xa6>
        }
        else
        {
            snprintf(buffer, sizeof(buffer), "\r\n--> NTC[%d]: %i", channel, temp);
 8001f7e:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8001f82:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8001f86:	f107 000c 	add.w	r0, r7, #12
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	4a12      	ldr	r2, [pc, #72]	@ (8001fd8 <Cmd_get_temp+0xe8>)
 8001f90:	2150      	movs	r1, #80	@ 0x50
 8001f92:	f008 fc8d 	bl	800a8b0 <sniprintf>
        }
        UART_SendStringRing(UART_CMDLINE, buffer);
 8001f96:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <Cmd_get_temp+0xd4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f107 020c 	add.w	r2, r7, #12
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff f9ff 	bl	80013a4 <UART_SendStringRing>
    for (uint8_t channel = 0; channel < 8; channel++)
 8001fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001faa:	3301      	adds	r3, #1
 8001fac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001fb4:	2b07      	cmp	r3, #7
 8001fb6:	d9cc      	bls.n	8001f52 <Cmd_get_temp+0x62>
    }
    return CMDLINE_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3760      	adds	r7, #96	@ 0x60
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20003434 	.word	0x20003434
 8001fc8:	0800bbd4 	.word	0x0800bbd4
 8001fcc:	0800bbec 	.word	0x0800bbec
 8001fd0:	200034b0 	.word	0x200034b0
 8001fd4:	0800bc04 	.word	0x0800bc04
 8001fd8:	0800bc1c 	.word	0x0800bc1c

08001fdc <Cmd_get_temp_setpoint>:

int Cmd_get_temp_setpoint(int argc, char *argv[])
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b094      	sub	sp, #80	@ 0x50
 8001fe0:	af02      	add	r7, sp, #8
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
    if (argc > 2)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	dd01      	ble.n	8001ff0 <Cmd_get_temp_setpoint+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 8001fec:	2302      	movs	r3, #2
 8001fee:	e02c      	b.n	800204a <Cmd_get_temp_setpoint+0x6e>
    int16_t setpoint = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    char buffer[60];
    for (uint8_t channel = 0; channel < 4; channel++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001ffc:	e020      	b.n	8002040 <Cmd_get_temp_setpoint+0x64>
    {
        setpoint = temperature_get_setpoint(channel);
 8001ffe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002002:	4618      	mov	r0, r3
 8002004:	f004 fdc6 	bl	8006b94 <temperature_get_setpoint>
 8002008:	4603      	mov	r3, r0
 800200a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        snprintf(buffer, sizeof(buffer), "\r\n--> Setpoint[%d]:%i", channel, setpoint);
 800200e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8002012:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8002016:	f107 0008 	add.w	r0, r7, #8
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	4613      	mov	r3, r2
 800201e:	4a0d      	ldr	r2, [pc, #52]	@ (8002054 <Cmd_get_temp_setpoint+0x78>)
 8002020:	213c      	movs	r1, #60	@ 0x3c
 8002022:	f008 fc45 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8002026:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <Cmd_get_temp_setpoint+0x7c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f107 0208 	add.w	r2, r7, #8
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff f9b7 	bl	80013a4 <UART_SendStringRing>
    for (uint8_t channel = 0; channel < 4; channel++)
 8002036:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800203a:	3301      	adds	r3, #1
 800203c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002040:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002044:	2b03      	cmp	r3, #3
 8002046:	d9da      	bls.n	8001ffe <Cmd_get_temp_setpoint+0x22>
    }
    return (CMDLINE_OK);
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3748      	adds	r7, #72	@ 0x48
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	0800bc30 	.word	0x0800bc30
 8002058:	20003434 	.word	0x20003434

0800205c <Cmd_tec_set_vol>:
int Cmd_tec_set_vol(int argc, char *argv[])
{
 800205c:	b590      	push	{r4, r7, lr}
 800205e:	b09b      	sub	sp, #108	@ 0x6c
 8002060:	af02      	add	r7, sp, #8
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b05      	cmp	r3, #5
 800206a:	dc01      	bgt.n	8002070 <Cmd_tec_set_vol+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 800206c:	2303      	movs	r3, #3
 800206e:	e041      	b.n	80020f4 <Cmd_tec_set_vol+0x98>
    if (argc > 6)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b06      	cmp	r3, #6
 8002074:	dd01      	ble.n	800207a <Cmd_tec_set_vol+0x1e>
        return CMDLINE_TOO_MANY_ARGS;
 8002076:	2302      	movs	r3, #2
 8002078:	e03c      	b.n	80020f4 <Cmd_tec_set_vol+0x98>
    char buffer[80];
    for (uint8_t i = 0; i < 4; i++)
 800207a:	2300      	movs	r3, #0
 800207c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002080:	e033      	b.n	80020ea <Cmd_tec_set_vol+0x8e>
    {
        temperature_set_tec_vol(i, atoi(argv[i + 1]));
 8002082:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002086:	3301      	adds	r3, #1
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4413      	add	r3, r2
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f008 fb85 	bl	800a7a0 <atoi>
 8002096:	4603      	mov	r3, r0
 8002098:	b29a      	uxth	r2, r3
 800209a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f004 fd8b 	bl	8006bbc <temperature_set_tec_vol>
        snprintf(buffer, sizeof(buffer), "\r\n--> Tec voltage[%d]: %i mV", i, atoi(argv[i + 1]));
 80020a6:	f897 405f 	ldrb.w	r4, [r7, #95]	@ 0x5f
 80020aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80020ae:	3301      	adds	r3, #1
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	4413      	add	r3, r2
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f008 fb71 	bl	800a7a0 <atoi>
 80020be:	4603      	mov	r3, r0
 80020c0:	f107 000c 	add.w	r0, r7, #12
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	4623      	mov	r3, r4
 80020c8:	4a0c      	ldr	r2, [pc, #48]	@ (80020fc <Cmd_tec_set_vol+0xa0>)
 80020ca:	2150      	movs	r1, #80	@ 0x50
 80020cc:	f008 fbf0 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 80020d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <Cmd_tec_set_vol+0xa4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f107 020c 	add.w	r2, r7, #12
 80020d8:	4611      	mov	r1, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff f962 	bl	80013a4 <UART_SendStringRing>
    for (uint8_t i = 0; i < 4; i++)
 80020e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80020e4:	3301      	adds	r3, #1
 80020e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80020ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d9c7      	bls.n	8002082 <Cmd_tec_set_vol+0x26>
    }
    return CMDLINE_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3764      	adds	r7, #100	@ 0x64
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd90      	pop	{r4, r7, pc}
 80020fc:	0800bc48 	.word	0x0800bc48
 8002100:	20003434 	.word	0x20003434

08002104 <Cmd_tec_get_vol>:

int Cmd_tec_get_vol(int argc, char *argv[])
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b09d      	sub	sp, #116	@ 0x74
 8002108:	af02      	add	r7, sp, #8
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
    if (argc > 2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b02      	cmp	r3, #2
 8002112:	dd01      	ble.n	8002118 <Cmd_tec_get_vol+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 8002114:	2302      	movs	r3, #2
 8002116:	e034      	b.n	8002182 <Cmd_tec_get_vol+0x7e>
    uint16_t vol[4];
    char buffer[80];
    for (uint8_t i = 0; i < 4; i++)
 8002118:	2300      	movs	r3, #0
 800211a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800211e:	e02b      	b.n	8002178 <Cmd_tec_get_vol+0x74>
    {
        vol[i] = temperature_get_tec_vol(i);
 8002120:	f897 4067 	ldrb.w	r4, [r7, #103]	@ 0x67
 8002124:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002128:	4618      	mov	r0, r3
 800212a:	f004 fd73 	bl	8006c14 <temperature_get_tec_vol>
 800212e:	4603      	mov	r3, r0
 8002130:	461a      	mov	r2, r3
 8002132:	0063      	lsls	r3, r4, #1
 8002134:	3368      	adds	r3, #104	@ 0x68
 8002136:	443b      	add	r3, r7
 8002138:	f823 2c0c 	strh.w	r2, [r3, #-12]
        snprintf(buffer, sizeof(buffer), "\r\n--> Tec voltage[%d]: %i mV", i, vol[i]);
 800213c:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8002140:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	3368      	adds	r3, #104	@ 0x68
 8002148:	443b      	add	r3, r7
 800214a:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 800214e:	f107 000c 	add.w	r0, r7, #12
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	4613      	mov	r3, r2
 8002156:	4a0d      	ldr	r2, [pc, #52]	@ (800218c <Cmd_tec_get_vol+0x88>)
 8002158:	2150      	movs	r1, #80	@ 0x50
 800215a:	f008 fba9 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 800215e:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <Cmd_tec_get_vol+0x8c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f107 020c 	add.w	r2, r7, #12
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff f91b 	bl	80013a4 <UART_SendStringRing>
    for (uint8_t i = 0; i < 4; i++)
 800216e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002172:	3301      	adds	r3, #1
 8002174:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002178:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800217c:	2b03      	cmp	r3, #3
 800217e:	d9cf      	bls.n	8002120 <Cmd_tec_get_vol+0x1c>
    }
    return CMDLINE_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	376c      	adds	r7, #108	@ 0x6c
 8002186:	46bd      	mov	sp, r7
 8002188:	bd90      	pop	{r4, r7, pc}
 800218a:	bf00      	nop
 800218c:	0800bc48 	.word	0x0800bc48
 8002190:	20003434 	.word	0x20003434

08002194 <Cmd_tec_dir>:

int Cmd_tec_dir (int argc, char *argv[])
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	dc01      	bgt.n	80021a8 <Cmd_tec_dir+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e03f      	b.n	8002228 <Cmd_tec_dir+0x94>
    if (argc > 6)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	dd01      	ble.n	80021b2 <Cmd_tec_dir+0x1e>
        return CMDLINE_TOO_MANY_ARGS;
 80021ae:	2302      	movs	r3, #2
 80021b0:	e03a      	b.n	8002228 <Cmd_tec_dir+0x94>
    tec_dir_t dir_0 = atoi(argv[1]) ? TEC_HEAT : TEC_COOL;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	3304      	adds	r3, #4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f008 faf1 	bl	800a7a0 <atoi>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf14      	ite	ne
 80021c4:	2301      	movne	r3, #1
 80021c6:	2300      	moveq	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	73fb      	strb	r3, [r7, #15]
    tec_dir_t dir_1 = atoi(argv[2]) ? TEC_HEAT : TEC_COOL;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	3308      	adds	r3, #8
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f008 fae4 	bl	800a7a0 <atoi>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	bf14      	ite	ne
 80021de:	2301      	movne	r3, #1
 80021e0:	2300      	moveq	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	73bb      	strb	r3, [r7, #14]
    tec_dir_t dir_2 = atoi(argv[3]) ? TEC_HEAT : TEC_COOL;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	330c      	adds	r3, #12
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f008 fad7 	bl	800a7a0 <atoi>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf14      	ite	ne
 80021f8:	2301      	movne	r3, #1
 80021fa:	2300      	moveq	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	737b      	strb	r3, [r7, #13]
    tec_dir_t dir_3 = atoi(argv[4]) ? TEC_HEAT : TEC_COOL;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	3310      	adds	r3, #16
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f008 faca 	bl	800a7a0 <atoi>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	bf14      	ite	ne
 8002212:	2301      	movne	r3, #1
 8002214:	2300      	moveq	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	733b      	strb	r3, [r7, #12]
    tec_set_dir(dir_0, dir_1, dir_2, dir_3);
 800221a:	7b3b      	ldrb	r3, [r7, #12]
 800221c:	7b7a      	ldrb	r2, [r7, #13]
 800221e:	7bb9      	ldrb	r1, [r7, #14]
 8002220:	7bf8      	ldrb	r0, [r7, #15]
 8002222:	f004 fd91 	bl	8006d48 <tec_set_dir>
    return CMDLINE_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <Cmd_tec_ctrl>:

int Cmd_tec_ctrl (int argc, char *argv[])
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b05      	cmp	r3, #5
 800223e:	dc01      	bgt.n	8002244 <Cmd_tec_ctrl+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 8002240:	2303      	movs	r3, #3
 8002242:	e04d      	b.n	80022e0 <Cmd_tec_ctrl+0xb0>
    if (argc > 6)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b06      	cmp	r3, #6
 8002248:	dd01      	ble.n	800224e <Cmd_tec_ctrl+0x1e>
        return CMDLINE_TOO_MANY_ARGS;
 800224a:	2302      	movs	r3, #2
 800224c:	e048      	b.n	80022e0 <Cmd_tec_ctrl+0xb0>
    if (atoi(argv[1]))
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	3304      	adds	r3, #4
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f008 faa3 	bl	800a7a0 <atoi>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d004      	beq.n	800226a <Cmd_tec_ctrl+0x3a>
    	lt8722_set_swen_req(0, LT8722_SWEN_REQ_ENABLED);
 8002260:	2101      	movs	r1, #1
 8002262:	2000      	movs	r0, #0
 8002264:	f001 ff9b 	bl	800419e <lt8722_set_swen_req>
 8002268:	e003      	b.n	8002272 <Cmd_tec_ctrl+0x42>
    else
    	lt8722_set_swen_req(0, LT8722_SWEN_REQ_DISABLED);
 800226a:	2100      	movs	r1, #0
 800226c:	2000      	movs	r0, #0
 800226e:	f001 ff96 	bl	800419e <lt8722_set_swen_req>
    if (atoi(argv[2]))
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	3308      	adds	r3, #8
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f008 fa91 	bl	800a7a0 <atoi>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d004      	beq.n	800228e <Cmd_tec_ctrl+0x5e>
    	lt8722_set_swen_req(1, LT8722_SWEN_REQ_ENABLED);
 8002284:	2101      	movs	r1, #1
 8002286:	2001      	movs	r0, #1
 8002288:	f001 ff89 	bl	800419e <lt8722_set_swen_req>
 800228c:	e003      	b.n	8002296 <Cmd_tec_ctrl+0x66>
    else
    	lt8722_set_swen_req(1, LT8722_SWEN_REQ_DISABLED);
 800228e:	2100      	movs	r1, #0
 8002290:	2001      	movs	r0, #1
 8002292:	f001 ff84 	bl	800419e <lt8722_set_swen_req>
    if (atoi(argv[3]))
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	330c      	adds	r3, #12
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f008 fa7f 	bl	800a7a0 <atoi>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <Cmd_tec_ctrl+0x82>
    	lt8722_set_swen_req(2, LT8722_SWEN_REQ_ENABLED);
 80022a8:	2101      	movs	r1, #1
 80022aa:	2002      	movs	r0, #2
 80022ac:	f001 ff77 	bl	800419e <lt8722_set_swen_req>
 80022b0:	e003      	b.n	80022ba <Cmd_tec_ctrl+0x8a>
    else
    	lt8722_set_swen_req(2, LT8722_SWEN_REQ_DISABLED);
 80022b2:	2100      	movs	r1, #0
 80022b4:	2002      	movs	r0, #2
 80022b6:	f001 ff72 	bl	800419e <lt8722_set_swen_req>
    if (atoi(argv[4]))
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	3310      	adds	r3, #16
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f008 fa6d 	bl	800a7a0 <atoi>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d004      	beq.n	80022d6 <Cmd_tec_ctrl+0xa6>
    	lt8722_set_swen_req(3, LT8722_SWEN_REQ_ENABLED);
 80022cc:	2101      	movs	r1, #1
 80022ce:	2003      	movs	r0, #3
 80022d0:	f001 ff65 	bl	800419e <lt8722_set_swen_req>
 80022d4:	e003      	b.n	80022de <Cmd_tec_ctrl+0xae>
    else
    	lt8722_set_swen_req(3, LT8722_SWEN_REQ_DISABLED);
 80022d6:	2100      	movs	r1, #0
 80022d8:	2003      	movs	r0, #3
 80022da:	f001 ff60 	bl	800419e <lt8722_set_swen_req>
    return CMDLINE_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <Cmd_heater_set_duty>:

int Cmd_heater_set_duty(int argc, char *argv[])
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b09a      	sub	sp, #104	@ 0x68
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	dc01      	bgt.n	80022fc <Cmd_heater_set_duty+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e042      	b.n	8002382 <Cmd_heater_set_duty+0x9a>
    if (argc > 6)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b06      	cmp	r3, #6
 8002300:	dd01      	ble.n	8002306 <Cmd_heater_set_duty+0x1e>
        return CMDLINE_TOO_MANY_ARGS;
 8002302:	2302      	movs	r3, #2
 8002304:	e03d      	b.n	8002382 <Cmd_heater_set_duty+0x9a>
    uint8_t duty;
    char buffer[80];
    for (uint8_t i = 0; i < 4; i++)
 8002306:	2300      	movs	r3, #0
 8002308:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 800230c:	e034      	b.n	8002378 <Cmd_heater_set_duty+0x90>
    {
        duty = atoi(argv[i + 1]);
 800230e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002312:	3301      	adds	r3, #1
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	4413      	add	r3, r2
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f008 fa3f 	bl	800a7a0 <atoi>
 8002322:	4603      	mov	r3, r0
 8002324:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        if (duty > 100) duty = 100;
 8002328:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800232c:	2b64      	cmp	r3, #100	@ 0x64
 800232e:	d902      	bls.n	8002336 <Cmd_heater_set_duty+0x4e>
 8002330:	2364      	movs	r3, #100	@ 0x64
 8002332:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        temperature_set_heater_duty(i, duty);
 8002336:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800233a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f004 fc83 	bl	8006c4c <temperature_set_heater_duty>
        snprintf(buffer, sizeof(buffer), "Heater duty[%d]: %i%%\r\n", i, duty);
 8002346:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 800234a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800234e:	f107 000c 	add.w	r0, r7, #12
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	4613      	mov	r3, r2
 8002356:	4a0d      	ldr	r2, [pc, #52]	@ (800238c <Cmd_heater_set_duty+0xa4>)
 8002358:	2150      	movs	r1, #80	@ 0x50
 800235a:	f008 faa9 	bl	800a8b0 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 800235e:	4b0c      	ldr	r3, [pc, #48]	@ (8002390 <Cmd_heater_set_duty+0xa8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f107 020c 	add.w	r2, r7, #12
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff f81b 	bl	80013a4 <UART_SendStringRing>
    for (uint8_t i = 0; i < 4; i++)
 800236e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002372:	3301      	adds	r3, #1
 8002374:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8002378:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800237c:	2b03      	cmp	r3, #3
 800237e:	d9c6      	bls.n	800230e <Cmd_heater_set_duty+0x26>
    }
    return CMDLINE_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3760      	adds	r7, #96	@ 0x60
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	0800bc68 	.word	0x0800bc68
 8002390:	20003434 	.word	0x20003434

08002394 <Cmd_heater_get_duty>:

int Cmd_heater_get_duty(int argc, char *argv[])
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b09a      	sub	sp, #104	@ 0x68
 8002398:	af02      	add	r7, sp, #8
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
    if (argc > 2)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	dd01      	ble.n	80023a8 <Cmd_heater_get_duty+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 80023a4:	2302      	movs	r3, #2
 80023a6:	e029      	b.n	80023fc <Cmd_heater_get_duty+0x68>
    uint8_t duty;
    char buffer[80];
    for (uint8_t i = 0; i < 4; i++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80023ae:	e020      	b.n	80023f2 <Cmd_heater_get_duty+0x5e>
    {
        duty = temperature_get_heater_duty(i);
 80023b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80023b4:	4618      	mov	r0, r3
 80023b6:	f004 fc71 	bl	8006c9c <temperature_get_heater_duty>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        snprintf(buffer, sizeof(buffer), "Heater duty[%d]: %i%%\r\n", i, duty);
 80023c0:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80023c4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80023c8:	f107 000c 	add.w	r0, r7, #12
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	4613      	mov	r3, r2
 80023d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002404 <Cmd_heater_get_duty+0x70>)
 80023d2:	2150      	movs	r1, #80	@ 0x50
 80023d4:	f008 fa6c 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <Cmd_heater_get_duty+0x74>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f107 020c 	add.w	r2, r7, #12
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe ffde 	bl	80013a4 <UART_SendStringRing>
    for (uint8_t i = 0; i < 4; i++)
 80023e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80023ec:	3301      	adds	r3, #1
 80023ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80023f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d9da      	bls.n	80023b0 <Cmd_heater_get_duty+0x1c>
    }
    return CMDLINE_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3760      	adds	r7, #96	@ 0x60
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	0800bc68 	.word	0x0800bc68
 8002408:	20003434 	.word	0x20003434

0800240c <Cmd_tec_init>:

int Cmd_tec_init(int argc, char *argv[])
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b094      	sub	sp, #80	@ 0x50
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b03      	cmp	r3, #3
 800241a:	dd01      	ble.n	8002420 <Cmd_tec_init+0x14>
 800241c:	2302      	movs	r3, #2
 800241e:	e097      	b.n	8002550 <Cmd_tec_init+0x144>
	uint32_t data = 1;
 8002420:	2301      	movs	r3, #1
 8002422:	64bb      	str	r3, [r7, #72]	@ 0x48
	char buffer[60];
	int8_t tec_init_channel = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    if (argc == 2)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d147      	bne.n	80024c0 <Cmd_tec_init+0xb4>
    {
    	for (uint8_t channel = 0; channel < 4; channel++)
 8002430:	2300      	movs	r3, #0
 8002432:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002436:	e03d      	b.n	80024b4 <Cmd_tec_init+0xa8>
    	{
    		tec_init_channel = lt8722_init(channel);
 8002438:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800243c:	4618      	mov	r0, r3
 800243e:	f001 feff 	bl	8004240 <lt8722_init>
 8002442:	4603      	mov	r3, r0
 8002444:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
			LL_mDelay(10);
 8002448:	200a      	movs	r0, #10
 800244a:	f007 ffe9 	bl	800a420 <LL_mDelay>
			if (!tec_init_channel) lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
 800244e:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <Cmd_tec_init+0x56>
 8002456:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f001 fe9e 	bl	800419e <lt8722_set_swen_req>
			lt8722_reg_read(channel, LT8722_SPIS_STATUS, &data);
 8002462:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002466:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800246a:	2101      	movs	r1, #1
 800246c:	4618      	mov	r0, r3
 800246e:	f001 fdf5 	bl	800405c <lt8722_reg_read>
			if (!data)
 8002472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002474:	2b00      	cmp	r3, #0
 8002476:	d108      	bne.n	800248a <Cmd_tec_init+0x7e>
				snprintf(buffer, sizeof(buffer), "\r\n--> Tec %d init success", channel);
 8002478:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800247c:	f107 000c 	add.w	r0, r7, #12
 8002480:	4a35      	ldr	r2, [pc, #212]	@ (8002558 <Cmd_tec_init+0x14c>)
 8002482:	213c      	movs	r1, #60	@ 0x3c
 8002484:	f008 fa14 	bl	800a8b0 <sniprintf>
 8002488:	e007      	b.n	800249a <Cmd_tec_init+0x8e>
			else
				snprintf(buffer, sizeof(buffer), "\r\n--> Tec %d init fail", channel);
 800248a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800248e:	f107 000c 	add.w	r0, r7, #12
 8002492:	4a32      	ldr	r2, [pc, #200]	@ (800255c <Cmd_tec_init+0x150>)
 8002494:	213c      	movs	r1, #60	@ 0x3c
 8002496:	f008 fa0b 	bl	800a8b0 <sniprintf>
			UART_SendStringRing(UART_CMDLINE, buffer);
 800249a:	4b31      	ldr	r3, [pc, #196]	@ (8002560 <Cmd_tec_init+0x154>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f107 020c 	add.w	r2, r7, #12
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe ff7d 	bl	80013a4 <UART_SendStringRing>
    	for (uint8_t channel = 0; channel < 4; channel++)
 80024aa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80024ae:	3301      	adds	r3, #1
 80024b0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80024b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d9bd      	bls.n	8002438 <Cmd_tec_init+0x2c>
    	}
        return CMDLINE_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e047      	b.n	8002550 <Cmd_tec_init+0x144>
    }
    if (argc == 3)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d143      	bne.n	800254e <Cmd_tec_init+0x142>
    {
    	uint8_t channel = atoi(argv[1]);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	3304      	adds	r3, #4
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f008 f967 	bl	800a7a0 <atoi>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    	tec_init_channel = lt8722_init(channel);
 80024d8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024dc:	4618      	mov	r0, r3
 80024de:	f001 feaf 	bl	8004240 <lt8722_init>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    	LL_mDelay(10);
 80024e8:	200a      	movs	r0, #10
 80024ea:	f007 ff99 	bl	800a420 <LL_mDelay>
    	if (!tec_init_channel) lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
 80024ee:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d105      	bne.n	8002502 <Cmd_tec_init+0xf6>
 80024f6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f001 fe4e 	bl	800419e <lt8722_set_swen_req>
    	lt8722_reg_read(channel, LT8722_SPIS_STATUS, &data);
 8002502:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002506:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800250a:	2101      	movs	r1, #1
 800250c:	4618      	mov	r0, r3
 800250e:	f001 fda5 	bl	800405c <lt8722_reg_read>
    	if (!data)
 8002512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002514:	2b00      	cmp	r3, #0
 8002516:	d108      	bne.n	800252a <Cmd_tec_init+0x11e>
    		snprintf(buffer, sizeof(buffer), "\r\n--> Tec %d init success", channel);
 8002518:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800251c:	f107 000c 	add.w	r0, r7, #12
 8002520:	4a0d      	ldr	r2, [pc, #52]	@ (8002558 <Cmd_tec_init+0x14c>)
 8002522:	213c      	movs	r1, #60	@ 0x3c
 8002524:	f008 f9c4 	bl	800a8b0 <sniprintf>
 8002528:	e007      	b.n	800253a <Cmd_tec_init+0x12e>
    	else
    		snprintf(buffer, sizeof(buffer), "\r\n--> Tec %d init fail", channel);
 800252a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800252e:	f107 000c 	add.w	r0, r7, #12
 8002532:	4a0a      	ldr	r2, [pc, #40]	@ (800255c <Cmd_tec_init+0x150>)
 8002534:	213c      	movs	r1, #60	@ 0x3c
 8002536:	f008 f9bb 	bl	800a8b0 <sniprintf>
    	UART_SendStringRing(UART_CMDLINE, buffer);
 800253a:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <Cmd_tec_init+0x154>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f107 020c 	add.w	r2, r7, #12
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe ff2d 	bl	80013a4 <UART_SendStringRing>
    	return CMDLINE_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <Cmd_tec_init+0x144>
    }
    return CMDLINE_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3750      	adds	r7, #80	@ 0x50
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	0800bc80 	.word	0x0800bc80
 800255c:	0800bc9c 	.word	0x0800bc9c
 8002560:	20003434 	.word	0x20003434

08002564 <Cmd_temp_auto_ctrl>:

int Cmd_temp_auto_ctrl(int argc, char *argv[])
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b05      	cmp	r3, #5
 8002572:	dc01      	bgt.n	8002578 <Cmd_temp_auto_ctrl+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 8002574:	2303      	movs	r3, #3
 8002576:	e03f      	b.n	80025f8 <Cmd_temp_auto_ctrl+0x94>
    if (argc > 6)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b06      	cmp	r3, #6
 800257c:	dd01      	ble.n	8002582 <Cmd_temp_auto_ctrl+0x1e>
        return CMDLINE_TOO_MANY_ARGS;
 800257e:	2302      	movs	r3, #2
 8002580:	e03a      	b.n	80025f8 <Cmd_temp_auto_ctrl+0x94>
    uint8_t auto_0 = atoi(argv[1]) ? 1 : 0;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	3304      	adds	r3, #4
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f008 f909 	bl	800a7a0 <atoi>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	73fb      	strb	r3, [r7, #15]
    uint8_t auto_1 = atoi(argv[2]) ? 1 : 0;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	3308      	adds	r3, #8
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f008 f8fc 	bl	800a7a0 <atoi>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bf14      	ite	ne
 80025ae:	2301      	movne	r3, #1
 80025b0:	2300      	moveq	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	73bb      	strb	r3, [r7, #14]
    uint8_t auto_2 = atoi(argv[3]) ? 1 : 0;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	330c      	adds	r3, #12
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f008 f8ef 	bl	800a7a0 <atoi>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	bf14      	ite	ne
 80025c8:	2301      	movne	r3, #1
 80025ca:	2300      	moveq	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	737b      	strb	r3, [r7, #13]
    uint8_t auto_3 = atoi(argv[4]) ? 1 : 0;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	3310      	adds	r3, #16
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f008 f8e2 	bl	800a7a0 <atoi>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	bf14      	ite	ne
 80025e2:	2301      	movne	r3, #1
 80025e4:	2300      	moveq	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	733b      	strb	r3, [r7, #12]
    temperature_set_auto_ctrl(auto_0, auto_1, auto_2, auto_3);
 80025ea:	7b3b      	ldrb	r3, [r7, #12]
 80025ec:	7b7a      	ldrb	r2, [r7, #13]
 80025ee:	7bb9      	ldrb	r1, [r7, #14]
 80025f0:	7bf8      	ldrb	r0, [r7, #15]
 80025f2:	f004 fb71 	bl	8006cd8 <temperature_set_auto_ctrl>
    return (CMDLINE_OK);
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <Cmd_ir_set_duty>:
/* Command for ir led */
int Cmd_ir_set_duty(int argc, char *argv[])
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b098      	sub	sp, #96	@ 0x60
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
    if (argc < 6)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b05      	cmp	r3, #5
 800260e:	dc01      	bgt.n	8002614 <Cmd_ir_set_duty+0x14>
        return CMDLINE_TOO_FEW_ARGS;
 8002610:	2303      	movs	r3, #3
 8002612:	e02a      	b.n	800266a <Cmd_ir_set_duty+0x6a>
    if (argc > 6)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b06      	cmp	r3, #6
 8002618:	dd01      	ble.n	800261e <Cmd_ir_set_duty+0x1e>
        return CMDLINE_TOO_MANY_ARGS;
 800261a:	2302      	movs	r3, #2
 800261c:	e025      	b.n	800266a <Cmd_ir_set_duty+0x6a>
    char buffer[80];
	uint8_t duty = atoi(argv[1]);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	3304      	adds	r3, #4
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f008 f8bb 	bl	800a7a0 <atoi>
 800262a:	4603      	mov	r3, r0
 800262c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (duty > 100) duty = 100;
 8002630:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002634:	2b64      	cmp	r3, #100	@ 0x64
 8002636:	d902      	bls.n	800263e <Cmd_ir_set_duty+0x3e>
 8002638:	2364      	movs	r3, #100	@ 0x64
 800263a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	ir_led_set_duty(duty);
 800263e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002642:	4618      	mov	r0, r3
 8002644:	f001 fb1a 	bl	8003c7c <ir_led_set_duty>
    snprintf(buffer, sizeof(buffer), "IR LED duty: %i%%\r\n", duty);
 8002648:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800264c:	f107 000c 	add.w	r0, r7, #12
 8002650:	4a08      	ldr	r2, [pc, #32]	@ (8002674 <Cmd_ir_set_duty+0x74>)
 8002652:	2150      	movs	r1, #80	@ 0x50
 8002654:	f008 f92c 	bl	800a8b0 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 8002658:	4b07      	ldr	r3, [pc, #28]	@ (8002678 <Cmd_ir_set_duty+0x78>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f107 020c 	add.w	r2, r7, #12
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fe9e 	bl	80013a4 <UART_SendStringRing>
    return CMDLINE_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3760      	adds	r7, #96	@ 0x60
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	0800bcb4 	.word	0x0800bcb4
 8002678:	20003434 	.word	0x20003434

0800267c <Cmd_ir_get_duty>:

int Cmd_ir_get_duty(int argc, char *argv[])
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08e      	sub	sp, #56	@ 0x38
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
    if (argc > 2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b02      	cmp	r3, #2
 800268a:	dd01      	ble.n	8002690 <Cmd_ir_get_duty+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 800268c:	2302      	movs	r3, #2
 800268e:	e015      	b.n	80026bc <Cmd_ir_get_duty+0x40>
    char buffer[40];
    uint8_t duty = ir_led_get_duty();
 8002690:	f001 fb14 	bl	8003cbc <ir_led_get_duty>
 8002694:	4603      	mov	r3, r0
 8002696:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	snprintf(buffer, sizeof(buffer), "Heater duty: %i%%\r\n", duty);
 800269a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800269e:	f107 000c 	add.w	r0, r7, #12
 80026a2:	4a08      	ldr	r2, [pc, #32]	@ (80026c4 <Cmd_ir_get_duty+0x48>)
 80026a4:	2128      	movs	r1, #40	@ 0x28
 80026a6:	f008 f903 	bl	800a8b0 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 80026aa:	4b07      	ldr	r3, [pc, #28]	@ (80026c8 <Cmd_ir_get_duty+0x4c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f107 020c 	add.w	r2, r7, #12
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fe75 	bl	80013a4 <UART_SendStringRing>
    return CMDLINE_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3738      	adds	r7, #56	@ 0x38
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	0800bcc8 	.word	0x0800bcc8
 80026c8:	20003434 	.word	0x20003434

080026cc <Cmd_acceleration_gyroscope_get>:

/* Command for i2c sensor */
int Cmd_acceleration_gyroscope_get(int argc, char *argv[])
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
    return (CMDLINE_OK);
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <Cmd_pressure_get>:
int Cmd_pressure_get(int argc, char *argv[])
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
    return (CMDLINE_OK);
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <Cmd_get_all>:
/* Command for system */
int Cmd_get_all(int argc, char *argv[])
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
    UART_SendStringRing(UART_CMDLINE, "Get all \r\n");
 8002706:	4b05      	ldr	r3, [pc, #20]	@ (800271c <Cmd_get_all+0x20>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4905      	ldr	r1, [pc, #20]	@ (8002720 <Cmd_get_all+0x24>)
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fe49 	bl	80013a4 <UART_SendStringRing>
    return (CMDLINE_OK);
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20003434 	.word	0x20003434
 8002720:	0800bcdc 	.word	0x0800bcdc

08002724 <Cmd_dac_set>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
int Cmd_dac_set(int argc, char *argv[])
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b092      	sub	sp, #72	@ 0x48
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
    if (argc > 3)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b03      	cmp	r3, #3
 8002732:	dd01      	ble.n	8002738 <Cmd_dac_set+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 8002734:	2302      	movs	r3, #2
 8002736:	e024      	b.n	8002782 <Cmd_dac_set+0x5e>
    if (argc < 3)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b02      	cmp	r3, #2
 800273c:	dc01      	bgt.n	8002742 <Cmd_dac_set+0x1e>
        return CMDLINE_TOO_FEW_ARGS;
 800273e:	2303      	movs	r3, #3
 8002740:	e01f      	b.n	8002782 <Cmd_dac_set+0x5e>

    uint8_t dac_point = atoi(argv[1]);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	3304      	adds	r3, #4
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f008 f829 	bl	800a7a0 <atoi>
 800274e:	4603      	mov	r3, r0
 8002750:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if (dac_point > 255)
        return CMDLINE_INVALID_ARG;

    char buffer[60];
    snprintf(buffer, sizeof(buffer), "DAC Point: %d \r\n", dac_point);
 8002754:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002758:	f107 0008 	add.w	r0, r7, #8
 800275c:	4a0b      	ldr	r2, [pc, #44]	@ (800278c <Cmd_dac_set+0x68>)
 800275e:	213c      	movs	r1, #60	@ 0x3c
 8002760:	f008 f8a6 	bl	800a8b0 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 8002764:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <Cmd_dac_set+0x6c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f107 0208 	add.w	r2, r7, #8
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fe18 	bl	80013a4 <UART_SendStringRing>

    DAC_Write(0, dac_point);
 8002774:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002778:	4619      	mov	r1, r3
 800277a:	2000      	movs	r0, #0
 800277c:	f001 f88c 	bl	8003898 <DAC_Write>

    return (CMDLINE_OK);
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3748      	adds	r7, #72	@ 0x48
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	0800bce8 	.word	0x0800bce8
 8002790:	20003434 	.word	0x20003434

08002794 <Cmd_ls_set>:

// LASER_SW_INT_CS_Pin
// LASER_SW_INT_CS_GPIO_Port
int Cmd_ls_set(int argc, char *argv[])
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
    if (argc > 3)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	dd01      	ble.n	80027a8 <Cmd_ls_set+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 80027a4:	2302      	movs	r3, #2
 80027a6:	e061      	b.n	800286c <Cmd_ls_set+0xd8>
    if (argc < 3)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	dc01      	bgt.n	80027b2 <Cmd_ls_set+0x1e>
        return CMDLINE_TOO_FEW_ARGS;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e05c      	b.n	800286c <Cmd_ls_set+0xd8>
    uint8_t ls_slot = atoi(argv[1]);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	3304      	adds	r3, #4
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f007 fff1 	bl	800a7a0 <atoi>
 80027be:	4603      	mov	r3, r0
 80027c0:	74fb      	strb	r3, [r7, #19]
    uint8_t data[6] = {0, 0, 0, 0, 0, 0};
 80027c2:	f107 0308 	add.w	r3, r7, #8
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	809a      	strh	r2, [r3, #4]
    if (ls_slot > 0 && ls_slot <= 36)
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d021      	beq.n	8002816 <Cmd_ls_set+0x82>
 80027d2:	7cfb      	ldrb	r3, [r7, #19]
 80027d4:	2b24      	cmp	r3, #36	@ 0x24
 80027d6:	d81e      	bhi.n	8002816 <Cmd_ls_set+0x82>
    {
        uint8_t chip_index = (ls_slot - 1) / 6;
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	3b01      	subs	r3, #1
 80027dc:	4a25      	ldr	r2, [pc, #148]	@ (8002874 <Cmd_ls_set+0xe0>)
 80027de:	fb82 1203 	smull	r1, r2, r2, r3
 80027e2:	17db      	asrs	r3, r3, #31
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	74bb      	strb	r3, [r7, #18]
        uint8_t port_index = (ls_slot - 1) % 6;
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	1e5a      	subs	r2, r3, #1
 80027ec:	4b21      	ldr	r3, [pc, #132]	@ (8002874 <Cmd_ls_set+0xe0>)
 80027ee:	fb83 3102 	smull	r3, r1, r3, r2
 80027f2:	17d3      	asrs	r3, r2, #31
 80027f4:	1ac9      	subs	r1, r1, r3
 80027f6:	460b      	mov	r3, r1
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	440b      	add	r3, r1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	1ad1      	subs	r1, r2, r3
 8002800:	460b      	mov	r3, r1
 8002802:	747b      	strb	r3, [r7, #17]
        data[chip_index] = (1 << port_index);
 8002804:	7c7b      	ldrb	r3, [r7, #17]
 8002806:	2201      	movs	r2, #1
 8002808:	409a      	lsls	r2, r3
 800280a:	7cbb      	ldrb	r3, [r7, #18]
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	3318      	adds	r3, #24
 8002810:	443b      	add	r3, r7
 8002812:	f803 2c10 	strb.w	r2, [r3, #-16]
    }
    LL_GPIO_ResetOutputPin(LASER_SW_INT_CS_GPIO_Port, LASER_SW_INT_CS_Pin);
 8002816:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800281a:	4817      	ldr	r0, [pc, #92]	@ (8002878 <Cmd_ls_set+0xe4>)
 800281c:	f7fe ff14 	bl	8001648 <LL_GPIO_ResetOutputPin>
    for (int i = 5; i >= 0; i--)
 8002820:	2305      	movs	r3, #5
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	e012      	b.n	800284c <Cmd_ls_set+0xb8>
    {
        LL_SPI_TransmitData8(SPI1, data[i]);
 8002826:	f107 0208 	add.w	r2, r7, #8
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	4413      	add	r3, r2
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	4619      	mov	r1, r3
 8002832:	4812      	ldr	r0, [pc, #72]	@ (800287c <Cmd_ls_set+0xe8>)
 8002834:	f7fe fee8 	bl	8001608 <LL_SPI_TransmitData8>
        while (!LL_SPI_IsActiveFlag_TXE(SPI1));
 8002838:	bf00      	nop
 800283a:	4810      	ldr	r0, [pc, #64]	@ (800287c <Cmd_ls_set+0xe8>)
 800283c:	f7fe febe 	bl	80015bc <LL_SPI_IsActiveFlag_TXE>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f9      	beq.n	800283a <Cmd_ls_set+0xa6>
    for (int i = 5; i >= 0; i--)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3b01      	subs	r3, #1
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2b00      	cmp	r3, #0
 8002850:	dae9      	bge.n	8002826 <Cmd_ls_set+0x92>
    }
    while (LL_SPI_IsActiveFlag_BSY(SPI1));
 8002852:	bf00      	nop
 8002854:	4809      	ldr	r0, [pc, #36]	@ (800287c <Cmd_ls_set+0xe8>)
 8002856:	f7fe fec4 	bl	80015e2 <LL_SPI_IsActiveFlag_BSY>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f9      	bne.n	8002854 <Cmd_ls_set+0xc0>
    LL_GPIO_SetOutputPin(LASER_SW_INT_CS_GPIO_Port, LASER_SW_INT_CS_Pin);
 8002860:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002864:	4804      	ldr	r0, [pc, #16]	@ (8002878 <Cmd_ls_set+0xe4>)
 8002866:	f7fe fee1 	bl	800162c <LL_GPIO_SetOutputPin>
    return CMDLINE_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	2aaaaaab 	.word	0x2aaaaaab
 8002878:	40021000 	.word	0x40021000
 800287c:	40013000 	.word	0x40013000

08002880 <Cmd_pd_set>:
//    LL_GPIO_SetOutputPin(LASER_SW_INT_CS_GPIO_Port, LASER_SW_INT_CS_Pin);
//    return CMDLINE_OK;
//}

int Cmd_pd_set(int argc, char *argv[])
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
    if (argc > 3)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b03      	cmp	r3, #3
 800288e:	dd01      	ble.n	8002894 <Cmd_pd_set+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 8002890:	2302      	movs	r3, #2
 8002892:	e064      	b.n	800295e <Cmd_pd_set+0xde>
    if (argc < 3)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b02      	cmp	r3, #2
 8002898:	dc01      	bgt.n	800289e <Cmd_pd_set+0x1e>
        return CMDLINE_TOO_FEW_ARGS;
 800289a:	2303      	movs	r3, #3
 800289c:	e05f      	b.n	800295e <Cmd_pd_set+0xde>
    uint8_t pd_slot = atoi(argv[1]);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	3304      	adds	r3, #4
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f007 ff7b 	bl	800a7a0 <atoi>
 80028aa:	4603      	mov	r3, r0
 80028ac:	76fb      	strb	r3, [r7, #27]
    if (pd_slot > 36)
 80028ae:	7efb      	ldrb	r3, [r7, #27]
 80028b0:	2b24      	cmp	r3, #36	@ 0x24
 80028b2:	d901      	bls.n	80028b8 <Cmd_pd_set+0x38>
        return CMDLINE_INVALID_ARG;
 80028b4:	2304      	movs	r3, #4
 80028b6:	e052      	b.n	800295e <Cmd_pd_set+0xde>
    uint8_t data[6] = {0, 0, 0, 0, 0, 0};
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	809a      	strh	r2, [r3, #4]
    if (pd_slot > 0 && pd_slot <= 36)
 80028c2:	7efb      	ldrb	r3, [r7, #27]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d021      	beq.n	800290c <Cmd_pd_set+0x8c>
 80028c8:	7efb      	ldrb	r3, [r7, #27]
 80028ca:	2b24      	cmp	r3, #36	@ 0x24
 80028cc:	d81e      	bhi.n	800290c <Cmd_pd_set+0x8c>
    {
        uint8_t chip_index = (pd_slot - 1) / 6;
 80028ce:	7efb      	ldrb	r3, [r7, #27]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	4a25      	ldr	r2, [pc, #148]	@ (8002968 <Cmd_pd_set+0xe8>)
 80028d4:	fb82 1203 	smull	r1, r2, r2, r3
 80028d8:	17db      	asrs	r3, r3, #31
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	76bb      	strb	r3, [r7, #26]
        uint8_t port_index = (pd_slot - 1) % 6;
 80028de:	7efb      	ldrb	r3, [r7, #27]
 80028e0:	1e5a      	subs	r2, r3, #1
 80028e2:	4b21      	ldr	r3, [pc, #132]	@ (8002968 <Cmd_pd_set+0xe8>)
 80028e4:	fb83 3102 	smull	r3, r1, r3, r2
 80028e8:	17d3      	asrs	r3, r2, #31
 80028ea:	1ac9      	subs	r1, r1, r3
 80028ec:	460b      	mov	r3, r1
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	440b      	add	r3, r1
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	1ad1      	subs	r1, r2, r3
 80028f6:	460b      	mov	r3, r1
 80028f8:	767b      	strb	r3, [r7, #25]
        data[chip_index] = (1 << port_index);
 80028fa:	7e7b      	ldrb	r3, [r7, #25]
 80028fc:	2201      	movs	r2, #1
 80028fe:	409a      	lsls	r2, r3
 8002900:	7ebb      	ldrb	r3, [r7, #26]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	3320      	adds	r3, #32
 8002906:	443b      	add	r3, r7
 8002908:	f803 2c10 	strb.w	r2, [r3, #-16]
    }
    uint8_t reversed_data[6];
    for (int i = 0; i < 6; i++)
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	e00f      	b.n	8002932 <Cmd_pd_set+0xb2>
    {
        reversed_data[i] = data[5 - i];
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f1c3 0305 	rsb	r3, r3, #5
 8002918:	3320      	adds	r3, #32
 800291a:	443b      	add	r3, r7
 800291c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8002920:	f107 0208 	add.w	r2, r7, #8
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	460a      	mov	r2, r1
 800292a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 6; i++)
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	3301      	adds	r3, #1
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	2b05      	cmp	r3, #5
 8002936:	ddec      	ble.n	8002912 <Cmd_pd_set+0x92>
    }
    LL_GPIO_ResetOutputPin(PHOTO_PD_CS_GPIO_Port, PHOTO_PD_CS_Pin);
 8002938:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800293c:	480b      	ldr	r0, [pc, #44]	@ (800296c <Cmd_pd_set+0xec>)
 800293e:	f7fe fe83 	bl	8001648 <LL_GPIO_ResetOutputPin>
    HAL_SPI_Transmit(&hspi2, reversed_data, 6, 1000);
 8002942:	f107 0108 	add.w	r1, r7, #8
 8002946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800294a:	2206      	movs	r2, #6
 800294c:	4808      	ldr	r0, [pc, #32]	@ (8002970 <Cmd_pd_set+0xf0>)
 800294e:	f005 f89e 	bl	8007a8e <HAL_SPI_Transmit>
    LL_GPIO_SetOutputPin(PHOTO_PD_CS_GPIO_Port, PHOTO_PD_CS_Pin);
 8002952:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002956:	4805      	ldr	r0, [pc, #20]	@ (800296c <Cmd_pd_set+0xec>)
 8002958:	f7fe fe68 	bl	800162c <LL_GPIO_SetOutputPin>
    return (CMDLINE_OK);
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3720      	adds	r7, #32
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	2aaaaaab 	.word	0x2aaaaaab
 800296c:	40020c00 	.word	0x40020c00
 8002970:	2000350c 	.word	0x2000350c

08002974 <Cmd_get_adc>:

int Cmd_get_adc(int argc, char *argv[])
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b094      	sub	sp, #80	@ 0x50
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
    if (argc > 2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b02      	cmp	r3, #2
 8002982:	dd01      	ble.n	8002988 <Cmd_get_adc+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 8002984:	2302      	movs	r3, #2
 8002986:	e03d      	b.n	8002a04 <Cmd_get_adc+0x90>
    if (argc < 2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b01      	cmp	r3, #1
 800298c:	dc01      	bgt.n	8002992 <Cmd_get_adc+0x1e>
        return CMDLINE_TOO_FEW_ARGS;
 800298e:	2303      	movs	r3, #3
 8002990:	e038      	b.n	8002a04 <Cmd_get_adc+0x90>
    uint8_t rxData[2] = {0};
 8002992:	2300      	movs	r3, #0
 8002994:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    uint32_t result = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    LL_GPIO_ResetOutputPin(PHOTO_ADC_CONV_GPIO_Port, PHOTO_ADC_CONV_Pin);
 800299c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029a0:	481a      	ldr	r0, [pc, #104]	@ (8002a0c <Cmd_get_adc+0x98>)
 80029a2:	f7fe fe51 	bl	8001648 <LL_GPIO_ResetOutputPin>
    __asm__("NOP");
 80029a6:	bf00      	nop
    LL_GPIO_SetOutputPin(PHOTO_ADC_CONV_GPIO_Port, PHOTO_ADC_CONV_Pin);
 80029a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029ac:	4817      	ldr	r0, [pc, #92]	@ (8002a0c <Cmd_get_adc+0x98>)
 80029ae:	f7fe fe3d 	bl	800162c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(PHOTO_ADC_CS_GPIO_Port, PHOTO_ADC_CS_Pin);
 80029b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029b6:	4815      	ldr	r0, [pc, #84]	@ (8002a0c <Cmd_get_adc+0x98>)
 80029b8:	f7fe fe46 	bl	8001648 <LL_GPIO_ResetOutputPin>
    HAL_SPI_Receive(&hspi2, rxData, 2, 1000);
 80029bc:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80029c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029c4:	2202      	movs	r2, #2
 80029c6:	4812      	ldr	r0, [pc, #72]	@ (8002a10 <Cmd_get_adc+0x9c>)
 80029c8:	f005 f9a5 	bl	8007d16 <HAL_SPI_Receive>
    LL_GPIO_SetOutputPin(PHOTO_ADC_CS_GPIO_Port, PHOTO_ADC_CS_Pin);
 80029cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029d0:	480e      	ldr	r0, [pc, #56]	@ (8002a0c <Cmd_get_adc+0x98>)
 80029d2:	f7fe fe2b 	bl	800162c <LL_GPIO_SetOutputPin>
    result = ((uint32_t)rxData[0] << 8) | rxData[1];
 80029d6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80029da:	021b      	lsls	r3, r3, #8
 80029dc:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 80029e0:	4313      	orrs	r3, r2
 80029e2:	64fb      	str	r3, [r7, #76]	@ 0x4c

    char buffer[60];
    snprintf(buffer, sizeof(buffer), "Got ADC: %ld \r\n", result);
 80029e4:	f107 000c 	add.w	r0, r7, #12
 80029e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002a14 <Cmd_get_adc+0xa0>)
 80029ec:	213c      	movs	r1, #60	@ 0x3c
 80029ee:	f007 ff5f 	bl	800a8b0 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 80029f2:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <Cmd_get_adc+0xa4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f107 020c 	add.w	r2, r7, #12
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fcd1 	bl	80013a4 <UART_SendStringRing>
    return (CMDLINE_OK);
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3750      	adds	r7, #80	@ 0x50
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40020c00 	.word	0x40020c00
 8002a10:	2000350c 	.word	0x2000350c
 8002a14:	0800bcfc 	.word	0x0800bcfc
 8002a18:	20003434 	.word	0x20003434

08002a1c <Cmd_auto_laser>:

int Cmd_auto_laser(int argc, char *argv[])
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b0a0      	sub	sp, #128	@ 0x80
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
    if (argc > 8)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	dd01      	ble.n	8002a30 <Cmd_auto_laser+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e14d      	b.n	8002ccc <Cmd_auto_laser+0x2b0>
    if (argc < 8)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b07      	cmp	r3, #7
 8002a34:	dc01      	bgt.n	8002a3a <Cmd_auto_laser+0x1e>
        return CMDLINE_TOO_FEW_ARGS;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e148      	b.n	8002ccc <Cmd_auto_laser+0x2b0>

    uint32_t interval = atoi(argv[1]);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f007 fead 	bl	800a7a0 <atoi>
 8002a46:	4603      	mov	r3, r0
 8002a48:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t times = atoi(argv[2]);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	3308      	adds	r3, #8
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f007 fea5 	bl	800a7a0 <atoi>
 8002a56:	4603      	mov	r3, r0
 8002a58:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t udelay = atoi(argv[3]);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	330c      	adds	r3, #12
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f007 fe9d 	bl	800a7a0 <atoi>
 8002a66:	4603      	mov	r3, r0
 8002a68:	66bb      	str	r3, [r7, #104]	@ 0x68
    uint8_t s_do_time = atoi(argv[4]);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	3310      	adds	r3, #16
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f007 fe95 	bl	800a7a0 <atoi>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    uint32_t s_rest_time = atoi(argv[5]);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	3314      	adds	r3, #20
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f007 fe8c 	bl	800a7a0 <atoi>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	663b      	str	r3, [r7, #96]	@ 0x60
    uint32_t dac = atoi(argv[6]);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	3318      	adds	r3, #24
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f007 fe84 	bl	800a7a0 <atoi>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c

    char buffer[80];

    if (interval % 100 != 0 || interval < 400)
 8002a9c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002a9e:	4b8d      	ldr	r3, [pc, #564]	@ (8002cd4 <Cmd_auto_laser+0x2b8>)
 8002aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	2164      	movs	r1, #100	@ 0x64
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d103      	bne.n	8002aba <Cmd_auto_laser+0x9e>
 8002ab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ab4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002ab8:	d210      	bcs.n	8002adc <Cmd_auto_laser+0xc0>
    {
        snprintf(buffer, sizeof(buffer), "Error: Interval must be a multiple of 100ms and > 400ms.\r\n");
 8002aba:	f107 0308 	add.w	r3, r7, #8
 8002abe:	4a86      	ldr	r2, [pc, #536]	@ (8002cd8 <Cmd_auto_laser+0x2bc>)
 8002ac0:	2150      	movs	r1, #80	@ 0x50
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f007 fef4 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8002ac8:	4b84      	ldr	r3, [pc, #528]	@ (8002cdc <Cmd_auto_laser+0x2c0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f107 0208 	add.w	r2, r7, #8
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fc66 	bl	80013a4 <UART_SendStringRing>
        return CMDLINE_INVALID_ARG;
 8002ad8:	2304      	movs	r3, #4
 8002ada:	e0f7      	b.n	8002ccc <Cmd_auto_laser+0x2b0>
    }

    if (times < 200 || times % 100 != 0 || times > interval)
 8002adc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ade:	2bc7      	cmp	r3, #199	@ 0xc7
 8002ae0:	d90e      	bls.n	8002b00 <Cmd_auto_laser+0xe4>
 8002ae2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ae4:	4b7b      	ldr	r3, [pc, #492]	@ (8002cd4 <Cmd_auto_laser+0x2b8>)
 8002ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	2164      	movs	r1, #100	@ 0x64
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d103      	bne.n	8002b00 <Cmd_auto_laser+0xe4>
 8002af8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002afa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d910      	bls.n	8002b22 <Cmd_auto_laser+0x106>
    {
        snprintf(buffer, sizeof(buffer), "Error: Times must be <= interval, > 200ms, mulof100ms.\r\n");
 8002b00:	f107 0308 	add.w	r3, r7, #8
 8002b04:	4a76      	ldr	r2, [pc, #472]	@ (8002ce0 <Cmd_auto_laser+0x2c4>)
 8002b06:	2150      	movs	r1, #80	@ 0x50
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f007 fed1 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8002b0e:	4b73      	ldr	r3, [pc, #460]	@ (8002cdc <Cmd_auto_laser+0x2c0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f107 0208 	add.w	r2, r7, #8
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe fc43 	bl	80013a4 <UART_SendStringRing>
        return CMDLINE_INVALID_ARG;
 8002b1e:	2304      	movs	r3, #4
 8002b20:	e0d4      	b.n	8002ccc <Cmd_auto_laser+0x2b0>
    }

    if (udelay > 500)
 8002b22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b24:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002b28:	d910      	bls.n	8002b4c <Cmd_auto_laser+0x130>
    {
        snprintf(buffer, sizeof(buffer), "Error: udelay <= 500\r\n");
 8002b2a:	f107 0308 	add.w	r3, r7, #8
 8002b2e:	4a6d      	ldr	r2, [pc, #436]	@ (8002ce4 <Cmd_auto_laser+0x2c8>)
 8002b30:	2150      	movs	r1, #80	@ 0x50
 8002b32:	4618      	mov	r0, r3
 8002b34:	f007 febc 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8002b38:	4b68      	ldr	r3, [pc, #416]	@ (8002cdc <Cmd_auto_laser+0x2c0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f107 0208 	add.w	r2, r7, #8
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe fc2e 	bl	80013a4 <UART_SendStringRing>
        return CMDLINE_INVALID_ARG;
 8002b48:	2304      	movs	r3, #4
 8002b4a:	e0bf      	b.n	8002ccc <Cmd_auto_laser+0x2b0>
    }

    if (s_do_time > 200)
 8002b4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b50:	2bc8      	cmp	r3, #200	@ 0xc8
 8002b52:	d910      	bls.n	8002b76 <Cmd_auto_laser+0x15a>
    {
        snprintf(buffer, sizeof(buffer), "Error: Do only < 200 or = 0 to infinity\r\n");
 8002b54:	f107 0308 	add.w	r3, r7, #8
 8002b58:	4a63      	ldr	r2, [pc, #396]	@ (8002ce8 <Cmd_auto_laser+0x2cc>)
 8002b5a:	2150      	movs	r1, #80	@ 0x50
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f007 fea7 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8002b62:	4b5e      	ldr	r3, [pc, #376]	@ (8002cdc <Cmd_auto_laser+0x2c0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f107 0208 	add.w	r2, r7, #8
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe fc19 	bl	80013a4 <UART_SendStringRing>
        return CMDLINE_INVALID_ARG;
 8002b72:	2304      	movs	r3, #4
 8002b74:	e0aa      	b.n	8002ccc <Cmd_auto_laser+0x2b0>
    }

    run_inf = (s_do_time == 0) ? 1 : 0;
 8002b76:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	bf0c      	ite	eq
 8002b7e:	2301      	moveq	r3, #1
 8002b80:	2300      	movne	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b59      	ldr	r3, [pc, #356]	@ (8002cec <Cmd_auto_laser+0x2d0>)
 8002b88:	701a      	strb	r2, [r3, #0]

    if (dac > 255)
 8002b8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b8c:	2bff      	cmp	r3, #255	@ 0xff
 8002b8e:	d901      	bls.n	8002b94 <Cmd_auto_laser+0x178>
        return CMDLINE_INVALID_ARG;
 8002b90:	2304      	movs	r3, #4
 8002b92:	e09b      	b.n	8002ccc <Cmd_auto_laser+0x2b0>

    snprintf(buffer, sizeof(buffer), "DAC Point: %ld\r\n", dac);
 8002b94:	f107 0008 	add.w	r0, r7, #8
 8002b98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b9a:	4a55      	ldr	r2, [pc, #340]	@ (8002cf0 <Cmd_auto_laser+0x2d4>)
 8002b9c:	2150      	movs	r1, #80	@ 0x50
 8002b9e:	f007 fe87 	bl	800a8b0 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 8002ba2:	4b4e      	ldr	r3, [pc, #312]	@ (8002cdc <Cmd_auto_laser+0x2c0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f107 0208 	add.w	r2, r7, #8
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fe fbf9 	bl	80013a4 <UART_SendStringRing>

    DAC_Write(0, dac);
 8002bb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f000 fe6d 	bl	8003898 <DAC_Write>
    HAL_Delay(100);
 8002bbe:	2064      	movs	r0, #100	@ 0x64
 8002bc0:	f004 f9d4 	bl	8006f6c <HAL_Delay>
    DAC_Write(0, dac);
 8002bc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	4619      	mov	r1, r3
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f000 fe64 	bl	8003898 <DAC_Write>

    int16_t temp = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

    if (temp == 0x7FFF)
 8002bd6:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8002bda:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d106      	bne.n	8002bf0 <Cmd_auto_laser+0x1d4>
    {
        UART_SendStringRing(UART_CMDLINE, "\r\nTemp BMP390 = [FAIL]\r\n");
 8002be2:	4b3e      	ldr	r3, [pc, #248]	@ (8002cdc <Cmd_auto_laser+0x2c0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4943      	ldr	r1, [pc, #268]	@ (8002cf4 <Cmd_auto_laser+0x2d8>)
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe fbdb 	bl	80013a4 <UART_SendStringRing>
 8002bee:	e00f      	b.n	8002c10 <Cmd_auto_laser+0x1f4>
    }
    else
    {
        snprintf(buffer, sizeof(buffer), "\r\nTemp BMP390 = [%i]\r\n", temp);
 8002bf0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8002bf4:	f107 0008 	add.w	r0, r7, #8
 8002bf8:	4a3f      	ldr	r2, [pc, #252]	@ (8002cf8 <Cmd_auto_laser+0x2dc>)
 8002bfa:	2150      	movs	r1, #80	@ 0x50
 8002bfc:	f007 fe58 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8002c00:	4b36      	ldr	r3, [pc, #216]	@ (8002cdc <Cmd_auto_laser+0x2c0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f107 0208 	add.w	r2, r7, #8
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fbca 	bl	80013a4 <UART_SendStringRing>
    }

    for (uint8_t channel = 0; channel < 8; channel++)
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002c16:	e02e      	b.n	8002c76 <Cmd_auto_laser+0x25a>
    {
        temp = NTC_Temperature[channel];
 8002c18:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002c1c:	4a37      	ldr	r2, [pc, #220]	@ (8002cfc <Cmd_auto_laser+0x2e0>)
 8002c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c22:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
        if (temp == 0x7FFF)
 8002c26:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8002c2a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d108      	bne.n	8002c44 <Cmd_auto_laser+0x228>
        {
            snprintf(buffer, sizeof(buffer), " | NTC[%d] = [FAIL]\r\n", channel);
 8002c32:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002c36:	f107 0008 	add.w	r0, r7, #8
 8002c3a:	4a31      	ldr	r2, [pc, #196]	@ (8002d00 <Cmd_auto_laser+0x2e4>)
 8002c3c:	2150      	movs	r1, #80	@ 0x50
 8002c3e:	f007 fe37 	bl	800a8b0 <sniprintf>
 8002c42:	e00b      	b.n	8002c5c <Cmd_auto_laser+0x240>
        }
        else
        {
            snprintf(buffer, sizeof(buffer), " | NTC[%d] = [%i]\r\n", channel, temp);
 8002c44:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8002c48:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8002c4c:	f107 0008 	add.w	r0, r7, #8
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	4613      	mov	r3, r2
 8002c54:	4a2b      	ldr	r2, [pc, #172]	@ (8002d04 <Cmd_auto_laser+0x2e8>)
 8002c56:	2150      	movs	r1, #80	@ 0x50
 8002c58:	f007 fe2a 	bl	800a8b0 <sniprintf>
        }
        UART_SendStringRing(UART_CMDLINE, buffer);
 8002c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cdc <Cmd_auto_laser+0x2c0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f107 0208 	add.w	r2, r7, #8
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fb9c 	bl	80013a4 <UART_SendStringRing>
    for (uint8_t channel = 0; channel < 8; channel++)
 8002c6c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002c70:	3301      	adds	r3, #1
 8002c72:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002c76:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002c7a:	2b07      	cmp	r3, #7
 8002c7c:	d9cc      	bls.n	8002c18 <Cmd_auto_laser+0x1fc>
    }

    laser_interval = interval;
 8002c7e:	4a22      	ldr	r2, [pc, #136]	@ (8002d08 <Cmd_auto_laser+0x2ec>)
 8002c80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c82:	6013      	str	r3, [r2, #0]
    adc_interval = times;
 8002c84:	4a21      	ldr	r2, [pc, #132]	@ (8002d0c <Cmd_auto_laser+0x2f0>)
 8002c86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c88:	6013      	str	r3, [r2, #0]
    user_delay = udelay;
 8002c8a:	4a21      	ldr	r2, [pc, #132]	@ (8002d10 <Cmd_auto_laser+0x2f4>)
 8002c8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c8e:	6013      	str	r3, [r2, #0]
    rest_time = s_rest_time;
 8002c90:	4a20      	ldr	r2, [pc, #128]	@ (8002d14 <Cmd_auto_laser+0x2f8>)
 8002c92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c94:	6013      	str	r3, [r2, #0]
    do_time = s_do_time;
 8002c96:	4a20      	ldr	r2, [pc, #128]	@ (8002d18 <Cmd_auto_laser+0x2fc>)
 8002c98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002c9c:	7013      	strb	r3, [r2, #0]
    run_system = 1;
 8002c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002d1c <Cmd_auto_laser+0x300>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]

    snprintf(buffer, sizeof(buffer), "Run system with interval: %ld ms, times: %ld, delay: %ld. Enter to End\r\n", interval, times, udelay);
 8002ca4:	f107 0008 	add.w	r0, r7, #8
 8002ca8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8002d20 <Cmd_auto_laser+0x304>)
 8002cb4:	2150      	movs	r1, #80	@ 0x50
 8002cb6:	f007 fdfb 	bl	800a8b0 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 8002cba:	4b08      	ldr	r3, [pc, #32]	@ (8002cdc <Cmd_auto_laser+0x2c0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f107 0208 	add.w	r2, r7, #8
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe fb6d 	bl	80013a4 <UART_SendStringRing>

    return CMDLINE_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3778      	adds	r7, #120	@ 0x78
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	51eb851f 	.word	0x51eb851f
 8002cd8:	0800bd0c 	.word	0x0800bd0c
 8002cdc:	20003434 	.word	0x20003434
 8002ce0:	0800bd48 	.word	0x0800bd48
 8002ce4:	0800bd84 	.word	0x0800bd84
 8002ce8:	0800bd9c 	.word	0x0800bd9c
 8002cec:	20003491 	.word	0x20003491
 8002cf0:	0800bdc8 	.word	0x0800bdc8
 8002cf4:	0800bddc 	.word	0x0800bddc
 8002cf8:	0800bdf8 	.word	0x0800bdf8
 8002cfc:	200034b0 	.word	0x200034b0
 8002d00:	0800be10 	.word	0x0800be10
 8002d04:	0800be28 	.word	0x0800be28
 8002d08:	2000347c 	.word	0x2000347c
 8002d0c:	20003484 	.word	0x20003484
 8002d10:	20003488 	.word	0x20003488
 8002d14:	2000348c 	.word	0x2000348c
 8002d18:	20003490 	.word	0x20003490
 8002d1c:	20003480 	.word	0x20003480
 8002d20:	0800be3c 	.word	0x0800be3c

08002d24 <Cmd_auto_adc>:

int Cmd_auto_adc(int argc, char *argv[])
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b098      	sub	sp, #96	@ 0x60
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
    if (argc > 3)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	dd01      	ble.n	8002d38 <Cmd_auto_adc+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 8002d34:	2302      	movs	r3, #2
 8002d36:	e042      	b.n	8002dbe <Cmd_auto_adc+0x9a>
    if (argc < 3)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	dc01      	bgt.n	8002d42 <Cmd_auto_adc+0x1e>
        return CMDLINE_TOO_FEW_ARGS;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e03d      	b.n	8002dbe <Cmd_auto_adc+0x9a>

    uint32_t interval = atoi(argv[1]);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	3304      	adds	r3, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f007 fd29 	bl	800a7a0 <atoi>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
    char buffer[80];

    if (interval % 100 != 0 || interval < 500)
 8002d52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002d54:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc8 <Cmd_auto_adc+0xa4>)
 8002d56:	fba3 1302 	umull	r1, r3, r3, r2
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	2164      	movs	r1, #100	@ 0x64
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d103      	bne.n	8002d70 <Cmd_auto_adc+0x4c>
 8002d68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d6a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002d6e:	d210      	bcs.n	8002d92 <Cmd_auto_adc+0x6e>
    {
        snprintf(buffer, sizeof(buffer), "Error: Interval must be a multiple of 100ms and > 500ms.\r\n");
 8002d70:	f107 030c 	add.w	r3, r7, #12
 8002d74:	4a15      	ldr	r2, [pc, #84]	@ (8002dcc <Cmd_auto_adc+0xa8>)
 8002d76:	2150      	movs	r1, #80	@ 0x50
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f007 fd99 	bl	800a8b0 <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8002d7e:	4b14      	ldr	r3, [pc, #80]	@ (8002dd0 <Cmd_auto_adc+0xac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f107 020c 	add.w	r2, r7, #12
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fe fb0b 	bl	80013a4 <UART_SendStringRing>
        return CMDLINE_INVALID_ARG;
 8002d8e:	2304      	movs	r3, #4
 8002d90:	e015      	b.n	8002dbe <Cmd_auto_adc+0x9a>
    }

    adc_interval = interval;
 8002d92:	4a10      	ldr	r2, [pc, #64]	@ (8002dd4 <Cmd_auto_adc+0xb0>)
 8002d94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d96:	6013      	str	r3, [r2, #0]
    run_adc = 1;
 8002d98:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd8 <Cmd_auto_adc+0xb4>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]

    snprintf(buffer, sizeof(buffer), "Run auto ADC with interval: %ld ms. Enter to End\r\n", interval);
 8002d9e:	f107 000c 	add.w	r0, r7, #12
 8002da2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002da4:	4a0d      	ldr	r2, [pc, #52]	@ (8002ddc <Cmd_auto_adc+0xb8>)
 8002da6:	2150      	movs	r1, #80	@ 0x50
 8002da8:	f007 fd82 	bl	800a8b0 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 8002dac:	4b08      	ldr	r3, [pc, #32]	@ (8002dd0 <Cmd_auto_adc+0xac>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f107 020c 	add.w	r2, r7, #12
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe faf4 	bl	80013a4 <UART_SendStringRing>

    return CMDLINE_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3760      	adds	r7, #96	@ 0x60
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	51eb851f 	.word	0x51eb851f
 8002dcc:	0800be88 	.word	0x0800be88
 8002dd0:	20003434 	.word	0x20003434
 8002dd4:	20003484 	.word	0x20003484
 8002dd8:	20003481 	.word	0x20003481
 8002ddc:	0800bec4 	.word	0x0800bec4

08002de0 <Cmd_read>:
//    lt8722_reg_write(LT8722_SPIS_STATUS, 0);
//    return (CMDLINE_OK);
//}
//
int Cmd_read(int argc, char *argv[])
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b096      	sub	sp, #88	@ 0x58
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
    uint32_t data;
    char buffer[60];

    uint8_t channel = atoi(argv[1]);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	3304      	adds	r3, #4
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f007 fcd5 	bl	800a7a0 <atoi>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    lt8722_reg_read(channel, LT8722_SPIS_COMMAND, &data);
 8002dfc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002e00:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f001 f928 	bl	800405c <lt8722_reg_read>
    snprintf(buffer, sizeof(buffer), "\r\nSPIS_COMMAND: 0x%lX-%lX\r\n", data >> 16, data);
 8002e0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e0e:	0c1a      	lsrs	r2, r3, #16
 8002e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e12:	f107 000c 	add.w	r0, r7, #12
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	4a61      	ldr	r2, [pc, #388]	@ (8002fa0 <Cmd_read+0x1c0>)
 8002e1c:	213c      	movs	r1, #60	@ 0x3c
 8002e1e:	f007 fd47 	bl	800a8b0 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 8002e22:	4b60      	ldr	r3, [pc, #384]	@ (8002fa4 <Cmd_read+0x1c4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f107 020c 	add.w	r2, r7, #12
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe fab9 	bl	80013a4 <UART_SendStringRing>

    lt8722_reg_read(channel, LT8722_SPIS_STATUS, &data);
 8002e32:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002e36:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f001 f90d 	bl	800405c <lt8722_reg_read>
    snprintf(buffer, sizeof(buffer), "SPIS_STATUS: 0x%lX-%lX\r\n", data >> 16, data);
 8002e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e44:	0c1a      	lsrs	r2, r3, #16
 8002e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e48:	f107 000c 	add.w	r0, r7, #12
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	4a55      	ldr	r2, [pc, #340]	@ (8002fa8 <Cmd_read+0x1c8>)
 8002e52:	213c      	movs	r1, #60	@ 0x3c
 8002e54:	f007 fd2c 	bl	800a8b0 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 8002e58:	4b52      	ldr	r3, [pc, #328]	@ (8002fa4 <Cmd_read+0x1c4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f107 020c 	add.w	r2, r7, #12
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fa9e 	bl	80013a4 <UART_SendStringRing>

    lt8722_reg_read(channel, LT8722_SPIS_DAC_ILIMN, &data);
 8002e68:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002e6c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002e70:	2102      	movs	r1, #2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 f8f2 	bl	800405c <lt8722_reg_read>
    snprintf(buffer, sizeof(buffer), "SPIS_DAC_ILIMN: 0x%lX-%lX\r\n", data >> 16, data);
 8002e78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e7a:	0c1a      	lsrs	r2, r3, #16
 8002e7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e7e:	f107 000c 	add.w	r0, r7, #12
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	4a49      	ldr	r2, [pc, #292]	@ (8002fac <Cmd_read+0x1cc>)
 8002e88:	213c      	movs	r1, #60	@ 0x3c
 8002e8a:	f007 fd11 	bl	800a8b0 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 8002e8e:	4b45      	ldr	r3, [pc, #276]	@ (8002fa4 <Cmd_read+0x1c4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f107 020c 	add.w	r2, r7, #12
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fa83 	bl	80013a4 <UART_SendStringRing>

    lt8722_reg_read(channel, LT8722_SPIS_DAC_ILIMP, &data);
 8002e9e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002ea2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ea6:	2103      	movs	r1, #3
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 f8d7 	bl	800405c <lt8722_reg_read>
    snprintf(buffer, sizeof(buffer), "SPIS_DAC_ILIMP: 0x%lX-%lX\r\n", data >> 16, data);
 8002eae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eb0:	0c1a      	lsrs	r2, r3, #16
 8002eb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eb4:	f107 000c 	add.w	r0, r7, #12
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	4a3c      	ldr	r2, [pc, #240]	@ (8002fb0 <Cmd_read+0x1d0>)
 8002ebe:	213c      	movs	r1, #60	@ 0x3c
 8002ec0:	f007 fcf6 	bl	800a8b0 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 8002ec4:	4b37      	ldr	r3, [pc, #220]	@ (8002fa4 <Cmd_read+0x1c4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f107 020c 	add.w	r2, r7, #12
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe fa68 	bl	80013a4 <UART_SendStringRing>

    lt8722_reg_read(channel, LT8722_SPIS_DAC, &data);
 8002ed4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002ed8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002edc:	2104      	movs	r1, #4
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 f8bc 	bl	800405c <lt8722_reg_read>
    snprintf(buffer, sizeof(buffer), "SPIS_DAC: 0x%lX-%lX\r\n", data >> 16, data);
 8002ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ee6:	0c1a      	lsrs	r2, r3, #16
 8002ee8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eea:	f107 000c 	add.w	r0, r7, #12
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	4a30      	ldr	r2, [pc, #192]	@ (8002fb4 <Cmd_read+0x1d4>)
 8002ef4:	213c      	movs	r1, #60	@ 0x3c
 8002ef6:	f007 fcdb 	bl	800a8b0 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 8002efa:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa4 <Cmd_read+0x1c4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f107 020c 	add.w	r2, r7, #12
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fe fa4d 	bl	80013a4 <UART_SendStringRing>

    lt8722_reg_read(channel, LT8722_SPIS_OV_CLAMP, &data);
 8002f0a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002f0e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002f12:	2105      	movs	r1, #5
 8002f14:	4618      	mov	r0, r3
 8002f16:	f001 f8a1 	bl	800405c <lt8722_reg_read>
    snprintf(buffer, sizeof(buffer), "SPIS_OV_CLAMP: 0x%lX\r\n", data);
 8002f1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f1c:	f107 000c 	add.w	r0, r7, #12
 8002f20:	4a25      	ldr	r2, [pc, #148]	@ (8002fb8 <Cmd_read+0x1d8>)
 8002f22:	213c      	movs	r1, #60	@ 0x3c
 8002f24:	f007 fcc4 	bl	800a8b0 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 8002f28:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa4 <Cmd_read+0x1c4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f107 020c 	add.w	r2, r7, #12
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe fa36 	bl	80013a4 <UART_SendStringRing>

    lt8722_reg_read(channel, LT8722_SPIS_UV_CLAMP, &data);
 8002f38:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002f3c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002f40:	2106      	movs	r1, #6
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 f88a 	bl	800405c <lt8722_reg_read>
    snprintf(buffer, sizeof(buffer), "SPIS_UV_CLAMP: 0x%lX\r\n", data);
 8002f48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f4a:	f107 000c 	add.w	r0, r7, #12
 8002f4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002fbc <Cmd_read+0x1dc>)
 8002f50:	213c      	movs	r1, #60	@ 0x3c
 8002f52:	f007 fcad 	bl	800a8b0 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 8002f56:	4b13      	ldr	r3, [pc, #76]	@ (8002fa4 <Cmd_read+0x1c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f107 020c 	add.w	r2, r7, #12
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fe fa1f 	bl	80013a4 <UART_SendStringRing>

    lt8722_reg_read(channel, LT8722_SPIS_AMUX, &data);
 8002f66:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002f6a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002f6e:	2107      	movs	r1, #7
 8002f70:	4618      	mov	r0, r3
 8002f72:	f001 f873 	bl	800405c <lt8722_reg_read>
    snprintf(buffer, sizeof(buffer), "SPIS_AMUX: 0x%lX\r\n", data);
 8002f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f78:	f107 000c 	add.w	r0, r7, #12
 8002f7c:	4a10      	ldr	r2, [pc, #64]	@ (8002fc0 <Cmd_read+0x1e0>)
 8002f7e:	213c      	movs	r1, #60	@ 0x3c
 8002f80:	f007 fc96 	bl	800a8b0 <sniprintf>
    UART_SendStringRing(UART_CMDLINE, buffer);
 8002f84:	4b07      	ldr	r3, [pc, #28]	@ (8002fa4 <Cmd_read+0x1c4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f107 020c 	add.w	r2, r7, #12
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fa08 	bl	80013a4 <UART_SendStringRing>

    return (CMDLINE_OK);
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3750      	adds	r7, #80	@ 0x50
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	0800bef8 	.word	0x0800bef8
 8002fa4:	20003434 	.word	0x20003434
 8002fa8:	0800bf14 	.word	0x0800bf14
 8002fac:	0800bf30 	.word	0x0800bf30
 8002fb0:	0800bf4c 	.word	0x0800bf4c
 8002fb4:	0800bf68 	.word	0x0800bf68
 8002fb8:	0800bf80 	.word	0x0800bf80
 8002fbc:	0800bf98 	.word	0x0800bf98
 8002fc0:	0800bfb0 	.word	0x0800bfb0

08002fc4 <CommandLine_CreateTask>:
//    return CMDLINE_OK;
//}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CommandLine_CreateTask(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 8002fc8:	4902      	ldr	r1, [pc, #8]	@ (8002fd4 <CommandLine_CreateTask+0x10>)
 8002fca:	4803      	ldr	r0, [pc, #12]	@ (8002fd8 <CommandLine_CreateTask+0x14>)
 8002fcc:	f007 fab4 	bl	800a538 <SCH_TASK_CreateTask>
}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	2000019c 	.word	0x2000019c
 8002fd8:	20000198 	.word	0x20000198

08002fdc <Command_SendSplash>:

void Command_SendSplash(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
    UART_SendStringRing(UART_CMDLINE, "┌──────────────────────────────────────────────────────────────┐\r\n");
 8002fe0:	4b21      	ldr	r3, [pc, #132]	@ (8003068 <Command_SendSplash+0x8c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4921      	ldr	r1, [pc, #132]	@ (800306c <Command_SendSplash+0x90>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe f9dc 	bl	80013a4 <UART_SendStringRing>
    UART_SendStringRing(UART_CMDLINE, "│        █▀ █▀█ ▄▀█ █▀▀ █▀▀ █   █ █ █▄ █ ▀█▀ █▀▀ █▀▀ █ █       │\r\n");
 8002fec:	4b1e      	ldr	r3, [pc, #120]	@ (8003068 <Command_SendSplash+0x8c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	491f      	ldr	r1, [pc, #124]	@ (8003070 <Command_SendSplash+0x94>)
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe f9d6 	bl	80013a4 <UART_SendStringRing>
    UART_SendStringRing(UART_CMDLINE, "│        ▄█ █▀▀ █▀█ █▄▄ ██▄ █▄▄ █ █ █ ▀█  █  ██▄ █▄▄ █▀█       │\r\n");
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8003068 <Command_SendSplash+0x8c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	491d      	ldr	r1, [pc, #116]	@ (8003074 <Command_SendSplash+0x98>)
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe f9d0 	bl	80013a4 <UART_SendStringRing>
    UART_SendStringRing(UART_CMDLINE, "└──────────────────────────────────────────────────────────────┘\r\n");
 8003004:	4b18      	ldr	r3, [pc, #96]	@ (8003068 <Command_SendSplash+0x8c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	491b      	ldr	r1, [pc, #108]	@ (8003078 <Command_SendSplash+0x9c>)
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe f9ca 	bl	80013a4 <UART_SendStringRing>
    UART_SendStringRing(UART_CMDLINE, "███████╗██╗  ██╗██████╗░░░░░░░░░██╗░░░██╗ ██╗░░░██╗░░░░██████╗░░\r\n");
 8003010:	4b15      	ldr	r3, [pc, #84]	@ (8003068 <Command_SendSplash+0x8c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4919      	ldr	r1, [pc, #100]	@ (800307c <Command_SendSplash+0xa0>)
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe f9c4 	bl	80013a4 <UART_SendStringRing>
    UART_SendStringRing(UART_CMDLINE, "██╔════╝╚██╗██╔╝██╔══██╗░░░░░░░░██║░░░██║███║░░███║░░░██╔═████╗░\r\n");
 800301c:	4b12      	ldr	r3, [pc, #72]	@ (8003068 <Command_SendSplash+0x8c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4917      	ldr	r1, [pc, #92]	@ (8003080 <Command_SendSplash+0xa4>)
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe f9be 	bl	80013a4 <UART_SendStringRing>
    UART_SendStringRing(UART_CMDLINE, "█████╗░░░╚███╔╝░██████╔╝░█████╗░██║░░░██║╚██║░░╚██║░░░██║██╔██║░\r\n");
 8003028:	4b0f      	ldr	r3, [pc, #60]	@ (8003068 <Command_SendSplash+0x8c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4915      	ldr	r1, [pc, #84]	@ (8003084 <Command_SendSplash+0xa8>)
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe f9b8 	bl	80013a4 <UART_SendStringRing>
    UART_SendStringRing(UART_CMDLINE, "██╔══╝░░░██╔██╗░██╔═══╝░░╚════╝░╚██╗░██╔╝░██║░░░██║░░░████╔╝██║░\r\n");
 8003034:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <Command_SendSplash+0x8c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4913      	ldr	r1, [pc, #76]	@ (8003088 <Command_SendSplash+0xac>)
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe f9b2 	bl	80013a4 <UART_SendStringRing>
    UART_SendStringRing(UART_CMDLINE, "███████╗██╔╝ ██╗██║░░░░░░░░░░░░░░╚████╔╝░░██║██╗██║██╗╚██████╔╝░\r\n");
 8003040:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <Command_SendSplash+0x8c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4911      	ldr	r1, [pc, #68]	@ (800308c <Command_SendSplash+0xb0>)
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe f9ac 	bl	80013a4 <UART_SendStringRing>
    UART_SendStringRing(UART_CMDLINE, "╚══════╝╚═╝░░╚═╝╚═╝░░░░░░░░░░░░░░░╚═══╝░░░╚═╝╚═╝╚═╝╚═╝░╚═════╝░░\r\n");
 800304c:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <Command_SendSplash+0x8c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	490f      	ldr	r1, [pc, #60]	@ (8003090 <Command_SendSplash+0xb4>)
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe f9a6 	bl	80013a4 <UART_SendStringRing>
    UART_SendStringRing(UART_CMDLINE, "├──────────────────────────────────────────────────────────────┤\r\n");
 8003058:	4b03      	ldr	r3, [pc, #12]	@ (8003068 <Command_SendSplash+0x8c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	490d      	ldr	r1, [pc, #52]	@ (8003094 <Command_SendSplash+0xb8>)
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe f9a0 	bl	80013a4 <UART_SendStringRing>
}
 8003064:	bf00      	nop
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20003434 	.word	0x20003434
 800306c:	0800bfc4 	.word	0x0800bfc4
 8003070:	0800c088 	.word	0x0800c088
 8003074:	0800c128 	.word	0x0800c128
 8003078:	0800c1c8 	.word	0x0800c1c8
 800307c:	0800c28c 	.word	0x0800c28c
 8003080:	0800c34c 	.word	0x0800c34c
 8003084:	0800c410 	.word	0x0800c410
 8003088:	0800c4d4 	.word	0x0800c4d4
 800308c:	0800c598 	.word	0x0800c598
 8003090:	0800c65c 	.word	0x0800c65c
 8003094:	0800c720 	.word	0x0800c720

08003098 <LL_SPI_IsActiveFlag_TXE>:
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d101      	bne.n	80030b0 <LL_SPI_IsActiveFlag_TXE+0x18>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <LL_SPI_IsActiveFlag_BSY>:
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ce:	2b80      	cmp	r3, #128	@ 0x80
 80030d0:	d101      	bne.n	80030d6 <LL_SPI_IsActiveFlag_BSY+0x18>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <LL_SPI_IsActiveFlag_BSY+0x1a>
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <LL_SPI_TransmitData8>:
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	330c      	adds	r3, #12
 80030f4:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	701a      	strb	r2, [r3, #0]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_GPIO_SetOutputPin>:
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	619a      	str	r2, [r3, #24]
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_GPIO_ResetOutputPin>:
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	041a      	lsls	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	619a      	str	r2, [r3, #24]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <auto_run_task_update>:
volatile uint8_t first_rest = 1;
volatile uint8_t do_time = 0;
volatile uint8_t run_inf = 0;

static void auto_run_task_update(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b090      	sub	sp, #64	@ 0x40
 8003148:	af02      	add	r7, sp, #8

	if (run_adc)
 800314a:	4b98      	ldr	r3, [pc, #608]	@ (80033ac <auto_run_task_update+0x268>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00d      	beq.n	8003170 <auto_run_task_update+0x2c>
	{
		if (SCH_TIM_HasCompleted(SCH_TIM_AUTO_ADC))
 8003154:	200a      	movs	r0, #10
 8003156:	f007 f9d9 	bl	800a50c <SCH_TIM_HasCompleted>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d007      	beq.n	8003170 <auto_run_task_update+0x2c>
		{
			read_adc();
 8003160:	f000 fa6c 	bl	800363c <read_adc>
			SCH_TIM_Start(SCH_TIM_AUTO_ADC, adc_interval);
 8003164:	4b92      	ldr	r3, [pc, #584]	@ (80033b0 <auto_run_task_update+0x26c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4619      	mov	r1, r3
 800316a:	200a      	movs	r0, #10
 800316c:	f007 f9b8 	bl	800a4e0 <SCH_TIM_Start>
		}
	}

	if (run_system)
 8003170:	4b90      	ldr	r3, [pc, #576]	@ (80033b4 <auto_run_task_update+0x270>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 8114 	beq.w	80033a4 <auto_run_task_update+0x260>
	{

		if (SCH_TIM_HasCompleted(SCH_TIM_AUTO_LASER))
 800317c:	200b      	movs	r0, #11
 800317e:	f007 f9c5 	bl	800a50c <SCH_TIM_HasCompleted>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80f3 	beq.w	8003370 <auto_run_task_update+0x22c>
		{
			data_times = 0;
 800318a:	4b8b      	ldr	r3, [pc, #556]	@ (80033b8 <auto_run_task_update+0x274>)
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]

			uint8_t ld_slot = (current_column - 1) + (current_row - 1) * 6 + 1;
 8003190:	4b8a      	ldr	r3, [pc, #552]	@ (80033bc <auto_run_task_update+0x278>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	0052      	lsls	r2, r2, #1
 800319a:	4413      	add	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	4b87      	ldr	r3, [pc, #540]	@ (80033c0 <auto_run_task_update+0x27c>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	3b06      	subs	r3, #6
 80031ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if (first_time)
 80031b0:	4b84      	ldr	r3, [pc, #528]	@ (80033c4 <auto_run_task_update+0x280>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d03a      	beq.n	8003230 <auto_run_task_update+0xec>
			{
				if (!run_inf)
 80031ba:	4b83      	ldr	r3, [pc, #524]	@ (80033c8 <auto_run_task_update+0x284>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d125      	bne.n	8003210 <auto_run_task_update+0xcc>
				{
					if (do_time <= 0)
 80031c4:	4b81      	ldr	r3, [pc, #516]	@ (80033cc <auto_run_task_update+0x288>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d120      	bne.n	8003210 <auto_run_task_update+0xcc>
					{
						laser_interval = 0;
 80031ce:	4b80      	ldr	r3, [pc, #512]	@ (80033d0 <auto_run_task_update+0x28c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
						run_system = 0;
 80031d4:	4b77      	ldr	r3, [pc, #476]	@ (80033b4 <auto_run_task_update+0x270>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
						run_adc = 0;
 80031da:	4b74      	ldr	r3, [pc, #464]	@ (80033ac <auto_run_task_update+0x268>)
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
						adc_interval = 0;
 80031e0:	4b73      	ldr	r3, [pc, #460]	@ (80033b0 <auto_run_task_update+0x26c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
						pair_slot = 1;
 80031e6:	4b7b      	ldr	r3, [pc, #492]	@ (80033d4 <auto_run_task_update+0x290>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
						current_column = 1;
 80031ec:	4b74      	ldr	r3, [pc, #464]	@ (80033c0 <auto_run_task_update+0x27c>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	701a      	strb	r2, [r3, #0]
						current_row = 1;
 80031f2:	4b72      	ldr	r3, [pc, #456]	@ (80033bc <auto_run_task_update+0x278>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]
						user_delay = 0;
 80031f8:	4b77      	ldr	r3, [pc, #476]	@ (80033d8 <auto_run_task_update+0x294>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
						rest_time = 0;
 80031fe:	4b77      	ldr	r3, [pc, #476]	@ (80033dc <auto_run_task_update+0x298>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
						run_inf = 0;
 8003204:	4b70      	ldr	r3, [pc, #448]	@ (80033c8 <auto_run_task_update+0x284>)
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
						do_time = 0;
 800320a:	4b70      	ldr	r3, [pc, #448]	@ (80033cc <auto_run_task_update+0x288>)
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
					}
				}

				auto_set_pd(0);
 8003210:	2000      	movs	r0, #0
 8003212:	f000 f94d 	bl	80034b0 <auto_set_pd>
				auto_set_ls(0);
 8003216:	2000      	movs	r0, #0
 8003218:	f000 f9ac 	bl	8003574 <auto_set_ls>

				SCH_TIM_Start(SCH_TIM_USER_DELAY, user_delay);
 800321c:	4b6e      	ldr	r3, [pc, #440]	@ (80033d8 <auto_run_task_update+0x294>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4619      	mov	r1, r3
 8003222:	200c      	movs	r0, #12
 8003224:	f007 f95c 	bl	800a4e0 <SCH_TIM_Start>
				first_time = 0;
 8003228:	4b66      	ldr	r3, [pc, #408]	@ (80033c4 <auto_run_task_update+0x280>)
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	e098      	b.n	8003362 <auto_run_task_update+0x21e>
			}
			else
			{
				if (SCH_TIM_HasCompleted(SCH_TIM_USER_DELAY))
 8003230:	200c      	movs	r0, #12
 8003232:	f007 f96b 	bl	800a50c <SCH_TIM_HasCompleted>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 8092 	beq.w	8003362 <auto_run_task_update+0x21e>
				{
					if (current_row == 1 && first_rest == 0)
 800323e:	4b5f      	ldr	r3, [pc, #380]	@ (80033bc <auto_run_task_update+0x278>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d11b      	bne.n	8003280 <auto_run_task_update+0x13c>
 8003248:	4b65      	ldr	r3, [pc, #404]	@ (80033e0 <auto_run_task_update+0x29c>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d116      	bne.n	8003280 <auto_run_task_update+0x13c>
					{
						if (current_column == 1)
 8003252:	4b5b      	ldr	r3, [pc, #364]	@ (80033c0 <auto_run_task_update+0x27c>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	d111      	bne.n	8003280 <auto_run_task_update+0x13c>
						{
							auto_get_temp();
 800325c:	f000 f8ca 	bl	80033f4 <auto_get_temp>
							do_time = do_time - 1;
 8003260:	4b5a      	ldr	r3, [pc, #360]	@ (80033cc <auto_run_task_update+0x288>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b2da      	uxtb	r2, r3
 800326a:	4b58      	ldr	r3, [pc, #352]	@ (80033cc <auto_run_task_update+0x288>)
 800326c:	701a      	strb	r2, [r3, #0]
							SCH_TIM_Start(SCH_TIM_REST, rest_time);
 800326e:	4b5b      	ldr	r3, [pc, #364]	@ (80033dc <auto_run_task_update+0x298>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4619      	mov	r1, r3
 8003274:	200d      	movs	r0, #13
 8003276:	f007 f933 	bl	800a4e0 <SCH_TIM_Start>
							first_rest = 1;
 800327a:	4b59      	ldr	r3, [pc, #356]	@ (80033e0 <auto_run_task_update+0x29c>)
 800327c:	2201      	movs	r2, #1
 800327e:	701a      	strb	r2, [r3, #0]
						}
					}
					if (SCH_TIM_HasCompleted(SCH_TIM_REST))
 8003280:	200d      	movs	r0, #13
 8003282:	f007 f943 	bl	800a50c <SCH_TIM_HasCompleted>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d061      	beq.n	8003350 <auto_run_task_update+0x20c>
					{
						if (current_row == 1)
 800328c:	4b4b      	ldr	r3, [pc, #300]	@ (80033bc <auto_run_task_update+0x278>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b01      	cmp	r3, #1
 8003294:	d103      	bne.n	800329e <auto_run_task_update+0x15a>
						{
							UART_SendStringRing(UART_CMDLINE, "\r\n");
 8003296:	4953      	ldr	r1, [pc, #332]	@ (80033e4 <auto_run_task_update+0x2a0>)
 8003298:	4853      	ldr	r0, [pc, #332]	@ (80033e8 <auto_run_task_update+0x2a4>)
 800329a:	f7fe f883 	bl	80013a4 <UART_SendStringRing>
						}

						auto_set_pd(ld_slot);
 800329e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f904 	bl	80034b0 <auto_set_pd>
						auto_set_ls(ld_slot);
 80032a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 f961 	bl	8003574 <auto_set_ls>
						char buffer[50];

						if (ld_slot < 10)
 80032b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80032b6:	2b09      	cmp	r3, #9
 80032b8:	d812      	bhi.n	80032e0 <auto_run_task_update+0x19c>
						{
							snprintf(buffer, sizeof(buffer), "\r\nC%d-%d | [LD0%d]", current_column, current_row, ld_slot);
 80032ba:	4b41      	ldr	r3, [pc, #260]	@ (80033c0 <auto_run_task_update+0x27c>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	4619      	mov	r1, r3
 80032c2:	4b3e      	ldr	r3, [pc, #248]	@ (80033bc <auto_run_task_update+0x278>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80032ce:	1d38      	adds	r0, r7, #4
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	9200      	str	r2, [sp, #0]
 80032d4:	460b      	mov	r3, r1
 80032d6:	4a45      	ldr	r2, [pc, #276]	@ (80033ec <auto_run_task_update+0x2a8>)
 80032d8:	2132      	movs	r1, #50	@ 0x32
 80032da:	f007 fae9 	bl	800a8b0 <sniprintf>
 80032de:	e011      	b.n	8003304 <auto_run_task_update+0x1c0>
						}
						else
						{
							snprintf(buffer, sizeof(buffer), "\r\nC%d-%d | [LD%d]", current_column, current_row, ld_slot);
 80032e0:	4b37      	ldr	r3, [pc, #220]	@ (80033c0 <auto_run_task_update+0x27c>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	4619      	mov	r1, r3
 80032e8:	4b34      	ldr	r3, [pc, #208]	@ (80033bc <auto_run_task_update+0x278>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80032f4:	1d38      	adds	r0, r7, #4
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	9200      	str	r2, [sp, #0]
 80032fa:	460b      	mov	r3, r1
 80032fc:	4a3c      	ldr	r2, [pc, #240]	@ (80033f0 <auto_run_task_update+0x2ac>)
 80032fe:	2132      	movs	r1, #50	@ 0x32
 8003300:	f007 fad6 	bl	800a8b0 <sniprintf>
						}

						UART_SendStringRing(UART_CMDLINE, buffer);
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	4619      	mov	r1, r3
 8003308:	4837      	ldr	r0, [pc, #220]	@ (80033e8 <auto_run_task_update+0x2a4>)
 800330a:	f7fe f84b 	bl	80013a4 <UART_SendStringRing>

						current_row++;
 800330e:	4b2b      	ldr	r3, [pc, #172]	@ (80033bc <auto_run_task_update+0x278>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	3301      	adds	r3, #1
 8003316:	b2da      	uxtb	r2, r3
 8003318:	4b28      	ldr	r3, [pc, #160]	@ (80033bc <auto_run_task_update+0x278>)
 800331a:	701a      	strb	r2, [r3, #0]
						if (current_row > 6)
 800331c:	4b27      	ldr	r3, [pc, #156]	@ (80033bc <auto_run_task_update+0x278>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b06      	cmp	r3, #6
 8003324:	d911      	bls.n	800334a <auto_run_task_update+0x206>
						{
							current_row = 1;
 8003326:	4b25      	ldr	r3, [pc, #148]	@ (80033bc <auto_run_task_update+0x278>)
 8003328:	2201      	movs	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]
							current_column++;
 800332c:	4b24      	ldr	r3, [pc, #144]	@ (80033c0 <auto_run_task_update+0x27c>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	3301      	adds	r3, #1
 8003334:	b2da      	uxtb	r2, r3
 8003336:	4b22      	ldr	r3, [pc, #136]	@ (80033c0 <auto_run_task_update+0x27c>)
 8003338:	701a      	strb	r2, [r3, #0]
							if (current_column > 6)
 800333a:	4b21      	ldr	r3, [pc, #132]	@ (80033c0 <auto_run_task_update+0x27c>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b06      	cmp	r3, #6
 8003342:	d902      	bls.n	800334a <auto_run_task_update+0x206>
							{
								current_column = 1;
 8003344:	4b1e      	ldr	r3, [pc, #120]	@ (80033c0 <auto_run_task_update+0x27c>)
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
							}
						}
						first_rest = 0;
 800334a:	4b25      	ldr	r3, [pc, #148]	@ (80033e0 <auto_run_task_update+0x29c>)
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
					}
					SCH_TIM_Start(SCH_TIM_AUTO_LASER, laser_interval);
 8003350:	4b1f      	ldr	r3, [pc, #124]	@ (80033d0 <auto_run_task_update+0x28c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4619      	mov	r1, r3
 8003356:	200b      	movs	r0, #11
 8003358:	f007 f8c2 	bl	800a4e0 <SCH_TIM_Start>
					first_time = 1;
 800335c:	4b19      	ldr	r3, [pc, #100]	@ (80033c4 <auto_run_task_update+0x280>)
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]
				}
			}
			SCH_TIM_Start(SCH_TIM_AUTO_ADC, adc_interval);
 8003362:	4b13      	ldr	r3, [pc, #76]	@ (80033b0 <auto_run_task_update+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4619      	mov	r1, r3
 8003368:	200a      	movs	r0, #10
 800336a:	f007 f8b9 	bl	800a4e0 <SCH_TIM_Start>
					SCH_TIM_Start(SCH_TIM_AUTO_ADC, adc_interval);
				}
			}
		}
	}
}
 800336e:	e019      	b.n	80033a4 <auto_run_task_update+0x260>
			if (SCH_TIM_HasCompleted(SCH_TIM_REST))
 8003370:	200d      	movs	r0, #13
 8003372:	f007 f8cb 	bl	800a50c <SCH_TIM_HasCompleted>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <auto_run_task_update+0x260>
				if (SCH_TIM_HasCompleted(SCH_TIM_AUTO_ADC))
 800337c:	200a      	movs	r0, #10
 800337e:	f007 f8c5 	bl	800a50c <SCH_TIM_HasCompleted>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00d      	beq.n	80033a4 <auto_run_task_update+0x260>
					read_adc_without_LF();
 8003388:	f000 f9d6 	bl	8003738 <read_adc_without_LF>
					data_times++;
 800338c:	4b0a      	ldr	r3, [pc, #40]	@ (80033b8 <auto_run_task_update+0x274>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	3301      	adds	r3, #1
 8003392:	b2da      	uxtb	r2, r3
 8003394:	4b08      	ldr	r3, [pc, #32]	@ (80033b8 <auto_run_task_update+0x274>)
 8003396:	701a      	strb	r2, [r3, #0]
					SCH_TIM_Start(SCH_TIM_AUTO_ADC, adc_interval);
 8003398:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <auto_run_task_update+0x26c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	200a      	movs	r0, #10
 80033a0:	f007 f89e 	bl	800a4e0 <SCH_TIM_Start>
}
 80033a4:	bf00      	nop
 80033a6:	3738      	adds	r7, #56	@ 0x38
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20003481 	.word	0x20003481
 80033b0:	20003484 	.word	0x20003484
 80033b4:	20003480 	.word	0x20003480
 80033b8:	20003479 	.word	0x20003479
 80033bc:	200001c2 	.word	0x200001c2
 80033c0:	200001c1 	.word	0x200001c1
 80033c4:	200001c3 	.word	0x200001c3
 80033c8:	20003491 	.word	0x20003491
 80033cc:	20003490 	.word	0x20003490
 80033d0:	2000347c 	.word	0x2000347c
 80033d4:	200001c0 	.word	0x200001c0
 80033d8:	20003488 	.word	0x20003488
 80033dc:	2000348c 	.word	0x2000348c
 80033e0:	200001c4 	.word	0x200001c4
 80033e4:	0800c7e4 	.word	0x0800c7e4
 80033e8:	40011000 	.word	0x40011000
 80033ec:	0800c7e8 	.word	0x0800c7e8
 80033f0:	0800c7fc 	.word	0x0800c7fc

080033f4 <auto_get_temp>:

void auto_get_temp()
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b092      	sub	sp, #72	@ 0x48
 80033f8:	af02      	add	r7, sp, #8
	int16_t temp = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	char buffer[60];

	if (temp == 0x7FFF)
 80033fe:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8003402:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003406:	4293      	cmp	r3, r2
 8003408:	d104      	bne.n	8003414 <auto_get_temp+0x20>
	{
		UART_SendStringRing(UART_CMDLINE, "\r\nTemp BMP390 = [FAIL] \r\n");
 800340a:	4923      	ldr	r1, [pc, #140]	@ (8003498 <auto_get_temp+0xa4>)
 800340c:	4823      	ldr	r0, [pc, #140]	@ (800349c <auto_get_temp+0xa8>)
 800340e:	f7fd ffc9 	bl	80013a4 <UART_SendStringRing>
 8003412:	e00b      	b.n	800342c <auto_get_temp+0x38>
	}
	else
	{
		snprintf(buffer, sizeof(buffer), "\r\nTemp BMP390 = [%i] \r\n", temp);
 8003414:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8003418:	4638      	mov	r0, r7
 800341a:	4a21      	ldr	r2, [pc, #132]	@ (80034a0 <auto_get_temp+0xac>)
 800341c:	213c      	movs	r1, #60	@ 0x3c
 800341e:	f007 fa47 	bl	800a8b0 <sniprintf>
		UART_SendStringRing(UART_CMDLINE, buffer);
 8003422:	463b      	mov	r3, r7
 8003424:	4619      	mov	r1, r3
 8003426:	481d      	ldr	r0, [pc, #116]	@ (800349c <auto_get_temp+0xa8>)
 8003428:	f7fd ffbc 	bl	80013a4 <UART_SendStringRing>
	}

	for (uint8_t channel = 0; channel < 8; channel++)
 800342c:	2300      	movs	r3, #0
 800342e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003432:	e028      	b.n	8003486 <auto_get_temp+0x92>
	{
		temp = NTC_Temperature[channel];
 8003434:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003438:	4a1a      	ldr	r2, [pc, #104]	@ (80034a4 <auto_get_temp+0xb0>)
 800343a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800343e:	87bb      	strh	r3, [r7, #60]	@ 0x3c

		if (temp == 0x7FFF)
 8003440:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8003444:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003448:	4293      	cmp	r3, r2
 800344a:	d107      	bne.n	800345c <auto_get_temp+0x68>
		{
			snprintf(buffer, sizeof(buffer), " | NTC[%d] = [FAIL]\r\n", channel);
 800344c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003450:	4638      	mov	r0, r7
 8003452:	4a15      	ldr	r2, [pc, #84]	@ (80034a8 <auto_get_temp+0xb4>)
 8003454:	213c      	movs	r1, #60	@ 0x3c
 8003456:	f007 fa2b 	bl	800a8b0 <sniprintf>
 800345a:	e00a      	b.n	8003472 <auto_get_temp+0x7e>
		}
		else
		{
			snprintf(buffer, sizeof(buffer), " | NTC[%d] = [%i]\r\n", channel, temp);
 800345c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8003460:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8003464:	4638      	mov	r0, r7
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	4a10      	ldr	r2, [pc, #64]	@ (80034ac <auto_get_temp+0xb8>)
 800346c:	213c      	movs	r1, #60	@ 0x3c
 800346e:	f007 fa1f 	bl	800a8b0 <sniprintf>
		}

		UART_SendStringRing(UART_CMDLINE, buffer);
 8003472:	463b      	mov	r3, r7
 8003474:	4619      	mov	r1, r3
 8003476:	4809      	ldr	r0, [pc, #36]	@ (800349c <auto_get_temp+0xa8>)
 8003478:	f7fd ff94 	bl	80013a4 <UART_SendStringRing>
	for (uint8_t channel = 0; channel < 8; channel++)
 800347c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003480:	3301      	adds	r3, #1
 8003482:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003486:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800348a:	2b07      	cmp	r3, #7
 800348c:	d9d2      	bls.n	8003434 <auto_get_temp+0x40>
	}
}
 800348e:	bf00      	nop
 8003490:	bf00      	nop
 8003492:	3740      	adds	r7, #64	@ 0x40
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	0800c810 	.word	0x0800c810
 800349c:	40011000 	.word	0x40011000
 80034a0:	0800c82c 	.word	0x0800c82c
 80034a4:	200034b0 	.word	0x200034b0
 80034a8:	0800c844 	.word	0x0800c844
 80034ac:	0800c85c 	.word	0x0800c85c

080034b0 <auto_set_pd>:

void auto_set_pd(uint8_t pd_slot)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	71fb      	strb	r3, [r7, #7]
	uint8_t data[6] = {0, 0, 0, 0, 0, 0};
 80034ba:	f107 0314 	add.w	r3, r7, #20
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	809a      	strh	r2, [r3, #4]

	if (pd_slot > 0 && pd_slot <= 36)
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d021      	beq.n	800350e <auto_set_pd+0x5e>
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	2b24      	cmp	r3, #36	@ 0x24
 80034ce:	d81e      	bhi.n	800350e <auto_set_pd+0x5e>
	{

		uint8_t chip_index = (pd_slot - 1) / 6;
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	4a24      	ldr	r2, [pc, #144]	@ (8003568 <auto_set_pd+0xb8>)
 80034d6:	fb82 1203 	smull	r1, r2, r2, r3
 80034da:	17db      	asrs	r3, r3, #31
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	76fb      	strb	r3, [r7, #27]
		uint8_t port_index = (pd_slot - 1) % 6;
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	1e5a      	subs	r2, r3, #1
 80034e4:	4b20      	ldr	r3, [pc, #128]	@ (8003568 <auto_set_pd+0xb8>)
 80034e6:	fb83 3102 	smull	r3, r1, r3, r2
 80034ea:	17d3      	asrs	r3, r2, #31
 80034ec:	1ac9      	subs	r1, r1, r3
 80034ee:	460b      	mov	r3, r1
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	440b      	add	r3, r1
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	1ad1      	subs	r1, r2, r3
 80034f8:	460b      	mov	r3, r1
 80034fa:	76bb      	strb	r3, [r7, #26]

		data[chip_index] = (1 << port_index);
 80034fc:	7ebb      	ldrb	r3, [r7, #26]
 80034fe:	2201      	movs	r2, #1
 8003500:	409a      	lsls	r2, r3
 8003502:	7efb      	ldrb	r3, [r7, #27]
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	3320      	adds	r3, #32
 8003508:	443b      	add	r3, r7
 800350a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	}

	uint8_t reversed_data[6];
	for (int i = 0; i < 6; i++)
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	e00f      	b.n	8003534 <auto_set_pd+0x84>
	{
		reversed_data[i] = data[5 - i];
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f1c3 0305 	rsb	r3, r3, #5
 800351a:	3320      	adds	r3, #32
 800351c:	443b      	add	r3, r7
 800351e:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8003522:	f107 020c 	add.w	r2, r7, #12
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	4413      	add	r3, r2
 800352a:	460a      	mov	r2, r1
 800352c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; i++)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3301      	adds	r3, #1
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	2b05      	cmp	r3, #5
 8003538:	ddec      	ble.n	8003514 <auto_set_pd+0x64>
	}

	LL_GPIO_ResetOutputPin(PHOTO_PD_CS_GPIO_Port, PHOTO_PD_CS_Pin);
 800353a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800353e:	480b      	ldr	r0, [pc, #44]	@ (800356c <auto_set_pd+0xbc>)
 8003540:	f7ff fdf0 	bl	8003124 <LL_GPIO_ResetOutputPin>
	HAL_SPI_Transmit(&hspi2, reversed_data, 6, 1000);
 8003544:	f107 010c 	add.w	r1, r7, #12
 8003548:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800354c:	2206      	movs	r2, #6
 800354e:	4808      	ldr	r0, [pc, #32]	@ (8003570 <auto_set_pd+0xc0>)
 8003550:	f004 fa9d 	bl	8007a8e <HAL_SPI_Transmit>
	LL_GPIO_SetOutputPin(PHOTO_PD_CS_GPIO_Port, PHOTO_PD_CS_Pin);
 8003554:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003558:	4804      	ldr	r0, [pc, #16]	@ (800356c <auto_set_pd+0xbc>)
 800355a:	f7ff fdd5 	bl	8003108 <LL_GPIO_SetOutputPin>
}
 800355e:	bf00      	nop
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	2aaaaaab 	.word	0x2aaaaaab
 800356c:	40020c00 	.word	0x40020c00
 8003570:	2000350c 	.word	0x2000350c

08003574 <auto_set_ls>:

void auto_set_ls(uint8_t ls_slot)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	71fb      	strb	r3, [r7, #7]
	uint8_t data[6] = {0, 0, 0, 0, 0, 0};
 800357e:	f107 030c 	add.w	r3, r7, #12
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	809a      	strh	r2, [r3, #4]

	if (ls_slot > 0 && ls_slot <= 36)
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d021      	beq.n	80035d2 <auto_set_ls+0x5e>
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	2b24      	cmp	r3, #36	@ 0x24
 8003592:	d81e      	bhi.n	80035d2 <auto_set_ls+0x5e>
	{

		uint8_t chip_index = (ls_slot - 1) / 6;
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	3b01      	subs	r3, #1
 8003598:	4a25      	ldr	r2, [pc, #148]	@ (8003630 <auto_set_ls+0xbc>)
 800359a:	fb82 1203 	smull	r1, r2, r2, r3
 800359e:	17db      	asrs	r3, r3, #31
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	74fb      	strb	r3, [r7, #19]
		uint8_t port_index = (ls_slot - 1) % 6;
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	1e5a      	subs	r2, r3, #1
 80035a8:	4b21      	ldr	r3, [pc, #132]	@ (8003630 <auto_set_ls+0xbc>)
 80035aa:	fb83 3102 	smull	r3, r1, r3, r2
 80035ae:	17d3      	asrs	r3, r2, #31
 80035b0:	1ac9      	subs	r1, r1, r3
 80035b2:	460b      	mov	r3, r1
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	440b      	add	r3, r1
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	1ad1      	subs	r1, r2, r3
 80035bc:	460b      	mov	r3, r1
 80035be:	74bb      	strb	r3, [r7, #18]

		data[chip_index] = (1 << port_index);
 80035c0:	7cbb      	ldrb	r3, [r7, #18]
 80035c2:	2201      	movs	r2, #1
 80035c4:	409a      	lsls	r2, r3
 80035c6:	7cfb      	ldrb	r3, [r7, #19]
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	3318      	adds	r3, #24
 80035cc:	443b      	add	r3, r7
 80035ce:	f803 2c0c 	strb.w	r2, [r3, #-12]
	}

	LL_GPIO_ResetOutputPin(LASER_SW_INT_CS_GPIO_Port, LASER_SW_INT_CS_Pin);
 80035d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80035d6:	4817      	ldr	r0, [pc, #92]	@ (8003634 <auto_set_ls+0xc0>)
 80035d8:	f7ff fda4 	bl	8003124 <LL_GPIO_ResetOutputPin>

	for (int i = 5; i >= 0; i--)
 80035dc:	2305      	movs	r3, #5
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	e012      	b.n	8003608 <auto_set_ls+0x94>
	{
		LL_SPI_TransmitData8(SPI1, data[i]);
 80035e2:	f107 020c 	add.w	r2, r7, #12
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	4413      	add	r3, r2
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	4619      	mov	r1, r3
 80035ee:	4812      	ldr	r0, [pc, #72]	@ (8003638 <auto_set_ls+0xc4>)
 80035f0:	f7ff fd78 	bl	80030e4 <LL_SPI_TransmitData8>
		while (!LL_SPI_IsActiveFlag_TXE(SPI1))
 80035f4:	bf00      	nop
 80035f6:	4810      	ldr	r0, [pc, #64]	@ (8003638 <auto_set_ls+0xc4>)
 80035f8:	f7ff fd4e 	bl	8003098 <LL_SPI_IsActiveFlag_TXE>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f9      	beq.n	80035f6 <auto_set_ls+0x82>
	for (int i = 5; i >= 0; i--)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	3b01      	subs	r3, #1
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b00      	cmp	r3, #0
 800360c:	dae9      	bge.n	80035e2 <auto_set_ls+0x6e>
			;
	}

	while (LL_SPI_IsActiveFlag_BSY(SPI1))
 800360e:	bf00      	nop
 8003610:	4809      	ldr	r0, [pc, #36]	@ (8003638 <auto_set_ls+0xc4>)
 8003612:	f7ff fd54 	bl	80030be <LL_SPI_IsActiveFlag_BSY>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f9      	bne.n	8003610 <auto_set_ls+0x9c>
		;

	LL_GPIO_SetOutputPin(LASER_SW_INT_CS_GPIO_Port, LASER_SW_INT_CS_Pin);
 800361c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003620:	4804      	ldr	r0, [pc, #16]	@ (8003634 <auto_set_ls+0xc0>)
 8003622:	f7ff fd71 	bl	8003108 <LL_GPIO_SetOutputPin>
}
 8003626:	bf00      	nop
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	2aaaaaab 	.word	0x2aaaaaab
 8003634:	40021000 	.word	0x40021000
 8003638:	40013000 	.word	0x40013000

0800363c <read_adc>:

void read_adc(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b098      	sub	sp, #96	@ 0x60
 8003640:	af02      	add	r7, sp, #8
	uint8_t rxData[2] = {0};
 8003642:	2300      	movs	r3, #0
 8003644:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	uint32_t result = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	657b      	str	r3, [r7, #84]	@ 0x54
	float voltage = 0.0;
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	653b      	str	r3, [r7, #80]	@ 0x50
	const float vref = 3.0;
 8003652:	4b32      	ldr	r3, [pc, #200]	@ (800371c <read_adc+0xe0>)
 8003654:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int32_t voltage_int = 0, voltage_frac = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	64bb      	str	r3, [r7, #72]	@ 0x48
 800365a:	2300      	movs	r3, #0
 800365c:	647b      	str	r3, [r7, #68]	@ 0x44

	LL_GPIO_ResetOutputPin(PHOTO_ADC_CONV_GPIO_Port, PHOTO_ADC_CONV_Pin);
 800365e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003662:	482f      	ldr	r0, [pc, #188]	@ (8003720 <read_adc+0xe4>)
 8003664:	f7ff fd5e 	bl	8003124 <LL_GPIO_ResetOutputPin>
	__asm__("NOP");
 8003668:	bf00      	nop
	LL_GPIO_SetOutputPin(PHOTO_ADC_CONV_GPIO_Port, PHOTO_ADC_CONV_Pin);
 800366a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800366e:	482c      	ldr	r0, [pc, #176]	@ (8003720 <read_adc+0xe4>)
 8003670:	f7ff fd4a 	bl	8003108 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(PHOTO_ADC_CS_GPIO_Port, PHOTO_ADC_CS_Pin);
 8003674:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003678:	4829      	ldr	r0, [pc, #164]	@ (8003720 <read_adc+0xe4>)
 800367a:	f7ff fd53 	bl	8003124 <LL_GPIO_ResetOutputPin>
	HAL_SPI_Receive(&hspi2, rxData, 2, 1000);
 800367e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8003682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003686:	2202      	movs	r2, #2
 8003688:	4826      	ldr	r0, [pc, #152]	@ (8003724 <read_adc+0xe8>)
 800368a:	f004 fb44 	bl	8007d16 <HAL_SPI_Receive>
	LL_GPIO_SetOutputPin(PHOTO_ADC_CS_GPIO_Port, PHOTO_ADC_CS_Pin);
 800368e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003692:	4823      	ldr	r0, [pc, #140]	@ (8003720 <read_adc+0xe4>)
 8003694:	f7ff fd38 	bl	8003108 <LL_GPIO_SetOutputPin>

	result = ((uint32_t)rxData[0] << 8) | rxData[1];
 8003698:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 80036a2:	4313      	orrs	r3, r2
 80036a4:	657b      	str	r3, [r7, #84]	@ 0x54
	voltage = (result / 65536.0f) * vref;
 80036a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a8:	ee07 3a90 	vmov	s15, r3
 80036ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036b0:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8003728 <read_adc+0xec>
 80036b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036b8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80036bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

	voltage_int = (int32_t)voltage;
 80036c4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80036c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036cc:	ee17 3a90 	vmov	r3, s15
 80036d0:	64bb      	str	r3, [r7, #72]	@ 0x48
	voltage_frac = (int32_t)((voltage - voltage_int) * 1000);
 80036d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036d4:	ee07 3a90 	vmov	s15, r3
 80036d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036dc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80036e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e4:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800372c <read_adc+0xf0>
 80036e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036f0:	ee17 3a90 	vmov	r3, s15
 80036f4:	647b      	str	r3, [r7, #68]	@ 0x44

	char buffer[60];
	snprintf(buffer, sizeof(buffer), "AutoADC: %ld (Vol: %ld.%03ld V)\r\n", result, voltage_int, voltage_frac);
 80036f6:	1d38      	adds	r0, r7, #4
 80036f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003702:	4a0b      	ldr	r2, [pc, #44]	@ (8003730 <read_adc+0xf4>)
 8003704:	213c      	movs	r1, #60	@ 0x3c
 8003706:	f007 f8d3 	bl	800a8b0 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 800370a:	1d3b      	adds	r3, r7, #4
 800370c:	4619      	mov	r1, r3
 800370e:	4809      	ldr	r0, [pc, #36]	@ (8003734 <read_adc+0xf8>)
 8003710:	f7fd fe48 	bl	80013a4 <UART_SendStringRing>
}
 8003714:	bf00      	nop
 8003716:	3758      	adds	r7, #88	@ 0x58
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40400000 	.word	0x40400000
 8003720:	40020c00 	.word	0x40020c00
 8003724:	2000350c 	.word	0x2000350c
 8003728:	47800000 	.word	0x47800000
 800372c:	447a0000 	.word	0x447a0000
 8003730:	0800c870 	.word	0x0800c870
 8003734:	40011000 	.word	0x40011000

08003738 <read_adc_without_LF>:

void read_adc_without_LF(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b090      	sub	sp, #64	@ 0x40
 800373c:	af02      	add	r7, sp, #8
	uint8_t rxData[2] = {0};
 800373e:	2300      	movs	r3, #0
 8003740:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint16_t result = 0;
 8003742:	2300      	movs	r3, #0
 8003744:	86fb      	strh	r3, [r7, #54]	@ 0x36

	LL_GPIO_ResetOutputPin(PHOTO_ADC_CONV_GPIO_Port, PHOTO_ADC_CONV_Pin);
 8003746:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800374a:	481d      	ldr	r0, [pc, #116]	@ (80037c0 <read_adc_without_LF+0x88>)
 800374c:	f7ff fcea 	bl	8003124 <LL_GPIO_ResetOutputPin>
	__asm__("NOP");
 8003750:	bf00      	nop
	LL_GPIO_SetOutputPin(PHOTO_ADC_CONV_GPIO_Port, PHOTO_ADC_CONV_Pin);
 8003752:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003756:	481a      	ldr	r0, [pc, #104]	@ (80037c0 <read_adc_without_LF+0x88>)
 8003758:	f7ff fcd6 	bl	8003108 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(PHOTO_ADC_CS_GPIO_Port, PHOTO_ADC_CS_Pin);
 800375c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003760:	4817      	ldr	r0, [pc, #92]	@ (80037c0 <read_adc_without_LF+0x88>)
 8003762:	f7ff fcdf 	bl	8003124 <LL_GPIO_ResetOutputPin>
	HAL_SPI_Receive(&hspi2, rxData, 2, 1000);
 8003766:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800376a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800376e:	2202      	movs	r2, #2
 8003770:	4814      	ldr	r0, [pc, #80]	@ (80037c4 <read_adc_without_LF+0x8c>)
 8003772:	f004 fad0 	bl	8007d16 <HAL_SPI_Receive>
	LL_GPIO_SetOutputPin(PHOTO_ADC_CS_GPIO_Port, PHOTO_ADC_CS_Pin);
 8003776:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800377a:	4811      	ldr	r0, [pc, #68]	@ (80037c0 <read_adc_without_LF+0x88>)
 800377c:	f7ff fcc4 	bl	8003108 <LL_GPIO_SetOutputPin>

	result = ((uint16_t)rxData[0] << 8) | rxData[1];
 8003780:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003784:	b21b      	sxth	r3, r3
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	b21a      	sxth	r2, r3
 800378a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800378e:	b21b      	sxth	r3, r3
 8003790:	4313      	orrs	r3, r2
 8003792:	b21b      	sxth	r3, r3
 8003794:	86fb      	strh	r3, [r7, #54]	@ 0x36

	char buffer[50];
	snprintf(buffer, sizeof(buffer), "  [T: %d]-[ADC: %d]", data_times, result);
 8003796:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <read_adc_without_LF+0x90>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800379e:	4638      	mov	r0, r7
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	4613      	mov	r3, r2
 80037a4:	4a09      	ldr	r2, [pc, #36]	@ (80037cc <read_adc_without_LF+0x94>)
 80037a6:	2132      	movs	r1, #50	@ 0x32
 80037a8:	f007 f882 	bl	800a8b0 <sniprintf>
	UART_SendStringRing(UART_CMDLINE, buffer);
 80037ac:	463b      	mov	r3, r7
 80037ae:	4619      	mov	r1, r3
 80037b0:	4807      	ldr	r0, [pc, #28]	@ (80037d0 <read_adc_without_LF+0x98>)
 80037b2:	f7fd fdf7 	bl	80013a4 <UART_SendStringRing>
}
 80037b6:	bf00      	nop
 80037b8:	3738      	adds	r7, #56	@ 0x38
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40020c00 	.word	0x40020c00
 80037c4:	2000350c 	.word	0x2000350c
 80037c8:	20003479 	.word	0x20003479
 80037cc:	0800c894 	.word	0x0800c894
 80037d0:	40011000 	.word	0x40011000

080037d4 <AutoRun_CreateTask>:

void AutoRun_CreateTask(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_auto_runTaskContext.taskHandle, &s_auto_runTaskContext.taskProperty);
 80037d8:	4902      	ldr	r1, [pc, #8]	@ (80037e4 <AutoRun_CreateTask+0x10>)
 80037da:	4803      	ldr	r0, [pc, #12]	@ (80037e8 <AutoRun_CreateTask+0x14>)
 80037dc:	f006 feac 	bl	800a538 <SCH_TASK_CreateTask>
}
 80037e0:	bf00      	nop
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	200001b0 	.word	0x200001b0
 80037e8:	200001ac 	.word	0x200001ac

080037ec <LL_GPIO_SetOutputPin>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	619a      	str	r2, [r3, #24]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <LL_GPIO_ResetOutputPin>:
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	041a      	lsls	r2, r3, #16
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	619a      	str	r2, [r3, #24]
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <LL_SPI_IsActiveFlag_TXE>:
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b02      	cmp	r3, #2
 8003838:	d101      	bne.n	800383e <LL_SPI_IsActiveFlag_TXE+0x18>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <LL_SPI_IsActiveFlag_BSY>:
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385c:	2b80      	cmp	r3, #128	@ 0x80
 800385e:	d101      	bne.n	8003864 <LL_SPI_IsActiveFlag_BSY+0x18>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <LL_SPI_TransmitData8>:
{
 8003872:	b480      	push	{r7}
 8003874:	b085      	sub	sp, #20
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	330c      	adds	r3, #12
 8003882:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	701a      	strb	r2, [r3, #0]
}
 800388a:	bf00      	nop
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <DAC_Write>:
{
    return (dac * _VREF_DAC) / 2.55f;
}

void DAC_Write(uint8_t channel, uint8_t DAC_Data)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	460a      	mov	r2, r1
 80038a2:	71fb      	strb	r3, [r7, #7]
 80038a4:	4613      	mov	r3, r2
 80038a6:	71bb      	strb	r3, [r7, #6]
    // Pull CS low
    LL_GPIO_ResetOutputPin(DAC_CS_PORT, DAC_CS_PIN);
 80038a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80038ac:	482b      	ldr	r0, [pc, #172]	@ (800395c <DAC_Write+0xc4>)
 80038ae:	f7ff ffab 	bl	8003808 <LL_GPIO_ResetOutputPin>

    // Prepare the 16-bit data
    uint16_t temp = channel ? ((1 << MCP_AB_BIT) | (1 << MCP_GA_BIT) | (1 << MCP_SHDN_BIT) | (DAC_Data << 4))
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <DAC_Write+0x32>
 80038b8:	79bb      	ldrb	r3, [r7, #6]
 80038ba:	b21b      	sxth	r3, r3
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	b21a      	sxth	r2, r3
 80038c0:	4b27      	ldr	r3, [pc, #156]	@ (8003960 <DAC_Write+0xc8>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	b21b      	sxth	r3, r3
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	e007      	b.n	80038da <DAC_Write+0x42>
                            : ((1 << MCP_GA_BIT) | (1 << MCP_SHDN_BIT) | (DAC_Data << 4));
 80038ca:	79bb      	ldrb	r3, [r7, #6]
 80038cc:	b21b      	sxth	r3, r3
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	b21b      	sxth	r3, r3
 80038d2:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80038d6:	b21b      	sxth	r3, r3
    uint16_t temp = channel ? ((1 << MCP_AB_BIT) | (1 << MCP_GA_BIT) | (1 << MCP_SHDN_BIT) | (DAC_Data << 4))
 80038d8:	b29b      	uxth	r3, r3
 80038da:	81fb      	strh	r3, [r7, #14]

    // Send high byte
    LL_SPI_TransmitData8(SPI1, (uint8_t)(temp >> 8));
 80038dc:	89fb      	ldrh	r3, [r7, #14]
 80038de:	0a1b      	lsrs	r3, r3, #8
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	4619      	mov	r1, r3
 80038e6:	481f      	ldr	r0, [pc, #124]	@ (8003964 <DAC_Write+0xcc>)
 80038e8:	f7ff ffc3 	bl	8003872 <LL_SPI_TransmitData8>
    while (!LL_SPI_IsActiveFlag_TXE(SPI1));
 80038ec:	bf00      	nop
 80038ee:	481d      	ldr	r0, [pc, #116]	@ (8003964 <DAC_Write+0xcc>)
 80038f0:	f7ff ff99 	bl	8003826 <LL_SPI_IsActiveFlag_TXE>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f9      	beq.n	80038ee <DAC_Write+0x56>

    // Send low byte
    LL_SPI_TransmitData8(SPI1, (uint8_t)temp);
 80038fa:	89fb      	ldrh	r3, [r7, #14]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	4619      	mov	r1, r3
 8003900:	4818      	ldr	r0, [pc, #96]	@ (8003964 <DAC_Write+0xcc>)
 8003902:	f7ff ffb6 	bl	8003872 <LL_SPI_TransmitData8>
    while (!LL_SPI_IsActiveFlag_TXE(SPI1));
 8003906:	bf00      	nop
 8003908:	4816      	ldr	r0, [pc, #88]	@ (8003964 <DAC_Write+0xcc>)
 800390a:	f7ff ff8c 	bl	8003826 <LL_SPI_IsActiveFlag_TXE>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f9      	beq.n	8003908 <DAC_Write+0x70>

    // Wait until SPI is not busy
    while (LL_SPI_IsActiveFlag_BSY(SPI1));
 8003914:	bf00      	nop
 8003916:	4813      	ldr	r0, [pc, #76]	@ (8003964 <DAC_Write+0xcc>)
 8003918:	f7ff ff98 	bl	800384c <LL_SPI_IsActiveFlag_BSY>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f9      	bne.n	8003916 <DAC_Write+0x7e>

    // Pull CS high
    LL_GPIO_SetOutputPin(DAC_CS_PORT, DAC_CS_PIN);
 8003922:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003926:	480d      	ldr	r0, [pc, #52]	@ (800395c <DAC_Write+0xc4>)
 8003928:	f7ff ff60 	bl	80037ec <LL_GPIO_SetOutputPin>

    // Toggle LATCH pin
    LL_GPIO_ResetOutputPin(DAC_LATCH_PORT, DAC_LATCH_PIN);
 800392c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003930:	480a      	ldr	r0, [pc, #40]	@ (800395c <DAC_Write+0xc4>)
 8003932:	f7ff ff69 	bl	8003808 <LL_GPIO_ResetOutputPin>
    for (volatile int i = 0; i < 100; i++); // Small delay
 8003936:	2300      	movs	r3, #0
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	e002      	b.n	8003942 <DAC_Write+0xaa>
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	3301      	adds	r3, #1
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b63      	cmp	r3, #99	@ 0x63
 8003946:	ddf9      	ble.n	800393c <DAC_Write+0xa4>
    LL_GPIO_SetOutputPin(DAC_LATCH_PORT, DAC_LATCH_PIN);
 8003948:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800394c:	4803      	ldr	r0, [pc, #12]	@ (800395c <DAC_Write+0xc4>)
 800394e:	f7ff ff4d 	bl	80037ec <LL_GPIO_SetOutputPin>
}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000
 8003960:	ffffb000 	.word	0xffffb000
 8003964:	40013000 	.word	0x40013000

08003968 <SoftTime_Task_Update>:
		SoftTime_Task_Update,                // taskFunction;
		0							//taskTick
	},
};

void SoftTime_Task_Update(void) {
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
    s_RealTimeClock_context.second++;
 800396e:	4b5b      	ldr	r3, [pc, #364]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003970:	795b      	ldrb	r3, [r3, #5]
 8003972:	3301      	adds	r3, #1
 8003974:	b2da      	uxtb	r2, r3
 8003976:	4b59      	ldr	r3, [pc, #356]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003978:	715a      	strb	r2, [r3, #5]
    if (s_RealTimeClock_context.second >= 60) {
 800397a:	4b58      	ldr	r3, [pc, #352]	@ (8003adc <SoftTime_Task_Update+0x174>)
 800397c:	795b      	ldrb	r3, [r3, #5]
 800397e:	2b3b      	cmp	r3, #59	@ 0x3b
 8003980:	d97a      	bls.n	8003a78 <SoftTime_Task_Update+0x110>
        s_RealTimeClock_context.second = 0;
 8003982:	4b56      	ldr	r3, [pc, #344]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003984:	2200      	movs	r2, #0
 8003986:	715a      	strb	r2, [r3, #5]
        s_RealTimeClock_context.minute++;
 8003988:	4b54      	ldr	r3, [pc, #336]	@ (8003adc <SoftTime_Task_Update+0x174>)
 800398a:	791b      	ldrb	r3, [r3, #4]
 800398c:	3301      	adds	r3, #1
 800398e:	b2da      	uxtb	r2, r3
 8003990:	4b52      	ldr	r3, [pc, #328]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003992:	711a      	strb	r2, [r3, #4]
        if (s_RealTimeClock_context.minute >= 60) {
 8003994:	4b51      	ldr	r3, [pc, #324]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003996:	791b      	ldrb	r3, [r3, #4]
 8003998:	2b3b      	cmp	r3, #59	@ 0x3b
 800399a:	d96d      	bls.n	8003a78 <SoftTime_Task_Update+0x110>
            s_RealTimeClock_context.minute = 0;
 800399c:	4b4f      	ldr	r3, [pc, #316]	@ (8003adc <SoftTime_Task_Update+0x174>)
 800399e:	2200      	movs	r2, #0
 80039a0:	711a      	strb	r2, [r3, #4]
            s_RealTimeClock_context.hour++;
 80039a2:	4b4e      	ldr	r3, [pc, #312]	@ (8003adc <SoftTime_Task_Update+0x174>)
 80039a4:	78db      	ldrb	r3, [r3, #3]
 80039a6:	3301      	adds	r3, #1
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	4b4c      	ldr	r3, [pc, #304]	@ (8003adc <SoftTime_Task_Update+0x174>)
 80039ac:	70da      	strb	r2, [r3, #3]
            if (s_RealTimeClock_context.hour >= 24) {
 80039ae:	4b4b      	ldr	r3, [pc, #300]	@ (8003adc <SoftTime_Task_Update+0x174>)
 80039b0:	78db      	ldrb	r3, [r3, #3]
 80039b2:	2b17      	cmp	r3, #23
 80039b4:	d960      	bls.n	8003a78 <SoftTime_Task_Update+0x110>
                s_RealTimeClock_context.hour = 0;
 80039b6:	4b49      	ldr	r3, [pc, #292]	@ (8003adc <SoftTime_Task_Update+0x174>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	70da      	strb	r2, [r3, #3]
                s_RealTimeClock_context.day++;
 80039bc:	4b47      	ldr	r3, [pc, #284]	@ (8003adc <SoftTime_Task_Update+0x174>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	3301      	adds	r3, #1
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	4b45      	ldr	r3, [pc, #276]	@ (8003adc <SoftTime_Task_Update+0x174>)
 80039c6:	701a      	strb	r2, [r3, #0]

                static const uint8_t daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
                uint8_t leapYear = ((s_RealTimeClock_context.year % 4 == 0) &&
 80039c8:	4b44      	ldr	r3, [pc, #272]	@ (8003adc <SoftTime_Task_Update+0x174>)
 80039ca:	789b      	ldrb	r3, [r3, #2]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	b2db      	uxtb	r3, r3
                                   ((s_RealTimeClock_context.year % 100 != 0) ||
                                		   (s_RealTimeClock_context.year % 400 == 0))) ? 1 : 0;
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d11e      	bne.n	8003a14 <SoftTime_Task_Update+0xac>
                                   ((s_RealTimeClock_context.year % 100 != 0) ||
 80039d6:	4b41      	ldr	r3, [pc, #260]	@ (8003adc <SoftTime_Task_Update+0x174>)
 80039d8:	789b      	ldrb	r3, [r3, #2]
 80039da:	4a41      	ldr	r2, [pc, #260]	@ (8003ae0 <SoftTime_Task_Update+0x178>)
 80039dc:	fba2 1203 	umull	r1, r2, r2, r3
 80039e0:	0952      	lsrs	r2, r2, #5
 80039e2:	2164      	movs	r1, #100	@ 0x64
 80039e4:	fb01 f202 	mul.w	r2, r1, r2
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	b2db      	uxtb	r3, r3
                                		   (s_RealTimeClock_context.year % 400 == 0))) ? 1 : 0;
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10f      	bne.n	8003a10 <SoftTime_Task_Update+0xa8>
 80039f0:	4b3a      	ldr	r3, [pc, #232]	@ (8003adc <SoftTime_Task_Update+0x174>)
 80039f2:	789b      	ldrb	r3, [r3, #2]
 80039f4:	461a      	mov	r2, r3
 80039f6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ae0 <SoftTime_Task_Update+0x178>)
 80039f8:	fb83 1302 	smull	r1, r3, r3, r2
 80039fc:	11d9      	asrs	r1, r3, #7
 80039fe:	17d3      	asrs	r3, r2, #31
 8003a00:	1acb      	subs	r3, r1, r3
 8003a02:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	1ad3      	subs	r3, r2, r3
                                   ((s_RealTimeClock_context.year % 100 != 0) ||
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <SoftTime_Task_Update+0xac>
                                		   (s_RealTimeClock_context.year % 400 == 0))) ? 1 : 0;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <SoftTime_Task_Update+0xae>
 8003a14:	2300      	movs	r3, #0
                uint8_t leapYear = ((s_RealTimeClock_context.year % 4 == 0) &&
 8003a16:	71fb      	strb	r3, [r7, #7]

                uint8_t maxDays =
                		(s_RealTimeClock_context.month == 2) ? (28 + leapYear) : daysInMonth[s_RealTimeClock_context.month - 1];
 8003a18:	4b30      	ldr	r3, [pc, #192]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003a1a:	785b      	ldrb	r3, [r3, #1]
                uint8_t maxDays =
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d103      	bne.n	8003a28 <SoftTime_Task_Update+0xc0>
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	331c      	adds	r3, #28
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	e004      	b.n	8003a32 <SoftTime_Task_Update+0xca>
                		(s_RealTimeClock_context.month == 2) ? (28 + leapYear) : daysInMonth[s_RealTimeClock_context.month - 1];
 8003a28:	4b2c      	ldr	r3, [pc, #176]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003a2a:	785b      	ldrb	r3, [r3, #1]
 8003a2c:	3b01      	subs	r3, #1
                uint8_t maxDays =
 8003a2e:	4a2d      	ldr	r2, [pc, #180]	@ (8003ae4 <SoftTime_Task_Update+0x17c>)
 8003a30:	5cd3      	ldrb	r3, [r2, r3]
 8003a32:	71bb      	strb	r3, [r7, #6]

                if (s_RealTimeClock_context.day > maxDays) {
 8003a34:	4b29      	ldr	r3, [pc, #164]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	79ba      	ldrb	r2, [r7, #6]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d21c      	bcs.n	8003a78 <SoftTime_Task_Update+0x110>
                    s_RealTimeClock_context.day = 1;
 8003a3e:	4b27      	ldr	r3, [pc, #156]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	701a      	strb	r2, [r3, #0]
                    s_RealTimeClock_context.month++;
 8003a44:	4b25      	ldr	r3, [pc, #148]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003a46:	785b      	ldrb	r3, [r3, #1]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	4b23      	ldr	r3, [pc, #140]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003a4e:	705a      	strb	r2, [r3, #1]
                    if (s_RealTimeClock_context.month > 12) {
 8003a50:	4b22      	ldr	r3, [pc, #136]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003a52:	785b      	ldrb	r3, [r3, #1]
 8003a54:	2b0c      	cmp	r3, #12
 8003a56:	d90f      	bls.n	8003a78 <SoftTime_Task_Update+0x110>
                        s_RealTimeClock_context.month = 1;
 8003a58:	4b20      	ldr	r3, [pc, #128]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	705a      	strb	r2, [r3, #1]
                        s_RealTimeClock_context.year++;
 8003a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003a60:	789b      	ldrb	r3, [r3, #2]
 8003a62:	3301      	adds	r3, #1
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	4b1d      	ldr	r3, [pc, #116]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003a68:	709a      	strb	r2, [r3, #2]
                        if (s_RealTimeClock_context.year > 99) {
 8003a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003a6c:	789b      	ldrb	r3, [r3, #2]
 8003a6e:	2b63      	cmp	r3, #99	@ 0x63
 8003a70:	d902      	bls.n	8003a78 <SoftTime_Task_Update+0x110>
                            s_RealTimeClock_context.year = 0;
 8003a72:	4b1a      	ldr	r3, [pc, #104]	@ (8003adc <SoftTime_Task_Update+0x174>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	709a      	strb	r2, [r3, #2]
                }
            }
        }
    }

    s_WorkingTimeClock_context.seconds++;
 8003a78:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae8 <SoftTime_Task_Update+0x180>)
 8003a7a:	799b      	ldrb	r3, [r3, #6]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	4b19      	ldr	r3, [pc, #100]	@ (8003ae8 <SoftTime_Task_Update+0x180>)
 8003a82:	719a      	strb	r2, [r3, #6]
    if (s_WorkingTimeClock_context.seconds >= 60) {
 8003a84:	4b18      	ldr	r3, [pc, #96]	@ (8003ae8 <SoftTime_Task_Update+0x180>)
 8003a86:	799b      	ldrb	r3, [r3, #6]
 8003a88:	2b3b      	cmp	r3, #59	@ 0x3b
 8003a8a:	d921      	bls.n	8003ad0 <SoftTime_Task_Update+0x168>
        s_WorkingTimeClock_context.seconds = 0;
 8003a8c:	4b16      	ldr	r3, [pc, #88]	@ (8003ae8 <SoftTime_Task_Update+0x180>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	719a      	strb	r2, [r3, #6]
        s_WorkingTimeClock_context.minutes++;
 8003a92:	4b15      	ldr	r3, [pc, #84]	@ (8003ae8 <SoftTime_Task_Update+0x180>)
 8003a94:	795b      	ldrb	r3, [r3, #5]
 8003a96:	3301      	adds	r3, #1
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4b13      	ldr	r3, [pc, #76]	@ (8003ae8 <SoftTime_Task_Update+0x180>)
 8003a9c:	715a      	strb	r2, [r3, #5]
        if (s_WorkingTimeClock_context.minutes >= 60) {
 8003a9e:	4b12      	ldr	r3, [pc, #72]	@ (8003ae8 <SoftTime_Task_Update+0x180>)
 8003aa0:	795b      	ldrb	r3, [r3, #5]
 8003aa2:	2b3b      	cmp	r3, #59	@ 0x3b
 8003aa4:	d914      	bls.n	8003ad0 <SoftTime_Task_Update+0x168>
            s_WorkingTimeClock_context.minutes = 0;
 8003aa6:	4b10      	ldr	r3, [pc, #64]	@ (8003ae8 <SoftTime_Task_Update+0x180>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	715a      	strb	r2, [r3, #5]
            s_WorkingTimeClock_context.hours++;
 8003aac:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae8 <SoftTime_Task_Update+0x180>)
 8003aae:	791b      	ldrb	r3, [r3, #4]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <SoftTime_Task_Update+0x180>)
 8003ab6:	711a      	strb	r2, [r3, #4]
            if (s_WorkingTimeClock_context.hours >= 24) {
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <SoftTime_Task_Update+0x180>)
 8003aba:	791b      	ldrb	r3, [r3, #4]
 8003abc:	2b17      	cmp	r3, #23
 8003abe:	d907      	bls.n	8003ad0 <SoftTime_Task_Update+0x168>
                s_WorkingTimeClock_context.hours = 0;
 8003ac0:	4b09      	ldr	r3, [pc, #36]	@ (8003ae8 <SoftTime_Task_Update+0x180>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	711a      	strb	r2, [r3, #4]
                s_WorkingTimeClock_context.days++;
 8003ac6:	4b08      	ldr	r3, [pc, #32]	@ (8003ae8 <SoftTime_Task_Update+0x180>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3301      	adds	r3, #1
 8003acc:	4a06      	ldr	r2, [pc, #24]	@ (8003ae8 <SoftTime_Task_Update+0x180>)
 8003ace:	6013      	str	r3, [r2, #0]
            }
        }
    }
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	200001c8 	.word	0x200001c8
 8003ae0:	51eb851f 	.word	0x51eb851f
 8003ae4:	0800c8b4 	.word	0x0800c8b4
 8003ae8:	20003494 	.word	0x20003494

08003aec <SoftTime_CreateTask>:

void SoftTime_CreateTask(void) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
    s_RealTimeClock_context.year = 0;  // 2000
 8003af0:	4b11      	ldr	r3, [pc, #68]	@ (8003b38 <SoftTime_CreateTask+0x4c>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	709a      	strb	r2, [r3, #2]
    s_RealTimeClock_context.month = 1; // January
 8003af6:	4b10      	ldr	r3, [pc, #64]	@ (8003b38 <SoftTime_CreateTask+0x4c>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	705a      	strb	r2, [r3, #1]
    s_RealTimeClock_context.day = 1;
 8003afc:	4b0e      	ldr	r3, [pc, #56]	@ (8003b38 <SoftTime_CreateTask+0x4c>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
    s_RealTimeClock_context.hour = 0;
 8003b02:	4b0d      	ldr	r3, [pc, #52]	@ (8003b38 <SoftTime_CreateTask+0x4c>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	70da      	strb	r2, [r3, #3]
    s_RealTimeClock_context.minute = 0;
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <SoftTime_CreateTask+0x4c>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	711a      	strb	r2, [r3, #4]
    s_RealTimeClock_context.second = 0;
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <SoftTime_CreateTask+0x4c>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	715a      	strb	r2, [r3, #5]

    s_WorkingTimeClock_context.days = 0;
 8003b14:	4b09      	ldr	r3, [pc, #36]	@ (8003b3c <SoftTime_CreateTask+0x50>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
    s_WorkingTimeClock_context.hours = 0;
 8003b1a:	4b08      	ldr	r3, [pc, #32]	@ (8003b3c <SoftTime_CreateTask+0x50>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	711a      	strb	r2, [r3, #4]
    s_WorkingTimeClock_context.minutes = 0;
 8003b20:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <SoftTime_CreateTask+0x50>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	715a      	strb	r2, [r3, #5]
    s_WorkingTimeClock_context.seconds = 0;
 8003b26:	4b05      	ldr	r3, [pc, #20]	@ (8003b3c <SoftTime_CreateTask+0x50>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	719a      	strb	r2, [r3, #6]

    SCH_TASK_CreateTask(&s_SoftTime_task_context.taskHandle, &s_SoftTime_task_context.taskProperty);
 8003b2c:	4904      	ldr	r1, [pc, #16]	@ (8003b40 <SoftTime_CreateTask+0x54>)
 8003b2e:	4805      	ldr	r0, [pc, #20]	@ (8003b44 <SoftTime_CreateTask+0x58>)
 8003b30:	f006 fd02 	bl	800a538 <SCH_TASK_CreateTask>
}
 8003b34:	bf00      	nop
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	200001c8 	.word	0x200001c8
 8003b3c:	20003494 	.word	0x20003494
 8003b40:	200001d4 	.word	0x200001d4
 8003b44:	200001d0 	.word	0x200001d0

08003b48 <DateTime_GetRTC>:

void DateTime_GetRTC(s_DateTime *dateTime) {
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
    if (dateTime == NULL) return;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d006      	beq.n	8003b64 <DateTime_GetRTC+0x1c>
    *dateTime = s_RealTimeClock_context;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a05      	ldr	r2, [pc, #20]	@ (8003b70 <DateTime_GetRTC+0x28>)
 8003b5a:	6810      	ldr	r0, [r2, #0]
 8003b5c:	6018      	str	r0, [r3, #0]
 8003b5e:	8892      	ldrh	r2, [r2, #4]
 8003b60:	809a      	strh	r2, [r3, #4]
 8003b62:	e000      	b.n	8003b66 <DateTime_GetRTC+0x1e>
    if (dateTime == NULL) return;
 8003b64:	bf00      	nop
}
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	200001c8 	.word	0x200001c8

08003b74 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <heater_set_duty_pwm_channel>:

#include "heater.h"
#include "main.h"

void heater_set_duty_pwm_channel(uint8_t channel, uint16_t duty_pwm)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	460a      	mov	r2, r1
 8003bee:	71fb      	strb	r3, [r7, #7]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	80bb      	strh	r3, [r7, #4]
    if (duty_pwm > 999) duty_pwm = 999;
 8003bf4:	88bb      	ldrh	r3, [r7, #4]
 8003bf6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bfa:	d302      	bcc.n	8003c02 <heater_set_duty_pwm_channel+0x1e>
 8003bfc:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8003c00:	80bb      	strh	r3, [r7, #4]
    switch (channel)
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d823      	bhi.n	8003c50 <heater_set_duty_pwm_channel+0x6c>
 8003c08:	a201      	add	r2, pc, #4	@ (adr r2, 8003c10 <heater_set_duty_pwm_channel+0x2c>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c21 	.word	0x08003c21
 8003c14:	08003c2d 	.word	0x08003c2d
 8003c18:	08003c39 	.word	0x08003c39
 8003c1c:	08003c45 	.word	0x08003c45
    {
        case 0:
            LL_TIM_OC_SetCompareCH1(TIM1, duty_pwm);
 8003c20:	88bb      	ldrh	r3, [r7, #4]
 8003c22:	4619      	mov	r1, r3
 8003c24:	480d      	ldr	r0, [pc, #52]	@ (8003c5c <heater_set_duty_pwm_channel+0x78>)
 8003c26:	f7ff ffa5 	bl	8003b74 <LL_TIM_OC_SetCompareCH1>
            break;
 8003c2a:	e012      	b.n	8003c52 <heater_set_duty_pwm_channel+0x6e>
        case 1:
            LL_TIM_OC_SetCompareCH2(TIM1, duty_pwm);
 8003c2c:	88bb      	ldrh	r3, [r7, #4]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	480a      	ldr	r0, [pc, #40]	@ (8003c5c <heater_set_duty_pwm_channel+0x78>)
 8003c32:	f7ff ffad 	bl	8003b90 <LL_TIM_OC_SetCompareCH2>
            break;
 8003c36:	e00c      	b.n	8003c52 <heater_set_duty_pwm_channel+0x6e>
        case 2:
            LL_TIM_OC_SetCompareCH3(TIM1, duty_pwm);
 8003c38:	88bb      	ldrh	r3, [r7, #4]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4807      	ldr	r0, [pc, #28]	@ (8003c5c <heater_set_duty_pwm_channel+0x78>)
 8003c3e:	f7ff ffb5 	bl	8003bac <LL_TIM_OC_SetCompareCH3>
            break;
 8003c42:	e006      	b.n	8003c52 <heater_set_duty_pwm_channel+0x6e>
        case 3:
            LL_TIM_OC_SetCompareCH4(TIM1, duty_pwm);
 8003c44:	88bb      	ldrh	r3, [r7, #4]
 8003c46:	4619      	mov	r1, r3
 8003c48:	4804      	ldr	r0, [pc, #16]	@ (8003c5c <heater_set_duty_pwm_channel+0x78>)
 8003c4a:	f7ff ffbd 	bl	8003bc8 <LL_TIM_OC_SetCompareCH4>
            break;
 8003c4e:	e000      	b.n	8003c52 <heater_set_duty_pwm_channel+0x6e>
        default:
            break;
 8003c50:	bf00      	nop
    }
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40010000 	.word	0x40010000

08003c60 <LL_TIM_OC_SetCompareCH1>:
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <ir_led_set_duty>:
#include "ir_led.h"

static uint16_t ir_led_duty_current = 0;

void ir_led_set_duty(uint8_t duty)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
	ir_led_duty_current = duty*10;
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	0092      	lsls	r2, r2, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	4b07      	ldr	r3, [pc, #28]	@ (8003cb4 <ir_led_set_duty+0x38>)
 8003c96:	801a      	strh	r2, [r3, #0]
	LL_TIM_OC_SetCompareCH1(TIM1, duty*10);
 8003c98:	79fa      	ldrb	r2, [r7, #7]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4804      	ldr	r0, [pc, #16]	@ (8003cb8 <ir_led_set_duty+0x3c>)
 8003ca6:	f7ff ffdb 	bl	8003c60 <LL_TIM_OC_SetCompareCH1>
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	2000349c 	.word	0x2000349c
 8003cb8:	40010000 	.word	0x40010000

08003cbc <ir_led_get_duty>:

uint8_t ir_led_get_duty(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
	return ir_led_duty_current/10;
 8003cc0:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <ir_led_get_duty+0x20>)
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	4a06      	ldr	r2, [pc, #24]	@ (8003ce0 <ir_led_get_duty+0x24>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	08db      	lsrs	r3, r3, #3
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	2000349c 	.word	0x2000349c
 8003ce0:	cccccccd 	.word	0xcccccccd

08003ce4 <LL_SPI_IsActiveFlag_RXNE>:
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <LL_SPI_IsActiveFlag_RXNE+0x18>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_SPI_ReceiveData8>:
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	330c      	adds	r3, #12
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	b2db      	uxtb	r3, r3
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <LL_SPI_TransmitData8>:
{
 8003d26:	b480      	push	{r7}
 8003d28:	b085      	sub	sp, #20
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	330c      	adds	r3, #12
 8003d36:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	78fa      	ldrb	r2, [r7, #3]
 8003d3c:	701a      	strb	r2, [r3, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <LL_GPIO_SetOutputPin>:
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	619a      	str	r2, [r3, #24]
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <LL_GPIO_ResetOutputPin>:
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	041a      	lsls	r2, r3, #16
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	619a      	str	r2, [r3, #24]
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <csLOW>:

int swen_port[4] = {(int)TEC_1_SWEN_GPIO_Port, (int)TEC_2_SWEN_GPIO_Port, (int)TEC_3_SWEN_GPIO_Port, (int)TEC_4_SWEN_GPIO_Port};
int swen_pin[4] = {TEC_1_SWEN_Pin, TEC_2_SWEN_Pin, TEC_3_SWEN_Pin, TEC_4_SWEN_Pin};

/* SPI support function --------------------------------------------------*/
static inline void csLOW(uint8_t channel) {
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	71fb      	strb	r3, [r7, #7]
//	LL_GPIO_ResetOutputPin(TEC_1_CS_GPIO_Port, TEC_1_CS_Pin);
	LL_GPIO_ResetOutputPin((GPIO_TypeDef*)cs_port[channel], cs_pin[channel]);
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	4a07      	ldr	r2, [pc, #28]	@ (8003db0 <csLOW+0x2c>)
 8003d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d96:	4618      	mov	r0, r3
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	4a06      	ldr	r2, [pc, #24]	@ (8003db4 <csLOW+0x30>)
 8003d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da0:	4619      	mov	r1, r3
 8003da2:	f7ff ffe0 	bl	8003d66 <LL_GPIO_ResetOutputPin>
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000248 	.word	0x20000248
 8003db4:	20000258 	.word	0x20000258

08003db8 <csHIGH>:

static inline void csHIGH(uint8_t channel) {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	71fb      	strb	r3, [r7, #7]
//	LL_GPIO_SetOutputPin(TEC_1_CS_GPIO_Port, TEC_1_CS_Pin);
	LL_GPIO_SetOutputPin((GPIO_TypeDef*)cs_port[channel], cs_pin[channel]);
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	4a07      	ldr	r2, [pc, #28]	@ (8003de4 <csHIGH+0x2c>)
 8003dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	4a06      	ldr	r2, [pc, #24]	@ (8003de8 <csHIGH+0x30>)
 8003dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	f7ff ffb8 	bl	8003d4a <LL_GPIO_SetOutputPin>
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000248 	.word	0x20000248
 8003de8:	20000258 	.word	0x20000258

08003dec <SPI_LL_Transmit>:

static uint8_t SPI_LL_Transmit(uint8_t data)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	71fb      	strb	r3, [r7, #7]
	LL_SPI_TransmitData8(SPI_TEC, data);
 8003df6:	79fb      	ldrb	r3, [r7, #7]
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4809      	ldr	r0, [pc, #36]	@ (8003e20 <SPI_LL_Transmit+0x34>)
 8003dfc:	f7ff ff93 	bl	8003d26 <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI_TEC));
 8003e00:	bf00      	nop
 8003e02:	4807      	ldr	r0, [pc, #28]	@ (8003e20 <SPI_LL_Transmit+0x34>)
 8003e04:	f7ff ff6e 	bl	8003ce4 <LL_SPI_IsActiveFlag_RXNE>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f9      	beq.n	8003e02 <SPI_LL_Transmit+0x16>
	return LL_SPI_ReceiveData8(SPI_TEC);
 8003e0e:	4804      	ldr	r0, [pc, #16]	@ (8003e20 <SPI_LL_Transmit+0x34>)
 8003e10:	f7ff ff7b 	bl	8003d0a <LL_SPI_ReceiveData8>
 8003e14:	4603      	mov	r3, r0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40003c00 	.word	0x40003c00

08003e24 <SPI_write_and_read_buffer>:

uint8_t SPI_write_and_read_buffer(uint8_t channel, uint8_t *buffer, uint8_t byte_number)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	71fb      	strb	r3, [r7, #7]
 8003e30:	4613      	mov	r3, r2
 8003e32:	71bb      	strb	r3, [r7, #6]
    uint8_t received_data = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	73fb      	strb	r3, [r7, #15]
    csLOW(channel);
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff ffa2 	bl	8003d84 <csLOW>
    for (uint8_t i = 0; i < byte_number; i++)
 8003e40:	2300      	movs	r3, #0
 8003e42:	73bb      	strb	r3, [r7, #14]
 8003e44:	e010      	b.n	8003e68 <SPI_write_and_read_buffer+0x44>
    {
        received_data = SPI_LL_Transmit(buffer[i]);
 8003e46:	7bbb      	ldrb	r3, [r7, #14]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff ffcc 	bl	8003dec <SPI_LL_Transmit>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]
        buffer[i] = received_data;
 8003e58:	7bbb      	ldrb	r3, [r7, #14]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	7bfa      	ldrb	r2, [r7, #15]
 8003e60:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < byte_number; i++)
 8003e62:	7bbb      	ldrb	r3, [r7, #14]
 8003e64:	3301      	adds	r3, #1
 8003e66:	73bb      	strb	r3, [r7, #14]
 8003e68:	7bba      	ldrb	r2, [r7, #14]
 8003e6a:	79bb      	ldrb	r3, [r7, #6]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d3ea      	bcc.n	8003e46 <SPI_write_and_read_buffer+0x22>
    }
    csHIGH(channel);
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ffa0 	bl	8003db8 <csHIGH>
    return received_data;
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	0000      	movs	r0, r0
 8003e84:	0000      	movs	r0, r0
	...

08003e88 <lt8722_voltage_to_dac>:
 * @brief Convert voltage to DAC code.
 * @param voltage - Voltage value in nanovolts.
 * @return DAC code.
 */
int32_t lt8722_voltage_to_dac(int64_t voltage)
{
 8003e88:	b5b0      	push	{r4, r5, r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	e9c7 0100 	strd	r0, r1, [r7]
	return (LT8722_DAC_OFFSET - voltage) * (1 << LT8722_DAC_RESOLUTION) / LT8722_DAC_VREF;
 8003e92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e96:	4d0e      	ldr	r5, [pc, #56]	@ (8003ed0 <lt8722_voltage_to_dac+0x48>)
 8003e98:	2400      	movs	r4, #0
 8003e9a:	1a2a      	subs	r2, r5, r0
 8003e9c:	eb64 0301 	sbc.w	r3, r4, r1
 8003ea0:	f04f 0000 	mov.w	r0, #0
 8003ea4:	f04f 0100 	mov.w	r1, #0
 8003ea8:	0659      	lsls	r1, r3, #25
 8003eaa:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8003eae:	0650      	lsls	r0, r2, #25
 8003eb0:	a305      	add	r3, pc, #20	@ (adr r3, 8003ec8 <lt8722_voltage_to_dac+0x40>)
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f7fc f9f3 	bl	80002a0 <__aeabi_ldivmod>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4613      	mov	r3, r2
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ec8:	9502f900 	.word	0x9502f900
 8003ecc:	00000000 	.word	0x00000000
 8003ed0:	4a817c80 	.word	0x4a817c80

08003ed4 <lt8722_dac_to_voltage>:
 * @brief Convert DAC code to nanovolts.
 * @param dac - DAC code.
 * @return Voltage value in nanovolts.
 */
int64_t lt8722_dac_to_voltage(int32_t dac)
{
 8003ed4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003ed8:	b085      	sub	sp, #20
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
	return LT8722_DAC_OFFSET - dac * LT8722_DAC_VREF /(1 << LT8722_DAC_RESOLUTION);
 8003ede:	68f9      	ldr	r1, [r7, #12]
 8003ee0:	17c8      	asrs	r0, r1, #31
 8003ee2:	460c      	mov	r4, r1
 8003ee4:	4605      	mov	r5, r0
 8003ee6:	491b      	ldr	r1, [pc, #108]	@ (8003f54 <lt8722_dac_to_voltage+0x80>)
 8003ee8:	fb01 f005 	mul.w	r0, r1, r5
 8003eec:	2100      	movs	r1, #0
 8003eee:	fb04 f101 	mul.w	r1, r4, r1
 8003ef2:	4401      	add	r1, r0
 8003ef4:	4817      	ldr	r0, [pc, #92]	@ (8003f54 <lt8722_dac_to_voltage+0x80>)
 8003ef6:	fba4 2300 	umull	r2, r3, r4, r0
 8003efa:	4419      	add	r1, r3
 8003efc:	460b      	mov	r3, r1
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	2900      	cmp	r1, #0
 8003f04:	da08      	bge.n	8003f18 <lt8722_dac_to_voltage+0x44>
 8003f06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f0a:	18c3      	adds	r3, r0, r3
 8003f0c:	603b      	str	r3, [r7, #0]
 8003f0e:	f141 0300 	adc.w	r3, r1, #0
 8003f12:	607b      	str	r3, [r7, #4]
 8003f14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	0e42      	lsrs	r2, r0, #25
 8003f22:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8003f26:	164b      	asrs	r3, r1, #25
 8003f28:	2100      	movs	r1, #0
 8003f2a:	f1d2 0a00 	rsbs	sl, r2, #0
 8003f2e:	eb61 0b03 	sbc.w	fp, r1, r3
 8003f32:	4652      	mov	r2, sl
 8003f34:	465b      	mov	r3, fp
 8003f36:	4908      	ldr	r1, [pc, #32]	@ (8003f58 <lt8722_dac_to_voltage+0x84>)
 8003f38:	eb12 0801 	adds.w	r8, r2, r1
 8003f3c:	f143 0900 	adc.w	r9, r3, #0
 8003f40:	4642      	mov	r2, r8
 8003f42:	464b      	mov	r3, r9
}
 8003f44:	4610      	mov	r0, r2
 8003f46:	4619      	mov	r1, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	9502f900 	.word	0x9502f900
 8003f58:	4a817c80 	.word	0x4a817c80

08003f5c <lt8722_transaction>:
 * @param dev - LT8722 device descriptor
 * @param packet - LT8722 packet.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_transaction(uint8_t channel, struct lt8722_packet *packet)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	6039      	str	r1, [r7, #0]
 8003f66:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8] = {0};
 8003f68:	f107 030c 	add.w	r3, r7, #12
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
	buffer[0] = packet->command.byte;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	733b      	strb	r3, [r7, #12]
	buffer[1] = packet->reg.address << 1;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	791b      	ldrb	r3, [r3, #4]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	737b      	strb	r3, [r7, #13]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2bf2      	cmp	r3, #242	@ 0xf2
 8003f88:	d111      	bne.n	8003fae <lt8722_transaction+0x52>
	{
		put_unaligned_be32(packet->data, &buffer[2]);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	f107 030c 	add.w	r3, r7, #12
 8003f92:	3302      	adds	r3, #2
 8003f94:	4619      	mov	r1, r3
 8003f96:	4610      	mov	r0, r2
 8003f98:	f000 faea 	bl	8004570 <put_unaligned_be32>
		buffer[6] = Calculate_CRC8(buffer, 6);
 8003f9c:	f107 030c 	add.w	r3, r7, #12
 8003fa0:	2106      	movs	r1, #6
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 faa8 	bl	80044f8 <Calculate_CRC8>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	74bb      	strb	r3, [r7, #18]
 8003fac:	e007      	b.n	8003fbe <lt8722_transaction+0x62>
	} else
		buffer[2] = Calculate_CRC8(buffer, 2);
 8003fae:	f107 030c 	add.w	r3, r7, #12
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fa9f 	bl	80044f8 <Calculate_CRC8>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	73bb      	strb	r3, [r7, #14]
	SPI_write_and_read_buffer(channel, buffer, packet->command.size);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	785a      	ldrb	r2, [r3, #1]
 8003fc2:	f107 010c 	add.w	r1, r7, #12
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ff2b 	bl	8003e24 <SPI_write_and_read_buffer>
	packet->status = (get_unaligned_be16(&buffer[0]) & GENMASK(10, 0));
 8003fce:	f107 030c 	add.w	r3, r7, #12
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fb0a 	bl	80045ec <get_unaligned_be16>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	055b      	lsls	r3, r3, #21
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	0d5b      	lsrs	r3, r3, #21
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	82da      	strh	r2, [r3, #22]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2bf2      	cmp	r3, #242	@ 0xf2
 8004000:	d106      	bne.n	8004010 <lt8722_transaction+0xb4>
	{
		packet->crc = buffer[2];
 8004002:	7bba      	ldrb	r2, [r7, #14]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 8004008:	7cfa      	ldrb	r2, [r7, #19]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	755a      	strb	r2, [r3, #21]
 800400e:	e019      	b.n	8004044 <lt8722_transaction+0xe8>
	} else if (packet->command.byte == LT8722_DATA_READ_COMMAND) {
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2bf4      	cmp	r3, #244	@ 0xf4
 8004016:	d10f      	bne.n	8004038 <lt8722_transaction+0xdc>
		packet->data = get_unaligned_be32(&buffer[2]);
 8004018:	f107 030c 	add.w	r3, r7, #12
 800401c:	3302      	adds	r3, #2
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fac7 	bl	80045b2 <get_unaligned_be32>
 8004024:	4602      	mov	r2, r0
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	611a      	str	r2, [r3, #16]
		packet->crc = buffer[6];
 800402a:	7cba      	ldrb	r2, [r7, #18]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 8004030:	7cfa      	ldrb	r2, [r7, #19]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	755a      	strb	r2, [r3, #21]
 8004036:	e005      	b.n	8004044 <lt8722_transaction+0xe8>
	} else {
		packet->crc = buffer[2];
 8004038:	7bba      	ldrb	r2, [r7, #14]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[3];
 800403e:	7bfa      	ldrb	r2, [r7, #15]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	755a      	strb	r2, [r3, #21]
	}
	if (packet->ack != LT8722_ACK_ACKNOWLEDGE)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	7d5b      	ldrb	r3, [r3, #21]
 8004048:	2ba5      	cmp	r3, #165	@ 0xa5
 800404a:	d002      	beq.n	8004052 <lt8722_transaction+0xf6>
		return -1;
 800404c:	f04f 33ff 	mov.w	r3, #4294967295
 8004050:	e000      	b.n	8004054 <lt8722_transaction+0xf8>
	return 0;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <lt8722_reg_read>:
 * @param address - Register address.
 * @param data - Received data.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_read(uint8_t channel, uint8_t address, uint32_t *data)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	@ 0x28
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	603a      	str	r2, [r7, #0]
 8004066:	71fb      	strb	r3, [r7, #7]
 8004068:	460b      	mov	r3, r1
 800406a:	71bb      	strb	r3, [r7, #6]
	int8_t ret = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8004072:	4b15      	ldr	r3, [pc, #84]	@ (80040c8 <lt8722_reg_read+0x6c>)
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	813b      	strh	r3, [r7, #8]
		LT8722_DATA_READ_COMMAND,
		LT8722_DATA_READ_COMMAND_SIZE
	};
	packet.command = command;
 8004078:	893b      	ldrh	r3, [r7, #8]
 800407a:	81bb      	strh	r3, [r7, #12]
	packet.reg = lt8722_regs[address];
 800407c:	79ba      	ldrb	r2, [r7, #6]
 800407e:	4913      	ldr	r1, [pc, #76]	@ (80040cc <lt8722_reg_read+0x70>)
 8004080:	4613      	mov	r3, r2
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	18ca      	adds	r2, r1, r3
 800408a:	f107 0310 	add.w	r3, r7, #16
 800408e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004090:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ret = lt8722_transaction(channel, &packet);
 8004094:	f107 020c 	add.w	r2, r7, #12
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	4611      	mov	r1, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff ff5d 	bl	8003f5c <lt8722_transaction>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (ret)
 80040a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <lt8722_reg_read+0x5a>
		return ret;
 80040b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80040b4:	e003      	b.n	80040be <lt8722_reg_read+0x62>
	*data = packet.data;
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	601a      	str	r2, [r3, #0]
	return 0;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3728      	adds	r7, #40	@ 0x28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	0800c8a8 	.word	0x0800c8a8
 80040cc:	200001e8 	.word	0x200001e8

080040d0 <lt8722_reg_write>:
 * @param address - Register address.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write(uint8_t channel, uint8_t address, uint32_t data)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08a      	sub	sp, #40	@ 0x28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	603a      	str	r2, [r7, #0]
 80040da:	71fb      	strb	r3, [r7, #7]
 80040dc:	460b      	mov	r3, r1
 80040de:	71bb      	strb	r3, [r7, #6]
	struct lt8722_packet packet;
	struct lt8722_command command = {
 80040e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004120 <lt8722_reg_write+0x50>)
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	81bb      	strh	r3, [r7, #12]
		LT8722_DATA_WRITE_COMMAND,
		LT8722_DATA_WRITE_COMMAND_SIZE
	};
	packet.command = command;
 80040e6:	89bb      	ldrh	r3, [r7, #12]
 80040e8:	823b      	strh	r3, [r7, #16]
	packet.reg = lt8722_regs[address];
 80040ea:	79ba      	ldrb	r2, [r7, #6]
 80040ec:	490d      	ldr	r1, [pc, #52]	@ (8004124 <lt8722_reg_write+0x54>)
 80040ee:	4613      	mov	r3, r2
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	18ca      	adds	r2, r1, r3
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80040fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	packet.data = data;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	623b      	str	r3, [r7, #32]
	return lt8722_transaction(channel, &packet);
 8004106:	f107 0210 	add.w	r2, r7, #16
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	4611      	mov	r1, r2
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff ff24 	bl	8003f5c <lt8722_transaction>
 8004114:	4603      	mov	r3, r0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3728      	adds	r7, #40	@ 0x28
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	0800c8ac 	.word	0x0800c8ac
 8004124:	200001e8 	.word	0x200001e8

08004128 <lt8722_reg_write_mask>:
 * @param mask - Mask to be applied.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write_mask(uint8_t channel, uint8_t address, uint32_t mask, uint32_t data)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60ba      	str	r2, [r7, #8]
 8004130:	607b      	str	r3, [r7, #4]
 8004132:	4603      	mov	r3, r0
 8004134:	73fb      	strb	r3, [r7, #15]
 8004136:	460b      	mov	r3, r1
 8004138:	73bb      	strb	r3, [r7, #14]
	uint32_t reg_data;
	lt8722_reg_read(channel, address, &reg_data);
 800413a:	f107 0214 	add.w	r2, r7, #20
 800413e:	7bb9      	ldrb	r1, [r7, #14]
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff ff8a 	bl	800405c <lt8722_reg_read>
	reg_data &= ~mask;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	43da      	mvns	r2, r3
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	4013      	ands	r3, r2
 8004150:	617b      	str	r3, [r7, #20]
	reg_data |= field_prep(mask, data);
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	68b8      	ldr	r0, [r7, #8]
 8004156:	f000 fa79 	bl	800464c <field_prep>
 800415a:	4602      	mov	r2, r0
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]
	return lt8722_reg_write(channel, address, reg_data);
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	7bb9      	ldrb	r1, [r7, #14]
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff ffb1 	bl	80040d0 <lt8722_reg_write>
 800416e:	4603      	mov	r3, r0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <lt8722_set_enable_req>:
 * @brief Set ENABLE_REQ field in LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_enable_req(uint8_t channel, bool value)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	460a      	mov	r2, r1
 8004182:	71fb      	strb	r3, [r7, #7]
 8004184:	4613      	mov	r3, r2
 8004186:	71bb      	strb	r3, [r7, #6]
	return lt8722_reg_write_mask(channel, LT8722_SPIS_COMMAND, LT8722_ENABLE_REQ_MASK, value);
 8004188:	79bb      	ldrb	r3, [r7, #6]
 800418a:	79f8      	ldrb	r0, [r7, #7]
 800418c:	2201      	movs	r2, #1
 800418e:	2100      	movs	r1, #0
 8004190:	f7ff ffca 	bl	8004128 <lt8722_reg_write_mask>
 8004194:	4603      	mov	r3, r0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <lt8722_set_swen_req>:
 * @brief Set switching enable of LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_swen_req(uint8_t channel, bool value)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	4603      	mov	r3, r0
 80041a6:	460a      	mov	r2, r1
 80041a8:	71fb      	strb	r3, [r7, #7]
 80041aa:	4613      	mov	r3, r2
 80041ac:	71bb      	strb	r3, [r7, #6]
	return lt8722_reg_write_mask(channel, LT8722_SPIS_COMMAND, LT8722_SWEN_REQ_MASK, value);
 80041ae:	79bb      	ldrb	r3, [r7, #6]
 80041b0:	79f8      	ldrb	r0, [r7, #7]
 80041b2:	2202      	movs	r2, #2
 80041b4:	2100      	movs	r1, #0
 80041b6:	f7ff ffb7 	bl	8004128 <lt8722_reg_write_mask>
 80041ba:	4603      	mov	r3, r0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <lt8722_reset>:
/**
 * @brief Shutdown the LT8722 device.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reset(uint8_t channel)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(channel, LT8722_SPIS_COMMAND, LT8722_SPI_RST_MASK, LT8722_SPI_RST_RESET);
 80041ce:	79f8      	ldrb	r0, [r7, #7]
 80041d0:	2301      	movs	r3, #1
 80041d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80041d6:	2100      	movs	r1, #0
 80041d8:	f7ff ffa6 	bl	8004128 <lt8722_reg_write_mask>
 80041dc:	4603      	mov	r3, r0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <lt8722_clear_faults>:
/**
 * @brief Clear LT8722 device faults.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_clear_faults(uint8_t channel)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	4603      	mov	r3, r0
 80041ee:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(channel, LT8722_SPIS_STATUS, LT8722_FAULTS_MASK, 0);
 80041f0:	f04f 33ff 	mov.w	r3, #4294967295
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	069b      	lsls	r3, r3, #26
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	0d5b      	lsrs	r3, r3, #21
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	79f8      	ldrb	r0, [r7, #7]
 8004206:	2300      	movs	r3, #0
 8004208:	2101      	movs	r1, #1
 800420a:	f7ff ff8d 	bl	8004128 <lt8722_reg_write_mask>
 800420e:	4603      	mov	r3, r0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <lt8722_set_dac>:
 * @brief Set DAC code of LT8722 device.
 * @param value - DAC value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_dac(uint8_t channel, uint32_t value)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	6039      	str	r1, [r7, #0]
 8004222:	71fb      	strb	r3, [r7, #7]
	return lt8722_reg_write_mask(channel, LT8722_SPIS_DAC, LT8722_SPIS_DAC_MASK, value);
 8004224:	f04f 33ff 	mov.w	r3, #4294967295
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	79f8      	ldrb	r0, [r7, #7]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2104      	movs	r1, #4
 8004232:	f7ff ff79 	bl	8004128 <lt8722_reg_write_mask>
 8004236:	4603      	mov	r3, r0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <lt8722_init>:
 * @param init_param - Initialization parameter containing information about the
 * 		LT8722 device to be initialized.
 * @return 0 in case of success, negative error code otherwise
*/
int8_t lt8722_init(uint8_t channel)
{
 8004240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004244:	b091      	sub	sp, #68	@ 0x44
 8004246:	af00      	add	r7, sp, #0
 8004248:	4603      	mov	r3, r0
 800424a:	75fb      	strb	r3, [r7, #23]
	int8_t ret = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	int32_t dac;
	int64_t voltage;
	int64_t start_voltage;
	int64_t end_voltage;
	LL_GPIO_ResetOutputPin((GPIO_TypeDef*)en_port[channel], en_pin[channel]);
 8004252:	7dfb      	ldrb	r3, [r7, #23]
 8004254:	4a6b      	ldr	r2, [pc, #428]	@ (8004404 <lt8722_init+0x1c4>)
 8004256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425a:	4618      	mov	r0, r3
 800425c:	7dfb      	ldrb	r3, [r7, #23]
 800425e:	4a6a      	ldr	r2, [pc, #424]	@ (8004408 <lt8722_init+0x1c8>)
 8004260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004264:	4619      	mov	r1, r3
 8004266:	f7ff fd7e 	bl	8003d66 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin((GPIO_TypeDef*)swen_port[channel], swen_pin[channel]);
 800426a:	7dfb      	ldrb	r3, [r7, #23]
 800426c:	4a67      	ldr	r2, [pc, #412]	@ (800440c <lt8722_init+0x1cc>)
 800426e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004272:	4618      	mov	r0, r3
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	4a66      	ldr	r2, [pc, #408]	@ (8004410 <lt8722_init+0x1d0>)
 8004278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427c:	4619      	mov	r1, r3
 800427e:	f7ff fd72 	bl	8003d66 <LL_GPIO_ResetOutputPin>
//		LL_GPIO_ResetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
//		LL_GPIO_ResetOutputPin(TEC_1_SWEN_GPIO_Port, TEC_1_SWEN_Pin);
	/*
	 * Reset LT8722
	 */
	lt8722_reset(channel);
 8004282:	7dfb      	ldrb	r3, [r7, #23]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff9d 	bl	80041c4 <lt8722_reset>
	 * Start-up sequence
	 * 1. Apply proper VIN and VDDIO voltages
	 *
	 * 2. Enable VCC LDO and other LT8722 circuitry
	 */
	ret = lt8722_clear_faults(channel);
 800428a:	7dfb      	ldrb	r3, [r7, #23]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ffaa 	bl	80041e6 <lt8722_clear_faults>
 8004292:	4603      	mov	r3, r0
 8004294:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	LL_GPIO_SetOutputPin((GPIO_TypeDef*)en_port[channel], en_pin[channel]);
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	4a5a      	ldr	r2, [pc, #360]	@ (8004404 <lt8722_init+0x1c4>)
 800429c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a0:	4618      	mov	r0, r3
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
 80042a4:	4a58      	ldr	r2, [pc, #352]	@ (8004408 <lt8722_init+0x1c8>)
 80042a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042aa:	4619      	mov	r1, r3
 80042ac:	f7ff fd4d 	bl	8003d4a <LL_GPIO_SetOutputPin>

	ret = lt8722_set_enable_req(channel, LT8722_ENABLE_REQ_ENABLED);
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
 80042b2:	2101      	movs	r1, #1
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff5f 	bl	8004178 <lt8722_set_enable_req>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	ret = lt8722_reg_write(channel, LT8722_SPIS_COMMAND, 0x00003A01);
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
 80042c2:	f643 2201 	movw	r2, #14849	@ 0x3a01
 80042c6:	2100      	movs	r1, #0
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff ff01 	bl	80040d0 <lt8722_reg_write>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 3. Configure output voltage control DAC to 0xFF000000
	 */
	ret = lt8722_set_dac(channel, 0xFF000000);
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
 80042d6:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff ff9c 	bl	8004218 <lt8722_set_dac>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 4. Write all SPIS_STATUS registers to 0
	 */
	ret = lt8722_reg_write(channel, LT8722_SPIS_STATUS, 0);
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
 80042e8:	2200      	movs	r2, #0
 80042ea:	2101      	movs	r1, #1
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff feef 	bl	80040d0 <lt8722_reg_write>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	LL_mDelay(1);
 80042f8:	2001      	movs	r0, #1
 80042fa:	f006 f891 	bl	800a420 <LL_mDelay>
	ret = lt8722_reg_write(channel, LT8722_SPIS_COMMAND, 0x00003A01);
 80042fe:	7dfb      	ldrb	r3, [r7, #23]
 8004300:	f643 2201 	movw	r2, #14849	@ 0x3a01
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff fee2 	bl	80040d0 <lt8722_reg_write>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 5. Ramp the output voltage control DAC from 0xFF000000 to 0x00000000
	 */
	start_voltage = lt8722_dac_to_voltage(0xFF000000);
 8004312:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8004316:	f7ff fddd 	bl	8003ed4 <lt8722_dac_to_voltage>
 800431a:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
	end_voltage = lt8722_dac_to_voltage(0x00000000);
 800431e:	2000      	movs	r0, #0
 8004320:	f7ff fdd8 	bl	8003ed4 <lt8722_dac_to_voltage>
 8004324:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	for (uint8_t i = 0;  i < 5; i++)
 8004328:	2300      	movs	r3, #0
 800432a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800432e:	e047      	b.n	80043c0 <lt8722_init+0x180>
	{
		voltage = (start_voltage + (end_voltage - start_voltage) * i / 4);
 8004330:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004334:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004338:	1a84      	subs	r4, r0, r2
 800433a:	eb61 0503 	sbc.w	r5, r1, r3
 800433e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004342:	2200      	movs	r2, #0
 8004344:	4698      	mov	r8, r3
 8004346:	4691      	mov	r9, r2
 8004348:	fb08 f205 	mul.w	r2, r8, r5
 800434c:	fb04 f309 	mul.w	r3, r4, r9
 8004350:	4413      	add	r3, r2
 8004352:	fba4 ab08 	umull	sl, fp, r4, r8
 8004356:	445b      	add	r3, fp
 8004358:	469b      	mov	fp, r3
 800435a:	4652      	mov	r2, sl
 800435c:	465b      	mov	r3, fp
 800435e:	2b00      	cmp	r3, #0
 8004360:	da06      	bge.n	8004370 <lt8722_init+0x130>
 8004362:	1cd1      	adds	r1, r2, #3
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	f143 0300 	adc.w	r3, r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004370:	f04f 0000 	mov.w	r0, #0
 8004374:	f04f 0100 	mov.w	r1, #0
 8004378:	0890      	lsrs	r0, r2, #2
 800437a:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800437e:	1099      	asrs	r1, r3, #2
 8004380:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004384:	1816      	adds	r6, r2, r0
 8004386:	603e      	str	r6, [r7, #0]
 8004388:	414b      	adcs	r3, r1
 800438a:	607b      	str	r3, [r7, #4]
 800438c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004390:	e9c7 2308 	strd	r2, r3, [r7, #32]
		dac = lt8722_voltage_to_dac(voltage);
 8004394:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004398:	f7ff fd76 	bl	8003e88 <lt8722_voltage_to_dac>
 800439c:	61f8      	str	r0, [r7, #28]
		ret = lt8722_set_dac(channel, dac);
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
 80043a2:	4611      	mov	r1, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff ff37 	bl	8004218 <lt8722_set_dac>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		LL_mDelay(1);
 80043b0:	2001      	movs	r0, #1
 80043b2:	f006 f835 	bl	800a420 <LL_mDelay>
	for (uint8_t i = 0;  i < 5; i++)
 80043b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80043ba:	3301      	adds	r3, #1
 80043bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80043c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d9b3      	bls.n	8004330 <lt8722_init+0xf0>
	}
	/*
	 * 6. Enable the PWM switching behavior
	 */
	LL_GPIO_SetOutputPin((GPIO_TypeDef*)swen_port[channel], swen_pin[channel]);
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
 80043ca:	4a10      	ldr	r2, [pc, #64]	@ (800440c <lt8722_init+0x1cc>)
 80043cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d0:	4618      	mov	r0, r3
 80043d2:	7dfb      	ldrb	r3, [r7, #23]
 80043d4:	4a0e      	ldr	r2, [pc, #56]	@ (8004410 <lt8722_init+0x1d0>)
 80043d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043da:	4619      	mov	r1, r3
 80043dc:	f7ff fcb5 	bl	8003d4a <LL_GPIO_SetOutputPin>
	ret = lt8722_set_swen_req(channel, LT8722_SWEN_REQ_ENABLED);
 80043e0:	7dfb      	ldrb	r3, [r7, #23]
 80043e2:	2101      	movs	r1, #1
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff feda 	bl	800419e <lt8722_set_swen_req>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	delay_us(200);
 80043f0:	20c8      	movs	r0, #200	@ 0xc8
 80043f2:	f7fc f94f 	bl	8000694 <delay_us>
//
//		delay_us(255);
//		delay_us(255);
//
//		ret = lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
	return ret;
 80043f6:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3744      	adds	r7, #68	@ 0x44
 80043fe:	46bd      	mov	sp, r7
 8004400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004404:	20000268 	.word	0x20000268
 8004408:	20000278 	.word	0x20000278
 800440c:	20000288 	.word	0x20000288
 8004410:	20000298 	.word	0x20000298

08004414 <lt8722_set_output_voltage_channel>:
 * @param channel - Channel of lt8722.
 * @param value - Output voltage value in nanovolts.
 * @return 0 in case of success, negative error code otherwise
 */
int8_t lt8722_set_output_voltage_channel(uint8_t channel, tec_dir_t dir, int64_t value)
{
 8004414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004418:	b08c      	sub	sp, #48	@ 0x30
 800441a:	af00      	add	r7, sp, #0
 800441c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8004420:	4603      	mov	r3, r0
 8004422:	77fb      	strb	r3, [r7, #31]
 8004424:	460b      	mov	r3, r1
 8004426:	77bb      	strb	r3, [r7, #30]
	uint8_t ret = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int64_t vdac = 0;
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	int32_t dac = 0x0;
 800443a:	2300      	movs	r3, #0
 800443c:	623b      	str	r3, [r7, #32]
	if (dir == TEC_COOL)
 800443e:	7fbb      	ldrb	r3, [r7, #30]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d124      	bne.n	800448e <lt8722_set_output_voltage_channel+0x7a>
		vdac = LT8722_DAC_OFFSET - value / 16;
 8004444:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	2900      	cmp	r1, #0
 800444e:	da07      	bge.n	8004460 <lt8722_set_output_voltage_channel+0x4c>
 8004450:	f110 030f 	adds.w	r3, r0, #15
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	f141 0300 	adc.w	r3, r1, #0
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	0902      	lsrs	r2, r0, #4
 800446a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800446e:	110b      	asrs	r3, r1, #4
 8004470:	2100      	movs	r1, #0
 8004472:	4250      	negs	r0, r2
 8004474:	6038      	str	r0, [r7, #0]
 8004476:	eb61 0303 	sbc.w	r3, r1, r3
 800447a:	607b      	str	r3, [r7, #4]
 800447c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004480:	491c      	ldr	r1, [pc, #112]	@ (80044f4 <lt8722_set_output_voltage_channel+0xe0>)
 8004482:	eb12 0801 	adds.w	r8, r2, r1
 8004486:	f143 0900 	adc.w	r9, r3, #0
 800448a:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
	if (dir == TEC_HEAT)
 800448e:	7fbb      	ldrb	r3, [r7, #30]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d119      	bne.n	80044c8 <lt8722_set_output_voltage_channel+0xb4>
		vdac = LT8722_DAC_OFFSET + value / 16;
 8004494:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	da05      	bge.n	80044a8 <lt8722_set_output_voltage_channel+0x94>
 800449c:	f112 0a0f 	adds.w	sl, r2, #15
 80044a0:	f143 0b00 	adc.w	fp, r3, #0
 80044a4:	4652      	mov	r2, sl
 80044a6:	465b      	mov	r3, fp
 80044a8:	f04f 0000 	mov.w	r0, #0
 80044ac:	f04f 0100 	mov.w	r1, #0
 80044b0:	0910      	lsrs	r0, r2, #4
 80044b2:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 80044b6:	1119      	asrs	r1, r3, #4
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	490d      	ldr	r1, [pc, #52]	@ (80044f4 <lt8722_set_output_voltage_channel+0xe0>)
 80044be:	1854      	adds	r4, r2, r1
 80044c0:	f143 0500 	adc.w	r5, r3, #0
 80044c4:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
	dac = lt8722_voltage_to_dac(vdac);
 80044c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80044cc:	f7ff fcdc 	bl	8003e88 <lt8722_voltage_to_dac>
 80044d0:	6238      	str	r0, [r7, #32]
	ret = lt8722_set_dac(channel, dac);
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	7ffb      	ldrb	r3, [r7, #31]
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fe9d 	bl	8004218 <lt8722_set_dac>
 80044de:	4603      	mov	r3, r0
 80044e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	return ret;
 80044e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3730      	adds	r7, #48	@ 0x30
 80044ec:	46bd      	mov	sp, r7
 80044ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f2:	bf00      	nop
 80044f4:	4a817c80 	.word	0x4a817c80

080044f8 <Calculate_CRC8>:

/* Private support function definition ------------------------------------*/
uint8_t Calculate_CRC8(uint8_t *data, uint8_t length)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00;
 8004504:	2300      	movs	r3, #0
 8004506:	73fb      	strb	r3, [r7, #15]
    uint8_t poly = 0x07;
 8004508:	2307      	movs	r3, #7
 800450a:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < length; i++)
 800450c:	2300      	movs	r3, #0
 800450e:	73bb      	strb	r3, [r7, #14]
 8004510:	e023      	b.n	800455a <Calculate_CRC8+0x62>
    {
        crc ^= data[i];
 8004512:	7bbb      	ldrb	r3, [r7, #14]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	4413      	add	r3, r2
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	4053      	eors	r3, r2
 800451e:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 8004520:	2300      	movs	r3, #0
 8004522:	737b      	strb	r3, [r7, #13]
 8004524:	e013      	b.n	800454e <Calculate_CRC8+0x56>
        {
            if (crc & 0x80)
 8004526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800452a:	2b00      	cmp	r3, #0
 800452c:	da09      	bge.n	8004542 <Calculate_CRC8+0x4a>
                crc = (crc << 1) ^ poly;
 800452e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	b25a      	sxtb	r2, r3
 8004536:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800453a:	4053      	eors	r3, r2
 800453c:	b25b      	sxtb	r3, r3
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	e002      	b.n	8004548 <Calculate_CRC8+0x50>
            else
                crc <<= 1;
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 8004548:	7b7b      	ldrb	r3, [r7, #13]
 800454a:	3301      	adds	r3, #1
 800454c:	737b      	strb	r3, [r7, #13]
 800454e:	7b7b      	ldrb	r3, [r7, #13]
 8004550:	2b07      	cmp	r3, #7
 8004552:	d9e8      	bls.n	8004526 <Calculate_CRC8+0x2e>
    for (uint8_t i = 0; i < length; i++)
 8004554:	7bbb      	ldrb	r3, [r7, #14]
 8004556:	3301      	adds	r3, #1
 8004558:	73bb      	strb	r3, [r7, #14]
 800455a:	7bba      	ldrb	r2, [r7, #14]
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	429a      	cmp	r2, r3
 8004560:	d3d7      	bcc.n	8004512 <Calculate_CRC8+0x1a>
        }
    }
    return crc;
 8004562:	7bfb      	ldrb	r3, [r7, #15]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <put_unaligned_be32>:

void put_unaligned_be32(uint32_t val, uint8_t *buf)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
	buf[3] = val & 0xFF;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	3303      	adds	r3, #3
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]
	buf[2] = (val >> 8) & 0xFF;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	0a1a      	lsrs	r2, r3, #8
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	3302      	adds	r3, #2
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	701a      	strb	r2, [r3, #0]
	buf[1] = (val >> 16) & 0xFF;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	0c1a      	lsrs	r2, r3, #16
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	3301      	adds	r3, #1
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]
	buf[0] = val >> 24;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	0e1b      	lsrs	r3, r3, #24
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	701a      	strb	r2, [r3, #0]
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <get_unaligned_be32>:
{
	buf[1] = val & 0xFF;
	buf[0] = val >> 8;
}
uint32_t get_unaligned_be32(uint8_t *buf)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
	return buf[3] | ((uint16_t)buf[2] << 8) | ((uint32_t)buf[1] << 16) | ((uint32_t)buf[0] << 24);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3303      	adds	r3, #3
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3302      	adds	r3, #2
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	4313      	orrs	r3, r2
 80045cc:	461a      	mov	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3301      	adds	r3, #1
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	041b      	lsls	r3, r3, #16
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	061b      	lsls	r3, r3, #24
 80045de:	4313      	orrs	r3, r2
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <get_unaligned_be16>:
uint32_t get_unaligned_be16(uint8_t *buf)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
	return buf[1] | ((uint16_t)buf[0] << 8);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3301      	adds	r3, #1
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	021b      	lsls	r3, r3, #8
 8004602:	4313      	orrs	r3, r2
}
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <find_first_set_bit>:
uint32_t find_first_set_bit(uint32_t word)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	uint32_t first_set_bit = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]
	while (word) {
 800461c:	e00c      	b.n	8004638 <find_first_set_bit+0x28>
		if (word & 0x1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <find_first_set_bit+0x1c>
			return first_set_bit;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	e009      	b.n	8004640 <find_first_set_bit+0x30>
		word >>= 1;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	085b      	lsrs	r3, r3, #1
 8004630:	607b      	str	r3, [r7, #4]
		first_set_bit ++;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3301      	adds	r3, #1
 8004636:	60fb      	str	r3, [r7, #12]
	while (word) {
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1ef      	bne.n	800461e <find_first_set_bit+0xe>
	}
	return 32;
 800463e:	2320      	movs	r3, #32
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <field_prep>:
uint32_t field_prep(uint32_t mask, uint32_t val)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
	return (val << find_first_set_bit(mask)) & mask;
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff ffda 	bl	8004610 <find_first_set_bit>
 800465c:	4602      	mov	r2, r0
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	fa03 f202 	lsl.w	r2, r3, r2
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4013      	ands	r3, r2
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f043 0201 	orr.w	r2, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	609a      	str	r2, [r3, #8]
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	609a      	str	r2, [r3, #8]
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
	...

080046d8 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80046e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004714 <LL_DMA_EnableStream+0x3c>)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	4413      	add	r3, r2
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4413      	add	r3, r2
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4908      	ldr	r1, [pc, #32]	@ (8004714 <LL_DMA_EnableStream+0x3c>)
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	440a      	add	r2, r1
 80046f8:	7812      	ldrb	r2, [r2, #0]
 80046fa:	4611      	mov	r1, r2
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	440a      	add	r2, r1
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	6013      	str	r3, [r2, #0]
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	0800c8c0 	.word	0x0800c8c0

08004718 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8004724:	4a0d      	ldr	r2, [pc, #52]	@ (800475c <LL_DMA_SetDataTransferDirection+0x44>)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4413      	add	r3, r2
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004738:	4908      	ldr	r1, [pc, #32]	@ (800475c <LL_DMA_SetDataTransferDirection+0x44>)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	440b      	add	r3, r1
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	4619      	mov	r1, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	440b      	add	r3, r1
 8004746:	4619      	mov	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]
}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	0800c8c0 	.word	0x0800c8c0

08004760 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800476c:	4a0d      	ldr	r2, [pc, #52]	@ (80047a4 <LL_DMA_SetMode+0x44>)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4413      	add	r3, r2
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4413      	add	r3, r2
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8004780:	4908      	ldr	r1, [pc, #32]	@ (80047a4 <LL_DMA_SetMode+0x44>)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	440b      	add	r3, r1
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	4619      	mov	r1, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	440b      	add	r3, r1
 800478e:	4619      	mov	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4313      	orrs	r3, r2
 8004794:	600b      	str	r3, [r1, #0]
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	0800c8c0 	.word	0x0800c8c0

080047a8 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80047b4:	4a0d      	ldr	r2, [pc, #52]	@ (80047ec <LL_DMA_SetPeriphIncMode+0x44>)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4413      	add	r3, r2
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80047c8:	4908      	ldr	r1, [pc, #32]	@ (80047ec <LL_DMA_SetPeriphIncMode+0x44>)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	440b      	add	r3, r1
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	4619      	mov	r1, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	440b      	add	r3, r1
 80047d6:	4619      	mov	r1, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]
}
 80047de:	bf00      	nop
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	0800c8c0 	.word	0x0800c8c0

080047f0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80047fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004834 <LL_DMA_SetMemoryIncMode+0x44>)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4413      	add	r3, r2
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004810:	4908      	ldr	r1, [pc, #32]	@ (8004834 <LL_DMA_SetMemoryIncMode+0x44>)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	440b      	add	r3, r1
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	4619      	mov	r1, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	440b      	add	r3, r1
 800481e:	4619      	mov	r1, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4313      	orrs	r3, r2
 8004824:	600b      	str	r3, [r1, #0]
}
 8004826:	bf00      	nop
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	0800c8c0 	.word	0x0800c8c0

08004838 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8004844:	4a0d      	ldr	r2, [pc, #52]	@ (800487c <LL_DMA_SetPeriphSize+0x44>)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4413      	add	r3, r2
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4413      	add	r3, r2
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004858:	4908      	ldr	r1, [pc, #32]	@ (800487c <LL_DMA_SetPeriphSize+0x44>)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	440b      	add	r3, r1
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	4619      	mov	r1, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	440b      	add	r3, r1
 8004866:	4619      	mov	r1, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	0800c8c0 	.word	0x0800c8c0

08004880 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800488c:	4a0d      	ldr	r2, [pc, #52]	@ (80048c4 <LL_DMA_SetMemorySize+0x44>)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4413      	add	r3, r2
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4413      	add	r3, r2
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80048a0:	4908      	ldr	r1, [pc, #32]	@ (80048c4 <LL_DMA_SetMemorySize+0x44>)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	440b      	add	r3, r1
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	4619      	mov	r1, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	440b      	add	r3, r1
 80048ae:	4619      	mov	r1, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]
}
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	0800c8c0 	.word	0x0800c8c0

080048c8 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80048d4:	4a0d      	ldr	r2, [pc, #52]	@ (800490c <LL_DMA_SetDataLength+0x44>)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	4413      	add	r3, r2
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4413      	add	r3, r2
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	041b      	lsls	r3, r3, #16
 80048e8:	4908      	ldr	r1, [pc, #32]	@ (800490c <LL_DMA_SetDataLength+0x44>)
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	440a      	add	r2, r1
 80048ee:	7812      	ldrb	r2, [r2, #0]
 80048f0:	4611      	mov	r1, r2
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	440a      	add	r2, r1
 80048f6:	4611      	mov	r1, r2
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	604b      	str	r3, [r1, #4]
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	0800c8c0 	.word	0x0800c8c0

08004910 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800491c:	4a0d      	ldr	r2, [pc, #52]	@ (8004954 <LL_DMA_SetChannelSelection+0x44>)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	4413      	add	r3, r2
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004930:	4908      	ldr	r1, [pc, #32]	@ (8004954 <LL_DMA_SetChannelSelection+0x44>)
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	440b      	add	r3, r1
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	4619      	mov	r1, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	440b      	add	r3, r1
 800493e:	4619      	mov	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4313      	orrs	r3, r2
 8004944:	600b      	str	r3, [r1, #0]
}
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	0800c8c0 	.word	0x0800c8c0

08004958 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8004964:	4a07      	ldr	r2, [pc, #28]	@ (8004984 <LL_DMA_SetMemoryAddress+0x2c>)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4413      	add	r3, r2
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4413      	add	r3, r2
 8004972:	461a      	mov	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	60d3      	str	r3, [r2, #12]
}
 8004978:	bf00      	nop
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	0800c8c0 	.word	0x0800c8c0

08004988 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8004994:	4a07      	ldr	r2, [pc, #28]	@ (80049b4 <LL_DMA_SetPeriphAddress+0x2c>)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	4413      	add	r3, r2
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4413      	add	r3, r2
 80049a2:	461a      	mov	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6093      	str	r3, [r2, #8]
}
 80049a8:	bf00      	nop
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	0800c8c0 	.word	0x0800c8c0

080049b8 <NTC_DMA_ADC_Init>:
  3143, 3307, 3521, 3819, 4292, 5279, 6266
};


void NTC_DMA_ADC_Init(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
    // Cấu hình DMA
    LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 80049bc:	2200      	movs	r2, #0
 80049be:	2100      	movs	r1, #0
 80049c0:	4823      	ldr	r0, [pc, #140]	@ (8004a50 <NTC_DMA_ADC_Init+0x98>)
 80049c2:	f7ff ffa5 	bl	8004910 <LL_DMA_SetChannelSelection>
    LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80049c6:	2200      	movs	r2, #0
 80049c8:	2100      	movs	r1, #0
 80049ca:	4821      	ldr	r0, [pc, #132]	@ (8004a50 <NTC_DMA_ADC_Init+0x98>)
 80049cc:	f7ff fea4 	bl	8004718 <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 80049d0:	2200      	movs	r2, #0
 80049d2:	2100      	movs	r1, #0
 80049d4:	481e      	ldr	r0, [pc, #120]	@ (8004a50 <NTC_DMA_ADC_Init+0x98>)
 80049d6:	f7ff fee7 	bl	80047a8 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 80049da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049de:	2100      	movs	r1, #0
 80049e0:	481b      	ldr	r0, [pc, #108]	@ (8004a50 <NTC_DMA_ADC_Init+0x98>)
 80049e2:	f7ff ff05 	bl	80047f0 <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 80049e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049ea:	2100      	movs	r1, #0
 80049ec:	4818      	ldr	r0, [pc, #96]	@ (8004a50 <NTC_DMA_ADC_Init+0x98>)
 80049ee:	f7ff ff23 	bl	8004838 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 80049f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80049f6:	2100      	movs	r1, #0
 80049f8:	4815      	ldr	r0, [pc, #84]	@ (8004a50 <NTC_DMA_ADC_Init+0x98>)
 80049fa:	f7ff ff41 	bl	8004880 <LL_DMA_SetMemorySize>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_0, 8); // 8 kênh
 80049fe:	2208      	movs	r2, #8
 8004a00:	2100      	movs	r1, #0
 8004a02:	4813      	ldr	r0, [pc, #76]	@ (8004a50 <NTC_DMA_ADC_Init+0x98>)
 8004a04:	f7ff ff60 	bl	80048c8 <LL_DMA_SetDataLength>

    // Địa chỉ của ADC data register
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_0, (uint32_t)&ADC1->DR);
 8004a08:	4a12      	ldr	r2, [pc, #72]	@ (8004a54 <NTC_DMA_ADC_Init+0x9c>)
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4810      	ldr	r0, [pc, #64]	@ (8004a50 <NTC_DMA_ADC_Init+0x98>)
 8004a0e:	f7ff ffbb 	bl	8004988 <LL_DMA_SetPeriphAddress>

    // Địa chỉ bộ nhớ DMA
    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_0, (uint32_t)NTC_ADC_value);
 8004a12:	4b11      	ldr	r3, [pc, #68]	@ (8004a58 <NTC_DMA_ADC_Init+0xa0>)
 8004a14:	461a      	mov	r2, r3
 8004a16:	2100      	movs	r1, #0
 8004a18:	480d      	ldr	r0, [pc, #52]	@ (8004a50 <NTC_DMA_ADC_Init+0x98>)
 8004a1a:	f7ff ff9d 	bl	8004958 <LL_DMA_SetMemoryAddress>

    // Cấu hình DMA ở chế độ vòng lặp (Circular Mode)
    LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8004a1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a22:	2100      	movs	r1, #0
 8004a24:	480a      	ldr	r0, [pc, #40]	@ (8004a50 <NTC_DMA_ADC_Init+0x98>)
 8004a26:	f7ff fe9b 	bl	8004760 <LL_DMA_SetMode>

    // Bật DMA stream
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	4808      	ldr	r0, [pc, #32]	@ (8004a50 <NTC_DMA_ADC_Init+0x98>)
 8004a2e:	f7ff fe53 	bl	80046d8 <LL_DMA_EnableStream>

    // Bật ADC
    LL_ADC_Enable(ADC1);
 8004a32:	480a      	ldr	r0, [pc, #40]	@ (8004a5c <NTC_DMA_ADC_Init+0xa4>)
 8004a34:	f7ff fe1c 	bl	8004670 <LL_ADC_Enable>
    while (!LL_ADC_IsEnabled(ADC1));
 8004a38:	bf00      	nop
 8004a3a:	4808      	ldr	r0, [pc, #32]	@ (8004a5c <NTC_DMA_ADC_Init+0xa4>)
 8004a3c:	f7ff fe28 	bl	8004690 <LL_ADC_IsEnabled>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f9      	beq.n	8004a3a <NTC_DMA_ADC_Init+0x82>

    // Bắt đầu chuyển đổi ADC
    LL_ADC_REG_StartConversionSWStart(ADC1);
 8004a46:	4805      	ldr	r0, [pc, #20]	@ (8004a5c <NTC_DMA_ADC_Init+0xa4>)
 8004a48:	f7ff fe35 	bl	80046b6 <LL_ADC_REG_StartConversionSWStart>
}
 8004a4c:	bf00      	nop
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40026400 	.word	0x40026400
 8004a54:	4001204c 	.word	0x4001204c
 8004a58:	200034a0 	.word	0x200034a0
 8004a5c:	40012000 	.word	0x40012000

08004a60 <NTC_get_temperature>:

void NTC_get_temperature(int16_t* temp)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 8; i++)
 8004a68:	2300      	movs	r3, #0
 8004a6a:	73fb      	strb	r3, [r7, #15]
 8004a6c:	e028      	b.n	8004ac0 <NTC_get_temperature+0x60>
	{
		temp[i] = NTC_table[NTC_ADC_value[i]];
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	4a18      	ldr	r2, [pc, #96]	@ (8004ad4 <NTC_get_temperature+0x74>)
 8004a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a76:	4619      	mov	r1, r3
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	4413      	add	r3, r2
 8004a80:	4a15      	ldr	r2, [pc, #84]	@ (8004ad8 <NTC_get_temperature+0x78>)
 8004a82:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8004a86:	801a      	strh	r2, [r3, #0]
		if (temp[i] < -500 || temp[i] > 2000)  temp[i] = 0x7FFF;
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a94:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 8004a98:	db08      	blt.n	8004aac <NTC_get_temperature+0x4c>
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aa6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004aaa:	dd06      	ble.n	8004aba <NTC_get_temperature+0x5a>
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8004ab8:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++)
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	3301      	adds	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	2b07      	cmp	r3, #7
 8004ac4:	d9d3      	bls.n	8004a6e <NTC_get_temperature+0xe>
	}
};
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	200034a0 	.word	0x200034a0
 8004ad8:	200002a8 	.word	0x200002a8

08004adc <LL_GPIO_SetOutputPin>:
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	619a      	str	r2, [r3, #24]
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <LL_GPIO_ResetOutputPin>:
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	041a      	lsls	r2, r3, #16
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	619a      	str	r2, [r3, #24]
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <LED_Status_Init>:
		480									// taskTick
	},
};

void LED_Status_Init(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
    s_led_display_status.led_green = 0;
 8004b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8004b48 <LED_Status_Init+0x30>)
 8004b1e:	7813      	ldrb	r3, [r2, #0]
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	7013      	strb	r3, [r2, #0]
    s_led_display_status.led_blue = 0;
 8004b26:	4a08      	ldr	r2, [pc, #32]	@ (8004b48 <LED_Status_Init+0x30>)
 8004b28:	7813      	ldrb	r3, [r2, #0]
 8004b2a:	f023 0302 	bic.w	r3, r3, #2
 8004b2e:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = EXP_POWERUP;
 8004b30:	4a05      	ldr	r2, [pc, #20]	@ (8004b48 <LED_Status_Init+0x30>)
 8004b32:	7813      	ldrb	r3, [r2, #0]
 8004b34:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8004b38:	7013      	strb	r3, [r2, #0]
	status_led_led_green_on();
 8004b3a:	f000 f8d5 	bl	8004ce8 <status_led_led_green_on>
	status_led_led_blue_on();
 8004b3e:	f000 f8eb 	bl	8004d18 <status_led_led_blue_on>



}
 8004b42:	bf00      	nop
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	200034c0 	.word	0x200034c0

08004b4c <status_led_update>:
#include "board.h"
#include "main.h"
#include "bmp390.h"

void	status_led_update(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
//	bmp390_temp_press_update();
//	UART_Printf(&EXP_UART, "%d %d \n", bmp390_get_press(), bmp390_get_temperature());



	switch (s_led_display_status.state) {
 8004b50:	4b0c      	ldr	r3, [pc, #48]	@ (8004b84 <status_led_update+0x38>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d00c      	beq.n	8004b78 <status_led_update+0x2c>
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	dc0d      	bgt.n	8004b7e <status_led_update+0x32>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <status_led_update+0x20>
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d003      	beq.n	8004b72 <status_led_update+0x26>
		break;
	case EXP_ERROR:
		status_led_error();
		break;
	default:
		break;
 8004b6a:	e008      	b.n	8004b7e <status_led_update+0x32>
		status_led_powerup();
 8004b6c:	f000 f80c 	bl	8004b88 <status_led_powerup>
		break;
 8004b70:	e006      	b.n	8004b80 <status_led_update+0x34>
		status_led_normal();
 8004b72:	f000 f851 	bl	8004c18 <status_led_normal>
		break;
 8004b76:	e003      	b.n	8004b80 <status_led_update+0x34>
		status_led_error();
 8004b78:	f000 f870 	bl	8004c5c <status_led_error>
		break;
 8004b7c:	e000      	b.n	8004b80 <status_led_update+0x34>
		break;
 8004b7e:	bf00      	nop
	}
}
 8004b80:	bf00      	nop
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	200034c0 	.word	0x200034c0

08004b88 <status_led_powerup>:

static void status_led_powerup(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 8004b8c:	4b21      	ldr	r3, [pc, #132]	@ (8004c14 <status_led_powerup+0x8c>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d020      	beq.n	8004bdc <status_led_powerup+0x54>
 8004b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004c14 <status_led_powerup+0x8c>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d019      	beq.n	8004bdc <status_led_powerup+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f005 fcaf 	bl	800a50c <SCH_TIM_HasCompleted>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d02d      	beq.n	8004c10 <status_led_powerup+0x88>
			s_led_display_status.led_green = 0;
 8004bb4:	4a17      	ldr	r2, [pc, #92]	@ (8004c14 <status_led_powerup+0x8c>)
 8004bb6:	7813      	ldrb	r3, [r2, #0]
 8004bb8:	f023 0301 	bic.w	r3, r3, #1
 8004bbc:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 8004bbe:	4a15      	ldr	r2, [pc, #84]	@ (8004c14 <status_led_powerup+0x8c>)
 8004bc0:	7813      	ldrb	r3, [r2, #0]
 8004bc2:	f023 0302 	bic.w	r3, r3, #2
 8004bc6:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 8004bc8:	f000 f89a 	bl	8004d00 <status_led_led_green_off>
			status_led_led_blue_off();
 8004bcc:	f000 f8b0 	bl	8004d30 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 8004bd0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	f005 fc83 	bl	800a4e0 <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8004bda:	e019      	b.n	8004c10 <status_led_powerup+0x88>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f005 fc95 	bl	800a50c <SCH_TIM_HasCompleted>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d013      	beq.n	8004c10 <status_led_powerup+0x88>
			s_led_display_status.led_green = 1;
 8004be8:	4a0a      	ldr	r2, [pc, #40]	@ (8004c14 <status_led_powerup+0x8c>)
 8004bea:	7813      	ldrb	r3, [r2, #0]
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 8004bf2:	4a08      	ldr	r2, [pc, #32]	@ (8004c14 <status_led_powerup+0x8c>)
 8004bf4:	7813      	ldrb	r3, [r2, #0]
 8004bf6:	f043 0302 	orr.w	r3, r3, #2
 8004bfa:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 8004bfc:	f000 f874 	bl	8004ce8 <status_led_led_green_on>
			status_led_led_blue_on();
 8004c00:	f000 f88a 	bl	8004d18 <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 8004c04:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004c08:	2000      	movs	r0, #0
 8004c0a:	f005 fc69 	bl	800a4e0 <SCH_TIM_Start>
		}
	}
}
 8004c0e:	e7ff      	b.n	8004c10 <status_led_powerup+0x88>
 8004c10:	bf00      	nop
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	200034c0 	.word	0x200034c0

08004c18 <status_led_normal>:

static void status_led_normal(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
	// viết tạm
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8004c1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004c20:	480d      	ldr	r0, [pc, #52]	@ (8004c58 <status_led_normal+0x40>)
 8004c22:	f7ff ff69 	bl	8004af8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8004c26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004c2a:	480b      	ldr	r0, [pc, #44]	@ (8004c58 <status_led_normal+0x40>)
 8004c2c:	f7ff ff56 	bl	8004adc <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 8004c30:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004c34:	f005 fbf4 	bl	800a420 <LL_mDelay>
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8004c38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004c3c:	4806      	ldr	r0, [pc, #24]	@ (8004c58 <status_led_normal+0x40>)
 8004c3e:	f7ff ff5b 	bl	8004af8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8004c42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004c46:	4804      	ldr	r0, [pc, #16]	@ (8004c58 <status_led_normal+0x40>)
 8004c48:	f7ff ff48 	bl	8004adc <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 8004c4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004c50:	f005 fbe6 	bl	800a420 <LL_mDelay>
}
 8004c54:	bf00      	nop
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40021000 	.word	0x40021000

08004c5c <status_led_error>:

static void status_led_error(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 8004c60:	4b20      	ldr	r3, [pc, #128]	@ (8004ce4 <status_led_error+0x88>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01f      	beq.n	8004cae <status_led_error+0x52>
 8004c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce4 <status_led_error+0x88>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d018      	beq.n	8004cae <status_led_error+0x52>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f005 fc45 	bl	800a50c <SCH_TIM_HasCompleted>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d02b      	beq.n	8004ce0 <status_led_error+0x84>
			s_led_display_status.led_green = 0;
 8004c88:	4a16      	ldr	r2, [pc, #88]	@ (8004ce4 <status_led_error+0x88>)
 8004c8a:	7813      	ldrb	r3, [r2, #0]
 8004c8c:	f023 0301 	bic.w	r3, r3, #1
 8004c90:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 8004c92:	4a14      	ldr	r2, [pc, #80]	@ (8004ce4 <status_led_error+0x88>)
 8004c94:	7813      	ldrb	r3, [r2, #0]
 8004c96:	f023 0302 	bic.w	r3, r3, #2
 8004c9a:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 8004c9c:	f000 f830 	bl	8004d00 <status_led_led_green_off>
			status_led_led_blue_off();
 8004ca0:	f000 f846 	bl	8004d30 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 8004ca4:	2132      	movs	r1, #50	@ 0x32
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f005 fc1a 	bl	800a4e0 <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8004cac:	e018      	b.n	8004ce0 <status_led_error+0x84>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f005 fc2c 	bl	800a50c <SCH_TIM_HasCompleted>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d012      	beq.n	8004ce0 <status_led_error+0x84>
			s_led_display_status.led_green = 1;
 8004cba:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce4 <status_led_error+0x88>)
 8004cbc:	7813      	ldrb	r3, [r2, #0]
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 8004cc4:	4a07      	ldr	r2, [pc, #28]	@ (8004ce4 <status_led_error+0x88>)
 8004cc6:	7813      	ldrb	r3, [r2, #0]
 8004cc8:	f043 0302 	orr.w	r3, r3, #2
 8004ccc:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 8004cce:	f000 f80b 	bl	8004ce8 <status_led_led_green_on>
			status_led_led_blue_on();
 8004cd2:	f000 f821 	bl	8004d18 <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 8004cd6:	2132      	movs	r1, #50	@ 0x32
 8004cd8:	2000      	movs	r0, #0
 8004cda:	f005 fc01 	bl	800a4e0 <SCH_TIM_Start>
		}
	}
}
 8004cde:	e7ff      	b.n	8004ce0 <status_led_error+0x84>
 8004ce0:	bf00      	nop
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	200034c0 	.word	0x200034c0

08004ce8 <status_led_led_green_on>:

static void status_led_led_green_on(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8004cec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004cf0:	4802      	ldr	r0, [pc, #8]	@ (8004cfc <status_led_led_green_on+0x14>)
 8004cf2:	f7ff fef3 	bl	8004adc <LL_GPIO_SetOutputPin>
}
 8004cf6:	bf00      	nop
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40021000 	.word	0x40021000

08004d00 <status_led_led_green_off>:
static void status_led_led_green_off(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8004d04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d08:	4802      	ldr	r0, [pc, #8]	@ (8004d14 <status_led_led_green_off+0x14>)
 8004d0a:	f7ff fef5 	bl	8004af8 <LL_GPIO_ResetOutputPin>
}
 8004d0e:	bf00      	nop
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40021000 	.word	0x40021000

08004d18 <status_led_led_blue_on>:
static void status_led_led_blue_on(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8004d1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d20:	4802      	ldr	r0, [pc, #8]	@ (8004d2c <status_led_led_blue_on+0x14>)
 8004d22:	f7ff fedb 	bl	8004adc <LL_GPIO_SetOutputPin>
}
 8004d26:	bf00      	nop
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40021000 	.word	0x40021000

08004d30 <status_led_led_blue_off>:
static void status_led_led_blue_off(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8004d34:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d38:	4802      	ldr	r0, [pc, #8]	@ (8004d44 <status_led_led_blue_off+0x14>)
 8004d3a:	f7ff fedd 	bl	8004af8 <LL_GPIO_ResetOutputPin>
}
 8004d3e:	bf00      	nop
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40021000 	.word	0x40021000

08004d48 <LED_Status_CreateTask>:

void	LED_Status_CreateTask(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 8004d4c:	4902      	ldr	r1, [pc, #8]	@ (8004d58 <LED_Status_CreateTask+0x10>)
 8004d4e:	4803      	ldr	r0, [pc, #12]	@ (8004d5c <LED_Status_CreateTask+0x14>)
 8004d50:	f005 fbf2 	bl	800a538 <SCH_TASK_CreateTask>
}
 8004d54:	bf00      	nop
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	200022ac 	.word	0x200022ac
 8004d5c:	200022a8 	.word	0x200022a8

08004d60 <__NVIC_GetPriorityGrouping>:
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d64:	4b04      	ldr	r3, [pc, #16]	@ (8004d78 <__NVIC_GetPriorityGrouping+0x18>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	0a1b      	lsrs	r3, r3, #8
 8004d6a:	f003 0307 	and.w	r3, r3, #7
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	e000ed00 	.word	0xe000ed00

08004d7c <__NVIC_EnableIRQ>:
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	db0b      	blt.n	8004da6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	f003 021f 	and.w	r2, r3, #31
 8004d94:	4907      	ldr	r1, [pc, #28]	@ (8004db4 <__NVIC_EnableIRQ+0x38>)
 8004d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	e000e100 	.word	0xe000e100

08004db8 <__NVIC_SetPriority>:
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	6039      	str	r1, [r7, #0]
 8004dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	db0a      	blt.n	8004de2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	490c      	ldr	r1, [pc, #48]	@ (8004e04 <__NVIC_SetPriority+0x4c>)
 8004dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd6:	0112      	lsls	r2, r2, #4
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	440b      	add	r3, r1
 8004ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004de0:	e00a      	b.n	8004df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	4908      	ldr	r1, [pc, #32]	@ (8004e08 <__NVIC_SetPriority+0x50>)
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	3b04      	subs	r3, #4
 8004df0:	0112      	lsls	r2, r2, #4
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	440b      	add	r3, r1
 8004df6:	761a      	strb	r2, [r3, #24]
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	e000e100 	.word	0xe000e100
 8004e08:	e000ed00 	.word	0xe000ed00

08004e0c <NVIC_EncodePriority>:
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b089      	sub	sp, #36	@ 0x24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f1c3 0307 	rsb	r3, r3, #7
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	bf28      	it	cs
 8004e2a:	2304      	movcs	r3, #4
 8004e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	3304      	adds	r3, #4
 8004e32:	2b06      	cmp	r3, #6
 8004e34:	d902      	bls.n	8004e3c <NVIC_EncodePriority+0x30>
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	3b03      	subs	r3, #3
 8004e3a:	e000      	b.n	8004e3e <NVIC_EncodePriority+0x32>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e40:	f04f 32ff 	mov.w	r2, #4294967295
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43da      	mvns	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	401a      	ands	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e54:	f04f 31ff 	mov.w	r1, #4294967295
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5e:	43d9      	mvns	r1, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e64:	4313      	orrs	r3, r2
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3724      	adds	r7, #36	@ 0x24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <LL_ADC_REG_SetSequencerRanks>:
{
 8004e72:	b480      	push	{r7}
 8004e74:	b089      	sub	sp, #36	@ 0x24
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	332c      	adds	r3, #44	@ 0x2c
 8004e82:	4619      	mov	r1, r3
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e8a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004e8e:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	fa92 f2a2 	rbit	r2, r2
 8004e96:	613a      	str	r2, [r7, #16]
  return result;
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	2a00      	cmp	r2, #0
 8004ea0:	d101      	bne.n	8004ea6 <LL_ADC_REG_SetSequencerRanks+0x34>
    return 32U;
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	e003      	b.n	8004eae <LL_ADC_REG_SetSequencerRanks+0x3c>
  return __builtin_clz(value);
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	fab2 f282 	clz	r2, r2
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	40d3      	lsrs	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	211f      	movs	r1, #31
 8004ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	401a      	ands	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f003 011f 	and.w	r1, r3, #31
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eda:	431a      	orrs	r2, r3
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	601a      	str	r2, [r3, #0]
}
 8004ee0:	bf00      	nop
 8004ee2:	3724      	adds	r7, #36	@ 0x24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	609a      	str	r2, [r3, #8]
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <LL_ADC_SetChannelSamplingTime>:
{
 8004f12:	b480      	push	{r7}
 8004f14:	b08f      	sub	sp, #60	@ 0x3c
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	330c      	adds	r3, #12
 8004f22:	4619      	mov	r1, r3
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f2e:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	fa92 f2a2 	rbit	r2, r2
 8004f36:	613a      	str	r2, [r7, #16]
  return result;
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	2a00      	cmp	r2, #0
 8004f40:	d101      	bne.n	8004f46 <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 8004f42:	2220      	movs	r2, #32
 8004f44:	e003      	b.n	8004f4e <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	fab2 f282 	clz	r2, r2
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	40d3      	lsrs	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(*preg,
 8004f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8004f60:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8004f64:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f66:	6a39      	ldr	r1, [r7, #32]
 8004f68:	fa91 f1a1 	rbit	r1, r1
 8004f6c:	61f9      	str	r1, [r7, #28]
  return result;
 8004f6e:	69f9      	ldr	r1, [r7, #28]
 8004f70:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 8004f72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f74:	2900      	cmp	r1, #0
 8004f76:	d101      	bne.n	8004f7c <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 8004f78:	2120      	movs	r1, #32
 8004f7a:	e003      	b.n	8004f84 <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 8004f7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f7e:	fab1 f181 	clz	r1, r1
 8004f82:	b2c9      	uxtb	r1, r1
 8004f84:	40cb      	lsrs	r3, r1
 8004f86:	2107      	movs	r1, #7
 8004f88:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	401a      	ands	r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8004f96:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8004f9a:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f9e:	fa91 f1a1 	rbit	r1, r1
 8004fa2:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 8004fa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fa6:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 8004fa8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004faa:	2900      	cmp	r1, #0
 8004fac:	d101      	bne.n	8004fb2 <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 8004fae:	2120      	movs	r1, #32
 8004fb0:	e003      	b.n	8004fba <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 8004fb2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004fb4:	fab1 f181 	clz	r1, r1
 8004fb8:	b2c9      	uxtb	r1, r1
 8004fba:	40cb      	lsrs	r3, r1
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc6:	601a      	str	r2, [r3, #0]
}
 8004fc8:	bf00      	nop
 8004fca:	373c      	adds	r7, #60	@ 0x3c
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <LL_DMA_SetDataTransferDirection>:
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8004fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8005018 <LL_DMA_SetDataTransferDirection+0x44>)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ff4:	4908      	ldr	r1, [pc, #32]	@ (8005018 <LL_DMA_SetDataTransferDirection+0x44>)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	440b      	add	r3, r1
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	440b      	add	r3, r1
 8005002:	4619      	mov	r1, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4313      	orrs	r3, r2
 8005008:	600b      	str	r3, [r1, #0]
}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	0800c8c8 	.word	0x0800c8c8

0800501c <LL_DMA_SetMode>:
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8005028:	4a0d      	ldr	r2, [pc, #52]	@ (8005060 <LL_DMA_SetMode+0x44>)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4413      	add	r3, r2
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4413      	add	r3, r2
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 800503c:	4908      	ldr	r1, [pc, #32]	@ (8005060 <LL_DMA_SetMode+0x44>)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	440b      	add	r3, r1
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	4619      	mov	r1, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	440b      	add	r3, r1
 800504a:	4619      	mov	r1, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4313      	orrs	r3, r2
 8005050:	600b      	str	r3, [r1, #0]
}
 8005052:	bf00      	nop
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	0800c8c8 	.word	0x0800c8c8

08005064 <LL_DMA_SetPeriphIncMode>:
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8005070:	4a0d      	ldr	r2, [pc, #52]	@ (80050a8 <LL_DMA_SetPeriphIncMode+0x44>)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	4413      	add	r3, r2
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4413      	add	r3, r2
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005084:	4908      	ldr	r1, [pc, #32]	@ (80050a8 <LL_DMA_SetPeriphIncMode+0x44>)
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	440b      	add	r3, r1
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	4619      	mov	r1, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	440b      	add	r3, r1
 8005092:	4619      	mov	r1, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4313      	orrs	r3, r2
 8005098:	600b      	str	r3, [r1, #0]
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	0800c8c8 	.word	0x0800c8c8

080050ac <LL_DMA_SetMemoryIncMode>:
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80050b8:	4a0d      	ldr	r2, [pc, #52]	@ (80050f0 <LL_DMA_SetMemoryIncMode+0x44>)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4413      	add	r3, r2
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4413      	add	r3, r2
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80050cc:	4908      	ldr	r1, [pc, #32]	@ (80050f0 <LL_DMA_SetMemoryIncMode+0x44>)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	440b      	add	r3, r1
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	4619      	mov	r1, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	440b      	add	r3, r1
 80050da:	4619      	mov	r1, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4313      	orrs	r3, r2
 80050e0:	600b      	str	r3, [r1, #0]
}
 80050e2:	bf00      	nop
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	0800c8c8 	.word	0x0800c8c8

080050f4 <LL_DMA_SetPeriphSize>:
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8005100:	4a0d      	ldr	r2, [pc, #52]	@ (8005138 <LL_DMA_SetPeriphSize+0x44>)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	4413      	add	r3, r2
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005114:	4908      	ldr	r1, [pc, #32]	@ (8005138 <LL_DMA_SetPeriphSize+0x44>)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	440b      	add	r3, r1
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	4619      	mov	r1, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	440b      	add	r3, r1
 8005122:	4619      	mov	r1, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4313      	orrs	r3, r2
 8005128:	600b      	str	r3, [r1, #0]
}
 800512a:	bf00      	nop
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	0800c8c8 	.word	0x0800c8c8

0800513c <LL_DMA_SetMemorySize>:
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8005148:	4a0d      	ldr	r2, [pc, #52]	@ (8005180 <LL_DMA_SetMemorySize+0x44>)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	4413      	add	r3, r2
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 800515c:	4908      	ldr	r1, [pc, #32]	@ (8005180 <LL_DMA_SetMemorySize+0x44>)
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	440b      	add	r3, r1
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	4619      	mov	r1, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	440b      	add	r3, r1
 800516a:	4619      	mov	r1, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]
}
 8005172:	bf00      	nop
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	0800c8c8 	.word	0x0800c8c8

08005184 <LL_DMA_SetStreamPriorityLevel>:
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8005190:	4a0d      	ldr	r2, [pc, #52]	@ (80051c8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	4413      	add	r3, r2
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051a4:	4908      	ldr	r1, [pc, #32]	@ (80051c8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	440b      	add	r3, r1
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	4619      	mov	r1, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	440b      	add	r3, r1
 80051b2:	4619      	mov	r1, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	600b      	str	r3, [r1, #0]
}
 80051ba:	bf00      	nop
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	0800c8c8 	.word	0x0800c8c8

080051cc <LL_DMA_SetChannelSelection>:
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80051d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005210 <LL_DMA_SetChannelSelection+0x44>)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4413      	add	r3, r2
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	461a      	mov	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80051ec:	4908      	ldr	r1, [pc, #32]	@ (8005210 <LL_DMA_SetChannelSelection+0x44>)
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	440b      	add	r3, r1
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	4619      	mov	r1, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	440b      	add	r3, r1
 80051fa:	4619      	mov	r1, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4313      	orrs	r3, r2
 8005200:	600b      	str	r3, [r1, #0]
}
 8005202:	bf00      	nop
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	0800c8c8 	.word	0x0800c8c8

08005214 <LL_DMA_DisableFifoMode>:
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800521e:	4a0c      	ldr	r2, [pc, #48]	@ (8005250 <LL_DMA_DisableFifoMode+0x3c>)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	4413      	add	r3, r2
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4413      	add	r3, r2
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	4908      	ldr	r1, [pc, #32]	@ (8005250 <LL_DMA_DisableFifoMode+0x3c>)
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	440a      	add	r2, r1
 8005234:	7812      	ldrb	r2, [r2, #0]
 8005236:	4611      	mov	r1, r2
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	440a      	add	r2, r1
 800523c:	f023 0304 	bic.w	r3, r3, #4
 8005240:	6153      	str	r3, [r2, #20]
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	0800c8c8 	.word	0x0800c8c8

08005254 <LL_I2C_Enable>:
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f043 0201 	orr.w	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	601a      	str	r2, [r3, #0]
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <LL_I2C_EnableClockStretching>:
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	601a      	str	r2, [r3, #0]
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <LL_I2C_DisableGeneralCall>:
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	601a      	str	r2, [r3, #0]
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <LL_I2C_SetOwnAddress2>:
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	60da      	str	r2, [r3, #12]
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <LL_I2C_DisableOwnAddress2>:
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f023 0201 	bic.w	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	60da      	str	r2, [r3, #12]
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <LL_I2C_EnableIT_EVT>:
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	605a      	str	r2, [r3, #4]
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
	...

0800531c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005320:	4b05      	ldr	r3, [pc, #20]	@ (8005338 <LL_RCC_HSE_Enable+0x1c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a04      	ldr	r2, [pc, #16]	@ (8005338 <LL_RCC_HSE_Enable+0x1c>)
 8005326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800532a:	6013      	str	r3, [r2, #0]
}
 800532c:	bf00      	nop
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40023800 	.word	0x40023800

0800533c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8005340:	4b07      	ldr	r3, [pc, #28]	@ (8005360 <LL_RCC_HSE_IsReady+0x24>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005348:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800534c:	bf0c      	ite	eq
 800534e:	2301      	moveq	r3, #1
 8005350:	2300      	movne	r3, #0
 8005352:	b2db      	uxtb	r3, r3
}
 8005354:	4618      	mov	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40023800 	.word	0x40023800

08005364 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800536c:	4b06      	ldr	r3, [pc, #24]	@ (8005388 <LL_RCC_SetSysClkSource+0x24>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f023 0203 	bic.w	r2, r3, #3
 8005374:	4904      	ldr	r1, [pc, #16]	@ (8005388 <LL_RCC_SetSysClkSource+0x24>)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4313      	orrs	r3, r2
 800537a:	608b      	str	r3, [r1, #8]
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	40023800 	.word	0x40023800

0800538c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005390:	4b04      	ldr	r3, [pc, #16]	@ (80053a4 <LL_RCC_GetSysClkSource+0x18>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 030c 	and.w	r3, r3, #12
}
 8005398:	4618      	mov	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40023800 	.word	0x40023800

080053a8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80053b0:	4b06      	ldr	r3, [pc, #24]	@ (80053cc <LL_RCC_SetAHBPrescaler+0x24>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053b8:	4904      	ldr	r1, [pc, #16]	@ (80053cc <LL_RCC_SetAHBPrescaler+0x24>)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4313      	orrs	r3, r2
 80053be:	608b      	str	r3, [r1, #8]
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	40023800 	.word	0x40023800

080053d0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80053d8:	4b06      	ldr	r3, [pc, #24]	@ (80053f4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053e0:	4904      	ldr	r1, [pc, #16]	@ (80053f4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	608b      	str	r3, [r1, #8]
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	40023800 	.word	0x40023800

080053f8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005400:	4b06      	ldr	r3, [pc, #24]	@ (800541c <LL_RCC_SetAPB2Prescaler+0x24>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005408:	4904      	ldr	r1, [pc, #16]	@ (800541c <LL_RCC_SetAPB2Prescaler+0x24>)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4313      	orrs	r3, r2
 800540e:	608b      	str	r3, [r1, #8]
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	40023800 	.word	0x40023800

08005420 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005428:	4b08      	ldr	r3, [pc, #32]	@ (800544c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800542a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800542c:	4907      	ldr	r1, [pc, #28]	@ (800544c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4313      	orrs	r3, r2
 8005432:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005434:	4b05      	ldr	r3, [pc, #20]	@ (800544c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005436:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4013      	ands	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800543e:	68fb      	ldr	r3, [r7, #12]
}
 8005440:	bf00      	nop
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	40023800 	.word	0x40023800

08005450 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8005458:	4b08      	ldr	r3, [pc, #32]	@ (800547c <LL_APB1_GRP1_EnableClock+0x2c>)
 800545a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800545c:	4907      	ldr	r1, [pc, #28]	@ (800547c <LL_APB1_GRP1_EnableClock+0x2c>)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4313      	orrs	r3, r2
 8005462:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005464:	4b05      	ldr	r3, [pc, #20]	@ (800547c <LL_APB1_GRP1_EnableClock+0x2c>)
 8005466:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4013      	ands	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800546e:	68fb      	ldr	r3, [r7, #12]
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	40023800 	.word	0x40023800

08005480 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005488:	4b08      	ldr	r3, [pc, #32]	@ (80054ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800548a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800548c:	4907      	ldr	r1, [pc, #28]	@ (80054ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4313      	orrs	r3, r2
 8005492:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005494:	4b05      	ldr	r3, [pc, #20]	@ (80054ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8005496:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4013      	ands	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800549e:	68fb      	ldr	r3, [r7, #12]
}
 80054a0:	bf00      	nop
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	40023800 	.word	0x40023800

080054b0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80054b8:	4b06      	ldr	r3, [pc, #24]	@ (80054d4 <LL_FLASH_SetLatency+0x24>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f023 0207 	bic.w	r2, r3, #7
 80054c0:	4904      	ldr	r1, [pc, #16]	@ (80054d4 <LL_FLASH_SetLatency+0x24>)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	600b      	str	r3, [r1, #0]
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	40023c00 	.word	0x40023c00

080054d8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80054dc:	4b04      	ldr	r3, [pc, #16]	@ (80054f0 <LL_FLASH_GetLatency+0x18>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0307 	and.w	r3, r3, #7
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40023c00 	.word	0x40023c00

080054f4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80054fc:	4b06      	ldr	r3, [pc, #24]	@ (8005518 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005504:	4904      	ldr	r1, [pc, #16]	@ (8005518 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4313      	orrs	r3, r2
 800550a:	600b      	str	r3, [r1, #0]
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	40007000 	.word	0x40007000

0800551c <LL_SPI_Enable>:
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	601a      	str	r2, [r3, #0]
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <LL_SPI_SetStandard>:
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f023 0210 	bic.w	r2, r3, #16
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	605a      	str	r2, [r3, #4]
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <LL_TIM_DisableARRPreload>:
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	601a      	str	r2, [r3, #0]
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
	...

08005584 <LL_TIM_OC_DisableFast>:
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d01c      	beq.n	80055ce <LL_TIM_OC_DisableFast+0x4a>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b04      	cmp	r3, #4
 8005598:	d017      	beq.n	80055ca <LL_TIM_OC_DisableFast+0x46>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b10      	cmp	r3, #16
 800559e:	d012      	beq.n	80055c6 <LL_TIM_OC_DisableFast+0x42>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2b40      	cmp	r3, #64	@ 0x40
 80055a4:	d00d      	beq.n	80055c2 <LL_TIM_OC_DisableFast+0x3e>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ac:	d007      	beq.n	80055be <LL_TIM_OC_DisableFast+0x3a>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055b4:	d101      	bne.n	80055ba <LL_TIM_OC_DisableFast+0x36>
 80055b6:	2305      	movs	r3, #5
 80055b8:	e00a      	b.n	80055d0 <LL_TIM_OC_DisableFast+0x4c>
 80055ba:	2306      	movs	r3, #6
 80055bc:	e008      	b.n	80055d0 <LL_TIM_OC_DisableFast+0x4c>
 80055be:	2304      	movs	r3, #4
 80055c0:	e006      	b.n	80055d0 <LL_TIM_OC_DisableFast+0x4c>
 80055c2:	2303      	movs	r3, #3
 80055c4:	e004      	b.n	80055d0 <LL_TIM_OC_DisableFast+0x4c>
 80055c6:	2302      	movs	r3, #2
 80055c8:	e002      	b.n	80055d0 <LL_TIM_OC_DisableFast+0x4c>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <LL_TIM_OC_DisableFast+0x4c>
 80055ce:	2300      	movs	r3, #0
 80055d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3318      	adds	r3, #24
 80055d6:	4619      	mov	r1, r3
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
 80055da:	4a0b      	ldr	r2, [pc, #44]	@ (8005608 <LL_TIM_OC_DisableFast+0x84>)
 80055dc:	5cd3      	ldrb	r3, [r2, r3]
 80055de:	440b      	add	r3, r1
 80055e0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	4908      	ldr	r1, [pc, #32]	@ (800560c <LL_TIM_OC_DisableFast+0x88>)
 80055ea:	5ccb      	ldrb	r3, [r1, r3]
 80055ec:	4619      	mov	r1, r3
 80055ee:	2304      	movs	r3, #4
 80055f0:	408b      	lsls	r3, r1
 80055f2:	43db      	mvns	r3, r3
 80055f4:	401a      	ands	r2, r3
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	601a      	str	r2, [r3, #0]
}
 80055fa:	bf00      	nop
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	0800c8d0 	.word	0x0800c8d0
 800560c:	0800c8d8 	.word	0x0800c8d8

08005610 <LL_TIM_OC_EnablePreload>:
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d01c      	beq.n	800565a <LL_TIM_OC_EnablePreload+0x4a>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2b04      	cmp	r3, #4
 8005624:	d017      	beq.n	8005656 <LL_TIM_OC_EnablePreload+0x46>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b10      	cmp	r3, #16
 800562a:	d012      	beq.n	8005652 <LL_TIM_OC_EnablePreload+0x42>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2b40      	cmp	r3, #64	@ 0x40
 8005630:	d00d      	beq.n	800564e <LL_TIM_OC_EnablePreload+0x3e>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005638:	d007      	beq.n	800564a <LL_TIM_OC_EnablePreload+0x3a>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005640:	d101      	bne.n	8005646 <LL_TIM_OC_EnablePreload+0x36>
 8005642:	2305      	movs	r3, #5
 8005644:	e00a      	b.n	800565c <LL_TIM_OC_EnablePreload+0x4c>
 8005646:	2306      	movs	r3, #6
 8005648:	e008      	b.n	800565c <LL_TIM_OC_EnablePreload+0x4c>
 800564a:	2304      	movs	r3, #4
 800564c:	e006      	b.n	800565c <LL_TIM_OC_EnablePreload+0x4c>
 800564e:	2303      	movs	r3, #3
 8005650:	e004      	b.n	800565c <LL_TIM_OC_EnablePreload+0x4c>
 8005652:	2302      	movs	r3, #2
 8005654:	e002      	b.n	800565c <LL_TIM_OC_EnablePreload+0x4c>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <LL_TIM_OC_EnablePreload+0x4c>
 800565a:	2300      	movs	r3, #0
 800565c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3318      	adds	r3, #24
 8005662:	4619      	mov	r1, r3
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	4a0a      	ldr	r2, [pc, #40]	@ (8005690 <LL_TIM_OC_EnablePreload+0x80>)
 8005668:	5cd3      	ldrb	r3, [r2, r3]
 800566a:	440b      	add	r3, r1
 800566c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	4907      	ldr	r1, [pc, #28]	@ (8005694 <LL_TIM_OC_EnablePreload+0x84>)
 8005676:	5ccb      	ldrb	r3, [r1, r3]
 8005678:	4619      	mov	r1, r3
 800567a:	2308      	movs	r3, #8
 800567c:	408b      	lsls	r3, r1
 800567e:	431a      	orrs	r2, r3
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	0800c8d0 	.word	0x0800c8d0
 8005694:	0800c8d8 	.word	0x0800c8d8

08005698 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056aa:	f023 0307 	bic.w	r3, r3, #7
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	609a      	str	r2, [r3, #8]
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	605a      	str	r2, [r3, #4]
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	609a      	str	r2, [r3, #8]
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <LL_USART_Enable>:
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	60da      	str	r2, [r3, #12]
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <LL_USART_ConfigAsyncMode>:
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	615a      	str	r2, [r3, #20]
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <LL_GPIO_SetOutputPin>:
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	619a      	str	r2, [r3, #24]
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <LL_GPIO_ResetOutputPin>:
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	041a      	lsls	r2, r3, #16
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	619a      	str	r2, [r3, #24]
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
	...

08005790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005794:	f001 fb78 	bl	8006e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005798:	f000 f83a 	bl	8005810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800579c:	f000 fdb6 	bl	800630c <MX_GPIO_Init>
  MX_DMA_Init();
 80057a0:	f000 fd9c 	bl	80062dc <MX_DMA_Init>
  MX_SPI1_Init();
 80057a4:	f000 fab6 	bl	8005d14 <MX_SPI1_Init>
  MX_ADC1_Init();
 80057a8:	f000 f86a 	bl	8005880 <MX_ADC1_Init>
  MX_TIM1_Init();
 80057ac:	f000 fb94 	bl	8005ed8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80057b0:	f000 fc2a 	bl	8006008 <MX_TIM3_Init>
  MX_I2C2_Init();
 80057b4:	f000 fa30 	bl	8005c18 <MX_I2C2_Init>
  MX_SPI3_Init();
 80057b8:	f000 fb38 	bl	8005e2c <MX_SPI3_Init>
  MX_SPI2_Init();
 80057bc:	f000 fb00 	bl	8005dc0 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 80057c0:	f000 fd2c 	bl	800621c <MX_USART6_UART_Init>
  MX_ADC3_Init();
 80057c4:	f000 f97e 	bl	8005ac4 <MX_ADC3_Init>
  MX_TIM4_Init();
 80057c8:	f000 fc4e 	bl	8006068 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80057cc:	f000 fcc6 	bl	800615c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80057d0:	f000 f9ca 	bl	8005b68 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize all preset for schedule task
  Ex_Watchdog_Init();
 80057d4:	f001 fb10 	bl	8006df8 <Ex_Watchdog_Init>
  LED_Status_Init();
 80057d8:	f7ff f99e 	bl	8004b18 <LED_Status_Init>
  CommandLine_Init(USART6);
 80057dc:	480b      	ldr	r0, [pc, #44]	@ (800580c <main+0x7c>)
 80057de:	f7fb ff43 	bl	8001668 <CommandLine_Init>
  NTC_DMA_ADC_Init();
 80057e2:	f7ff f8e9 	bl	80049b8 <NTC_DMA_ADC_Init>
  // copc_init();
  SCH_Initialize();
 80057e6:	f004 fe51 	bl	800a48c <SCH_Initialize>

  // Create task scheduler
  Ex_Watchdog_CreateTask();
 80057ea:	f001 fb11 	bl	8006e10 <Ex_Watchdog_CreateTask>
  LED_Status_CreateTask();
 80057ee:	f7ff faab 	bl	8004d48 <LED_Status_CreateTask>
  CommandLine_CreateTask();
 80057f2:	f7fd fbe7 	bl	8002fc4 <CommandLine_CreateTask>
  Temperature_GetSet_CreateTask();
 80057f6:	f001 f9ab 	bl	8006b50 <Temperature_GetSet_CreateTask>
  // copc_create_task();
  // sensor_i2c_create_task();
  AutoRun_CreateTask();
 80057fa:	f7fd ffeb 	bl	80037d4 <AutoRun_CreateTask>
  SoftTime_CreateTask();
 80057fe:	f7fe f975 	bl	8003aec <SoftTime_CreateTask>
  SCH_StartSchedular();
 8005802:	f004 ff6d 	bl	800a6e0 <SCH_StartSchedular>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_HandleScheduledTask();
 8005806:	f004 ff71 	bl	800a6ec <SCH_HandleScheduledTask>
 800580a:	e7fc      	b.n	8005806 <main+0x76>
 800580c:	40011400 	.word	0x40011400

08005810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8005814:	2000      	movs	r0, #0
 8005816:	f7ff fe4b 	bl	80054b0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800581a:	bf00      	nop
 800581c:	f7ff fe5c 	bl	80054d8 <LL_FLASH_GetLatency>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1fa      	bne.n	800581c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8005826:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800582a:	f7ff fe63 	bl	80054f4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800582e:	f7ff fd75 	bl	800531c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8005832:	bf00      	nop
 8005834:	f7ff fd82 	bl	800533c <LL_RCC_HSE_IsReady>
 8005838:	4603      	mov	r3, r0
 800583a:	2b01      	cmp	r3, #1
 800583c:	d1fa      	bne.n	8005834 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800583e:	2000      	movs	r0, #0
 8005840:	f7ff fdb2 	bl	80053a8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8005844:	2000      	movs	r0, #0
 8005846:	f7ff fdc3 	bl	80053d0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800584a:	2000      	movs	r0, #0
 800584c:	f7ff fdd4 	bl	80053f8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8005850:	2001      	movs	r0, #1
 8005852:	f7ff fd87 	bl	8005364 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)
 8005856:	bf00      	nop
 8005858:	f7ff fd98 	bl	800538c <LL_RCC_GetSysClkSource>
 800585c:	4603      	mov	r3, r0
 800585e:	2b04      	cmp	r3, #4
 8005860:	d1fa      	bne.n	8005858 <SystemClock_Config+0x48>
  {

  }
  LL_SetSystemCoreClock(8000000);
 8005862:	4806      	ldr	r0, [pc, #24]	@ (800587c <SystemClock_Config+0x6c>)
 8005864:	f004 fe02 	bl	800a46c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8005868:	200f      	movs	r0, #15
 800586a:	f001 fb2f 	bl	8006ecc <HAL_InitTick>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8005874:	f000 fe32 	bl	80064dc <Error_Handler>
  }
}
 8005878:	bf00      	nop
 800587a:	bd80      	pop	{r7, pc}
 800587c:	007a1200 	.word	0x007a1200

08005880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b092      	sub	sp, #72	@ 0x48
 8005884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8005886:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	605a      	str	r2, [r3, #4]
 8005890:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8005892:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	605a      	str	r2, [r3, #4]
 800589c:	609a      	str	r2, [r3, #8]
 800589e:	60da      	str	r2, [r3, #12]
 80058a0:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80058a2:	f107 0318 	add.w	r3, r7, #24
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	605a      	str	r2, [r3, #4]
 80058ac:	609a      	str	r2, [r3, #8]
 80058ae:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058b0:	463b      	mov	r3, r7
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	605a      	str	r2, [r3, #4]
 80058b8:	609a      	str	r2, [r3, #8]
 80058ba:	60da      	str	r2, [r3, #12]
 80058bc:	611a      	str	r2, [r3, #16]
 80058be:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80058c0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80058c4:	f7ff fddc 	bl	8005480 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80058c8:	2004      	movs	r0, #4
 80058ca:	f7ff fda9 	bl	8005420 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80058ce:	2001      	movs	r0, #1
 80058d0:	f7ff fda6 	bl	8005420 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80058d4:	2002      	movs	r0, #2
 80058d6:	f7ff fda3 	bl	8005420 <LL_AHB1_GRP1_EnableClock>
  PC4   ------> ADC1_IN14
  PC5   ------> ADC1_IN15
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = ADC_TEMP1_Pin|ADC_TEMP2_Pin|ADC_TEMP3_Pin|ADC_TEMP4_Pin
 80058da:	233f      	movs	r3, #63	@ 0x3f
 80058dc:	603b      	str	r3, [r7, #0]
                          |ADC_TEMP5_Pin|ADC_TEMP6_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80058de:	2303      	movs	r3, #3
 80058e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80058e2:	2300      	movs	r3, #0
 80058e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058e6:	463b      	mov	r3, r7
 80058e8:	4619      	mov	r1, r3
 80058ea:	4869      	ldr	r0, [pc, #420]	@ (8005a90 <MX_ADC1_Init+0x210>)
 80058ec:	f003 fbc3 	bl	8009076 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_TEC_Pin;
 80058f0:	2310      	movs	r3, #16
 80058f2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80058f4:	2303      	movs	r3, #3
 80058f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80058f8:	2300      	movs	r3, #0
 80058fa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ADC_TEC_GPIO_Port, &GPIO_InitStruct);
 80058fc:	463b      	mov	r3, r7
 80058fe:	4619      	mov	r1, r3
 8005900:	4864      	ldr	r0, [pc, #400]	@ (8005a94 <MX_ADC1_Init+0x214>)
 8005902:	f003 fbb8 	bl	8009076 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_TEMP7_Pin|ADC_TEMP8_Pin;
 8005906:	2303      	movs	r3, #3
 8005908:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800590a:	2303      	movs	r3, #3
 800590c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800590e:	2300      	movs	r3, #0
 8005910:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005912:	463b      	mov	r3, r7
 8005914:	4619      	mov	r1, r3
 8005916:	4860      	ldr	r0, [pc, #384]	@ (8005a98 <MX_ADC1_Init+0x218>)
 8005918:	f003 fbad 	bl	8009076 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 800591c:	2200      	movs	r2, #0
 800591e:	2100      	movs	r1, #0
 8005920:	485e      	ldr	r0, [pc, #376]	@ (8005a9c <MX_ADC1_Init+0x21c>)
 8005922:	f7ff fc53 	bl	80051cc <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8005926:	2200      	movs	r2, #0
 8005928:	2100      	movs	r1, #0
 800592a:	485c      	ldr	r0, [pc, #368]	@ (8005a9c <MX_ADC1_Init+0x21c>)
 800592c:	f7ff fb52 	bl	8004fd4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_MEDIUM);
 8005930:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005934:	2100      	movs	r1, #0
 8005936:	4859      	ldr	r0, [pc, #356]	@ (8005a9c <MX_ADC1_Init+0x21c>)
 8005938:	f7ff fc24 	bl	8005184 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 800593c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005940:	2100      	movs	r1, #0
 8005942:	4856      	ldr	r0, [pc, #344]	@ (8005a9c <MX_ADC1_Init+0x21c>)
 8005944:	f7ff fb6a 	bl	800501c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8005948:	2200      	movs	r2, #0
 800594a:	2100      	movs	r1, #0
 800594c:	4853      	ldr	r0, [pc, #332]	@ (8005a9c <MX_ADC1_Init+0x21c>)
 800594e:	f7ff fb89 	bl	8005064 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8005952:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005956:	2100      	movs	r1, #0
 8005958:	4850      	ldr	r0, [pc, #320]	@ (8005a9c <MX_ADC1_Init+0x21c>)
 800595a:	f7ff fba7 	bl	80050ac <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 800595e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005962:	2100      	movs	r1, #0
 8005964:	484d      	ldr	r0, [pc, #308]	@ (8005a9c <MX_ADC1_Init+0x21c>)
 8005966:	f7ff fbc5 	bl	80050f4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 800596a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800596e:	2100      	movs	r1, #0
 8005970:	484a      	ldr	r0, [pc, #296]	@ (8005a9c <MX_ADC1_Init+0x21c>)
 8005972:	f7ff fbe3 	bl	800513c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 8005976:	2100      	movs	r1, #0
 8005978:	4848      	ldr	r0, [pc, #288]	@ (8005a9c <MX_ADC1_Init+0x21c>)
 800597a:	f7ff fc4b 	bl	8005214 <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800597e:	2300      	movs	r3, #0
 8005980:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8005982:	2300      	movs	r3, #0
 8005984:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8005986:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800598a:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800598c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005990:	4619      	mov	r1, r3
 8005992:	4843      	ldr	r0, [pc, #268]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 8005994:	f003 f9b6 	bl	8008d04 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8005998:	2300      	movs	r3, #0
 800599a:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 800599c:	f44f 03e0 	mov.w	r3, #7340032	@ 0x700000
 80059a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80059a2:	2300      	movs	r3, #0
 80059a4:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80059a6:	2302      	movs	r3, #2
 80059a8:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80059aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80059ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80059b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80059b4:	4619      	mov	r1, r3
 80059b6:	483a      	ldr	r0, [pc, #232]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 80059b8:	f003 f9d0 	bl	8008d5c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 80059bc:	2100      	movs	r1, #0
 80059be:	4838      	ldr	r0, [pc, #224]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 80059c0:	f7ff fa94 	bl	8004eec <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80059c4:	2300      	movs	r3, #0
 80059c6:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80059cc:	f107 0318 	add.w	r3, r7, #24
 80059d0:	4619      	mov	r1, r3
 80059d2:	4834      	ldr	r0, [pc, #208]	@ (8005aa4 <MX_ADC1_Init+0x224>)
 80059d4:	f003 f94e 	bl	8008c74 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_10);
 80059d8:	220a      	movs	r2, #10
 80059da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80059de:	4830      	ldr	r0, [pc, #192]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 80059e0:	f7ff fa47 	bl	8004e72 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_15CYCLES);
 80059e4:	2201      	movs	r2, #1
 80059e6:	210a      	movs	r1, #10
 80059e8:	482d      	ldr	r0, [pc, #180]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 80059ea:	f7ff fa92 	bl	8004f12 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_11);
 80059ee:	4a2e      	ldr	r2, [pc, #184]	@ (8005aa8 <MX_ADC1_Init+0x228>)
 80059f0:	f240 2105 	movw	r1, #517	@ 0x205
 80059f4:	482a      	ldr	r0, [pc, #168]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 80059f6:	f7ff fa3c 	bl	8004e72 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_15CYCLES);
 80059fa:	2201      	movs	r2, #1
 80059fc:	492a      	ldr	r1, [pc, #168]	@ (8005aa8 <MX_ADC1_Init+0x228>)
 80059fe:	4828      	ldr	r0, [pc, #160]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 8005a00:	f7ff fa87 	bl	8004f12 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_12);
 8005a04:	4a29      	ldr	r2, [pc, #164]	@ (8005aac <MX_ADC1_Init+0x22c>)
 8005a06:	f240 210a 	movw	r1, #522	@ 0x20a
 8005a0a:	4825      	ldr	r0, [pc, #148]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 8005a0c:	f7ff fa31 	bl	8004e72 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_15CYCLES);
 8005a10:	2201      	movs	r2, #1
 8005a12:	4926      	ldr	r1, [pc, #152]	@ (8005aac <MX_ADC1_Init+0x22c>)
 8005a14:	4822      	ldr	r0, [pc, #136]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 8005a16:	f7ff fa7c 	bl	8004f12 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_13);
 8005a1a:	4a25      	ldr	r2, [pc, #148]	@ (8005ab0 <MX_ADC1_Init+0x230>)
 8005a1c:	f240 210f 	movw	r1, #527	@ 0x20f
 8005a20:	481f      	ldr	r0, [pc, #124]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 8005a22:	f7ff fa26 	bl	8004e72 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SAMPLINGTIME_15CYCLES);
 8005a26:	2201      	movs	r2, #1
 8005a28:	4921      	ldr	r1, [pc, #132]	@ (8005ab0 <MX_ADC1_Init+0x230>)
 8005a2a:	481d      	ldr	r0, [pc, #116]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 8005a2c:	f7ff fa71 	bl	8004f12 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_14);
 8005a30:	4a20      	ldr	r2, [pc, #128]	@ (8005ab4 <MX_ADC1_Init+0x234>)
 8005a32:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8005a36:	481a      	ldr	r0, [pc, #104]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 8005a38:	f7ff fa1b 	bl	8004e72 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_15CYCLES);
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	491d      	ldr	r1, [pc, #116]	@ (8005ab4 <MX_ADC1_Init+0x234>)
 8005a40:	4817      	ldr	r0, [pc, #92]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 8005a42:	f7ff fa66 	bl	8004f12 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_15);
 8005a46:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab8 <MX_ADC1_Init+0x238>)
 8005a48:	f240 2119 	movw	r1, #537	@ 0x219
 8005a4c:	4814      	ldr	r0, [pc, #80]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 8005a4e:	f7ff fa10 	bl	8004e72 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_15CYCLES);
 8005a52:	2201      	movs	r2, #1
 8005a54:	4918      	ldr	r1, [pc, #96]	@ (8005ab8 <MX_ADC1_Init+0x238>)
 8005a56:	4812      	ldr	r0, [pc, #72]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 8005a58:	f7ff fa5b 	bl	8004f12 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_8);
 8005a5c:	4a17      	ldr	r2, [pc, #92]	@ (8005abc <MX_ADC1_Init+0x23c>)
 8005a5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a62:	480f      	ldr	r0, [pc, #60]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 8005a64:	f7ff fa05 	bl	8004e72 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_15CYCLES);
 8005a68:	2201      	movs	r2, #1
 8005a6a:	4914      	ldr	r1, [pc, #80]	@ (8005abc <MX_ADC1_Init+0x23c>)
 8005a6c:	480c      	ldr	r0, [pc, #48]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 8005a6e:	f7ff fa50 	bl	8004f12 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_9);
 8005a72:	4a13      	ldr	r2, [pc, #76]	@ (8005ac0 <MX_ADC1_Init+0x240>)
 8005a74:	f240 1105 	movw	r1, #261	@ 0x105
 8005a78:	4809      	ldr	r0, [pc, #36]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 8005a7a:	f7ff f9fa 	bl	8004e72 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_15CYCLES);
 8005a7e:	2201      	movs	r2, #1
 8005a80:	490f      	ldr	r1, [pc, #60]	@ (8005ac0 <MX_ADC1_Init+0x240>)
 8005a82:	4807      	ldr	r0, [pc, #28]	@ (8005aa0 <MX_ADC1_Init+0x220>)
 8005a84:	f7ff fa45 	bl	8004f12 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005a88:	bf00      	nop
 8005a8a:	3748      	adds	r7, #72	@ 0x48
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40020800 	.word	0x40020800
 8005a94:	40020000 	.word	0x40020000
 8005a98:	40020400 	.word	0x40020400
 8005a9c:	40026400 	.word	0x40026400
 8005aa0:	40012000 	.word	0x40012000
 8005aa4:	40012300 	.word	0x40012300
 8005aa8:	0030000b 	.word	0x0030000b
 8005aac:	0060000c 	.word	0x0060000c
 8005ab0:	0090000d 	.word	0x0090000d
 8005ab4:	00c0000e 	.word	0x00c0000e
 8005ab8:	00f0000f 	.word	0x00f0000f
 8005abc:	03800008 	.word	0x03800008
 8005ac0:	03b00009 	.word	0x03b00009

08005ac4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005aca:	463b      	mov	r3, r7
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	605a      	str	r2, [r3, #4]
 8005ad2:	609a      	str	r2, [r3, #8]
 8005ad4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8005ad6:	4b21      	ldr	r3, [pc, #132]	@ (8005b5c <MX_ADC3_Init+0x98>)
 8005ad8:	4a21      	ldr	r2, [pc, #132]	@ (8005b60 <MX_ADC3_Init+0x9c>)
 8005ada:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005adc:	4b1f      	ldr	r3, [pc, #124]	@ (8005b5c <MX_ADC3_Init+0x98>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8005ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8005b5c <MX_ADC3_Init+0x98>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8005ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8005b5c <MX_ADC3_Init+0x98>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8005aee:	4b1b      	ldr	r3, [pc, #108]	@ (8005b5c <MX_ADC3_Init+0x98>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8005af4:	4b19      	ldr	r3, [pc, #100]	@ (8005b5c <MX_ADC3_Init+0x98>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005afc:	4b17      	ldr	r3, [pc, #92]	@ (8005b5c <MX_ADC3_Init+0x98>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005b02:	4b16      	ldr	r3, [pc, #88]	@ (8005b5c <MX_ADC3_Init+0x98>)
 8005b04:	4a17      	ldr	r2, [pc, #92]	@ (8005b64 <MX_ADC3_Init+0xa0>)
 8005b06:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005b08:	4b14      	ldr	r3, [pc, #80]	@ (8005b5c <MX_ADC3_Init+0x98>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8005b0e:	4b13      	ldr	r3, [pc, #76]	@ (8005b5c <MX_ADC3_Init+0x98>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8005b14:	4b11      	ldr	r3, [pc, #68]	@ (8005b5c <MX_ADC3_Init+0x98>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b5c <MX_ADC3_Init+0x98>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005b22:	480e      	ldr	r0, [pc, #56]	@ (8005b5c <MX_ADC3_Init+0x98>)
 8005b24:	f001 fa46 	bl	8006fb4 <HAL_ADC_Init>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8005b2e:	f000 fcd5 	bl	80064dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005b32:	2302      	movs	r3, #2
 8005b34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005b36:	2301      	movs	r3, #1
 8005b38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005b3e:	463b      	mov	r3, r7
 8005b40:	4619      	mov	r1, r3
 8005b42:	4806      	ldr	r0, [pc, #24]	@ (8005b5c <MX_ADC3_Init+0x98>)
 8005b44:	f001 fa7a 	bl	800703c <HAL_ADC_ConfigChannel>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8005b4e:	f000 fcc5 	bl	80064dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	200034c4 	.word	0x200034c4
 8005b60:	40012200 	.word	0x40012200
 8005b64:	0f000001 	.word	0x0f000001

08005b68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08c      	sub	sp, #48	@ 0x30
 8005b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8005b6e:	f107 0318 	add.w	r3, r7, #24
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	605a      	str	r2, [r3, #4]
 8005b78:	609a      	str	r2, [r3, #8]
 8005b7a:	60da      	str	r2, [r3, #12]
 8005b7c:	611a      	str	r2, [r3, #16]
 8005b7e:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b80:	463b      	mov	r3, r7
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	605a      	str	r2, [r3, #4]
 8005b88:	609a      	str	r2, [r3, #8]
 8005b8a:	60da      	str	r2, [r3, #12]
 8005b8c:	611a      	str	r2, [r3, #16]
 8005b8e:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8005b90:	2002      	movs	r0, #2
 8005b92:	f7ff fc45 	bl	8005420 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = SENSOR_SCL_Pin|SENSOR_SDA_Pin;
 8005b96:	23c0      	movs	r3, #192	@ 0xc0
 8005b98:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8005baa:	2304      	movs	r3, #4
 8005bac:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bae:	463b      	mov	r3, r7
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4816      	ldr	r0, [pc, #88]	@ (8005c0c <MX_I2C1_Init+0xa4>)
 8005bb4:	f003 fa5f 	bl	8009076 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8005bb8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8005bbc:	f7ff fc48 	bl	8005450 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8005bc0:	4813      	ldr	r0, [pc, #76]	@ (8005c10 <MX_I2C1_Init+0xa8>)
 8005bc2:	f7ff fb8a 	bl	80052da <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8005bc6:	4812      	ldr	r0, [pc, #72]	@ (8005c10 <MX_I2C1_Init+0xa8>)
 8005bc8:	f7ff fb64 	bl	8005294 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8005bcc:	4810      	ldr	r0, [pc, #64]	@ (8005c10 <MX_I2C1_Init+0xa8>)
 8005bce:	f7ff fb51 	bl	8005274 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c14 <MX_I2C1_Init+0xac>)
 8005bd8:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8005be2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8005be8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8005bee:	f107 0318 	add.w	r3, r7, #24
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4806      	ldr	r0, [pc, #24]	@ (8005c10 <MX_I2C1_Init+0xa8>)
 8005bf6:	f003 fc15 	bl	8009424 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	4804      	ldr	r0, [pc, #16]	@ (8005c10 <MX_I2C1_Init+0xa8>)
 8005bfe:	f7ff fb59 	bl	80052b4 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005c02:	bf00      	nop
 8005c04:	3730      	adds	r7, #48	@ 0x30
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	40020400 	.word	0x40020400
 8005c10:	40005400 	.word	0x40005400
 8005c14:	000186a0 	.word	0x000186a0

08005c18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08c      	sub	sp, #48	@ 0x30
 8005c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8005c1e:	f107 0318 	add.w	r3, r7, #24
 8005c22:	2200      	movs	r2, #0
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	605a      	str	r2, [r3, #4]
 8005c28:	609a      	str	r2, [r3, #8]
 8005c2a:	60da      	str	r2, [r3, #12]
 8005c2c:	611a      	str	r2, [r3, #16]
 8005c2e:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c30:	463b      	mov	r3, r7
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	605a      	str	r2, [r3, #4]
 8005c38:	609a      	str	r2, [r3, #8]
 8005c3a:	60da      	str	r2, [r3, #12]
 8005c3c:	611a      	str	r2, [r3, #16]
 8005c3e:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8005c40:	2002      	movs	r0, #2
 8005c42:	f7ff fbed 	bl	8005420 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = EXP_SCL_Pin|EXP_SDA_Pin;
 8005c46:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005c4a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005c50:	2303      	movs	r3, #3
 8005c52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8005c54:	2301      	movs	r3, #1
 8005c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8005c5c:	2304      	movs	r3, #4
 8005c5e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c60:	463b      	mov	r3, r7
 8005c62:	4619      	mov	r1, r3
 8005c64:	4828      	ldr	r0, [pc, #160]	@ (8005d08 <MX_I2C2_Init+0xf0>)
 8005c66:	f003 fa06 	bl	8009076 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8005c6a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8005c6e:	f7ff fbef 	bl	8005450 <LL_APB1_GRP1_EnableClock>

  /* I2C2 interrupt Init */
  NVIC_SetPriority(I2C2_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005c72:	f7ff f875 	bl	8004d60 <__NVIC_GetPriorityGrouping>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff f8c5 	bl	8004e0c <NVIC_EncodePriority>
 8005c82:	4603      	mov	r3, r0
 8005c84:	4619      	mov	r1, r3
 8005c86:	2021      	movs	r0, #33	@ 0x21
 8005c88:	f7ff f896 	bl	8004db8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C2_EV_IRQn);
 8005c8c:	2021      	movs	r0, #33	@ 0x21
 8005c8e:	f7ff f875 	bl	8004d7c <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C2_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005c92:	f7ff f865 	bl	8004d60 <__NVIC_GetPriorityGrouping>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff f8b5 	bl	8004e0c <NVIC_EncodePriority>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	2022      	movs	r0, #34	@ 0x22
 8005ca8:	f7ff f886 	bl	8004db8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C2_ER_IRQn);
 8005cac:	2022      	movs	r0, #34	@ 0x22
 8005cae:	f7ff f865 	bl	8004d7c <__NVIC_EnableIRQ>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8005cb2:	4816      	ldr	r0, [pc, #88]	@ (8005d0c <MX_I2C2_Init+0xf4>)
 8005cb4:	f7ff fb11 	bl	80052da <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8005cb8:	4814      	ldr	r0, [pc, #80]	@ (8005d0c <MX_I2C2_Init+0xf4>)
 8005cba:	f7ff faeb 	bl	8005294 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8005cbe:	4813      	ldr	r0, [pc, #76]	@ (8005d0c <MX_I2C2_Init+0xf4>)
 8005cc0:	f7ff fad8 	bl	8005274 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8005cc8:	4b11      	ldr	r3, [pc, #68]	@ (8005d10 <MX_I2C2_Init+0xf8>)
 8005cca:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 36;
 8005cd0:	2324      	movs	r3, #36	@ 0x24
 8005cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8005cd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8005cda:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8005ce0:	f107 0318 	add.w	r3, r7, #24
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4809      	ldr	r0, [pc, #36]	@ (8005d0c <MX_I2C2_Init+0xf4>)
 8005ce8:	f003 fb9c 	bl	8009424 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 8005cec:	2100      	movs	r1, #0
 8005cee:	4807      	ldr	r0, [pc, #28]	@ (8005d0c <MX_I2C2_Init+0xf4>)
 8005cf0:	f7ff fae0 	bl	80052b4 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */
  LL_I2C_EnableIT_EVT(I2C2);
 8005cf4:	4805      	ldr	r0, [pc, #20]	@ (8005d0c <MX_I2C2_Init+0xf4>)
 8005cf6:	f7ff fb00 	bl	80052fa <LL_I2C_EnableIT_EVT>
  //  LL_I2C_EnableIT_ERR(I2C2);
  LL_I2C_Enable(I2C2);
 8005cfa:	4804      	ldr	r0, [pc, #16]	@ (8005d0c <MX_I2C2_Init+0xf4>)
 8005cfc:	f7ff faaa 	bl	8005254 <LL_I2C_Enable>
  /* USER CODE END I2C2_Init 2 */

}
 8005d00:	bf00      	nop
 8005d02:	3730      	adds	r7, #48	@ 0x30
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	40020400 	.word	0x40020400
 8005d0c:	40005800 	.word	0x40005800
 8005d10:	000186a0 	.word	0x000186a0

08005d14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b090      	sub	sp, #64	@ 0x40
 8005d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8005d1a:	f107 0318 	add.w	r3, r7, #24
 8005d1e:	2228      	movs	r2, #40	@ 0x28
 8005d20:	2100      	movs	r1, #0
 8005d22:	4618      	mov	r0, r3
 8005d24:	f004 fdfa 	bl	800a91c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d28:	463b      	mov	r3, r7
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	605a      	str	r2, [r3, #4]
 8005d30:	609a      	str	r2, [r3, #8]
 8005d32:	60da      	str	r2, [r3, #12]
 8005d34:	611a      	str	r2, [r3, #16]
 8005d36:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8005d38:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005d3c:	f7ff fba0 	bl	8005480 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005d40:	2001      	movs	r0, #1
 8005d42:	f7ff fb6d 	bl	8005420 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LASRR_SCK_Pin|LASER_MISO_Pin|LASER_MOSI_Pin;
 8005d46:	23e0      	movs	r3, #224	@ 0xe0
 8005d48:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005d56:	2300      	movs	r3, #0
 8005d58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8005d5a:	2305      	movs	r3, #5
 8005d5c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d5e:	463b      	mov	r3, r7
 8005d60:	4619      	mov	r1, r3
 8005d62:	4815      	ldr	r0, [pc, #84]	@ (8005db8 <MX_SPI1_Init+0xa4>)
 8005d64:	f003 f987 	bl	8009076 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005d6c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005d70:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8005d72:	2300      	movs	r3, #0
 8005d74:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8005d76:	2300      	movs	r3, #0
 8005d78:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005d7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8005d84:	2310      	movs	r3, #16
 8005d86:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8005d90:	230a      	movs	r3, #10
 8005d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8005d94:	f107 0318 	add.w	r3, r7, #24
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4808      	ldr	r0, [pc, #32]	@ (8005dbc <MX_SPI1_Init+0xa8>)
 8005d9c:	f003 fcd1 	bl	8009742 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8005da0:	2100      	movs	r1, #0
 8005da2:	4806      	ldr	r0, [pc, #24]	@ (8005dbc <MX_SPI1_Init+0xa8>)
 8005da4:	f7ff fbca 	bl	800553c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 8005da8:	4804      	ldr	r0, [pc, #16]	@ (8005dbc <MX_SPI1_Init+0xa8>)
 8005daa:	f7ff fbb7 	bl	800551c <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 8005dae:	bf00      	nop
 8005db0:	3740      	adds	r7, #64	@ 0x40
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40020000 	.word	0x40020000
 8005dbc:	40013000 	.word	0x40013000

08005dc0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005dc4:	4b17      	ldr	r3, [pc, #92]	@ (8005e24 <MX_SPI2_Init+0x64>)
 8005dc6:	4a18      	ldr	r2, [pc, #96]	@ (8005e28 <MX_SPI2_Init+0x68>)
 8005dc8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005dca:	4b16      	ldr	r3, [pc, #88]	@ (8005e24 <MX_SPI2_Init+0x64>)
 8005dcc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005dd0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005dd2:	4b14      	ldr	r3, [pc, #80]	@ (8005e24 <MX_SPI2_Init+0x64>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005dd8:	4b12      	ldr	r3, [pc, #72]	@ (8005e24 <MX_SPI2_Init+0x64>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dde:	4b11      	ldr	r3, [pc, #68]	@ (8005e24 <MX_SPI2_Init+0x64>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005de4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e24 <MX_SPI2_Init+0x64>)
 8005de6:	2201      	movs	r2, #1
 8005de8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005dea:	4b0e      	ldr	r3, [pc, #56]	@ (8005e24 <MX_SPI2_Init+0x64>)
 8005dec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005df0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005df2:	4b0c      	ldr	r3, [pc, #48]	@ (8005e24 <MX_SPI2_Init+0x64>)
 8005df4:	2210      	movs	r2, #16
 8005df6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005df8:	4b0a      	ldr	r3, [pc, #40]	@ (8005e24 <MX_SPI2_Init+0x64>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005dfe:	4b09      	ldr	r3, [pc, #36]	@ (8005e24 <MX_SPI2_Init+0x64>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e04:	4b07      	ldr	r3, [pc, #28]	@ (8005e24 <MX_SPI2_Init+0x64>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005e0a:	4b06      	ldr	r3, [pc, #24]	@ (8005e24 <MX_SPI2_Init+0x64>)
 8005e0c:	220a      	movs	r2, #10
 8005e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005e10:	4804      	ldr	r0, [pc, #16]	@ (8005e24 <MX_SPI2_Init+0x64>)
 8005e12:	f001 fdb3 	bl	800797c <HAL_SPI_Init>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005e1c:	f000 fb5e 	bl	80064dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005e20:	bf00      	nop
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	2000350c 	.word	0x2000350c
 8005e28:	40003800 	.word	0x40003800

08005e2c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b090      	sub	sp, #64	@ 0x40
 8005e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8005e32:	f107 0318 	add.w	r3, r7, #24
 8005e36:	2228      	movs	r2, #40	@ 0x28
 8005e38:	2100      	movs	r1, #0
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f004 fd6e 	bl	800a91c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e40:	463b      	mov	r3, r7
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	605a      	str	r2, [r3, #4]
 8005e48:	609a      	str	r2, [r3, #8]
 8005e4a:	60da      	str	r2, [r3, #12]
 8005e4c:	611a      	str	r2, [r3, #16]
 8005e4e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8005e50:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005e54:	f7ff fafc 	bl	8005450 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005e58:	2004      	movs	r0, #4
 8005e5a:	f7ff fae1 	bl	8005420 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = TEC_SCK_Pin|TEC_MISO_Pin|TEC_MOSI_Pin;
 8005e5e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8005e62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005e64:	2302      	movs	r3, #2
 8005e66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005e70:	2300      	movs	r3, #0
 8005e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8005e74:	2306      	movs	r3, #6
 8005e76:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e78:	463b      	mov	r3, r7
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4814      	ldr	r0, [pc, #80]	@ (8005ed0 <MX_SPI3_Init+0xa4>)
 8005e7e:	f003 f8fa 	bl	8009076 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8005e82:	2300      	movs	r3, #0
 8005e84:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005e86:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005e8a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8005e90:	2300      	movs	r3, #0
 8005e92:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8005e94:	2300      	movs	r3, #0
 8005e96:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005e98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8005e9e:	2318      	movs	r3, #24
 8005ea0:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8005eaa:	230a      	movs	r3, #10
 8005eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8005eae:	f107 0318 	add.w	r3, r7, #24
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	4807      	ldr	r0, [pc, #28]	@ (8005ed4 <MX_SPI3_Init+0xa8>)
 8005eb6:	f003 fc44 	bl	8009742 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8005eba:	2100      	movs	r1, #0
 8005ebc:	4805      	ldr	r0, [pc, #20]	@ (8005ed4 <MX_SPI3_Init+0xa8>)
 8005ebe:	f7ff fb3d 	bl	800553c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */
  LL_SPI_Enable(SPI3);
 8005ec2:	4804      	ldr	r0, [pc, #16]	@ (8005ed4 <MX_SPI3_Init+0xa8>)
 8005ec4:	f7ff fb2a 	bl	800551c <LL_SPI_Enable>
  /* USER CODE END SPI3_Init 2 */

}
 8005ec8:	bf00      	nop
 8005eca:	3740      	adds	r7, #64	@ 0x40
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40020800 	.word	0x40020800
 8005ed4:	40003c00 	.word	0x40003c00

08005ed8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b09a      	sub	sp, #104	@ 0x68
 8005edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005ede:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	605a      	str	r2, [r3, #4]
 8005ee8:	609a      	str	r2, [r3, #8]
 8005eea:	60da      	str	r2, [r3, #12]
 8005eec:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005eee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f004 fd10 	bl	800a91c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8005efc:	f107 031c 	add.w	r3, r7, #28
 8005f00:	2200      	movs	r2, #0
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	605a      	str	r2, [r3, #4]
 8005f06:	609a      	str	r2, [r3, #8]
 8005f08:	60da      	str	r2, [r3, #12]
 8005f0a:	611a      	str	r2, [r3, #16]
 8005f0c:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f0e:	1d3b      	adds	r3, r7, #4
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	605a      	str	r2, [r3, #4]
 8005f16:	609a      	str	r2, [r3, #8]
 8005f18:	60da      	str	r2, [r3, #12]
 8005f1a:	611a      	str	r2, [r3, #16]
 8005f1c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8005f1e:	2001      	movs	r0, #1
 8005f20:	f7ff faae 	bl	8005480 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8005f24:	2353      	movs	r3, #83	@ 0x53
 8005f26:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.Autoreload = 9999;
 8005f2e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005f32:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005f34:	2300      	movs	r3, #0
 8005f36:	663b      	str	r3, [r7, #96]	@ 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	667b      	str	r3, [r7, #100]	@ 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8005f3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005f40:	4619      	mov	r1, r3
 8005f42:	482f      	ldr	r0, [pc, #188]	@ (8006000 <MX_TIM1_Init+0x128>)
 8005f44:	f003 fcc2 	bl	80098cc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8005f48:	482d      	ldr	r0, [pc, #180]	@ (8006000 <MX_TIM1_Init+0x128>)
 8005f4a:	f7ff fb0a 	bl	8005562 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8005f4e:	2100      	movs	r1, #0
 8005f50:	482b      	ldr	r0, [pc, #172]	@ (8006000 <MX_TIM1_Init+0x128>)
 8005f52:	f7ff fba1 	bl	8005698 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8005f56:	2101      	movs	r1, #1
 8005f58:	4829      	ldr	r0, [pc, #164]	@ (8006000 <MX_TIM1_Init+0x128>)
 8005f5a:	f7ff fb59 	bl	8005610 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005f5e:	2360      	movs	r3, #96	@ 0x60
 8005f60:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005f62:	2300      	movs	r3, #0
 8005f64:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005f72:	2300      	movs	r3, #0
 8005f74:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005f76:	2300      	movs	r3, #0
 8005f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	653b      	str	r3, [r7, #80]	@ 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005f7e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005f82:	461a      	mov	r2, r3
 8005f84:	2101      	movs	r1, #1
 8005f86:	481e      	ldr	r0, [pc, #120]	@ (8006000 <MX_TIM1_Init+0x128>)
 8005f88:	f003 fd3a 	bl	8009a00 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	481c      	ldr	r0, [pc, #112]	@ (8006000 <MX_TIM1_Init+0x128>)
 8005f90:	f7ff faf8 	bl	8005584 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8005f94:	2100      	movs	r1, #0
 8005f96:	481a      	ldr	r0, [pc, #104]	@ (8006000 <MX_TIM1_Init+0x128>)
 8005f98:	f7ff fb93 	bl	80056c2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8005f9c:	4818      	ldr	r0, [pc, #96]	@ (8006000 <MX_TIM1_Init+0x128>)
 8005f9e:	f7ff fba3 	bl	80056e8 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8005faa:	2300      	movs	r3, #0
 8005fac:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8005fb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8005fc2:	f107 031c 	add.w	r3, r7, #28
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	480d      	ldr	r0, [pc, #52]	@ (8006000 <MX_TIM1_Init+0x128>)
 8005fca:	f003 fd5a 	bl	8009a82 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8005fce:	2010      	movs	r0, #16
 8005fd0:	f7ff fa26 	bl	8005420 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PE9   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = IR_LED_PWM_Pin;
 8005fd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005fda:	2302      	movs	r3, #2
 8005fdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005fea:	2301      	movs	r3, #1
 8005fec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(IR_LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8005fee:	1d3b      	adds	r3, r7, #4
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4804      	ldr	r0, [pc, #16]	@ (8006004 <MX_TIM1_Init+0x12c>)
 8005ff4:	f003 f83f 	bl	8009076 <LL_GPIO_Init>

}
 8005ff8:	bf00      	nop
 8005ffa:	3768      	adds	r7, #104	@ 0x68
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40010000 	.word	0x40010000
 8006004:	40021000 	.word	0x40021000

08006008 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800600e:	1d3b      	adds	r3, r7, #4
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	605a      	str	r2, [r3, #4]
 8006016:	609a      	str	r2, [r3, #8]
 8006018:	60da      	str	r2, [r3, #12]
 800601a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800601c:	2002      	movs	r0, #2
 800601e:	f7ff fa17 	bl	8005450 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8006022:	2353      	movs	r3, #83	@ 0x53
 8006024:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8006026:	2300      	movs	r3, #0
 8006028:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9999;
 800602a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800602e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8006030:	2300      	movs	r3, #0
 8006032:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8006034:	1d3b      	adds	r3, r7, #4
 8006036:	4619      	mov	r1, r3
 8006038:	480a      	ldr	r0, [pc, #40]	@ (8006064 <MX_TIM3_Init+0x5c>)
 800603a:	f003 fc47 	bl	80098cc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800603e:	4809      	ldr	r0, [pc, #36]	@ (8006064 <MX_TIM3_Init+0x5c>)
 8006040:	f7ff fa8f 	bl	8005562 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8006044:	2100      	movs	r1, #0
 8006046:	4807      	ldr	r0, [pc, #28]	@ (8006064 <MX_TIM3_Init+0x5c>)
 8006048:	f7ff fb26 	bl	8005698 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800604c:	2100      	movs	r1, #0
 800604e:	4805      	ldr	r0, [pc, #20]	@ (8006064 <MX_TIM3_Init+0x5c>)
 8006050:	f7ff fb37 	bl	80056c2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8006054:	4803      	ldr	r0, [pc, #12]	@ (8006064 <MX_TIM3_Init+0x5c>)
 8006056:	f7ff fb47 	bl	80056e8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800605a:	bf00      	nop
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	40000400 	.word	0x40000400

08006068 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	@ 0x28
 800606c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800606e:	f107 0320 	add.w	r3, r7, #32
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006078:	1d3b      	adds	r3, r7, #4
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	605a      	str	r2, [r3, #4]
 8006080:	609a      	str	r2, [r3, #8]
 8006082:	60da      	str	r2, [r3, #12]
 8006084:	611a      	str	r2, [r3, #16]
 8006086:	615a      	str	r2, [r3, #20]
 8006088:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800608a:	4b32      	ldr	r3, [pc, #200]	@ (8006154 <MX_TIM4_Init+0xec>)
 800608c:	4a32      	ldr	r2, [pc, #200]	@ (8006158 <MX_TIM4_Init+0xf0>)
 800608e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006090:	4b30      	ldr	r3, [pc, #192]	@ (8006154 <MX_TIM4_Init+0xec>)
 8006092:	2200      	movs	r2, #0
 8006094:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006096:	4b2f      	ldr	r3, [pc, #188]	@ (8006154 <MX_TIM4_Init+0xec>)
 8006098:	2200      	movs	r2, #0
 800609a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800609c:	4b2d      	ldr	r3, [pc, #180]	@ (8006154 <MX_TIM4_Init+0xec>)
 800609e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80060a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006154 <MX_TIM4_Init+0xec>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006154 <MX_TIM4_Init+0xec>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80060b0:	4828      	ldr	r0, [pc, #160]	@ (8006154 <MX_TIM4_Init+0xec>)
 80060b2:	f002 fa35 	bl	8008520 <HAL_TIM_OC_Init>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80060bc:	f000 fa0e 	bl	80064dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060c0:	2300      	movs	r3, #0
 80060c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060c4:	2300      	movs	r3, #0
 80060c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80060c8:	f107 0320 	add.w	r3, r7, #32
 80060cc:	4619      	mov	r1, r3
 80060ce:	4821      	ldr	r0, [pc, #132]	@ (8006154 <MX_TIM4_Init+0xec>)
 80060d0:	f002 fd2e 	bl	8008b30 <HAL_TIMEx_MasterConfigSynchronization>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80060da:	f000 f9ff 	bl	80064dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80060de:	2300      	movs	r3, #0
 80060e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80060ee:	1d3b      	adds	r3, r7, #4
 80060f0:	2200      	movs	r2, #0
 80060f2:	4619      	mov	r1, r3
 80060f4:	4817      	ldr	r0, [pc, #92]	@ (8006154 <MX_TIM4_Init+0xec>)
 80060f6:	f002 fa63 	bl	80085c0 <HAL_TIM_OC_ConfigChannel>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006100:	f000 f9ec 	bl	80064dc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006104:	1d3b      	adds	r3, r7, #4
 8006106:	2204      	movs	r2, #4
 8006108:	4619      	mov	r1, r3
 800610a:	4812      	ldr	r0, [pc, #72]	@ (8006154 <MX_TIM4_Init+0xec>)
 800610c:	f002 fa58 	bl	80085c0 <HAL_TIM_OC_ConfigChannel>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006116:	f000 f9e1 	bl	80064dc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800611a:	1d3b      	adds	r3, r7, #4
 800611c:	2208      	movs	r2, #8
 800611e:	4619      	mov	r1, r3
 8006120:	480c      	ldr	r0, [pc, #48]	@ (8006154 <MX_TIM4_Init+0xec>)
 8006122:	f002 fa4d 	bl	80085c0 <HAL_TIM_OC_ConfigChannel>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 800612c:	f000 f9d6 	bl	80064dc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006130:	1d3b      	adds	r3, r7, #4
 8006132:	220c      	movs	r2, #12
 8006134:	4619      	mov	r1, r3
 8006136:	4807      	ldr	r0, [pc, #28]	@ (8006154 <MX_TIM4_Init+0xec>)
 8006138:	f002 fa42 	bl	80085c0 <HAL_TIM_OC_ConfigChannel>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8006142:	f000 f9cb 	bl	80064dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006146:	4803      	ldr	r0, [pc, #12]	@ (8006154 <MX_TIM4_Init+0xec>)
 8006148:	f000 faa4 	bl	8006694 <HAL_TIM_MspPostInit>

}
 800614c:	bf00      	nop
 800614e:	3728      	adds	r7, #40	@ 0x28
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20003564 	.word	0x20003564
 8006158:	40000800 	.word	0x40000800

0800615c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08e      	sub	sp, #56	@ 0x38
 8006160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8006162:	f107 031c 	add.w	r3, r7, #28
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	605a      	str	r2, [r3, #4]
 800616c:	609a      	str	r2, [r3, #8]
 800616e:	60da      	str	r2, [r3, #12]
 8006170:	611a      	str	r2, [r3, #16]
 8006172:	615a      	str	r2, [r3, #20]
 8006174:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006176:	1d3b      	adds	r3, r7, #4
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	605a      	str	r2, [r3, #4]
 800617e:	609a      	str	r2, [r3, #8]
 8006180:	60da      	str	r2, [r3, #12]
 8006182:	611a      	str	r2, [r3, #16]
 8006184:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8006186:	2010      	movs	r0, #16
 8006188:	f7ff f97a 	bl	8005480 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800618c:	2001      	movs	r0, #1
 800618e:	f7ff f947 	bl	8005420 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = EXP_RS485_TX_Pin|EXP_RS485_RX_Pin;
 8006192:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006196:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006198:	2302      	movs	r3, #2
 800619a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800619c:	2303      	movs	r3, #3
 800619e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80061a0:	2300      	movs	r3, #0
 80061a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80061a4:	2300      	movs	r3, #0
 80061a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80061a8:	2307      	movs	r3, #7
 80061aa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061ac:	1d3b      	adds	r3, r7, #4
 80061ae:	4619      	mov	r1, r3
 80061b0:	4818      	ldr	r0, [pc, #96]	@ (8006214 <MX_USART1_UART_Init+0xb8>)
 80061b2:	f002 ff60 	bl	8009076 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80061b6:	f7fe fdd3 	bl	8004d60 <__NVIC_GetPriorityGrouping>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2200      	movs	r2, #0
 80061be:	2100      	movs	r1, #0
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fe fe23 	bl	8004e0c <NVIC_EncodePriority>
 80061c6:	4603      	mov	r3, r0
 80061c8:	4619      	mov	r1, r3
 80061ca:	2025      	movs	r0, #37	@ 0x25
 80061cc:	f7fe fdf4 	bl	8004db8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80061d0:	2025      	movs	r0, #37	@ 0x25
 80061d2:	f7fe fdd3 	bl	8004d7c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80061d6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80061da:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80061dc:	2300      	movs	r3, #0
 80061de:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80061e0:	2300      	movs	r3, #0
 80061e2:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80061e4:	2300      	movs	r3, #0
 80061e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80061e8:	230c      	movs	r3, #12
 80061ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80061ec:	2300      	movs	r3, #0
 80061ee:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80061f0:	2300      	movs	r3, #0
 80061f2:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80061f4:	f107 031c 	add.w	r3, r7, #28
 80061f8:	4619      	mov	r1, r3
 80061fa:	4807      	ldr	r0, [pc, #28]	@ (8006218 <MX_USART1_UART_Init+0xbc>)
 80061fc:	f004 f890 	bl	800a320 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8006200:	4805      	ldr	r0, [pc, #20]	@ (8006218 <MX_USART1_UART_Init+0xbc>)
 8006202:	f7ff fa91 	bl	8005728 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8006206:	4804      	ldr	r0, [pc, #16]	@ (8006218 <MX_USART1_UART_Init+0xbc>)
 8006208:	f7ff fa7e 	bl	8005708 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800620c:	bf00      	nop
 800620e:	3738      	adds	r7, #56	@ 0x38
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	40020000 	.word	0x40020000
 8006218:	40011000 	.word	0x40011000

0800621c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08e      	sub	sp, #56	@ 0x38
 8006220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8006222:	f107 031c 	add.w	r3, r7, #28
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	605a      	str	r2, [r3, #4]
 800622c:	609a      	str	r2, [r3, #8]
 800622e:	60da      	str	r2, [r3, #12]
 8006230:	611a      	str	r2, [r3, #16]
 8006232:	615a      	str	r2, [r3, #20]
 8006234:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006236:	1d3b      	adds	r3, r7, #4
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	605a      	str	r2, [r3, #4]
 800623e:	609a      	str	r2, [r3, #8]
 8006240:	60da      	str	r2, [r3, #12]
 8006242:	611a      	str	r2, [r3, #16]
 8006244:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8006246:	2020      	movs	r0, #32
 8006248:	f7ff f91a 	bl	8005480 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800624c:	2004      	movs	r0, #4
 800624e:	f7ff f8e7 	bl	8005420 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = EXP_UART_TX_Pin|EXP_UART_RX_Pin;
 8006252:	23c0      	movs	r3, #192	@ 0xc0
 8006254:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006256:	2302      	movs	r3, #2
 8006258:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800625a:	2303      	movs	r3, #3
 800625c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800625e:	2300      	movs	r3, #0
 8006260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8006266:	2308      	movs	r3, #8
 8006268:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800626a:	1d3b      	adds	r3, r7, #4
 800626c:	4619      	mov	r1, r3
 800626e:	4819      	ldr	r0, [pc, #100]	@ (80062d4 <MX_USART6_UART_Init+0xb8>)
 8006270:	f002 ff01 	bl	8009076 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006274:	f7fe fd74 	bl	8004d60 <__NVIC_GetPriorityGrouping>
 8006278:	4603      	mov	r3, r0
 800627a:	2200      	movs	r2, #0
 800627c:	2100      	movs	r1, #0
 800627e:	4618      	mov	r0, r3
 8006280:	f7fe fdc4 	bl	8004e0c <NVIC_EncodePriority>
 8006284:	4603      	mov	r3, r0
 8006286:	4619      	mov	r1, r3
 8006288:	2047      	movs	r0, #71	@ 0x47
 800628a:	f7fe fd95 	bl	8004db8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800628e:	2047      	movs	r0, #71	@ 0x47
 8006290:	f7fe fd74 	bl	8004d7c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8006294:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8006298:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800629a:	2300      	movs	r3, #0
 800629c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800629e:	2300      	movs	r3, #0
 80062a0:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80062a2:	2300      	movs	r3, #0
 80062a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80062a6:	230c      	movs	r3, #12
 80062a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80062aa:	2300      	movs	r3, #0
 80062ac:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80062ae:	2300      	movs	r3, #0
 80062b0:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 80062b2:	f107 031c 	add.w	r3, r7, #28
 80062b6:	4619      	mov	r1, r3
 80062b8:	4807      	ldr	r0, [pc, #28]	@ (80062d8 <MX_USART6_UART_Init+0xbc>)
 80062ba:	f004 f831 	bl	800a320 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 80062be:	4806      	ldr	r0, [pc, #24]	@ (80062d8 <MX_USART6_UART_Init+0xbc>)
 80062c0:	f7ff fa32 	bl	8005728 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 80062c4:	4804      	ldr	r0, [pc, #16]	@ (80062d8 <MX_USART6_UART_Init+0xbc>)
 80062c6:	f7ff fa1f 	bl	8005708 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80062ca:	bf00      	nop
 80062cc:	3738      	adds	r7, #56	@ 0x38
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40020800 	.word	0x40020800
 80062d8:	40011400 	.word	0x40011400

080062dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80062e0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80062e4:	f7ff f89c 	bl	8005420 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80062e8:	f7fe fd3a 	bl	8004d60 <__NVIC_GetPriorityGrouping>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2200      	movs	r2, #0
 80062f0:	2100      	movs	r1, #0
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fe fd8a 	bl	8004e0c <NVIC_EncodePriority>
 80062f8:	4603      	mov	r3, r0
 80062fa:	4619      	mov	r1, r3
 80062fc:	2038      	movs	r0, #56	@ 0x38
 80062fe:	f7fe fd5b 	bl	8004db8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006302:	2038      	movs	r0, #56	@ 0x38
 8006304:	f7fe fd3a 	bl	8004d7c <__NVIC_EnableIRQ>

}
 8006308:	bf00      	nop
 800630a:	bd80      	pop	{r7, pc}

0800630c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006312:	463b      	mov	r3, r7
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	605a      	str	r2, [r3, #4]
 800631a:	609a      	str	r2, [r3, #8]
 800631c:	60da      	str	r2, [r3, #12]
 800631e:	611a      	str	r2, [r3, #16]
 8006320:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8006322:	2010      	movs	r0, #16
 8006324:	f7ff f87c 	bl	8005420 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8006328:	2004      	movs	r0, #4
 800632a:	f7ff f879 	bl	8005420 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800632e:	2080      	movs	r0, #128	@ 0x80
 8006330:	f7ff f876 	bl	8005420 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006334:	2001      	movs	r0, #1
 8006336:	f7ff f873 	bl	8005420 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800633a:	2002      	movs	r0, #2
 800633c:	f7ff f870 	bl	8005420 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8006340:	2008      	movs	r0, #8
 8006342:	f7ff f86d 	bl	8005420 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, TEC_3_SWEN_Pin|TEC_4_SWEN_Pin|TEC_2_SWEN_Pin|TEC_1_SWEN_Pin
 8006346:	f64e 417c 	movw	r1, #60540	@ 0xec7c
 800634a:	485f      	ldr	r0, [pc, #380]	@ (80064c8 <MX_GPIO_Init+0x1bc>)
 800634c:	f7ff fa10 	bl	8005770 <LL_GPIO_ResetOutputPin>
                          |TEC_1_EN_Pin|LED_G_Pin|LED_B_Pin|LASER_SW_EXT_CS_Pin
                          |LASER_SW_INT_CS_Pin|LASER_DAC_LATCH_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, TEC_2_EN_Pin|TEC_3_EN_Pin|TEC_4_EN_Pin|PHOTO_ADC_EOC_Pin);
 8006350:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8006354:	485d      	ldr	r0, [pc, #372]	@ (80064cc <MX_GPIO_Init+0x1c0>)
 8006356:	f7ff fa0b 	bl	8005770 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800635a:	2102      	movs	r1, #2
 800635c:	485c      	ldr	r0, [pc, #368]	@ (80064d0 <MX_GPIO_Init+0x1c4>)
 800635e:	f7ff fa07 	bl	8005770 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, EXP_RS485_NRE_Pin|PHOTO_PD_CS_Pin|PHOTO_ADC_CS_Pin|PHOTO_ADC_CONV_Pin
 8006362:	f640 7134 	movw	r1, #3892	@ 0xf34
 8006366:	485b      	ldr	r0, [pc, #364]	@ (80064d4 <MX_GPIO_Init+0x1c8>)
 8006368:	f7ff fa02 	bl	8005770 <LL_GPIO_ResetOutputPin>
                          |FRAM_CS_Pin|EF_5_EN_Pin|TEC_ADC_CS_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, SENSOR2_EN_Pin|SENSOR1_EN_Pin);
 800636c:	2130      	movs	r1, #48	@ 0x30
 800636e:	485a      	ldr	r0, [pc, #360]	@ (80064d8 <MX_GPIO_Init+0x1cc>)
 8006370:	f7ff f9fe 	bl	8005770 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, LASER_DAC_CS_Pin|TEC_2_CS_Pin|TEC_1_CS_Pin);
 8006374:	f241 0103 	movw	r1, #4099	@ 0x1003
 8006378:	4853      	ldr	r0, [pc, #332]	@ (80064c8 <MX_GPIO_Init+0x1bc>)
 800637a:	f7ff f9eb 	bl	8005754 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, EXP_RS485_DE_Pin|TEC_4_CS_Pin|TEC_3_CS_Pin);
 800637e:	f44f 5198 	mov.w	r1, #4864	@ 0x1300
 8006382:	4855      	ldr	r0, [pc, #340]	@ (80064d8 <MX_GPIO_Init+0x1cc>)
 8006384:	f7ff f9e6 	bl	8005754 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = TEC_3_SWEN_Pin|TEC_1_SWEN_Pin;
 8006388:	2324      	movs	r3, #36	@ 0x24
 800638a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800638c:	2301      	movs	r3, #1
 800638e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006390:	2300      	movs	r3, #0
 8006392:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8006398:	2302      	movs	r3, #2
 800639a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800639c:	463b      	mov	r3, r7
 800639e:	4619      	mov	r1, r3
 80063a0:	4849      	ldr	r0, [pc, #292]	@ (80064c8 <MX_GPIO_Init+0x1bc>)
 80063a2:	f002 fe68 	bl	8009076 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_4_SWEN_Pin|TEC_2_SWEN_Pin|TEC_1_EN_Pin|LED_G_Pin
 80063a6:	f64e 435b 	movw	r3, #60507	@ 0xec5b
 80063aa:	603b      	str	r3, [r7, #0]
                          |LED_B_Pin|LASER_SW_EXT_CS_Pin|LASER_SW_INT_CS_Pin|LASER_DAC_LATCH_Pin
                          |TEC_2_CS_Pin|TEC_1_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80063ac:	2301      	movs	r3, #1
 80063ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80063b0:	2300      	movs	r3, #0
 80063b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80063b8:	2300      	movs	r3, #0
 80063ba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80063bc:	463b      	mov	r3, r7
 80063be:	4619      	mov	r1, r3
 80063c0:	4841      	ldr	r0, [pc, #260]	@ (80064c8 <MX_GPIO_Init+0x1bc>)
 80063c2:	f002 fe58 	bl	8009076 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_2_EN_Pin|TEC_3_EN_Pin|TEC_4_EN_Pin|PHOTO_ADC_EOC_Pin;
 80063c6:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 80063ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80063cc:	2301      	movs	r3, #1
 80063ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80063d8:	2300      	movs	r3, #0
 80063da:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063dc:	463b      	mov	r3, r7
 80063de:	4619      	mov	r1, r3
 80063e0:	483a      	ldr	r0, [pc, #232]	@ (80064cc <MX_GPIO_Init+0x1c0>)
 80063e2:	f002 fe48 	bl	8009076 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin;
 80063e6:	2302      	movs	r3, #2
 80063e8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80063ea:	2301      	movs	r3, #1
 80063ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80063ee:	2300      	movs	r3, #0
 80063f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80063f6:	2300      	movs	r3, #0
 80063f8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(WD_DONE_GPIO_Port, &GPIO_InitStruct);
 80063fa:	463b      	mov	r3, r7
 80063fc:	4619      	mov	r1, r3
 80063fe:	4834      	ldr	r0, [pc, #208]	@ (80064d0 <MX_GPIO_Init+0x1c4>)
 8006400:	f002 fe39 	bl	8009076 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_12_AUX_Pin;
 8006404:	2380      	movs	r3, #128	@ 0x80
 8006406:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8006408:	2300      	movs	r3, #0
 800640a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800640c:	2300      	movs	r3, #0
 800640e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_12_AUX_GPIO_Port, &GPIO_InitStruct);
 8006410:	463b      	mov	r3, r7
 8006412:	4619      	mov	r1, r3
 8006414:	482c      	ldr	r0, [pc, #176]	@ (80064c8 <MX_GPIO_Init+0x1bc>)
 8006416:	f002 fe2e 	bl	8009076 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LASER_DAC_CS_Pin;
 800641a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800641e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006420:	2301      	movs	r3, #1
 8006422:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006424:	2300      	movs	r3, #0
 8006426:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800642c:	2301      	movs	r3, #1
 800642e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LASER_DAC_CS_GPIO_Port, &GPIO_InitStruct);
 8006430:	463b      	mov	r3, r7
 8006432:	4619      	mov	r1, r3
 8006434:	4824      	ldr	r0, [pc, #144]	@ (80064c8 <MX_GPIO_Init+0x1bc>)
 8006436:	f002 fe1e 	bl	8009076 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EXP_RS485_DE_Pin|SENSOR2_EN_Pin|SENSOR1_EN_Pin|TEC_4_CS_Pin
 800643a:	f241 3330 	movw	r3, #4912	@ 0x1330
 800643e:	603b      	str	r3, [r7, #0]
                          |TEC_3_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006440:	2301      	movs	r3, #1
 8006442:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006444:	2300      	movs	r3, #0
 8006446:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006448:	2300      	movs	r3, #0
 800644a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800644c:	2300      	movs	r3, #0
 800644e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006450:	463b      	mov	r3, r7
 8006452:	4619      	mov	r1, r3
 8006454:	4820      	ldr	r0, [pc, #128]	@ (80064d8 <MX_GPIO_Init+0x1cc>)
 8006456:	f002 fe0e 	bl	8009076 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EXP_RS485_NRE_Pin|PHOTO_PD_CS_Pin|PHOTO_ADC_CS_Pin|PHOTO_ADC_CONV_Pin
 800645a:	f640 7334 	movw	r3, #3892	@ 0xf34
 800645e:	603b      	str	r3, [r7, #0]
                          |FRAM_CS_Pin|EF_5_EN_Pin|TEC_ADC_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006460:	2301      	movs	r3, #1
 8006462:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006464:	2300      	movs	r3, #0
 8006466:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800646c:	2300      	movs	r3, #0
 800646e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006470:	463b      	mov	r3, r7
 8006472:	4619      	mov	r1, r3
 8006474:	4817      	ldr	r0, [pc, #92]	@ (80064d4 <MX_GPIO_Init+0x1c8>)
 8006476:	f002 fdfe 	bl	8009076 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IRQ1_Pin;
 800647a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800647e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8006480:	2300      	movs	r3, #0
 8006482:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006484:	2300      	movs	r3, #0
 8006486:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IRQ1_GPIO_Port, &GPIO_InitStruct);
 8006488:	463b      	mov	r3, r7
 800648a:	4619      	mov	r1, r3
 800648c:	480f      	ldr	r0, [pc, #60]	@ (80064cc <MX_GPIO_Init+0x1c0>)
 800648e:	f002 fdf2 	bl	8009076 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IRQ0_Pin;
 8006492:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006496:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8006498:	2300      	movs	r3, #0
 800649a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800649c:	2300      	movs	r3, #0
 800649e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IRQ0_GPIO_Port, &GPIO_InitStruct);
 80064a0:	463b      	mov	r3, r7
 80064a2:	4619      	mov	r1, r3
 80064a4:	480a      	ldr	r0, [pc, #40]	@ (80064d0 <MX_GPIO_Init+0x1c4>)
 80064a6:	f002 fde6 	bl	8009076 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FF_5_AUX_Pin;
 80064aa:	2308      	movs	r3, #8
 80064ac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80064ae:	2300      	movs	r3, #0
 80064b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80064b2:	2300      	movs	r3, #0
 80064b4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FF_5_AUX_GPIO_Port, &GPIO_InitStruct);
 80064b6:	463b      	mov	r3, r7
 80064b8:	4619      	mov	r1, r3
 80064ba:	4806      	ldr	r0, [pc, #24]	@ (80064d4 <MX_GPIO_Init+0x1c8>)
 80064bc:	f002 fddb 	bl	8009076 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80064c0:	bf00      	nop
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	40021000 	.word	0x40021000
 80064cc:	40020800 	.word	0x40020800
 80064d0:	40020000 	.word	0x40020000
 80064d4:	40020c00 	.word	0x40020c00
 80064d8:	40020400 	.word	0x40020400

080064dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80064e0:	b672      	cpsid	i
}
 80064e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80064e4:	bf00      	nop
 80064e6:	e7fd      	b.n	80064e4 <Error_Handler+0x8>

080064e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064ee:	2300      	movs	r3, #0
 80064f0:	607b      	str	r3, [r7, #4]
 80064f2:	4b10      	ldr	r3, [pc, #64]	@ (8006534 <HAL_MspInit+0x4c>)
 80064f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f6:	4a0f      	ldr	r2, [pc, #60]	@ (8006534 <HAL_MspInit+0x4c>)
 80064f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80064fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006534 <HAL_MspInit+0x4c>)
 8006500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006506:	607b      	str	r3, [r7, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800650a:	2300      	movs	r3, #0
 800650c:	603b      	str	r3, [r7, #0]
 800650e:	4b09      	ldr	r3, [pc, #36]	@ (8006534 <HAL_MspInit+0x4c>)
 8006510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006512:	4a08      	ldr	r2, [pc, #32]	@ (8006534 <HAL_MspInit+0x4c>)
 8006514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006518:	6413      	str	r3, [r2, #64]	@ 0x40
 800651a:	4b06      	ldr	r3, [pc, #24]	@ (8006534 <HAL_MspInit+0x4c>)
 800651c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	40023800 	.word	0x40023800

08006538 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08a      	sub	sp, #40	@ 0x28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006540:	f107 0314 	add.w	r3, r7, #20
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	605a      	str	r2, [r3, #4]
 800654a:	609a      	str	r2, [r3, #8]
 800654c:	60da      	str	r2, [r3, #12]
 800654e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a17      	ldr	r2, [pc, #92]	@ (80065b4 <HAL_ADC_MspInit+0x7c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d127      	bne.n	80065aa <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800655a:	2300      	movs	r3, #0
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	4b16      	ldr	r3, [pc, #88]	@ (80065b8 <HAL_ADC_MspInit+0x80>)
 8006560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006562:	4a15      	ldr	r2, [pc, #84]	@ (80065b8 <HAL_ADC_MspInit+0x80>)
 8006564:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006568:	6453      	str	r3, [r2, #68]	@ 0x44
 800656a:	4b13      	ldr	r3, [pc, #76]	@ (80065b8 <HAL_ADC_MspInit+0x80>)
 800656c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006572:	613b      	str	r3, [r7, #16]
 8006574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	4b0f      	ldr	r3, [pc, #60]	@ (80065b8 <HAL_ADC_MspInit+0x80>)
 800657c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657e:	4a0e      	ldr	r2, [pc, #56]	@ (80065b8 <HAL_ADC_MspInit+0x80>)
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	6313      	str	r3, [r2, #48]	@ 0x30
 8006586:	4b0c      	ldr	r3, [pc, #48]	@ (80065b8 <HAL_ADC_MspInit+0x80>)
 8006588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA2     ------> ADC3_IN2
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006592:	230c      	movs	r3, #12
 8006594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006596:	2303      	movs	r3, #3
 8006598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800659a:	2300      	movs	r3, #0
 800659c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800659e:	f107 0314 	add.w	r3, r7, #20
 80065a2:	4619      	mov	r1, r3
 80065a4:	4805      	ldr	r0, [pc, #20]	@ (80065bc <HAL_ADC_MspInit+0x84>)
 80065a6:	f001 f84d 	bl	8007644 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 80065aa:	bf00      	nop
 80065ac:	3728      	adds	r7, #40	@ 0x28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	40012200 	.word	0x40012200
 80065b8:	40023800 	.word	0x40023800
 80065bc:	40020000 	.word	0x40020000

080065c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08a      	sub	sp, #40	@ 0x28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065c8:	f107 0314 	add.w	r3, r7, #20
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	605a      	str	r2, [r3, #4]
 80065d2:	609a      	str	r2, [r3, #8]
 80065d4:	60da      	str	r2, [r3, #12]
 80065d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a19      	ldr	r2, [pc, #100]	@ (8006644 <HAL_SPI_MspInit+0x84>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d12c      	bne.n	800663c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80065e2:	2300      	movs	r3, #0
 80065e4:	613b      	str	r3, [r7, #16]
 80065e6:	4b18      	ldr	r3, [pc, #96]	@ (8006648 <HAL_SPI_MspInit+0x88>)
 80065e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ea:	4a17      	ldr	r2, [pc, #92]	@ (8006648 <HAL_SPI_MspInit+0x88>)
 80065ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80065f2:	4b15      	ldr	r3, [pc, #84]	@ (8006648 <HAL_SPI_MspInit+0x88>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065fe:	2300      	movs	r3, #0
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	4b11      	ldr	r3, [pc, #68]	@ (8006648 <HAL_SPI_MspInit+0x88>)
 8006604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006606:	4a10      	ldr	r2, [pc, #64]	@ (8006648 <HAL_SPI_MspInit+0x88>)
 8006608:	f043 0302 	orr.w	r3, r3, #2
 800660c:	6313      	str	r3, [r2, #48]	@ 0x30
 800660e:	4b0e      	ldr	r3, [pc, #56]	@ (8006648 <HAL_SPI_MspInit+0x88>)
 8006610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800661a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800661e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006620:	2302      	movs	r3, #2
 8006622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006624:	2300      	movs	r3, #0
 8006626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006628:	2303      	movs	r3, #3
 800662a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800662c:	2305      	movs	r3, #5
 800662e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006630:	f107 0314 	add.w	r3, r7, #20
 8006634:	4619      	mov	r1, r3
 8006636:	4805      	ldr	r0, [pc, #20]	@ (800664c <HAL_SPI_MspInit+0x8c>)
 8006638:	f001 f804 	bl	8007644 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800663c:	bf00      	nop
 800663e:	3728      	adds	r7, #40	@ 0x28
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40003800 	.word	0x40003800
 8006648:	40023800 	.word	0x40023800
 800664c:	40020400 	.word	0x40020400

08006650 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a0b      	ldr	r2, [pc, #44]	@ (800668c <HAL_TIM_OC_MspInit+0x3c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d10d      	bne.n	800667e <HAL_TIM_OC_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	4b0a      	ldr	r3, [pc, #40]	@ (8006690 <HAL_TIM_OC_MspInit+0x40>)
 8006668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666a:	4a09      	ldr	r2, [pc, #36]	@ (8006690 <HAL_TIM_OC_MspInit+0x40>)
 800666c:	f043 0304 	orr.w	r3, r3, #4
 8006670:	6413      	str	r3, [r2, #64]	@ 0x40
 8006672:	4b07      	ldr	r3, [pc, #28]	@ (8006690 <HAL_TIM_OC_MspInit+0x40>)
 8006674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800667e:	bf00      	nop
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	40000800 	.word	0x40000800
 8006690:	40023800 	.word	0x40023800

08006694 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800669c:	f107 030c 	add.w	r3, r7, #12
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	605a      	str	r2, [r3, #4]
 80066a6:	609a      	str	r2, [r3, #8]
 80066a8:	60da      	str	r2, [r3, #12]
 80066aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a12      	ldr	r2, [pc, #72]	@ (80066fc <HAL_TIM_MspPostInit+0x68>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d11e      	bne.n	80066f4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80066b6:	2300      	movs	r3, #0
 80066b8:	60bb      	str	r3, [r7, #8]
 80066ba:	4b11      	ldr	r3, [pc, #68]	@ (8006700 <HAL_TIM_MspPostInit+0x6c>)
 80066bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066be:	4a10      	ldr	r2, [pc, #64]	@ (8006700 <HAL_TIM_MspPostInit+0x6c>)
 80066c0:	f043 0308 	orr.w	r3, r3, #8
 80066c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80066c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006700 <HAL_TIM_MspPostInit+0x6c>)
 80066c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	60bb      	str	r3, [r7, #8]
 80066d0:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80066d2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80066d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066d8:	2302      	movs	r3, #2
 80066da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066dc:	2300      	movs	r3, #0
 80066de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066e0:	2300      	movs	r3, #0
 80066e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80066e4:	2302      	movs	r3, #2
 80066e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066e8:	f107 030c 	add.w	r3, r7, #12
 80066ec:	4619      	mov	r1, r3
 80066ee:	4805      	ldr	r0, [pc, #20]	@ (8006704 <HAL_TIM_MspPostInit+0x70>)
 80066f0:	f000 ffa8 	bl	8007644 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80066f4:	bf00      	nop
 80066f6:	3720      	adds	r7, #32
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40000800 	.word	0x40000800
 8006700:	40023800 	.word	0x40023800
 8006704:	40020c00 	.word	0x40020c00

08006708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800670c:	bf00      	nop
 800670e:	e7fd      	b.n	800670c <NMI_Handler+0x4>

08006710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006710:	b480      	push	{r7}
 8006712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006714:	bf00      	nop
 8006716:	e7fd      	b.n	8006714 <HardFault_Handler+0x4>

08006718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800671c:	bf00      	nop
 800671e:	e7fd      	b.n	800671c <MemManage_Handler+0x4>

08006720 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006724:	bf00      	nop
 8006726:	e7fd      	b.n	8006724 <BusFault_Handler+0x4>

08006728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006728:	b480      	push	{r7}
 800672a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800672c:	bf00      	nop
 800672e:	e7fd      	b.n	800672c <UsageFault_Handler+0x4>

08006730 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006734:	bf00      	nop
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800673e:	b480      	push	{r7}
 8006740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006742:	bf00      	nop
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006750:	bf00      	nop
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
	...

0800675c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	g_systick_count++;
 8006760:	4b05      	ldr	r3, [pc, #20]	@ (8006778 <SysTick_Handler+0x1c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3301      	adds	r3, #1
 8006766:	4a04      	ldr	r2, [pc, #16]	@ (8006778 <SysTick_Handler+0x1c>)
 8006768:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 800676a:	f003 ff25 	bl	800a5b8 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800676e:	f000 fbdd 	bl	8006f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006772:	bf00      	nop
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	200035ac 	.word	0x200035ac

0800677c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
	I2C_event_IRQ();
 8006780:	f7fa f9f6 	bl	8000b70 <I2C_event_IRQ>
  /* USER CODE END I2C2_EV_IRQn 0 */
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8006784:	bf00      	nop
 8006786:	bd80      	pop	{r7, pc}

08006788 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */
	I2C_error_IRQ();
 800678c:	f7fa faf8 	bl	8000d80 <I2C_error_IRQ>
  /* USER CODE END I2C2_ER_IRQn 0 */
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8006790:	bf00      	nop
 8006792:	bd80      	pop	{r7, pc}

08006794 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	UART_Ring_ISR(USART1);
 8006798:	4802      	ldr	r0, [pc, #8]	@ (80067a4 <USART1_IRQHandler+0x10>)
 800679a:	f7fa fe3b 	bl	8001414 <UART_Ring_ISR>
  /* USER CODE END USART1_IRQn 1 */
}
 800679e:	bf00      	nop
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	40011000 	.word	0x40011000

080067a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80067ac:	bf00      	nop
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */
	UART_Ring_ISR(USART6);
 80067bc:	4802      	ldr	r0, [pc, #8]	@ (80067c8 <USART6_IRQHandler+0x10>)
 80067be:	f7fa fe29 	bl	8001414 <UART_Ring_ISR>
  /* USER CODE END USART6_IRQn 1 */
}
 80067c2:	bf00      	nop
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40011400 	.word	0x40011400

080067cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80067d4:	4a14      	ldr	r2, [pc, #80]	@ (8006828 <_sbrk+0x5c>)
 80067d6:	4b15      	ldr	r3, [pc, #84]	@ (800682c <_sbrk+0x60>)
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80067e0:	4b13      	ldr	r3, [pc, #76]	@ (8006830 <_sbrk+0x64>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d102      	bne.n	80067ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80067e8:	4b11      	ldr	r3, [pc, #68]	@ (8006830 <_sbrk+0x64>)
 80067ea:	4a12      	ldr	r2, [pc, #72]	@ (8006834 <_sbrk+0x68>)
 80067ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80067ee:	4b10      	ldr	r3, [pc, #64]	@ (8006830 <_sbrk+0x64>)
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4413      	add	r3, r2
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d207      	bcs.n	800680c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80067fc:	f004 f896 	bl	800a92c <__errno>
 8006800:	4603      	mov	r3, r0
 8006802:	220c      	movs	r2, #12
 8006804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006806:	f04f 33ff 	mov.w	r3, #4294967295
 800680a:	e009      	b.n	8006820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800680c:	4b08      	ldr	r3, [pc, #32]	@ (8006830 <_sbrk+0x64>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006812:	4b07      	ldr	r3, [pc, #28]	@ (8006830 <_sbrk+0x64>)
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4413      	add	r3, r2
 800681a:	4a05      	ldr	r2, [pc, #20]	@ (8006830 <_sbrk+0x64>)
 800681c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800681e:	68fb      	ldr	r3, [r7, #12]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	20020000 	.word	0x20020000
 800682c:	00000400 	.word	0x00000400
 8006830:	200035b0 	.word	0x200035b0
 8006834:	20003928 	.word	0x20003928

08006838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800683c:	4b06      	ldr	r3, [pc, #24]	@ (8006858 <SystemInit+0x20>)
 800683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006842:	4a05      	ldr	r2, [pc, #20]	@ (8006858 <SystemInit+0x20>)
 8006844:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006848:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800684c:	bf00      	nop
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	e000ed00 	.word	0xe000ed00

0800685c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800685c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006894 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006860:	f7ff ffea 	bl	8006838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006864:	480c      	ldr	r0, [pc, #48]	@ (8006898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006866:	490d      	ldr	r1, [pc, #52]	@ (800689c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006868:	4a0d      	ldr	r2, [pc, #52]	@ (80068a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800686a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800686c:	e002      	b.n	8006874 <LoopCopyDataInit>

0800686e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800686e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006872:	3304      	adds	r3, #4

08006874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006878:	d3f9      	bcc.n	800686e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800687a:	4a0a      	ldr	r2, [pc, #40]	@ (80068a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800687c:	4c0a      	ldr	r4, [pc, #40]	@ (80068a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800687e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006880:	e001      	b.n	8006886 <LoopFillZerobss>

08006882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006884:	3204      	adds	r2, #4

08006886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006888:	d3fb      	bcc.n	8006882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800688a:	f004 f855 	bl	800a938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800688e:	f7fe ff7f 	bl	8005790 <main>
  bx  lr    
 8006892:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800689c:	2000239c 	.word	0x2000239c
  ldr r2, =_sidata
 80068a0:	0800ca3c 	.word	0x0800ca3c
  ldr r2, =_sbss
 80068a4:	2000239c 	.word	0x2000239c
  ldr r4, =_ebss
 80068a8:	20003928 	.word	0x20003928

080068ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068ac:	e7fe      	b.n	80068ac <ADC_IRQHandler>
	...

080068b0 <temperature_update>:
	 0,								// Temp_auto; 			// xxxx temp3_auto temp2_auto temp1_auto temp0_auto (LSB)
	 0,								// Tec_Heater_status;	// heater3_on heater2_on heater1_on heater0_on tec3_on tec2_on tec1_on tec0_on
};

static void temperature_update(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
	if (s_Temperature_CurrentState.Temp_change_flag)
 80068b6:	4b3e      	ldr	r3, [pc, #248]	@ (80069b0 <temperature_update+0x100>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d039      	beq.n	8006932 <temperature_update+0x82>
	{
		uint8_t Tec_dir = 0;
 80068be:	2300      	movs	r3, #0
 80068c0:	71bb      	strb	r3, [r7, #6]
		for (uint8_t channel = 0; channel < 4; channel ++)
 80068c2:	2300      	movs	r3, #0
 80068c4:	71fb      	strb	r3, [r7, #7]
 80068c6:	e02e      	b.n	8006926 <temperature_update+0x76>
		{
			Tec_dir = ((s_Temperature_CurrentState.Tec_dir & (1 << channel)) == (1 << channel)) ? TEC_HEAT : TEC_COOL;
 80068c8:	4b39      	ldr	r3, [pc, #228]	@ (80069b0 <temperature_update+0x100>)
 80068ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80068ce:	4619      	mov	r1, r3
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	2201      	movs	r2, #1
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	ea01 0203 	and.w	r2, r1, r3
 80068dc:	79fb      	ldrb	r3, [r7, #7]
 80068de:	2101      	movs	r1, #1
 80068e0:	fa01 f303 	lsl.w	r3, r1, r3
 80068e4:	429a      	cmp	r2, r3
 80068e6:	bf0c      	ite	eq
 80068e8:	2301      	moveq	r3, #1
 80068ea:	2300      	movne	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	71bb      	strb	r3, [r7, #6]
			lt8722_set_output_voltage_channel(channel, Tec_dir, s_Temperature_CurrentState.Tec_vol[channel]);
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	4a2f      	ldr	r2, [pc, #188]	@ (80069b0 <temperature_update+0x100>)
 80068f4:	3302      	adds	r3, #2
 80068f6:	00db      	lsls	r3, r3, #3
 80068f8:	4413      	add	r3, r2
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	79b9      	ldrb	r1, [r7, #6]
 8006900:	79f8      	ldrb	r0, [r7, #7]
 8006902:	f7fd fd87 	bl	8004414 <lt8722_set_output_voltage_channel>
			heater_set_duty_pwm_channel(channel, s_Temperature_CurrentState.Heater_duty[channel]);
 8006906:	79fb      	ldrb	r3, [r7, #7]
 8006908:	4a29      	ldr	r2, [pc, #164]	@ (80069b0 <temperature_update+0x100>)
 800690a:	3318      	adds	r3, #24
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	4413      	add	r3, r2
 8006910:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006914:	b29a      	uxth	r2, r3
 8006916:	79fb      	ldrb	r3, [r7, #7]
 8006918:	4611      	mov	r1, r2
 800691a:	4618      	mov	r0, r3
 800691c:	f7fd f962 	bl	8003be4 <heater_set_duty_pwm_channel>
		for (uint8_t channel = 0; channel < 4; channel ++)
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	3301      	adds	r3, #1
 8006924:	71fb      	strb	r3, [r7, #7]
 8006926:	79fb      	ldrb	r3, [r7, #7]
 8006928:	2b03      	cmp	r3, #3
 800692a:	d9cd      	bls.n	80068c8 <temperature_update+0x18>
		}
		s_Temperature_CurrentState.Temp_change_flag = 0;
 800692c:	4b20      	ldr	r3, [pc, #128]	@ (80069b0 <temperature_update+0x100>)
 800692e:	2200      	movs	r2, #0
 8006930:	701a      	strb	r2, [r3, #0]
	}
	NTC_get_temperature(s_Temperature_CurrentState.NTC_temp);
 8006932:	4820      	ldr	r0, [pc, #128]	@ (80069b4 <temperature_update+0x104>)
 8006934:	f7fe f894 	bl	8004a60 <NTC_get_temperature>
	if ((s_Temperature_CurrentState.Temp_auto & (1 << TEMP0_AUTO)) == (1 << TEMP0_AUTO))
 8006938:	4b1d      	ldr	r3, [pc, #116]	@ (80069b0 <temperature_update+0x100>)
 800693a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d006      	beq.n	8006954 <temperature_update+0xa4>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temp[0], 0);
 8006946:	4b1a      	ldr	r3, [pc, #104]	@ (80069b0 <temperature_update+0x100>)
 8006948:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
 800694c:	2100      	movs	r1, #0
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f832 	bl	80069b8 <temperature_auto_ctrl>
	if ((s_Temperature_CurrentState.Temp_auto & (1 << TEMP1_AUTO)) == (1 << TEMP1_AUTO))
 8006954:	4b16      	ldr	r3, [pc, #88]	@ (80069b0 <temperature_update+0x100>)
 8006956:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d006      	beq.n	8006970 <temperature_update+0xc0>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temp[1], 1);
 8006962:	4b13      	ldr	r3, [pc, #76]	@ (80069b0 <temperature_update+0x100>)
 8006964:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8006968:	2101      	movs	r1, #1
 800696a:	4618      	mov	r0, r3
 800696c:	f000 f824 	bl	80069b8 <temperature_auto_ctrl>
	if ((s_Temperature_CurrentState.Temp_auto & (1 << TEMP2_AUTO)) == (1 << TEMP2_AUTO))
 8006970:	4b0f      	ldr	r3, [pc, #60]	@ (80069b0 <temperature_update+0x100>)
 8006972:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b00      	cmp	r3, #0
 800697c:	d006      	beq.n	800698c <temperature_update+0xdc>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temp[2], 2);
 800697e:	4b0c      	ldr	r3, [pc, #48]	@ (80069b0 <temperature_update+0x100>)
 8006980:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8006984:	2102      	movs	r1, #2
 8006986:	4618      	mov	r0, r3
 8006988:	f000 f816 	bl	80069b8 <temperature_auto_ctrl>
	if ((s_Temperature_CurrentState.Temp_auto & (1 << TEMP3_AUTO)) == (1 << TEMP3_AUTO))
 800698c:	4b08      	ldr	r3, [pc, #32]	@ (80069b0 <temperature_update+0x100>)
 800698e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006992:	f003 0308 	and.w	r3, r3, #8
 8006996:	2b00      	cmp	r3, #0
 8006998:	d006      	beq.n	80069a8 <temperature_update+0xf8>
		temperature_auto_ctrl(s_Temperature_CurrentState.NTC_temp[3], 3);
 800699a:	4b05      	ldr	r3, [pc, #20]	@ (80069b0 <temperature_update+0x100>)
 800699c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80069a0:	2103      	movs	r1, #3
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 f808 	bl	80069b8 <temperature_auto_ctrl>
}
 80069a8:	bf00      	nop
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	200022e0 	.word	0x200022e0
 80069b4:	2000231a 	.word	0x2000231a

080069b8 <temperature_auto_ctrl>:

void temperature_auto_ctrl(int16_t temperature_now, uint8_t channel)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	460a      	mov	r2, r1
 80069c2:	80fb      	strh	r3, [r7, #6]
 80069c4:	4613      	mov	r3, r2
 80069c6:	717b      	strb	r3, [r7, #5]
	// Case: temperature is higher than expected temperature
	// Using: TEC
	if (temperature_now > s_Temperature_CurrentState.Temp_setpoint[channel] + s_Temperature_CurrentState.High_Threshold)
 80069c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80069cc:	797b      	ldrb	r3, [r7, #5]
 80069ce:	495f      	ldr	r1, [pc, #380]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	440b      	add	r3, r1
 80069d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80069d8:	4619      	mov	r1, r3
 80069da:	4b5c      	ldr	r3, [pc, #368]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 80069dc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80069e0:	440b      	add	r3, r1
 80069e2:	429a      	cmp	r2, r3
 80069e4:	dd47      	ble.n	8006a76 <temperature_auto_ctrl+0xbe>
	{
//		UART_SendStringRing(UART_CMDLINE, "nhiet cao");
		// turn off heater
		heater_set_duty_pwm_channel(channel, 0);
 80069e6:	797b      	ldrb	r3, [r7, #5]
 80069e8:	2100      	movs	r1, #0
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fd f8fa 	bl	8003be4 <heater_set_duty_pwm_channel>
		// turn on tec with COOL
		s_Temperature_CurrentState.Tec_dir &= ~(1 << channel);
 80069f0:	4b56      	ldr	r3, [pc, #344]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 80069f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80069f6:	b25a      	sxtb	r2, r3
 80069f8:	797b      	ldrb	r3, [r7, #5]
 80069fa:	2101      	movs	r1, #1
 80069fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006a00:	b25b      	sxtb	r3, r3
 8006a02:	43db      	mvns	r3, r3
 8006a04:	b25b      	sxtb	r3, r3
 8006a06:	4013      	ands	r3, r2
 8006a08:	b25b      	sxtb	r3, r3
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	4b4f      	ldr	r3, [pc, #316]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 8006a0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		lt8722_set_output_voltage_channel(channel, TEC_COOL, s_Temperature_CurrentState.Tec_vol[channel]);
 8006a12:	797b      	ldrb	r3, [r7, #5]
 8006a14:	4a4d      	ldr	r2, [pc, #308]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 8006a16:	3302      	adds	r3, #2
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	7978      	ldrb	r0, [r7, #5]
 8006a22:	2100      	movs	r1, #0
 8006a24:	f7fd fcf6 	bl	8004414 <lt8722_set_output_voltage_channel>
		lt8722_set_swen_req(channel, LT8722_SWEN_REQ_ENABLED);
 8006a28:	797b      	ldrb	r3, [r7, #5]
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fd fbb6 	bl	800419e <lt8722_set_swen_req>
		// update status
		s_Temperature_CurrentState.Tec_Heater_status |= (1 << channel);
 8006a32:	4b46      	ldr	r3, [pc, #280]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 8006a34:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006a38:	b25a      	sxtb	r2, r3
 8006a3a:	797b      	ldrb	r3, [r7, #5]
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a42:	b25b      	sxtb	r3, r3
 8006a44:	4313      	orrs	r3, r2
 8006a46:	b25b      	sxtb	r3, r3
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	4b40      	ldr	r3, [pc, #256]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 8006a4c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		s_Temperature_CurrentState.Tec_Heater_status &= ~(1 << (channel + 4));
 8006a50:	4b3e      	ldr	r3, [pc, #248]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 8006a52:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006a56:	b25a      	sxtb	r2, r3
 8006a58:	797b      	ldrb	r3, [r7, #5]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a62:	b25b      	sxtb	r3, r3
 8006a64:	43db      	mvns	r3, r3
 8006a66:	b25b      	sxtb	r3, r3
 8006a68:	4013      	ands	r3, r2
 8006a6a:	b25b      	sxtb	r3, r3
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	4b37      	ldr	r3, [pc, #220]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 8006a70:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
		heater_set_duty_pwm_channel(channel, 0);
		// update status
		s_Temperature_CurrentState.Tec_Heater_status &= ~((1 << (channel + 4)) | (1 << channel));
	}
	return;
 8006a74:	e066      	b.n	8006b44 <temperature_auto_ctrl+0x18c>
	else if (temperature_now < s_Temperature_CurrentState.Temp_setpoint[channel] - s_Temperature_CurrentState.Low_Threshold)
 8006a76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006a7a:	797b      	ldrb	r3, [r7, #5]
 8006a7c:	4933      	ldr	r1, [pc, #204]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	440b      	add	r3, r1
 8006a82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a86:	4619      	mov	r1, r3
 8006a88:	4b30      	ldr	r3, [pc, #192]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 8006a8a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006a8e:	1acb      	subs	r3, r1, r3
 8006a90:	429a      	cmp	r2, r3
 8006a92:	da33      	bge.n	8006afc <temperature_auto_ctrl+0x144>
		lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
 8006a94:	797b      	ldrb	r3, [r7, #5]
 8006a96:	2100      	movs	r1, #0
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fd fb80 	bl	800419e <lt8722_set_swen_req>
		heater_set_duty_pwm_channel(channel, s_Temperature_CurrentState.Heater_duty[channel]);
 8006a9e:	797b      	ldrb	r3, [r7, #5]
 8006aa0:	4a2a      	ldr	r2, [pc, #168]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 8006aa2:	3318      	adds	r3, #24
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	797b      	ldrb	r3, [r7, #5]
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fd f896 	bl	8003be4 <heater_set_duty_pwm_channel>
		s_Temperature_CurrentState.Tec_Heater_status |= (1 << (channel + 4));
 8006ab8:	4b24      	ldr	r3, [pc, #144]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 8006aba:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006abe:	b25a      	sxtb	r2, r3
 8006ac0:	797b      	ldrb	r3, [r7, #5]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aca:	b25b      	sxtb	r3, r3
 8006acc:	4313      	orrs	r3, r2
 8006ace:	b25b      	sxtb	r3, r3
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 8006ad4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		s_Temperature_CurrentState.Tec_Heater_status &= ~(1 << channel);
 8006ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 8006ada:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006ade:	b25a      	sxtb	r2, r3
 8006ae0:	797b      	ldrb	r3, [r7, #5]
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae8:	b25b      	sxtb	r3, r3
 8006aea:	43db      	mvns	r3, r3
 8006aec:	b25b      	sxtb	r3, r3
 8006aee:	4013      	ands	r3, r2
 8006af0:	b25b      	sxtb	r3, r3
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	4b15      	ldr	r3, [pc, #84]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 8006af6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	return;
 8006afa:	e023      	b.n	8006b44 <temperature_auto_ctrl+0x18c>
		lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
 8006afc:	797b      	ldrb	r3, [r7, #5]
 8006afe:	2100      	movs	r1, #0
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fd fb4c 	bl	800419e <lt8722_set_swen_req>
		heater_set_duty_pwm_channel(channel, 0);
 8006b06:	797b      	ldrb	r3, [r7, #5]
 8006b08:	2100      	movs	r1, #0
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fd f86a 	bl	8003be4 <heater_set_duty_pwm_channel>
		s_Temperature_CurrentState.Tec_Heater_status &= ~((1 << (channel + 4)) | (1 << channel));
 8006b10:	4b0e      	ldr	r3, [pc, #56]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 8006b12:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006b16:	b25a      	sxtb	r2, r3
 8006b18:	797b      	ldrb	r3, [r7, #5]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b22:	b259      	sxtb	r1, r3
 8006b24:	797b      	ldrb	r3, [r7, #5]
 8006b26:	2001      	movs	r0, #1
 8006b28:	fa00 f303 	lsl.w	r3, r0, r3
 8006b2c:	b25b      	sxtb	r3, r3
 8006b2e:	430b      	orrs	r3, r1
 8006b30:	b25b      	sxtb	r3, r3
 8006b32:	43db      	mvns	r3, r3
 8006b34:	b25b      	sxtb	r3, r3
 8006b36:	4013      	ands	r3, r2
 8006b38:	b25b      	sxtb	r3, r3
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	4b03      	ldr	r3, [pc, #12]	@ (8006b4c <temperature_auto_ctrl+0x194>)
 8006b3e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	return;
 8006b42:	bf00      	nop
}
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	200022e0 	.word	0x200022e0

08006b50 <Temperature_GetSet_CreateTask>:
{
	return;
}

void Temperature_GetSet_CreateTask(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&temp_task_context.taskHandle, &temp_task_context.taskProperty);
 8006b54:	4902      	ldr	r1, [pc, #8]	@ (8006b60 <Temperature_GetSet_CreateTask+0x10>)
 8006b56:	4803      	ldr	r0, [pc, #12]	@ (8006b64 <Temperature_GetSet_CreateTask+0x14>)
 8006b58:	f003 fcee 	bl	800a538 <SCH_TASK_CreateTask>
	return;
 8006b5c:	bf00      	nop
}
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	200022c8 	.word	0x200022c8
 8006b64:	200022c4 	.word	0x200022c4

08006b68 <temperature_set_setpoint>:

void temperature_set_setpoint(uint8_t channel, int16_t setpoint)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	460a      	mov	r2, r1
 8006b72:	71fb      	strb	r3, [r7, #7]
 8006b74:	4613      	mov	r3, r2
 8006b76:	80bb      	strh	r3, [r7, #4]
	s_Temperature_CurrentState.Temp_setpoint[channel] = setpoint;
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	4a05      	ldr	r2, [pc, #20]	@ (8006b90 <temperature_set_setpoint+0x28>)
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	4413      	add	r3, r2
 8006b80:	88ba      	ldrh	r2, [r7, #4]
 8006b82:	805a      	strh	r2, [r3, #2]
	return;
 8006b84:	bf00      	nop
}
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	200022e0 	.word	0x200022e0

08006b94 <temperature_get_setpoint>:

int16_t temperature_get_setpoint(uint8_t channel)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	71fb      	strb	r3, [r7, #7]
	return s_Temperature_CurrentState.Temp_setpoint[channel];
 8006b9e:	79fb      	ldrb	r3, [r7, #7]
 8006ba0:	4a05      	ldr	r2, [pc, #20]	@ (8006bb8 <temperature_get_setpoint+0x24>)
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	200022e0 	.word	0x200022e0

08006bbc <temperature_set_tec_vol>:
{
	return s_Temperature_CurrentState.NTC_temp[channel];
}

void temperature_set_tec_vol(uint8_t channel, uint16_t voltage)
{
 8006bbc:	b490      	push	{r4, r7}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	71f9      	strb	r1, [r7, #7]
 8006bca:	4601      	mov	r1, r0
 8006bcc:	80b9      	strh	r1, [r7, #4]
	s_Temperature_CurrentState.Temp_change_flag = 1;
 8006bce:	490f      	ldr	r1, [pc, #60]	@ (8006c0c <temperature_set_tec_vol+0x50>)
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	7008      	strb	r0, [r1, #0]
	if (voltage > 3000) voltage = 3000;
 8006bd4:	88b9      	ldrh	r1, [r7, #4]
 8006bd6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8006bda:	4281      	cmp	r1, r0
 8006bdc:	d902      	bls.n	8006be4 <temperature_set_tec_vol+0x28>
 8006bde:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8006be2:	80b9      	strh	r1, [r7, #4]
	s_Temperature_CurrentState.Tec_vol[channel] = voltage*1000000;
 8006be4:	88b9      	ldrh	r1, [r7, #4]
 8006be6:	480a      	ldr	r0, [pc, #40]	@ (8006c10 <temperature_set_tec_vol+0x54>)
 8006be8:	fb00 f101 	mul.w	r1, r0, r1
 8006bec:	79f8      	ldrb	r0, [r7, #7]
 8006bee:	17cc      	asrs	r4, r1, #31
 8006bf0:	460a      	mov	r2, r1
 8006bf2:	4623      	mov	r3, r4
 8006bf4:	4c05      	ldr	r4, [pc, #20]	@ (8006c0c <temperature_set_tec_vol+0x50>)
 8006bf6:	1c81      	adds	r1, r0, #2
 8006bf8:	00c9      	lsls	r1, r1, #3
 8006bfa:	4421      	add	r1, r4
 8006bfc:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc90      	pop	{r4, r7}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	200022e0 	.word	0x200022e0
 8006c10:	000f4240 	.word	0x000f4240

08006c14 <temperature_get_tec_vol>:

uint16_t temperature_get_tec_vol(uint8_t channel)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Tec_vol[channel]/1000000);
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	4a08      	ldr	r2, [pc, #32]	@ (8006c44 <temperature_get_tec_vol+0x30>)
 8006c22:	3302      	adds	r3, #2
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	4413      	add	r3, r2
 8006c28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c2c:	4a06      	ldr	r2, [pc, #24]	@ (8006c48 <temperature_get_tec_vol+0x34>)
 8006c2e:	f04f 0300 	mov.w	r3, #0
 8006c32:	f7f9 fb35 	bl	80002a0 <__aeabi_ldivmod>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	b293      	uxth	r3, r2
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	200022e0 	.word	0x200022e0
 8006c48:	000f4240 	.word	0x000f4240

08006c4c <temperature_set_heater_duty>:

void temperature_set_heater_duty(uint8_t channel, uint8_t duty)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	460a      	mov	r2, r1
 8006c56:	71fb      	strb	r3, [r7, #7]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	71bb      	strb	r3, [r7, #6]
	s_Temperature_CurrentState.Temp_change_flag = 1;
 8006c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8006c98 <temperature_set_heater_duty+0x4c>)
 8006c5e:	2201      	movs	r2, #1
 8006c60:	701a      	strb	r2, [r3, #0]
    if (duty > 100) duty = 100;
 8006c62:	79bb      	ldrb	r3, [r7, #6]
 8006c64:	2b64      	cmp	r3, #100	@ 0x64
 8006c66:	d901      	bls.n	8006c6c <temperature_set_heater_duty+0x20>
 8006c68:	2364      	movs	r3, #100	@ 0x64
 8006c6a:	71bb      	strb	r3, [r7, #6]
	s_Temperature_CurrentState.Heater_duty[channel] = duty*10;
 8006c6c:	79bb      	ldrb	r3, [r7, #6]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	461a      	mov	r2, r3
 8006c72:	0092      	lsls	r2, r2, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	79fb      	ldrb	r3, [r7, #7]
 8006c7c:	b211      	sxth	r1, r2
 8006c7e:	4a06      	ldr	r2, [pc, #24]	@ (8006c98 <temperature_set_heater_duty+0x4c>)
 8006c80:	3318      	adds	r3, #24
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	4413      	add	r3, r2
 8006c86:	460a      	mov	r2, r1
 8006c88:	805a      	strh	r2, [r3, #2]
}
 8006c8a:	bf00      	nop
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	200022e0 	.word	0x200022e0

08006c9c <temperature_get_heater_duty>:
uint8_t temperature_get_heater_duty(uint8_t channel)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Heater_duty[channel]/10);
 8006ca6:	79fb      	ldrb	r3, [r7, #7]
 8006ca8:	4a09      	ldr	r2, [pc, #36]	@ (8006cd0 <temperature_get_heater_duty+0x34>)
 8006caa:	3318      	adds	r3, #24
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	4413      	add	r3, r2
 8006cb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006cb4:	4a07      	ldr	r2, [pc, #28]	@ (8006cd4 <temperature_get_heater_duty+0x38>)
 8006cb6:	fb82 1203 	smull	r1, r2, r2, r3
 8006cba:	1092      	asrs	r2, r2, #2
 8006cbc:	17db      	asrs	r3, r3, #31
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	b21b      	sxth	r3, r3
 8006cc2:	b2db      	uxtb	r3, r3
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	200022e0 	.word	0x200022e0
 8006cd4:	66666667 	.word	0x66666667

08006cd8 <temperature_set_auto_ctrl>:

void temperature_set_auto_ctrl(uint8_t auto_0, uint8_t auto_1, uint8_t auto_2, uint8_t auto_3)
{
 8006cd8:	b490      	push	{r4, r7}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4604      	mov	r4, r0
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	4623      	mov	r3, r4
 8006ce8:	71fb      	strb	r3, [r7, #7]
 8006cea:	4603      	mov	r3, r0
 8006cec:	71bb      	strb	r3, [r7, #6]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	717b      	strb	r3, [r7, #5]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	713b      	strb	r3, [r7, #4]
	s_Temperature_CurrentState.Temp_auto =
        (s_Temperature_CurrentState.Temp_auto & ~((1 << TEMP0_AUTO) | (1 << TEMP1_AUTO) | (1 << TEMP2_AUTO) | (1 << TEMP3_AUTO))) |
 8006cf6:	4b13      	ldr	r3, [pc, #76]	@ (8006d44 <temperature_set_auto_ctrl+0x6c>)
 8006cf8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006cfc:	b25b      	sxtb	r3, r3
 8006cfe:	f023 030f 	bic.w	r3, r3, #15
 8006d02:	b25a      	sxtb	r2, r3
        ((auto_0 << TEMP0_AUTO) | (auto_1 << TEMP1_AUTO) | (auto_2 << TEMP2_AUTO) | (auto_3 << TEMP3_AUTO));
 8006d04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	b259      	sxtb	r1, r3
 8006d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d10:	430b      	orrs	r3, r1
 8006d12:	b259      	sxtb	r1, r3
 8006d14:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	b25b      	sxtb	r3, r3
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	b259      	sxtb	r1, r3
 8006d20:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	b25b      	sxtb	r3, r3
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	b25b      	sxtb	r3, r3
        (s_Temperature_CurrentState.Temp_auto & ~((1 << TEMP0_AUTO) | (1 << TEMP1_AUTO) | (1 << TEMP2_AUTO) | (1 << TEMP3_AUTO))) |
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	b25b      	sxtb	r3, r3
 8006d30:	b2da      	uxtb	r2, r3
	s_Temperature_CurrentState.Temp_auto =
 8006d32:	4b04      	ldr	r3, [pc, #16]	@ (8006d44 <temperature_set_auto_ctrl+0x6c>)
 8006d34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	return;
 8006d38:	bf00      	nop
}
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bc90      	pop	{r4, r7}
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	200022e0 	.word	0x200022e0

08006d48 <tec_set_dir>:

void tec_set_dir(tec_dir_t dir_0, tec_dir_t dir_1, tec_dir_t dir_2, tec_dir_t dir_3)
{
 8006d48:	b490      	push	{r4, r7}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4604      	mov	r4, r0
 8006d50:	4608      	mov	r0, r1
 8006d52:	4611      	mov	r1, r2
 8006d54:	461a      	mov	r2, r3
 8006d56:	4623      	mov	r3, r4
 8006d58:	71fb      	strb	r3, [r7, #7]
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	71bb      	strb	r3, [r7, #6]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	717b      	strb	r3, [r7, #5]
 8006d62:	4613      	mov	r3, r2
 8006d64:	713b      	strb	r3, [r7, #4]
    s_Temperature_CurrentState.Temp_change_flag = 1;
 8006d66:	4b14      	ldr	r3, [pc, #80]	@ (8006db8 <tec_set_dir+0x70>)
 8006d68:	2201      	movs	r2, #1
 8006d6a:	701a      	strb	r2, [r3, #0]
    s_Temperature_CurrentState.Tec_dir =
        (s_Temperature_CurrentState.Tec_dir & ~((1 << TEC0_DIR) | (1 << TEC1_DIR) | (1 << TEC2_DIR) | (1 << TEC3_DIR))) |
 8006d6c:	4b12      	ldr	r3, [pc, #72]	@ (8006db8 <tec_set_dir+0x70>)
 8006d6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006d72:	b25b      	sxtb	r3, r3
 8006d74:	f023 030f 	bic.w	r3, r3, #15
 8006d78:	b25a      	sxtb	r2, r3
        ((dir_0 << TEC0_DIR) | (dir_1 << TEC1_DIR) | (dir_2 << TEC2_DIR) | (dir_3 << TEC3_DIR));
 8006d7a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	b259      	sxtb	r1, r3
 8006d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d86:	430b      	orrs	r3, r1
 8006d88:	b259      	sxtb	r1, r3
 8006d8a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	b25b      	sxtb	r3, r3
 8006d92:	430b      	orrs	r3, r1
 8006d94:	b259      	sxtb	r1, r3
 8006d96:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	b25b      	sxtb	r3, r3
 8006d9e:	430b      	orrs	r3, r1
 8006da0:	b25b      	sxtb	r3, r3
        (s_Temperature_CurrentState.Tec_dir & ~((1 << TEC0_DIR) | (1 << TEC1_DIR) | (1 << TEC2_DIR) | (1 << TEC3_DIR))) |
 8006da2:	4313      	orrs	r3, r2
 8006da4:	b25b      	sxtb	r3, r3
 8006da6:	b2da      	uxtb	r2, r3
    s_Temperature_CurrentState.Tec_dir =
 8006da8:	4b03      	ldr	r3, [pc, #12]	@ (8006db8 <tec_set_dir+0x70>)
 8006daa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return;
 8006dae:	bf00      	nop
}
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bc90      	pop	{r4, r7}
 8006db6:	4770      	bx	lr
 8006db8:	200022e0 	.word	0x200022e0

08006dbc <LL_GPIO_SetOutputPin>:
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	619a      	str	r2, [r3, #24]
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <LL_GPIO_ResetOutputPin>:
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	041a      	lsls	r2, r3, #16
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	619a      	str	r2, [r3, #24]
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
	...

08006df8 <Ex_Watchdog_Init>:
		181
	}
};

void Ex_Watchdog_Init(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 8006dfc:	4b03      	ldr	r3, [pc, #12]	@ (8006e0c <Ex_Watchdog_Init+0x14>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	701a      	strb	r2, [r3, #0]
}
 8006e02:	bf00      	nop
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	200035b4 	.word	0x200035b4

08006e10 <Ex_Watchdog_CreateTask>:

void Ex_Watchdog_CreateTask(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 8006e14:	4902      	ldr	r1, [pc, #8]	@ (8006e20 <Ex_Watchdog_CreateTask+0x10>)
 8006e16:	4803      	ldr	r0, [pc, #12]	@ (8006e24 <Ex_Watchdog_CreateTask+0x14>)
 8006e18:	f003 fb8e 	bl	800a538 <SCH_TASK_CreateTask>
}
 8006e1c:	bf00      	nop
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	20002334 	.word	0x20002334
 8006e24:	20002330 	.word	0x20002330

08006e28 <status_wdt_update>:

void status_wdt_update(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
	if (WDT_Current)
 8006e2c:	4b14      	ldr	r3, [pc, #80]	@ (8006e80 <status_wdt_update+0x58>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d012      	beq.n	8006e5a <status_wdt_update+0x32>
	{
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 8006e34:	2001      	movs	r0, #1
 8006e36:	f003 fb69 	bl	800a50c <SCH_TIM_HasCompleted>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d01d      	beq.n	8006e7c <status_wdt_update+0x54>
		{
			WDT_Current = 0;
 8006e40:	4b0f      	ldr	r3, [pc, #60]	@ (8006e80 <status_wdt_update+0x58>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	701a      	strb	r2, [r3, #0]
			LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8006e46:	2102      	movs	r1, #2
 8006e48:	480e      	ldr	r0, [pc, #56]	@ (8006e84 <status_wdt_update+0x5c>)
 8006e4a:	f7ff ffc5 	bl	8006dd8 <LL_GPIO_ResetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 8006e4e:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8006e52:	2001      	movs	r0, #1
 8006e54:	f003 fb44 	bl	800a4e0 <SCH_TIM_Start>
			WDT_Current = 1;
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
		}
	}
}
 8006e58:	e010      	b.n	8006e7c <status_wdt_update+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 8006e5a:	2001      	movs	r0, #1
 8006e5c:	f003 fb56 	bl	800a50c <SCH_TIM_HasCompleted>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <status_wdt_update+0x54>
			WDT_Current = 1;
 8006e66:	4b06      	ldr	r3, [pc, #24]	@ (8006e80 <status_wdt_update+0x58>)
 8006e68:	2201      	movs	r2, #1
 8006e6a:	701a      	strb	r2, [r3, #0]
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8006e6c:	2102      	movs	r1, #2
 8006e6e:	4805      	ldr	r0, [pc, #20]	@ (8006e84 <status_wdt_update+0x5c>)
 8006e70:	f7ff ffa4 	bl	8006dbc <LL_GPIO_SetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 8006e74:	21c8      	movs	r1, #200	@ 0xc8
 8006e76:	2001      	movs	r0, #1
 8006e78:	f003 fb32 	bl	800a4e0 <SCH_TIM_Start>
}
 8006e7c:	bf00      	nop
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	200035b4 	.word	0x200035b4
 8006e84:	40020000 	.word	0x40020000

08006e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8006ec8 <HAL_Init+0x40>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a0d      	ldr	r2, [pc, #52]	@ (8006ec8 <HAL_Init+0x40>)
 8006e92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006e98:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec8 <HAL_Init+0x40>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8006ec8 <HAL_Init+0x40>)
 8006e9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ea2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ea4:	4b08      	ldr	r3, [pc, #32]	@ (8006ec8 <HAL_Init+0x40>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a07      	ldr	r2, [pc, #28]	@ (8006ec8 <HAL_Init+0x40>)
 8006eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006eb0:	2003      	movs	r0, #3
 8006eb2:	f000 fb93 	bl	80075dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006eb6:	200f      	movs	r0, #15
 8006eb8:	f000 f808 	bl	8006ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ebc:	f7ff fb14 	bl	80064e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	40023c00 	.word	0x40023c00

08006ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ed4:	4b12      	ldr	r3, [pc, #72]	@ (8006f20 <HAL_InitTick+0x54>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	4b12      	ldr	r3, [pc, #72]	@ (8006f24 <HAL_InitTick+0x58>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	4619      	mov	r1, r3
 8006ede:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fb9d 	bl	800762a <HAL_SYSTICK_Config>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e00e      	b.n	8006f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b0f      	cmp	r3, #15
 8006efe:	d80a      	bhi.n	8006f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f00:	2200      	movs	r2, #0
 8006f02:	6879      	ldr	r1, [r7, #4]
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295
 8006f08:	f000 fb73 	bl	80075f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006f0c:	4a06      	ldr	r2, [pc, #24]	@ (8006f28 <HAL_InitTick+0x5c>)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	e000      	b.n	8006f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	200022c0 	.word	0x200022c0
 8006f24:	20002348 	.word	0x20002348
 8006f28:	20002344 	.word	0x20002344

08006f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f30:	4b06      	ldr	r3, [pc, #24]	@ (8006f4c <HAL_IncTick+0x20>)
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	461a      	mov	r2, r3
 8006f36:	4b06      	ldr	r3, [pc, #24]	@ (8006f50 <HAL_IncTick+0x24>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	4a04      	ldr	r2, [pc, #16]	@ (8006f50 <HAL_IncTick+0x24>)
 8006f3e:	6013      	str	r3, [r2, #0]
}
 8006f40:	bf00      	nop
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	20002348 	.word	0x20002348
 8006f50:	200035b8 	.word	0x200035b8

08006f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
  return uwTick;
 8006f58:	4b03      	ldr	r3, [pc, #12]	@ (8006f68 <HAL_GetTick+0x14>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	200035b8 	.word	0x200035b8

08006f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f74:	f7ff ffee 	bl	8006f54 <HAL_GetTick>
 8006f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f84:	d005      	beq.n	8006f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f86:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb0 <HAL_Delay+0x44>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4413      	add	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f92:	bf00      	nop
 8006f94:	f7ff ffde 	bl	8006f54 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d8f7      	bhi.n	8006f94 <HAL_Delay+0x28>
  {
  }
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20002348 	.word	0x20002348

08006fb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e033      	b.n	8007032 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d109      	bne.n	8006fe6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fab0 	bl	8006538 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fea:	f003 0310 	and.w	r3, r3, #16
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d118      	bne.n	8007024 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006ffa:	f023 0302 	bic.w	r3, r3, #2
 8006ffe:	f043 0202 	orr.w	r2, r3, #2
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f93a 	bl	8007280 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007016:	f023 0303 	bic.w	r3, r3, #3
 800701a:	f043 0201 	orr.w	r2, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	641a      	str	r2, [r3, #64]	@ 0x40
 8007022:	e001      	b.n	8007028 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
	...

0800703c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_ADC_ConfigChannel+0x1c>
 8007054:	2302      	movs	r3, #2
 8007056:	e105      	b.n	8007264 <HAL_ADC_ConfigChannel+0x228>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b09      	cmp	r3, #9
 8007066:	d925      	bls.n	80070b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68d9      	ldr	r1, [r3, #12]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	461a      	mov	r2, r3
 8007076:	4613      	mov	r3, r2
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	4413      	add	r3, r2
 800707c:	3b1e      	subs	r3, #30
 800707e:	2207      	movs	r2, #7
 8007080:	fa02 f303 	lsl.w	r3, r2, r3
 8007084:	43da      	mvns	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	400a      	ands	r2, r1
 800708c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68d9      	ldr	r1, [r3, #12]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	b29b      	uxth	r3, r3
 800709e:	4618      	mov	r0, r3
 80070a0:	4603      	mov	r3, r0
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	4403      	add	r3, r0
 80070a6:	3b1e      	subs	r3, #30
 80070a8:	409a      	lsls	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	60da      	str	r2, [r3, #12]
 80070b2:	e022      	b.n	80070fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6919      	ldr	r1, [r3, #16]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	4613      	mov	r3, r2
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	4413      	add	r3, r2
 80070c8:	2207      	movs	r2, #7
 80070ca:	fa02 f303 	lsl.w	r3, r2, r3
 80070ce:	43da      	mvns	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	400a      	ands	r2, r1
 80070d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6919      	ldr	r1, [r3, #16]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	4618      	mov	r0, r3
 80070ea:	4603      	mov	r3, r0
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	4403      	add	r3, r0
 80070f0:	409a      	lsls	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b06      	cmp	r3, #6
 8007100:	d824      	bhi.n	800714c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	4613      	mov	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	3b05      	subs	r3, #5
 8007114:	221f      	movs	r2, #31
 8007116:	fa02 f303 	lsl.w	r3, r2, r3
 800711a:	43da      	mvns	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	400a      	ands	r2, r1
 8007122:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	b29b      	uxth	r3, r3
 8007130:	4618      	mov	r0, r3
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	3b05      	subs	r3, #5
 800713e:	fa00 f203 	lsl.w	r2, r0, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	635a      	str	r2, [r3, #52]	@ 0x34
 800714a:	e04c      	b.n	80071e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	2b0c      	cmp	r3, #12
 8007152:	d824      	bhi.n	800719e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	4613      	mov	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	3b23      	subs	r3, #35	@ 0x23
 8007166:	221f      	movs	r2, #31
 8007168:	fa02 f303 	lsl.w	r3, r2, r3
 800716c:	43da      	mvns	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	400a      	ands	r2, r1
 8007174:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	b29b      	uxth	r3, r3
 8007182:	4618      	mov	r0, r3
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	3b23      	subs	r3, #35	@ 0x23
 8007190:	fa00 f203 	lsl.w	r2, r0, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	430a      	orrs	r2, r1
 800719a:	631a      	str	r2, [r3, #48]	@ 0x30
 800719c:	e023      	b.n	80071e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	4613      	mov	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	3b41      	subs	r3, #65	@ 0x41
 80071b0:	221f      	movs	r2, #31
 80071b2:	fa02 f303 	lsl.w	r3, r2, r3
 80071b6:	43da      	mvns	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	400a      	ands	r2, r1
 80071be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	4618      	mov	r0, r3
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	3b41      	subs	r3, #65	@ 0x41
 80071da:	fa00 f203 	lsl.w	r2, r0, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80071e6:	4b22      	ldr	r3, [pc, #136]	@ (8007270 <HAL_ADC_ConfigChannel+0x234>)
 80071e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a21      	ldr	r2, [pc, #132]	@ (8007274 <HAL_ADC_ConfigChannel+0x238>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d109      	bne.n	8007208 <HAL_ADC_ConfigChannel+0x1cc>
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b12      	cmp	r3, #18
 80071fa:	d105      	bne.n	8007208 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a19      	ldr	r2, [pc, #100]	@ (8007274 <HAL_ADC_ConfigChannel+0x238>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d123      	bne.n	800725a <HAL_ADC_ConfigChannel+0x21e>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b10      	cmp	r3, #16
 8007218:	d003      	beq.n	8007222 <HAL_ADC_ConfigChannel+0x1e6>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b11      	cmp	r3, #17
 8007220:	d11b      	bne.n	800725a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b10      	cmp	r3, #16
 8007234:	d111      	bne.n	800725a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007236:	4b10      	ldr	r3, [pc, #64]	@ (8007278 <HAL_ADC_ConfigChannel+0x23c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a10      	ldr	r2, [pc, #64]	@ (800727c <HAL_ADC_ConfigChannel+0x240>)
 800723c:	fba2 2303 	umull	r2, r3, r2, r3
 8007240:	0c9a      	lsrs	r2, r3, #18
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800724c:	e002      	b.n	8007254 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	3b01      	subs	r3, #1
 8007252:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1f9      	bne.n	800724e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	40012300 	.word	0x40012300
 8007274:	40012000 	.word	0x40012000
 8007278:	200022c0 	.word	0x200022c0
 800727c:	431bde83 	.word	0x431bde83

08007280 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007288:	4b79      	ldr	r3, [pc, #484]	@ (8007470 <ADC_Init+0x1f0>)
 800728a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	431a      	orrs	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6859      	ldr	r1, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	021a      	lsls	r2, r3, #8
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80072d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	6859      	ldr	r1, [r3, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	430a      	orrs	r2, r1
 80072ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6899      	ldr	r1, [r3, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007312:	4a58      	ldr	r2, [pc, #352]	@ (8007474 <ADC_Init+0x1f4>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d022      	beq.n	800735e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689a      	ldr	r2, [r3, #8]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007326:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6899      	ldr	r1, [r3, #8]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6899      	ldr	r1, [r3, #8]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	609a      	str	r2, [r3, #8]
 800735c:	e00f      	b.n	800737e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800736c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800737c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0202 	bic.w	r2, r2, #2
 800738c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6899      	ldr	r1, [r3, #8]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	7e1b      	ldrb	r3, [r3, #24]
 8007398:	005a      	lsls	r2, r3, #1
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01b      	beq.n	80073e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80073ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6859      	ldr	r1, [r3, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d6:	3b01      	subs	r3, #1
 80073d8:	035a      	lsls	r2, r3, #13
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	605a      	str	r2, [r3, #4]
 80073e2:	e007      	b.n	80073f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8007402:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	3b01      	subs	r3, #1
 8007410:	051a      	lsls	r2, r3, #20
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6899      	ldr	r1, [r3, #8]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007436:	025a      	lsls	r2, r3, #9
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	430a      	orrs	r2, r1
 800743e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800744e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6899      	ldr	r1, [r3, #8]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	029a      	lsls	r2, r3, #10
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	609a      	str	r2, [r3, #8]
}
 8007464:	bf00      	nop
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	40012300 	.word	0x40012300
 8007474:	0f000001 	.word	0x0f000001

08007478 <__NVIC_SetPriorityGrouping>:
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007488:	4b0c      	ldr	r3, [pc, #48]	@ (80074bc <__NVIC_SetPriorityGrouping+0x44>)
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007494:	4013      	ands	r3, r2
 8007496:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80074a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80074a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80074aa:	4a04      	ldr	r2, [pc, #16]	@ (80074bc <__NVIC_SetPriorityGrouping+0x44>)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	60d3      	str	r3, [r2, #12]
}
 80074b0:	bf00      	nop
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	e000ed00 	.word	0xe000ed00

080074c0 <__NVIC_GetPriorityGrouping>:
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074c4:	4b04      	ldr	r3, [pc, #16]	@ (80074d8 <__NVIC_GetPriorityGrouping+0x18>)
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	0a1b      	lsrs	r3, r3, #8
 80074ca:	f003 0307 	and.w	r3, r3, #7
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	e000ed00 	.word	0xe000ed00

080074dc <__NVIC_SetPriority>:
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	4603      	mov	r3, r0
 80074e4:	6039      	str	r1, [r7, #0]
 80074e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	db0a      	blt.n	8007506 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	b2da      	uxtb	r2, r3
 80074f4:	490c      	ldr	r1, [pc, #48]	@ (8007528 <__NVIC_SetPriority+0x4c>)
 80074f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074fa:	0112      	lsls	r2, r2, #4
 80074fc:	b2d2      	uxtb	r2, r2
 80074fe:	440b      	add	r3, r1
 8007500:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007504:	e00a      	b.n	800751c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	b2da      	uxtb	r2, r3
 800750a:	4908      	ldr	r1, [pc, #32]	@ (800752c <__NVIC_SetPriority+0x50>)
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	f003 030f 	and.w	r3, r3, #15
 8007512:	3b04      	subs	r3, #4
 8007514:	0112      	lsls	r2, r2, #4
 8007516:	b2d2      	uxtb	r2, r2
 8007518:	440b      	add	r3, r1
 800751a:	761a      	strb	r2, [r3, #24]
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	e000e100 	.word	0xe000e100
 800752c:	e000ed00 	.word	0xe000ed00

08007530 <NVIC_EncodePriority>:
{
 8007530:	b480      	push	{r7}
 8007532:	b089      	sub	sp, #36	@ 0x24
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	f1c3 0307 	rsb	r3, r3, #7
 800754a:	2b04      	cmp	r3, #4
 800754c:	bf28      	it	cs
 800754e:	2304      	movcs	r3, #4
 8007550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	3304      	adds	r3, #4
 8007556:	2b06      	cmp	r3, #6
 8007558:	d902      	bls.n	8007560 <NVIC_EncodePriority+0x30>
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	3b03      	subs	r3, #3
 800755e:	e000      	b.n	8007562 <NVIC_EncodePriority+0x32>
 8007560:	2300      	movs	r3, #0
 8007562:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007564:	f04f 32ff 	mov.w	r2, #4294967295
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	fa02 f303 	lsl.w	r3, r2, r3
 800756e:	43da      	mvns	r2, r3
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	401a      	ands	r2, r3
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007578:	f04f 31ff 	mov.w	r1, #4294967295
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	fa01 f303 	lsl.w	r3, r1, r3
 8007582:	43d9      	mvns	r1, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007588:	4313      	orrs	r3, r2
}
 800758a:	4618      	mov	r0, r3
 800758c:	3724      	adds	r7, #36	@ 0x24
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
	...

08007598 <SysTick_Config>:
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075a8:	d301      	bcc.n	80075ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80075aa:	2301      	movs	r3, #1
 80075ac:	e00f      	b.n	80075ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80075ae:	4a0a      	ldr	r2, [pc, #40]	@ (80075d8 <SysTick_Config+0x40>)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80075b6:	210f      	movs	r1, #15
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295
 80075bc:	f7ff ff8e 	bl	80074dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80075c0:	4b05      	ldr	r3, [pc, #20]	@ (80075d8 <SysTick_Config+0x40>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80075c6:	4b04      	ldr	r3, [pc, #16]	@ (80075d8 <SysTick_Config+0x40>)
 80075c8:	2207      	movs	r2, #7
 80075ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	e000e010 	.word	0xe000e010

080075dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff ff47 	bl	8007478 <__NVIC_SetPriorityGrouping>
}
 80075ea:	bf00      	nop
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b086      	sub	sp, #24
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	4603      	mov	r3, r0
 80075fa:	60b9      	str	r1, [r7, #8]
 80075fc:	607a      	str	r2, [r7, #4]
 80075fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007600:	2300      	movs	r3, #0
 8007602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007604:	f7ff ff5c 	bl	80074c0 <__NVIC_GetPriorityGrouping>
 8007608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	6978      	ldr	r0, [r7, #20]
 8007610:	f7ff ff8e 	bl	8007530 <NVIC_EncodePriority>
 8007614:	4602      	mov	r2, r0
 8007616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800761a:	4611      	mov	r1, r2
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff ff5d 	bl	80074dc <__NVIC_SetPriority>
}
 8007622:	bf00      	nop
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b082      	sub	sp, #8
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff ffb0 	bl	8007598 <SysTick_Config>
 8007638:	4603      	mov	r3, r0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007644:	b480      	push	{r7}
 8007646:	b089      	sub	sp, #36	@ 0x24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800764e:	2300      	movs	r3, #0
 8007650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007652:	2300      	movs	r3, #0
 8007654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007656:	2300      	movs	r3, #0
 8007658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800765a:	2300      	movs	r3, #0
 800765c:	61fb      	str	r3, [r7, #28]
 800765e:	e16b      	b.n	8007938 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007660:	2201      	movs	r2, #1
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4013      	ands	r3, r2
 8007672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	429a      	cmp	r2, r3
 800767a:	f040 815a 	bne.w	8007932 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	2b01      	cmp	r3, #1
 8007688:	d005      	beq.n	8007696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007692:	2b02      	cmp	r3, #2
 8007694:	d130      	bne.n	80076f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	2203      	movs	r2, #3
 80076a2:	fa02 f303 	lsl.w	r3, r2, r3
 80076a6:	43db      	mvns	r3, r3
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	4013      	ands	r3, r2
 80076ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	68da      	ldr	r2, [r3, #12]
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	4313      	orrs	r3, r2
 80076be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80076cc:	2201      	movs	r2, #1
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	43db      	mvns	r3, r3
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	4013      	ands	r3, r2
 80076da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	091b      	lsrs	r3, r3, #4
 80076e2:	f003 0201 	and.w	r2, r3, #1
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f003 0303 	and.w	r3, r3, #3
 8007700:	2b03      	cmp	r3, #3
 8007702:	d017      	beq.n	8007734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	2203      	movs	r2, #3
 8007710:	fa02 f303 	lsl.w	r3, r2, r3
 8007714:	43db      	mvns	r3, r3
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	4013      	ands	r3, r2
 800771a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	fa02 f303 	lsl.w	r3, r2, r3
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	4313      	orrs	r3, r2
 800772c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f003 0303 	and.w	r3, r3, #3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d123      	bne.n	8007788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	08da      	lsrs	r2, r3, #3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3208      	adds	r2, #8
 8007748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	220f      	movs	r2, #15
 8007758:	fa02 f303 	lsl.w	r3, r2, r3
 800775c:	43db      	mvns	r3, r3
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	4013      	ands	r3, r2
 8007762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	691a      	ldr	r2, [r3, #16]
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	f003 0307 	and.w	r3, r3, #7
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	fa02 f303 	lsl.w	r3, r2, r3
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	4313      	orrs	r3, r2
 8007778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	08da      	lsrs	r2, r3, #3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3208      	adds	r2, #8
 8007782:	69b9      	ldr	r1, [r7, #24]
 8007784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	005b      	lsls	r3, r3, #1
 8007792:	2203      	movs	r2, #3
 8007794:	fa02 f303 	lsl.w	r3, r2, r3
 8007798:	43db      	mvns	r3, r3
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	4013      	ands	r3, r2
 800779e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f003 0203 	and.w	r2, r3, #3
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	fa02 f303 	lsl.w	r3, r2, r3
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 80b4 	beq.w	8007932 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	4b60      	ldr	r3, [pc, #384]	@ (8007950 <HAL_GPIO_Init+0x30c>)
 80077d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077d2:	4a5f      	ldr	r2, [pc, #380]	@ (8007950 <HAL_GPIO_Init+0x30c>)
 80077d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80077da:	4b5d      	ldr	r3, [pc, #372]	@ (8007950 <HAL_GPIO_Init+0x30c>)
 80077dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80077e6:	4a5b      	ldr	r2, [pc, #364]	@ (8007954 <HAL_GPIO_Init+0x310>)
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	089b      	lsrs	r3, r3, #2
 80077ec:	3302      	adds	r3, #2
 80077ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	220f      	movs	r2, #15
 80077fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007802:	43db      	mvns	r3, r3
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	4013      	ands	r3, r2
 8007808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a52      	ldr	r2, [pc, #328]	@ (8007958 <HAL_GPIO_Init+0x314>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d02b      	beq.n	800786a <HAL_GPIO_Init+0x226>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a51      	ldr	r2, [pc, #324]	@ (800795c <HAL_GPIO_Init+0x318>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d025      	beq.n	8007866 <HAL_GPIO_Init+0x222>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a50      	ldr	r2, [pc, #320]	@ (8007960 <HAL_GPIO_Init+0x31c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d01f      	beq.n	8007862 <HAL_GPIO_Init+0x21e>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a4f      	ldr	r2, [pc, #316]	@ (8007964 <HAL_GPIO_Init+0x320>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d019      	beq.n	800785e <HAL_GPIO_Init+0x21a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a4e      	ldr	r2, [pc, #312]	@ (8007968 <HAL_GPIO_Init+0x324>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d013      	beq.n	800785a <HAL_GPIO_Init+0x216>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a4d      	ldr	r2, [pc, #308]	@ (800796c <HAL_GPIO_Init+0x328>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d00d      	beq.n	8007856 <HAL_GPIO_Init+0x212>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a4c      	ldr	r2, [pc, #304]	@ (8007970 <HAL_GPIO_Init+0x32c>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d007      	beq.n	8007852 <HAL_GPIO_Init+0x20e>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a4b      	ldr	r2, [pc, #300]	@ (8007974 <HAL_GPIO_Init+0x330>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d101      	bne.n	800784e <HAL_GPIO_Init+0x20a>
 800784a:	2307      	movs	r3, #7
 800784c:	e00e      	b.n	800786c <HAL_GPIO_Init+0x228>
 800784e:	2308      	movs	r3, #8
 8007850:	e00c      	b.n	800786c <HAL_GPIO_Init+0x228>
 8007852:	2306      	movs	r3, #6
 8007854:	e00a      	b.n	800786c <HAL_GPIO_Init+0x228>
 8007856:	2305      	movs	r3, #5
 8007858:	e008      	b.n	800786c <HAL_GPIO_Init+0x228>
 800785a:	2304      	movs	r3, #4
 800785c:	e006      	b.n	800786c <HAL_GPIO_Init+0x228>
 800785e:	2303      	movs	r3, #3
 8007860:	e004      	b.n	800786c <HAL_GPIO_Init+0x228>
 8007862:	2302      	movs	r3, #2
 8007864:	e002      	b.n	800786c <HAL_GPIO_Init+0x228>
 8007866:	2301      	movs	r3, #1
 8007868:	e000      	b.n	800786c <HAL_GPIO_Init+0x228>
 800786a:	2300      	movs	r3, #0
 800786c:	69fa      	ldr	r2, [r7, #28]
 800786e:	f002 0203 	and.w	r2, r2, #3
 8007872:	0092      	lsls	r2, r2, #2
 8007874:	4093      	lsls	r3, r2
 8007876:	69ba      	ldr	r2, [r7, #24]
 8007878:	4313      	orrs	r3, r2
 800787a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800787c:	4935      	ldr	r1, [pc, #212]	@ (8007954 <HAL_GPIO_Init+0x310>)
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	089b      	lsrs	r3, r3, #2
 8007882:	3302      	adds	r3, #2
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800788a:	4b3b      	ldr	r3, [pc, #236]	@ (8007978 <HAL_GPIO_Init+0x334>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	43db      	mvns	r3, r3
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	4013      	ands	r3, r2
 8007898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80078ae:	4a32      	ldr	r2, [pc, #200]	@ (8007978 <HAL_GPIO_Init+0x334>)
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80078b4:	4b30      	ldr	r3, [pc, #192]	@ (8007978 <HAL_GPIO_Init+0x334>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	43db      	mvns	r3, r3
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	4013      	ands	r3, r2
 80078c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80078d8:	4a27      	ldr	r2, [pc, #156]	@ (8007978 <HAL_GPIO_Init+0x334>)
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80078de:	4b26      	ldr	r3, [pc, #152]	@ (8007978 <HAL_GPIO_Init+0x334>)
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	43db      	mvns	r3, r3
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	4013      	ands	r3, r2
 80078ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	4313      	orrs	r3, r2
 8007900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007902:	4a1d      	ldr	r2, [pc, #116]	@ (8007978 <HAL_GPIO_Init+0x334>)
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007908:	4b1b      	ldr	r3, [pc, #108]	@ (8007978 <HAL_GPIO_Init+0x334>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	43db      	mvns	r3, r3
 8007912:	69ba      	ldr	r2, [r7, #24]
 8007914:	4013      	ands	r3, r2
 8007916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d003      	beq.n	800792c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	4313      	orrs	r3, r2
 800792a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800792c:	4a12      	ldr	r2, [pc, #72]	@ (8007978 <HAL_GPIO_Init+0x334>)
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	3301      	adds	r3, #1
 8007936:	61fb      	str	r3, [r7, #28]
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	2b0f      	cmp	r3, #15
 800793c:	f67f ae90 	bls.w	8007660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007940:	bf00      	nop
 8007942:	bf00      	nop
 8007944:	3724      	adds	r7, #36	@ 0x24
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	40023800 	.word	0x40023800
 8007954:	40013800 	.word	0x40013800
 8007958:	40020000 	.word	0x40020000
 800795c:	40020400 	.word	0x40020400
 8007960:	40020800 	.word	0x40020800
 8007964:	40020c00 	.word	0x40020c00
 8007968:	40021000 	.word	0x40021000
 800796c:	40021400 	.word	0x40021400
 8007970:	40021800 	.word	0x40021800
 8007974:	40021c00 	.word	0x40021c00
 8007978:	40013c00 	.word	0x40013c00

0800797c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e07b      	b.n	8007a86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007992:	2b00      	cmp	r3, #0
 8007994:	d108      	bne.n	80079a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800799e:	d009      	beq.n	80079b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	61da      	str	r2, [r3, #28]
 80079a6:	e005      	b.n	80079b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d106      	bne.n	80079d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7fe fdf6 	bl	80065c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80079fc:	431a      	orrs	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a06:	431a      	orrs	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	431a      	orrs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a24:	431a      	orrs	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a1b      	ldr	r3, [r3, #32]
 8007a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a38:	ea42 0103 	orr.w	r1, r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a40:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	0c1b      	lsrs	r3, r3, #16
 8007a52:	f003 0104 	and.w	r1, r3, #4
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5a:	f003 0210 	and.w	r2, r3, #16
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	69da      	ldr	r2, [r3, #28]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b088      	sub	sp, #32
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	60f8      	str	r0, [r7, #12]
 8007a96:	60b9      	str	r1, [r7, #8]
 8007a98:	603b      	str	r3, [r7, #0]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a9e:	f7ff fa59 	bl	8006f54 <HAL_GetTick>
 8007aa2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007aa4:	88fb      	ldrh	r3, [r7, #6]
 8007aa6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d001      	beq.n	8007ab8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e12a      	b.n	8007d0e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <HAL_SPI_Transmit+0x36>
 8007abe:	88fb      	ldrh	r3, [r7, #6]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e122      	b.n	8007d0e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d101      	bne.n	8007ad6 <HAL_SPI_Transmit+0x48>
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	e11b      	b.n	8007d0e <HAL_SPI_Transmit+0x280>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2203      	movs	r2, #3
 8007ae2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	88fa      	ldrh	r2, [r7, #6]
 8007af6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	88fa      	ldrh	r2, [r7, #6]
 8007afc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b24:	d10f      	bne.n	8007b46 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b50:	2b40      	cmp	r3, #64	@ 0x40
 8007b52:	d007      	beq.n	8007b64 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b6c:	d152      	bne.n	8007c14 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <HAL_SPI_Transmit+0xee>
 8007b76:	8b7b      	ldrh	r3, [r7, #26]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d145      	bne.n	8007c08 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b80:	881a      	ldrh	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8c:	1c9a      	adds	r2, r3, #2
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007ba0:	e032      	b.n	8007c08 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d112      	bne.n	8007bd6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb4:	881a      	ldrh	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc0:	1c9a      	adds	r2, r3, #2
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007bd4:	e018      	b.n	8007c08 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bd6:	f7ff f9bd 	bl	8006f54 <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d803      	bhi.n	8007bee <HAL_SPI_Transmit+0x160>
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bec:	d102      	bne.n	8007bf4 <HAL_SPI_Transmit+0x166>
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d109      	bne.n	8007c08 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e082      	b.n	8007d0e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1c7      	bne.n	8007ba2 <HAL_SPI_Transmit+0x114>
 8007c12:	e053      	b.n	8007cbc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <HAL_SPI_Transmit+0x194>
 8007c1c:	8b7b      	ldrh	r3, [r7, #26]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d147      	bne.n	8007cb2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	330c      	adds	r3, #12
 8007c2c:	7812      	ldrb	r2, [r2, #0]
 8007c2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	3b01      	subs	r3, #1
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007c48:	e033      	b.n	8007cb2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d113      	bne.n	8007c80 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	330c      	adds	r3, #12
 8007c62:	7812      	ldrb	r2, [r2, #0]
 8007c64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	3b01      	subs	r3, #1
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007c7e:	e018      	b.n	8007cb2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c80:	f7ff f968 	bl	8006f54 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d803      	bhi.n	8007c98 <HAL_SPI_Transmit+0x20a>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c96:	d102      	bne.n	8007c9e <HAL_SPI_Transmit+0x210>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d109      	bne.n	8007cb2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e02d      	b.n	8007d0e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1c6      	bne.n	8007c4a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cbc:	69fa      	ldr	r2, [r7, #28]
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 fbd9 	bl	8008478 <SPI_EndRxTxTransaction>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10a      	bne.n	8007cf0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	617b      	str	r3, [r7, #20]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	617b      	str	r3, [r7, #20]
 8007cee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e000      	b.n	8007d0e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
  }
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3720      	adds	r7, #32
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b088      	sub	sp, #32
 8007d1a:	af02      	add	r7, sp, #8
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	603b      	str	r3, [r7, #0]
 8007d22:	4613      	mov	r3, r2
 8007d24:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d001      	beq.n	8007d36 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007d32:	2302      	movs	r3, #2
 8007d34:	e104      	b.n	8007f40 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d3e:	d112      	bne.n	8007d66 <HAL_SPI_Receive+0x50>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10e      	bne.n	8007d66 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2204      	movs	r2, #4
 8007d4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007d50:	88fa      	ldrh	r2, [r7, #6]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	4613      	mov	r3, r2
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	68b9      	ldr	r1, [r7, #8]
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 f8f3 	bl	8007f48 <HAL_SPI_TransmitReceive>
 8007d62:	4603      	mov	r3, r0
 8007d64:	e0ec      	b.n	8007f40 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d66:	f7ff f8f5 	bl	8006f54 <HAL_GetTick>
 8007d6a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <HAL_SPI_Receive+0x62>
 8007d72:	88fb      	ldrh	r3, [r7, #6]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e0e1      	b.n	8007f40 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d101      	bne.n	8007d8a <HAL_SPI_Receive+0x74>
 8007d86:	2302      	movs	r3, #2
 8007d88:	e0da      	b.n	8007f40 <HAL_SPI_Receive+0x22a>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2204      	movs	r2, #4
 8007d96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	88fa      	ldrh	r2, [r7, #6]
 8007daa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	88fa      	ldrh	r2, [r7, #6]
 8007db0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dd8:	d10f      	bne.n	8007dfa <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007de8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007df8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e04:	2b40      	cmp	r3, #64	@ 0x40
 8007e06:	d007      	beq.n	8007e18 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e16:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d170      	bne.n	8007f02 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007e20:	e035      	b.n	8007e8e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d115      	bne.n	8007e5c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f103 020c 	add.w	r2, r3, #12
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3c:	7812      	ldrb	r2, [r2, #0]
 8007e3e:	b2d2      	uxtb	r2, r2
 8007e40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	3b01      	subs	r3, #1
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e5a:	e018      	b.n	8007e8e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e5c:	f7ff f87a 	bl	8006f54 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d803      	bhi.n	8007e74 <HAL_SPI_Receive+0x15e>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e72:	d102      	bne.n	8007e7a <HAL_SPI_Receive+0x164>
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d109      	bne.n	8007e8e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e058      	b.n	8007f40 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1c4      	bne.n	8007e22 <HAL_SPI_Receive+0x10c>
 8007e98:	e038      	b.n	8007f0c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d113      	bne.n	8007ed0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68da      	ldr	r2, [r3, #12]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb2:	b292      	uxth	r2, r2
 8007eb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eba:	1c9a      	adds	r2, r3, #2
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ece:	e018      	b.n	8007f02 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ed0:	f7ff f840 	bl	8006f54 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d803      	bhi.n	8007ee8 <HAL_SPI_Receive+0x1d2>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee6:	d102      	bne.n	8007eee <HAL_SPI_Receive+0x1d8>
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d109      	bne.n	8007f02 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e01e      	b.n	8007f40 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1c6      	bne.n	8007e9a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 fa4b 	bl	80083ac <SPI_EndRxTransaction>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e000      	b.n	8007f40 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
  }
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08a      	sub	sp, #40	@ 0x28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
 8007f54:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007f56:	2301      	movs	r3, #1
 8007f58:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f5a:	f7fe fffb 	bl	8006f54 <HAL_GetTick>
 8007f5e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f66:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007f6e:	887b      	ldrh	r3, [r7, #2]
 8007f70:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007f72:	7ffb      	ldrb	r3, [r7, #31]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d00c      	beq.n	8007f92 <HAL_SPI_TransmitReceive+0x4a>
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f7e:	d106      	bne.n	8007f8e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d102      	bne.n	8007f8e <HAL_SPI_TransmitReceive+0x46>
 8007f88:	7ffb      	ldrb	r3, [r7, #31]
 8007f8a:	2b04      	cmp	r3, #4
 8007f8c:	d001      	beq.n	8007f92 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007f8e:	2302      	movs	r3, #2
 8007f90:	e17f      	b.n	8008292 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d005      	beq.n	8007fa4 <HAL_SPI_TransmitReceive+0x5c>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <HAL_SPI_TransmitReceive+0x5c>
 8007f9e:	887b      	ldrh	r3, [r7, #2]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e174      	b.n	8008292 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d101      	bne.n	8007fb6 <HAL_SPI_TransmitReceive+0x6e>
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	e16d      	b.n	8008292 <HAL_SPI_TransmitReceive+0x34a>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b04      	cmp	r3, #4
 8007fc8:	d003      	beq.n	8007fd2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2205      	movs	r2, #5
 8007fce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	887a      	ldrh	r2, [r7, #2]
 8007fe2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	887a      	ldrh	r2, [r7, #2]
 8007fe8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	887a      	ldrh	r2, [r7, #2]
 8007ff4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	887a      	ldrh	r2, [r7, #2]
 8007ffa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008012:	2b40      	cmp	r3, #64	@ 0x40
 8008014:	d007      	beq.n	8008026 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008024:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800802e:	d17e      	bne.n	800812e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <HAL_SPI_TransmitReceive+0xf6>
 8008038:	8afb      	ldrh	r3, [r7, #22]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d16c      	bne.n	8008118 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008042:	881a      	ldrh	r2, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800804e:	1c9a      	adds	r2, r3, #2
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008058:	b29b      	uxth	r3, r3
 800805a:	3b01      	subs	r3, #1
 800805c:	b29a      	uxth	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008062:	e059      	b.n	8008118 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f003 0302 	and.w	r3, r3, #2
 800806e:	2b02      	cmp	r3, #2
 8008070:	d11b      	bne.n	80080aa <HAL_SPI_TransmitReceive+0x162>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008076:	b29b      	uxth	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	d016      	beq.n	80080aa <HAL_SPI_TransmitReceive+0x162>
 800807c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807e:	2b01      	cmp	r3, #1
 8008080:	d113      	bne.n	80080aa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008086:	881a      	ldrh	r2, [r3, #0]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008092:	1c9a      	adds	r2, r3, #2
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800809c:	b29b      	uxth	r3, r3
 800809e:	3b01      	subs	r3, #1
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d119      	bne.n	80080ec <HAL_SPI_TransmitReceive+0x1a4>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080bc:	b29b      	uxth	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d014      	beq.n	80080ec <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68da      	ldr	r2, [r3, #12]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080cc:	b292      	uxth	r2, r2
 80080ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d4:	1c9a      	adds	r2, r3, #2
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080de:	b29b      	uxth	r3, r3
 80080e0:	3b01      	subs	r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80080e8:	2301      	movs	r3, #1
 80080ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80080ec:	f7fe ff32 	bl	8006f54 <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d80d      	bhi.n	8008118 <HAL_SPI_TransmitReceive+0x1d0>
 80080fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008102:	d009      	beq.n	8008118 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008114:	2303      	movs	r3, #3
 8008116:	e0bc      	b.n	8008292 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800811c:	b29b      	uxth	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1a0      	bne.n	8008064 <HAL_SPI_TransmitReceive+0x11c>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008126:	b29b      	uxth	r3, r3
 8008128:	2b00      	cmp	r3, #0
 800812a:	d19b      	bne.n	8008064 <HAL_SPI_TransmitReceive+0x11c>
 800812c:	e082      	b.n	8008234 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <HAL_SPI_TransmitReceive+0x1f4>
 8008136:	8afb      	ldrh	r3, [r7, #22]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d171      	bne.n	8008220 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	330c      	adds	r3, #12
 8008146:	7812      	ldrb	r2, [r2, #0]
 8008148:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800814e:	1c5a      	adds	r2, r3, #1
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008158:	b29b      	uxth	r3, r3
 800815a:	3b01      	subs	r3, #1
 800815c:	b29a      	uxth	r2, r3
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008162:	e05d      	b.n	8008220 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b02      	cmp	r3, #2
 8008170:	d11c      	bne.n	80081ac <HAL_SPI_TransmitReceive+0x264>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008176:	b29b      	uxth	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d017      	beq.n	80081ac <HAL_SPI_TransmitReceive+0x264>
 800817c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817e:	2b01      	cmp	r3, #1
 8008180:	d114      	bne.n	80081ac <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	330c      	adds	r3, #12
 800818c:	7812      	ldrb	r2, [r2, #0]
 800818e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800819e:	b29b      	uxth	r3, r3
 80081a0:	3b01      	subs	r3, #1
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d119      	bne.n	80081ee <HAL_SPI_TransmitReceive+0x2a6>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081be:	b29b      	uxth	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d014      	beq.n	80081ee <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ce:	b2d2      	uxtb	r2, r2
 80081d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	3b01      	subs	r3, #1
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80081ea:	2301      	movs	r3, #1
 80081ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80081ee:	f7fe feb1 	bl	8006f54 <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d803      	bhi.n	8008206 <HAL_SPI_TransmitReceive+0x2be>
 80081fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008204:	d102      	bne.n	800820c <HAL_SPI_TransmitReceive+0x2c4>
 8008206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008208:	2b00      	cmp	r3, #0
 800820a:	d109      	bne.n	8008220 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e038      	b.n	8008292 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008224:	b29b      	uxth	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	d19c      	bne.n	8008164 <HAL_SPI_TransmitReceive+0x21c>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800822e:	b29b      	uxth	r3, r3
 8008230:	2b00      	cmp	r3, #0
 8008232:	d197      	bne.n	8008164 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008234:	6a3a      	ldr	r2, [r7, #32]
 8008236:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 f91d 	bl	8008478 <SPI_EndRxTxTransaction>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d008      	beq.n	8008256 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2220      	movs	r2, #32
 8008248:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e01d      	b.n	8008292 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10a      	bne.n	8008274 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800825e:	2300      	movs	r3, #0
 8008260:	613b      	str	r3, [r7, #16]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	613b      	str	r3, [r7, #16]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	613b      	str	r3, [r7, #16]
 8008272:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e000      	b.n	8008292 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008290:	2300      	movs	r3, #0
  }
}
 8008292:	4618      	mov	r0, r3
 8008294:	3728      	adds	r7, #40	@ 0x28
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
	...

0800829c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	603b      	str	r3, [r7, #0]
 80082a8:	4613      	mov	r3, r2
 80082aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082ac:	f7fe fe52 	bl	8006f54 <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b4:	1a9b      	subs	r3, r3, r2
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	4413      	add	r3, r2
 80082ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082bc:	f7fe fe4a 	bl	8006f54 <HAL_GetTick>
 80082c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082c2:	4b39      	ldr	r3, [pc, #228]	@ (80083a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	015b      	lsls	r3, r3, #5
 80082c8:	0d1b      	lsrs	r3, r3, #20
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	fb02 f303 	mul.w	r3, r2, r3
 80082d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082d2:	e054      	b.n	800837e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082da:	d050      	beq.n	800837e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082dc:	f7fe fe3a 	bl	8006f54 <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d902      	bls.n	80082f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d13d      	bne.n	800836e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008300:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800830a:	d111      	bne.n	8008330 <SPI_WaitFlagStateUntilTimeout+0x94>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008314:	d004      	beq.n	8008320 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800831e:	d107      	bne.n	8008330 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800832e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008334:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008338:	d10f      	bne.n	800835a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008358:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e017      	b.n	800839e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	3b01      	subs	r3, #1
 800837c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	4013      	ands	r3, r2
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	429a      	cmp	r2, r3
 800838c:	bf0c      	ite	eq
 800838e:	2301      	moveq	r3, #1
 8008390:	2300      	movne	r3, #0
 8008392:	b2db      	uxtb	r3, r3
 8008394:	461a      	mov	r2, r3
 8008396:	79fb      	ldrb	r3, [r7, #7]
 8008398:	429a      	cmp	r2, r3
 800839a:	d19b      	bne.n	80082d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3720      	adds	r7, #32
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	200022c0 	.word	0x200022c0

080083ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af02      	add	r7, sp, #8
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083c0:	d111      	bne.n	80083e6 <SPI_EndRxTransaction+0x3a>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083ca:	d004      	beq.n	80083d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083d4:	d107      	bne.n	80083e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083ee:	d12a      	bne.n	8008446 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083f8:	d012      	beq.n	8008420 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2200      	movs	r2, #0
 8008402:	2180      	movs	r1, #128	@ 0x80
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f7ff ff49 	bl	800829c <SPI_WaitFlagStateUntilTimeout>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d02d      	beq.n	800846c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008414:	f043 0220 	orr.w	r2, r3, #32
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800841c:	2303      	movs	r3, #3
 800841e:	e026      	b.n	800846e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2200      	movs	r2, #0
 8008428:	2101      	movs	r1, #1
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7ff ff36 	bl	800829c <SPI_WaitFlagStateUntilTimeout>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d01a      	beq.n	800846c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800843a:	f043 0220 	orr.w	r2, r3, #32
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e013      	b.n	800846e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	2200      	movs	r2, #0
 800844e:	2101      	movs	r1, #1
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f7ff ff23 	bl	800829c <SPI_WaitFlagStateUntilTimeout>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d007      	beq.n	800846c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008460:	f043 0220 	orr.w	r2, r3, #32
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	e000      	b.n	800846e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af02      	add	r7, sp, #8
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2201      	movs	r2, #1
 800848c:	2102      	movs	r1, #2
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f7ff ff04 	bl	800829c <SPI_WaitFlagStateUntilTimeout>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d007      	beq.n	80084aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800849e:	f043 0220 	orr.w	r2, r3, #32
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e032      	b.n	8008510 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80084aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008518 <SPI_EndRxTxTransaction+0xa0>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a1b      	ldr	r2, [pc, #108]	@ (800851c <SPI_EndRxTxTransaction+0xa4>)
 80084b0:	fba2 2303 	umull	r2, r3, r2, r3
 80084b4:	0d5b      	lsrs	r3, r3, #21
 80084b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80084ba:	fb02 f303 	mul.w	r3, r2, r3
 80084be:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084c8:	d112      	bne.n	80084f0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2200      	movs	r2, #0
 80084d2:	2180      	movs	r1, #128	@ 0x80
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f7ff fee1 	bl	800829c <SPI_WaitFlagStateUntilTimeout>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d016      	beq.n	800850e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e4:	f043 0220 	orr.w	r2, r3, #32
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e00f      	b.n	8008510 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00a      	beq.n	800850c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	3b01      	subs	r3, #1
 80084fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008506:	2b80      	cmp	r3, #128	@ 0x80
 8008508:	d0f2      	beq.n	80084f0 <SPI_EndRxTxTransaction+0x78>
 800850a:	e000      	b.n	800850e <SPI_EndRxTxTransaction+0x96>
        break;
 800850c:	bf00      	nop
  }

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	200022c0 	.word	0x200022c0
 800851c:	165e9f81 	.word	0x165e9f81

08008520 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d101      	bne.n	8008532 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e041      	b.n	80085b6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d106      	bne.n	800854c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7fe f882 	bl	8006650 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2202      	movs	r2, #2
 8008550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3304      	adds	r3, #4
 800855c:	4619      	mov	r1, r3
 800855e:	4610      	mov	r0, r2
 8008560:	f000 f88a 	bl	8008678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
	...

080085c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d101      	bne.n	80085de <HAL_TIM_OC_ConfigChannel+0x1e>
 80085da:	2302      	movs	r3, #2
 80085dc:	e048      	b.n	8008670 <HAL_TIM_OC_ConfigChannel+0xb0>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b0c      	cmp	r3, #12
 80085ea:	d839      	bhi.n	8008660 <HAL_TIM_OC_ConfigChannel+0xa0>
 80085ec:	a201      	add	r2, pc, #4	@ (adr r2, 80085f4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80085ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f2:	bf00      	nop
 80085f4:	08008629 	.word	0x08008629
 80085f8:	08008661 	.word	0x08008661
 80085fc:	08008661 	.word	0x08008661
 8008600:	08008661 	.word	0x08008661
 8008604:	08008637 	.word	0x08008637
 8008608:	08008661 	.word	0x08008661
 800860c:	08008661 	.word	0x08008661
 8008610:	08008661 	.word	0x08008661
 8008614:	08008645 	.word	0x08008645
 8008618:	08008661 	.word	0x08008661
 800861c:	08008661 	.word	0x08008661
 8008620:	08008661 	.word	0x08008661
 8008624:	08008653 	.word	0x08008653
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68b9      	ldr	r1, [r7, #8]
 800862e:	4618      	mov	r0, r3
 8008630:	f000 f8ce 	bl	80087d0 <TIM_OC1_SetConfig>
      break;
 8008634:	e017      	b.n	8008666 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68b9      	ldr	r1, [r7, #8]
 800863c:	4618      	mov	r0, r3
 800863e:	f000 f937 	bl	80088b0 <TIM_OC2_SetConfig>
      break;
 8008642:	e010      	b.n	8008666 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68b9      	ldr	r1, [r7, #8]
 800864a:	4618      	mov	r0, r3
 800864c:	f000 f9a6 	bl	800899c <TIM_OC3_SetConfig>
      break;
 8008650:	e009      	b.n	8008666 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68b9      	ldr	r1, [r7, #8]
 8008658:	4618      	mov	r0, r3
 800865a:	f000 fa13 	bl	8008a84 <TIM_OC4_SetConfig>
      break;
 800865e:	e002      	b.n	8008666 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	75fb      	strb	r3, [r7, #23]
      break;
 8008664:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800866e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a46      	ldr	r2, [pc, #280]	@ (80087a4 <TIM_Base_SetConfig+0x12c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d013      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008696:	d00f      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a43      	ldr	r2, [pc, #268]	@ (80087a8 <TIM_Base_SetConfig+0x130>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d00b      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a42      	ldr	r2, [pc, #264]	@ (80087ac <TIM_Base_SetConfig+0x134>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d007      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a41      	ldr	r2, [pc, #260]	@ (80087b0 <TIM_Base_SetConfig+0x138>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d003      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a40      	ldr	r2, [pc, #256]	@ (80087b4 <TIM_Base_SetConfig+0x13c>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d108      	bne.n	80086ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a35      	ldr	r2, [pc, #212]	@ (80087a4 <TIM_Base_SetConfig+0x12c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d02b      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086d8:	d027      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a32      	ldr	r2, [pc, #200]	@ (80087a8 <TIM_Base_SetConfig+0x130>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d023      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a31      	ldr	r2, [pc, #196]	@ (80087ac <TIM_Base_SetConfig+0x134>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d01f      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a30      	ldr	r2, [pc, #192]	@ (80087b0 <TIM_Base_SetConfig+0x138>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d01b      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a2f      	ldr	r2, [pc, #188]	@ (80087b4 <TIM_Base_SetConfig+0x13c>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d017      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a2e      	ldr	r2, [pc, #184]	@ (80087b8 <TIM_Base_SetConfig+0x140>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d013      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a2d      	ldr	r2, [pc, #180]	@ (80087bc <TIM_Base_SetConfig+0x144>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00f      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a2c      	ldr	r2, [pc, #176]	@ (80087c0 <TIM_Base_SetConfig+0x148>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d00b      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a2b      	ldr	r2, [pc, #172]	@ (80087c4 <TIM_Base_SetConfig+0x14c>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d007      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a2a      	ldr	r2, [pc, #168]	@ (80087c8 <TIM_Base_SetConfig+0x150>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d003      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a29      	ldr	r2, [pc, #164]	@ (80087cc <TIM_Base_SetConfig+0x154>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d108      	bne.n	800873c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	4313      	orrs	r3, r2
 800873a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	689a      	ldr	r2, [r3, #8]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a10      	ldr	r2, [pc, #64]	@ (80087a4 <TIM_Base_SetConfig+0x12c>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d003      	beq.n	8008770 <TIM_Base_SetConfig+0xf8>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a12      	ldr	r2, [pc, #72]	@ (80087b4 <TIM_Base_SetConfig+0x13c>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d103      	bne.n	8008778 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	691a      	ldr	r2, [r3, #16]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b01      	cmp	r3, #1
 8008788:	d105      	bne.n	8008796 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	f023 0201 	bic.w	r2, r3, #1
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	611a      	str	r2, [r3, #16]
  }
}
 8008796:	bf00      	nop
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	40010000 	.word	0x40010000
 80087a8:	40000400 	.word	0x40000400
 80087ac:	40000800 	.word	0x40000800
 80087b0:	40000c00 	.word	0x40000c00
 80087b4:	40010400 	.word	0x40010400
 80087b8:	40014000 	.word	0x40014000
 80087bc:	40014400 	.word	0x40014400
 80087c0:	40014800 	.word	0x40014800
 80087c4:	40001800 	.word	0x40001800
 80087c8:	40001c00 	.word	0x40001c00
 80087cc:	40002000 	.word	0x40002000

080087d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a1b      	ldr	r3, [r3, #32]
 80087e4:	f023 0201 	bic.w	r2, r3, #1
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f023 0303 	bic.w	r3, r3, #3
 8008806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	4313      	orrs	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	f023 0302 	bic.w	r3, r3, #2
 8008818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	4313      	orrs	r3, r2
 8008822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a20      	ldr	r2, [pc, #128]	@ (80088a8 <TIM_OC1_SetConfig+0xd8>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d003      	beq.n	8008834 <TIM_OC1_SetConfig+0x64>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a1f      	ldr	r2, [pc, #124]	@ (80088ac <TIM_OC1_SetConfig+0xdc>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d10c      	bne.n	800884e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	f023 0308 	bic.w	r3, r3, #8
 800883a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	4313      	orrs	r3, r2
 8008844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f023 0304 	bic.w	r3, r3, #4
 800884c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a15      	ldr	r2, [pc, #84]	@ (80088a8 <TIM_OC1_SetConfig+0xd8>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d003      	beq.n	800885e <TIM_OC1_SetConfig+0x8e>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a14      	ldr	r2, [pc, #80]	@ (80088ac <TIM_OC1_SetConfig+0xdc>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d111      	bne.n	8008882 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800886c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	4313      	orrs	r3, r2
 8008876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	4313      	orrs	r3, r2
 8008880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	685a      	ldr	r2, [r3, #4]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	621a      	str	r2, [r3, #32]
}
 800889c:	bf00      	nop
 800889e:	371c      	adds	r7, #28
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr
 80088a8:	40010000 	.word	0x40010000
 80088ac:	40010400 	.word	0x40010400

080088b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a1b      	ldr	r3, [r3, #32]
 80088c4:	f023 0210 	bic.w	r2, r3, #16
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	021b      	lsls	r3, r3, #8
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f023 0320 	bic.w	r3, r3, #32
 80088fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	011b      	lsls	r3, r3, #4
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	4313      	orrs	r3, r2
 8008906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a22      	ldr	r2, [pc, #136]	@ (8008994 <TIM_OC2_SetConfig+0xe4>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d003      	beq.n	8008918 <TIM_OC2_SetConfig+0x68>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a21      	ldr	r2, [pc, #132]	@ (8008998 <TIM_OC2_SetConfig+0xe8>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d10d      	bne.n	8008934 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800891e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	011b      	lsls	r3, r3, #4
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	4313      	orrs	r3, r2
 800892a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008932:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a17      	ldr	r2, [pc, #92]	@ (8008994 <TIM_OC2_SetConfig+0xe4>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d003      	beq.n	8008944 <TIM_OC2_SetConfig+0x94>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a16      	ldr	r2, [pc, #88]	@ (8008998 <TIM_OC2_SetConfig+0xe8>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d113      	bne.n	800896c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800894a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008952:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	4313      	orrs	r3, r2
 800895e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	4313      	orrs	r3, r2
 800896a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	621a      	str	r2, [r3, #32]
}
 8008986:	bf00      	nop
 8008988:	371c      	adds	r7, #28
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	40010000 	.word	0x40010000
 8008998:	40010400 	.word	0x40010400

0800899c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800899c:	b480      	push	{r7}
 800899e:	b087      	sub	sp, #28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f023 0303 	bic.w	r3, r3, #3
 80089d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	4313      	orrs	r3, r2
 80089dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80089e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a21      	ldr	r2, [pc, #132]	@ (8008a7c <TIM_OC3_SetConfig+0xe0>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d003      	beq.n	8008a02 <TIM_OC3_SetConfig+0x66>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a20      	ldr	r2, [pc, #128]	@ (8008a80 <TIM_OC3_SetConfig+0xe4>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d10d      	bne.n	8008a1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	021b      	lsls	r3, r3, #8
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a16      	ldr	r2, [pc, #88]	@ (8008a7c <TIM_OC3_SetConfig+0xe0>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d003      	beq.n	8008a2e <TIM_OC3_SetConfig+0x92>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a15      	ldr	r2, [pc, #84]	@ (8008a80 <TIM_OC3_SetConfig+0xe4>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d113      	bne.n	8008a56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	011b      	lsls	r3, r3, #4
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	011b      	lsls	r3, r3, #4
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	621a      	str	r2, [r3, #32]
}
 8008a70:	bf00      	nop
 8008a72:	371c      	adds	r7, #28
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	40010000 	.word	0x40010000
 8008a80:	40010400 	.word	0x40010400

08008a84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	021b      	lsls	r3, r3, #8
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	031b      	lsls	r3, r3, #12
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a12      	ldr	r2, [pc, #72]	@ (8008b28 <TIM_OC4_SetConfig+0xa4>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d003      	beq.n	8008aec <TIM_OC4_SetConfig+0x68>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a11      	ldr	r2, [pc, #68]	@ (8008b2c <TIM_OC4_SetConfig+0xa8>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d109      	bne.n	8008b00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008af2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	019b      	lsls	r3, r3, #6
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	621a      	str	r2, [r3, #32]
}
 8008b1a:	bf00      	nop
 8008b1c:	371c      	adds	r7, #28
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	40010000 	.word	0x40010000
 8008b2c:	40010400 	.word	0x40010400

08008b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d101      	bne.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b44:	2302      	movs	r3, #2
 8008b46:	e05a      	b.n	8008bfe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2202      	movs	r2, #2
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a21      	ldr	r2, [pc, #132]	@ (8008c0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d022      	beq.n	8008bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b94:	d01d      	beq.n	8008bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8008c10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d018      	beq.n	8008bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8008c14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d013      	beq.n	8008bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a1a      	ldr	r2, [pc, #104]	@ (8008c18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d00e      	beq.n	8008bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a18      	ldr	r2, [pc, #96]	@ (8008c1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d009      	beq.n	8008bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a17      	ldr	r2, [pc, #92]	@ (8008c20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d004      	beq.n	8008bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a15      	ldr	r2, [pc, #84]	@ (8008c24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d10c      	bne.n	8008bec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	40010000 	.word	0x40010000
 8008c10:	40000400 	.word	0x40000400
 8008c14:	40000800 	.word	0x40000800
 8008c18:	40000c00 	.word	0x40000c00
 8008c1c:	40010400 	.word	0x40010400
 8008c20:	40014000 	.word	0x40014000
 8008c24:	40001800 	.word	0x40001800

08008c28 <LL_ADC_REG_SetSequencerLength>:
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c36:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	431a      	orrs	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008c42:	bf00      	nop
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <LL_ADC_IsEnabled>:
{
 8008c4e:	b480      	push	{r7}
 8008c50:	b083      	sub	sp, #12
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	bf0c      	ite	eq
 8008c62:	2301      	moveq	r3, #1
 8008c64:	2300      	movne	r3, #0
 8008c66:	b2db      	uxtb	r3, r3
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8008c74:	b590      	push	{r4, r7, lr}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8008c82:	481c      	ldr	r0, [pc, #112]	@ (8008cf4 <LL_ADC_CommonInit+0x80>)
 8008c84:	f7ff ffe3 	bl	8008c4e <LL_ADC_IsEnabled>
 8008c88:	4604      	mov	r4, r0
 8008c8a:	481b      	ldr	r0, [pc, #108]	@ (8008cf8 <LL_ADC_CommonInit+0x84>)
 8008c8c:	f7ff ffdf 	bl	8008c4e <LL_ADC_IsEnabled>
 8008c90:	4603      	mov	r3, r0
 8008c92:	431c      	orrs	r4, r3
 8008c94:	4819      	ldr	r0, [pc, #100]	@ (8008cfc <LL_ADC_CommonInit+0x88>)
 8008c96:	f7ff ffda 	bl	8008c4e <LL_ADC_IsEnabled>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	4323      	orrs	r3, r4
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d120      	bne.n	8008ce4 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d012      	beq.n	8008cd0 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	4b14      	ldr	r3, [pc, #80]	@ (8008d00 <LL_ADC_CommonInit+0x8c>)
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	6811      	ldr	r1, [r2, #0]
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	6852      	ldr	r2, [r2, #4]
 8008cba:	4311      	orrs	r1, r2
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	6892      	ldr	r2, [r2, #8]
 8008cc0:	4311      	orrs	r1, r2
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	68d2      	ldr	r2, [r2, #12]
 8008cc6:	430a      	orrs	r2, r1
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	605a      	str	r2, [r3, #4]
 8008cce:	e00b      	b.n	8008ce8 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8008d00 <LL_ADC_CommonInit+0x8c>)
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	6812      	ldr	r2, [r2, #0]
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	605a      	str	r2, [r3, #4]
 8008ce2:	e001      	b.n	8008ce8 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd90      	pop	{r4, r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	40012000 	.word	0x40012000
 8008cf8:	40012100 	.word	0x40012100
 8008cfc:	40012200 	.word	0x40012200
 8008d00:	fffc10e0 	.word	0xfffc10e0

08008d04 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7ff ff9b 	bl	8008c4e <LL_ADC_IsEnabled>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d117      	bne.n	8008d4e <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8008d26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	6811      	ldr	r1, [r2, #0]
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	6892      	ldr	r2, [r2, #8]
 8008d32:	430a      	orrs	r2, r1
 8008d34:	431a      	orrs	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	431a      	orrs	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	609a      	str	r2, [r3, #8]
 8008d4c:	e001      	b.n	8008d52 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7ff ff6f 	bl	8008c4e <LL_ADC_IsEnabled>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d12b      	bne.n	8008dce <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d009      	beq.n	8008d92 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	605a      	str	r2, [r3, #4]
 8008d90:	e005      	b.n	8008d9e <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	689a      	ldr	r2, [r3, #8]
 8008da2:	4b0e      	ldr	r3, [pc, #56]	@ (8008ddc <LL_ADC_REG_Init+0x80>)
 8008da4:	4013      	ands	r3, r2
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	6812      	ldr	r2, [r2, #0]
 8008daa:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	68d2      	ldr	r2, [r2, #12]
 8008db2:	4311      	orrs	r1, r2
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	6912      	ldr	r2, [r2, #16]
 8008db8:	430a      	orrs	r2, r1
 8008dba:	431a      	orrs	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff ff2e 	bl	8008c28 <LL_ADC_REG_SetSequencerLength>
 8008dcc:	e001      	b.n	8008dd2 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	c0fffcfd 	.word	0xc0fffcfd

08008de0 <LL_GPIO_SetPinMode>:
{
 8008de0:	b480      	push	{r7}
 8008de2:	b08b      	sub	sp, #44	@ 0x2c
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	fa93 f3a3 	rbit	r3, r3
 8008dfa:	613b      	str	r3, [r7, #16]
  return result;
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008e06:	2320      	movs	r3, #32
 8008e08:	e003      	b.n	8008e12 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	fab3 f383 	clz	r3, r3
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	005b      	lsls	r3, r3, #1
 8008e14:	2103      	movs	r1, #3
 8008e16:	fa01 f303 	lsl.w	r3, r1, r3
 8008e1a:	43db      	mvns	r3, r3
 8008e1c:	401a      	ands	r2, r3
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	fa93 f3a3 	rbit	r3, r3
 8008e28:	61fb      	str	r3, [r7, #28]
  return result;
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d101      	bne.n	8008e38 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008e34:	2320      	movs	r3, #32
 8008e36:	e003      	b.n	8008e40 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3a:	fab3 f383 	clz	r3, r3
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	005b      	lsls	r3, r3, #1
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	fa01 f303 	lsl.w	r3, r1, r3
 8008e48:	431a      	orrs	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	601a      	str	r2, [r3, #0]
}
 8008e4e:	bf00      	nop
 8008e50:	372c      	adds	r7, #44	@ 0x2c
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <LL_GPIO_SetPinOutputType>:
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b085      	sub	sp, #20
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	60f8      	str	r0, [r7, #12]
 8008e62:	60b9      	str	r1, [r7, #8]
 8008e64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	43db      	mvns	r3, r3
 8008e6e:	401a      	ands	r2, r3
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	6879      	ldr	r1, [r7, #4]
 8008e74:	fb01 f303 	mul.w	r3, r1, r3
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	605a      	str	r2, [r3, #4]
}
 8008e7e:	bf00      	nop
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <LL_GPIO_SetPinSpeed>:
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b08b      	sub	sp, #44	@ 0x2c
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	60b9      	str	r1, [r7, #8]
 8008e94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	689a      	ldr	r2, [r3, #8]
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	fa93 f3a3 	rbit	r3, r3
 8008ea4:	613b      	str	r3, [r7, #16]
  return result;
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008eb0:	2320      	movs	r3, #32
 8008eb2:	e003      	b.n	8008ebc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	fab3 f383 	clz	r3, r3
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	2103      	movs	r1, #3
 8008ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ec4:	43db      	mvns	r3, r3
 8008ec6:	401a      	ands	r2, r3
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	fa93 f3a3 	rbit	r3, r3
 8008ed2:	61fb      	str	r3, [r7, #28]
  return result;
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008ede:	2320      	movs	r3, #32
 8008ee0:	e003      	b.n	8008eea <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee4:	fab3 f383 	clz	r3, r3
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	005b      	lsls	r3, r3, #1
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	609a      	str	r2, [r3, #8]
}
 8008ef8:	bf00      	nop
 8008efa:	372c      	adds	r7, #44	@ 0x2c
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <LL_GPIO_SetPinPull>:
{
 8008f04:	b480      	push	{r7}
 8008f06:	b08b      	sub	sp, #44	@ 0x2c
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	68da      	ldr	r2, [r3, #12]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	fa93 f3a3 	rbit	r3, r3
 8008f1e:	613b      	str	r3, [r7, #16]
  return result;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008f2a:	2320      	movs	r3, #32
 8008f2c:	e003      	b.n	8008f36 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	fab3 f383 	clz	r3, r3
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	005b      	lsls	r3, r3, #1
 8008f38:	2103      	movs	r1, #3
 8008f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f3e:	43db      	mvns	r3, r3
 8008f40:	401a      	ands	r2, r3
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f46:	6a3b      	ldr	r3, [r7, #32]
 8008f48:	fa93 f3a3 	rbit	r3, r3
 8008f4c:	61fb      	str	r3, [r7, #28]
  return result;
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d101      	bne.n	8008f5c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008f58:	2320      	movs	r3, #32
 8008f5a:	e003      	b.n	8008f64 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5e:	fab3 f383 	clz	r3, r3
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	005b      	lsls	r3, r3, #1
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	fa01 f303 	lsl.w	r3, r1, r3
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	60da      	str	r2, [r3, #12]
}
 8008f72:	bf00      	nop
 8008f74:	372c      	adds	r7, #44	@ 0x2c
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <LL_GPIO_SetAFPin_0_7>:
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b08b      	sub	sp, #44	@ 0x2c
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	60f8      	str	r0, [r7, #12]
 8008f86:	60b9      	str	r1, [r7, #8]
 8008f88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6a1a      	ldr	r2, [r3, #32]
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	fa93 f3a3 	rbit	r3, r3
 8008f98:	613b      	str	r3, [r7, #16]
  return result;
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008fa4:	2320      	movs	r3, #32
 8008fa6:	e003      	b.n	8008fb0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	fab3 f383 	clz	r3, r3
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	210f      	movs	r1, #15
 8008fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb8:	43db      	mvns	r3, r3
 8008fba:	401a      	ands	r2, r3
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	fa93 f3a3 	rbit	r3, r3
 8008fc6:	61fb      	str	r3, [r7, #28]
  return result;
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008fd2:	2320      	movs	r3, #32
 8008fd4:	e003      	b.n	8008fde <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd8:	fab3 f383 	clz	r3, r3
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	6879      	ldr	r1, [r7, #4]
 8008fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe6:	431a      	orrs	r2, r3
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	621a      	str	r2, [r3, #32]
}
 8008fec:	bf00      	nop
 8008fee:	372c      	adds	r7, #44	@ 0x2c
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <LL_GPIO_SetAFPin_8_15>:
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b08b      	sub	sp, #44	@ 0x2c
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	0a1b      	lsrs	r3, r3, #8
 800900c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	fa93 f3a3 	rbit	r3, r3
 8009014:	613b      	str	r3, [r7, #16]
  return result;
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009020:	2320      	movs	r3, #32
 8009022:	e003      	b.n	800902c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	fab3 f383 	clz	r3, r3
 800902a:	b2db      	uxtb	r3, r3
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	210f      	movs	r1, #15
 8009030:	fa01 f303 	lsl.w	r3, r1, r3
 8009034:	43db      	mvns	r3, r3
 8009036:	401a      	ands	r2, r3
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	0a1b      	lsrs	r3, r3, #8
 800903c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	fa93 f3a3 	rbit	r3, r3
 8009044:	61fb      	str	r3, [r7, #28]
  return result;
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800904a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009050:	2320      	movs	r3, #32
 8009052:	e003      	b.n	800905c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009056:	fab3 f383 	clz	r3, r3
 800905a:	b2db      	uxtb	r3, r3
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	fa01 f303 	lsl.w	r3, r1, r3
 8009064:	431a      	orrs	r2, r3
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800906a:	bf00      	nop
 800906c:	372c      	adds	r7, #44	@ 0x2c
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b08a      	sub	sp, #40	@ 0x28
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8009080:	2300      	movs	r3, #0
 8009082:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8009084:	2300      	movs	r3, #0
 8009086:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	fa93 f3a3 	rbit	r3, r3
 8009094:	617b      	str	r3, [r7, #20]
  return result;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <LL_GPIO_Init+0x2e>
    return 32U;
 80090a0:	2320      	movs	r3, #32
 80090a2:	e003      	b.n	80090ac <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	fab3 f383 	clz	r3, r3
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80090ae:	e057      	b.n	8009160 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	2101      	movs	r1, #1
 80090b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b8:	fa01 f303 	lsl.w	r3, r1, r3
 80090bc:	4013      	ands	r3, r2
 80090be:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d049      	beq.n	800915a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d003      	beq.n	80090d6 <LL_GPIO_Init+0x60>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d10d      	bne.n	80090f2 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	461a      	mov	r2, r3
 80090dc:	6a39      	ldr	r1, [r7, #32]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff fed3 	bl	8008e8a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	461a      	mov	r2, r3
 80090ea:	6a39      	ldr	r1, [r7, #32]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7ff feb4 	bl	8008e5a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	461a      	mov	r2, r3
 80090f8:	6a39      	ldr	r1, [r7, #32]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff ff02 	bl	8008f04 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	2b02      	cmp	r3, #2
 8009106:	d121      	bne.n	800914c <LL_GPIO_Init+0xd6>
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	fa93 f3a3 	rbit	r3, r3
 8009112:	60bb      	str	r3, [r7, #8]
  return result;
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <LL_GPIO_Init+0xac>
    return 32U;
 800911e:	2320      	movs	r3, #32
 8009120:	e003      	b.n	800912a <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	fab3 f383 	clz	r3, r3
 8009128:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800912a:	2b07      	cmp	r3, #7
 800912c:	d807      	bhi.n	800913e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	461a      	mov	r2, r3
 8009134:	6a39      	ldr	r1, [r7, #32]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7ff ff21 	bl	8008f7e <LL_GPIO_SetAFPin_0_7>
 800913c:	e006      	b.n	800914c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	461a      	mov	r2, r3
 8009144:	6a39      	ldr	r1, [r7, #32]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7ff ff56 	bl	8008ff8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	461a      	mov	r2, r3
 8009152:	6a39      	ldr	r1, [r7, #32]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7ff fe43 	bl	8008de0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800915a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915c:	3301      	adds	r3, #1
 800915e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009166:	fa22 f303 	lsr.w	r3, r2, r3
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1a0      	bne.n	80090b0 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3728      	adds	r7, #40	@ 0x28
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <LL_I2C_Enable>:
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f043 0201 	orr.w	r2, r3, #1
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	601a      	str	r2, [r3, #0]
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <LL_I2C_Disable>:
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f023 0201 	bic.w	r2, r3, #1
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	601a      	str	r2, [r3, #0]
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <LL_I2C_SetOwnAddress1>:
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80091cc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80091d0:	68b9      	ldr	r1, [r7, #8]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	431a      	orrs	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	609a      	str	r2, [r3, #8]
}
 80091dc:	bf00      	nop
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <LL_I2C_ConfigSpeed>:
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 80091fa:	2300      	movs	r3, #0
 80091fc:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	4a42      	ldr	r2, [pc, #264]	@ (800930c <LL_I2C_ConfigSpeed+0x124>)
 8009202:	fba2 2303 	umull	r2, r3, r2, r3
 8009206:	0c9b      	lsrs	r3, r3, #18
 8009208:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	431a      	orrs	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	493a      	ldr	r1, [pc, #232]	@ (8009310 <LL_I2C_ConfigSpeed+0x128>)
 8009226:	428b      	cmp	r3, r1
 8009228:	d802      	bhi.n	8009230 <LL_I2C_ConfigSpeed+0x48>
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	3301      	adds	r3, #1
 800922e:	e009      	b.n	8009244 <LL_I2C_ConfigSpeed+0x5c>
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8009236:	fb01 f303 	mul.w	r3, r1, r3
 800923a:	4936      	ldr	r1, [pc, #216]	@ (8009314 <LL_I2C_ConfigSpeed+0x12c>)
 800923c:	fba1 1303 	umull	r1, r3, r1, r3
 8009240:	099b      	lsrs	r3, r3, #6
 8009242:	3301      	adds	r3, #1
 8009244:	431a      	orrs	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a30      	ldr	r2, [pc, #192]	@ (8009310 <LL_I2C_ConfigSpeed+0x128>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d939      	bls.n	80092c6 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d117      	bne.n	8009288 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	4613      	mov	r3, r2
 800925c:	005b      	lsls	r3, r3, #1
 800925e:	4413      	add	r3, r2
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	fbb2 f3f3 	udiv	r3, r2, r3
 8009266:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800926a:	2b00      	cmp	r3, #0
 800926c:	d009      	beq.n	8009282 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	4613      	mov	r3, r2
 8009272:	005b      	lsls	r3, r3, #1
 8009274:	4413      	add	r3, r2
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800927c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009280:	e01d      	b.n	80092be <LL_I2C_ConfigSpeed+0xd6>
 8009282:	f248 0301 	movw	r3, #32769	@ 0x8001
 8009286:	e01a      	b.n	80092be <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	4613      	mov	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	009a      	lsls	r2, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	fbb2 f3f3 	udiv	r3, r2, r3
 800929a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00b      	beq.n	80092ba <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	4613      	mov	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	009a      	lsls	r2, r3, #2
 80092ac:	4413      	add	r3, r2
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80092b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092b8:	e001      	b.n	80092be <LL_I2C_ConfigSpeed+0xd6>
 80092ba:	f248 0301 	movw	r3, #32769	@ 0x8001
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	617b      	str	r3, [r7, #20]
 80092c4:	e011      	b.n	80092ea <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	005b      	lsls	r3, r3, #1
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80092d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80092d4:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d005      	beq.n	80092e6 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e4:	e000      	b.n	80092e8 <LL_I2C_ConfigSpeed+0x100>
 80092e6:	2304      	movs	r3, #4
 80092e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 80092f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	431a      	orrs	r2, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	61da      	str	r2, [r3, #28]
}
 80092fe:	bf00      	nop
 8009300:	371c      	adds	r7, #28
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	431bde83 	.word	0x431bde83
 8009310:	000186a0 	.word	0x000186a0
 8009314:	10624dd3 	.word	0x10624dd3

08009318 <LL_I2C_SetMode>:
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f023 021a 	bic.w	r2, r3, #26
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	431a      	orrs	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	601a      	str	r2, [r3, #0]
}
 8009332:	bf00      	nop
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <LL_I2C_AcknowledgeNextData>:
{
 800933e:	b480      	push	{r7}
 8009340:	b083      	sub	sp, #12
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	431a      	orrs	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	601a      	str	r2, [r3, #0]
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <LL_APB1_GRP1_ForceReset>:
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR, Periphs);
 800936c:	4b05      	ldr	r3, [pc, #20]	@ (8009384 <LL_APB1_GRP1_ForceReset+0x20>)
 800936e:	6a1a      	ldr	r2, [r3, #32]
 8009370:	4904      	ldr	r1, [pc, #16]	@ (8009384 <LL_APB1_GRP1_ForceReset+0x20>)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4313      	orrs	r3, r2
 8009376:	620b      	str	r3, [r1, #32]
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	40023800 	.word	0x40023800

08009388 <LL_APB1_GRP1_ReleaseReset>:
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 8009390:	4b06      	ldr	r3, [pc, #24]	@ (80093ac <LL_APB1_GRP1_ReleaseReset+0x24>)
 8009392:	6a1a      	ldr	r2, [r3, #32]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	43db      	mvns	r3, r3
 8009398:	4904      	ldr	r1, [pc, #16]	@ (80093ac <LL_APB1_GRP1_ReleaseReset+0x24>)
 800939a:	4013      	ands	r3, r2
 800939c:	620b      	str	r3, [r1, #32]
}
 800939e:	bf00      	nop
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	40023800 	.word	0x40023800

080093b0 <LL_I2C_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are de-initialized
  *          - ERROR  I2C registers are not de-initialized
  */
uint32_t LL_I2C_DeInit(I2C_TypeDef *I2Cx)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80093b8:	2300      	movs	r3, #0
 80093ba:	73fb      	strb	r3, [r7, #15]

  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));

  if (I2Cx == I2C1)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a16      	ldr	r2, [pc, #88]	@ (8009418 <LL_I2C_DeInit+0x68>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d108      	bne.n	80093d6 <LL_I2C_DeInit+0x26>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C1);
 80093c4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80093c8:	f7ff ffcc 	bl	8009364 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C1);
 80093cc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80093d0:	f7ff ffda 	bl	8009388 <LL_APB1_GRP1_ReleaseReset>
 80093d4:	e01b      	b.n	800940e <LL_I2C_DeInit+0x5e>
  }
  else if (I2Cx == I2C2)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a10      	ldr	r2, [pc, #64]	@ (800941c <LL_I2C_DeInit+0x6c>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d108      	bne.n	80093f0 <LL_I2C_DeInit+0x40>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C2);
 80093de:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80093e2:	f7ff ffbf 	bl	8009364 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C2);
 80093e6:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80093ea:	f7ff ffcd 	bl	8009388 <LL_APB1_GRP1_ReleaseReset>
 80093ee:	e00e      	b.n	800940e <LL_I2C_DeInit+0x5e>

  }
#if defined(I2C3)
  else if (I2Cx == I2C3)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a0b      	ldr	r2, [pc, #44]	@ (8009420 <LL_I2C_DeInit+0x70>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d108      	bne.n	800940a <LL_I2C_DeInit+0x5a>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C3);
 80093f8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80093fc:	f7ff ffb2 	bl	8009364 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C3);
 8009400:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009404:	f7ff ffc0 	bl	8009388 <LL_APB1_GRP1_ReleaseReset>
 8009408:	e001      	b.n	800940e <LL_I2C_DeInit+0x5e>
  }
#endif
  else
  {
    status = ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800940e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	40005400 	.word	0x40005400
 800941c:	40005800 	.word	0x40005800
 8009420:	40005c00 	.word	0x40005c00

08009424 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7ff feb2 	bl	8009198 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8009434:	f107 0308 	add.w	r3, r7, #8
 8009438:	4618      	mov	r0, r3
 800943a:	f000 f895 	bl	8009568 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800943e:	6939      	ldr	r1, [r7, #16]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7ff fecd 	bl	80091e8 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	68d9      	ldr	r1, [r3, #12]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	461a      	mov	r2, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7ff fead 	bl	80091b8 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7ff ff57 	bl	8009318 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7ff fe84 	bl	8009178 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7ff ff61 	bl	800933e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <LL_RCC_GetSysClkSource>:
{
 8009488:	b480      	push	{r7}
 800948a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800948c:	4b04      	ldr	r3, [pc, #16]	@ (80094a0 <LL_RCC_GetSysClkSource+0x18>)
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	f003 030c 	and.w	r3, r3, #12
}
 8009494:	4618      	mov	r0, r3
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	40023800 	.word	0x40023800

080094a4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80094a4:	b480      	push	{r7}
 80094a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80094a8:	4b04      	ldr	r3, [pc, #16]	@ (80094bc <LL_RCC_GetAHBPrescaler+0x18>)
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	40023800 	.word	0x40023800

080094c0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80094c0:	b480      	push	{r7}
 80094c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80094c4:	4b04      	ldr	r3, [pc, #16]	@ (80094d8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	40023800 	.word	0x40023800

080094dc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80094dc:	b480      	push	{r7}
 80094de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80094e0:	4b04      	ldr	r3, [pc, #16]	@ (80094f4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	40023800 	.word	0x40023800

080094f8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80094f8:	b480      	push	{r7}
 80094fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80094fc:	4b04      	ldr	r3, [pc, #16]	@ (8009510 <LL_RCC_PLL_GetMainSource+0x18>)
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8009504:	4618      	mov	r0, r3
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	40023800 	.word	0x40023800

08009514 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009514:	b480      	push	{r7}
 8009516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009518:	4b04      	ldr	r3, [pc, #16]	@ (800952c <LL_RCC_PLL_GetN+0x18>)
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	099b      	lsrs	r3, r3, #6
 800951e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8009522:	4618      	mov	r0, r3
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	40023800 	.word	0x40023800

08009530 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8009530:	b480      	push	{r7}
 8009532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8009534:	4b04      	ldr	r3, [pc, #16]	@ (8009548 <LL_RCC_PLL_GetP+0x18>)
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800953c:	4618      	mov	r0, r3
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	40023800 	.word	0x40023800

0800954c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800954c:	b480      	push	{r7}
 800954e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009550:	4b04      	ldr	r3, [pc, #16]	@ (8009564 <LL_RCC_PLL_GetDivider+0x18>)
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8009558:	4618      	mov	r0, r3
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	40023800 	.word	0x40023800

08009568 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8009570:	f000 f820 	bl	80095b4 <RCC_GetSystemClockFreq>
 8009574:	4602      	mov	r2, r0
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4618      	mov	r0, r3
 8009580:	f000 f840 	bl	8009604 <RCC_GetHCLKClockFreq>
 8009584:	4602      	mov	r2, r0
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	4618      	mov	r0, r3
 8009590:	f000 f84e 	bl	8009630 <RCC_GetPCLK1ClockFreq>
 8009594:	4602      	mov	r2, r0
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 f85a 	bl	8009658 <RCC_GetPCLK2ClockFreq>
 80095a4:	4602      	mov	r2, r0
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	60da      	str	r2, [r3, #12]
}
 80095aa:	bf00      	nop
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
	...

080095b4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80095ba:	2300      	movs	r3, #0
 80095bc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80095be:	f7ff ff63 	bl	8009488 <LL_RCC_GetSysClkSource>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b08      	cmp	r3, #8
 80095c6:	d00c      	beq.n	80095e2 <RCC_GetSystemClockFreq+0x2e>
 80095c8:	2b08      	cmp	r3, #8
 80095ca:	d80f      	bhi.n	80095ec <RCC_GetSystemClockFreq+0x38>
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d002      	beq.n	80095d6 <RCC_GetSystemClockFreq+0x22>
 80095d0:	2b04      	cmp	r3, #4
 80095d2:	d003      	beq.n	80095dc <RCC_GetSystemClockFreq+0x28>
 80095d4:	e00a      	b.n	80095ec <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80095d6:	4b09      	ldr	r3, [pc, #36]	@ (80095fc <RCC_GetSystemClockFreq+0x48>)
 80095d8:	607b      	str	r3, [r7, #4]
      break;
 80095da:	e00a      	b.n	80095f2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80095dc:	4b08      	ldr	r3, [pc, #32]	@ (8009600 <RCC_GetSystemClockFreq+0x4c>)
 80095de:	607b      	str	r3, [r7, #4]
      break;
 80095e0:	e007      	b.n	80095f2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80095e2:	2008      	movs	r0, #8
 80095e4:	f000 f84c 	bl	8009680 <RCC_PLL_GetFreqDomain_SYS>
 80095e8:	6078      	str	r0, [r7, #4]
      break;
 80095ea:	e002      	b.n	80095f2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80095ec:	4b03      	ldr	r3, [pc, #12]	@ (80095fc <RCC_GetSystemClockFreq+0x48>)
 80095ee:	607b      	str	r3, [r7, #4]
      break;
 80095f0:	bf00      	nop
  }

  return frequency;
 80095f2:	687b      	ldr	r3, [r7, #4]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	00f42400 	.word	0x00f42400
 8009600:	007a1200 	.word	0x007a1200

08009604 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800960c:	f7ff ff4a 	bl	80094a4 <LL_RCC_GetAHBPrescaler>
 8009610:	4603      	mov	r3, r0
 8009612:	091b      	lsrs	r3, r3, #4
 8009614:	f003 030f 	and.w	r3, r3, #15
 8009618:	4a04      	ldr	r2, [pc, #16]	@ (800962c <RCC_GetHCLKClockFreq+0x28>)
 800961a:	5cd3      	ldrb	r3, [r2, r3]
 800961c:	461a      	mov	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	40d3      	lsrs	r3, r2
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	0800c8e0 	.word	0x0800c8e0

08009630 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009638:	f7ff ff42 	bl	80094c0 <LL_RCC_GetAPB1Prescaler>
 800963c:	4603      	mov	r3, r0
 800963e:	0a9b      	lsrs	r3, r3, #10
 8009640:	4a04      	ldr	r2, [pc, #16]	@ (8009654 <RCC_GetPCLK1ClockFreq+0x24>)
 8009642:	5cd3      	ldrb	r3, [r2, r3]
 8009644:	461a      	mov	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	40d3      	lsrs	r3, r2
}
 800964a:	4618      	mov	r0, r3
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	0800c8f0 	.word	0x0800c8f0

08009658 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8009660:	f7ff ff3c 	bl	80094dc <LL_RCC_GetAPB2Prescaler>
 8009664:	4603      	mov	r3, r0
 8009666:	0b5b      	lsrs	r3, r3, #13
 8009668:	4a04      	ldr	r2, [pc, #16]	@ (800967c <RCC_GetPCLK2ClockFreq+0x24>)
 800966a:	5cd3      	ldrb	r3, [r2, r3]
 800966c:	461a      	mov	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	40d3      	lsrs	r3, r2
}
 8009672:	4618      	mov	r0, r3
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	0800c8f0 	.word	0x0800c8f0

08009680 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8009680:	b590      	push	{r4, r7, lr}
 8009682:	b087      	sub	sp, #28
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8009688:	2300      	movs	r3, #0
 800968a:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 800968c:	2300      	movs	r3, #0
 800968e:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8009694:	f7ff ff30 	bl	80094f8 <LL_RCC_PLL_GetMainSource>
 8009698:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d004      	beq.n	80096aa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096a6:	d003      	beq.n	80096b0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80096a8:	e005      	b.n	80096b6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80096aa:	4b12      	ldr	r3, [pc, #72]	@ (80096f4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80096ac:	617b      	str	r3, [r7, #20]
      break;
 80096ae:	e005      	b.n	80096bc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80096b0:	4b11      	ldr	r3, [pc, #68]	@ (80096f8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80096b2:	617b      	str	r3, [r7, #20]
      break;
 80096b4:	e002      	b.n	80096bc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80096b6:	4b0f      	ldr	r3, [pc, #60]	@ (80096f4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80096b8:	617b      	str	r3, [r7, #20]
      break;
 80096ba:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b08      	cmp	r3, #8
 80096c0:	d113      	bne.n	80096ea <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80096c2:	f7ff ff43 	bl	800954c <LL_RCC_PLL_GetDivider>
 80096c6:	4602      	mov	r2, r0
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	fbb3 f4f2 	udiv	r4, r3, r2
 80096ce:	f7ff ff21 	bl	8009514 <LL_RCC_PLL_GetN>
 80096d2:	4603      	mov	r3, r0
 80096d4:	fb03 f404 	mul.w	r4, r3, r4
 80096d8:	f7ff ff2a 	bl	8009530 <LL_RCC_PLL_GetP>
 80096dc:	4603      	mov	r3, r0
 80096de:	0c1b      	lsrs	r3, r3, #16
 80096e0:	3301      	adds	r3, #1
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	fbb4 f3f3 	udiv	r3, r4, r3
 80096e8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80096ea:	693b      	ldr	r3, [r7, #16]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	371c      	adds	r7, #28
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd90      	pop	{r4, r7, pc}
 80096f4:	00f42400 	.word	0x00f42400
 80096f8:	007a1200 	.word	0x007a1200

080096fc <LL_SPI_IsEnabled>:
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800970c:	2b40      	cmp	r3, #64	@ 0x40
 800970e:	d101      	bne.n	8009714 <LL_SPI_IsEnabled+0x18>
 8009710:	2301      	movs	r3, #1
 8009712:	e000      	b.n	8009716 <LL_SPI_IsEnabled+0x1a>
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr

08009722 <LL_SPI_SetCRCPolynomial>:
{
 8009722:	b480      	push	{r7}
 8009724:	b083      	sub	sp, #12
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	b29b      	uxth	r3, r3
 8009730:	461a      	mov	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	611a      	str	r2, [r3, #16]
}
 8009736:	bf00      	nop
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr

08009742 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b084      	sub	sp, #16
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7ff ffd3 	bl	80096fc <LL_SPI_IsEnabled>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d139      	bne.n	80097d0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009764:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	6811      	ldr	r1, [r2, #0]
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	6852      	ldr	r2, [r2, #4]
 8009770:	4311      	orrs	r1, r2
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	6892      	ldr	r2, [r2, #8]
 8009776:	4311      	orrs	r1, r2
 8009778:	683a      	ldr	r2, [r7, #0]
 800977a:	68d2      	ldr	r2, [r2, #12]
 800977c:	4311      	orrs	r1, r2
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	6912      	ldr	r2, [r2, #16]
 8009782:	4311      	orrs	r1, r2
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	6952      	ldr	r2, [r2, #20]
 8009788:	4311      	orrs	r1, r2
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	6992      	ldr	r2, [r2, #24]
 800978e:	4311      	orrs	r1, r2
 8009790:	683a      	ldr	r2, [r7, #0]
 8009792:	69d2      	ldr	r2, [r2, #28]
 8009794:	4311      	orrs	r1, r2
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	6a12      	ldr	r2, [r2, #32]
 800979a:	430a      	orrs	r2, r1
 800979c:	431a      	orrs	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	f023 0204 	bic.w	r2, r3, #4
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	0c1b      	lsrs	r3, r3, #16
 80097b0:	431a      	orrs	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097be:	d105      	bne.n	80097cc <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7ff ffab 	bl	8009722 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	69db      	ldr	r3, [r3, #28]
 80097d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	61da      	str	r2, [r3, #28]
  return status;
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <LL_TIM_SetPrescaler>:
{
 80097e6:	b480      	push	{r7}
 80097e8:	b083      	sub	sp, #12
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <LL_TIM_SetAutoReload>:
{
 8009802:	b480      	push	{r7}
 8009804:	b083      	sub	sp, #12
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8009812:	bf00      	nop
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <LL_TIM_SetRepetitionCounter>:
{
 800981e:	b480      	push	{r7}
 8009820:	b083      	sub	sp, #12
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800982e:	bf00      	nop
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <LL_TIM_OC_SetCompareCH1>:
{
 800983a:	b480      	push	{r7}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
 8009842:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800984a:	bf00      	nop
 800984c:	370c      	adds	r7, #12
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr

08009856 <LL_TIM_OC_SetCompareCH2>:
{
 8009856:	b480      	push	{r7}
 8009858:	b083      	sub	sp, #12
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8009866:	bf00      	nop
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <LL_TIM_OC_SetCompareCH3>:
{
 8009872:	b480      	push	{r7}
 8009874:	b083      	sub	sp, #12
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009882:	bf00      	nop
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <LL_TIM_OC_SetCompareCH4>:
{
 800988e:	b480      	push	{r7}
 8009890:	b083      	sub	sp, #12
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800989e:	bf00      	nop
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b083      	sub	sp, #12
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	f043 0201 	orr.w	r2, r3, #1
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	615a      	str	r2, [r3, #20]
}
 80098be:	bf00      	nop
 80098c0:	370c      	adds	r7, #12
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
	...

080098cc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a3d      	ldr	r2, [pc, #244]	@ (80099d4 <LL_TIM_Init+0x108>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d013      	beq.n	800990c <LL_TIM_Init+0x40>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ea:	d00f      	beq.n	800990c <LL_TIM_Init+0x40>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a3a      	ldr	r2, [pc, #232]	@ (80099d8 <LL_TIM_Init+0x10c>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d00b      	beq.n	800990c <LL_TIM_Init+0x40>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a39      	ldr	r2, [pc, #228]	@ (80099dc <LL_TIM_Init+0x110>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d007      	beq.n	800990c <LL_TIM_Init+0x40>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a38      	ldr	r2, [pc, #224]	@ (80099e0 <LL_TIM_Init+0x114>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d003      	beq.n	800990c <LL_TIM_Init+0x40>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4a37      	ldr	r2, [pc, #220]	@ (80099e4 <LL_TIM_Init+0x118>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d106      	bne.n	800991a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	4313      	orrs	r3, r2
 8009918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a2d      	ldr	r2, [pc, #180]	@ (80099d4 <LL_TIM_Init+0x108>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d02b      	beq.n	800997a <LL_TIM_Init+0xae>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009928:	d027      	beq.n	800997a <LL_TIM_Init+0xae>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a2a      	ldr	r2, [pc, #168]	@ (80099d8 <LL_TIM_Init+0x10c>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d023      	beq.n	800997a <LL_TIM_Init+0xae>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a29      	ldr	r2, [pc, #164]	@ (80099dc <LL_TIM_Init+0x110>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d01f      	beq.n	800997a <LL_TIM_Init+0xae>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a28      	ldr	r2, [pc, #160]	@ (80099e0 <LL_TIM_Init+0x114>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d01b      	beq.n	800997a <LL_TIM_Init+0xae>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a27      	ldr	r2, [pc, #156]	@ (80099e4 <LL_TIM_Init+0x118>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d017      	beq.n	800997a <LL_TIM_Init+0xae>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a26      	ldr	r2, [pc, #152]	@ (80099e8 <LL_TIM_Init+0x11c>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d013      	beq.n	800997a <LL_TIM_Init+0xae>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a25      	ldr	r2, [pc, #148]	@ (80099ec <LL_TIM_Init+0x120>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d00f      	beq.n	800997a <LL_TIM_Init+0xae>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a24      	ldr	r2, [pc, #144]	@ (80099f0 <LL_TIM_Init+0x124>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d00b      	beq.n	800997a <LL_TIM_Init+0xae>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a23      	ldr	r2, [pc, #140]	@ (80099f4 <LL_TIM_Init+0x128>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d007      	beq.n	800997a <LL_TIM_Init+0xae>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a22      	ldr	r2, [pc, #136]	@ (80099f8 <LL_TIM_Init+0x12c>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d003      	beq.n	800997a <LL_TIM_Init+0xae>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a21      	ldr	r2, [pc, #132]	@ (80099fc <LL_TIM_Init+0x130>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d106      	bne.n	8009988 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	4313      	orrs	r3, r2
 8009986:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7ff ff34 	bl	8009802 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff ff20 	bl	80097e6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a0a      	ldr	r2, [pc, #40]	@ (80099d4 <LL_TIM_Init+0x108>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d003      	beq.n	80099b6 <LL_TIM_Init+0xea>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a0c      	ldr	r2, [pc, #48]	@ (80099e4 <LL_TIM_Init+0x118>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d105      	bne.n	80099c2 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	4619      	mov	r1, r3
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7ff ff2e 	bl	800981e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7ff ff71 	bl	80098aa <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	40010000 	.word	0x40010000
 80099d8:	40000400 	.word	0x40000400
 80099dc:	40000800 	.word	0x40000800
 80099e0:	40000c00 	.word	0x40000c00
 80099e4:	40010400 	.word	0x40010400
 80099e8:	40014000 	.word	0x40014000
 80099ec:	40014400 	.word	0x40014400
 80099f0:	40014800 	.word	0x40014800
 80099f4:	40001800 	.word	0x40001800
 80099f8:	40001c00 	.word	0x40001c00
 80099fc:	40002000 	.word	0x40002000

08009a00 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b086      	sub	sp, #24
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a16:	d027      	beq.n	8009a68 <LL_TIM_OC_Init+0x68>
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a1e:	d82a      	bhi.n	8009a76 <LL_TIM_OC_Init+0x76>
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a26:	d018      	beq.n	8009a5a <LL_TIM_OC_Init+0x5a>
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a2e:	d822      	bhi.n	8009a76 <LL_TIM_OC_Init+0x76>
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d003      	beq.n	8009a3e <LL_TIM_OC_Init+0x3e>
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	2b10      	cmp	r3, #16
 8009a3a:	d007      	beq.n	8009a4c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8009a3c:	e01b      	b.n	8009a76 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 f861 	bl	8009b08 <OC1Config>
 8009a46:	4603      	mov	r3, r0
 8009a48:	75fb      	strb	r3, [r7, #23]
      break;
 8009a4a:	e015      	b.n	8009a78 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8009a4c:	6879      	ldr	r1, [r7, #4]
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f000 f8c6 	bl	8009be0 <OC2Config>
 8009a54:	4603      	mov	r3, r0
 8009a56:	75fb      	strb	r3, [r7, #23]
      break;
 8009a58:	e00e      	b.n	8009a78 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f000 f92f 	bl	8009cc0 <OC3Config>
 8009a62:	4603      	mov	r3, r0
 8009a64:	75fb      	strb	r3, [r7, #23]
      break;
 8009a66:	e007      	b.n	8009a78 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8009a68:	6879      	ldr	r1, [r7, #4]
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f000 f998 	bl	8009da0 <OC4Config>
 8009a70:	4603      	mov	r3, r0
 8009a72:	75fb      	strb	r3, [r7, #23]
      break;
 8009a74:	e000      	b.n	8009a78 <LL_TIM_OC_Init+0x78>
      break;
 8009a76:	bf00      	nop
  }

  return result;
 8009a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b085      	sub	sp, #20
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	7b12      	ldrb	r2, [r2, #12]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	89d2      	ldrh	r2, [r2, #14]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3714      	adds	r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
	...

08009b08 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a1b      	ldr	r3, [r3, #32]
 8009b16:	f023 0201 	bic.w	r2, r3, #1
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a1b      	ldr	r3, [r3, #32]
 8009b22:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f023 0303 	bic.w	r3, r3, #3
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f023 0202 	bic.w	r2, r3, #2
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	f023 0201 	bic.w	r2, r3, #1
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4a1c      	ldr	r2, [pc, #112]	@ (8009bd8 <OC1Config+0xd0>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d003      	beq.n	8009b72 <OC1Config+0x6a>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8009bdc <OC1Config+0xd4>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d11e      	bne.n	8009bb0 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f023 0208 	bic.w	r2, r3, #8
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	f023 0204 	bic.w	r2, r3, #4
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	69db      	ldr	r3, [r3, #28]
 8009baa:	005b      	lsls	r3, r3, #1
 8009bac:	4313      	orrs	r3, r2
 8009bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff fe39 	bl	800983a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	697a      	ldr	r2, [r7, #20]
 8009bcc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3718      	adds	r7, #24
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	40010000 	.word	0x40010000
 8009bdc:	40010400 	.word	0x40010400

08009be0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	f023 0210 	bic.w	r2, r3, #16
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	021b      	lsls	r3, r3, #8
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	f023 0220 	bic.w	r2, r3, #32
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	011b      	lsls	r3, r3, #4
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	f023 0210 	bic.w	r2, r3, #16
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	011b      	lsls	r3, r3, #4
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a1d      	ldr	r2, [pc, #116]	@ (8009cb8 <OC2Config+0xd8>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d003      	beq.n	8009c50 <OC2Config+0x70>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8009cbc <OC2Config+0xdc>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d11f      	bne.n	8009c90 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	019b      	lsls	r3, r3, #6
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	019b      	lsls	r3, r3, #6
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	69db      	ldr	r3, [r3, #28]
 8009c8a:	00db      	lsls	r3, r3, #3
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	693a      	ldr	r2, [r7, #16]
 8009c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff fdd7 	bl	8009856 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3718      	adds	r7, #24
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	40010000 	.word	0x40010000
 8009cbc:	40010400 	.word	0x40010400

08009cc0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f023 0303 	bic.w	r3, r3, #3
 8009cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	021b      	lsls	r3, r3, #8
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	021b      	lsls	r3, r3, #8
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a1d      	ldr	r2, [pc, #116]	@ (8009d98 <OC3Config+0xd8>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d003      	beq.n	8009d2e <OC3Config+0x6e>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a1c      	ldr	r2, [pc, #112]	@ (8009d9c <OC3Config+0xdc>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d11f      	bne.n	8009d6e <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	695b      	ldr	r3, [r3, #20]
 8009d38:	029b      	lsls	r3, r3, #10
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	029b      	lsls	r3, r3, #10
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	011b      	lsls	r3, r3, #4
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	69db      	ldr	r3, [r3, #28]
 8009d68:	015b      	lsls	r3, r3, #5
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7ff fd76 	bl	8009872 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3718      	adds	r7, #24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	40010000 	.word	0x40010000
 8009d9c:	40010400 	.word	0x40010400

08009da0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	021b      	lsls	r3, r3, #8
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	031b      	lsls	r3, r3, #12
 8009dec:	4313      	orrs	r3, r2
 8009dee:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	031b      	lsls	r3, r3, #12
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a11      	ldr	r2, [pc, #68]	@ (8009e48 <OC4Config+0xa8>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d003      	beq.n	8009e10 <OC4Config+0x70>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a10      	ldr	r2, [pc, #64]	@ (8009e4c <OC4Config+0xac>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d107      	bne.n	8009e20 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	019b      	lsls	r3, r3, #6
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	697a      	ldr	r2, [r7, #20]
 8009e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	4619      	mov	r1, r3
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7ff fd2b 	bl	800988e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	40010000 	.word	0x40010000
 8009e4c:	40010400 	.word	0x40010400

08009e50 <LL_USART_IsEnabled>:
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e64:	bf0c      	ite	eq
 8009e66:	2301      	moveq	r3, #1
 8009e68:	2300      	movne	r3, #0
 8009e6a:	b2db      	uxtb	r3, r3
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <LL_USART_SetStopBitsLength>:
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	611a      	str	r2, [r3, #16]
}
 8009e92:	bf00      	nop
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <LL_USART_SetHWFlowCtrl>:
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	695b      	ldr	r3, [r3, #20]
 8009eac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	615a      	str	r2, [r3, #20]
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <LL_USART_SetBaudRate>:
{
 8009ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ec8:	b0c0      	sub	sp, #256	@ 0x100
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009ed0:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8009ed4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8009ed8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8009edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ee4:	f040 810c 	bne.w	800a100 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8009ee8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009eec:	2200      	movs	r2, #0
 8009eee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009ef2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009ef6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009efa:	4622      	mov	r2, r4
 8009efc:	462b      	mov	r3, r5
 8009efe:	1891      	adds	r1, r2, r2
 8009f00:	6639      	str	r1, [r7, #96]	@ 0x60
 8009f02:	415b      	adcs	r3, r3
 8009f04:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f06:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	eb12 0801 	adds.w	r8, r2, r1
 8009f10:	4629      	mov	r1, r5
 8009f12:	eb43 0901 	adc.w	r9, r3, r1
 8009f16:	f04f 0200 	mov.w	r2, #0
 8009f1a:	f04f 0300 	mov.w	r3, #0
 8009f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f2a:	4690      	mov	r8, r2
 8009f2c:	4699      	mov	r9, r3
 8009f2e:	4623      	mov	r3, r4
 8009f30:	eb18 0303 	adds.w	r3, r8, r3
 8009f34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009f38:	462b      	mov	r3, r5
 8009f3a:	eb49 0303 	adc.w	r3, r9, r3
 8009f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009f42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009f46:	2200      	movs	r2, #0
 8009f48:	469a      	mov	sl, r3
 8009f4a:	4693      	mov	fp, r2
 8009f4c:	eb1a 030a 	adds.w	r3, sl, sl
 8009f50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f52:	eb4b 030b 	adc.w	r3, fp, fp
 8009f56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009f5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009f60:	f7f6 f9ee 	bl	8000340 <__aeabi_uldivmod>
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	4b64      	ldr	r3, [pc, #400]	@ (800a0fc <LL_USART_SetBaudRate+0x238>)
 8009f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8009f6e:	095b      	lsrs	r3, r3, #5
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	011b      	lsls	r3, r3, #4
 8009f74:	b29c      	uxth	r4, r3
 8009f76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009f80:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009f84:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8009f88:	4642      	mov	r2, r8
 8009f8a:	464b      	mov	r3, r9
 8009f8c:	1891      	adds	r1, r2, r2
 8009f8e:	6539      	str	r1, [r7, #80]	@ 0x50
 8009f90:	415b      	adcs	r3, r3
 8009f92:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009f98:	4641      	mov	r1, r8
 8009f9a:	1851      	adds	r1, r2, r1
 8009f9c:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009f9e:	4649      	mov	r1, r9
 8009fa0:	414b      	adcs	r3, r1
 8009fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fa4:	f04f 0200 	mov.w	r2, #0
 8009fa8:	f04f 0300 	mov.w	r3, #0
 8009fac:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8009fb0:	4659      	mov	r1, fp
 8009fb2:	00cb      	lsls	r3, r1, #3
 8009fb4:	4651      	mov	r1, sl
 8009fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fba:	4651      	mov	r1, sl
 8009fbc:	00ca      	lsls	r2, r1, #3
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	4642      	mov	r2, r8
 8009fc6:	189b      	adds	r3, r3, r2
 8009fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009fcc:	464b      	mov	r3, r9
 8009fce:	460a      	mov	r2, r1
 8009fd0:	eb42 0303 	adc.w	r3, r2, r3
 8009fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009fd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009fe2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8009fe6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009fea:	460b      	mov	r3, r1
 8009fec:	18db      	adds	r3, r3, r3
 8009fee:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	eb42 0303 	adc.w	r3, r2, r3
 8009ff6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ff8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009ffc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800a000:	f7f6 f99e 	bl	8000340 <__aeabi_uldivmod>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	4611      	mov	r1, r2
 800a00a:	4b3c      	ldr	r3, [pc, #240]	@ (800a0fc <LL_USART_SetBaudRate+0x238>)
 800a00c:	fba3 2301 	umull	r2, r3, r3, r1
 800a010:	095b      	lsrs	r3, r3, #5
 800a012:	2264      	movs	r2, #100	@ 0x64
 800a014:	fb02 f303 	mul.w	r3, r2, r3
 800a018:	1acb      	subs	r3, r1, r3
 800a01a:	00db      	lsls	r3, r3, #3
 800a01c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a020:	4b36      	ldr	r3, [pc, #216]	@ (800a0fc <LL_USART_SetBaudRate+0x238>)
 800a022:	fba3 2302 	umull	r2, r3, r3, r2
 800a026:	095b      	lsrs	r3, r3, #5
 800a028:	b29b      	uxth	r3, r3
 800a02a:	005b      	lsls	r3, r3, #1
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a032:	b29b      	uxth	r3, r3
 800a034:	4423      	add	r3, r4
 800a036:	b29c      	uxth	r4, r3
 800a038:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a03c:	2200      	movs	r2, #0
 800a03e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a042:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a046:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800a04a:	4642      	mov	r2, r8
 800a04c:	464b      	mov	r3, r9
 800a04e:	1891      	adds	r1, r2, r2
 800a050:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a052:	415b      	adcs	r3, r3
 800a054:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a056:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a05a:	4641      	mov	r1, r8
 800a05c:	1851      	adds	r1, r2, r1
 800a05e:	6339      	str	r1, [r7, #48]	@ 0x30
 800a060:	4649      	mov	r1, r9
 800a062:	414b      	adcs	r3, r1
 800a064:	637b      	str	r3, [r7, #52]	@ 0x34
 800a066:	f04f 0200 	mov.w	r2, #0
 800a06a:	f04f 0300 	mov.w	r3, #0
 800a06e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a072:	4659      	mov	r1, fp
 800a074:	00cb      	lsls	r3, r1, #3
 800a076:	4651      	mov	r1, sl
 800a078:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a07c:	4651      	mov	r1, sl
 800a07e:	00ca      	lsls	r2, r1, #3
 800a080:	4610      	mov	r0, r2
 800a082:	4619      	mov	r1, r3
 800a084:	4603      	mov	r3, r0
 800a086:	4642      	mov	r2, r8
 800a088:	189b      	adds	r3, r3, r2
 800a08a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a08e:	464b      	mov	r3, r9
 800a090:	460a      	mov	r2, r1
 800a092:	eb42 0303 	adc.w	r3, r2, r3
 800a096:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a09a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a0a4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800a0a8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	18db      	adds	r3, r3, r3
 800a0b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	eb42 0303 	adc.w	r3, r2, r3
 800a0b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a0be:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800a0c2:	f7f6 f93d 	bl	8000340 <__aeabi_uldivmod>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a0fc <LL_USART_SetBaudRate+0x238>)
 800a0cc:	fba3 1302 	umull	r1, r3, r3, r2
 800a0d0:	095b      	lsrs	r3, r3, #5
 800a0d2:	2164      	movs	r1, #100	@ 0x64
 800a0d4:	fb01 f303 	mul.w	r3, r1, r3
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	00db      	lsls	r3, r3, #3
 800a0dc:	3332      	adds	r3, #50	@ 0x32
 800a0de:	4a07      	ldr	r2, [pc, #28]	@ (800a0fc <LL_USART_SetBaudRate+0x238>)
 800a0e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e4:	095b      	lsrs	r3, r3, #5
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	f003 0307 	and.w	r3, r3, #7
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	4423      	add	r3, r4
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0f8:	609a      	str	r2, [r3, #8]
}
 800a0fa:	e108      	b.n	800a30e <LL_USART_SetBaudRate+0x44a>
 800a0fc:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800a100:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a104:	2200      	movs	r2, #0
 800a106:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a10a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a10e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800a112:	4642      	mov	r2, r8
 800a114:	464b      	mov	r3, r9
 800a116:	1891      	adds	r1, r2, r2
 800a118:	6239      	str	r1, [r7, #32]
 800a11a:	415b      	adcs	r3, r3
 800a11c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a11e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a122:	4641      	mov	r1, r8
 800a124:	1854      	adds	r4, r2, r1
 800a126:	4649      	mov	r1, r9
 800a128:	eb43 0501 	adc.w	r5, r3, r1
 800a12c:	f04f 0200 	mov.w	r2, #0
 800a130:	f04f 0300 	mov.w	r3, #0
 800a134:	00eb      	lsls	r3, r5, #3
 800a136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a13a:	00e2      	lsls	r2, r4, #3
 800a13c:	4614      	mov	r4, r2
 800a13e:	461d      	mov	r5, r3
 800a140:	4643      	mov	r3, r8
 800a142:	18e3      	adds	r3, r4, r3
 800a144:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a148:	464b      	mov	r3, r9
 800a14a:	eb45 0303 	adc.w	r3, r5, r3
 800a14e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a152:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a156:	2200      	movs	r2, #0
 800a158:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a15c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800a160:	f04f 0200 	mov.w	r2, #0
 800a164:	f04f 0300 	mov.w	r3, #0
 800a168:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800a16c:	4629      	mov	r1, r5
 800a16e:	008b      	lsls	r3, r1, #2
 800a170:	4621      	mov	r1, r4
 800a172:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a176:	4621      	mov	r1, r4
 800a178:	008a      	lsls	r2, r1, #2
 800a17a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800a17e:	f7f6 f8df 	bl	8000340 <__aeabi_uldivmod>
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	4b65      	ldr	r3, [pc, #404]	@ (800a31c <LL_USART_SetBaudRate+0x458>)
 800a188:	fba3 2302 	umull	r2, r3, r3, r2
 800a18c:	095b      	lsrs	r3, r3, #5
 800a18e:	b29b      	uxth	r3, r3
 800a190:	011b      	lsls	r3, r3, #4
 800a192:	b29c      	uxth	r4, r3
 800a194:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a198:	2200      	movs	r2, #0
 800a19a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a19e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a1a2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800a1a6:	4642      	mov	r2, r8
 800a1a8:	464b      	mov	r3, r9
 800a1aa:	1891      	adds	r1, r2, r2
 800a1ac:	61b9      	str	r1, [r7, #24]
 800a1ae:	415b      	adcs	r3, r3
 800a1b0:	61fb      	str	r3, [r7, #28]
 800a1b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a1b6:	4641      	mov	r1, r8
 800a1b8:	1851      	adds	r1, r2, r1
 800a1ba:	6139      	str	r1, [r7, #16]
 800a1bc:	4649      	mov	r1, r9
 800a1be:	414b      	adcs	r3, r1
 800a1c0:	617b      	str	r3, [r7, #20]
 800a1c2:	f04f 0200 	mov.w	r2, #0
 800a1c6:	f04f 0300 	mov.w	r3, #0
 800a1ca:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a1ce:	4659      	mov	r1, fp
 800a1d0:	00cb      	lsls	r3, r1, #3
 800a1d2:	4651      	mov	r1, sl
 800a1d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1d8:	4651      	mov	r1, sl
 800a1da:	00ca      	lsls	r2, r1, #3
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	4642      	mov	r2, r8
 800a1e4:	189b      	adds	r3, r3, r2
 800a1e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a1ea:	464b      	mov	r3, r9
 800a1ec:	460a      	mov	r2, r1
 800a1ee:	eb42 0303 	adc.w	r3, r2, r3
 800a1f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a1f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a200:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800a204:	f04f 0200 	mov.w	r2, #0
 800a208:	f04f 0300 	mov.w	r3, #0
 800a20c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800a210:	4649      	mov	r1, r9
 800a212:	008b      	lsls	r3, r1, #2
 800a214:	4641      	mov	r1, r8
 800a216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a21a:	4641      	mov	r1, r8
 800a21c:	008a      	lsls	r2, r1, #2
 800a21e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800a222:	f7f6 f88d 	bl	8000340 <__aeabi_uldivmod>
 800a226:	4602      	mov	r2, r0
 800a228:	460b      	mov	r3, r1
 800a22a:	4611      	mov	r1, r2
 800a22c:	4b3b      	ldr	r3, [pc, #236]	@ (800a31c <LL_USART_SetBaudRate+0x458>)
 800a22e:	fba3 2301 	umull	r2, r3, r3, r1
 800a232:	095b      	lsrs	r3, r3, #5
 800a234:	2264      	movs	r2, #100	@ 0x64
 800a236:	fb02 f303 	mul.w	r3, r2, r3
 800a23a:	1acb      	subs	r3, r1, r3
 800a23c:	011b      	lsls	r3, r3, #4
 800a23e:	3332      	adds	r3, #50	@ 0x32
 800a240:	4a36      	ldr	r2, [pc, #216]	@ (800a31c <LL_USART_SetBaudRate+0x458>)
 800a242:	fba2 2303 	umull	r2, r3, r2, r3
 800a246:	095b      	lsrs	r3, r3, #5
 800a248:	b29b      	uxth	r3, r3
 800a24a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a24e:	b29b      	uxth	r3, r3
 800a250:	4423      	add	r3, r4
 800a252:	b29c      	uxth	r4, r3
 800a254:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a258:	2200      	movs	r2, #0
 800a25a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a25c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a25e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a262:	4642      	mov	r2, r8
 800a264:	464b      	mov	r3, r9
 800a266:	1891      	adds	r1, r2, r2
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	415b      	adcs	r3, r3
 800a26c:	60fb      	str	r3, [r7, #12]
 800a26e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a272:	4641      	mov	r1, r8
 800a274:	1851      	adds	r1, r2, r1
 800a276:	6039      	str	r1, [r7, #0]
 800a278:	4649      	mov	r1, r9
 800a27a:	414b      	adcs	r3, r1
 800a27c:	607b      	str	r3, [r7, #4]
 800a27e:	f04f 0200 	mov.w	r2, #0
 800a282:	f04f 0300 	mov.w	r3, #0
 800a286:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a28a:	4659      	mov	r1, fp
 800a28c:	00cb      	lsls	r3, r1, #3
 800a28e:	4651      	mov	r1, sl
 800a290:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a294:	4651      	mov	r1, sl
 800a296:	00ca      	lsls	r2, r1, #3
 800a298:	4610      	mov	r0, r2
 800a29a:	4619      	mov	r1, r3
 800a29c:	4603      	mov	r3, r0
 800a29e:	4642      	mov	r2, r8
 800a2a0:	189b      	adds	r3, r3, r2
 800a2a2:	673b      	str	r3, [r7, #112]	@ 0x70
 800a2a4:	464b      	mov	r3, r9
 800a2a6:	460a      	mov	r2, r1
 800a2a8:	eb42 0303 	adc.w	r3, r2, r3
 800a2ac:	677b      	str	r3, [r7, #116]	@ 0x74
 800a2ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a2b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a2b8:	f04f 0200 	mov.w	r2, #0
 800a2bc:	f04f 0300 	mov.w	r3, #0
 800a2c0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800a2c4:	4649      	mov	r1, r9
 800a2c6:	008b      	lsls	r3, r1, #2
 800a2c8:	4641      	mov	r1, r8
 800a2ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2ce:	4641      	mov	r1, r8
 800a2d0:	008a      	lsls	r2, r1, #2
 800a2d2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800a2d6:	f7f6 f833 	bl	8000340 <__aeabi_uldivmod>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	4b0f      	ldr	r3, [pc, #60]	@ (800a31c <LL_USART_SetBaudRate+0x458>)
 800a2e0:	fba3 1302 	umull	r1, r3, r3, r2
 800a2e4:	095b      	lsrs	r3, r3, #5
 800a2e6:	2164      	movs	r1, #100	@ 0x64
 800a2e8:	fb01 f303 	mul.w	r3, r1, r3
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	011b      	lsls	r3, r3, #4
 800a2f0:	3332      	adds	r3, #50	@ 0x32
 800a2f2:	4a0a      	ldr	r2, [pc, #40]	@ (800a31c <LL_USART_SetBaudRate+0x458>)
 800a2f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a2f8:	095b      	lsrs	r3, r3, #5
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	f003 030f 	and.w	r3, r3, #15
 800a300:	b29b      	uxth	r3, r3
 800a302:	4423      	add	r3, r4
 800a304:	b29b      	uxth	r3, r3
 800a306:	461a      	mov	r2, r3
 800a308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a30c:	609a      	str	r2, [r3, #8]
}
 800a30e:	bf00      	nop
 800a310:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a314:	46bd      	mov	sp, r7
 800a316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a31a:	bf00      	nop
 800a31c:	51eb851f 	.word	0x51eb851f

0800a320 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b088      	sub	sp, #32
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a32e:	2300      	movs	r3, #0
 800a330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f7ff fd8c 	bl	8009e50 <LL_USART_IsEnabled>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d15e      	bne.n	800a3fc <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800a346:	f023 030c 	bic.w	r3, r3, #12
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	6851      	ldr	r1, [r2, #4]
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	68d2      	ldr	r2, [r2, #12]
 800a352:	4311      	orrs	r1, r2
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	6912      	ldr	r2, [r2, #16]
 800a358:	4311      	orrs	r1, r2
 800a35a:	683a      	ldr	r2, [r7, #0]
 800a35c:	6992      	ldr	r2, [r2, #24]
 800a35e:	430a      	orrs	r2, r1
 800a360:	431a      	orrs	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7ff fd83 	bl	8009e78 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	695b      	ldr	r3, [r3, #20]
 800a376:	4619      	mov	r1, r3
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7ff fd90 	bl	8009e9e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800a37e:	f107 0308 	add.w	r3, r7, #8
 800a382:	4618      	mov	r0, r3
 800a384:	f7ff f8f0 	bl	8009568 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a1f      	ldr	r2, [pc, #124]	@ (800a408 <LL_USART_Init+0xe8>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d102      	bne.n	800a396 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	61bb      	str	r3, [r7, #24]
 800a394:	e021      	b.n	800a3da <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a1c      	ldr	r2, [pc, #112]	@ (800a40c <LL_USART_Init+0xec>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d102      	bne.n	800a3a4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	61bb      	str	r3, [r7, #24]
 800a3a2:	e01a      	b.n	800a3da <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a1a      	ldr	r2, [pc, #104]	@ (800a410 <LL_USART_Init+0xf0>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d102      	bne.n	800a3b2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	61bb      	str	r3, [r7, #24]
 800a3b0:	e013      	b.n	800a3da <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4a17      	ldr	r2, [pc, #92]	@ (800a414 <LL_USART_Init+0xf4>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d102      	bne.n	800a3c0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	61bb      	str	r3, [r7, #24]
 800a3be:	e00c      	b.n	800a3da <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a15      	ldr	r2, [pc, #84]	@ (800a418 <LL_USART_Init+0xf8>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d102      	bne.n	800a3ce <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	61bb      	str	r3, [r7, #24]
 800a3cc:	e005      	b.n	800a3da <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4a12      	ldr	r2, [pc, #72]	@ (800a41c <LL_USART_Init+0xfc>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d101      	bne.n	800a3da <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00d      	beq.n	800a3fc <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d009      	beq.n	800a3fc <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800a3f4:	69b9      	ldr	r1, [r7, #24]
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7ff fd64 	bl	8009ec4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a3fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3720      	adds	r7, #32
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	40011000 	.word	0x40011000
 800a40c:	40004400 	.word	0x40004400
 800a410:	40004800 	.word	0x40004800
 800a414:	40011400 	.word	0x40011400
 800a418:	40004c00 	.word	0x40004c00
 800a41c:	40005000 	.word	0x40005000

0800a420 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800a428:	4b0f      	ldr	r3, [pc, #60]	@ (800a468 <LL_mDelay+0x48>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800a42e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a436:	d00c      	beq.n	800a452 <LL_mDelay+0x32>
  {
    Delay++;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	3301      	adds	r3, #1
 800a43c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800a43e:	e008      	b.n	800a452 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800a440:	4b09      	ldr	r3, [pc, #36]	@ (800a468 <LL_mDelay+0x48>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d002      	beq.n	800a452 <LL_mDelay+0x32>
    {
      Delay--;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	3b01      	subs	r3, #1
 800a450:	607b      	str	r3, [r7, #4]
  while (Delay)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1f3      	bne.n	800a440 <LL_mDelay+0x20>
    }
  }
}
 800a458:	bf00      	nop
 800a45a:	bf00      	nop
 800a45c:	3714      	adds	r7, #20
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	e000e010 	.word	0xe000e010

0800a46c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800a474:	4a04      	ldr	r2, [pc, #16]	@ (800a488 <LL_SetSystemCoreClock+0x1c>)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6013      	str	r3, [r2, #0]
}
 800a47a:	bf00      	nop
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	200022c0 	.word	0x200022c0

0800a48c <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 800a490:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c8 <SCH_Initialize+0x3c>)
 800a492:	2200      	movs	r2, #0
 800a494:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 800a496:	4b0d      	ldr	r3, [pc, #52]	@ (800a4cc <SCH_Initialize+0x40>)
 800a498:	2200      	movs	r2, #0
 800a49a:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 800a49c:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d0 <SCH_Initialize+0x44>)
 800a49e:	2200      	movs	r2, #0
 800a4a0:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 800a4a2:	22f0      	movs	r2, #240	@ 0xf0
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	480b      	ldr	r0, [pc, #44]	@ (800a4d4 <SCH_Initialize+0x48>)
 800a4a8:	f000 fa38 	bl	800a91c <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 800a4ac:	22f0      	movs	r2, #240	@ 0xf0
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	4809      	ldr	r0, [pc, #36]	@ (800a4d8 <SCH_Initialize+0x4c>)
 800a4b2:	f000 fa33 	bl	800a91c <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 800a4b6:	2238      	movs	r2, #56	@ 0x38
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	4808      	ldr	r0, [pc, #32]	@ (800a4dc <SCH_Initialize+0x50>)
 800a4bc:	f000 fa2e 	bl	800a91c <memset>

    // Initialize Scheduler context
  systick_timer_init();
 800a4c0:	f7f6 fd08 	bl	8000ed4 <systick_timer_init>
}
 800a4c4:	bf00      	nop
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	200037a4 	.word	0x200037a4
 800a4cc:	200036ac 	.word	0x200036ac
 800a4d0:	200037a0 	.word	0x200037a0
 800a4d4:	200035bc 	.word	0x200035bc
 800a4d8:	200036b0 	.word	0x200036b0
 800a4dc:	200037a8 	.word	0x200037a8

0800a4e0 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	6039      	str	r1, [r7, #0]
 800a4ea:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 800a4ec:	79fb      	ldrb	r3, [r7, #7]
 800a4ee:	2b0d      	cmp	r3, #13
 800a4f0:	d804      	bhi.n	800a4fc <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 800a4f2:	79fb      	ldrb	r3, [r7, #7]
 800a4f4:	4904      	ldr	r1, [pc, #16]	@ (800a508 <SCH_TIM_Start+0x28>)
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	200037a8 	.word	0x200037a8

0800a50c <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	4603      	mov	r3, r0
 800a514:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 800a516:	79fb      	ldrb	r3, [r7, #7]
 800a518:	4a06      	ldr	r2, [pc, #24]	@ (800a534 <SCH_TIM_HasCompleted+0x28>)
 800a51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	bf0c      	ite	eq
 800a522:	2301      	moveq	r3, #1
 800a524:	2300      	movne	r3, #0
 800a526:	b2db      	uxtb	r3, r3
}
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	200037a8 	.word	0x200037a8

0800a538 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d029      	beq.n	800a5a0 <SCH_TASK_CreateTask+0x68>
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d026      	beq.n	800a5a0 <SCH_TASK_CreateTask+0x68>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 800a552:	4b17      	ldr	r3, [pc, #92]	@ (800a5b0 <SCH_TASK_CreateTask+0x78>)
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	2b12      	cmp	r3, #18
 800a558:	d822      	bhi.n	800a5a0 <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 800a55a:	4b15      	ldr	r3, [pc, #84]	@ (800a5b0 <SCH_TASK_CreateTask+0x78>)
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	4613      	mov	r3, r2
 800a562:	005b      	lsls	r3, r3, #1
 800a564:	4413      	add	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4a12      	ldr	r2, [pc, #72]	@ (800a5b4 <SCH_TASK_CreateTask+0x7c>)
 800a56a:	4413      	add	r3, r2
 800a56c:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	2200      	movs	r2, #0
 800a578:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = pTaskProperty->taskTick;;
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	68da      	ldr	r2, [r3, #12]
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	2201      	movs	r2, #1
 800a586:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 800a588:	4b09      	ldr	r3, [pc, #36]	@ (800a5b0 <SCH_TASK_CreateTask+0x78>)
 800a58a:	781a      	ldrb	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 800a590:	4b07      	ldr	r3, [pc, #28]	@ (800a5b0 <SCH_TASK_CreateTask+0x78>)
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	3301      	adds	r3, #1
 800a596:	b2da      	uxtb	r2, r3
 800a598:	4b05      	ldr	r3, [pc, #20]	@ (800a5b0 <SCH_TASK_CreateTask+0x78>)
 800a59a:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 800a59c:	2300      	movs	r3, #0
 800a59e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	200036ac 	.word	0x200036ac
 800a5b4:	200035bc 	.word	0x200035bc

0800a5b8 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 800a5be:	4b42      	ldr	r3, [pc, #264]	@ (800a6c8 <SCH_RunSystemTickTimer+0x110>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	4a40      	ldr	r2, [pc, #256]	@ (800a6c8 <SCH_RunSystemTickTimer+0x110>)
 800a5c6:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	73fb      	strb	r3, [r7, #15]
 800a5cc:	e025      	b.n	800a61a <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800a5ce:	7bfa      	ldrb	r2, [r7, #15]
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	005b      	lsls	r3, r3, #1
 800a5d4:	4413      	add	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4a3c      	ldr	r2, [pc, #240]	@ (800a6cc <SCH_RunSystemTickTimer+0x114>)
 800a5da:	4413      	add	r3, r2
 800a5dc:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d115      	bne.n	800a614 <SCH_RunSystemTickTimer+0x5c>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d111      	bne.n	800a614 <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	1c5a      	adds	r2, r3, #1
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685a      	ldr	r2, [r3, #4]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	429a      	cmp	r2, r3
 800a606:	d305      	bcc.n	800a614 <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2201      	movs	r2, #1
 800a612:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800a614:	7bfb      	ldrb	r3, [r7, #15]
 800a616:	3301      	adds	r3, #1
 800a618:	73fb      	strb	r3, [r7, #15]
 800a61a:	4b2d      	ldr	r3, [pc, #180]	@ (800a6d0 <SCH_RunSystemTickTimer+0x118>)
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	7bfa      	ldrb	r2, [r7, #15]
 800a620:	429a      	cmp	r2, r3
 800a622:	d3d4      	bcc.n	800a5ce <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800a624:	2300      	movs	r3, #0
 800a626:	73bb      	strb	r3, [r7, #14]
 800a628:	e02b      	b.n	800a682 <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 800a62a:	7bba      	ldrb	r2, [r7, #14]
 800a62c:	4613      	mov	r3, r2
 800a62e:	005b      	lsls	r3, r3, #1
 800a630:	4413      	add	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	4a27      	ldr	r2, [pc, #156]	@ (800a6d4 <SCH_RunSystemTickTimer+0x11c>)
 800a636:	4413      	add	r3, r2
 800a638:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d11c      	bne.n	800a67c <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	1c5a      	adds	r2, r3, #1
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	685a      	ldr	r2, [r3, #4]
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	429a      	cmp	r2, r3
 800a658:	d310      	bcc.n	800a67c <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	2201      	movs	r2, #1
 800a65e:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	2200      	movs	r2, #0
 800a664:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	bf0c      	ite	eq
 800a670:	2301      	moveq	r3, #1
 800a672:	2300      	movne	r3, #0
 800a674:	b2db      	uxtb	r3, r3
 800a676:	461a      	mov	r2, r3
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800a67c:	7bbb      	ldrb	r3, [r7, #14]
 800a67e:	3301      	adds	r3, #1
 800a680:	73bb      	strb	r3, [r7, #14]
 800a682:	4b15      	ldr	r3, [pc, #84]	@ (800a6d8 <SCH_RunSystemTickTimer+0x120>)
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	7bba      	ldrb	r2, [r7, #14]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d3ce      	bcc.n	800a62a <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800a68c:	2300      	movs	r3, #0
 800a68e:	73bb      	strb	r3, [r7, #14]
 800a690:	e010      	b.n	800a6b4 <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 800a692:	7bbb      	ldrb	r3, [r7, #14]
 800a694:	4a11      	ldr	r2, [pc, #68]	@ (800a6dc <SCH_RunSystemTickTimer+0x124>)
 800a696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d007      	beq.n	800a6ae <SCH_RunSystemTickTimer+0xf6>
 800a69e:	7bbb      	ldrb	r3, [r7, #14]
 800a6a0:	4a0e      	ldr	r2, [pc, #56]	@ (800a6dc <SCH_RunSystemTickTimer+0x124>)
 800a6a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a6a6:	3a01      	subs	r2, #1
 800a6a8:	490c      	ldr	r1, [pc, #48]	@ (800a6dc <SCH_RunSystemTickTimer+0x124>)
 800a6aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800a6ae:	7bbb      	ldrb	r3, [r7, #14]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	73bb      	strb	r3, [r7, #14]
 800a6b4:	7bbb      	ldrb	r3, [r7, #14]
 800a6b6:	2b0d      	cmp	r3, #13
 800a6b8:	d9eb      	bls.n	800a692 <SCH_RunSystemTickTimer+0xda>
}
 800a6ba:	bf00      	nop
 800a6bc:	bf00      	nop
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr
 800a6c8:	200037a4 	.word	0x200037a4
 800a6cc:	200035bc 	.word	0x200035bc
 800a6d0:	200036ac 	.word	0x200036ac
 800a6d4:	200036b0 	.word	0x200036b0
 800a6d8:	200037a0 	.word	0x200037a0
 800a6dc:	200037a8 	.word	0x200037a8

0800a6e0 <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 800a6e4:	f7f6 fbe6 	bl	8000eb4 <systick_timer_start>
}
 800a6e8:	bf00      	nop
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	73fb      	strb	r3, [r7, #15]
 800a6f6:	e01e      	b.n	800a736 <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800a6f8:	7bfa      	ldrb	r2, [r7, #15]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	005b      	lsls	r3, r3, #1
 800a6fe:	4413      	add	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	4a23      	ldr	r2, [pc, #140]	@ (800a790 <SCH_HandleScheduledTask+0xa4>)
 800a704:	4413      	add	r3, r2
 800a706:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	885b      	ldrh	r3, [r3, #2]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d10f      	bne.n	800a730 <SCH_HandleScheduledTask+0x44>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	2b01      	cmp	r3, #1
 800a716:	d10b      	bne.n	800a730 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d003      	beq.n	800a730 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800a730:	7bfb      	ldrb	r3, [r7, #15]
 800a732:	3301      	adds	r3, #1
 800a734:	73fb      	strb	r3, [r7, #15]
 800a736:	4b17      	ldr	r3, [pc, #92]	@ (800a794 <SCH_HandleScheduledTask+0xa8>)
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	7bfa      	ldrb	r2, [r7, #15]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d3db      	bcc.n	800a6f8 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800a740:	2300      	movs	r3, #0
 800a742:	73bb      	strb	r3, [r7, #14]
 800a744:	e01a      	b.n	800a77c <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 800a746:	7bba      	ldrb	r2, [r7, #14]
 800a748:	4613      	mov	r3, r2
 800a74a:	005b      	lsls	r3, r3, #1
 800a74c:	4413      	add	r3, r2
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	4a11      	ldr	r2, [pc, #68]	@ (800a798 <SCH_HandleScheduledTask+0xac>)
 800a752:	4413      	add	r3, r2
 800a754:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	885b      	ldrh	r3, [r3, #2]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d10b      	bne.n	800a776 <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	2200      	movs	r2, #0
 800a762:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800a776:	7bbb      	ldrb	r3, [r7, #14]
 800a778:	3301      	adds	r3, #1
 800a77a:	73bb      	strb	r3, [r7, #14]
 800a77c:	4b07      	ldr	r3, [pc, #28]	@ (800a79c <SCH_HandleScheduledTask+0xb0>)
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	7bba      	ldrb	r2, [r7, #14]
 800a782:	429a      	cmp	r2, r3
 800a784:	d3df      	bcc.n	800a746 <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 800a786:	bf00      	nop
 800a788:	bf00      	nop
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	200035bc 	.word	0x200035bc
 800a794:	200036ac 	.word	0x200036ac
 800a798:	200036b0 	.word	0x200036b0
 800a79c:	200037a0 	.word	0x200037a0

0800a7a0 <atoi>:
 800a7a0:	220a      	movs	r2, #10
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	f000 b87a 	b.w	800a89c <strtol>

0800a7a8 <_strtol_l.isra.0>:
 800a7a8:	2b24      	cmp	r3, #36	@ 0x24
 800a7aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ae:	4686      	mov	lr, r0
 800a7b0:	4690      	mov	r8, r2
 800a7b2:	d801      	bhi.n	800a7b8 <_strtol_l.isra.0+0x10>
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d106      	bne.n	800a7c6 <_strtol_l.isra.0+0x1e>
 800a7b8:	f000 f8b8 	bl	800a92c <__errno>
 800a7bc:	2316      	movs	r3, #22
 800a7be:	6003      	str	r3, [r0, #0]
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c6:	4834      	ldr	r0, [pc, #208]	@ (800a898 <_strtol_l.isra.0+0xf0>)
 800a7c8:	460d      	mov	r5, r1
 800a7ca:	462a      	mov	r2, r5
 800a7cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7d0:	5d06      	ldrb	r6, [r0, r4]
 800a7d2:	f016 0608 	ands.w	r6, r6, #8
 800a7d6:	d1f8      	bne.n	800a7ca <_strtol_l.isra.0+0x22>
 800a7d8:	2c2d      	cmp	r4, #45	@ 0x2d
 800a7da:	d110      	bne.n	800a7fe <_strtol_l.isra.0+0x56>
 800a7dc:	782c      	ldrb	r4, [r5, #0]
 800a7de:	2601      	movs	r6, #1
 800a7e0:	1c95      	adds	r5, r2, #2
 800a7e2:	f033 0210 	bics.w	r2, r3, #16
 800a7e6:	d115      	bne.n	800a814 <_strtol_l.isra.0+0x6c>
 800a7e8:	2c30      	cmp	r4, #48	@ 0x30
 800a7ea:	d10d      	bne.n	800a808 <_strtol_l.isra.0+0x60>
 800a7ec:	782a      	ldrb	r2, [r5, #0]
 800a7ee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a7f2:	2a58      	cmp	r2, #88	@ 0x58
 800a7f4:	d108      	bne.n	800a808 <_strtol_l.isra.0+0x60>
 800a7f6:	786c      	ldrb	r4, [r5, #1]
 800a7f8:	3502      	adds	r5, #2
 800a7fa:	2310      	movs	r3, #16
 800a7fc:	e00a      	b.n	800a814 <_strtol_l.isra.0+0x6c>
 800a7fe:	2c2b      	cmp	r4, #43	@ 0x2b
 800a800:	bf04      	itt	eq
 800a802:	782c      	ldrbeq	r4, [r5, #0]
 800a804:	1c95      	addeq	r5, r2, #2
 800a806:	e7ec      	b.n	800a7e2 <_strtol_l.isra.0+0x3a>
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1f6      	bne.n	800a7fa <_strtol_l.isra.0+0x52>
 800a80c:	2c30      	cmp	r4, #48	@ 0x30
 800a80e:	bf14      	ite	ne
 800a810:	230a      	movne	r3, #10
 800a812:	2308      	moveq	r3, #8
 800a814:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a818:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a81c:	2200      	movs	r2, #0
 800a81e:	fbbc f9f3 	udiv	r9, ip, r3
 800a822:	4610      	mov	r0, r2
 800a824:	fb03 ca19 	mls	sl, r3, r9, ip
 800a828:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a82c:	2f09      	cmp	r7, #9
 800a82e:	d80f      	bhi.n	800a850 <_strtol_l.isra.0+0xa8>
 800a830:	463c      	mov	r4, r7
 800a832:	42a3      	cmp	r3, r4
 800a834:	dd1b      	ble.n	800a86e <_strtol_l.isra.0+0xc6>
 800a836:	1c57      	adds	r7, r2, #1
 800a838:	d007      	beq.n	800a84a <_strtol_l.isra.0+0xa2>
 800a83a:	4581      	cmp	r9, r0
 800a83c:	d314      	bcc.n	800a868 <_strtol_l.isra.0+0xc0>
 800a83e:	d101      	bne.n	800a844 <_strtol_l.isra.0+0x9c>
 800a840:	45a2      	cmp	sl, r4
 800a842:	db11      	blt.n	800a868 <_strtol_l.isra.0+0xc0>
 800a844:	fb00 4003 	mla	r0, r0, r3, r4
 800a848:	2201      	movs	r2, #1
 800a84a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a84e:	e7eb      	b.n	800a828 <_strtol_l.isra.0+0x80>
 800a850:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a854:	2f19      	cmp	r7, #25
 800a856:	d801      	bhi.n	800a85c <_strtol_l.isra.0+0xb4>
 800a858:	3c37      	subs	r4, #55	@ 0x37
 800a85a:	e7ea      	b.n	800a832 <_strtol_l.isra.0+0x8a>
 800a85c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a860:	2f19      	cmp	r7, #25
 800a862:	d804      	bhi.n	800a86e <_strtol_l.isra.0+0xc6>
 800a864:	3c57      	subs	r4, #87	@ 0x57
 800a866:	e7e4      	b.n	800a832 <_strtol_l.isra.0+0x8a>
 800a868:	f04f 32ff 	mov.w	r2, #4294967295
 800a86c:	e7ed      	b.n	800a84a <_strtol_l.isra.0+0xa2>
 800a86e:	1c53      	adds	r3, r2, #1
 800a870:	d108      	bne.n	800a884 <_strtol_l.isra.0+0xdc>
 800a872:	2322      	movs	r3, #34	@ 0x22
 800a874:	f8ce 3000 	str.w	r3, [lr]
 800a878:	4660      	mov	r0, ip
 800a87a:	f1b8 0f00 	cmp.w	r8, #0
 800a87e:	d0a0      	beq.n	800a7c2 <_strtol_l.isra.0+0x1a>
 800a880:	1e69      	subs	r1, r5, #1
 800a882:	e006      	b.n	800a892 <_strtol_l.isra.0+0xea>
 800a884:	b106      	cbz	r6, 800a888 <_strtol_l.isra.0+0xe0>
 800a886:	4240      	negs	r0, r0
 800a888:	f1b8 0f00 	cmp.w	r8, #0
 800a88c:	d099      	beq.n	800a7c2 <_strtol_l.isra.0+0x1a>
 800a88e:	2a00      	cmp	r2, #0
 800a890:	d1f6      	bne.n	800a880 <_strtol_l.isra.0+0xd8>
 800a892:	f8c8 1000 	str.w	r1, [r8]
 800a896:	e794      	b.n	800a7c2 <_strtol_l.isra.0+0x1a>
 800a898:	0800c8f9 	.word	0x0800c8f9

0800a89c <strtol>:
 800a89c:	4613      	mov	r3, r2
 800a89e:	460a      	mov	r2, r1
 800a8a0:	4601      	mov	r1, r0
 800a8a2:	4802      	ldr	r0, [pc, #8]	@ (800a8ac <strtol+0x10>)
 800a8a4:	6800      	ldr	r0, [r0, #0]
 800a8a6:	f7ff bf7f 	b.w	800a7a8 <_strtol_l.isra.0>
 800a8aa:	bf00      	nop
 800a8ac:	2000234c 	.word	0x2000234c

0800a8b0 <sniprintf>:
 800a8b0:	b40c      	push	{r2, r3}
 800a8b2:	b530      	push	{r4, r5, lr}
 800a8b4:	4b18      	ldr	r3, [pc, #96]	@ (800a918 <sniprintf+0x68>)
 800a8b6:	1e0c      	subs	r4, r1, #0
 800a8b8:	681d      	ldr	r5, [r3, #0]
 800a8ba:	b09d      	sub	sp, #116	@ 0x74
 800a8bc:	da08      	bge.n	800a8d0 <sniprintf+0x20>
 800a8be:	238b      	movs	r3, #139	@ 0x8b
 800a8c0:	602b      	str	r3, [r5, #0]
 800a8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c6:	b01d      	add	sp, #116	@ 0x74
 800a8c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8cc:	b002      	add	sp, #8
 800a8ce:	4770      	bx	lr
 800a8d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a8d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a8d8:	f04f 0300 	mov.w	r3, #0
 800a8dc:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a8de:	bf14      	ite	ne
 800a8e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a8e4:	4623      	moveq	r3, r4
 800a8e6:	9304      	str	r3, [sp, #16]
 800a8e8:	9307      	str	r3, [sp, #28]
 800a8ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a8ee:	9002      	str	r0, [sp, #8]
 800a8f0:	9006      	str	r0, [sp, #24]
 800a8f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a8f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a8f8:	ab21      	add	r3, sp, #132	@ 0x84
 800a8fa:	a902      	add	r1, sp, #8
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	9301      	str	r3, [sp, #4]
 800a900:	f000 f99c 	bl	800ac3c <_svfiprintf_r>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	bfbc      	itt	lt
 800a908:	238b      	movlt	r3, #139	@ 0x8b
 800a90a:	602b      	strlt	r3, [r5, #0]
 800a90c:	2c00      	cmp	r4, #0
 800a90e:	d0da      	beq.n	800a8c6 <sniprintf+0x16>
 800a910:	9b02      	ldr	r3, [sp, #8]
 800a912:	2200      	movs	r2, #0
 800a914:	701a      	strb	r2, [r3, #0]
 800a916:	e7d6      	b.n	800a8c6 <sniprintf+0x16>
 800a918:	2000234c 	.word	0x2000234c

0800a91c <memset>:
 800a91c:	4402      	add	r2, r0
 800a91e:	4603      	mov	r3, r0
 800a920:	4293      	cmp	r3, r2
 800a922:	d100      	bne.n	800a926 <memset+0xa>
 800a924:	4770      	bx	lr
 800a926:	f803 1b01 	strb.w	r1, [r3], #1
 800a92a:	e7f9      	b.n	800a920 <memset+0x4>

0800a92c <__errno>:
 800a92c:	4b01      	ldr	r3, [pc, #4]	@ (800a934 <__errno+0x8>)
 800a92e:	6818      	ldr	r0, [r3, #0]
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	2000234c 	.word	0x2000234c

0800a938 <__libc_init_array>:
 800a938:	b570      	push	{r4, r5, r6, lr}
 800a93a:	4d0d      	ldr	r5, [pc, #52]	@ (800a970 <__libc_init_array+0x38>)
 800a93c:	4c0d      	ldr	r4, [pc, #52]	@ (800a974 <__libc_init_array+0x3c>)
 800a93e:	1b64      	subs	r4, r4, r5
 800a940:	10a4      	asrs	r4, r4, #2
 800a942:	2600      	movs	r6, #0
 800a944:	42a6      	cmp	r6, r4
 800a946:	d109      	bne.n	800a95c <__libc_init_array+0x24>
 800a948:	4d0b      	ldr	r5, [pc, #44]	@ (800a978 <__libc_init_array+0x40>)
 800a94a:	4c0c      	ldr	r4, [pc, #48]	@ (800a97c <__libc_init_array+0x44>)
 800a94c:	f000 fc6c 	bl	800b228 <_init>
 800a950:	1b64      	subs	r4, r4, r5
 800a952:	10a4      	asrs	r4, r4, #2
 800a954:	2600      	movs	r6, #0
 800a956:	42a6      	cmp	r6, r4
 800a958:	d105      	bne.n	800a966 <__libc_init_array+0x2e>
 800a95a:	bd70      	pop	{r4, r5, r6, pc}
 800a95c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a960:	4798      	blx	r3
 800a962:	3601      	adds	r6, #1
 800a964:	e7ee      	b.n	800a944 <__libc_init_array+0xc>
 800a966:	f855 3b04 	ldr.w	r3, [r5], #4
 800a96a:	4798      	blx	r3
 800a96c:	3601      	adds	r6, #1
 800a96e:	e7f2      	b.n	800a956 <__libc_init_array+0x1e>
 800a970:	0800ca34 	.word	0x0800ca34
 800a974:	0800ca34 	.word	0x0800ca34
 800a978:	0800ca34 	.word	0x0800ca34
 800a97c:	0800ca38 	.word	0x0800ca38

0800a980 <__retarget_lock_acquire_recursive>:
 800a980:	4770      	bx	lr

0800a982 <__retarget_lock_release_recursive>:
 800a982:	4770      	bx	lr

0800a984 <strcpy>:
 800a984:	4603      	mov	r3, r0
 800a986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a98a:	f803 2b01 	strb.w	r2, [r3], #1
 800a98e:	2a00      	cmp	r2, #0
 800a990:	d1f9      	bne.n	800a986 <strcpy+0x2>
 800a992:	4770      	bx	lr

0800a994 <_free_r>:
 800a994:	b538      	push	{r3, r4, r5, lr}
 800a996:	4605      	mov	r5, r0
 800a998:	2900      	cmp	r1, #0
 800a99a:	d041      	beq.n	800aa20 <_free_r+0x8c>
 800a99c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9a0:	1f0c      	subs	r4, r1, #4
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	bfb8      	it	lt
 800a9a6:	18e4      	addlt	r4, r4, r3
 800a9a8:	f000 f8e0 	bl	800ab6c <__malloc_lock>
 800a9ac:	4a1d      	ldr	r2, [pc, #116]	@ (800aa24 <_free_r+0x90>)
 800a9ae:	6813      	ldr	r3, [r2, #0]
 800a9b0:	b933      	cbnz	r3, 800a9c0 <_free_r+0x2c>
 800a9b2:	6063      	str	r3, [r4, #4]
 800a9b4:	6014      	str	r4, [r2, #0]
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9bc:	f000 b8dc 	b.w	800ab78 <__malloc_unlock>
 800a9c0:	42a3      	cmp	r3, r4
 800a9c2:	d908      	bls.n	800a9d6 <_free_r+0x42>
 800a9c4:	6820      	ldr	r0, [r4, #0]
 800a9c6:	1821      	adds	r1, r4, r0
 800a9c8:	428b      	cmp	r3, r1
 800a9ca:	bf01      	itttt	eq
 800a9cc:	6819      	ldreq	r1, [r3, #0]
 800a9ce:	685b      	ldreq	r3, [r3, #4]
 800a9d0:	1809      	addeq	r1, r1, r0
 800a9d2:	6021      	streq	r1, [r4, #0]
 800a9d4:	e7ed      	b.n	800a9b2 <_free_r+0x1e>
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	b10b      	cbz	r3, 800a9e0 <_free_r+0x4c>
 800a9dc:	42a3      	cmp	r3, r4
 800a9de:	d9fa      	bls.n	800a9d6 <_free_r+0x42>
 800a9e0:	6811      	ldr	r1, [r2, #0]
 800a9e2:	1850      	adds	r0, r2, r1
 800a9e4:	42a0      	cmp	r0, r4
 800a9e6:	d10b      	bne.n	800aa00 <_free_r+0x6c>
 800a9e8:	6820      	ldr	r0, [r4, #0]
 800a9ea:	4401      	add	r1, r0
 800a9ec:	1850      	adds	r0, r2, r1
 800a9ee:	4283      	cmp	r3, r0
 800a9f0:	6011      	str	r1, [r2, #0]
 800a9f2:	d1e0      	bne.n	800a9b6 <_free_r+0x22>
 800a9f4:	6818      	ldr	r0, [r3, #0]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	6053      	str	r3, [r2, #4]
 800a9fa:	4408      	add	r0, r1
 800a9fc:	6010      	str	r0, [r2, #0]
 800a9fe:	e7da      	b.n	800a9b6 <_free_r+0x22>
 800aa00:	d902      	bls.n	800aa08 <_free_r+0x74>
 800aa02:	230c      	movs	r3, #12
 800aa04:	602b      	str	r3, [r5, #0]
 800aa06:	e7d6      	b.n	800a9b6 <_free_r+0x22>
 800aa08:	6820      	ldr	r0, [r4, #0]
 800aa0a:	1821      	adds	r1, r4, r0
 800aa0c:	428b      	cmp	r3, r1
 800aa0e:	bf04      	itt	eq
 800aa10:	6819      	ldreq	r1, [r3, #0]
 800aa12:	685b      	ldreq	r3, [r3, #4]
 800aa14:	6063      	str	r3, [r4, #4]
 800aa16:	bf04      	itt	eq
 800aa18:	1809      	addeq	r1, r1, r0
 800aa1a:	6021      	streq	r1, [r4, #0]
 800aa1c:	6054      	str	r4, [r2, #4]
 800aa1e:	e7ca      	b.n	800a9b6 <_free_r+0x22>
 800aa20:	bd38      	pop	{r3, r4, r5, pc}
 800aa22:	bf00      	nop
 800aa24:	20003924 	.word	0x20003924

0800aa28 <sbrk_aligned>:
 800aa28:	b570      	push	{r4, r5, r6, lr}
 800aa2a:	4e0f      	ldr	r6, [pc, #60]	@ (800aa68 <sbrk_aligned+0x40>)
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	6831      	ldr	r1, [r6, #0]
 800aa30:	4605      	mov	r5, r0
 800aa32:	b911      	cbnz	r1, 800aa3a <sbrk_aligned+0x12>
 800aa34:	f000 fba4 	bl	800b180 <_sbrk_r>
 800aa38:	6030      	str	r0, [r6, #0]
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	f000 fb9f 	bl	800b180 <_sbrk_r>
 800aa42:	1c43      	adds	r3, r0, #1
 800aa44:	d103      	bne.n	800aa4e <sbrk_aligned+0x26>
 800aa46:	f04f 34ff 	mov.w	r4, #4294967295
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	bd70      	pop	{r4, r5, r6, pc}
 800aa4e:	1cc4      	adds	r4, r0, #3
 800aa50:	f024 0403 	bic.w	r4, r4, #3
 800aa54:	42a0      	cmp	r0, r4
 800aa56:	d0f8      	beq.n	800aa4a <sbrk_aligned+0x22>
 800aa58:	1a21      	subs	r1, r4, r0
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	f000 fb90 	bl	800b180 <_sbrk_r>
 800aa60:	3001      	adds	r0, #1
 800aa62:	d1f2      	bne.n	800aa4a <sbrk_aligned+0x22>
 800aa64:	e7ef      	b.n	800aa46 <sbrk_aligned+0x1e>
 800aa66:	bf00      	nop
 800aa68:	20003920 	.word	0x20003920

0800aa6c <_malloc_r>:
 800aa6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa70:	1ccd      	adds	r5, r1, #3
 800aa72:	f025 0503 	bic.w	r5, r5, #3
 800aa76:	3508      	adds	r5, #8
 800aa78:	2d0c      	cmp	r5, #12
 800aa7a:	bf38      	it	cc
 800aa7c:	250c      	movcc	r5, #12
 800aa7e:	2d00      	cmp	r5, #0
 800aa80:	4606      	mov	r6, r0
 800aa82:	db01      	blt.n	800aa88 <_malloc_r+0x1c>
 800aa84:	42a9      	cmp	r1, r5
 800aa86:	d904      	bls.n	800aa92 <_malloc_r+0x26>
 800aa88:	230c      	movs	r3, #12
 800aa8a:	6033      	str	r3, [r6, #0]
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab68 <_malloc_r+0xfc>
 800aa96:	f000 f869 	bl	800ab6c <__malloc_lock>
 800aa9a:	f8d8 3000 	ldr.w	r3, [r8]
 800aa9e:	461c      	mov	r4, r3
 800aaa0:	bb44      	cbnz	r4, 800aaf4 <_malloc_r+0x88>
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	f7ff ffbf 	bl	800aa28 <sbrk_aligned>
 800aaaa:	1c43      	adds	r3, r0, #1
 800aaac:	4604      	mov	r4, r0
 800aaae:	d158      	bne.n	800ab62 <_malloc_r+0xf6>
 800aab0:	f8d8 4000 	ldr.w	r4, [r8]
 800aab4:	4627      	mov	r7, r4
 800aab6:	2f00      	cmp	r7, #0
 800aab8:	d143      	bne.n	800ab42 <_malloc_r+0xd6>
 800aaba:	2c00      	cmp	r4, #0
 800aabc:	d04b      	beq.n	800ab56 <_malloc_r+0xea>
 800aabe:	6823      	ldr	r3, [r4, #0]
 800aac0:	4639      	mov	r1, r7
 800aac2:	4630      	mov	r0, r6
 800aac4:	eb04 0903 	add.w	r9, r4, r3
 800aac8:	f000 fb5a 	bl	800b180 <_sbrk_r>
 800aacc:	4581      	cmp	r9, r0
 800aace:	d142      	bne.n	800ab56 <_malloc_r+0xea>
 800aad0:	6821      	ldr	r1, [r4, #0]
 800aad2:	1a6d      	subs	r5, r5, r1
 800aad4:	4629      	mov	r1, r5
 800aad6:	4630      	mov	r0, r6
 800aad8:	f7ff ffa6 	bl	800aa28 <sbrk_aligned>
 800aadc:	3001      	adds	r0, #1
 800aade:	d03a      	beq.n	800ab56 <_malloc_r+0xea>
 800aae0:	6823      	ldr	r3, [r4, #0]
 800aae2:	442b      	add	r3, r5
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	f8d8 3000 	ldr.w	r3, [r8]
 800aaea:	685a      	ldr	r2, [r3, #4]
 800aaec:	bb62      	cbnz	r2, 800ab48 <_malloc_r+0xdc>
 800aaee:	f8c8 7000 	str.w	r7, [r8]
 800aaf2:	e00f      	b.n	800ab14 <_malloc_r+0xa8>
 800aaf4:	6822      	ldr	r2, [r4, #0]
 800aaf6:	1b52      	subs	r2, r2, r5
 800aaf8:	d420      	bmi.n	800ab3c <_malloc_r+0xd0>
 800aafa:	2a0b      	cmp	r2, #11
 800aafc:	d917      	bls.n	800ab2e <_malloc_r+0xc2>
 800aafe:	1961      	adds	r1, r4, r5
 800ab00:	42a3      	cmp	r3, r4
 800ab02:	6025      	str	r5, [r4, #0]
 800ab04:	bf18      	it	ne
 800ab06:	6059      	strne	r1, [r3, #4]
 800ab08:	6863      	ldr	r3, [r4, #4]
 800ab0a:	bf08      	it	eq
 800ab0c:	f8c8 1000 	streq.w	r1, [r8]
 800ab10:	5162      	str	r2, [r4, r5]
 800ab12:	604b      	str	r3, [r1, #4]
 800ab14:	4630      	mov	r0, r6
 800ab16:	f000 f82f 	bl	800ab78 <__malloc_unlock>
 800ab1a:	f104 000b 	add.w	r0, r4, #11
 800ab1e:	1d23      	adds	r3, r4, #4
 800ab20:	f020 0007 	bic.w	r0, r0, #7
 800ab24:	1ac2      	subs	r2, r0, r3
 800ab26:	bf1c      	itt	ne
 800ab28:	1a1b      	subne	r3, r3, r0
 800ab2a:	50a3      	strne	r3, [r4, r2]
 800ab2c:	e7af      	b.n	800aa8e <_malloc_r+0x22>
 800ab2e:	6862      	ldr	r2, [r4, #4]
 800ab30:	42a3      	cmp	r3, r4
 800ab32:	bf0c      	ite	eq
 800ab34:	f8c8 2000 	streq.w	r2, [r8]
 800ab38:	605a      	strne	r2, [r3, #4]
 800ab3a:	e7eb      	b.n	800ab14 <_malloc_r+0xa8>
 800ab3c:	4623      	mov	r3, r4
 800ab3e:	6864      	ldr	r4, [r4, #4]
 800ab40:	e7ae      	b.n	800aaa0 <_malloc_r+0x34>
 800ab42:	463c      	mov	r4, r7
 800ab44:	687f      	ldr	r7, [r7, #4]
 800ab46:	e7b6      	b.n	800aab6 <_malloc_r+0x4a>
 800ab48:	461a      	mov	r2, r3
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	42a3      	cmp	r3, r4
 800ab4e:	d1fb      	bne.n	800ab48 <_malloc_r+0xdc>
 800ab50:	2300      	movs	r3, #0
 800ab52:	6053      	str	r3, [r2, #4]
 800ab54:	e7de      	b.n	800ab14 <_malloc_r+0xa8>
 800ab56:	230c      	movs	r3, #12
 800ab58:	6033      	str	r3, [r6, #0]
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f000 f80c 	bl	800ab78 <__malloc_unlock>
 800ab60:	e794      	b.n	800aa8c <_malloc_r+0x20>
 800ab62:	6005      	str	r5, [r0, #0]
 800ab64:	e7d6      	b.n	800ab14 <_malloc_r+0xa8>
 800ab66:	bf00      	nop
 800ab68:	20003924 	.word	0x20003924

0800ab6c <__malloc_lock>:
 800ab6c:	4801      	ldr	r0, [pc, #4]	@ (800ab74 <__malloc_lock+0x8>)
 800ab6e:	f7ff bf07 	b.w	800a980 <__retarget_lock_acquire_recursive>
 800ab72:	bf00      	nop
 800ab74:	2000391c 	.word	0x2000391c

0800ab78 <__malloc_unlock>:
 800ab78:	4801      	ldr	r0, [pc, #4]	@ (800ab80 <__malloc_unlock+0x8>)
 800ab7a:	f7ff bf02 	b.w	800a982 <__retarget_lock_release_recursive>
 800ab7e:	bf00      	nop
 800ab80:	2000391c 	.word	0x2000391c

0800ab84 <__ssputs_r>:
 800ab84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab88:	688e      	ldr	r6, [r1, #8]
 800ab8a:	461f      	mov	r7, r3
 800ab8c:	42be      	cmp	r6, r7
 800ab8e:	680b      	ldr	r3, [r1, #0]
 800ab90:	4682      	mov	sl, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	4690      	mov	r8, r2
 800ab96:	d82d      	bhi.n	800abf4 <__ssputs_r+0x70>
 800ab98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aba0:	d026      	beq.n	800abf0 <__ssputs_r+0x6c>
 800aba2:	6965      	ldr	r5, [r4, #20]
 800aba4:	6909      	ldr	r1, [r1, #16]
 800aba6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abaa:	eba3 0901 	sub.w	r9, r3, r1
 800abae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abb2:	1c7b      	adds	r3, r7, #1
 800abb4:	444b      	add	r3, r9
 800abb6:	106d      	asrs	r5, r5, #1
 800abb8:	429d      	cmp	r5, r3
 800abba:	bf38      	it	cc
 800abbc:	461d      	movcc	r5, r3
 800abbe:	0553      	lsls	r3, r2, #21
 800abc0:	d527      	bpl.n	800ac12 <__ssputs_r+0x8e>
 800abc2:	4629      	mov	r1, r5
 800abc4:	f7ff ff52 	bl	800aa6c <_malloc_r>
 800abc8:	4606      	mov	r6, r0
 800abca:	b360      	cbz	r0, 800ac26 <__ssputs_r+0xa2>
 800abcc:	6921      	ldr	r1, [r4, #16]
 800abce:	464a      	mov	r2, r9
 800abd0:	f000 fae6 	bl	800b1a0 <memcpy>
 800abd4:	89a3      	ldrh	r3, [r4, #12]
 800abd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800abda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abde:	81a3      	strh	r3, [r4, #12]
 800abe0:	6126      	str	r6, [r4, #16]
 800abe2:	6165      	str	r5, [r4, #20]
 800abe4:	444e      	add	r6, r9
 800abe6:	eba5 0509 	sub.w	r5, r5, r9
 800abea:	6026      	str	r6, [r4, #0]
 800abec:	60a5      	str	r5, [r4, #8]
 800abee:	463e      	mov	r6, r7
 800abf0:	42be      	cmp	r6, r7
 800abf2:	d900      	bls.n	800abf6 <__ssputs_r+0x72>
 800abf4:	463e      	mov	r6, r7
 800abf6:	6820      	ldr	r0, [r4, #0]
 800abf8:	4632      	mov	r2, r6
 800abfa:	4641      	mov	r1, r8
 800abfc:	f000 faa6 	bl	800b14c <memmove>
 800ac00:	68a3      	ldr	r3, [r4, #8]
 800ac02:	1b9b      	subs	r3, r3, r6
 800ac04:	60a3      	str	r3, [r4, #8]
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	4433      	add	r3, r6
 800ac0a:	6023      	str	r3, [r4, #0]
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac12:	462a      	mov	r2, r5
 800ac14:	f000 fad2 	bl	800b1bc <_realloc_r>
 800ac18:	4606      	mov	r6, r0
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d1e0      	bne.n	800abe0 <__ssputs_r+0x5c>
 800ac1e:	6921      	ldr	r1, [r4, #16]
 800ac20:	4650      	mov	r0, sl
 800ac22:	f7ff feb7 	bl	800a994 <_free_r>
 800ac26:	230c      	movs	r3, #12
 800ac28:	f8ca 3000 	str.w	r3, [sl]
 800ac2c:	89a3      	ldrh	r3, [r4, #12]
 800ac2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac32:	81a3      	strh	r3, [r4, #12]
 800ac34:	f04f 30ff 	mov.w	r0, #4294967295
 800ac38:	e7e9      	b.n	800ac0e <__ssputs_r+0x8a>
	...

0800ac3c <_svfiprintf_r>:
 800ac3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac40:	4698      	mov	r8, r3
 800ac42:	898b      	ldrh	r3, [r1, #12]
 800ac44:	061b      	lsls	r3, r3, #24
 800ac46:	b09d      	sub	sp, #116	@ 0x74
 800ac48:	4607      	mov	r7, r0
 800ac4a:	460d      	mov	r5, r1
 800ac4c:	4614      	mov	r4, r2
 800ac4e:	d510      	bpl.n	800ac72 <_svfiprintf_r+0x36>
 800ac50:	690b      	ldr	r3, [r1, #16]
 800ac52:	b973      	cbnz	r3, 800ac72 <_svfiprintf_r+0x36>
 800ac54:	2140      	movs	r1, #64	@ 0x40
 800ac56:	f7ff ff09 	bl	800aa6c <_malloc_r>
 800ac5a:	6028      	str	r0, [r5, #0]
 800ac5c:	6128      	str	r0, [r5, #16]
 800ac5e:	b930      	cbnz	r0, 800ac6e <_svfiprintf_r+0x32>
 800ac60:	230c      	movs	r3, #12
 800ac62:	603b      	str	r3, [r7, #0]
 800ac64:	f04f 30ff 	mov.w	r0, #4294967295
 800ac68:	b01d      	add	sp, #116	@ 0x74
 800ac6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac6e:	2340      	movs	r3, #64	@ 0x40
 800ac70:	616b      	str	r3, [r5, #20]
 800ac72:	2300      	movs	r3, #0
 800ac74:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac76:	2320      	movs	r3, #32
 800ac78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac80:	2330      	movs	r3, #48	@ 0x30
 800ac82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ae20 <_svfiprintf_r+0x1e4>
 800ac86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac8a:	f04f 0901 	mov.w	r9, #1
 800ac8e:	4623      	mov	r3, r4
 800ac90:	469a      	mov	sl, r3
 800ac92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac96:	b10a      	cbz	r2, 800ac9c <_svfiprintf_r+0x60>
 800ac98:	2a25      	cmp	r2, #37	@ 0x25
 800ac9a:	d1f9      	bne.n	800ac90 <_svfiprintf_r+0x54>
 800ac9c:	ebba 0b04 	subs.w	fp, sl, r4
 800aca0:	d00b      	beq.n	800acba <_svfiprintf_r+0x7e>
 800aca2:	465b      	mov	r3, fp
 800aca4:	4622      	mov	r2, r4
 800aca6:	4629      	mov	r1, r5
 800aca8:	4638      	mov	r0, r7
 800acaa:	f7ff ff6b 	bl	800ab84 <__ssputs_r>
 800acae:	3001      	adds	r0, #1
 800acb0:	f000 80a7 	beq.w	800ae02 <_svfiprintf_r+0x1c6>
 800acb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acb6:	445a      	add	r2, fp
 800acb8:	9209      	str	r2, [sp, #36]	@ 0x24
 800acba:	f89a 3000 	ldrb.w	r3, [sl]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f000 809f 	beq.w	800ae02 <_svfiprintf_r+0x1c6>
 800acc4:	2300      	movs	r3, #0
 800acc6:	f04f 32ff 	mov.w	r2, #4294967295
 800acca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acce:	f10a 0a01 	add.w	sl, sl, #1
 800acd2:	9304      	str	r3, [sp, #16]
 800acd4:	9307      	str	r3, [sp, #28]
 800acd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800acda:	931a      	str	r3, [sp, #104]	@ 0x68
 800acdc:	4654      	mov	r4, sl
 800acde:	2205      	movs	r2, #5
 800ace0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ace4:	484e      	ldr	r0, [pc, #312]	@ (800ae20 <_svfiprintf_r+0x1e4>)
 800ace6:	f7f5 fa8b 	bl	8000200 <memchr>
 800acea:	9a04      	ldr	r2, [sp, #16]
 800acec:	b9d8      	cbnz	r0, 800ad26 <_svfiprintf_r+0xea>
 800acee:	06d0      	lsls	r0, r2, #27
 800acf0:	bf44      	itt	mi
 800acf2:	2320      	movmi	r3, #32
 800acf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acf8:	0711      	lsls	r1, r2, #28
 800acfa:	bf44      	itt	mi
 800acfc:	232b      	movmi	r3, #43	@ 0x2b
 800acfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad02:	f89a 3000 	ldrb.w	r3, [sl]
 800ad06:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad08:	d015      	beq.n	800ad36 <_svfiprintf_r+0xfa>
 800ad0a:	9a07      	ldr	r2, [sp, #28]
 800ad0c:	4654      	mov	r4, sl
 800ad0e:	2000      	movs	r0, #0
 800ad10:	f04f 0c0a 	mov.w	ip, #10
 800ad14:	4621      	mov	r1, r4
 800ad16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad1a:	3b30      	subs	r3, #48	@ 0x30
 800ad1c:	2b09      	cmp	r3, #9
 800ad1e:	d94b      	bls.n	800adb8 <_svfiprintf_r+0x17c>
 800ad20:	b1b0      	cbz	r0, 800ad50 <_svfiprintf_r+0x114>
 800ad22:	9207      	str	r2, [sp, #28]
 800ad24:	e014      	b.n	800ad50 <_svfiprintf_r+0x114>
 800ad26:	eba0 0308 	sub.w	r3, r0, r8
 800ad2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	9304      	str	r3, [sp, #16]
 800ad32:	46a2      	mov	sl, r4
 800ad34:	e7d2      	b.n	800acdc <_svfiprintf_r+0xa0>
 800ad36:	9b03      	ldr	r3, [sp, #12]
 800ad38:	1d19      	adds	r1, r3, #4
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	9103      	str	r1, [sp, #12]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	bfbb      	ittet	lt
 800ad42:	425b      	neglt	r3, r3
 800ad44:	f042 0202 	orrlt.w	r2, r2, #2
 800ad48:	9307      	strge	r3, [sp, #28]
 800ad4a:	9307      	strlt	r3, [sp, #28]
 800ad4c:	bfb8      	it	lt
 800ad4e:	9204      	strlt	r2, [sp, #16]
 800ad50:	7823      	ldrb	r3, [r4, #0]
 800ad52:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad54:	d10a      	bne.n	800ad6c <_svfiprintf_r+0x130>
 800ad56:	7863      	ldrb	r3, [r4, #1]
 800ad58:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad5a:	d132      	bne.n	800adc2 <_svfiprintf_r+0x186>
 800ad5c:	9b03      	ldr	r3, [sp, #12]
 800ad5e:	1d1a      	adds	r2, r3, #4
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	9203      	str	r2, [sp, #12]
 800ad64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad68:	3402      	adds	r4, #2
 800ad6a:	9305      	str	r3, [sp, #20]
 800ad6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ae30 <_svfiprintf_r+0x1f4>
 800ad70:	7821      	ldrb	r1, [r4, #0]
 800ad72:	2203      	movs	r2, #3
 800ad74:	4650      	mov	r0, sl
 800ad76:	f7f5 fa43 	bl	8000200 <memchr>
 800ad7a:	b138      	cbz	r0, 800ad8c <_svfiprintf_r+0x150>
 800ad7c:	9b04      	ldr	r3, [sp, #16]
 800ad7e:	eba0 000a 	sub.w	r0, r0, sl
 800ad82:	2240      	movs	r2, #64	@ 0x40
 800ad84:	4082      	lsls	r2, r0
 800ad86:	4313      	orrs	r3, r2
 800ad88:	3401      	adds	r4, #1
 800ad8a:	9304      	str	r3, [sp, #16]
 800ad8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad90:	4824      	ldr	r0, [pc, #144]	@ (800ae24 <_svfiprintf_r+0x1e8>)
 800ad92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad96:	2206      	movs	r2, #6
 800ad98:	f7f5 fa32 	bl	8000200 <memchr>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	d036      	beq.n	800ae0e <_svfiprintf_r+0x1d2>
 800ada0:	4b21      	ldr	r3, [pc, #132]	@ (800ae28 <_svfiprintf_r+0x1ec>)
 800ada2:	bb1b      	cbnz	r3, 800adec <_svfiprintf_r+0x1b0>
 800ada4:	9b03      	ldr	r3, [sp, #12]
 800ada6:	3307      	adds	r3, #7
 800ada8:	f023 0307 	bic.w	r3, r3, #7
 800adac:	3308      	adds	r3, #8
 800adae:	9303      	str	r3, [sp, #12]
 800adb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adb2:	4433      	add	r3, r6
 800adb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800adb6:	e76a      	b.n	800ac8e <_svfiprintf_r+0x52>
 800adb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800adbc:	460c      	mov	r4, r1
 800adbe:	2001      	movs	r0, #1
 800adc0:	e7a8      	b.n	800ad14 <_svfiprintf_r+0xd8>
 800adc2:	2300      	movs	r3, #0
 800adc4:	3401      	adds	r4, #1
 800adc6:	9305      	str	r3, [sp, #20]
 800adc8:	4619      	mov	r1, r3
 800adca:	f04f 0c0a 	mov.w	ip, #10
 800adce:	4620      	mov	r0, r4
 800add0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800add4:	3a30      	subs	r2, #48	@ 0x30
 800add6:	2a09      	cmp	r2, #9
 800add8:	d903      	bls.n	800ade2 <_svfiprintf_r+0x1a6>
 800adda:	2b00      	cmp	r3, #0
 800addc:	d0c6      	beq.n	800ad6c <_svfiprintf_r+0x130>
 800adde:	9105      	str	r1, [sp, #20]
 800ade0:	e7c4      	b.n	800ad6c <_svfiprintf_r+0x130>
 800ade2:	fb0c 2101 	mla	r1, ip, r1, r2
 800ade6:	4604      	mov	r4, r0
 800ade8:	2301      	movs	r3, #1
 800adea:	e7f0      	b.n	800adce <_svfiprintf_r+0x192>
 800adec:	ab03      	add	r3, sp, #12
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	462a      	mov	r2, r5
 800adf2:	4b0e      	ldr	r3, [pc, #56]	@ (800ae2c <_svfiprintf_r+0x1f0>)
 800adf4:	a904      	add	r1, sp, #16
 800adf6:	4638      	mov	r0, r7
 800adf8:	f3af 8000 	nop.w
 800adfc:	1c42      	adds	r2, r0, #1
 800adfe:	4606      	mov	r6, r0
 800ae00:	d1d6      	bne.n	800adb0 <_svfiprintf_r+0x174>
 800ae02:	89ab      	ldrh	r3, [r5, #12]
 800ae04:	065b      	lsls	r3, r3, #25
 800ae06:	f53f af2d 	bmi.w	800ac64 <_svfiprintf_r+0x28>
 800ae0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae0c:	e72c      	b.n	800ac68 <_svfiprintf_r+0x2c>
 800ae0e:	ab03      	add	r3, sp, #12
 800ae10:	9300      	str	r3, [sp, #0]
 800ae12:	462a      	mov	r2, r5
 800ae14:	4b05      	ldr	r3, [pc, #20]	@ (800ae2c <_svfiprintf_r+0x1f0>)
 800ae16:	a904      	add	r1, sp, #16
 800ae18:	4638      	mov	r0, r7
 800ae1a:	f000 f879 	bl	800af10 <_printf_i>
 800ae1e:	e7ed      	b.n	800adfc <_svfiprintf_r+0x1c0>
 800ae20:	0800c9f9 	.word	0x0800c9f9
 800ae24:	0800ca03 	.word	0x0800ca03
 800ae28:	00000000 	.word	0x00000000
 800ae2c:	0800ab85 	.word	0x0800ab85
 800ae30:	0800c9ff 	.word	0x0800c9ff

0800ae34 <_printf_common>:
 800ae34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae38:	4616      	mov	r6, r2
 800ae3a:	4698      	mov	r8, r3
 800ae3c:	688a      	ldr	r2, [r1, #8]
 800ae3e:	690b      	ldr	r3, [r1, #16]
 800ae40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae44:	4293      	cmp	r3, r2
 800ae46:	bfb8      	it	lt
 800ae48:	4613      	movlt	r3, r2
 800ae4a:	6033      	str	r3, [r6, #0]
 800ae4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae50:	4607      	mov	r7, r0
 800ae52:	460c      	mov	r4, r1
 800ae54:	b10a      	cbz	r2, 800ae5a <_printf_common+0x26>
 800ae56:	3301      	adds	r3, #1
 800ae58:	6033      	str	r3, [r6, #0]
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	0699      	lsls	r1, r3, #26
 800ae5e:	bf42      	ittt	mi
 800ae60:	6833      	ldrmi	r3, [r6, #0]
 800ae62:	3302      	addmi	r3, #2
 800ae64:	6033      	strmi	r3, [r6, #0]
 800ae66:	6825      	ldr	r5, [r4, #0]
 800ae68:	f015 0506 	ands.w	r5, r5, #6
 800ae6c:	d106      	bne.n	800ae7c <_printf_common+0x48>
 800ae6e:	f104 0a19 	add.w	sl, r4, #25
 800ae72:	68e3      	ldr	r3, [r4, #12]
 800ae74:	6832      	ldr	r2, [r6, #0]
 800ae76:	1a9b      	subs	r3, r3, r2
 800ae78:	42ab      	cmp	r3, r5
 800ae7a:	dc26      	bgt.n	800aeca <_printf_common+0x96>
 800ae7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae80:	6822      	ldr	r2, [r4, #0]
 800ae82:	3b00      	subs	r3, #0
 800ae84:	bf18      	it	ne
 800ae86:	2301      	movne	r3, #1
 800ae88:	0692      	lsls	r2, r2, #26
 800ae8a:	d42b      	bmi.n	800aee4 <_printf_common+0xb0>
 800ae8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae90:	4641      	mov	r1, r8
 800ae92:	4638      	mov	r0, r7
 800ae94:	47c8      	blx	r9
 800ae96:	3001      	adds	r0, #1
 800ae98:	d01e      	beq.n	800aed8 <_printf_common+0xa4>
 800ae9a:	6823      	ldr	r3, [r4, #0]
 800ae9c:	6922      	ldr	r2, [r4, #16]
 800ae9e:	f003 0306 	and.w	r3, r3, #6
 800aea2:	2b04      	cmp	r3, #4
 800aea4:	bf02      	ittt	eq
 800aea6:	68e5      	ldreq	r5, [r4, #12]
 800aea8:	6833      	ldreq	r3, [r6, #0]
 800aeaa:	1aed      	subeq	r5, r5, r3
 800aeac:	68a3      	ldr	r3, [r4, #8]
 800aeae:	bf0c      	ite	eq
 800aeb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aeb4:	2500      	movne	r5, #0
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	bfc4      	itt	gt
 800aeba:	1a9b      	subgt	r3, r3, r2
 800aebc:	18ed      	addgt	r5, r5, r3
 800aebe:	2600      	movs	r6, #0
 800aec0:	341a      	adds	r4, #26
 800aec2:	42b5      	cmp	r5, r6
 800aec4:	d11a      	bne.n	800aefc <_printf_common+0xc8>
 800aec6:	2000      	movs	r0, #0
 800aec8:	e008      	b.n	800aedc <_printf_common+0xa8>
 800aeca:	2301      	movs	r3, #1
 800aecc:	4652      	mov	r2, sl
 800aece:	4641      	mov	r1, r8
 800aed0:	4638      	mov	r0, r7
 800aed2:	47c8      	blx	r9
 800aed4:	3001      	adds	r0, #1
 800aed6:	d103      	bne.n	800aee0 <_printf_common+0xac>
 800aed8:	f04f 30ff 	mov.w	r0, #4294967295
 800aedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee0:	3501      	adds	r5, #1
 800aee2:	e7c6      	b.n	800ae72 <_printf_common+0x3e>
 800aee4:	18e1      	adds	r1, r4, r3
 800aee6:	1c5a      	adds	r2, r3, #1
 800aee8:	2030      	movs	r0, #48	@ 0x30
 800aeea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aeee:	4422      	add	r2, r4
 800aef0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aef4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aef8:	3302      	adds	r3, #2
 800aefa:	e7c7      	b.n	800ae8c <_printf_common+0x58>
 800aefc:	2301      	movs	r3, #1
 800aefe:	4622      	mov	r2, r4
 800af00:	4641      	mov	r1, r8
 800af02:	4638      	mov	r0, r7
 800af04:	47c8      	blx	r9
 800af06:	3001      	adds	r0, #1
 800af08:	d0e6      	beq.n	800aed8 <_printf_common+0xa4>
 800af0a:	3601      	adds	r6, #1
 800af0c:	e7d9      	b.n	800aec2 <_printf_common+0x8e>
	...

0800af10 <_printf_i>:
 800af10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af14:	7e0f      	ldrb	r7, [r1, #24]
 800af16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af18:	2f78      	cmp	r7, #120	@ 0x78
 800af1a:	4691      	mov	r9, r2
 800af1c:	4680      	mov	r8, r0
 800af1e:	460c      	mov	r4, r1
 800af20:	469a      	mov	sl, r3
 800af22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af26:	d807      	bhi.n	800af38 <_printf_i+0x28>
 800af28:	2f62      	cmp	r7, #98	@ 0x62
 800af2a:	d80a      	bhi.n	800af42 <_printf_i+0x32>
 800af2c:	2f00      	cmp	r7, #0
 800af2e:	f000 80d1 	beq.w	800b0d4 <_printf_i+0x1c4>
 800af32:	2f58      	cmp	r7, #88	@ 0x58
 800af34:	f000 80b8 	beq.w	800b0a8 <_printf_i+0x198>
 800af38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af40:	e03a      	b.n	800afb8 <_printf_i+0xa8>
 800af42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af46:	2b15      	cmp	r3, #21
 800af48:	d8f6      	bhi.n	800af38 <_printf_i+0x28>
 800af4a:	a101      	add	r1, pc, #4	@ (adr r1, 800af50 <_printf_i+0x40>)
 800af4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af50:	0800afa9 	.word	0x0800afa9
 800af54:	0800afbd 	.word	0x0800afbd
 800af58:	0800af39 	.word	0x0800af39
 800af5c:	0800af39 	.word	0x0800af39
 800af60:	0800af39 	.word	0x0800af39
 800af64:	0800af39 	.word	0x0800af39
 800af68:	0800afbd 	.word	0x0800afbd
 800af6c:	0800af39 	.word	0x0800af39
 800af70:	0800af39 	.word	0x0800af39
 800af74:	0800af39 	.word	0x0800af39
 800af78:	0800af39 	.word	0x0800af39
 800af7c:	0800b0bb 	.word	0x0800b0bb
 800af80:	0800afe7 	.word	0x0800afe7
 800af84:	0800b075 	.word	0x0800b075
 800af88:	0800af39 	.word	0x0800af39
 800af8c:	0800af39 	.word	0x0800af39
 800af90:	0800b0dd 	.word	0x0800b0dd
 800af94:	0800af39 	.word	0x0800af39
 800af98:	0800afe7 	.word	0x0800afe7
 800af9c:	0800af39 	.word	0x0800af39
 800afa0:	0800af39 	.word	0x0800af39
 800afa4:	0800b07d 	.word	0x0800b07d
 800afa8:	6833      	ldr	r3, [r6, #0]
 800afaa:	1d1a      	adds	r2, r3, #4
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	6032      	str	r2, [r6, #0]
 800afb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800afb8:	2301      	movs	r3, #1
 800afba:	e09c      	b.n	800b0f6 <_printf_i+0x1e6>
 800afbc:	6833      	ldr	r3, [r6, #0]
 800afbe:	6820      	ldr	r0, [r4, #0]
 800afc0:	1d19      	adds	r1, r3, #4
 800afc2:	6031      	str	r1, [r6, #0]
 800afc4:	0606      	lsls	r6, r0, #24
 800afc6:	d501      	bpl.n	800afcc <_printf_i+0xbc>
 800afc8:	681d      	ldr	r5, [r3, #0]
 800afca:	e003      	b.n	800afd4 <_printf_i+0xc4>
 800afcc:	0645      	lsls	r5, r0, #25
 800afce:	d5fb      	bpl.n	800afc8 <_printf_i+0xb8>
 800afd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800afd4:	2d00      	cmp	r5, #0
 800afd6:	da03      	bge.n	800afe0 <_printf_i+0xd0>
 800afd8:	232d      	movs	r3, #45	@ 0x2d
 800afda:	426d      	negs	r5, r5
 800afdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afe0:	4858      	ldr	r0, [pc, #352]	@ (800b144 <_printf_i+0x234>)
 800afe2:	230a      	movs	r3, #10
 800afe4:	e011      	b.n	800b00a <_printf_i+0xfa>
 800afe6:	6821      	ldr	r1, [r4, #0]
 800afe8:	6833      	ldr	r3, [r6, #0]
 800afea:	0608      	lsls	r0, r1, #24
 800afec:	f853 5b04 	ldr.w	r5, [r3], #4
 800aff0:	d402      	bmi.n	800aff8 <_printf_i+0xe8>
 800aff2:	0649      	lsls	r1, r1, #25
 800aff4:	bf48      	it	mi
 800aff6:	b2ad      	uxthmi	r5, r5
 800aff8:	2f6f      	cmp	r7, #111	@ 0x6f
 800affa:	4852      	ldr	r0, [pc, #328]	@ (800b144 <_printf_i+0x234>)
 800affc:	6033      	str	r3, [r6, #0]
 800affe:	bf14      	ite	ne
 800b000:	230a      	movne	r3, #10
 800b002:	2308      	moveq	r3, #8
 800b004:	2100      	movs	r1, #0
 800b006:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b00a:	6866      	ldr	r6, [r4, #4]
 800b00c:	60a6      	str	r6, [r4, #8]
 800b00e:	2e00      	cmp	r6, #0
 800b010:	db05      	blt.n	800b01e <_printf_i+0x10e>
 800b012:	6821      	ldr	r1, [r4, #0]
 800b014:	432e      	orrs	r6, r5
 800b016:	f021 0104 	bic.w	r1, r1, #4
 800b01a:	6021      	str	r1, [r4, #0]
 800b01c:	d04b      	beq.n	800b0b6 <_printf_i+0x1a6>
 800b01e:	4616      	mov	r6, r2
 800b020:	fbb5 f1f3 	udiv	r1, r5, r3
 800b024:	fb03 5711 	mls	r7, r3, r1, r5
 800b028:	5dc7      	ldrb	r7, [r0, r7]
 800b02a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b02e:	462f      	mov	r7, r5
 800b030:	42bb      	cmp	r3, r7
 800b032:	460d      	mov	r5, r1
 800b034:	d9f4      	bls.n	800b020 <_printf_i+0x110>
 800b036:	2b08      	cmp	r3, #8
 800b038:	d10b      	bne.n	800b052 <_printf_i+0x142>
 800b03a:	6823      	ldr	r3, [r4, #0]
 800b03c:	07df      	lsls	r7, r3, #31
 800b03e:	d508      	bpl.n	800b052 <_printf_i+0x142>
 800b040:	6923      	ldr	r3, [r4, #16]
 800b042:	6861      	ldr	r1, [r4, #4]
 800b044:	4299      	cmp	r1, r3
 800b046:	bfde      	ittt	le
 800b048:	2330      	movle	r3, #48	@ 0x30
 800b04a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b04e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b052:	1b92      	subs	r2, r2, r6
 800b054:	6122      	str	r2, [r4, #16]
 800b056:	f8cd a000 	str.w	sl, [sp]
 800b05a:	464b      	mov	r3, r9
 800b05c:	aa03      	add	r2, sp, #12
 800b05e:	4621      	mov	r1, r4
 800b060:	4640      	mov	r0, r8
 800b062:	f7ff fee7 	bl	800ae34 <_printf_common>
 800b066:	3001      	adds	r0, #1
 800b068:	d14a      	bne.n	800b100 <_printf_i+0x1f0>
 800b06a:	f04f 30ff 	mov.w	r0, #4294967295
 800b06e:	b004      	add	sp, #16
 800b070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b074:	6823      	ldr	r3, [r4, #0]
 800b076:	f043 0320 	orr.w	r3, r3, #32
 800b07a:	6023      	str	r3, [r4, #0]
 800b07c:	4832      	ldr	r0, [pc, #200]	@ (800b148 <_printf_i+0x238>)
 800b07e:	2778      	movs	r7, #120	@ 0x78
 800b080:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b084:	6823      	ldr	r3, [r4, #0]
 800b086:	6831      	ldr	r1, [r6, #0]
 800b088:	061f      	lsls	r7, r3, #24
 800b08a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b08e:	d402      	bmi.n	800b096 <_printf_i+0x186>
 800b090:	065f      	lsls	r7, r3, #25
 800b092:	bf48      	it	mi
 800b094:	b2ad      	uxthmi	r5, r5
 800b096:	6031      	str	r1, [r6, #0]
 800b098:	07d9      	lsls	r1, r3, #31
 800b09a:	bf44      	itt	mi
 800b09c:	f043 0320 	orrmi.w	r3, r3, #32
 800b0a0:	6023      	strmi	r3, [r4, #0]
 800b0a2:	b11d      	cbz	r5, 800b0ac <_printf_i+0x19c>
 800b0a4:	2310      	movs	r3, #16
 800b0a6:	e7ad      	b.n	800b004 <_printf_i+0xf4>
 800b0a8:	4826      	ldr	r0, [pc, #152]	@ (800b144 <_printf_i+0x234>)
 800b0aa:	e7e9      	b.n	800b080 <_printf_i+0x170>
 800b0ac:	6823      	ldr	r3, [r4, #0]
 800b0ae:	f023 0320 	bic.w	r3, r3, #32
 800b0b2:	6023      	str	r3, [r4, #0]
 800b0b4:	e7f6      	b.n	800b0a4 <_printf_i+0x194>
 800b0b6:	4616      	mov	r6, r2
 800b0b8:	e7bd      	b.n	800b036 <_printf_i+0x126>
 800b0ba:	6833      	ldr	r3, [r6, #0]
 800b0bc:	6825      	ldr	r5, [r4, #0]
 800b0be:	6961      	ldr	r1, [r4, #20]
 800b0c0:	1d18      	adds	r0, r3, #4
 800b0c2:	6030      	str	r0, [r6, #0]
 800b0c4:	062e      	lsls	r6, r5, #24
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	d501      	bpl.n	800b0ce <_printf_i+0x1be>
 800b0ca:	6019      	str	r1, [r3, #0]
 800b0cc:	e002      	b.n	800b0d4 <_printf_i+0x1c4>
 800b0ce:	0668      	lsls	r0, r5, #25
 800b0d0:	d5fb      	bpl.n	800b0ca <_printf_i+0x1ba>
 800b0d2:	8019      	strh	r1, [r3, #0]
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	6123      	str	r3, [r4, #16]
 800b0d8:	4616      	mov	r6, r2
 800b0da:	e7bc      	b.n	800b056 <_printf_i+0x146>
 800b0dc:	6833      	ldr	r3, [r6, #0]
 800b0de:	1d1a      	adds	r2, r3, #4
 800b0e0:	6032      	str	r2, [r6, #0]
 800b0e2:	681e      	ldr	r6, [r3, #0]
 800b0e4:	6862      	ldr	r2, [r4, #4]
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f7f5 f889 	bl	8000200 <memchr>
 800b0ee:	b108      	cbz	r0, 800b0f4 <_printf_i+0x1e4>
 800b0f0:	1b80      	subs	r0, r0, r6
 800b0f2:	6060      	str	r0, [r4, #4]
 800b0f4:	6863      	ldr	r3, [r4, #4]
 800b0f6:	6123      	str	r3, [r4, #16]
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0fe:	e7aa      	b.n	800b056 <_printf_i+0x146>
 800b100:	6923      	ldr	r3, [r4, #16]
 800b102:	4632      	mov	r2, r6
 800b104:	4649      	mov	r1, r9
 800b106:	4640      	mov	r0, r8
 800b108:	47d0      	blx	sl
 800b10a:	3001      	adds	r0, #1
 800b10c:	d0ad      	beq.n	800b06a <_printf_i+0x15a>
 800b10e:	6823      	ldr	r3, [r4, #0]
 800b110:	079b      	lsls	r3, r3, #30
 800b112:	d413      	bmi.n	800b13c <_printf_i+0x22c>
 800b114:	68e0      	ldr	r0, [r4, #12]
 800b116:	9b03      	ldr	r3, [sp, #12]
 800b118:	4298      	cmp	r0, r3
 800b11a:	bfb8      	it	lt
 800b11c:	4618      	movlt	r0, r3
 800b11e:	e7a6      	b.n	800b06e <_printf_i+0x15e>
 800b120:	2301      	movs	r3, #1
 800b122:	4632      	mov	r2, r6
 800b124:	4649      	mov	r1, r9
 800b126:	4640      	mov	r0, r8
 800b128:	47d0      	blx	sl
 800b12a:	3001      	adds	r0, #1
 800b12c:	d09d      	beq.n	800b06a <_printf_i+0x15a>
 800b12e:	3501      	adds	r5, #1
 800b130:	68e3      	ldr	r3, [r4, #12]
 800b132:	9903      	ldr	r1, [sp, #12]
 800b134:	1a5b      	subs	r3, r3, r1
 800b136:	42ab      	cmp	r3, r5
 800b138:	dcf2      	bgt.n	800b120 <_printf_i+0x210>
 800b13a:	e7eb      	b.n	800b114 <_printf_i+0x204>
 800b13c:	2500      	movs	r5, #0
 800b13e:	f104 0619 	add.w	r6, r4, #25
 800b142:	e7f5      	b.n	800b130 <_printf_i+0x220>
 800b144:	0800ca0a 	.word	0x0800ca0a
 800b148:	0800ca1b 	.word	0x0800ca1b

0800b14c <memmove>:
 800b14c:	4288      	cmp	r0, r1
 800b14e:	b510      	push	{r4, lr}
 800b150:	eb01 0402 	add.w	r4, r1, r2
 800b154:	d902      	bls.n	800b15c <memmove+0x10>
 800b156:	4284      	cmp	r4, r0
 800b158:	4623      	mov	r3, r4
 800b15a:	d807      	bhi.n	800b16c <memmove+0x20>
 800b15c:	1e43      	subs	r3, r0, #1
 800b15e:	42a1      	cmp	r1, r4
 800b160:	d008      	beq.n	800b174 <memmove+0x28>
 800b162:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b166:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b16a:	e7f8      	b.n	800b15e <memmove+0x12>
 800b16c:	4402      	add	r2, r0
 800b16e:	4601      	mov	r1, r0
 800b170:	428a      	cmp	r2, r1
 800b172:	d100      	bne.n	800b176 <memmove+0x2a>
 800b174:	bd10      	pop	{r4, pc}
 800b176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b17a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b17e:	e7f7      	b.n	800b170 <memmove+0x24>

0800b180 <_sbrk_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	4d06      	ldr	r5, [pc, #24]	@ (800b19c <_sbrk_r+0x1c>)
 800b184:	2300      	movs	r3, #0
 800b186:	4604      	mov	r4, r0
 800b188:	4608      	mov	r0, r1
 800b18a:	602b      	str	r3, [r5, #0]
 800b18c:	f7fb fb1e 	bl	80067cc <_sbrk>
 800b190:	1c43      	adds	r3, r0, #1
 800b192:	d102      	bne.n	800b19a <_sbrk_r+0x1a>
 800b194:	682b      	ldr	r3, [r5, #0]
 800b196:	b103      	cbz	r3, 800b19a <_sbrk_r+0x1a>
 800b198:	6023      	str	r3, [r4, #0]
 800b19a:	bd38      	pop	{r3, r4, r5, pc}
 800b19c:	20003918 	.word	0x20003918

0800b1a0 <memcpy>:
 800b1a0:	440a      	add	r2, r1
 800b1a2:	4291      	cmp	r1, r2
 800b1a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1a8:	d100      	bne.n	800b1ac <memcpy+0xc>
 800b1aa:	4770      	bx	lr
 800b1ac:	b510      	push	{r4, lr}
 800b1ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1b6:	4291      	cmp	r1, r2
 800b1b8:	d1f9      	bne.n	800b1ae <memcpy+0xe>
 800b1ba:	bd10      	pop	{r4, pc}

0800b1bc <_realloc_r>:
 800b1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c0:	4607      	mov	r7, r0
 800b1c2:	4614      	mov	r4, r2
 800b1c4:	460d      	mov	r5, r1
 800b1c6:	b921      	cbnz	r1, 800b1d2 <_realloc_r+0x16>
 800b1c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	f7ff bc4d 	b.w	800aa6c <_malloc_r>
 800b1d2:	b92a      	cbnz	r2, 800b1e0 <_realloc_r+0x24>
 800b1d4:	f7ff fbde 	bl	800a994 <_free_r>
 800b1d8:	4625      	mov	r5, r4
 800b1da:	4628      	mov	r0, r5
 800b1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1e0:	f000 f81a 	bl	800b218 <_malloc_usable_size_r>
 800b1e4:	4284      	cmp	r4, r0
 800b1e6:	4606      	mov	r6, r0
 800b1e8:	d802      	bhi.n	800b1f0 <_realloc_r+0x34>
 800b1ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1ee:	d8f4      	bhi.n	800b1da <_realloc_r+0x1e>
 800b1f0:	4621      	mov	r1, r4
 800b1f2:	4638      	mov	r0, r7
 800b1f4:	f7ff fc3a 	bl	800aa6c <_malloc_r>
 800b1f8:	4680      	mov	r8, r0
 800b1fa:	b908      	cbnz	r0, 800b200 <_realloc_r+0x44>
 800b1fc:	4645      	mov	r5, r8
 800b1fe:	e7ec      	b.n	800b1da <_realloc_r+0x1e>
 800b200:	42b4      	cmp	r4, r6
 800b202:	4622      	mov	r2, r4
 800b204:	4629      	mov	r1, r5
 800b206:	bf28      	it	cs
 800b208:	4632      	movcs	r2, r6
 800b20a:	f7ff ffc9 	bl	800b1a0 <memcpy>
 800b20e:	4629      	mov	r1, r5
 800b210:	4638      	mov	r0, r7
 800b212:	f7ff fbbf 	bl	800a994 <_free_r>
 800b216:	e7f1      	b.n	800b1fc <_realloc_r+0x40>

0800b218 <_malloc_usable_size_r>:
 800b218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b21c:	1f18      	subs	r0, r3, #4
 800b21e:	2b00      	cmp	r3, #0
 800b220:	bfbc      	itt	lt
 800b222:	580b      	ldrlt	r3, [r1, r0]
 800b224:	18c0      	addlt	r0, r0, r3
 800b226:	4770      	bx	lr

0800b228 <_init>:
 800b228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22a:	bf00      	nop
 800b22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b22e:	bc08      	pop	{r3}
 800b230:	469e      	mov	lr, r3
 800b232:	4770      	bx	lr

0800b234 <_fini>:
 800b234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b236:	bf00      	nop
 800b238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b23a:	bc08      	pop	{r3}
 800b23c:	469e      	mov	lr, r3
 800b23e:	4770      	bx	lr
